{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/gitee.png","path":"images/gitee.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","path":"images/hexo-tag-chart.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo.png","path":"images/hexo.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","path":"js/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.css","path":"css/fonts/remixicon.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","path":"css/fonts/remixicon.eot","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","path":"css/fonts/remixicon.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","path":"css/fonts/remixicon.ttf","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","path":"css/fonts/remixicon.woff","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","path":"css/fonts/remixicon.woff2","modified":0,"renderable":1},{"_id":"source/HTML/Dream.png","path":"HTML/Dream.png","modified":0,"renderable":0},{"_id":"source/HTML/bgvideo.mp4","path":"HTML/bgvideo.mp4","modified":0,"renderable":0},{"_id":"source/HTML/girl.jpg","path":"HTML/girl.jpg","modified":0,"renderable":0},{"_id":"source/HTML/girlsit.gif","path":"HTML/girlsit.gif","modified":0,"renderable":0},{"_id":"source/HTML/index.html","path":"HTML/index.html","modified":0,"renderable":0},{"_id":"source/HTML/qianxia.ttf","path":"HTML/qianxia.ttf","modified":0,"renderable":0},{"_id":"source/HTML/zijie.index.txt","path":"HTML/zijie.index.txt","modified":0,"renderable":0},{"_id":"source/xinnian/image.php","path":"xinnian/image.php","modified":0,"renderable":0},{"_id":"source/xinnian/img.txt","path":"xinnian/img.txt","modified":0,"renderable":0},{"_id":"source/img/1.png","path":"img/1.png","modified":0,"renderable":0},{"_id":"source/img/2.png","path":"img/2.png","modified":0,"renderable":0},{"_id":"source/img/22cf517c3686de1119cf1f156160bd4.jpg","path":"img/22cf517c3686de1119cf1f156160bd4.jpg","modified":0,"renderable":0},{"_id":"source/img/3.png","path":"img/3.png","modified":0,"renderable":0},{"_id":"source/img/ASCIIout.png","path":"img/ASCIIout.png","modified":0,"renderable":0},{"_id":"source/img/BinarySearch.gif","path":"img/BinarySearch.gif","modified":0,"renderable":0},{"_id":"source/img/BinaryTreenum.png","path":"img/BinaryTreenum.png","modified":0,"renderable":0},{"_id":"source/img/C67.png","path":"img/C67.png","modified":0,"renderable":0},{"_id":"source/img/C99.png","path":"img/C99.png","modified":0,"renderable":0},{"_id":"source/img/C992.png","path":"img/C992.png","modified":0,"renderable":0},{"_id":"source/img/C99sup.png","path":"img/C99sup.png","modified":0,"renderable":0},{"_id":"source/img/Chapter1.2.png","path":"img/Chapter1.2.png","modified":0,"renderable":0},{"_id":"source/img/Chapter1.3.png","path":"img/Chapter1.3.png","modified":0,"renderable":0},{"_id":"source/img/Chapter1.6.png","path":"img/Chapter1.6.png","modified":0,"renderable":0},{"_id":"source/img/Chathappy.jpg","path":"img/Chathappy.jpg","modified":0,"renderable":0},{"_id":"source/img/ErrandWarn.png","path":"img/ErrandWarn.png","modified":0,"renderable":0},{"_id":"source/img/Feb19th.jpg","path":"img/Feb19th.jpg","modified":0,"renderable":0},{"_id":"source/img/DefinenInitial.png","path":"img/DefinenInitial.png","modified":0,"renderable":0},{"_id":"source/img/Feb20th.jpg","path":"img/Feb20th.jpg","modified":0,"renderable":0},{"_id":"source/img/Feb21st.jpg","path":"img/Feb21st.jpg","modified":0,"renderable":0},{"_id":"source/img/Feb22nd.jpg","path":"img/Feb22nd.jpg","modified":0,"renderable":0},{"_id":"source/img/Feb23rd.jpg","path":"img/Feb23rd.jpg","modified":0,"renderable":0},{"_id":"source/img/Feb24th.jpg","path":"img/Feb24th.jpg","modified":0,"renderable":0},{"_id":"source/img/Feb25th.jpg","path":"img/Feb25th.jpg","modified":0,"renderable":0},{"_id":"source/img/Feb26th.jpg","path":"img/Feb26th.jpg","modified":0,"renderable":0},{"_id":"source/img/Feb27th.jpg","path":"img/Feb27th.jpg","modified":0,"renderable":0},{"_id":"source/img/Feb28th.jpg","path":"img/Feb28th.jpg","modified":0,"renderable":0},{"_id":"source/img/Feb29th.png","path":"img/Feb29th.png","modified":0,"renderable":0},{"_id":"source/img/Figure3.1.png","path":"img/Figure3.1.png","modified":0,"renderable":0},{"_id":"source/img/Figure3.2.png","path":"img/Figure3.2.png","modified":0,"renderable":0},{"_id":"source/img/Figure3.3.png","path":"img/Figure3.3.png","modified":0,"renderable":0},{"_id":"source/img/Figure3.5.png","path":"img/Figure3.5.png","modified":0,"renderable":0},{"_id":"source/img/Figure3.6.png","path":"img/Figure3.6.png","modified":0,"renderable":0},{"_id":"source/img/Figure3.7.png","path":"img/Figure3.7.png","modified":0,"renderable":0},{"_id":"source/img/INF.png","path":"img/INF.png","modified":0,"renderable":0},{"_id":"source/img/Identifytypes2.png","path":"img/Identifytypes2.png","modified":0,"renderable":0},{"_id":"source/img/Identifytypes1.png","path":"img/Identifytypes1.png","modified":0,"renderable":0},{"_id":"source/img/InsertionSort.png","path":"img/InsertionSort.png","modified":0,"renderable":0},{"_id":"source/img/Listing3.1.png","path":"img/Listing3.1.png","modified":0,"renderable":0},{"_id":"source/img/Listing3.10.png","path":"img/Listing3.10.png","modified":0,"renderable":0},{"_id":"source/img/Listing3.2.png","path":"img/Listing3.2.png","modified":0,"renderable":0},{"_id":"source/img/Listing3.3.png","path":"img/Listing3.3.png","modified":0,"renderable":0},{"_id":"source/img/Listing3.4.png","path":"img/Listing3.4.png","modified":0,"renderable":0},{"_id":"source/img/Listing3.5.png","path":"img/Listing3.5.png","modified":0,"renderable":0},{"_id":"source/img/Listing3.6.png","path":"img/Listing3.6.png","modified":0,"renderable":0},{"_id":"source/img/Listing3.7.png","path":"img/Listing3.7.png","modified":0,"renderable":0},{"_id":"source/img/Listing3.8.png","path":"img/Listing3.8.png","modified":0,"renderable":0},{"_id":"source/img/Listing3.9.png","path":"img/Listing3.9.png","modified":0,"renderable":0},{"_id":"source/img/Mar10th.jpg","path":"img/Mar10th.jpg","modified":0,"renderable":0},{"_id":"source/img/Mar17th.png","path":"img/Mar17th.png","modified":0,"renderable":0},{"_id":"source/img/Mar172.png","path":"img/Mar172.png","modified":0,"renderable":0},{"_id":"source/img/Mar19th.jpg","path":"img/Mar19th.jpg","modified":0,"renderable":0},{"_id":"source/img/Mar18th.jpg","path":"img/Mar18th.jpg","modified":0,"renderable":0},{"_id":"source/img/Mar22nd.jpg","path":"img/Mar22nd.jpg","modified":0,"renderable":0},{"_id":"source/img/Mar2nd.png","path":"img/Mar2nd.png","modified":0,"renderable":0},{"_id":"source/img/Mar2nd2.png","path":"img/Mar2nd2.png","modified":0,"renderable":0},{"_id":"source/img/Mar2nd1.png","path":"img/Mar2nd1.png","modified":0,"renderable":0},{"_id":"source/img/Mar4th.png","path":"img/Mar4th.png","modified":0,"renderable":0},{"_id":"source/img/Mar6th.jpg","path":"img/Mar6th.jpg","modified":0,"renderable":0},{"_id":"source/img/Mar5th.png","path":"img/Mar5th.png","modified":0,"renderable":0},{"_id":"source/img/Mar8th.jpg","path":"img/Mar8th.jpg","modified":0,"renderable":0},{"_id":"source/img/Mar7th.jpg","path":"img/Mar7th.jpg","modified":0,"renderable":0},{"_id":"source/img/Mar8th.png","path":"img/Mar8th.png","modified":0,"renderable":0},{"_id":"source/img/Mar8th2.png","path":"img/Mar8th2.png","modified":0,"renderable":0},{"_id":"source/img/Mar9th.jpg","path":"img/Mar9th.jpg","modified":0,"renderable":0},{"_id":"source/img/MergeSort.png","path":"img/MergeSort.png","modified":0,"renderable":0},{"_id":"source/img/OJclown.png","path":"img/OJclown.png","modified":0,"renderable":0},{"_id":"source/img/Olist3.1.png","path":"img/Olist3.1.png","modified":0,"renderable":0},{"_id":"source/img/Pasted image 20231222083825.png","path":"img/Pasted image 20231222083825.png","modified":0,"renderable":0},{"_id":"source/img/Perfect.png","path":"img/Perfect.png","modified":0,"renderable":0},{"_id":"source/img/Processes.png","path":"img/Processes.png","modified":0,"renderable":0},{"_id":"source/img/Raining.jpg","path":"img/Raining.jpg","modified":0,"renderable":0},{"_id":"source/img/Rainpaper.jpg","path":"img/Rainpaper.jpg","modified":0,"renderable":0},{"_id":"source/img/RecursionTree.png","path":"img/RecursionTree.png","modified":0,"renderable":0},{"_id":"source/img/Summary.png","path":"img/Summary.png","modified":0,"renderable":0},{"_id":"source/img/Table3.1.png","path":"img/Table3.1.png","modified":0,"renderable":0},{"_id":"source/img/Table3.2.png","path":"img/Table3.2.png","modified":0,"renderable":0},{"_id":"source/img/Treeexample.png","path":"img/Treeexample.png","modified":0,"renderable":0},{"_id":"source/img/Twotables.png","path":"img/Twotables.png","modified":0,"renderable":0},{"_id":"source/img/alarming.png","path":"img/alarming.png","modified":0,"renderable":0},{"_id":"source/img/alldevices.png","path":"img/alldevices.png","modified":0,"renderable":0},{"_id":"source/img/analysis.png","path":"img/analysis.png","modified":0,"renderable":0},{"_id":"source/img/assignment.png","path":"img/assignment.png","modified":0,"renderable":0},{"_id":"source/img/assignments.png","path":"img/assignments.png","modified":0,"renderable":0},{"_id":"source/img/basicdata.png","path":"img/basicdata.png","modified":0,"renderable":0},{"_id":"source/img/charassign.png","path":"img/charassign.png","modified":0,"renderable":0},{"_id":"source/img/calling.png","path":"img/calling.png","modified":0,"renderable":0},{"_id":"source/img/chardeclare.png","path":"img/chardeclare.png","modified":0,"renderable":0},{"_id":"source/img/chardef.png","path":"img/chardef.png","modified":0,"renderable":0},{"_id":"source/img/cmtoinch.png","path":"img/cmtoinch.png","modified":0,"renderable":0},{"_id":"source/img/codeline.png","path":"img/codeline.png","modified":0,"renderable":0},{"_id":"source/img/comment.png","path":"img/comment.png","modified":0,"renderable":0},{"_id":"source/img/decimalandexp.png","path":"img/decimalandexp.png","modified":0,"renderable":0},{"_id":"source/img/drop4in5.png","path":"img/drop4in5.png","modified":0,"renderable":0},{"_id":"source/img/example.png","path":"img/example.png","modified":0,"renderable":0},{"_id":"source/img/example2.png","path":"img/example2.png","modified":0,"renderable":0},{"_id":"source/img/floatdeclare.png","path":"img/floatdeclare.png","modified":0,"renderable":0},{"_id":"source/img/flowresult.png","path":"img/flowresult.png","modified":0,"renderable":0},{"_id":"source/img/four.png","path":"img/four.png","modified":0,"renderable":0},{"_id":"source/img/four_kinds.png","path":"img/four_kinds.png","modified":0,"renderable":0},{"_id":"source/img/function1.png","path":"img/function1.png","modified":0,"renderable":0},{"_id":"source/img/hopeagain.png","path":"img/hopeagain.png","modified":0,"renderable":0},{"_id":"source/img/gradeb.png","path":"img/gradeb.png","modified":0,"renderable":0},{"_id":"source/img/ihope.png","path":"img/ihope.png","modified":0,"renderable":0},{"_id":"source/img/inchtocm.png","path":"img/inchtocm.png","modified":0,"renderable":0},{"_id":"source/img/informc.png","path":"img/informc.png","modified":0,"renderable":0},{"_id":"source/img/initialization.png","path":"img/initialization.png","modified":0,"renderable":0},{"_id":"source/img/keywords.png","path":"img/keywords.png","modified":0,"renderable":0},{"_id":"source/img/last.png","path":"img/last.png","modified":0,"renderable":0},{"_id":"source/img/lifesecond.png","path":"img/lifesecond.png","modified":0,"renderable":0},{"_id":"source/img/listing1.1.png","path":"img/listing1.1.png","modified":0,"renderable":0},{"_id":"source/img/listing1.2.png","path":"img/listing1.2.png","modified":0,"renderable":0},{"_id":"source/img/listing1.4.png","path":"img/listing1.4.png","modified":0,"renderable":0},{"_id":"source/img/lookslike.png","path":"img/lookslike.png","modified":0,"renderable":0},{"_id":"source/img/matchup.png","path":"img/matchup.png","modified":0,"renderable":0},{"_id":"source/img/newform.png","path":"img/newform.png","modified":0,"renderable":0},{"_id":"source/img/morevalid.png","path":"img/morevalid.png","modified":0,"renderable":0},{"_id":"source/img/nogood.png","path":"img/nogood.png","modified":0,"renderable":0},{"_id":"source/img/numassign.png","path":"img/numassign.png","modified":0,"renderable":0},{"_id":"source/img/nonsense.png","path":"img/nonsense.png","modified":0,"renderable":0},{"_id":"source/img/nospaces.png","path":"img/nospaces.png","modified":0,"renderable":0},{"_id":"source/img/nvyppt.png","path":"img/nvyppt.png","modified":0,"renderable":0},{"_id":"source/img/original.png","path":"img/original.png","modified":0,"renderable":0},{"_id":"source/img/out1.png","path":"img/out1.png","modified":0,"renderable":0},{"_id":"source/img/out3.png","path":"img/out3.png","modified":0,"renderable":0},{"_id":"source/img/othertypes.png","path":"img/othertypes.png","modified":0,"renderable":0},{"_id":"source/img/output.png","path":"img/output.png","modified":0,"renderable":0},{"_id":"source/img/overflow.png","path":"img/overflow.png","modified":0,"renderable":0},{"_id":"source/img/overnunder.png","path":"img/overnunder.png","modified":0,"renderable":0},{"_id":"source/img/page2.png","path":"img/page2.png","modified":0,"renderable":0},{"_id":"source/img/page1.png","path":"img/page1.png","modified":0,"renderable":0},{"_id":"source/img/pic.jpg","path":"img/pic.jpg","modified":0,"renderable":0},{"_id":"source/img/page3.png","path":"img/page3.png","modified":0,"renderable":0},{"_id":"source/img/pic1.jpg","path":"img/pic1.jpg","modified":0,"renderable":0},{"_id":"source/img/poorreadability.png","path":"img/poorreadability.png","modified":0,"renderable":0},{"_id":"source/img/process.png","path":"img/process.png","modified":0,"renderable":0},{"_id":"source/img/quartmol.png","path":"img/quartmol.png","modified":0,"renderable":0},{"_id":"source/img/quest4.png","path":"img/quest4.png","modified":0,"renderable":0},{"_id":"source/img/quest5.png","path":"img/quest5.png","modified":0,"renderable":0},{"_id":"source/img/quest8.png","path":"img/quest8.png","modified":0,"renderable":0},{"_id":"source/img/recursionsquaring.png","path":"img/recursionsquaring.png","modified":0,"renderable":0},{"_id":"source/img/result2.png","path":"img/result2.png","modified":0,"renderable":0},{"_id":"source/img/readable.png","path":"img/readable.png","modified":0,"renderable":0},{"_id":"source/img/result1.png","path":"img/result1.png","modified":0,"renderable":0},{"_id":"source/img/result3.png","path":"img/result3.png","modified":0,"renderable":0},{"_id":"source/img/scheme1.png","path":"img/scheme1.png","modified":0,"renderable":0},{"_id":"source/img/scheme2.png","path":"img/scheme2.png","modified":0,"renderable":0},{"_id":"source/img/sciennotation.png","path":"img/sciennotation.png","modified":0,"renderable":0},{"_id":"source/img/six.png","path":"img/six.png","modified":0,"renderable":0},{"_id":"source/img/sizes.png","path":"img/sizes.png","modified":0,"renderable":0},{"_id":"source/img/stillbad.png","path":"img/stillbad.png","modified":0,"renderable":0},{"_id":"source/img/stlssalgo.png","path":"img/stlssalgo.png","modified":0,"renderable":0},{"_id":"source/img/storingtypes.png","path":"img/storingtypes.png","modified":0,"renderable":0},{"_id":"source/img/structure.png","path":"img/structure.png","modified":0,"renderable":0},{"_id":"source/img/toobig.png","path":"img/toobig.png","modified":0,"renderable":0},{"_id":"source/img/tracer.png","path":"img/tracer.png","modified":0,"renderable":0},{"_id":"source/img/tradition.png","path":"img/tradition.png","modified":0,"renderable":0},{"_id":"source/img/turning1.png","path":"img/turning1.png","modified":0,"renderable":0},{"_id":"source/img/turning2.png","path":"img/turning2.png","modified":0,"renderable":0},{"_id":"source/img/twoexam.png","path":"img/twoexam.png","modified":0,"renderable":0},{"_id":"source/img/twofunc.png","path":"img/twofunc.png","modified":0,"renderable":0},{"_id":"source/img/valid.png","path":"img/valid.png","modified":0,"renderable":0},{"_id":"source/img/typeface.png","path":"img/typeface.png","modified":0,"renderable":0},{"_id":"source/img/输出.png","path":"img/输出.png","modified":0,"renderable":0},{"_id":"source/img/valid_declaration.png","path":"img/valid_declaration.png","modified":0,"renderable":0},{"_id":"source/HTML/html1/HTML.png","path":"HTML/html1/HTML.png","modified":0,"renderable":0},{"_id":"source/HTML/html1/encourage.png","path":"HTML/html1/encourage.png","modified":0,"renderable":0},{"_id":"source/HTML/html2/Little_story.png","path":"HTML/html2/Little_story.png","modified":0,"renderable":0},{"_id":"source/HTML/html2/code.png","path":"HTML/html2/code.png","modified":0,"renderable":0},{"_id":"source/HTML/html5/gululu.mp3","path":"HTML/html5/gululu.mp3","modified":0,"renderable":0},{"_id":"source/HTML/html5/favicon.png","path":"HTML/html5/favicon.png","modified":0,"renderable":0},{"_id":"source/HTML/html5/gururu.mp3","path":"HTML/html5/gururu.mp3","modified":0,"renderable":0},{"_id":"source/HTML/html5/hertaa2.gif","path":"HTML/html5/hertaa2.gif","modified":0,"renderable":0},{"_id":"source/HTML/html5/hertaa1.gif","path":"HTML/html5/hertaa1.gif","modified":0,"renderable":0},{"_id":"source/HTML/html5/hertaa_github.gif","path":"HTML/html5/hertaa_github.gif","modified":0,"renderable":0},{"_id":"source/HTML/html5/index.html","path":"HTML/html5/index.html","modified":0,"renderable":0},{"_id":"source/HTML/html5/purple.png","path":"HTML/html5/purple.png","modified":0,"renderable":0},{"_id":"source/HTML/html5/转圈圈咯.mp3","path":"HTML/html5/转圈圈咯.mp3","modified":0,"renderable":0},{"_id":"source/HTML/html5/转圈圈.mp3","path":"HTML/html5/转圈圈.mp3","modified":0,"renderable":0},{"_id":"source/HTML/html4/circling.gif","path":"HTML/html4/circling.gif","modified":0,"renderable":0},{"_id":"source/HTML/html4/girl.jpg","path":"HTML/html4/girl.jpg","modified":0,"renderable":0},{"_id":"source/HTML/html4/girlsit.gif","path":"HTML/html4/girlsit.gif","modified":0,"renderable":0},{"_id":"source/HTML/html4/good.png","path":"HTML/html4/good.png","modified":0,"renderable":0},{"_id":"source/HTML/html6/Feb22nd.jpg","path":"HTML/html6/Feb22nd.jpg","modified":0,"renderable":0},{"_id":"source/img/New_year/1.webp","path":"img/New_year/1.webp","modified":0,"renderable":0},{"_id":"source/img/New_year/2.webp","path":"img/New_year/2.webp","modified":0,"renderable":0},{"_id":"source/img/New_year/4.webp","path":"img/New_year/4.webp","modified":0,"renderable":0},{"_id":"source/img/New_year/5.webp","path":"img/New_year/5.webp","modified":0,"renderable":0},{"_id":"source/img/New_year/6.webp","path":"img/New_year/6.webp","modified":0,"renderable":0},{"_id":"source/img/New_year/3.webp","path":"img/New_year/3.webp","modified":0,"renderable":0},{"_id":"source/HTML/autoREG.py","path":"HTML/autoREG.py","modified":0,"renderable":0},{"_id":"source/HTML/hertaa1.gif","path":"HTML/hertaa1.gif","modified":0,"renderable":0},{"_id":"source/img/error1.png","path":"img/error1.png","modified":0,"renderable":0},{"_id":"source/img/first_trial.png","path":"img/first_trial.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1693386330252},{"_id":"themes/ayer/.gitignore","hash":"8faed9be54528620a8da662ad9f242e7305d6757","modified":1693386330255},{"_id":"themes/ayer/.npmignore","hash":"13239db7290ce1d6dfc62fb60191a8048c6e5781","modified":1693386330255},{"_id":"themes/ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":1693386330255},{"_id":"themes/ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1693386330255},{"_id":"themes/ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1693386330255},{"_id":"themes/ayer/README.md","hash":"df98c8af4a4412483800a8f945e62ece4caa074c","modified":1693386330255},{"_id":"themes/ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1693386330255},{"_id":"themes/ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1693386330284},{"_id":"themes/ayer/_config.yml","hash":"65cea3144d36bbf14b8c3434c5ea24311a7ca4c6","modified":1717916475940},{"_id":"themes/ayer/.github/FUNDING.yml","hash":"56f5ebae29b5bd4551df79f38c09ab452e0ab28f","modified":1693386330252},{"_id":"themes/ayer/rollup.config.js","hash":"3d98bd1db1dcf2e0878b6fcbbbf8ff9c3da6d357","modified":1693386330284},{"_id":"themes/ayer/.github/config.yml","hash":"d786334df2ea7feca64d07e573055c3452843f8a","modified":1693386330255},{"_id":"themes/ayer/languages/de.yml","hash":"2b7fa47fbe06f6928a43ea3b345ab3aeaa2cee81","modified":1693386330255},{"_id":"themes/ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1693386330284},{"_id":"themes/ayer/package.json","hash":"f171e4375353a66c8b609b3bc8aece58e8b7cd01","modified":1693386330284},{"_id":"themes/ayer/languages/default.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1693386330255},{"_id":"themes/ayer/languages/ja.yml","hash":"aea06ea7bcb439d2b84501924cdd092293ee891a","modified":1693386330255},{"_id":"themes/ayer/languages/en.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1693386330255},{"_id":"themes/ayer/languages/es.yml","hash":"fc27661276313c1c539252517d664359cb286f8a","modified":1693386330255},{"_id":"themes/ayer/languages/ru.yml","hash":"45edcadb57176d0b11a839055df1964da8ca08f9","modified":1693386330268},{"_id":"themes/ayer/languages/fr.yml","hash":"3dac4d53b9b2a1b10c0273ce7472b2e76576dc5a","modified":1693386330255},{"_id":"themes/ayer/languages/nl.yml","hash":"d619955fd9659a209c58f696ee2160dfe8c6ac41","modified":1693386330255},{"_id":"themes/ayer/languages/no.yml","hash":"fa4d2da9bb00ad0febc631afaf17f76aaa17e950","modified":1693386330268},{"_id":"themes/ayer/languages/ko.yml","hash":"00db39dd43875774088511b4d467dcb71f1ce8ac","modified":1693386330255},{"_id":"themes/ayer/languages/vi.yml","hash":"20f25fe0e9017d530a771687fe9d21353e034fff","modified":1693386330268},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"edf1f8c164f3d166f94e213148e984fdfc3a7c85","modified":1693386330268},{"_id":"themes/ayer/languages/pt.yml","hash":"fa0b3a4a01a0493f3ef402039e394a291a1251fd","modified":1693386330268},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"750fba5314d340ddb00812fc17a608a084f04462","modified":1693386330268},{"_id":"themes/ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1693386330284},{"_id":"themes/ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":1693386330284},{"_id":"themes/ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":1693386330284},{"_id":"themes/ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1693386330284},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1693386330284},{"_id":"themes/ayer/layout/layout.ejs","hash":"ad2222b1819f763cd981f72b8204a19cb0fa75ae","modified":1693386330284},{"_id":"themes/ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1693386330284},{"_id":"themes/ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1693386330284},{"_id":"themes/ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1693386330284},{"_id":"themes/ayer/source-src/main.js","hash":"fcb7c6c5ffcfd72ba9bd55b475af8a0e74484634","modified":1693386330316},{"_id":"themes/ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1693386330284},{"_id":"themes/ayer/source/404.html","hash":"fce8d48b2534f5ba5feb3a91e43813f8f85b07d8","modified":1693386330316},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/bug-report.md","hash":"109c742a5829ca6c9a39d9df5023f6ecc6ff886e","modified":1693386330255},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1693386330348},{"_id":"themes/ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1693386330268},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"ec2dd8a5e55b99350d7606a4f4ba0918fd656116","modified":1693386330268},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1693386330268},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/question.md","hash":"20a7174d36e8f090ba7800c08b0c44b15b753736","modified":1693386330255},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/feature-request.md","hash":"ca76e0709f2e97edfa004922da78599ef35eb039","modified":1693386330255},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":1693386330268},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/other.md","hash":"e4c347d70c3b8044eec656e8cfb78cfd49f2d991","modified":1693386330255},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"9ef0ed563dd6e3277534f9601ab290b72b3dc42b","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"a0fe83d26b5aebe67c41ea9b39820349bb5f0f27","modified":1717916527000},{"_id":"themes/ayer/layout/_partial/float-btns.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"38abac221b79d83fd8d3ec8ee0fba55ef162d148","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/lock.ejs","hash":"72ec0a339f98399c5141f4b3aca4cc8e8310f03a","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"1a9b8574d4341354ed00127ffb873c80ac1beee9","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/katex.ejs","hash":"bef830bc48db44c19bfa922d8ed5f6ee1e924ea7","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"4d6b2bbe0d50f609a9d6e5d646d07f7ab29e8c66","modified":1693386330270},{"_id":"themes/ayer/scripts/events/index.js","hash":"f3a5d9bda901565e3c302bcb5ed716b6d006089e","modified":1693386330284},{"_id":"themes/ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1693386330270},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1693386330300},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1693386330299},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"ba0639363016f5badd13fefd000ef967c6a4e47b","modified":1693386330284},{"_id":"themes/ayer/.github/workflows/npmpublish.yml","hash":"6a748fbb9f13da90a00e35d1e8f54bbe71a14571","modified":1693386330255},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1693386330301},{"_id":"themes/ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1693386330304},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1693386330284},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1693386330299},{"_id":"themes/ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1693386330304},{"_id":"themes/ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1693386330301},{"_id":"themes/ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1693386330316},{"_id":"themes/ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1693386330304},{"_id":"themes/ayer/source-src/css/style.styl","hash":"dd5f5d0fef358ea1eba3f782458f72e13f764bba","modified":1693386330316},{"_id":"themes/ayer/source-src/css/_remixicon.styl","hash":"6e7671af612868b750f1dc195f2e7c1c34931800","modified":1693386330316},{"_id":"themes/ayer/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1693386330301},{"_id":"themes/ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":1693386330316},{"_id":"themes/ayer/source-src/js/ayer.js","hash":"a3d349fb8af029e710d064c15373163680da2d39","modified":1693386330316},{"_id":"themes/ayer/source/css/custom.styl","hash":"32990e811ea6fba84673b6d7175c88a3b890b109","modified":1693386330316},{"_id":"themes/ayer/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1693386330301},{"_id":"themes/ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1693386330316},{"_id":"themes/ayer/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1693386330348},{"_id":"themes/ayer/source/dist/main.js","hash":"4338ca7a7bc35ee139016c91d4746643a3ee01c8","modified":1693386330348},{"_id":"themes/ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1693386330349},{"_id":"themes/ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1693386330349},{"_id":"themes/ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1693386330349},{"_id":"themes/ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1693386330349},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1693386330349},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1693386330363},{"_id":"themes/ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1693386330363},{"_id":"themes/ayer/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1693386330363},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1693386330363},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1693386330363},{"_id":"themes/ayer/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1693386330363},{"_id":"themes/ayer/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1693386330363},{"_id":"themes/ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1693386330363},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1693386330363},{"_id":"themes/ayer/source/js/clickBoom2.js","hash":"2bc7267652ec49cea5dc3a8bd470c7d5ec57c721","modified":1693386330363},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"ce7edc6de9f7875d8467157831680d51cf729d5a","modified":1693387112000},{"_id":"themes/ayer/source/js/clickBoom1.js","hash":"c97ea1f120dba2c6804d0420186ef5d6f2419b7c","modified":1693386330363},{"_id":"themes/ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1693386330363},{"_id":"themes/ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1693386330363},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1693386330363},{"_id":"themes/ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1693386330363},{"_id":"themes/ayer/scripts/events/lib/hello.js","hash":"058c73fa3900d143affb9cc7ea0b2105d3925915","modified":1693386330284},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1693386330363},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1693386330270},{"_id":"themes/ayer/scripts/events/lib/merge-configs.js","hash":"734aac9a53cf168ee51482b02b75954a2a3df150","modified":1693386330284},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/clipboard.ejs","hash":"55f2fafe9c6a151eeee39d1a2556742ebe89b2a2","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"9f0250bc192a59a8577ea3048c8f5eef91ac10ef","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"d5b568a3554f0d6572e7b232b8a0ab3ea81a1845","modified":1693386330284},{"_id":"themes/ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1693386330304},{"_id":"themes/ayer/layout/_partial/post/twikoo.ejs","hash":"1e591e7b71880ca0a1dd9ab9913aa67fdd91633a","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1693386330284},{"_id":"themes/ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/article.styl","hash":"659a35544b321a101f7cf114f0c9fdf2cc125625","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/ayer.styl","hash":"38187e5c88eaf1ea099f2ded56f1f60194c95ec4","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1693386330313},{"_id":"themes/ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1693386330313},{"_id":"themes/ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1693386330315},{"_id":"themes/ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":1693386330313},{"_id":"themes/ayer/source-src/css/_partial/navbar.styl","hash":"266df43ec4041226f1801719e873265b75fe6515","modified":1693386330313},{"_id":"themes/ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1693386330315},{"_id":"themes/ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1693386330313},{"_id":"themes/ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1693386330316},{"_id":"themes/ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1693386330315},{"_id":"themes/ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1693386330315},{"_id":"themes/ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1693386330316},{"_id":"themes/ayer/source-src/css/_partial/tocbot.styl","hash":"130e29937aa750e63e8cf216934dbdd4ea95969f","modified":1693386330316},{"_id":"themes/ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1693386330316},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"40ea7e428cfec835f196705b42e5a292502780af","modified":1693387091000},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1693386330349},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1693386330363},{"_id":"themes/ayer/source/css/fonts/remixicon.css","hash":"8b54eed3270fae6d5bde5b0a6b522a32b5bd39a0","modified":1693386330316},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1693386330331},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1693386330347},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1693386330363},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1693386330284},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1693386330349},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1693386330349},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1693386330316},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1693386330331},{"_id":"source/_posts/findstr.c","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1704423883487},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1693386330349},{"_id":"source/HTML/girl.jpg","hash":"5c4a03fe07bab239d110d66c666f4b3a83aee62e","modified":1692185527326},{"_id":"source/HTML/girlsit.gif","hash":"4207d0f6e5f8045236f6c69f23e65fe5d024f8a4","modified":1697466165000},{"_id":"source/HTML/index.html","hash":"41deabcf7b23f35244dd980065cfd22ca92a02e4","modified":1718036034334},{"_id":"source/HTML/investigation.html","hash":"082bf57b3951f5784b720634ffeab7b9beef7403","modified":1717908666585},{"_id":"source/categories/index.md","hash":"31b6b3309749cce76d76f2ebfd7976ceb971b7f4","modified":1693392684244},{"_id":"source/HTML/ivest.css","hash":"4de595d03aa988d8b8e4e6662d4a4655cdbf350b","modified":1717908783774},{"_id":"source/HTML/new_intropage.html","hash":"f08c9aa2c9a8071f7e29b79248b6831d8de05fa8","modified":1717992987363},{"_id":"source/HTML/runoob-test.html","hash":"b72aabf91e9617471151ccbad2a8306f6b42129e","modified":1717897808455},{"_id":"source/_posts/1display1.html","hash":"21cee6a36522b3d4a12145e026af52c9d527e20f","modified":1715763467024},{"_id":"source/HTML/trial.html","hash":"8b73a83fe3d893d4564c0aa66ab78bd8697a0277","modified":1717898151062},{"_id":"source/HTML/zijie.html","hash":"a43cc6533dd6a3d6f98a3f480f9867126b617ea0","modified":1717916106704},{"_id":"source/HTML/zijie.index.txt","hash":"a43cc6533dd6a3d6f98a3f480f9867126b617ea0","modified":1717914387234},{"_id":"source/_posts/C-premier-plus-Chapter-1.md","hash":"236ae0847a55dac705b93974e2880fd81bab478a","modified":1701145413603},{"_id":"source/_posts/C-premier-plus-Chapter-2.md","hash":"127be0a617813605af8d832460002cf13356d74e","modified":1709515538145},{"_id":"source/_posts/C语言练习7讲解.md","hash":"0822da96ed5d660a653796c292660dcb209fa3f9","modified":1701091361862},{"_id":"source/_posts/Javascript学习：一个新起点.md","hash":"a111494955a16d6d88f44a21fee6f21c25f79a02","modified":1705937757911},{"_id":"source/_posts/Kis.md","hash":"02962b399220c3b99088c2f1d0386fa973b93f0b","modified":1711460644763},{"_id":"source/_posts/axis.c","hash":"bcdf4e8685217cb4be9c708470ec1a1040929d9f","modified":1705043355819},{"_id":"source/_posts/OJ中的那些小丑行为.md","hash":"9c89abcb2f13724d6e34c878388accb615ec33e5","modified":1700527595315},{"_id":"source/_posts/boyfriend.c","hash":"f8e1f2bf55858fccc4eb4c86354c3b6d1736a268","modified":1704972488177},{"_id":"source/_posts/boyfriend.exe","hash":"b6de8108a4f163f2985d1f590cff5561c0fa29c5","modified":1704972494480},{"_id":"source/_posts/axis.exe","hash":"a58750088c4001ecdfb8247e2547fade6ba2b753","modified":1704860471071},{"_id":"source/_posts/cinema.c","hash":"e278e7264432468aa4cbc0cd555ba3778483fbb5","modified":1704976489103},{"_id":"source/_posts/cinema.exe","hash":"a172ced73e2b8dddb209ed700464660c0d7fbdb6","modified":1704976493276},{"_id":"source/_posts/fenban.c","hash":"b5cf13b6ecb3277cf01713b1c00c4fb503adeb19","modified":1705043347410},{"_id":"source/_posts/fenban.exe","hash":"5ce3535f0e8c8c89c24c0429539d64e8bccdd7e5","modified":1704984271573},{"_id":"source/_posts/maxmin.c","hash":"4185a3b67644e432f89491c027bd4abe6ae4e8fe","modified":1704537763884},{"_id":"source/_posts/jiami.c","hash":"3c950f8851191b0172eb8a69b6878ea261c0151a","modified":1704697861484},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1693381266846},{"_id":"source/_posts/jiami.exe","hash":"78371cb6b6d6ab6124f03f532f9d87e693a4d889","modified":1704697865278},{"_id":"source/_posts/maxmin.exe","hash":"984ffad9facef0b55e3bd8a6413ae27c6b3e5ea3","modified":1704537638344},{"_id":"source/_posts/psort.c","hash":"6a79e512cb7996a79d17b9977e33399ddf7e394e","modified":1704981429112},{"_id":"source/_posts/mypow.c","hash":"90ce85c97fdb1715c0c10987f616ba073fe98f20","modified":1704719667709},{"_id":"source/_posts/mypow.exe","hash":"08a57c0746390dcd870bfc77efa4491dab4667e7","modified":1704719671297},{"_id":"source/_posts/psort.exe","hash":"52f355487bb28605cae5269bd7e5b86470be2e93","modified":1704981433581},{"_id":"source/_posts/qimo2.c","hash":"c48ba1fc9f124d85f8f66738b60ed85565dfac88","modified":1704723827753},{"_id":"source/_posts/qimo2.exe","hash":"865b4d20701e5b4c5bdbb9d0bd5f34737a999f49","modified":1704723833684},{"_id":"source/_posts/xiaoshu.c","hash":"3c4cee176fc30508c8fb47c34f81637bc95f143e","modified":1705047050030},{"_id":"source/_posts/statistics.c","hash":"1efe0d46ef697a0a1afe55644afe1e20062974e9","modified":1704966279021},{"_id":"source/_posts/statistics.exe","hash":"8e5cf6031660cae30a338b8e567e14a660db65d4","modified":1704966281348},{"_id":"source/_posts/teststr.py","hash":"97c2d412fb584684039ec1fc679b35fff36fff2c","modified":1704511050587},{"_id":"source/_posts/千奇百怪的字符串处理函数.md","hash":"b5c6cd8dd750a53d845827e9189edf6d2207cf09","modified":1700527762634},{"_id":"source/_posts/xiaoshu.exe","hash":"487837c0464e45b7ddb781e998ef3f0b3fa6e71b","modified":1705047052891},{"_id":"source/_posts/关于我的抉择：C-与算法或者数据结构.md","hash":"cb034c3eca963b5c8e994b3325609bd3d66a7e73","modified":1709945847240},{"_id":"source/_posts/如何使用结构体.md","hash":"28e57c27cb4e6c90aeeabbf4b06fb7a28c767729","modified":1704336464672},{"_id":"source/_posts/字符串函数.md","hash":"cc7a35bd5374e58a10ef09dc220196ffc4397563","modified":1704335862828},{"_id":"source/_posts/小思考.md","hash":"25aa5a1d2c9d47ac472b3981e3ac225c1d60af47","modified":1716176937899},{"_id":"source/_posts/我的心态调整指南.md","hash":"8b10ae5d36f026077179eebdc23f466208c42809","modified":1709515548047},{"_id":"source/_posts/我的新尝试-HTML学习日记.md","hash":"c57eafeab8d31f8c5d2c8fe1aba77016711ed4a7","modified":1717998164253},{"_id":"source/_posts/数组-1.md","hash":"0d778582703cbb6e4bd80d067bf1e92429ac50bc","modified":1700527662884},{"_id":"source/_posts/流程控制方法.md","hash":"f5d99f6761e632504bf9b2b32a592bf5536a2dc1","modified":1700482087183},{"_id":"source/_posts/直播内容复盘-排序与交换.md","hash":"e01ca49534c61da40c69fb967c5d636be09a3c87","modified":1700527659701},{"_id":"source/_posts/算法学习：归并排序以及插入排序.md","hash":"29ec33a5eaa86d1a690e5e04d711593833e1f50a","modified":1705714795852},{"_id":"source/_posts/算法学习：分治法的其他例子.md","hash":"1ecb5944ec43eef0f5ddf36d698478a187bfe0fb","modified":1706057530994},{"_id":"source/_posts/算法学习：快速幂-以及-这几天搞机心得.md","hash":"d36e8e0f4fa2290b537330400ec56d9dba65a41a","modified":1706246111203},{"_id":"source/_posts/算法学习：解递归式以及渐进符号.md","hash":"6de510b0ac5e382bb158955ef56c3e698cea769f","modified":1705764776592},{"_id":"source/_posts/输入与输出.md","hash":"acbe69f8dc87d3e5aa3a174923c26b0f6fefdd25","modified":1700482122375},{"_id":"source/_posts/算法学习：分治法中的二分查找.md","hash":"1154f63b0a8ce8dd39463c03c2190547132703cf","modified":1706021013285},{"_id":"source/xinnian/image.php","hash":"1da5b3d2e35017bf0e5a04b25ffbb3519b0d175f","modified":1707486578578},{"_id":"source/_posts/高等数学小整理.md","hash":"5f29df716008b75b3cb059e76cab51490305f75f","modified":1701090960831},{"_id":"source/tags/index.md","hash":"afe86559422bf7dac8be75e8c5f598d7aae3d0cb","modified":1693392001779},{"_id":"source/xinnian/img.txt","hash":"065d59684cbcfaa8b08c3e6cee6f5b248270b590","modified":1707487439309},{"_id":"source/img/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1700353343033},{"_id":"source/img/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1700353358394},{"_id":"source/img/C67.png","hash":"adaf3083d3084cf1c2e9c2bb325c327c1a377f59","modified":1702164612665},{"_id":"source/img/C99.png","hash":"b1e0dc0118c6bf06af965b98ade426380f023d18","modified":1700463420852},{"_id":"source/img/C992.png","hash":"04485e02115ca4660bf9946987e3d7da90556682","modified":1700463437298},{"_id":"source/img/C99sup.png","hash":"0055cc389cd2c3662ecdfaac4419162f2d4f91e1","modified":1702169430806},{"_id":"source/img/Chapter1.3.png","hash":"1fa97ced15bb93afe0bd566f36f1d301e5b94a45","modified":1699665801641},{"_id":"source/img/Chapter1.6.png","hash":"baee1266a1c4bd093858cb6b714fc5ce0229d9d1","modified":1699668086216},{"_id":"source/img/ErrandWarn.png","hash":"53fe6ea633c6138e7d8e4c26dda127e2e28f2d2b","modified":1701232371651},{"_id":"source/img/DefinenInitial.png","hash":"358f626dadde0ee97e3a1f72f3b511d2f3baf7e8","modified":1701489562342},{"_id":"source/img/Figure3.3.png","hash":"c912806a797ec62de153711a711567db5579ee1a","modified":1701410312464},{"_id":"source/img/Figure3.2.png","hash":"3bb9fae9abb4845b3103f2f6d27592a5412684c9","modified":1701407763847},{"_id":"source/img/Figure3.5.png","hash":"dcff6076e956c09f7675a42f4726d176f86bccdb","modified":1701913868095},{"_id":"source/img/Figure3.7.png","hash":"98dbbcacf3fa739d7f0b2b82453a50c476ba25cf","modified":1702268797732},{"_id":"source/img/Figure3.6.png","hash":"b0cc712c615769a4e3efc7d737e450042b5a2429","modified":1702165019789},{"_id":"source/img/INF.png","hash":"1fc8eddcd6786431426ba4b9dc0fd4a1394136f9","modified":1702356204141},{"_id":"source/img/Identifytypes2.png","hash":"7ece2917a58939c33b14502eeca7f2b44100e0aa","modified":1703119747777},{"_id":"source/img/Identifytypes1.png","hash":"0e04ea9a7930f4ffbddfd565c570d50eb850caee","modified":1703117790079},{"_id":"source/img/Listing3.10.png","hash":"b3ff13050dab0afd957ba36a55c12d84efbf4090","modified":1702687115479},{"_id":"source/img/Listing3.2.png","hash":"5f4802c5cca99698cf8f6a10e705923c4464c521","modified":1701490552275},{"_id":"source/img/Listing3.3.png","hash":"c275b4512c1e629771215e18749ec158ba2f2721","modified":1701566524755},{"_id":"source/img/Listing3.5.png","hash":"0ac5f463b7a03977d3991e43f93ddae55fba1c08","modified":1702016480998},{"_id":"source/img/Listing3.7.png","hash":"6cc2ac2f81853848207505d8e98f711044a82c4f","modified":1702355341604},{"_id":"source/img/Listing3.9.png","hash":"a7218454007872178d4f4182d62baf3886ff3dc1","modified":1702685691486},{"_id":"source/img/Mar172.png","hash":"979a5d5127baf42bcc7a364e875a453de5ae3bc3","modified":1710636535700},{"_id":"source/img/Mar2nd2.png","hash":"ee2f387c1cdd41fed2f9b54809b461eae4e1eb4c","modified":1709392675723},{"_id":"source/img/Olist3.1.png","hash":"3c1443d9c711ea004034ebd6cc9d4139ea60bf3d","modified":1701236846824},{"_id":"source/img/Pasted image 20231222083825.png","hash":"c957713877fe322f405be6b17a970e5cfdf578f3","modified":1703205505959},{"_id":"source/img/Perfect.png","hash":"c6cd00d1dd115381045497718f5f9f4ddab65af7","modified":1703120844328},{"_id":"source/img/Rainpaper.jpg","hash":"4ff2464cdd6b8a01317cd0961968d2e1ef2b7283","modified":1705936417092},{"_id":"source/img/Table3.1.png","hash":"da3005fdd53e23b4002cb527ade9d23c33a27e1c","modified":1701313397430},{"_id":"source/img/Table3.2.png","hash":"4dab658d3da0911d2f23662c37c9ec0fdb905ee0","modified":1701909668548},{"_id":"source/img/alarming.png","hash":"495479b6c2d663c93b95994732132a8ded52b803","modified":1703203981785},{"_id":"source/img/alldevices.png","hash":"7b1c10b01cb0d0fbc2a3415b0f0345122239d403","modified":1702357681469},{"_id":"source/img/assignment.png","hash":"e851496838a0be305e2c38f145302e860b0a71fb","modified":1700626631410},{"_id":"source/img/assignments.png","hash":"1207ce82aee1ddde14919691207dd8b4df03be0f","modified":1701487098867},{"_id":"source/img/charassign.png","hash":"1e4d076e59a8afd8a2856bc7faecbcdd8b475eb0","modified":1701859682718},{"_id":"source/img/calling.png","hash":"dd487668c58a1f646a6bc6381e867160615e8473","modified":1700627321662},{"_id":"source/img/chardeclare.png","hash":"33e086f1a508a133182fedeb8355a0c5941b760a","modified":1701859800151},{"_id":"source/img/comment.png","hash":"5acf27b5f8c12754d10aacf4d2ac836e4e2ea87f","modified":1700291348653},{"_id":"source/img/codeline.png","hash":"6a8c0699cf0295ea8e3686aeb7403610c1fe9ac4","modified":1702270357012},{"_id":"source/img/chardef.png","hash":"4e537e5a7a10e52ddc96f94eaa887e32b8f76f7b","modified":1701859503285},{"_id":"source/img/decimalandexp.png","hash":"3ecff8b3a769e245aae4cf9d74de4f765e27eb32","modified":1703204221027},{"_id":"source/img/cmtoinch.png","hash":"dc7252d000d167b7003084d8ecc62a2ed45949f8","modified":1703205610976},{"_id":"source/img/drop4in5.png","hash":"1f084367e750f6a5ec5239d515f01bd625983a26","modified":1702357663080},{"_id":"source/img/example2.png","hash":"fcdd07747fb105d956c2627370cb289481bd76e7","modified":1700791272580},{"_id":"source/img/example.png","hash":"639cb76a97bab68b43c35737a750e0da28607d35","modified":1700186577570},{"_id":"source/img/flowresult.png","hash":"8e9ff1864ff1314f235c437735a6a6983fed89d1","modified":1701575245910},{"_id":"source/img/floatdeclare.png","hash":"b71c10d594fbbebbc2cdb93f4afcc6eaff210c17","modified":1702269643325},{"_id":"source/img/four.png","hash":"51d9ee94391420746f023a2f839e1530d3625ac2","modified":1700975037438},{"_id":"source/img/four_kinds.png","hash":"d77d90aea46b9cf769aaff5e0e1ef9910577bbf1","modified":1700109144396},{"_id":"source/img/function1.png","hash":"e1f0a524eb957dad37f1629ef640998e1c76a686","modified":1700699037730},{"_id":"source/img/gradeb.png","hash":"6658e235f0bc494369f6571b30e84f8c3abf02f0","modified":1701860460091},{"_id":"source/img/hopeagain.png","hash":"870d9f01eafee337246ddbb3fd2fb687147c3138","modified":1700292117226},{"_id":"source/img/ihope.png","hash":"ea4ef276dbebfbba4074b7a50a7cff8454c1a6ab","modified":1700291963498},{"_id":"source/img/inchtocm.png","hash":"fb1028851d822e261f0f80a6a87db639d9a3aa2f","modified":1703205540185},{"_id":"source/img/informc.png","hash":"fe910c80bd8c19e24949679febc342f4e53d10df","modified":1699873947240},{"_id":"source/img/initialization.png","hash":"4865791805bdd39022b1f5cec87929f021729358","modified":1701489155878},{"_id":"source/img/keywords.png","hash":"37c2415633a2bb547813eea2898e1b80ac99fbf9","modified":1700965554365},{"_id":"source/img/last.png","hash":"01329e86010f44d92b6535276418eda9336fe7b7","modified":1700975443746},{"_id":"source/img/lifesecond.png","hash":"460091138a4058bf2f6c5e9844fd130726c31b64","modified":1703204555235},{"_id":"source/img/listing1.1.png","hash":"0f15c6d47cebfaffcd8b17eb54e9cd8a77b6408a","modified":1699670605995},{"_id":"source/img/listing1.4.png","hash":"71cd63e889da8e88f9561ad9a3b7eb9816bb8c6f","modified":1699872906295},{"_id":"source/img/listing1.2.png","hash":"558cc336d8dfff0e8ed322a0b915734bd0e98a50","modified":1699677827278},{"_id":"source/img/lookslike.png","hash":"83730c6796925d66cdec7d159b3c4c7f308b940f","modified":1702271266339},{"_id":"source/img/newform.png","hash":"55dc41525a78becbf0e79db9f27fb5d406ded315","modified":1700291760980},{"_id":"source/img/matchup.png","hash":"3088240b276e29126c6e06be7f9ed89c8648af2d","modified":1701660033355},{"_id":"source/img/morevalid.png","hash":"c14ead9fc5436a72c84e50dfabfd7e4f5cea0912","modified":1702270107448},{"_id":"source/img/numassign.png","hash":"fb3a6bc5523b669a7339365be73dd4b81163ab88","modified":1701859914053},{"_id":"source/img/nogood.png","hash":"5149ff9ee7d4b0b2288c5a3aa9cf36d26c4b343c","modified":1700869117520},{"_id":"source/img/nospaces.png","hash":"6ec05d2d55157bfd6f6b127144ca7dd7583dd71c","modified":1702270170313},{"_id":"source/img/nonsense.png","hash":"dbe1ab3ea51a4afab809d84b4fc74b73347cf1d5","modified":1701574052908},{"_id":"source/img/out1.png","hash":"81b8586509a42f6c913e456da2e743856095ec05","modified":1702355480375},{"_id":"source/img/out3.png","hash":"68e8424bf2877e84db7c3a84c7135deeff969958","modified":1702169318257},{"_id":"source/img/othertypes.png","hash":"503d1dd18172b78c543dd48a0c7cab5305754b3a","modified":1701568634292},{"_id":"source/img/output.png","hash":"db10e0a8f21d67f788b944924c791078d3db990d","modified":1700104589519},{"_id":"source/img/overflow.png","hash":"7e6031febe56efac6efc0a5f19e8e31ae8852452","modified":1701575056582},{"_id":"source/img/poorreadability.png","hash":"1b13933d05cae9b1be7a798e35bc18892a5b9057","modified":1700700255598},{"_id":"source/img/process.png","hash":"c95d3f0aa09f7050c27ada93712ad14721449383","modified":1699935012594},{"_id":"source/img/quest4.png","hash":"0dad597690c2d571292acb12aeda987c511af859","modified":1700972003904},{"_id":"source/img/quest5.png","hash":"7b8c4cb77b052734fb69c27ab5753eeed812afc5","modified":1700972574676},{"_id":"source/img/quest8.png","hash":"73e58cf87b13c7536301fcc8421e420eb0328ea4","modified":1700973207674},{"_id":"source/img/result2.png","hash":"a8f476cd6a9df31c3a32ab137f955e43132f0824","modified":1701566561385},{"_id":"source/img/readable.png","hash":"59bf666780c4b1401666a72a79ea3b71a8f4b77b","modified":1700700374496},{"_id":"source/img/sciennotation.png","hash":"2687f5b82a8a957f1c48875f6e9c57453ad5017d","modified":1702267986753},{"_id":"source/img/result1.png","hash":"bee16bb33accde9bc9b88243dce816201d47ed7d","modified":1701490732663},{"_id":"source/img/result3.png","hash":"b34bb80db635391627e995aae43584c80e924897","modified":1701658365884},{"_id":"source/img/six.png","hash":"ff0b57587d0b6fb585684aff7f44914d8d3d056f","modified":1700975049941},{"_id":"source/img/sizes.png","hash":"5e546d4567e78fe6cbc40aa8a0445fb5551e3950","modified":1702523028486},{"_id":"source/img/stillbad.png","hash":"2d46b1c7991379281d80e435ca0f48cc1ca9c7a2","modified":1700871802594},{"_id":"source/img/structure.png","hash":"2691bf90e8a867d8145ef1d948f580ecff235609","modified":1700698989848},{"_id":"source/img/toobig.png","hash":"d9c6bc55f93652da34b5343222fb67a8de9e5497","modified":1702355777074},{"_id":"source/img/turning1.png","hash":"1a3fda274d810e7bf6be7ab4fb82bf63daec3708","modified":1702169175159},{"_id":"source/img/turning2.png","hash":"8f09306798d8dbd9e9708df2f321364d968854e5","modified":1702169254630},{"_id":"source/img/tradition.png","hash":"32f6659711d7b6fb0e890b47c917e85c360bc40b","modified":1700463043456},{"_id":"source/img/输出.png","hash":"7b519546e8c9c3fbf67515295a3db20eb8dac95a","modified":1700187463704},{"_id":"source/img/twoexam.png","hash":"b87355dc5fcfa1a9f1d281144e69fb39d60ac999","modified":1702269859269},{"_id":"source/img/typeface.png","hash":"e406c982a3a0f061b5d8e4ea57468ae941784119","modified":1700104007214},{"_id":"source/img/twofunc.png","hash":"bb95384a031531769b381199bd92d84d3338fc88","modified":1700794217349},{"_id":"source/img/valid_declaration.png","hash":"873c0e0af2a6ced8c4b718bdac02a0058fa9ea10","modified":1701486765031},{"_id":"source/img/valid.png","hash":"cbf2a476ac843f0c960b3d2184cdc101efa06e20","modified":1700574092454},{"_id":"source/HTML/html3/index.html","hash":"a6064cd195fc73b9bc96bb5ff084a9fcfa6a4c2e","modified":1716046662347},{"_id":"source/HTML/.git/COMMIT_EDITMSG","hash":"7448d8798a4380162d4b56f9b452e2f6f9e24e7a","modified":1715783865130},{"_id":"source/HTML/html1/index.html","hash":"f2cf66c22e955b7574d41a60dab2a13e964f1311","modified":1715902176590},{"_id":"source/HTML/.git/FETCH_HEAD","hash":"2ded1e9a13964868e706b82c8c53b03cdc9a918a","modified":1715783887578},{"_id":"source/HTML/.git/ORIG_HEAD","hash":"88aa3f7b8f248071dac2b674a87d92b6c1cc5fc5","modified":1715783796611},{"_id":"source/HTML/.git/HEAD","hash":"9f1df7eea4156be8a871c292b549b3325e425aa2","modified":1715782582440},{"_id":"source/HTML/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1715782416921},{"_id":"source/HTML/.git/config","hash":"0f2390ce5008eba6378048b1e884a98d03ad5666","modified":1715782582440},{"_id":"source/HTML/.git/index","hash":"a7a797b9147bd1a122c08f851ddea690f645b99e","modified":1715783708416},{"_id":"source/HTML/html2/index.html","hash":"3b259c5b85ad7062a974f1a8b34b2a3e145ddb9e","modified":1716044509427},{"_id":"source/HTML/html5/gululu.mp3","hash":"676a314fc6cdaa72f04393cf09879f3bed390b55","modified":1700831323000},{"_id":"source/HTML/html5/favicon.png","hash":"f835fb5cf04ae283f14425874ae05969d18f5f95","modified":1700831323000},{"_id":"source/HTML/html5/gururu.mp3","hash":"4462bdad96b9e9dfab26588838976848e79e4ea2","modified":1700831323000},{"_id":"source/HTML/html5/purple.png","hash":"d05a084efc038182c6c59ac5b699b3029c2632c2","modified":1716566309631},{"_id":"source/HTML/html4/blank.html","hash":"8bc398b1d97d20ae53882d5d9c4f77e3eb2dfcfa","modified":1716295150747},{"_id":"source/HTML/html5/转圈圈咯.mp3","hash":"facb2c614bdf761a30d08ffd9c84b8357135c7fd","modified":1700831323000},{"_id":"source/HTML/html5/index.html","hash":"758700c96145b31da2ac38d1d6441727ec32ac34","modified":1716654409190},{"_id":"source/HTML/html5/转圈圈.mp3","hash":"e36c09287352d11d38d294a49ddbb4c049678062","modified":1700831323000},{"_id":"source/HTML/html4/girlsit.gif","hash":"4207d0f6e5f8045236f6c69f23e65fe5d024f8a4","modified":1697466165000},{"_id":"source/HTML/html4/circling.gif","hash":"5947ad05bf140a153658a71ce91d5f1804a8e768","modified":1716217086288},{"_id":"source/HTML/html4/girl.jpg","hash":"5c4a03fe07bab239d110d66c666f4b3a83aee62e","modified":1692185527326},{"_id":"source/HTML/html8/index.html","hash":"0f0c05cd36c67ea9ede7289c0cb4be8ae259ab3f","modified":1717465005026},{"_id":"source/HTML/html4/index.html","hash":"d5d07eb5221de3d5df1f181324e84b84d0abda4e","modified":1716216884854},{"_id":"source/HTML/html4/the_answer.html","hash":"68f2a807d5dc419f92afebc4f09bf0051c06f3a6","modified":1716217712722},{"_id":"source/HTML/html6/index.html","hash":"d7101f7ca1949fdc32713a038365ff36de75a2d7","modified":1717256665278},{"_id":"source/HTML/html7/index.html","hash":"61bf41f4de61157b8881d4ec4dd672d2c9f1c456","modified":1718076146702},{"_id":"source/_posts/千奇百怪的字符串处理函数/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1700353358394},{"_id":"source/_posts/千奇百怪的字符串处理函数/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1700353343033},{"_id":"source/HTML/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1715782416921},{"_id":"source/HTML/.git/hooks/fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1715782416922},{"_id":"source/HTML/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1715782416921},{"_id":"source/HTML/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1715782416922},{"_id":"source/HTML/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1715782416923},{"_id":"source/HTML/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1715782416922},{"_id":"source/HTML/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1715782416923},{"_id":"source/HTML/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1715782416923},{"_id":"source/HTML/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1715782416923},{"_id":"source/HTML/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1715782416925},{"_id":"source/HTML/.git/logs/HEAD","hash":"77582e9bc79f06937ac49d5759bf40ad22ce7eff","modified":1715783708421},{"_id":"source/HTML/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1715782416923},{"_id":"source/HTML/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1715782416924},{"_id":"source/HTML/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1715782416924},{"_id":"source/HTML/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1715782416924},{"_id":"source/HTML/html5/js/script.js","hash":"6aede0becd445187a933187277a8422090e56cc5","modified":1716594978034},{"_id":"source/HTML/html5/css/style.css","hash":"671a31d711dda3537d995bfb1dc411db0d13ab59","modified":1716616585486},{"_id":"source/HTML/html7/feian/revised_intro.html","hash":"eef44e92f5d99fbc37a55ef349495e025568ea3e","modified":1717339110287},{"_id":"source/HTML/html7/feian/easy_and_smooth_languages.html","hash":"36a71b9d09af626fa7223337e2c913ff32199070","modified":1717337840363},{"_id":"source/HTML/.git/objects/15/50a1ae21ecc4d911efa24bb0b81e58e28aaf35","hash":"f525a9aac1d55a970b664101fb69286b1af438e1","modified":1715783708418},{"_id":"source/HTML/.git/refs/heads/main","hash":"88aa3f7b8f248071dac2b674a87d92b6c1cc5fc5","modified":1715783708421},{"_id":"source/HTML/.git/objects/07/8182e6510162ebfc4611edcacdcc8303b5b97c","hash":"a5560ea39b45d955f56ea0071d6b6aeeafdbacc4","modified":1715783796543},{"_id":"source/HTML/.git/objects/27/4dcdc436dd95c37c774664821b6fd17c248563","hash":"52ae40e7b494fbe1efe00b0528a722f2a5fb024c","modified":1715783887553},{"_id":"source/HTML/.git/objects/0c/20b86be84311ff29093adf5d14f302651cf6c9","hash":"a757828945f3c1deccc3cff1aa1235af0353244d","modified":1715783887546},{"_id":"source/HTML/.git/objects/28/884ec4b05f9d0010f58e15feff6a2a8e90092d","hash":"b9f9b75023f64dbeea62952ff78dbc973c88fd4a","modified":1715783887205},{"_id":"source/HTML/.git/objects/5e/6c5cc0f0ad942f921ae526a8b42b9ea30c478d","hash":"e756c41141d612310e329b8ecc7a79827579cb33","modified":1715783887210},{"_id":"source/HTML/.git/objects/2e/95669ad0489d0067f8ad5ab64a10f308e2a71e","hash":"eedf139f7c44e95d4d78ca0a02275ba0329d1e1d","modified":1715783887206},{"_id":"source/HTML/.git/objects/60/3970eac5f27d19ece330fb4955438d7b72a949","hash":"9c578b0096e04ac1f0718b00fc783d191004044f","modified":1715783887204},{"_id":"source/HTML/.git/objects/6b/65967050cbb4929de701672eae09a4da0a3b42","hash":"d94ff84a6642bc4376752d64165283118310a6c2","modified":1715783708414},{"_id":"source/HTML/.git/objects/9d/3c3220b8e02ce1cb7417387cd8c0b5be0d93bc","hash":"7463fb6253b98ac4902d0d74916cdaa8f016c1d4","modified":1715783700869},{"_id":"source/HTML/.git/objects/d0/eedf53ba1b791d4f1c0f6bf3b19f4978e6f243","hash":"435cc88d218b1cd0ae502c10b981c9d7e633e908","modified":1715783887208},{"_id":"source/HTML/.git/objects/9e/465a82e27d30183b49e59c9dbf5def2b41fce8","hash":"3e53f4fac1fbfc6dd994c4969cd52ac0d2cab64e","modified":1715782430974},{"_id":"source/HTML/.git/objects/ae/f0a7bd4416642d7224081e1fd96eb29025b670","hash":"e59025bf43171adec98c167d96c5dabc4f6c092d","modified":1715783796538},{"_id":"source/HTML/.git/objects/82/3f8e95c18064bbeedaecd6af5fe5fe96629ea3","hash":"daa353f6da8887d23f1ae24a8bd328c184eebf7d","modified":1715783796540},{"_id":"source/HTML/.git/objects/dc/b10a8b2883f41399a07920d9f936574949e2ae","hash":"2af43b0e8a38d852f0b785559a0900c55552e0c8","modified":1715783887231},{"_id":"source/HTML/.git/objects/fa/43294592c3398cc602c4a77b197ef2b6c1fb95","hash":"b136ce73bf6c8dda3adc8a45f7d8f1b50fab7d15","modified":1715783887547},{"_id":"source/HTML/.git/objects/d3/7409be7a6d33b7957c29eccf4e3058c610b7be","hash":"678b6781b4dbe1b4b01116c21e369ecd92f8dd63","modified":1715783887546},{"_id":"source/HTML/.git/refs/remotes/origin/master","hash":"0d017db93105a9413cb29b5be6b431d0e7654104","modified":1715783887577},{"_id":"source/HTML/.git/objects/f0/b1884dba3d372fe217409fb4132e7e10330a50","hash":"63f540ac6231eb1a125ea399324fca982d861540","modified":1715783887231},{"_id":"source/HTML/.git/objects/d1/bc3da52862dabb4ac381cd49ac3e68f1efb128","hash":"7bd44effa37abdc6b569a9cf7ad76ea1d78c39c0","modified":1715783887555},{"_id":"source/HTML/.git/logs/refs/heads/main","hash":"fa4767a555033130cfad45ae56a927059abc2216","modified":1715783708421},{"_id":"source/HTML/.git/refs/remotes/origin/main","hash":"aae901eef46ed2c25a677ec920e5749543388bc4","modified":1715783796568},{"_id":"source/HTML/.git/logs/refs/remotes/origin/master","hash":"a43178f185189d7e96673355f85fe84bcb3897d8","modified":1715783887578},{"_id":"source/HTML/.git/logs/refs/remotes/origin/main","hash":"e8f83fcc696c0e57ee2e8a9b488d36089c3dca33","modified":1715783796569},{"_id":"source/_posts/C-premier-plus-Chapter-3.md","hash":"5d784153c03c383e9b63233dc967fb7f530d3bf4","modified":1703228186135},{"_id":"source/img/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1700352986978},{"_id":"source/img/Figure3.1.png","hash":"9a64943d9fabe1691ccc233e9ab30999e5d37614","modified":1701239585970},{"_id":"source/img/InsertionSort.png","hash":"5fd3df7309db3e4db4d204e452676f43ce325a2c","modified":1705708877333},{"_id":"source/img/Listing3.1.png","hash":"c5a011123a484e318bda3821ef7c348fd1380d92","modified":1701232358297},{"_id":"source/img/Listing3.4.png","hash":"594b7a37e242667703681d0bd0c94dfe2b31666f","modified":1701658343269},{"_id":"source/img/Listing3.6.png","hash":"d24b1a60a90d88504e5489da8626f57cc85e0a9f","modified":1702169023758},{"_id":"source/img/Listing3.8.png","hash":"124a731c15f7d5afa611810b492569fa82f819a2","modified":1702522005079},{"_id":"source/img/MergeSort.png","hash":"ba221d67ce79689ccfbd3da38884ed5f1974cab5","modified":1705710552561},{"_id":"source/img/Summary.png","hash":"b9ab6f8a2c4ac920f2744c06d2d09e8ff33c17a7","modified":1702521273264},{"_id":"source/img/Twotables.png","hash":"ec24c9577f2ae05cb599b12c8a1bad18f99ee7fa","modified":1702521903751},{"_id":"source/img/basicdata.png","hash":"1314397a0e1e2a169bc8d593a1dccf1dd3776393","modified":1702444095121},{"_id":"source/img/original.png","hash":"68c25be9601ee079eb97d19f30aa69e72bf1dd89","modified":1700285241662},{"_id":"source/img/overnunder.png","hash":"6499674bb58df921b6e37ebf8b3792a82645894e","modified":1703202588952},{"_id":"source/img/page3.png","hash":"cd7a0d3c6cf9bf6b657e4227010178c64dfb4d9e","modified":1701090376737},{"_id":"source/img/quartmol.png","hash":"3ad599c59a736719f57a41044fef232827928248","modified":1703205014052},{"_id":"source/img/recursionsquaring.png","hash":"3c9280cabffe5c7918411548d9316fbf2b67d63e","modified":1706024769819},{"_id":"source/img/scheme2.png","hash":"d3adf1151589809d181b1506a7651bc14dea4950","modified":1709515319785},{"_id":"source/img/scheme1.png","hash":"ec7c28b658f7f84bff5673a5b14771dc2d581430","modified":1709515304956},{"_id":"source/img/stlssalgo.png","hash":"9f1db394f3ebb53b75efdf58ad98b901706b28d0","modified":1706024844951},{"_id":"source/img/tracer.png","hash":"1f7da8adb28468408411dc073f0db979f801f73c","modified":1700875810262},{"_id":"source/HTML/html5/hertaa1.gif","hash":"794867671d82b9d2f716cb3eb018f3431fb28ae3","modified":1700831323000},{"_id":"source/HTML/html5/hertaa_github.gif","hash":"852568878ab069f476a662878eb22a189a58ad85","modified":1716558558724},{"_id":"source/HTML/html4/good.png","hash":"2f10f6593e82bd1b81ba7f2b431a5e37ee2d93be","modified":1716217386729},{"_id":"source/_posts/千奇百怪的字符串处理函数/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1700352986978},{"_id":"source/img/ASCIIout.png","hash":"381509ad5a09c4fb8646a6b098541ae82a73c4c8","modified":1703203527061},{"_id":"source/img/BinarySearch.gif","hash":"549b6ef8d85291e9e9f56f315fdcd5fc774669c2","modified":1705849368493},{"_id":"source/img/Mar2nd.png","hash":"481a005693ea7a392dcba1b3d19025f0aa430257","modified":1709309580831},{"_id":"source/img/Mar6th.jpg","hash":"6544f2cc824aa196c715a7409ec6e8a1472d60d7","modified":1709763787372},{"_id":"source/img/Mar5th.png","hash":"58fb299dcc504e1b28a0778f6149075f67bdffc7","modified":1709652331482},{"_id":"source/img/storingtypes.png","hash":"84806c0293b011f0e3f374ba25fb413f661e8071","modified":1701315379760},{"_id":"source/HTML/html1/HTML.png","hash":"12360d3b0561081002d98e42e2bcb4e668c28e6c","modified":1715765257911},{"_id":"source/HTML/.git/objects/67/d93bebeaaf89f4ad78c6c9bec415eaa0ae73ce","hash":"a1ed2b6806accec8ea83b3bf15bb23841116a438","modified":1715783887343},{"_id":"source/img/BinaryTreenum.png","hash":"8f039bf14a9f4b412dfd119ca476765e265e7aca","modified":1705848969435},{"_id":"source/img/Feb26th.jpg","hash":"555b08f8bb6a2c01d4c6f247b45f0b8af079725e","modified":1708960878285},{"_id":"source/img/Mar7th.jpg","hash":"c26f276820f8b5ddb5e98c5256b7d051b3a396bd","modified":1709856694176},{"_id":"source/img/Processes.png","hash":"52a6a73523a9b4d5d9de067e05c5a2c0ce2f89a0","modified":1705754895066},{"_id":"source/img/analysis.png","hash":"9261aa98221b621f1945b9b2d91683a591415471","modified":1700191269501},{"_id":"source/HTML/html2/Little_story.png","hash":"e6fbbdd5c5b3376a2fbd40cced0a2d7215a632f1","modified":1715957033402},{"_id":"source/HTML/html5/hertaa2.gif","hash":"5fcdfa7a978d7c7550edd22e55800a775e96e0b7","modified":1700831323000},{"_id":"source/img/Feb20th.jpg","hash":"94471e5b41f54a7c56ce9378ba925e02a6350693","modified":1708441123387},{"_id":"source/img/Feb24th.jpg","hash":"6fef4b07fd16561979f505b81d212dd030af4602","modified":1708784210297},{"_id":"source/img/Feb27th.jpg","hash":"e593c7a3dbd0f3423da9d137ee021dafa90e4a16","modified":1709045739312},{"_id":"source/img/Mar4th.png","hash":"9aac760c473323245cf50a80d35e87b742eaf01d","modified":1709565844817},{"_id":"source/img/Treeexample.png","hash":"67745f1e80a9d055bcbef669c9944b81b9e10914","modified":1705763416745},{"_id":"source/img/page2.png","hash":"511e645ea6c474a8d9fbf9ca71e90342b8a7cba6","modified":1701090370579},{"_id":"source/img/page1.png","hash":"547431c3ef4398234cb6fbd02d64b807f32ca2b5","modified":1701090344551},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1693386330363},{"_id":"source/img/Chathappy.jpg","hash":"f3caddea5e254e4aa4f7dc68cf2afdbec65aa2d4","modified":1705937153179},{"_id":"source/img/Mar10th.jpg","hash":"4929c2efe0bd19d54c6e463ebfe74a4d19dd1aae","modified":1710081768752},{"_id":"source/img/Mar2nd1.png","hash":"73779824ca3de4c238ac4127ea3a9a711f305995","modified":1709392841051},{"_id":"source/img/nvyppt.png","hash":"50b9e41450c56ab429276109b76b50eaed05e352","modified":1708528874318},{"_id":"source/HTML/html2/code.png","hash":"a8d943affb831dae179494790534c0ba4c9819ed","modified":1715958338275},{"_id":"source/img/Feb25th.jpg","hash":"62e455da4a2520bcc833a8253cc651544a04e670","modified":1708868518003},{"_id":"source/img/Feb28th.jpg","hash":"5db1f29c2be98585935e85578ebacbaea331fa05","modified":1709131318866},{"_id":"source/img/Mar18th.jpg","hash":"c069a4ecc70c4a7944fe5670c70b43aac60dd2f4","modified":1710770648165},{"_id":"source/img/Mar22nd.jpg","hash":"8279b5321f94d372606282f861c75848caf48cef","modified":1711119154748},{"_id":"source/img/Mar19th.jpg","hash":"7383caf6e1f794e4470a6414785eda1cabcfb614","modified":1710856339152},{"_id":"source/img/pic1.jpg","hash":"20f70a17f22578e87ff2a02eb6613bb481dcfb36","modified":1709515107138},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1693386330331},{"_id":"source/img/Chapter1.2.png","hash":"8ea3c4ba92701fa4a93921e35ec6acd086961df4","modified":1699496068718},{"_id":"source/img/Feb19th.jpg","hash":"53ff79b61db4424f73b705d5fc08cfdce1e97936","modified":1708351904180},{"_id":"source/img/Feb21st.jpg","hash":"32468d9959e388c7b48c9bf60c681ff6213440f9","modified":1708529018176},{"_id":"source/img/Mar8th.jpg","hash":"537858ea0fd7fb721c55349c325d6d6fdf53a340","modified":1709856708107},{"_id":"source/img/Mar8th2.png","hash":"94a25746cb36dede8dc6c78d5e7098901c651c06","modified":1709911915562},{"_id":"source/img/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1700455682632},{"_id":"source/img/pic.jpg","hash":"9d4ba952b1aa05534bc7fe68e84f0998887e3219","modified":1709515122126},{"_id":"source/_posts/OJ中的那些小丑行为/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1700455682632},{"_id":"source/img/New_year/3.webp","hash":"3b829b9015dbf395a2fcf41688f51c2adc87f648","modified":1707485710261},{"_id":"source/img/Feb23rd.jpg","hash":"cbc4db507d129ac58cfe1954859d2eaacf8a68dd","modified":1708698306025},{"_id":"source/img/Raining.jpg","hash":"e66144526294defe2561afce8058d5c2419bc021","modified":1705936452787},{"_id":"source/img/Feb22nd.jpg","hash":"ead47ee7c37f47b26f23d1b3956264092d205d6b","modified":1708612700929},{"_id":"source/img/Mar9th.jpg","hash":"7a86dd7e9342d4b08ce4752aef460539d274ca26","modified":1710082016216},{"_id":"source/HTML/html6/Feb22nd.jpg","hash":"ead47ee7c37f47b26f23d1b3956264092d205d6b","modified":1708612700929},{"_id":"source/img/Mar8th.png","hash":"48a31a4d2c576482924d2dc85a911a8444b2521a","modified":1709911900815},{"_id":"source/img/RecursionTree.png","hash":"32fc0b9c6f33c5ce52b6b1ddfe583d70dcbb59b6","modified":1705712426522},{"_id":"source/img/22cf517c3686de1119cf1f156160bd4.jpg","hash":"35301dbbba86602eeffc97fcade1eed91dac7de4","modified":1700828403550},{"_id":"source/img/Feb29th.png","hash":"364cef7f0396841dacb086c93cd44744a586e2a5","modified":1709218248724},{"_id":"source/img/New_year/2.webp","hash":"edaf1debd575e994da7384ea470bc7f3ffb1e81f","modified":1707485673014},{"_id":"source/img/Mar17th.png","hash":"d3805a62af7887ed8898de8083b82e1a8bb40ab2","modified":1710684603912},{"_id":"source/img/New_year/6.webp","hash":"3d3a5937b7af483f7ef5bb54b4b021c9050eddd9","modified":1707485837559},{"_id":"source/HTML/Dream.png","hash":"d6d6afa86811ba679668a45eeb89b030d15a1b26","modified":1692873545169},{"_id":"source/HTML/html1/encourage.png","hash":"091ddd3b3f3e2d93cc21675947d6638b974697cd","modified":1715765200620},{"_id":"source/HTML/.git/objects/f3/a2ac968b36d09c121617c6d7ac27f9292f085c","hash":"32c8ab3abaa394055e1fd8f02e6f5d1440f42660","modified":1715783887546},{"_id":"source/img/New_year/4.webp","hash":"bc941d563e7069bd2f448a2e118c53611c46e3aa","modified":1707485755009},{"_id":"source/img/New_year/5.webp","hash":"db83833208f445b4eed4b391752f811897601304","modified":1707485770626},{"_id":"source/img/New_year/1.webp","hash":"86d8cf51a8655dc45f496f072b15000a163d410d","modified":1707485366318},{"_id":"source/HTML/qianxia.ttf","hash":"406655310fb7a22306f2113c2aa0c6d888400fa4","modified":1716478221229},{"_id":"source/HTML/bgvideo.mp4","hash":"099dc4f24f26dd4557f14588999710ad98a709aa","modified":1717913420784},{"_id":"public/HTML/ivest.css","hash":"615a16c3fd8f9031ff6c20f2e943e5818d06f134","modified":1717916545852},{"_id":"public/HTML/html5/js/script.js","hash":"0b66de429b76fa9d157d897c5cf31c6f3048bd2b","modified":1717916545852},{"_id":"public/HTML/html5/css/style.css","hash":"790bbcf92b3ad0ba0b513cb7532ccb3684f52d36","modified":1717916545852},{"_id":"public/atom.xml","hash":"f189bd6668caefdb98dece6dea17a7c87929264a","modified":1718076169093},{"_id":"public/search.xml","hash":"4f2ec8478ed178f2e04784dc4a746f2838612248","modified":1718076169093},{"_id":"public/HTML/investigation.html","hash":"55b4e6641c07995530e3b9842a2bcdf143ae3e07","modified":1717916545852},{"_id":"public/categories/index.html","hash":"c2e2b88f2fa5a681bd329e5a721807608ab9afc6","modified":1717916545852},{"_id":"public/HTML/new_intropage.html","hash":"9f964350dcd983a159b028e79b08c13c33b409b4","modified":1718076169093},{"_id":"public/HTML/runoob-test.html","hash":"ecbc7be44f3e7e8f2335fd5cccf130c832707aea","modified":1717916545852},{"_id":"public/HTML/zijie.html","hash":"ac7d13643adb3c33f916041b292a558cbc5d919b","modified":1717916545852},{"_id":"public/tags/index.html","hash":"98d3eb0636c7d95659639f853b66bc554835da42","modified":1717916545852},{"_id":"public/HTML/trial.html","hash":"9c89da939784c9537ce8ffe3f1c71042f0ec95df","modified":1717916545852},{"_id":"public/HTML/html1/index.html","hash":"fe61c691b06ce0d14bc5e64ac11d589231562e38","modified":1717916545852},{"_id":"public/HTML/html3/index.html","hash":"2c15ec72bfff88c0e2ace9eabe40bfdc870507e1","modified":1717916545852},{"_id":"public/HTML/html2/index.html","hash":"2cd25ab121ef605173c812d8bf84127edf8582ef","modified":1717916545852},{"_id":"public/HTML/html4/blank.html","hash":"294def66776947fb9d9b609ac1120145f04d84af","modified":1717916545852},{"_id":"public/HTML/html4/the_answer.html","hash":"c7041a2cef6dba2cf4132f241a78f11bd465e281","modified":1717916545852},{"_id":"public/HTML/html4/index.html","hash":"b901c28c2c508788151af7a7502236036b72eda0","modified":1717916545852},{"_id":"public/HTML/html8/index.html","hash":"8bcc789793af15dd4b00a4addba7f3bf2fa73f38","modified":1717916545852},{"_id":"public/HTML/html7/index.html","hash":"c994fc69e939f04cc2194b68470699f502eb206a","modified":1718076169093},{"_id":"public/HTML/html6/index.html","hash":"e75767654e603c17f16dbc6d46f20ed718451fb2","modified":1717916545852},{"_id":"public/HTML/html7/feian/revised_intro.html","hash":"d809a16e6f4fe40b5a6ae2d207412f64729dd7b1","modified":1717916545852},{"_id":"public/HTML/html7/feian/easy_and_smooth_languages.html","hash":"76d1592758b1bfbfdb820b6c7cba5963349bb862","modified":1717916545852},{"_id":"public/2024/05/20/小思考/index.html","hash":"6a734e4baebac21f8fd10ff81e43777354a76290","modified":1717916545852},{"_id":"public/2024/05/14/我的新尝试-HTML学习日记/index.html","hash":"a04b106c597be3a55a9c787f851f92261714454f","modified":1718076169093},{"_id":"public/2024/03/09/关于我的抉择：C-与算法或者数据结构/index.html","hash":"8f4ee0bc41f058ea88b116bfa5859e0bdcbef518","modified":1717916545852},{"_id":"public/2024/03/04/我的心态调整指南/index.html","hash":"c9d7838fa298cfd205df3261cd93e48bb9bcecf5","modified":1717916545852},{"_id":"public/2024/01/26/算法学习：快速幂-以及-这几天搞机心得/index.html","hash":"fe8c35828b6c08d3a774113559f8cebcbb2398c5","modified":1717916545852},{"_id":"public/2024/01/23/算法学习：分治法的其他例子/index.html","hash":"49e336c4eeeedbd18ca624c3b5f3b777a667e788","modified":1717916545852},{"_id":"public/2024/01/21/算法学习：分治法中的二分查找/index.html","hash":"8db74019ff86c09dab9be75a73d3c4f99d6c8abf","modified":1717916545852},{"_id":"public/2024/01/22/Javascript学习：一个新起点/index.html","hash":"6ee554096794a213e9c48e2a5cb240ddde216c7b","modified":1717916545852},{"_id":"public/2024/01/20/算法学习：解递归式以及渐进符号/index.html","hash":"b8496aea998cc8d2ac37f4fa06c4416d5d275974","modified":1717916545852},{"_id":"public/2024/01/20/算法学习：归并排序以及插入排序/index.html","hash":"be193d964b679a91a1d3475483cd65f87e20efd4","modified":1717916545852},{"_id":"public/2024/01/04/如何使用结构体/index.html","hash":"3440703b21ed0acf029e2f85ae7ebe0cb6a94821","modified":1717916545852},{"_id":"public/2024/01/04/字符串函数/index.html","hash":"42e6864992635eadd28c38fa3261c785d2c81957","modified":1717916545852},{"_id":"public/2023/12/22/C-premier-plus-Chapter-3/index.html","hash":"17c7271340b64bafd34bbff95a68ba5f641084c6","modified":1717916545852},{"_id":"public/2023/11/28/C-premier-plus-Chapter-2/index.html","hash":"ba6ff603f43b7e100e0c27328e6b34145538e581","modified":1717916545852},{"_id":"public/2023/11/27/C-premier-plus-Chapter-1/index.html","hash":"c5d7c0e6d6b72054229b26974dd97cd37b1c81cd","modified":1717916545852},{"_id":"public/2023/11/27/高等数学小整理/index.html","hash":"554ac994322ad6466055250474b4a76c798c2223","modified":1717916545852},{"_id":"public/2023/11/24/C语言练习7讲解/index.html","hash":"bb063eae1d5faf0a98f24da3198ce92f275264ff","modified":1717916545852},{"_id":"public/2023/11/20/Kis/index.html","hash":"b87c55fd698ccf6f228b5494bec5f0a9233ebe6b","modified":1717916545852},{"_id":"public/2023/11/20/直播内容复盘-排序与交换/index.html","hash":"75e282b8bd5923fd841704c4ef0ef731fb170d74","modified":1717916545852},{"_id":"public/2023/11/20/输入与输出/index.html","hash":"1b53e81a11d1ff91a85da6e5e9f5d17b87475252","modified":1717916545852},{"_id":"public/2023/11/20/千奇百怪的字符串处理函数/index.html","hash":"154f46162724d1f3263b977f42cff8692c4767f5","modified":1717916545852},{"_id":"public/2023/11/20/OJ中的那些小丑行为/index.html","hash":"51cd57240bf748604cae344168b5450f4fb5a4c2","modified":1717916545852},{"_id":"public/2023/11/07/hello-world/index.html","hash":"1d478c98f54e218b5eec69d77d23254a59d07a62","modified":1717916545852},{"_id":"public/2023/11/07/数组-1/index.html","hash":"1917a6cd4a157ad1969728306d50816ad98dc092","modified":1717916545852},{"_id":"public/2023/08/30/流程控制方法/index.html","hash":"0631ac6e90d22bd8ea96a95cc0d10638032cc637","modified":1717916545852},{"_id":"public/archives/index.html","hash":"0f9e8fab389a9b767f50060dc95f61a06df9e276","modified":1717916545852},{"_id":"public/archives/page/3/index.html","hash":"d2d3281a19231357cb6cdeaee614cc3ae20af8a8","modified":1717916545852},{"_id":"public/archives/page/2/index.html","hash":"fca518b5c629ee965b996f5d3881362296b45777","modified":1717916545852},{"_id":"public/archives/2023/index.html","hash":"6e5de79f0fbac79d68c796b2948becdcab3000ad","modified":1717916545852},{"_id":"public/archives/2023/page/2/index.html","hash":"c9bea831ef87686b35016f3e92faa538c6b57e5e","modified":1717916545852},{"_id":"public/archives/2023/08/index.html","hash":"58641ef71a94e6862430fae83a57dfdc947b2826","modified":1717916545852},{"_id":"public/archives/2023/11/index.html","hash":"7f38634e78a14b224162e73f210e6ed33f34e012","modified":1717916545852},{"_id":"public/archives/2023/11/page/2/index.html","hash":"7b3268bbcce129903574203dee6ad2aea6b7cb2d","modified":1717916545852},{"_id":"public/archives/2023/12/index.html","hash":"eb3fa69a301dacfc1012054679ba77008d68da51","modified":1717916545852},{"_id":"public/archives/2024/index.html","hash":"74f897638c66fb43448f140606d65dc8e5778a20","modified":1717916545852},{"_id":"public/archives/2024/page/2/index.html","hash":"7277b102bc8340e32ea8d78e725773d73a661f2f","modified":1717916545852},{"_id":"public/archives/2024/01/index.html","hash":"501604dc10468766b2fb4e2719365b4473e42efe","modified":1717916545852},{"_id":"public/archives/2024/03/index.html","hash":"dda318201c31a4a0d00f771e55fe56874b94b474","modified":1717916545852},{"_id":"public/archives/2024/05/index.html","hash":"79a95146e58dbbcc173c17d8703c8e1f959c5b6b","modified":1717916545852},{"_id":"public/index.html","hash":"9711755a5baedb21382a9c8578e6446f130e5d42","modified":1717916545852},{"_id":"public/categories/python学习/index.html","hash":"06e5d36f78d9a3b670478a283557afe35a14cf68","modified":1717916545852},{"_id":"public/page/2/index.html","hash":"05d93e463ee80cbd9d51408bc2639eb0c9c803bd","modified":1717916545852},{"_id":"public/page/3/index.html","hash":"2824a0c2f9aafe65d2ffe55ce5e63fb2c359a2e7","modified":1717916545852},{"_id":"public/tags/C-premier-plus/index.html","hash":"0a3861fe253f7d708a50da784279f2bd6596f6fa","modified":1717916545852},{"_id":"public/tags/C语言学习/index.html","hash":"4cb75753613f63b7d3bf6272a01743627eb842bd","modified":1717916545852},{"_id":"public/tags/JS学习/index.html","hash":"a4bf4705d86f44bb1a8d56f9494b533d373ceca5","modified":1717916545852},{"_id":"public/tags/学习资源/index.html","hash":"d3b2a7776322fdc0e0305b9c64724615c28b3148","modified":1717916545852},{"_id":"public/tags/C-学习/index.html","hash":"e446466a403aff937d8b4659ca0b2b82adf35daf","modified":1717916545852},{"_id":"public/tags/心态调整/index.html","hash":"6bb11c483b77f3a318a141e1ff23fcf189b45538","modified":1717916545852},{"_id":"public/tags/HTML学习/index.html","hash":"ca18ebed084020a606a4ca4fe3b95f3dc1602879","modified":1717916545852},{"_id":"public/tags/算法/index.html","hash":"e86cfe1da49a60646f9adda9f81e1c8f1982e032","modified":1717916545852},{"_id":"public/tags/搞机心得/index.html","hash":"0608b47c4de682ecca6b61004d0fd8265dd0b928","modified":1717916545852},{"_id":"public/tags/大学学习/index.html","hash":"09345f564b9dac07a2f8a85d970152ec45167669","modified":1717916545852},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1717916545852},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1717916545852},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1717916545852},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1717916545852},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1717916545852},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1717916545852},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1717916545852},{"_id":"public/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1717916545852},{"_id":"public/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1717916545852},{"_id":"public/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1717916545852},{"_id":"public/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1717916545852},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1717916545852},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1717916545852},{"_id":"public/images/wechat.jpg","hash":"ce7edc6de9f7875d8467157831680d51cf729d5a","modified":1717916545852},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1717916545852},{"_id":"public/HTML/girlsit.gif","hash":"4207d0f6e5f8045236f6c69f23e65fe5d024f8a4","modified":1717916545852},{"_id":"public/HTML/index.html","hash":"41deabcf7b23f35244dd980065cfd22ca92a02e4","modified":1718076169093},{"_id":"public/HTML/zijie.index.txt","hash":"a43cc6533dd6a3d6f98a3f480f9867126b617ea0","modified":1717916545852},{"_id":"public/HTML/girl.jpg","hash":"5c4a03fe07bab239d110d66c666f4b3a83aee62e","modified":1717916545852},{"_id":"public/xinnian/image.php","hash":"1da5b3d2e35017bf0e5a04b25ffbb3519b0d175f","modified":1717916545852},{"_id":"public/xinnian/img.txt","hash":"065d59684cbcfaa8b08c3e6cee6f5b248270b590","modified":1717916545852},{"_id":"public/img/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1717916545852},{"_id":"public/img/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1717916545852},{"_id":"public/img/C67.png","hash":"adaf3083d3084cf1c2e9c2bb325c327c1a377f59","modified":1717916545852},{"_id":"public/img/C992.png","hash":"04485e02115ca4660bf9946987e3d7da90556682","modified":1717916545852},{"_id":"public/img/C99.png","hash":"b1e0dc0118c6bf06af965b98ade426380f023d18","modified":1717916545852},{"_id":"public/img/C99sup.png","hash":"0055cc389cd2c3662ecdfaac4419162f2d4f91e1","modified":1717916545852},{"_id":"public/img/Chapter1.3.png","hash":"1fa97ced15bb93afe0bd566f36f1d301e5b94a45","modified":1717916545852},{"_id":"public/img/Chapter1.6.png","hash":"baee1266a1c4bd093858cb6b714fc5ce0229d9d1","modified":1717916545852},{"_id":"public/img/ErrandWarn.png","hash":"53fe6ea633c6138e7d8e4c26dda127e2e28f2d2b","modified":1717916545852},{"_id":"public/img/DefinenInitial.png","hash":"358f626dadde0ee97e3a1f72f3b511d2f3baf7e8","modified":1717916545852},{"_id":"public/img/Figure3.2.png","hash":"3bb9fae9abb4845b3103f2f6d27592a5412684c9","modified":1717916545852},{"_id":"public/img/Figure3.3.png","hash":"c912806a797ec62de153711a711567db5579ee1a","modified":1717916545852},{"_id":"public/img/Figure3.5.png","hash":"dcff6076e956c09f7675a42f4726d176f86bccdb","modified":1717916545852},{"_id":"public/img/Figure3.6.png","hash":"b0cc712c615769a4e3efc7d737e450042b5a2429","modified":1717916545852},{"_id":"public/img/INF.png","hash":"1fc8eddcd6786431426ba4b9dc0fd4a1394136f9","modified":1717916545852},{"_id":"public/img/Figure3.7.png","hash":"98dbbcacf3fa739d7f0b2b82453a50c476ba25cf","modified":1717916545852},{"_id":"public/img/Identifytypes2.png","hash":"7ece2917a58939c33b14502eeca7f2b44100e0aa","modified":1717916545852},{"_id":"public/img/Identifytypes1.png","hash":"0e04ea9a7930f4ffbddfd565c570d50eb850caee","modified":1717916545852},{"_id":"public/img/Listing3.2.png","hash":"5f4802c5cca99698cf8f6a10e705923c4464c521","modified":1717916545852},{"_id":"public/img/Listing3.5.png","hash":"0ac5f463b7a03977d3991e43f93ddae55fba1c08","modified":1717916545852},{"_id":"public/img/Listing3.3.png","hash":"c275b4512c1e629771215e18749ec158ba2f2721","modified":1717916545852},{"_id":"public/img/Listing3.7.png","hash":"6cc2ac2f81853848207505d8e98f711044a82c4f","modified":1717916545852},{"_id":"public/img/Listing3.10.png","hash":"b3ff13050dab0afd957ba36a55c12d84efbf4090","modified":1717916545852},{"_id":"public/img/Listing3.9.png","hash":"a7218454007872178d4f4182d62baf3886ff3dc1","modified":1717916545852},{"_id":"public/img/Mar172.png","hash":"979a5d5127baf42bcc7a364e875a453de5ae3bc3","modified":1717916545852},{"_id":"public/img/Mar2nd2.png","hash":"ee2f387c1cdd41fed2f9b54809b461eae4e1eb4c","modified":1717916545852},{"_id":"public/img/Olist3.1.png","hash":"3c1443d9c711ea004034ebd6cc9d4139ea60bf3d","modified":1717916545852},{"_id":"public/img/Perfect.png","hash":"c6cd00d1dd115381045497718f5f9f4ddab65af7","modified":1717916545852},{"_id":"public/img/Pasted image 20231222083825.png","hash":"c957713877fe322f405be6b17a970e5cfdf578f3","modified":1717916545852},{"_id":"public/img/Rainpaper.jpg","hash":"4ff2464cdd6b8a01317cd0961968d2e1ef2b7283","modified":1717916545852},{"_id":"public/img/Table3.1.png","hash":"da3005fdd53e23b4002cb527ade9d23c33a27e1c","modified":1717916545852},{"_id":"public/img/Table3.2.png","hash":"4dab658d3da0911d2f23662c37c9ec0fdb905ee0","modified":1717916545852},{"_id":"public/img/alldevices.png","hash":"7b1c10b01cb0d0fbc2a3415b0f0345122239d403","modified":1717916545852},{"_id":"public/img/alarming.png","hash":"495479b6c2d663c93b95994732132a8ded52b803","modified":1717916545852},{"_id":"public/img/assignment.png","hash":"e851496838a0be305e2c38f145302e860b0a71fb","modified":1717916545852},{"_id":"public/img/assignments.png","hash":"1207ce82aee1ddde14919691207dd8b4df03be0f","modified":1717916545852},{"_id":"public/img/charassign.png","hash":"1e4d076e59a8afd8a2856bc7faecbcdd8b475eb0","modified":1717916545852},{"_id":"public/img/codeline.png","hash":"6a8c0699cf0295ea8e3686aeb7403610c1fe9ac4","modified":1717916545852},{"_id":"public/img/calling.png","hash":"dd487668c58a1f646a6bc6381e867160615e8473","modified":1717916545852},{"_id":"public/img/cmtoinch.png","hash":"dc7252d000d167b7003084d8ecc62a2ed45949f8","modified":1717916545852},{"_id":"public/img/comment.png","hash":"5acf27b5f8c12754d10aacf4d2ac836e4e2ea87f","modified":1717916545852},{"_id":"public/img/chardeclare.png","hash":"33e086f1a508a133182fedeb8355a0c5941b760a","modified":1717916545852},{"_id":"public/img/chardef.png","hash":"4e537e5a7a10e52ddc96f94eaa887e32b8f76f7b","modified":1717916545852},{"_id":"public/img/drop4in5.png","hash":"1f084367e750f6a5ec5239d515f01bd625983a26","modified":1717916545852},{"_id":"public/img/decimalandexp.png","hash":"3ecff8b3a769e245aae4cf9d74de4f765e27eb32","modified":1717916545852},{"_id":"public/img/example.png","hash":"639cb76a97bab68b43c35737a750e0da28607d35","modified":1717916545852},{"_id":"public/img/example2.png","hash":"fcdd07747fb105d956c2627370cb289481bd76e7","modified":1717916545852},{"_id":"public/img/floatdeclare.png","hash":"b71c10d594fbbebbc2cdb93f4afcc6eaff210c17","modified":1717916545852},{"_id":"public/img/flowresult.png","hash":"8e9ff1864ff1314f235c437735a6a6983fed89d1","modified":1717916545852},{"_id":"public/img/four.png","hash":"51d9ee94391420746f023a2f839e1530d3625ac2","modified":1717916545852},{"_id":"public/img/four_kinds.png","hash":"d77d90aea46b9cf769aaff5e0e1ef9910577bbf1","modified":1717916545852},{"_id":"public/img/hopeagain.png","hash":"870d9f01eafee337246ddbb3fd2fb687147c3138","modified":1717916545852},{"_id":"public/img/function1.png","hash":"e1f0a524eb957dad37f1629ef640998e1c76a686","modified":1717916545852},{"_id":"public/img/gradeb.png","hash":"6658e235f0bc494369f6571b30e84f8c3abf02f0","modified":1717916545852},{"_id":"public/img/ihope.png","hash":"ea4ef276dbebfbba4074b7a50a7cff8454c1a6ab","modified":1717916545852},{"_id":"public/img/inchtocm.png","hash":"fb1028851d822e261f0f80a6a87db639d9a3aa2f","modified":1717916545852},{"_id":"public/img/initialization.png","hash":"4865791805bdd39022b1f5cec87929f021729358","modified":1717916545852},{"_id":"public/img/informc.png","hash":"fe910c80bd8c19e24949679febc342f4e53d10df","modified":1717916545852},{"_id":"public/img/keywords.png","hash":"37c2415633a2bb547813eea2898e1b80ac99fbf9","modified":1717916545852},{"_id":"public/img/last.png","hash":"01329e86010f44d92b6535276418eda9336fe7b7","modified":1717916545852},{"_id":"public/img/listing1.1.png","hash":"0f15c6d47cebfaffcd8b17eb54e9cd8a77b6408a","modified":1717916545852},{"_id":"public/img/lifesecond.png","hash":"460091138a4058bf2f6c5e9844fd130726c31b64","modified":1717916545852},{"_id":"public/img/listing1.2.png","hash":"558cc336d8dfff0e8ed322a0b915734bd0e98a50","modified":1717916545852},{"_id":"public/img/listing1.4.png","hash":"71cd63e889da8e88f9561ad9a3b7eb9816bb8c6f","modified":1717916545852},{"_id":"public/img/lookslike.png","hash":"83730c6796925d66cdec7d159b3c4c7f308b940f","modified":1717916545852},{"_id":"public/img/newform.png","hash":"55dc41525a78becbf0e79db9f27fb5d406ded315","modified":1717916545852},{"_id":"public/img/matchup.png","hash":"3088240b276e29126c6e06be7f9ed89c8648af2d","modified":1717916545852},{"_id":"public/img/morevalid.png","hash":"c14ead9fc5436a72c84e50dfabfd7e4f5cea0912","modified":1717916545852},{"_id":"public/img/nogood.png","hash":"5149ff9ee7d4b0b2288c5a3aa9cf36d26c4b343c","modified":1717916545852},{"_id":"public/img/numassign.png","hash":"fb3a6bc5523b669a7339365be73dd4b81163ab88","modified":1717916545852},{"_id":"public/img/nospaces.png","hash":"6ec05d2d55157bfd6f6b127144ca7dd7583dd71c","modified":1717916545852},{"_id":"public/img/out1.png","hash":"81b8586509a42f6c913e456da2e743856095ec05","modified":1717916545852},{"_id":"public/img/out3.png","hash":"68e8424bf2877e84db7c3a84c7135deeff969958","modified":1717916545852},{"_id":"public/img/nonsense.png","hash":"dbe1ab3ea51a4afab809d84b4fc74b73347cf1d5","modified":1717916545852},{"_id":"public/img/othertypes.png","hash":"503d1dd18172b78c543dd48a0c7cab5305754b3a","modified":1717916545852},{"_id":"public/img/output.png","hash":"db10e0a8f21d67f788b944924c791078d3db990d","modified":1717916545852},{"_id":"public/img/overflow.png","hash":"7e6031febe56efac6efc0a5f19e8e31ae8852452","modified":1717916545852},{"_id":"public/img/poorreadability.png","hash":"1b13933d05cae9b1be7a798e35bc18892a5b9057","modified":1717916545852},{"_id":"public/img/process.png","hash":"c95d3f0aa09f7050c27ada93712ad14721449383","modified":1717916545852},{"_id":"public/img/quest4.png","hash":"0dad597690c2d571292acb12aeda987c511af859","modified":1717916545852},{"_id":"public/img/result2.png","hash":"a8f476cd6a9df31c3a32ab137f955e43132f0824","modified":1717916545852},{"_id":"public/img/quest5.png","hash":"7b8c4cb77b052734fb69c27ab5753eeed812afc5","modified":1717916545852},{"_id":"public/img/readable.png","hash":"59bf666780c4b1401666a72a79ea3b71a8f4b77b","modified":1717916545852},{"_id":"public/img/quest8.png","hash":"73e58cf87b13c7536301fcc8421e420eb0328ea4","modified":1717916545852},{"_id":"public/img/result1.png","hash":"bee16bb33accde9bc9b88243dce816201d47ed7d","modified":1717916545852},{"_id":"public/img/result3.png","hash":"b34bb80db635391627e995aae43584c80e924897","modified":1717916545852},{"_id":"public/img/sciennotation.png","hash":"2687f5b82a8a957f1c48875f6e9c57453ad5017d","modified":1717916545852},{"_id":"public/img/six.png","hash":"ff0b57587d0b6fb585684aff7f44914d8d3d056f","modified":1717916545852},{"_id":"public/img/stillbad.png","hash":"2d46b1c7991379281d80e435ca0f48cc1ca9c7a2","modified":1717916545852},{"_id":"public/img/sizes.png","hash":"5e546d4567e78fe6cbc40aa8a0445fb5551e3950","modified":1717916545852},{"_id":"public/img/structure.png","hash":"2691bf90e8a867d8145ef1d948f580ecff235609","modified":1717916545852},{"_id":"public/img/toobig.png","hash":"d9c6bc55f93652da34b5343222fb67a8de9e5497","modified":1717916545852},{"_id":"public/img/tradition.png","hash":"32f6659711d7b6fb0e890b47c917e85c360bc40b","modified":1717916545852},{"_id":"public/img/turning1.png","hash":"1a3fda274d810e7bf6be7ab4fb82bf63daec3708","modified":1717916545852},{"_id":"public/img/twofunc.png","hash":"bb95384a031531769b381199bd92d84d3338fc88","modified":1717916545852},{"_id":"public/img/twoexam.png","hash":"b87355dc5fcfa1a9f1d281144e69fb39d60ac999","modified":1717916545852},{"_id":"public/img/valid.png","hash":"cbf2a476ac843f0c960b3d2184cdc101efa06e20","modified":1717916545852},{"_id":"public/img/turning2.png","hash":"8f09306798d8dbd9e9708df2f321364d968854e5","modified":1717916545852},{"_id":"public/img/typeface.png","hash":"e406c982a3a0f061b5d8e4ea57468ae941784119","modified":1717916545852},{"_id":"public/img/输出.png","hash":"7b519546e8c9c3fbf67515295a3db20eb8dac95a","modified":1717916545852},{"_id":"public/img/valid_declaration.png","hash":"873c0e0af2a6ced8c4b718bdac02a0058fa9ea10","modified":1717916545852},{"_id":"public/HTML/html5/gululu.mp3","hash":"676a314fc6cdaa72f04393cf09879f3bed390b55","modified":1717916545852},{"_id":"public/HTML/html5/index.html","hash":"758700c96145b31da2ac38d1d6441727ec32ac34","modified":1717916545852},{"_id":"public/HTML/html5/gururu.mp3","hash":"4462bdad96b9e9dfab26588838976848e79e4ea2","modified":1717916545852},{"_id":"public/HTML/html5/favicon.png","hash":"f835fb5cf04ae283f14425874ae05969d18f5f95","modified":1717916545852},{"_id":"public/HTML/html5/purple.png","hash":"d05a084efc038182c6c59ac5b699b3029c2632c2","modified":1717916545852},{"_id":"public/HTML/html5/转圈圈咯.mp3","hash":"facb2c614bdf761a30d08ffd9c84b8357135c7fd","modified":1717916545852},{"_id":"public/HTML/html4/circling.gif","hash":"5947ad05bf140a153658a71ce91d5f1804a8e768","modified":1717916545852},{"_id":"public/HTML/html5/转圈圈.mp3","hash":"e36c09287352d11d38d294a49ddbb4c049678062","modified":1717916545852},{"_id":"public/HTML/html4/girl.jpg","hash":"5c4a03fe07bab239d110d66c666f4b3a83aee62e","modified":1717916545852},{"_id":"public/HTML/html4/girlsit.gif","hash":"4207d0f6e5f8045236f6c69f23e65fe5d024f8a4","modified":1717916545852},{"_id":"public/2023/11/20/千奇百怪的字符串处理函数/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1717916545852},{"_id":"public/2023/11/20/千奇百怪的字符串处理函数/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1717916545852},{"_id":"public/images/alipay.jpg","hash":"40ea7e428cfec835f196705b42e5a292502780af","modified":1717916545852},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1717916545852},{"_id":"public/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1717916545852},{"_id":"public/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1717916545852},{"_id":"public/img/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1717916545852},{"_id":"public/img/Figure3.1.png","hash":"9a64943d9fabe1691ccc233e9ab30999e5d37614","modified":1717916545852},{"_id":"public/img/InsertionSort.png","hash":"5fd3df7309db3e4db4d204e452676f43ce325a2c","modified":1717916545852},{"_id":"public/404.html","hash":"155c674062d18ab392fa47ac837dd7afe77f8a56","modified":1717916545852},{"_id":"public/css/custom.css","hash":"58950a4f4cd82465f85428ec17b3bc05f8153b56","modified":1717916545852},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1717916545852},{"_id":"public/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1717916545852},{"_id":"public/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1717916545852},{"_id":"public/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1717916545852},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1717916545852},{"_id":"public/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1717916545852},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1717916545852},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1717916545852},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1717916545852},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1717916545852},{"_id":"public/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1717916545852},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1717916545852},{"_id":"public/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1717916545852},{"_id":"public/img/Listing3.4.png","hash":"594b7a37e242667703681d0bd0c94dfe2b31666f","modified":1717916545852},{"_id":"public/img/Listing3.1.png","hash":"c5a011123a484e318bda3821ef7c348fd1380d92","modified":1717916545852},{"_id":"public/img/Listing3.6.png","hash":"d24b1a60a90d88504e5489da8626f57cc85e0a9f","modified":1717916545852},{"_id":"public/img/Listing3.8.png","hash":"124a731c15f7d5afa611810b492569fa82f819a2","modified":1717916545852},{"_id":"public/img/MergeSort.png","hash":"ba221d67ce79689ccfbd3da38884ed5f1974cab5","modified":1717916545852},{"_id":"public/img/Summary.png","hash":"b9ab6f8a2c4ac920f2744c06d2d09e8ff33c17a7","modified":1717916545852},{"_id":"public/img/Twotables.png","hash":"ec24c9577f2ae05cb599b12c8a1bad18f99ee7fa","modified":1717916545852},{"_id":"public/img/basicdata.png","hash":"1314397a0e1e2a169bc8d593a1dccf1dd3776393","modified":1717916545852},{"_id":"public/img/original.png","hash":"68c25be9601ee079eb97d19f30aa69e72bf1dd89","modified":1717916545852},{"_id":"public/img/overnunder.png","hash":"6499674bb58df921b6e37ebf8b3792a82645894e","modified":1717916545852},{"_id":"public/img/page3.png","hash":"cd7a0d3c6cf9bf6b657e4227010178c64dfb4d9e","modified":1717916545852},{"_id":"public/img/quartmol.png","hash":"3ad599c59a736719f57a41044fef232827928248","modified":1717916545852},{"_id":"public/img/recursionsquaring.png","hash":"3c9280cabffe5c7918411548d9316fbf2b67d63e","modified":1717916545852},{"_id":"public/img/scheme1.png","hash":"ec7c28b658f7f84bff5673a5b14771dc2d581430","modified":1717916545852},{"_id":"public/img/scheme2.png","hash":"d3adf1151589809d181b1506a7651bc14dea4950","modified":1717916545852},{"_id":"public/img/tracer.png","hash":"1f7da8adb28468408411dc073f0db979f801f73c","modified":1717916545852},{"_id":"public/img/stlssalgo.png","hash":"9f1db394f3ebb53b75efdf58ad98b901706b28d0","modified":1717916545852},{"_id":"public/HTML/html5/hertaa1.gif","hash":"794867671d82b9d2f716cb3eb018f3431fb28ae3","modified":1717916545852},{"_id":"public/HTML/html5/hertaa_github.gif","hash":"852568878ab069f476a662878eb22a189a58ad85","modified":1717916545852},{"_id":"public/HTML/html4/good.png","hash":"2f10f6593e82bd1b81ba7f2b431a5e37ee2d93be","modified":1717916545852},{"_id":"public/2023/11/20/千奇百怪的字符串处理函数/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1717916545852},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1717916545852},{"_id":"public/img/ASCIIout.png","hash":"381509ad5a09c4fb8646a6b098541ae82a73c4c8","modified":1717916545852},{"_id":"public/img/BinarySearch.gif","hash":"549b6ef8d85291e9e9f56f315fdcd5fc774669c2","modified":1717916545852},{"_id":"public/img/Mar2nd.png","hash":"481a005693ea7a392dcba1b3d19025f0aa430257","modified":1717916545852},{"_id":"public/img/Mar5th.png","hash":"58fb299dcc504e1b28a0778f6149075f67bdffc7","modified":1717916545852},{"_id":"public/img/Mar6th.jpg","hash":"6544f2cc824aa196c715a7409ec6e8a1472d60d7","modified":1717916545852},{"_id":"public/img/storingtypes.png","hash":"84806c0293b011f0e3f374ba25fb413f661e8071","modified":1717916545852},{"_id":"public/HTML/html1/HTML.png","hash":"12360d3b0561081002d98e42e2bcb4e668c28e6c","modified":1717916545852},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1717916545852},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1717916545852},{"_id":"public/img/BinaryTreenum.png","hash":"8f039bf14a9f4b412dfd119ca476765e265e7aca","modified":1717916545852},{"_id":"public/img/Feb26th.jpg","hash":"555b08f8bb6a2c01d4c6f247b45f0b8af079725e","modified":1717916545852},{"_id":"public/img/Mar7th.jpg","hash":"c26f276820f8b5ddb5e98c5256b7d051b3a396bd","modified":1717916545852},{"_id":"public/img/Processes.png","hash":"52a6a73523a9b4d5d9de067e05c5a2c0ce2f89a0","modified":1717916545852},{"_id":"public/img/analysis.png","hash":"9261aa98221b621f1945b9b2d91683a591415471","modified":1717916545852},{"_id":"public/HTML/html2/Little_story.png","hash":"e6fbbdd5c5b3376a2fbd40cced0a2d7215a632f1","modified":1717916545852},{"_id":"public/HTML/html5/hertaa2.gif","hash":"5fcdfa7a978d7c7550edd22e55800a775e96e0b7","modified":1717916545852},{"_id":"public/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1717916545852},{"_id":"public/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1717916545852},{"_id":"public/img/Feb20th.jpg","hash":"94471e5b41f54a7c56ce9378ba925e02a6350693","modified":1717916545852},{"_id":"public/img/Feb24th.jpg","hash":"6fef4b07fd16561979f505b81d212dd030af4602","modified":1717916545852},{"_id":"public/img/Feb27th.jpg","hash":"e593c7a3dbd0f3423da9d137ee021dafa90e4a16","modified":1717916545852},{"_id":"public/img/Mar4th.png","hash":"9aac760c473323245cf50a80d35e87b742eaf01d","modified":1717916545852},{"_id":"public/img/page2.png","hash":"511e645ea6c474a8d9fbf9ca71e90342b8a7cba6","modified":1717916545852},{"_id":"public/img/page1.png","hash":"547431c3ef4398234cb6fbd02d64b807f32ca2b5","modified":1717916545852},{"_id":"public/img/Treeexample.png","hash":"67745f1e80a9d055bcbef669c9944b81b9e10914","modified":1717916545852},{"_id":"public/img/Chathappy.jpg","hash":"f3caddea5e254e4aa4f7dc68cf2afdbec65aa2d4","modified":1717916545852},{"_id":"public/img/Mar10th.jpg","hash":"4929c2efe0bd19d54c6e463ebfe74a4d19dd1aae","modified":1717916545852},{"_id":"public/img/Mar2nd1.png","hash":"73779824ca3de4c238ac4127ea3a9a711f305995","modified":1717916545852},{"_id":"public/img/nvyppt.png","hash":"50b9e41450c56ab429276109b76b50eaed05e352","modified":1717916545852},{"_id":"public/HTML/html2/code.png","hash":"a8d943affb831dae179494790534c0ba4c9819ed","modified":1717916545852},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1717916545852},{"_id":"public/img/Feb25th.jpg","hash":"62e455da4a2520bcc833a8253cc651544a04e670","modified":1717916545852},{"_id":"public/img/Feb28th.jpg","hash":"5db1f29c2be98585935e85578ebacbaea331fa05","modified":1717916545852},{"_id":"public/img/Mar19th.jpg","hash":"7383caf6e1f794e4470a6414785eda1cabcfb614","modified":1717916545852},{"_id":"public/img/Mar18th.jpg","hash":"c069a4ecc70c4a7944fe5670c70b43aac60dd2f4","modified":1717916545852},{"_id":"public/img/Mar22nd.jpg","hash":"8279b5321f94d372606282f861c75848caf48cef","modified":1717916545852},{"_id":"public/img/pic1.jpg","hash":"20f70a17f22578e87ff2a02eb6613bb481dcfb36","modified":1717916545852},{"_id":"public/img/Chapter1.2.png","hash":"8ea3c4ba92701fa4a93921e35ec6acd086961df4","modified":1717916545852},{"_id":"public/img/Feb19th.jpg","hash":"53ff79b61db4424f73b705d5fc08cfdce1e97936","modified":1717916545852},{"_id":"public/img/Feb21st.jpg","hash":"32468d9959e388c7b48c9bf60c681ff6213440f9","modified":1717916545852},{"_id":"public/img/Mar8th.jpg","hash":"537858ea0fd7fb721c55349c325d6d6fdf53a340","modified":1717916545852},{"_id":"public/img/Mar8th2.png","hash":"94a25746cb36dede8dc6c78d5e7098901c651c06","modified":1717916545852},{"_id":"public/img/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1717916545852},{"_id":"public/img/pic.jpg","hash":"9d4ba952b1aa05534bc7fe68e84f0998887e3219","modified":1717916545852},{"_id":"public/img/New_year/3.webp","hash":"3b829b9015dbf395a2fcf41688f51c2adc87f648","modified":1717916545852},{"_id":"public/2023/11/20/OJ中的那些小丑行为/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1717916545852},{"_id":"public/img/Feb23rd.jpg","hash":"cbc4db507d129ac58cfe1954859d2eaacf8a68dd","modified":1717916545852},{"_id":"public/img/Raining.jpg","hash":"e66144526294defe2561afce8058d5c2419bc021","modified":1717916545852},{"_id":"public/img/Feb22nd.jpg","hash":"ead47ee7c37f47b26f23d1b3956264092d205d6b","modified":1717916545852},{"_id":"public/img/Mar9th.jpg","hash":"7a86dd7e9342d4b08ce4752aef460539d274ca26","modified":1717916545852},{"_id":"public/HTML/html6/Feb22nd.jpg","hash":"ead47ee7c37f47b26f23d1b3956264092d205d6b","modified":1717916545852},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1717916545852},{"_id":"public/css/fonts/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1717916545852},{"_id":"public/img/Mar8th.png","hash":"48a31a4d2c576482924d2dc85a911a8444b2521a","modified":1717916545852},{"_id":"public/img/RecursionTree.png","hash":"32fc0b9c6f33c5ce52b6b1ddfe583d70dcbb59b6","modified":1717916545852},{"_id":"public/img/Feb29th.png","hash":"364cef7f0396841dacb086c93cd44744a586e2a5","modified":1717916545852},{"_id":"public/img/22cf517c3686de1119cf1f156160bd4.jpg","hash":"35301dbbba86602eeffc97fcade1eed91dac7de4","modified":1717916545852},{"_id":"public/img/New_year/2.webp","hash":"edaf1debd575e994da7384ea470bc7f3ffb1e81f","modified":1717916545852},{"_id":"public/img/Mar17th.png","hash":"d3805a62af7887ed8898de8083b82e1a8bb40ab2","modified":1717916545852},{"_id":"public/img/New_year/6.webp","hash":"3d3a5937b7af483f7ef5bb54b4b021c9050eddd9","modified":1717916545852},{"_id":"public/HTML/Dream.png","hash":"d6d6afa86811ba679668a45eeb89b030d15a1b26","modified":1717916545852},{"_id":"public/HTML/html1/encourage.png","hash":"091ddd3b3f3e2d93cc21675947d6638b974697cd","modified":1717916545852},{"_id":"public/img/New_year/4.webp","hash":"bc941d563e7069bd2f448a2e118c53611c46e3aa","modified":1717916545852},{"_id":"public/img/New_year/5.webp","hash":"db83833208f445b4eed4b391752f811897601304","modified":1717916545852},{"_id":"public/img/New_year/1.webp","hash":"86d8cf51a8655dc45f496f072b15000a163d410d","modified":1717916545852},{"_id":"public/HTML/qianxia.ttf","hash":"406655310fb7a22306f2113c2aa0c6d888400fa4","modified":1717916545852},{"_id":"public/HTML/bgvideo.mp4","hash":"099dc4f24f26dd4557f14588999710ad98a709aa","modified":1717916545852},{"_id":"source/HTML/.venv/Lib/site-packages/pip-24.0.dist-info/REQUESTED","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016719427},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools-63.2.0.dist-info/REQUESTED","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016534118},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016531124},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016530962},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713030},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/certifi/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713040},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713068},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distro/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713104},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713109},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713120},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713128},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713153},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713172},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713213},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713235},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/py.typed","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713227},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016712974},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713001},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016712991},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/jaraco/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016531140},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/jaraco/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016530978},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/cli/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713074},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/metadata/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713075},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/compat/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713174},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713242},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/packages/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713249},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016712977},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016712994},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/legacy/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016712992},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/packages/backports/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713251},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/_securetransport/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718016713247},{"_id":"source/HTML/index_ver1.html","hash":"98b6bde97bca9799afce31044899ba143c80a47f","modified":1717465491510},{"_id":"source/HTML/.venv/.gitignore","hash":"df58248c414f342c81e056b40bee12d17a08bf61","modified":1718016540791},{"_id":"source/HTML/.venv/pyvenv.cfg","hash":"52bcf9fa436a37cbbbee402633eff36aeb6c6a8f","modified":1718016528687},{"_id":"source/HTML/.vscode/launch.json","hash":"fa7a607a98802f56f84d29ab1ca001503e4ae57f","modified":1718016048693},{"_id":"source/HTML/autoREG.py","hash":"2b56783f0d621b762cbd56983f7189003b831030","modified":1718020409833},{"_id":"source/HTML/.venv/Scripts/Activate.ps1","hash":"6bb88471039fd88e53837064b8dd71b3f2c5143e","modified":1718016540760},{"_id":"source/HTML/.venv/Scripts/deactivate.bat","hash":"84f7a952a5acbd6c454f7f208e2b9a06c2afa32e","modified":1718016540781},{"_id":"source/HTML/.venv/Scripts/activate.bat","hash":"a4b28236c77253e798f3d2da5e036009b625634c","modified":1718016540773},{"_id":"source/HTML/.venv/Scripts/activate","hash":"99c79adb6ab137387098067a5a58886340f49896","modified":1718016540747},{"_id":"source/HTML/.venv/Lib/site-packages/distutils-precedence.pth","hash":"ea9c9bfc82ad47e828f508742d7296e69d2226e4","modified":1718016530954},{"_id":"source/HTML/.venv/Lib/site-packages/pip/__init__.py","hash":"aeacb5f33c115dc100c18c45d91dc9e8e54fda49","modified":1718016712901},{"_id":"source/HTML/.venv/Lib/site-packages/pip/__main__.py","hash":"4f4087af34a52c3c155ea0274de2e4dfec45d431","modified":1718016712902},{"_id":"source/HTML/.venv/Lib/site-packages/_distutils_hack/override.py","hash":"358f87c599947263e8adf079cb2131a522876af8","modified":1718016530959},{"_id":"source/HTML/.venv/Lib/site-packages/_distutils_hack/__init__.py","hash":"9bd1ae6606ccd247f80960abbc7d7f78aeec4b86","modified":1718016530957},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_deprecation_warning.py","hash":"9f554ff229a777b55816e0b8b39070efbe8df585","modified":1718016531015},{"_id":"source/HTML/.venv/Lib/site-packages/pip/py.typed","hash":"cf71733c58e834a237e6e08509eff29fdcc973b7","modified":1718016712904},{"_id":"source/HTML/.venv/Lib/site-packages/pip/__pip-runner__.py","hash":"4f1643cac3326f12464eab68cab415a5726d57a2","modified":1718016712902},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_path.py","hash":"90ab4a2c46db669f2e4eb8e13442946e2812e84f","modified":1718016531023},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__init__.py","hash":"be3ee019b4bcc4200613cd6adda90d09294c5e33","modified":1718016531014},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_entry_points.py","hash":"b284ec293e7beb5eb0e40eb02d7f314407e2be1d","modified":1718016531017},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_reqs.py","hash":"32409a3253befc1f0d687b4d21d7bac1286c7914","modified":1718016531024},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_importlib.py","hash":"96159909479de7f77f0c1bbc1e70cc492728ac7b","modified":1718016531021},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_itertools.py","hash":"6dcdf31ff0151de9583a1db6ea913f41fc8d7776","modified":1718016531022},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/build_meta.py","hash":"8e7d487a4f5efc92e1574288c2a04decd13821c1","modified":1718016531026},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_imp.py","hash":"a8c207ea7a2e076b68169c6b41a767fa3c02a0e7","modified":1718016531020},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/archive_util.py","hash":"1ecf644dfc2d01e6e9fced123dd9d6c898a34adc","modified":1718016531026},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/dep_util.py","hash":"19d6fa8bfd46d56d0f06acb86d6eca40f6935071","modified":1718016531035},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/cli-32.exe","hash":"11e2bdd0798761f93cce363329996af6c17ed796","modified":1718016531028},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/cli.exe","hash":"11e2bdd0798761f93cce363329996af6c17ed796","modified":1718016531033},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/errors.py","hash":"60f69191e445c8974ec936bc0caf58b0f82be9b2","modified":1718016531039},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/discovery.py","hash":"0f6250a88807727880278bba86e3c1807b1b4389","modified":1718016531036},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/depends.py","hash":"40f6e14ab664e22cfa4167bd17b1854e1a5bacb4","modified":1718016531036},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/extension.py","hash":"f8f1bc960bedff2e27c49a6aa22b3f70f012dc12","modified":1718016531040},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/dist.py","hash":"db2c41f2a86875745e6323ffe2e43da347cd583d","modified":1718016531037},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/gui-32.exe","hash":"32698bd1d3a0ff6cf441770d1b2b816285068d19","modified":1718016531043},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/glob.py","hash":"95491284dac9ea4878bd546182efd2face1841c7","modified":1718016531042},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/gui.exe","hash":"32698bd1d3a0ff6cf441770d1b2b816285068d19","modified":1718016531048},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/installer.py","hash":"a4dbb2094666c6a7d073ad1a2065fa63ae7ce8c4","modified":1718016531049},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/package_index.py","hash":"7ade33d704e5a275cc2becfd0ae7793532b02093","modified":1718016531056},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/py34compat.py","hash":"4fe2e414add89a8140913b50d59e93d8d667e89d","modified":1718016531057},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/script (dev).tmpl","hash":"982302a6a5664f02c8cc87407dc7f2f5b5fbd825","modified":1718016531059},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/logging.py","hash":"45d4b30f3fee608f8c70673f2ef5d5ef261c2aaa","modified":1718016531052},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/namespaces.py","hash":"1e476e210066950d20e85b2282342ee6eeb394f1","modified":1718016531055},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/msvc.py","hash":"3ba1b12dadac1a4ec2910f9777e65f1c6d61957c","modified":1718016531054},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/launch.py","hash":"782306700e0c400cfc574d3837e669b90b69d78e","modified":1718016531050},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/sandbox.py","hash":"abd5dafee4a43ed1bbfa9699af02194a028341a8","modified":1718016531058},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/script.tmpl","hash":"fa9b9f2e89357c8597490720b623d3b875136773","modified":1718016531059},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/version.py","hash":"c48d73bb3510c68a51b30e14860e522f0e4e35d9","modified":1718016531062},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/monkey.py","hash":"63551b145e376ac3e89dc7b0d39e7474b14fd055","modified":1718016531053},{"_id":"source/HTML/.venv/Lib/site-packages/pip-24.0.dist-info/AUTHORS.txt","hash":"b8ee2533e90a57585497674a4fbd571765a79215","modified":1718016713263},{"_id":"source/HTML/.venv/Lib/site-packages/pip-24.0.dist-info/INSTALLER","hash":"d7a03141d5d6b1e88b6b59ef08b6681df212c599","modified":1718016719423},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/unicode_utils.py","hash":"db0c1c9900f14acad89db32481e30a4bd4a38c69","modified":1718016531060},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/wheel.py","hash":"10c7f2f5cbfa5cbe55ad98d92d49f9c4501d6811","modified":1718016531063},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/windows_support.py","hash":"48c5014189fcda28871f361e2c74829deb8256ef","modified":1718016531064},{"_id":"source/HTML/.venv/Lib/site-packages/pip-24.0.dist-info/LICENSE.txt","hash":"d1816736d55c943e1ed44a003f72cb7d1afe0789","modified":1718016713264},{"_id":"source/HTML/.venv/Lib/site-packages/pip-24.0.dist-info/METADATA","hash":"5b3d7ef78029003d983670a820dcf068fde4c0c0","modified":1718016713264},{"_id":"source/HTML/.venv/Lib/site-packages/pip-24.0.dist-info/WHEEL","hash":"502f95da3089549e19c451737aa262e45c5bc3bc","modified":1718016713265},{"_id":"source/HTML/.venv/Lib/site-packages/pip-24.0.dist-info/entry_points.txt","hash":"5954d4a7b6c174449bce2d741a79fcba50b2d24e","modified":1718016713265},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools-63.2.0.dist-info/INSTALLER","hash":"d7a03141d5d6b1e88b6b59ef08b6681df212c599","modified":1718016534115},{"_id":"source/HTML/.venv/Lib/site-packages/pip-24.0.dist-info/top_level.txt","hash":"d7a03141d5d6b1e88b6b59ef08b6681df212c599","modified":1718016713265},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools-63.2.0.dist-info/LICENSE","hash":"8e6689d37f82d5617b7f7f7232c94024d41066d1","modified":1718016531195},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools-63.2.0.dist-info/RECORD","hash":"3c4b56e38c6aa21d9603100e55b8db30529fdb27","modified":1718016534123},{"_id":"source/HTML/.venv/Lib/site-packages/_distutils_hack/__pycache__/override.cpython-310.pyc","hash":"6375249f937ab7e5c1ab7b346c63ee9cdde1a055","modified":1718016531212},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools-63.2.0.dist-info/entry_points.txt","hash":"0f8e6d562348aae1622e7a74e6409a92eb428a9b","modified":1718016531199},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools-63.2.0.dist-info/WHEEL","hash":"0fdc3988857c560e55d6c36dcc56ee21a51c196d","modified":1718016531198},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools-63.2.0.dist-info/METADATA","hash":"794adaf3315bffec523d8dffe4db463c263c178a","modified":1718016531197},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools-63.2.0.dist-info/top_level.txt","hash":"aef2cbccc6a9a8f43e4e150e7fcf1d7b03f0e249","modified":1718016531199},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/vendor.txt","hash":"c070b3b9771e1e9657f872f5bedb39a8cdb332e5","modified":1718016713025},{"_id":"source/HTML/.venv/Lib/site-packages/_distutils_hack/__pycache__/__init__.cpython-310.pyc","hash":"d207f2a995064fc925ec7fa24631dfeca2add5f7","modified":1718016531204},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/__init__.py","hash":"d18ad681ebf3b0d236945512222a28af4ead58f7","modified":1718016713023},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/six.py","hash":"d2b72496fefbd26201ecc94881e42bb0ac6e3374","modified":1718016713024},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/__init__.py","hash":"04e3b87f1b0cc47d44bfc69f71cbd395579fc00e","modified":1718016712905},{"_id":"source/HTML/.venv/Lib/site-packages/pip/__pycache__/__init__.cpython-310.pyc","hash":"46f1d429598dc389262afdc3b95f8a0dae0df250","modified":1718016713278},{"_id":"source/HTML/.venv/Lib/site-packages/pip/__pycache__/__pip-runner__.cpython-310.pyc","hash":"1cd6cb1e8582b5040865dd396b29c0f17ca757bf","modified":1718016713297},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/main.py","hash":"442943cd1fa0793dd0a43f75da3843ae3f9c67de","modified":1718016712910},{"_id":"source/HTML/.venv/Lib/site-packages/pip/__pycache__/__main__.cpython-310.pyc","hash":"bb643f2a4735acea83a1f53c84af0803473bbcc1","modified":1718016713286},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cache.py","hash":"5faf201d6c043d128e895832cbfbdfc8b23c6cc9","modified":1718016712906},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/build_env.py","hash":"7ef2977a8d3212e58ba66ac088293fd659d61b42","modified":1718016712905},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/pyproject.py","hash":"e28e26069246ab43190b65a83d9a362d31623d07","modified":1718016712911},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/self_outdated_check.py","hash":"34b9904da71d74f6ee47026974c5b4134789aba4","modified":1718016712911},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/configuration.py","hash":"63a08a419202e4aeceeb8bd35219c75a867d3a03","modified":1718016712907},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/_functools.py","hash":"f619baef1bd3a8c10ffe507d3d080e66160942a9","modified":1718016531067},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/exceptions.py","hash":"af908e2721537d4f92a2e084e4dc8507c8bdf418","modified":1718016712909},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/wheel_builder.py","hash":"7ff104f4e1dd97395031964352fd11292541ec2e","modified":1718016712913},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/_collections.py","hash":"c69716d9fbb9b0b26d25ef77fd5944d580bf9181","modified":1718016531066},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__init__.py","hash":"5212c5ad743cf9db1382e7989d62586caf71d2e0","modified":1718016531065},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/archive_util.py","hash":"6c5c8da3c2adee04905b741f5e01925049db14d5","modified":1718016531070},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/ccompiler.py","hash":"a0ed4765622a72d984c418f393cde9d15e1d6097","modified":1718016531072},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/cmd.py","hash":"038db2cd638a4aac759c31b3e53bd96131576e58","modified":1718016531073},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/debug.py","hash":"366246d9ab8f12833b1b2765fade51bb635d49ca","modified":1718016531078},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/bcppcompiler.py","hash":"5d994b84fda34535f341fc9fa59a544dbfd7a4b6","modified":1718016531071},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/_msvccompiler.py","hash":"00093b6944571f9b7b98c4a0d0530504eaca954e","modified":1718016531069},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/cygwinccompiler.py","hash":"b76b50121336b0ffd9848ad4d5d0e4a96dfcab0a","modified":1718016531077},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/dep_util.py","hash":"c527605f75da8f78033d693fc9c38836e54c8059","modified":1718016531079},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/core.py","hash":"1a2bd2366b2733695072885833d839a7e28f240f","modified":1718016531076},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/dist.py","hash":"231af51a7bdc892ba7e59e500b200baa05423a9a","modified":1718016531082},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/config.py","hash":"65e4f3c10cc15feb3b40fe4d2449311c886f2beb","modified":1718016531074},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/dir_util.py","hash":"06ef7a4062c74dc80573b31a078af0f72b06e1d5","modified":1718016531081},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/fancy_getopt.py","hash":"39730d347ae07de24be611c45698e09274d1723d","modified":1718016531086},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/_macos_compat.py","hash":"20b60cfd27cb0d2035d448548b310538669ec7a1","modified":1718016531068},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/extension.py","hash":"d7320425b1a01300d1ec6d6a00baebb980379fd5","modified":1718016531084},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/file_util.py","hash":"4d551e9c47a22c715579c8d8ac8e27095ac47128","modified":1718016531087},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/log.py","hash":"6b99b3589ea9d0733a88f91ad9f2630998dccb0c","modified":1718016531089},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/errors.py","hash":"2f24f9da96a6d9e65b838f3f76d74f69ce41194b","modified":1718016531083},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/py39compat.py","hash":"a52f4c09bbb46136a72025ce57472f8d43c30cfb","modified":1718016531094},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/filelist.py","hash":"4413b1853a8fd040b21cde3f28bdf3641bccf58b","modified":1718016531088},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/py38compat.py","hash":"7add41e0c2ff8f5add04611a9f1cfbbbaffb5af9","modified":1718016531093},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/spawn.py","hash":"f2e88d57966a28b97bb7445f977c83446c00b9f9","modified":1718016531095},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/msvccompiler.py","hash":"eda976c7becb2aa7576f64f13a7884bc94fe7a22","modified":1718016531091},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/text_file.py","hash":"4738f1858466057d218aa41d6a3e29d6adee32a2","modified":1718016531097},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/sysconfig.py","hash":"b3c0803c2d349b75c75d7600304b530045578aa1","modified":1718016531095},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/msvc9compiler.py","hash":"30f172cae601405484b6a8e053a646aabb45ca32","modified":1718016531090},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/unixccompiler.py","hash":"33b01cdfcf6608e0e10a90da0e40b6f36cd86b40","modified":1718016531098},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/versionpredicate.py","hash":"ff4be5195b026e05009c9e6810fe7fc46d53a44f","modified":1718016531101},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/__init__.cpython-310.pyc","hash":"990ac9d7cb03603900ccda8f8683856a16829ec6","modified":1718016531890},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/util.py","hash":"3fbe503aa5836c56039a8e5f9e837c217585b5d2","modified":1718016531099},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/_imp.cpython-310.pyc","hash":"2d897be4641ecac97f5d7568ffa5061d9b7fe7ab","modified":1718016532725},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/_deprecation_warning.cpython-310.pyc","hash":"62c3210b8de4ec41590011bd4ba0279a6c187da0","modified":1718016531901},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/_entry_points.cpython-310.pyc","hash":"2c38d02d38218b391aff68500aec69acf70b5b59","modified":1718016532716},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/_path.cpython-310.pyc","hash":"428578491b7b44eefc231281d4b9360804f41dd4","modified":1718016532757},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/_itertools.cpython-310.pyc","hash":"c0c18630a5f0091e492db0d5359216f2e45fa773","modified":1718016532748},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/_reqs.cpython-310.pyc","hash":"96920896ec5bd87ac735efb0cc427873703b67d9","modified":1718016532767},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/archive_util.cpython-310.pyc","hash":"e4c6fb16398ef32b484558d3ba3e5192b260eda6","modified":1718016533349},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/_importlib.cpython-310.pyc","hash":"58254ebd6e9416767adede1db10b82040b71fafc","modified":1718016532736},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/dep_util.cpython-310.pyc","hash":"c3625cd95a3224d7938dc0412a7fa76de3745c7a","modified":1718016533863},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/depends.cpython-310.pyc","hash":"47abaf94cfc697b7c08647d1af25218731410b79","modified":1718016533874},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/build_meta.cpython-310.pyc","hash":"018e13442ae1e3b706279f26efd10ecef0c0ab23","modified":1718016533364},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/version.py","hash":"391e60ac183afcd4a0a965335df169487389810d","modified":1718016531100},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/discovery.cpython-310.pyc","hash":"966782883ddc99a9dbef54edb672fc3589d72568","modified":1718016533887},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/errors.cpython-310.pyc","hash":"e7adb8e235388dfca5d58bc8c6263ce3429cc373","modified":1718016533913},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/launch.cpython-310.pyc","hash":"bb1a2cac334f29999a92989fbd895902b0e2a577","modified":1718016533973},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/extension.cpython-310.pyc","hash":"7c1473892306e631e362376bf905f99808d42f6b","modified":1718016533925},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/glob.cpython-310.pyc","hash":"a3f65ed81d40fa5cd2e924f68d8eb5d6945188a9","modified":1718016533951},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/logging.cpython-310.pyc","hash":"ebf3eaa4b6ea5889d0dcc4e86428d3b4b9e113fe","modified":1718016533983},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/installer.cpython-310.pyc","hash":"6e27a6a9d6f01d399f849678422cfe5e40d97cae","modified":1718016533965},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/monkey.cpython-310.pyc","hash":"8845b3bf7a5c8c37d123b481fdc8173758a8ea43","modified":1718016533993},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/dist.cpython-310.pyc","hash":"bef2dc6ad33d328999d779d8be3c274573f86975","modified":1718016533906},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/py34compat.cpython-310.pyc","hash":"2c2a570be6e1dc340ab8e4196889a018e9cb3037","modified":1718016534059},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/version.cpython-310.pyc","hash":"2c1e0bd8418f762c8d3f9b1a0e51c8832ed1b708","modified":1718016534092},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/package_index.cpython-310.pyc","hash":"97e6636b9e66ae82e9f8bed18720522f90422ac5","modified":1718016534051},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/msvc.cpython-310.pyc","hash":"c753edd2f88f5b33f967d4283c503d00298b990e","modified":1718016534011},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/unicode_utils.cpython-310.pyc","hash":"01da07c5c1f635ee94831f55c8680201415d98e8","modified":1718016534081},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/namespaces.cpython-310.pyc","hash":"6476a0986a4324b99d976951a8f4ba0381400a2e","modified":1718016534026},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/bdist_egg.py","hash":"6a2f5acd24daf3c8179157ec50b58e50ff82f8bb","modified":1718016531166},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__init__.py","hash":"d4a60caa27aac25ce29f565863f7a205aa594428","modified":1718016531165},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/sandbox.cpython-310.pyc","hash":"f0fe896a1e419655e4bb42d544cf80c2ba5ba200","modified":1718016534074},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/windows_support.cpython-310.pyc","hash":"f5b782030ead2ecbb41f4e22d9b0a2adc4725a93","modified":1718016534114},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/__pycache__/wheel.cpython-310.pyc","hash":"bca0643496c55abb8a59e5ac905fff8ce2a309b3","modified":1718016534106},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/alias.py","hash":"a5482569a34e9045e6a00b50fba5107271230316","modified":1718016531166},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/build_clib.py","hash":"d8414c9ac5c0109e1e863b887caa72b3b075dfa6","modified":1718016531169},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/bdist_rpm.py","hash":"4925a723a099591becca6a66bc2aa5ef2eea2764","modified":1718016531167},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/build_ext.py","hash":"137eb6d20f4720b9c16969fcf6ee3c26f1cdc38d","modified":1718016531170},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/build_py.py","hash":"5fa098b2fc1a6b8ecf216465b7692a07db9c5329","modified":1718016531171},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/build.py","hash":"4c6a472a5be8ad5aae2d2e285005894b8d166ebe","modified":1718016531168},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/dist_info.py","hash":"89eb9ce8cca35e7c675ee1c748b75bdd84e6cfc5","modified":1718016531173},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/egg_info.py","hash":"891a46020ee792c469792b606239fdc3ba3830e2","modified":1718016531175},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/develop.py","hash":"d4aa6a26e66ee7fbe2bcf1d8cdab76445909db61","modified":1718016531172},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/install_egg_info.py","hash":"140292972b2d943660472cd36485a50d405d986a","modified":1718016531175},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/install_lib.py","hash":"d9c16445a8945267182da0b86ced1dc9f4fc69ad","modified":1718016531177},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/install.py","hash":"eff40282c1093189f530026aa389ad0cabc80425","modified":1718016531175},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/install_scripts.py","hash":"0436e281ce5854a4c4b2bacb589817cac2d4149d","modified":1718016531178},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/register.py","hash":"50972f4e50b1f2a414fd028b22fdf16754b59c14","modified":1718016531180},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/saveopts.py","hash":"aa2fc2b16c59ec6688923535442cbf1ecf52d235","modified":1718016531181},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/py36compat.py","hash":"8933413be98bbeabdc068d7f7c492e62723e7fcc","modified":1718016531179},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/upload.py","hash":"bda85f9dc7b71594ab2bc0f2930a70c669e27786","modified":1718016531183},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/launcher manifest.xml","hash":"403ee9b5c7a834a1b3905a87a4c6318e68609996","modified":1718016531178},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/rotate.py","hash":"de8e175dc3729c35b755e21fdf02e9196972f79e","modified":1718016531180},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/setopt.py","hash":"8cf021886cd68c8d4f4deb87fefd3f593a290af3","modified":1718016531182},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/sdist.py","hash":"21db05767d2549969a5634443a1f7690d083ee27","modified":1718016531181},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/upload_docs.py","hash":"47fd2e1c8323c50904deb88f4656d4b913664c30","modified":1718016531184},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/test.py","hash":"700e435f365593d3952e9d37bc9026c84ec4510b","modified":1718016531183},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/__init__.py","hash":"b489a79d35632fb3fe6c46352a2bd6b82c0d4ab2","modified":1718016531185},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/extern/__init__.py","hash":"95d3a0f02bc80deaa0ae836992271524d9b53360","modified":1718016531195},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_apply_pyprojecttoml.py","hash":"b46cc3432b1793bb54c853d6b85e1eba42554e8d","modified":1718016531185},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/expand.py","hash":"f454683df3c54ba2a0910e486d72ec6faf086122","modified":1718016531187},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/ordered_set.py","hash":"e036fb43b3fdb55291bb33008b375b4d9465c09c","modified":1718016531126},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/zipp.py","hash":"afba147a869b5f3a241af399ebfa87311671e91f","modified":1718016531127},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/pyprojecttoml.py","hash":"7e42f99dd2da8a9018e7a31d5a68265938f57db6","modified":1718016531187},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/extern/__init__.py","hash":"22027e4d38ac9e0be03f2c79d355bb6b4d8a50e5","modified":1718016531013},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/__init__.py","hash":"48097d9d6d51f957b78102c7f9ae113b55821c0e","modified":1718016713025},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/zipp.py","hash":"afba147a869b5f3a241af399ebfa87311671e91f","modified":1718016530966},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/setupcfg.py","hash":"fb76db7092102e653477cc2225e07e34fc9e203d","modified":1718016531188},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/appdirs.py","hash":"b2210670fd12e935f2e38eec166f62e389ee9c8e","modified":1718016530965},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/adapter.py","hash":"43c590c57291c80623e6be616d4382f2f0440330","modified":1718016713027},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/__pycache__/__init__.cpython-310.pyc","hash":"9fdc1182f6f57061f575b313b4f0391fdfc2b0d0","modified":1718016714937},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/__pycache__/six.cpython-310.pyc","hash":"1a2419339bcdcb5597412ec8b65efa3155f698ca","modified":1718016718565},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/_cmd.py","hash":"f9f1c294b57d2432b802625d40549f21a22e3ce9","modified":1718016713027},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/certifi/__init__.py","hash":"1bbc25e63e4dcce182cc165b4761c9b2819a0cf1","modified":1718016713035},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/cache.py","hash":"38a776550e923503dad5ce04dccbdc69a1b615c1","modified":1718016713028},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/filewrapper.py","hash":"0ea30fc3f74dc1424f3638908b8e02270667fc40","modified":1718016713029},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/heuristics.py","hash":"c43016e83b44a6190cb42a3df0597737daa8cc77","modified":1718016713030},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/serialize.py","hash":"44d988345f283e229d17ed63a52ce6c10bf2803b","modified":1718016713031},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/controller.py","hash":"27dd3070d55dc49060b35b8880a31ee4fe97d14f","modified":1718016713029},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/__init__.py","hash":"e8a71d394bdbc28a81cf1ae55f238308ded93508","modified":1718016713076},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/wrapper.py","hash":"b18a7cf7fafcb793f2fa944b155c690b209960ca","modified":1718016713031},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/certifi/core.py","hash":"462598b86f352856820a18c5b4d66c9d96e4be06","modified":1718016713040},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/ansi.py","hash":"a46f95349f8d9e1d10885510f90a4f0c19380ae3","modified":1718016713077},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__init__.py","hash":"fe61b185d34222ec5d43b8d8f80dffa836f84690","modified":1718016713085},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/certifi/__main__.py","hash":"94de655e7e05b44b77efbb710287fe7ac57bfe4e","modified":1718016713036},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/initialise.py","hash":"0cfa12dfbf9e9abb772f0fc781ca0f75cae571a8","modified":1718016713078},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/win32.py","hash":"e62a37bd5263eeb89370c89611dad0ec8490838d","modified":1718016713079},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/ansitowin32.py","hash":"8d34ce03d75088979c2003c33b17c6e089253084","modified":1718016713077},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/winterm.py","hash":"a48da4f9ccf921288676f44626cf6bf313ef3a40","modified":1718016713080},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/compat.py","hash":"19a995a878483d07dabeceac9d15e09043a0ae97","modified":1718016713085},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/index.py","hash":"742277dd9d3c629a01057e27fdf3ab7233024167","modified":1718016713087},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/locators.py","hash":"6a8d40e2148004c76e9f4e0662c981135e94275d","modified":1718016713088},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/manifest.py","hash":"4f3923e9575c2d64530fd413da556e1d84e74883","modified":1718016713089},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/database.py","hash":"b917eb77301bb9ccf4e0244f90288890c4b8167d","modified":1718016713086},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/metadata.py","hash":"20141e9c9dc3c761d00cae930144641ab895c030","modified":1718016713090},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/markers.py","hash":"e16af453c47612f092bae8fda2177d039df17097","modified":1718016713090},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/scripts.py","hash":"c08622f929bad821867f130f48b2c88fe57c1326","modified":1718016713092},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/resources.py","hash":"cb59892b325396652ff2998bfe12cf124959f6ca","modified":1718016713091},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/version.py","hash":"76563d0b04b08bd37df01c745137d22f0dcf2dd5","modified":1718016713097},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/wheel.py","hash":"5b8872c699f85e2f02134ce1467923e9c3e65bca","modified":1718016713102},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__init__.py","hash":"e210fc9512c1fd048835ddf27e73c6909a50e6d8","modified":1718016713041},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/big5freq.py","hash":"eeeade9b359e9599a79c5a772f9dc0b577f24dfd","modified":1718016713042},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/big5prober.py","hash":"8e6a4e3cc825ff80bd38ae5e7dfd530608f574b2","modified":1718016713043},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/chardistribution.py","hash":"74b97c5d7ade08c9d2ec0dd2efff1687ed164976","modified":1718016713043},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/charsetprober.py","hash":"2cab239a6908e45cee916f0aa9b9769fdf331abd","modified":1718016713045},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/codingstatemachinedict.py","hash":"0fc9a11759b0e8dce7ad2749f1c0fde679298bd2","modified":1718016713048},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/cp949prober.py","hash":"962bc070d81f55f43e49e48c6a609e7ffbb5cd88","modified":1718016713050},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/charsetgroupprober.py","hash":"79187215075bb0ba7846f31ac27c1c2df12be7a3","modified":1718016713044},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/eucjpprober.py","hash":"c140ee30baf0bf8bb3e6682e252d60ded193156c","modified":1718016713052},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/enums.py","hash":"d32fe5903a7e6ba80cf8b948e6a05871a7d57e2f","modified":1718016713051},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/escprober.py","hash":"857ee9f5f0b4bf6e1ee2cc007433e071c75e9396","modified":1718016713051},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/codingstatemachine.py","hash":"385fbf93113f5472a62e5c59f2fdadcf1464f30e","modified":1718016713047},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/escsm.py","hash":"e95356caa14dfe77b88bda324a212bd889c09365","modified":1718016713052},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/euckrfreq.py","hash":"4e4b2666e277701d1d5f3c4a7b5de3e63abe4325","modified":1718016713053},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/euctwprober.py","hash":"7d51623ee0262400e4515524a145b51a41338833","modified":1718016713055},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/euckrprober.py","hash":"6da6be67b71017171a5979435e74f4e19b2b61ad","modified":1718016713054},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/gb2312prober.py","hash":"30e241fbb864aebf937ff633aaa6f866f17b40fe","modified":1718016713056},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/johabprober.py","hash":"997922fd9d2f7c25ad97a49127360cc7861aa9ee","modified":1718016713059},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/hebrewprober.py","hash":"0e37161ce661e4839b7eb9a6df772c2c4d69b073","modified":1718016713057},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/euctwfreq.py","hash":"1cf53a3a7c2789211a5edc4f6d9aaab576707f8d","modified":1718016713054},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/gb2312freq.py","hash":"6bfb0b5839918d9c24497702e7bf858c3ba00261","modified":1718016713056},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/jpcntx.py","hash":"09c4cce0f373044f602189c098fc18b20d2c72f9","modified":1718016713059},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/jisfreq.py","hash":"34b47699a27f4abfc0f51d6d6c7381d7db958bf0","modified":1718016713057},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/johabfreq.py","hash":"f86e15cfe51bfe1104259580a9c4930f837e45d5","modified":1718016713058},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/latin1prober.py","hash":"3030546391e18d95775eb79565b10fa7b00aeae0","modified":1718016713065},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/mbcharsetprober.py","hash":"3d976b82e12fef50269bd14297cbe75bdf4885ef","modified":1718016713066},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/resultdict.py","hash":"7b83acd79f97687e9c95bc238ae8ff8dca34c9d7","modified":1718016713068},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/mbcsgroupprober.py","hash":"ca909828a090c1ae1acc7ebf47d357052ced7312","modified":1718016713067},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/macromanprober.py","hash":"6db32e502194e4b983608b778e096ec59a7e7103","modified":1718016713066},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distro/__main__.py","hash":"be9d6fcd0debf92ebea7d4c5c0331f9482ba0c29","modified":1718016713103},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/mbcssm.py","hash":"9269c5593ae1cfeb29626d990c5a63384de67163","modified":1718016713067},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/sbcharsetprober.py","hash":"767171b061a50044b3c07f4c51e1bad22aeea5d5","modified":1718016713069},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/sbcsgroupprober.py","hash":"f7ecdfdf091ecc6bb64cfefc8a584e16a4599edc","modified":1718016713069},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/version.py","hash":"c132772ae9da96ddc56658df9bf1a380d4286156","modified":1718016713074},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/sjisprober.py","hash":"37a290928d585660239b359108d70e3330f6daf4","modified":1718016713070},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distro/__init__.py","hash":"4a736116da5e08dd8ec668e9768acf14ead0e823","modified":1718016713102},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/universaldetector.py","hash":"14fdab65867615120ebd88fa22cb0d712a13aef7","modified":1718016713071},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/utf1632prober.py","hash":"5eb297221674d3afe3d2475b26b7d36bd8bf213f","modified":1718016713071},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/utf8prober.py","hash":"b6eb73ca0c77927deb2ace9cdfc2eb2d3aafdcc7","modified":1718016713072},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distro/distro.py","hash":"b64d63a45c1400eb086940c2ceac1ef1e8c356b3","modified":1718016713104},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/compat.py","hash":"12bcd91fccf01f9c1199470d492033f7fe30dd18","modified":1718016713106},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/__init__.py","hash":"77ea165e2cdef8a14c86f5480659b4515783a0bb","modified":1718016713105},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/core.py","hash":"e7f7b95383db46dc80ae3430571aa41098d45547","modified":1718016713107},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/codec.py","hash":"e89f71a15e20a81a7907ad9d71cc3eb069b298b3","modified":1718016713105},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/package_data.py","hash":"f84b0d08eaf4f0c37d49e2d38340696c069a09e0","modified":1718016713109},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/idnadata.py","hash":"bcd1ce54717d6c66895cad7fd7e09d514d0ea404","modified":1718016713108},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/msgpack/__init__.py","hash":"a7eb25558d5795088015103fa486716cdd6aab67","modified":1718016713112},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/intranges.py","hash":"0a271b1f7519ead8d311ea333a457cf87cb13b74","modified":1718016713109},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__init__.py","hash":"9501323e7783213ab6c7c8e8fd05cd95d7a76ba1","modified":1718016713117},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/msgpack/exceptions.py","hash":"4ceae08460a40acdf926dbb2908ff87ab6309e4e","modified":1718016713114},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/msgpack/ext.py","hash":"56dd1193cd4ca44d617efed82e1c7e0e798c350f","modified":1718016713115},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__about__.py","hash":"65369f014ea304064474d47c719401803c999ed8","modified":1718016713116},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/msgpack/fallback.py","hash":"54aee9fbc1fd6f29c3acaa5716b085e0c0540d32","modified":1718016713116},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/_musllinux.py","hash":"d446d94e2b0fe0ec6286292877c3926268ecab4a","modified":1718016713118},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/_structures.py","hash":"fe0c3747cf14e696276cb6806c6775503de002b8","modified":1718016713119},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/_manylinux.py","hash":"0ff6c9ceb0819aef9d68cee59d7942fa0544661f","modified":1718016713117},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/markers.py","hash":"996aa3d6edaf2166b1d48525cb6bb39cc4d2996b","modified":1718016713119},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/__init__.py","hash":"a608afe522fc4fefb694a31e2ab121526e2f864a","modified":1718016713125},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/specifiers.py","hash":"04ffe4f1c2e6d8796ae64b8d3ccd1b9791f31445","modified":1718016713121},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/requirements.py","hash":"76af8951571138a6dfcdd80c7944836795727a52","modified":1718016713120},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/version.py","hash":"161edb467745642554aff7ee33a3eb69ff9e7287","modified":1718016713123},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/tags.py","hash":"1a2cecedf2686b5de23beb435957d92894bc990e","modified":1718016713122},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/__main__.py","hash":"94ff1a360c3481cdacd76582fc7bd9aa36c4a4c5","modified":1718016713125},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/utils.py","hash":"5979c6b8353210e327b4689a66207c56a7c8e3d1","modified":1718016713122},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/api.py","hash":"29fa6eb99df6529e731efb845f2d968858ebb392","modified":1718016713127},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/unix.py","hash":"1277760e5b8e451f64ebf06ff97c74398ee2e082","modified":1718016713129},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/macos.py","hash":"882a251fb3c3b34a19cc3fd6c2c0890c8a16f68e","modified":1718016713127},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/android.py","hash":"affd713179820aa4e5a202972dcf104be2c978c2","modified":1718016713125},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/version.py","hash":"758cf01a74194429a53ac797732aa6ea741ecb00","modified":1718016713129},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__main__.py","hash":"2b06c1d0254222d69a45db8451d6c5a884285e5a","modified":1718016713131},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/windows.py","hash":"4ca3a38027b37588fb1b16c3833b3d5e5581cfe5","modified":1718016713130},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__init__.py","hash":"9b2dbd30889307dda6766e27e21d9e5be91e0801","modified":1718016713130},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/filter.py","hash":"87fedeaf657dd9dc7c191b1c3c9461b59514239d","modified":1718016713132},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/cmdline.py","hash":"375f2c67e11155e43cd3c847dfa0f47e10f9f449","modified":1718016713131},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/plugin.py","hash":"a228e13247816e21675fb132a0fc79f983565f9c","modified":1718016713134},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/modeline.py","hash":"5dd98a164720f0a9e9009c4f6496e4c712c25efc","modified":1718016713134},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatter.py","hash":"2ff27f2b5a03ad1018882e6303bf8bf39cefb6b6","modified":1718016713133},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/console.py","hash":"8630c1c81f6d8b641f7c3711441edd186b0b1657","modified":1718016713132},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/lexer.py","hash":"a7630eac5cab404716a0abbebc7ccba1985af756","modified":1718016713133},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/__init__.py","hash":"df65d428064b7c8e03726669e00c2e42450c227c","modified":1718016713157},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/regexopt.py","hash":"495022fa953387139fbd39fa16586d6fdde7ca2d","modified":1718016713135},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/_compat.py","hash":"9141192d3b9bb789d002285a8cbfd788642aacee","modified":1718016713157},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/scanner.py","hash":"c1edc8470764067799d4ac97e13bc0c088456526","modified":1718016713135},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/style.py","hash":"d48162a00e73b97c0480333914810d5f98f61a03","modified":1718016713136},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/token.py","hash":"6f402016a74d090b88cc9bbee0405f42443bfc05","modified":1718016713136},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/sphinxext.py","hash":"33dd28b3e9ad132bdd7061fe54e4974d0822ba3e","modified":1718016713135},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/util.py","hash":"2d7ca5a0f7d31ecb4ebe340f3649fd149f7726ec","modified":1718016713137},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/__init__.py","hash":"8278d2c0279cd14eb27b1f487bbe415b7e7e620d","modified":1718016713149},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/_impl.py","hash":"1e5a9d8dc86af078f0c244032db980b0fd11c34c","modified":1718016713158},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/unistring.py","hash":"4a4a8a85179b27a74b15d7150730c10dd789b1b7","modified":1718016713137},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/actions.py","hash":"9c417653572b6956be49afb31bfed33f25e51e0d","modified":1718016713150},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/helpers.py","hash":"9c5c1546309d245e734f49c2fa0af6050e992c66","modified":1718016713153},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/common.py","hash":"693942edcc014f997cb8bf451270c01a025b4d0c","modified":1718016713150},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/results.py","hash":"be84b1b49e3828ec37d7f4b2ffe52f7bfc997815","modified":1718016713154},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/util.py","hash":"d3a1b5e8ac661f741153b0757ce509530f59dde5","modified":1718016713156},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/exceptions.py","hash":"33f826b5f61cb81eaca0761a76d4c5bf3fd29ded","modified":1718016713152},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/testing.py","hash":"0f2a7baa07027f68d8a500b4184fe593c2299bdd","modified":1718016713155},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__version__.py","hash":"98551b7b5437e725ed4ed631dc9c448b0432ffcd","modified":1718016713161},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__init__.py","hash":"a86fd9b261bd085b254467c9b7ae83c0e7e1b7c2","modified":1718016713160},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/_internal_utils.py","hash":"83a8612a7fe67477b5d61a8c4358d22d5b099f7e","modified":1718016713162},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/certs.py","hash":"75406468389902a6d906e6e516a00485d171d33b","modified":1718016713164},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/adapters.py","hash":"a8044515493c0e34203eb9f820a6341b33bde89a","modified":1718016713162},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/unicode.py","hash":"ef897e3a62b1d972e1dd3525dadf04a6dfe7b791","modified":1718016713155},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/auth.py","hash":"4e2a84bc60a655ef478c78adbc6b43fae762af9f","modified":1718016713163},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/api.py","hash":"783d802be4e0ef6483063a3043c0413c201a64c4","modified":1718016713163},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/compat.py","hash":"de2dc8f513051c4f6d9a93d6be4d33c4d65b3e40","modified":1718016713164},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/exceptions.py","hash":"1308f42f9e65c10816a1946f6c7b5c692cca37b2","modified":1718016713165},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/models.py","hash":"765765550a634f7a341eb869fe3dbb92c9440421","modified":1718016713168},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/cookies.py","hash":"0af89877e7653ce1474e49032e615bd1e2dbc3fa","modified":1718016713165},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/packages.py","hash":"f02c00e0f57b81a6ea652f22e4934258f5ef00c7","modified":1718016713168},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/help.py","hash":"cdab1ca78b150d4cb91c453900e4cbb2b00516ad","modified":1718016713165},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/sessions.py","hash":"44fbe35fe96e791db4ec9204ac99fc461f178155","modified":1718016713169},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/hooks.py","hash":"6c2aebe642d6471e70534c45e039df709b23435d","modified":1718016713167},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/structures.py","hash":"b5c2c740b9ff7d27a83ac4c80e3ae741aa33b5be","modified":1718016713170},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/__init__.py","hash":"c756151b98834a600daf027ed3e9ac9c12a15f6f","modified":1718016713171},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/status_codes.py","hash":"530d2bd28f8fe4e40cd40337e86635347e15a65c","modified":1718016713169},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/utils.py","hash":"ab32bbf7f7c53c36839cf134df931794cd80464d","modified":1718016713170},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/providers.py","hash":"d4753f2ce0f84b8ece6709862ca9c5859d391a70","modified":1718016713171},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/resolvers.py","hash":"81c58b0f42e795a41a832e6edcb0ef3a8667af3e","modified":1718016713173},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/reporters.py","hash":"12fb5db25d45218af1edf7a377251b2c5e493be5","modified":1718016713172},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__main__.py","hash":"81633b6e9d2f763a3b26f71eb7bc2b8f4d1c46db","modified":1718016713177},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/structs.py","hash":"36dbfdd47591385ccd103148bd024f7a1e81c690","modified":1718016713173},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_cell_widths.py","hash":"daf7e0f77d10a806f416d6df26b71b319197ee54","modified":1718016713177},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__init__.py","hash":"d6b97fece02385eff2b7a6e2145299c171772c80","modified":1718016713175},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_extension.py","hash":"5b52136df195dda4a08659e1a0376c38d87c2c80","modified":1718016713181},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_export_format.py","hash":"7e0a29e4e333a6415c2d0a5627419424c3fa02ed","modified":1718016713180},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_emoji_replace.py","hash":"24b63b5fc802a433906688c21ce9106dad90c1d3","modified":1718016713179},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_fileno.py","hash":"5519860d4817d286db77fd7cce5c3876b6a9adfa","modified":1718016713181},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_inspect.py","hash":"ec0fc03e050e03a729dfef35b2e00b93eb76d6e2","modified":1718016713182},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_log_render.py","hash":"e28c1f61c554f4dd34c210ea89f8b5031aff874d","modified":1718016713182},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_palettes.py","hash":"ee198b57907e766da93c0096481f639f84b8fe04","modified":1718016713184},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_null_file.py","hash":"6965bb340f1d411c719db72fccc48edbfebfd031","modified":1718016713183},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_pick.py","hash":"72a297844fdb3fc6556944ce2e9799a93423b522","modified":1718016713184},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_loop.py","hash":"64c1a76eb2413ded8096b98a419088ff40136da9","modified":1718016713183},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_stack.py","hash":"3a77a4cd0cdaea78fad6d0088f35bc0035fb62f6","modified":1718016713186},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_timer.py","hash":"b93f8ddd7bc4ea918a9b40a1a5b993d7b7e93b19","modified":1718016713186},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_spinners.py","hash":"7dc392ff666a492c8348338fbd08f412f81d6f34","modified":1718016713185},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_ratio.py","hash":"1d02f4e916f8625597d45207403515ebd23b47a0","modified":1718016713185},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_windows.py","hash":"be72394a0a599540cbae0681ddf7dea8d5bbaa30","modified":1718016713187},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_windows_renderer.py","hash":"f736af40e625c4da8c394ddabcc2b9a30d6b009e","modified":1718016713187},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_wrap.py","hash":"ba31aad0caa1f11410b5ae24b82051b395a77576","modified":1718016713187},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_win32_console.py","hash":"836ce92945cd9083af38a54fb64fd9408058679e","modified":1718016713186},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/align.py","hash":"6377c335836a6a85f093a865378ddc7449f03364","modified":1718016713188},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/ansi.py","hash":"e3b9fa9c938e63733a92217086465ae90e9f3d07","modified":1718016713189},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/cells.py","hash":"d18c80732961c8984a11572ceb90f0e88e685424","modified":1718016713191},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/color_triplet.py","hash":"fa44f6511c7b136d8bf9f3d9c858741f38bc776f","modified":1718016713193},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/abc.py","hash":"9e5742f6c5e276b656a575bd91debe5b6935ebe1","modified":1718016713188},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/bar.py","hash":"d42ce6f8f095838ecdedaead910f6ab10686ad53","modified":1718016713189},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/box.py","hash":"e24f95decd0f048b328cb40edd2c424f3630858b","modified":1718016713189},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/columns.py","hash":"556f2bdd1c7382fa941827c8f2afcbab008c1fc6","modified":1718016713194},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/color.py","hash":"82b60f534ef7c57235c33bed15dfb26a2f4e5a18","modified":1718016713192},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/containers.py","hash":"c3934805d6943d77ac82fa6fd987d5a229a26d70","modified":1718016713198},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/constrain.py","hash":"97d8b90ab5f8d1eefb5f75b72a5658391ca58223","modified":1718016713197},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/errors.py","hash":"cfd7926adb4a02cb6df8794999212c6f026af1f1","modified":1718016713201},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/default_styles.py","hash":"18539b29fedc05794fa133903a56d0f4fe84331b","modified":1718016713199},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/diagnose.py","hash":"a8d91b9a64a8c1ff92990cd44035812da8217c92","modified":1718016713200},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/control.py","hash":"59d7c1fb1c7d75955fa319c2d27f341802b8e2f5","modified":1718016713199},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/emoji.py","hash":"23a65b3dc99d265648ecc0517aa97c8fe767020e","modified":1718016713201},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/file_proxy.py","hash":"5f7dee3ccc5b50b923adaec01508dfb25984acd6","modified":1718016713201},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/filesize.py","hash":"e9b82ac44bd515e9bae642ff0361163d5f9db497","modified":1718016713202},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/jupyter.py","hash":"4ccdab1925739170a634b5e3507c6249a3ffc649","modified":1718016713204},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/json.py","hash":"c295e68f1e004ade154e8389785fd6cb1b1f6f06","modified":1718016713203},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/highlighter.py","hash":"08e6dcc03cd8f4a3463cadf6e2a261af2ae38376","modified":1718016713203},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/live.py","hash":"c95bb3642d470414bc684d8a1cf307cce93c15e0","modified":1718016713205},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/layout.py","hash":"dfb0603fc8261eed36a5cc598bf7c0acbcf8a907","modified":1718016713204},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/live_render.py","hash":"51a5f1d9c3c933447afb8cb433cbe0a8d9e0d0fe","modified":1718016713206},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/logging.py","hash":"644fda0f18147d728d36010ba5e309ac957a1cf3","modified":1718016713207},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/palette.py","hash":"30f805997188595a92c7e3a32effdadf5d7f7e6a","modified":1718016713209},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/pager.py","hash":"66a01aaa2f82c4f00e8dde3c2a7eb04e876613e7","modified":1718016713208},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/markup.py","hash":"32a3922a53150c2fe754d675f7c3fbc2642889b9","modified":1718016713207},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/measure.py","hash":"cecfbef0e10cb7f974bd8f494e639ebd1c6990a6","modified":1718016713207},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/padding.py","hash":"40e397786a4df256246c2e9e16c135b2a5cf8dd6","modified":1718016713208},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/panel.py","hash":"dd00d9afedcad33f57b5f8bf29b9e955465a9ecd","modified":1718016713209},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/progress_bar.py","hash":"429b0aab3f07638d96b1477afef4463e603bce74","modified":1718016713211},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/pretty.py","hash":"46868ac58dda6a3b89787b820190731702efe6bc","modified":1718016713210},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/protocol.py","hash":"a2dca9d46365f198635de5bbfd6c2628566ab28f","modified":1718016713212},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/prompt.py","hash":"244e7df24d577c830a6226f32deb8aa37845d3b4","modified":1718016713212},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/region.py","hash":"f38fc0db54d1fa3e66820604153208c316dc4df3","modified":1718016713213},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/rule.py","hash":"7749aef099cb40f7099a009edf075ee3936d4757","modified":1718016713214},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/progress.py","hash":"a47d6519c83efab39212b16b1a93cb3e8fb1ad05","modified":1718016713210},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/repr.py","hash":"9f06287435666c8307dd18f62b41bde7ab6ea5ea","modified":1718016713214},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/screen.py","hash":"4f0802d8391d8c1e0397768db38bb9e56cbac613","modified":1718016713215},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/styled.py","hash":"6fd170ba37f8246b0f64ba21357410459044160c","modified":1718016713219},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/scope.py","hash":"5aec0581ed1c64d49146d94301c0e01d2ecc5000","modified":1718016713215},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/spinner.py","hash":"5a96e06e5cae604bf13a3e259ce1538eff9e4644","modified":1718016713217},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/status.py","hash":"a8bedffabaf6c3502ef2940233eb50f8454205c6","modified":1718016713217},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/segment.py","hash":"b925169c41f073f6833cf90881671838b6d4a653","modified":1718016713215},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/terminal_theme.py","hash":"006b559781a41f7f79c70ac0bdedad9f603c4d13","modified":1718016713220},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/style.py","hash":"157af0d0548f2f4c1fde0bba511c13de2aeb7d61","modified":1718016713218},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/theme.py","hash":"32897f1406e9e0e9d8d31054cc44b8712a3c606d","modified":1718016713221},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/table.py","hash":"c2391aeb22fafcccc9f3e756aee4847581e87da9","modified":1718016713220},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/syntax.py","hash":"04a48c39db598db3d0b5ddd11e911193fbb866c6","modified":1718016713219},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/themes.py","hash":"5962944738f3a08c35e5119f576c85edff8c58c0","modified":1718016713222},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/__init__.py","hash":"3f5a80198421edb70f29334cae4fa4202dd7b1bd","modified":1718016713232},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/tree.py","hash":"599a2d1e23f26f807bd02d546437048b4ec55339","modified":1718016713223},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/traceback.py","hash":"855b25fba6e3d4051de7261be584ac1a5f7a22e3","modified":1718016713223},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/text.py","hash":"980627bcad32c97a769e4b100ae2510782c81e2f","modified":1718016713221},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/_macos.py","hash":"7ff4450a82a21db280713ca3c4cd44c36cd78166","modified":1718016713233},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/_api.py","hash":"10f72c38fb17105cd18b1a65742047951153981e","modified":1718016713232},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/_openssl.py","hash":"180fc796b1f30f0c2b9f7c7da870a67485cf7479","modified":1718016713233},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__init__.py","hash":"0c1e5aede6364dccfd35298c583bb81960ce45a4","modified":1718016713224},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/_ssl_constants.py","hash":"339dae582f9b73f50eed269b6e7a3c4ab4125a0f","modified":1718016713234},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/_utils.py","hash":"48b014c643b57b02029ed2594eb4089de23ca7b9","modified":1718016713225},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/_asyncio.py","hash":"227d2956665f59edf56819df615fab54371c3fa4","modified":1718016713225},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/_windows.py","hash":"1bc35371ea741c9c580d8ef54e9fff9ac89661a0","modified":1718016713235},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/after.py","hash":"f357c301ee2bf93a02f4b4188f66fc1c3b99f02f","modified":1718016713225},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/before_sleep.py","hash":"4a98716c1fb7e150f6ba43874fd04fed3d5703ae","modified":1718016713226},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/before.py","hash":"9ef802ad17aed932041cc8e70deeb4fa1268dc8c","modified":1718016713226},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tomli/__init__.py","hash":"74c49fb12ed49ef70739f0f9ababcd0cd7346fb9","modified":1718016713230},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/retry.py","hash":"bbc8fd81ccea0a27b98d4e0701d1d4491dad4021","modified":1718016713227},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/nap.py","hash":"b586e8e91a90b3770906a7d73800a474714bb3f3","modified":1718016713227},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/wait.py","hash":"848cee81a9f4e985841edca48ce70e4403a00a11","modified":1718016713229},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/stop.py","hash":"8e7deb74f0cc33e4cc44b5a776b2fe844784d440","modified":1718016713228},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/tornadoweb.py","hash":"b155f31981d20df5246e682d46055ce4c44b2589","modified":1718016713228},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__init__.py","hash":"cc9234ec06bdd97bbbae4ae7a2b5e837f93fe8de","modified":1718016713235},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tomli/py.typed","hash":"c6eb45191eafd8deac33dad1803b14305f841347","modified":1718016713232},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tomli/_types.py","hash":"6dc6337d888edea5138a094e517be6c0e4bd09f4","modified":1718016713231},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tomli/_parser.py","hash":"c21682d8065b4c6319654107c4d1691000551a96","modified":1718016713230},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/_collections.py","hash":"48aa9b3f4621cb54b901f789d8e596122ab98898","modified":1718016713235},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/_version.py","hash":"6f6f135154f47e085d6ce6e49897a4b6b6684627","modified":1718016713237},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/connection.py","hash":"a45b9ad3ef3a0b637f31dc0cdfcf5b4eebf44c37","modified":1718016713237},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tomli/_re.py","hash":"41d8d0205ae11da5308581e62df6da123be415ed","modified":1718016713231},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/filepost.py","hash":"5d0f199cd76dc0c256c2f6c038dca67e6b2c8374","modified":1718016713240},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/exceptions.py","hash":"ae0a47792b96e8f918c9ca79e9834f99283d9cf4","modified":1718016713239},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/poolmanager.py","hash":"e557b1d9779678661da3b42b349ca0bafc229b97","modified":1718016713241},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/fields.py","hash":"dfa65a499039a4d0fc62f81ce2b41a981c5e0b3e","modified":1718016713240},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/connectionpool.py","hash":"44d8691bbf765ccb58f5a717e284a1023f1cd1c5","modified":1718016713238},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/webencodings/__init__.py","hash":"b86d0c96a67c31ebb93d1dfbc506289cd8ed30c0","modified":1718016713260},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/request.py","hash":"157989366f7be9b626b40ed7bcb639cadc8d31ae","modified":1718016713241},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/webencodings/x_user_defined.py","hash":"e7b80b249b8a194b29acaa3b3709f655d75a7a62","modified":1718016713263},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/webencodings/labels.py","hash":"0d571c80a0923785fd20100b9db8c74993d035e7","modified":1718016713260},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/webencodings/mklabels.py","hash":"1fac2e8b532eb9062024c99e8ae7d0417f12520d","modified":1718016713261},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/webencodings/tests.py","hash":"745ca9bd26cc0c09828bee5f21d461d3aefb9484","modified":1718016713262},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/cache.py","hash":"70c2ef8c6253e4efcb39d5868e051ca89bbd535f","modified":1718016712927},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__init__.py","hash":"22364bc467edf6a02690dcd0a6a83086aa572238","modified":1718016712926},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/configuration.py","hash":"4bfaf98054bbd1b027f89190b6233d4803f760fd","modified":1718016712929},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/freeze.py","hash":"fee73bbd10cbf5d395576c49d201527fbbda1d65","modified":1718016712932},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/response.py","hash":"b29cb7de80c225172052a0272684fb2c1de4dbbf","modified":1718016713242},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/completion.py","hash":"f9b51adde0442e0a259666cdd0d47130dd122086","modified":1718016712928},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/check.py","hash":"addbb931c27bf8678e0488e5b729d7e96e49385b","modified":1718016712927},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/download.py","hash":"0b2cdc966a65693804b42ebca74f346a1bc0b470","modified":1718016712931},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/index.py","hash":"ffd4f7873da8c8bb6f9b3d8d966467e8324bd3bd","modified":1718016712935},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/debug.py","hash":"31ce2d54646daac879b11c2ac5ae72b0194b8d3c","modified":1718016712930},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/help.py","hash":"9dbfb87d39f05e31e727697d166831bfe0a6673b","modified":1718016712934},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/hash.py","hash":"3ff85f8d8bee597549fa1ad996fd684d33518c27","modified":1718016712932},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/list.py","hash":"d3df9daa65d486f5ada3dca4dcfe3e9e646c990c","modified":1718016712938},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/install.py","hash":"f2973ad6e825c27a2b5772a9d6272cf0260c03b8","modified":1718016712937},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/inspect.py","hash":"d79785ae0a37078659bd3eb7c6b315f941cb517e","modified":1718016712936},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/search.py","hash":"9687374c00a5f859eed177372c883012e9e4faff","modified":1718016712940},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/show.py","hash":"31c8e80a7438a152a2eacfd649d89b68a807fb9d","modified":1718016712941},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/distributions/sdist.py","hash":"59c98df98387d581b456446983c84b6334c34e4c","modified":1718016712945},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__init__.py","hash":"c98bba03ebc076049b09e2a3168633079a3ea7b1","modified":1718016712914},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/wheel.py","hash":"ccb24e76512731ed32baeb39c57de246069ab01f","modified":1718016712942},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/uninstall.py","hash":"6e83fd74bd6d1d6c1b660828aa39c4257b419507","modified":1718016712942},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/distributions/__init__.py","hash":"cda4ca594b1ab236cb2a17fde09a59d46410ca30","modified":1718016712943},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/distributions/base.py","hash":"f3c75c6f5615d38ab902a9451e78de0c263d5d0e","modified":1718016712944},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/distributions/wheel.py","hash":"be6a4c3d87575e02d0c974f527f84d8d390fc291","modified":1718016712946},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/distributions/installed.py","hash":"d324a8c68f8ae49cfd4fdfad1b873d947f9feac3","modified":1718016712944},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/base_command.py","hash":"2f96cc02f951bfc4e991337eefcbc9064c4f3687","modified":1718016712915},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/autocompletion.py","hash":"bf455745984788587539059b746f930b46db0b1d","modified":1718016712915},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/command_context.py","hash":"07cfd732dc65402c9e687dd7871ad3db39ee6b15","modified":1718016712919},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/main.py","hash":"29c984e2c04e7155594625fd38fed11ff25f2f97","modified":1718016712920},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/main_parser.py","hash":"8a34ef596ae1821215cc580b3f5a441f668c07cd","modified":1718016712921},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/parser.py","hash":"cb4a660cdf59f16b83fd61deccd012a59f410849","modified":1718016712922},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/cmdoptions.py","hash":"31d33ff8f2720abefc04fc4b28364b007cc8bb8e","modified":1718016712918},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/progress_bars.py","hash":"30e4dd3ad41bc3e9cd91528634dfb7cb78dc606c","modified":1718016712922},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/status_codes.py","hash":"0f5af7b27d1a9eb30efc1023917c7c50a76dd681","modified":1718016712925},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/__pycache__/__init__.cpython-310.pyc","hash":"babbcb4a9fb13e1c508a3d2744623acceb8e2272","modified":1718016713304},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/req_command.py","hash":"c79b217f0d96ff7e53092c60087cfbd3df00b73e","modified":1718016712923},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/spinners.py","hash":"ecfe25bb7fde3149dc85fac71f6e92f923c51c17","modified":1718016712924},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/index/__init__.py","hash":"a55d1d416e674d9f4a8e0337defe350962f21f1a","modified":1718016712947},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/__pycache__/cache.cpython-310.pyc","hash":"a5c5789db07160f5ce336e3090757107293c8fc7","modified":1718016713331},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/__pycache__/build_env.cpython-310.pyc","hash":"a212453011a742f87416594c3933c1671f44cd27","modified":1718016713319},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/__pycache__/main.cpython-310.pyc","hash":"7334451b31658eccc2274635e8be04687056ef62","modified":1718016713862},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/__pycache__/configuration.cpython-310.pyc","hash":"ab83aeeb060cf55ec57e4b7b43e06430a48ba343","modified":1718016713688},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/index/collector.py","hash":"2a1719bbd11ccd34447f2e2c2b76751bf61f6297","modified":1718016712947},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/__pycache__/exceptions.cpython-310.pyc","hash":"89b207f5ba880d642f3a5f8f540d2d8ff702d8ce","modified":1718016713759},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/__pycache__/pyproject.cpython-310.pyc","hash":"72e96d9db2ada41c81c098272ec9621e97fdec97","modified":1718016714313},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/__pycache__/wheel_builder.cpython-310.pyc","hash":"49d1dcd763762ebe36573b24e074b7fd4af12a41","modified":1718016714921},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/__pycache__/self_outdated_check.cpython-310.pyc","hash":"66455e50629fc9e310e4c2799772c814a7e983b4","modified":1718016714553},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/index/package_finder.py","hash":"1697a67011e2f17c399c784778755e8518fa4b1c","modified":1718016712949},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/locations/_distutils.py","hash":"10cdf71b7814400226bfce22b99ab43b5fe7c6c5","modified":1718016712952},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/index/sources.py","hash":"dc58845dc62ca823e3ea9e7db6ea5d8b2fb7b4f3","modified":1718016712950},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__init__.py","hash":"af1b34a8655a6a39832635a34dcbc060412ed6cb","modified":1718016712960},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/candidate.py","hash":"0f95933e28b70d16841d840b5025fe75f6264337","modified":1718016712961},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/locations/base.py","hash":"b8e2670e06883b1ac1244f41eb9d63b50704c3ce","modified":1718016712953},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/locations/_sysconfig.py","hash":"9ab439bd5f5b0f6478d0dc17da2fa87733f01f32","modified":1718016712952},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/locations/__init__.py","hash":"a4a9af510c13b0bb0dc6b2ddfa089d570409a749","modified":1718016712951},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/direct_url.py","hash":"2be67e05e637fc6defe87897294b4a61043223ff","modified":1718016712962},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/format_control.py","hash":"22cb3e5d1d2d4921c56bee8b25322405d75660e6","modified":1718016712963},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/search_scope.py","hash":"6ec69d7090b207e5b202989acd581d0b86a0118d","modified":1718016712965},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/installation_report.py","hash":"8e0e2f7c9ae3d859a2f11d6dbbc5f7aea26cc1e5","modified":1718016712964},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/index.py","hash":"26707b880bf178100e5a233e43832c57a4916895","modified":1718016712963},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/scheme.py","hash":"fc639818c98ab821887bd5ae95fd49ded2d8634a","modified":1718016712965},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/link.py","hash":"15a3b67cf3296f1df342bacb84f02bf3fe532234","modified":1718016712964},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/__init__.py","hash":"27f3ddfc360d5f981f11dae326ede574b7519713","modified":1718016712954},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/_json.py","hash":"f2089d3ecdfa459d011d166251904b1af6ca3964","modified":1718016712955},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/selection_prefs.py","hash":"64627b9f7f60add87cfe2d2b107d262480aab44e","modified":1718016712966},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/target_python.py","hash":"479a26a092f77a856b804a38331a6b8d2440cfc6","modified":1718016712967},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/wheel.py","hash":"cf55ff5f5c3457ad21cfb24f341871b7378a4197","modified":1718016712967},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/__init__.py","hash":"cc7b633895c11040d0b99e7d0575b1d031652035","modified":1718016712968},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/base.py","hash":"c314e363f75351cb40444abbb4523097079d3c6a","modified":1718016712955},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/freeze.py","hash":"bfc4fab55e20829097432e39193cdc13c99a3d10","modified":1718016712976},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/auth.py","hash":"b3c8663b501de3a9b1a17eb858c83621158a3bf3","modified":1718016712968},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/pkg_resources.py","hash":"2c5fd18665771b95a89e6c14ebe587ff3a5b4b93","modified":1718016712956},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/prepare.py","hash":"dc57a38d370f140adfb08a5c8edd2e35ff19eb40","modified":1718016712976},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/check.py","hash":"d97ac05828ee730ee5b14a6f6e28dce98a4f0b96","modified":1718016712975},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/download.py","hash":"69610a1f064a6fac3514a158bb4b45a4eed5d672","modified":1718016712970},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/session.py","hash":"4ae82eca21af93318fbd8419a0bef7c8350ac27b","modified":1718016712971},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/cache.py","hash":"2521f1cc06b3f0dc49cfaa39223e69bea749bfa7","modified":1718016712969},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/__init__.py","hash":"cf0ead8f5fb907fc11c71df8cba39d7b2a024a1a","modified":1718016712985},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/lazy_wheel.py","hash":"90f90b661efb4ae55c9c0e5174c5f3f36128f344","modified":1718016712971},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/utils.py","hash":"a2f5a9510319d95ade4777bf462996cd0456e6e7","modified":1718016712973},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/constructors.py","hash":"95d491ff36169c0c5fffe9aee67b6a6fd10becd9","modified":1718016712987},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/xmlrpc.py","hash":"1b9d05d0166567a0f7b6d0295e5450ce8627cb64","modified":1718016712974},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/req_file.py","hash":"3ba2944c19d21912a4da5ecfaf37ea692ccf1ac3","modified":1718016712988},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/_jaraco_text.py","hash":"b0731381c5aed0a117e812350815008b0ac7623f","modified":1718016713002},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/req_uninstall.py","hash":"e3549ec01b2680f073048e2198eeba53faa5eea5","modified":1718016712991},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/_log.py","hash":"2c20b7d739a304f3715aea6b90eed634c2217c5f","modified":1718016713003},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/req_install.py","hash":"9c22316e093b009d97fe5d36431c31099bf5cca7","modified":1718016712989},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/req_set.py","hash":"49a3abab94a935bdc119f167997a24fbf9417b41","modified":1718016712990},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/appdirs.py","hash":"2f7d46108f0818d083ec0fdef4bef65ac5977583","modified":1718016713003},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/datetime.py","hash":"442dc5866a60dac7ca2578cd773c147e9e1c063a","modified":1718016713006},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/compat.py","hash":"29d3d00672cb363bc71bdf0769ec4fe9841ae318","modified":1718016713004},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/compatibility_tags.py","hash":"dfbada13eba8ef63d4bc33a652ada480e3e06b42","modified":1718016713005},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/direct_url_helpers.py","hash":"dd92e884df95195217318db385b1dbd399d50d0c","modified":1718016713007},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/deprecation.py","hash":"8c790f62db12bb362628db33e4992188a1d893dd","modified":1718016713006},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/entrypoints.py","hash":"df1011df89a89e8e184b38cf4232cc1b15446cc0","modified":1718016713008},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/egg_link.py","hash":"7f16cac0927cdf0a044e03f617a9e94a427b859e","modified":1718016713007},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/filesystem.py","hash":"7e4452ee2a28e0e3e10d02d1ba115870e9540e4f","modified":1718016713009},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/encoding.py","hash":"31c2038b64dd5d3dd3c4cf560e354e4471b144a0","modified":1718016713008},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/glibc.py","hash":"993be097901608f3160f7e3fafeccd7d1d21ca27","modified":1718016713010},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/filetypes.py","hash":"b75e13ef5d44699f0af4ae12882321e63045b936","modified":1718016713009},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/hashes.py","hash":"f88bdea46699abb220c1f5720b4652629cb16b28","modified":1718016713011},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/misc.py","hash":"872df28d996a12a42ee287a09e0c88386c6c4fe4","modified":1718016713012},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/logging.py","hash":"6cfc66cc5325e5e0d1de8c31202eb486d71ebc0f","modified":1718016713011},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/packaging.py","hash":"f9673a16d2fe6a03e450ee1e0d2c8c67ea812b87","modified":1718016713013},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/models.py","hash":"3dd814e8c7938bfdbbbfea5efb457eb59fcd0f2d","modified":1718016713013},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/__init__.py","hash":"ddf20f97603f281dc422347d7b063a0c31d728b7","modified":1718016713020},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/subprocess.py","hash":"2a5ef413060467b26635cecb25418ba5f1308b11","modified":1718016713015},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/setuptools_build.py","hash":"b3bccb4896004ff798da12a3d87978f7b62efc45","modified":1718016713014},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/temp_dir.py","hash":"0318c8a2e74430eec9cd32cc2a5c762493014187","modified":1718016713015},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/urls.py","hash":"ffb06fce78f5da3dfa1bf3f8b428dda882893684","modified":1718016713017},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/unpacking.py","hash":"9761f6164167af6b9ef5f4bdb68299b6c48db277","modified":1718016713016},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/bazaar.py","hash":"44a7790a3f562475c1ec006cbbfca10c5243dcba","modified":1718016713020},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/virtualenv.py","hash":"14cb66aa6ea7945b643769280466da0fd10febac","modified":1718016713018},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/mercurial.py","hash":"9f7531c4ab899404633da9ab7de6e0610da47ec0","modified":1718016713021},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/__init__.cpython-310.pyc","hash":"93e05268986d72512e8c6ad80f545493026a73b2","modified":1718016531913},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/wheel.py","hash":"ebebecb94df0aee12848fe846e7d2caf9fb617ae","modified":1718016713019},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/_collections.cpython-310.pyc","hash":"f554f1b48047516c75c9d0c0553553035a02e2d9","modified":1718016531926},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/_macos_compat.cpython-310.pyc","hash":"9d512397af4b7b656e2f23e85b544568e745711c","modified":1718016531947},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/git.py","hash":"8b619b071f349b2b977e86aa685b20cbfa344659","modified":1718016713021},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/subversion.py","hash":"3eda4b853ed85b240d41ebdbd1cc242a0102b2d5","modified":1718016713022},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/_functools.cpython-310.pyc","hash":"ccfd72fb35cb91d7a504c94f23d9ab392122c0c5","modified":1718016531935},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/versioncontrol.py","hash":"b65af453851fe273953a60b122cb2be83441c3f6","modified":1718016713022},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/cmd.cpython-310.pyc","hash":"fbc02e79576c76d8121dd2364cb5319aecf9707a","modified":1718016532033},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/_msvccompiler.cpython-310.pyc","hash":"69c09942cdd9a77ffbd2aa2162d2fec50f48f397","modified":1718016531965},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/ccompiler.cpython-310.pyc","hash":"a7632b6dc92826b935094a3a0bf5a55e7abf680f","modified":1718016532018},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/bcppcompiler.cpython-310.pyc","hash":"75b6f6981a72d24445db9c4d69ec62746cd99573","modified":1718016531997},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/debug.cpython-310.pyc","hash":"e3971c759529b63bba26d7698455024a6cccf1b0","modified":1718016532438},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/config.cpython-310.pyc","hash":"589a5a45aa24b27d0352188cfb71ff1cda76ff1d","modified":1718016532399},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/archive_util.cpython-310.pyc","hash":"14529a39fdb331d0d07207f38bb1a19ff1c66194","modified":1718016531981},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/errors.cpython-310.pyc","hash":"75c19c5e0ffb3f980f58ff2c83d674cddec532ab","modified":1718016532502},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/core.cpython-310.pyc","hash":"d29616341db6623ecdb4348355541d7f095bd2e5","modified":1718016532412},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/dir_util.cpython-310.pyc","hash":"e8190d9c9407561f475046f571d65a8e678ea7ad","modified":1718016532460},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/extension.cpython-310.pyc","hash":"49f569a9450f8c942a5da93780c1dab1190edfdb","modified":1718016532515},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/cygwinccompiler.cpython-310.pyc","hash":"11775fa091976674dc05d1e3f32b9d3ba21e951c","modified":1718016532429},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/dep_util.cpython-310.pyc","hash":"7dbbd71cd5de5d0524c6dad16201e48fe71efdb6","modified":1718016532448},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/dist.cpython-310.pyc","hash":"52d438ad95dfc85c6c65088ef00e7f35756c72a3","modified":1718016532486},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/file_util.cpython-310.pyc","hash":"ab3b459e3b578de4dc8b88a8c02e44436e6375b3","modified":1718016532543},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/fancy_getopt.cpython-310.pyc","hash":"67fb9a2ae2fa3ed666810780c967f53107641396","modified":1718016532530},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/filelist.cpython-310.pyc","hash":"211fcd4a444b96e82a6e09dada9f9ed74a6af0ad","modified":1718016532555},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/py38compat.cpython-310.pyc","hash":"c651fe9d4fbf56c3cbea40a21bfc3ffec5d7c446","modified":1718016532607},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/msvc9compiler.cpython-310.pyc","hash":"52ed6f05605acf74f27366ad4f9dedf803d0b531","modified":1718016532582},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/msvccompiler.cpython-310.pyc","hash":"c316dc8b3699f765e35b54d16e2c1abbda4e4f71","modified":1718016532599},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/log.cpython-310.pyc","hash":"724fa9558e9f78cceb84cbf6b099772dac9cffab","modified":1718016532565},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/py39compat.cpython-310.pyc","hash":"e27f29d82d99acd91642c08c95e2c4d6694ad54d","modified":1718016532614},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/spawn.cpython-310.pyc","hash":"24a2a599f808a4d64160faec9829d0a23be8ae17","modified":1718016532629},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/sysconfig.cpython-310.pyc","hash":"981241a06ce0d9d4b80014b3f7bc15b3afcda6cb","modified":1718016532643},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/base.py","hash":"bb0a50e2866d29bb4c616cf2900fa3eb8eed3051","modified":1718016712992},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/version.cpython-310.pyc","hash":"118ae203fc6f62e2aff9cbeea492658ca22927c9","modified":1718016532692},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/util.cpython-310.pyc","hash":"94edac5b1ed42e9991b198915ca6f433f10a57a8","modified":1718016532678},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/text_file.cpython-310.pyc","hash":"6d08e61ca76f1d7dad8e94e276e11f1670644a28","modified":1718016532654},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/unixccompiler.cpython-310.pyc","hash":"2ea41ebcaf35ceedcdd3754a54360f3806bb70e3","modified":1718016532665},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__init__.py","hash":"f810797e3f87b58e4c2703da4bead82f09147fa2","modified":1718016531102},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/__pycache__/versionpredicate.cpython-310.pyc","hash":"90a9d84d4a5578bf56caeb2e14cc8b1ad6f78962","modified":1718016532704},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/_framework_compat.py","hash":"593d521d5c4d42c36b68d129af4699ee42f85792","modified":1718016531102},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/bdist_dumb.py","hash":"1cfc08d594dcd7f160d53a6a0256cc3bf1a91183","modified":1718016531104},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/bdist_wininst.py","hash":"864d4154f4af14d7ee50a8c0342fbbc25b7dd8c1","modified":1718016531107},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/bdist.py","hash":"78564138b462e7eb4a046fba71573a40ddf0b4dd","modified":1718016531103},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/build_py.py","hash":"81b212ff032cf8ddcb0c885916afcfd3596004cd","modified":1718016531112},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/bdist_rpm.py","hash":"45f1aee969a7168df5fe04290cc5e7aa24674407","modified":1718016531105},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/build_clib.py","hash":"64e6567e4a9807b333e5566751cbf6df2e52c0a3","modified":1718016531110},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/build_ext.py","hash":"6d061e29fba802220235325c42e03a0f416804d6","modified":1718016531111},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/clean.py","hash":"26525bbbd681c188706a27aaeac3f9c02cd468a0","modified":1718016531114},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/bdist_msi.py","hash":"34e076733877fbd188afe2abe90f6669fb173b0f","modified":1718016531105},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/build_scripts.py","hash":"6c05d59222cbdd514caf9b3763a4b78be3300085","modified":1718016531113},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/check.py","hash":"fd51c38991d068f3d43ff9304c740909210f302d","modified":1718016531113},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/build.py","hash":"db9a292e0154cb7a575cafa2b785ffa9c4f272d4","modified":1718016531108},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/install.py","hash":"a08a114aa4b8d32699d433b69fe22e7ea1a4cd75","modified":1718016531115},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/config.py","hash":"341a96de5bb1f2ddc299d07a2363d472d75af552","modified":1718016531115},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/install_egg_info.py","hash":"06cc63a041ae68e3b68690f733507bb9d0f0d0df","modified":1718016531117},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/install_headers.py","hash":"8516a7e6b3d0bd08e9d7e6728c57a3ac65052054","modified":1718016531118},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/install_data.py","hash":"901c123a4aa2cb2c6003cf247ab696bcfb8fb1f8","modified":1718016531117},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/install_scripts.py","hash":"8506adf8ee9b42f7b52ea44ed090157f6f4fbf7f","modified":1718016531119},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/install_lib.py","hash":"68465a6d13b92af3b7be9d6f7722540ab70b156e","modified":1718016531119},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/py37compat.py","hash":"4e63ca2cab5384259b7ad53f9c0018e1073ba059","modified":1718016531120},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/sdist.py","hash":"43fe8ff8b346a8b59359511b097fb8dffc22b61a","modified":1718016531122},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/upload.py","hash":"7d3b9ec5805fa2c09442194ebafbc1651983dcba","modified":1718016531123},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/alias.cpython-310.pyc","hash":"9622863c2af0dcd7c84ad94332893a24bd24f9db","modified":1718016533383},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/__init__.cpython-310.pyc","hash":"d6d10bc6c8035cbee3e5438e22f8eabaf8ffb2e4","modified":1718016533374},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/bdist_egg.cpython-310.pyc","hash":"7f5117ab35d80fda6ae502994ee6ef4261c077ba","modified":1718016533398},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/register.py","hash":"f095a05798bd2d3595b611aa4ee3f69ddc0b4299","modified":1718016531121},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/build.cpython-310.pyc","hash":"4b34daaf8ce35b1d62cc88b5ae5897524920efea","modified":1718016533422},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/build_py.cpython-310.pyc","hash":"167e169a02ebf87b4f4385f0295a502bdabe46c3","modified":1718016533458},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/bdist_rpm.cpython-310.pyc","hash":"18e8f94234ec48be96784f726ca7dc1c0295a2a4","modified":1718016533413},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/develop.cpython-310.pyc","hash":"4e4bcc547e0245c8d4485e40c7cab209358038e1","modified":1718016533470},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/easy_install.cpython-310.pyc","hash":"e3497b5b3d2349145776b43f9780d7ce3689d195","modified":1718016533506},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/build_clib.cpython-310.pyc","hash":"cde995e83e4fe4809f7331a38592634efe68cf18","modified":1718016533435},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/egg_info.cpython-310.pyc","hash":"bf7954adb50d15d978a36b121afb89573f09cf48","modified":1718016533520},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/dist_info.cpython-310.pyc","hash":"d6aaebc29d5e40eda371b1453dfdd52df4fe031b","modified":1718016533480},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/install.cpython-310.pyc","hash":"e2aa09cf79c301922294445569fc200e1e2fbc63","modified":1718016533532},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/install_egg_info.cpython-310.pyc","hash":"9c391bd38f0c8bf3cbffd57d62f30bc594b61cd6","modified":1718016533543},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/install_scripts.cpython-310.pyc","hash":"36cf45a8ceb12bf26afba9db41e2844e46880b78","modified":1718016533566},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/py36compat.cpython-310.pyc","hash":"cce8135bb68355eebd82968436c998c844aea4a6","modified":1718016533576},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/register.cpython-310.pyc","hash":"903c831248adab47d803e6e736697704e2ea1398","modified":1718016533584},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/rotate.cpython-310.pyc","hash":"9af086b292eee3b7542682f3ef4d9eeae1b0804d","modified":1718016533597},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/saveopts.cpython-310.pyc","hash":"63a3b6ee99b04ac5d2a990b17dfe7be509a5b354","modified":1718016533605},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/sdist.cpython-310.pyc","hash":"239c33199917eafb7b22c34a85bcfd62c5489a3b","modified":1718016533617},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/setopt.cpython-310.pyc","hash":"5aa3696f64814b700fe3a385389afcc645a90ecd","modified":1718016533631},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/test.cpython-310.pyc","hash":"8a628e150be664f0764892203a177ab6ed3e7994","modified":1718016533643},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/upload.cpython-310.pyc","hash":"864767fce16eab2af17a4f8c12c59cda64fa9be9","modified":1718016533652},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/__init__.py","hash":"65ef5a6e3f118e07e0b0973511c7a2b113c48a39","modified":1718016531129},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/_adapters.py","hash":"92a75b7d20ed08e74792258319a779c4b61b3bd5","modified":1718016531130},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/upload_docs.cpython-310.pyc","hash":"4f11257ea33a46cee602030c326badcb02acebdd","modified":1718016533664},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/__init__.py","hash":"f4e32bdcb8b1c2d2d10a1d3586527393528250c6","modified":1718016531134},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/_collections.py","hash":"4e07a9ef47d40ddd33eb1d29c8277823ad97a01b","modified":1718016531130},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/_functools.py","hash":"69d5ecd15436ac8a0774dd5c4388f32425a9e128","modified":1718016531132},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/_compat.py","hash":"f88f8bb34ce86bb4250d2fa80229b9bd021a5d92","modified":1718016531131},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/_itertools.py","hash":"40b1034a8bbb3f59720230c6d05c239977b37a11","modified":1718016531132},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/install_lib.cpython-310.pyc","hash":"8ef09bc46679f5439e1b85651cb21cfc6580cd44","modified":1718016533553},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/__pycache__/build_ext.cpython-310.pyc","hash":"40dd0a6b167496ef17b74a1a4446b5dd57af0e07","modified":1718016533447},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/_adapters.py","hash":"becfb581b4bb6d0fd839fdf102f41f0d3e636e51","modified":1718016531135},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/_itertools.py","hash":"aeb22c2dfd0f5dbf25a590428ae844440aa61425","modified":1718016531136},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/_compat.py","hash":"8211f8693cfecc48bbe599e3474da20d02d22447","modified":1718016531136},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/_text.py","hash":"5706a824d57d684b2985ee3a05a77ac152f55ebc","modified":1718016531133},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/__pycache__/__init__.cpython-310.pyc","hash":"b900fffce1faebe77da1fab6b2be238fbd4b3937","modified":1718016532769},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/_common.py","hash":"7e7783dc90e9e02872d0a17deab07a2c7c32f7e7","modified":1718016531135},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/_legacy.py","hash":"b5527daab8064c5155636f27a1619ef48e8ecccf","modified":1718016531137},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/abc.py","hash":"77a76c22e02e936246d6be558caf8f3e912d87c5","modified":1718016531137},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/simple.py","hash":"7c2f790474c65dc51f494c854a4f139079cd2be3","modified":1718016531139},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/readers.py","hash":"4eba4ec0fa1ccd5f0835057cb4de9e180916aa53","modified":1718016531138},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/__pycache__/ordered_set.cpython-310.pyc","hash":"8966a7b85ae0ad9fb4529f2977a14a05d835952b","modified":1718016533002},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/__pycache__/zipp.cpython-310.pyc","hash":"b5d9fc327de5c76f06ffd6edea205c8dc64b4ef0","modified":1718016533339},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/more_itertools/__init__.py","hash":"63002b807e58f38fe53cbfc603ae72280e38009b","modified":1718016531142},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/_meta.py","hash":"418eed80ececba397f2a75d9ce620159275fdb4d","modified":1718016531133},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/jaraco/functools.py","hash":"81d2975f23bd85ed29c7867ef05e6935d4f1e19a","modified":1718016531141},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/jaraco/context.py","hash":"6cc9b5550bce50566360a1bf8cc04c06c721306a","modified":1718016531141},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/more_itertools/recipes.py","hash":"8e9e687648cd83e7d298ea05f013c9712eefcbc4","modified":1718016531144},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/common.py","hash":"de8dd9838210119b7befcd0946e7c9f379339d27","modified":1718016531152},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/__init__.py","hash":"f2f946deeea358311798beab96b8a1b17058d59c","modified":1718016531150},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/exceptions.py","hash":"ab5129523325e6eaf08c54fdcc8bc44cdee58f4d","modified":1718016531155},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/actions.py","hash":"67d8608694b23d9b9daadff16a49f39996e815a0","modified":1718016531151},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/testing.py","hash":"d22ccb3a0858fb6d190fe5996345b69826e19755","modified":1718016531159},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/unicode.py","hash":"28c6a430f63c3c0b96c651b5c1b80655930f9d42","modified":1718016531159},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/tomli/__init__.py","hash":"74c49fb12ed49ef70739f0f9ababcd0cd7346fb9","modified":1718016531162},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/helpers.py","hash":"9836a1212a067ea112bf7d37c6d9ed45992938b5","modified":1718016531157},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/util.py","hash":"001eab2eabbf7018d2f36596c5c304ecd51116af","modified":1718016531160},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/tomli/_types.py","hash":"6dc6337d888edea5138a094e517be6c0e4bd09f4","modified":1718016531164},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/results.py","hash":"271488318042ab293c99cc97053dbc066933d88f","modified":1718016531158},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__init__.py","hash":"9501323e7783213ab6c7c8e8fd05cd95d7a76ba1","modified":1718016531145},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/tomli/_parser.py","hash":"c21682d8065b4c6319654107c4d1691000551a96","modified":1718016531163},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__about__.py","hash":"65369f014ea304064474d47c719401803c999ed8","modified":1718016531144},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/tomli/_re.py","hash":"41d8d0205ae11da5308581e62df6da123be415ed","modified":1718016531164},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/_structures.py","hash":"fe0c3747cf14e696276cb6806c6775503de002b8","modified":1718016531146},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/requirements.py","hash":"ebfdc8c170f5903e68ec77abc56e03a9ccabea0f","modified":1718016531147},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/_musllinux.py","hash":"d446d94e2b0fe0ec6286292877c3926268ecab4a","modified":1718016531146},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/_manylinux.py","hash":"0ff6c9ceb0819aef9d68cee59d7942fa0544661f","modified":1718016531145},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/extern/__pycache__/__init__.cpython-310.pyc","hash":"eba25847abe803367cb9444e96c6b971aaf434a2","modified":1718016533935},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/specifiers.py","hash":"04ffe4f1c2e6d8796ae64b8d3ccd1b9791f31445","modified":1718016531148},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/markers.py","hash":"b5a87b9408091d4bed267143b4961607215ba0b2","modified":1718016531147},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/utils.py","hash":"5979c6b8353210e327b4689a66207c56a7c8e3d1","modified":1718016531149},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/tags.py","hash":"1a2cecedf2686b5de23beb435957d92894bc990e","modified":1718016531148},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/__pycache__/setupcfg.cpython-310.pyc","hash":"2412118cc030973717eb8192ed59e6a0b0901f1c","modified":1718016533854},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/__pycache__/_apply_pyprojecttoml.cpython-310.pyc","hash":"431630eb961e99ea3ad26aeab65e5a334f42a67d","modified":1718016533691},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/__init__.py","hash":"5b9845ecf2d5f9c958784d8d638d776d03c5be82","modified":1718016531189},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/__pycache__/expand.cpython-310.pyc","hash":"f2a73c76e800a3a2e1180613e7a79ca91083745e","modified":1718016533827},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/error_reporting.py","hash":"5a08b6bcae49de7c133436521eee2c0c3bf1bd15","modified":1718016531190},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/version.py","hash":"161edb467745642554aff7ee33a3eb69ff9e7287","modified":1718016531149},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/__pycache__/pyprojecttoml.cpython-310.pyc","hash":"6204ee92a68ed2978b41b527c01d9ef9dc24c4eb","modified":1718016533842},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/__pycache__/__init__.cpython-310.pyc","hash":"a1b1edc767e0bf32364cda31ae4dd5946fb93176","modified":1718016533676},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/extra_validations.py","hash":"419116b954c21c9d0e8e9e935b065a341568d660","modified":1718016531191},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_exceptions.py","hash":"6da52c7842a74add50946876b62ee3c5d0cc87b5","modified":1718016531192},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/formats.py","hash":"d5c4ae9d0f064a5289b86a16a3ff60934b15b107","modified":1718016531193},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/_compat.py","hash":"8211f8693cfecc48bbe599e3474da20d02d22447","modified":1718016530971},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/__init__.py","hash":"f4e32bdcb8b1c2d2d10a1d3586527393528250c6","modified":1718016530967},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/_adapters.py","hash":"becfb581b4bb6d0fd839fdf102f41f0d3e636e51","modified":1718016530970},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/_common.py","hash":"7e7783dc90e9e02872d0a17deab07a2c7c32f7e7","modified":1718016530970},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/abc.py","hash":"77a76c22e02e936246d6be558caf8f3e912d87c5","modified":1718016530975},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/simple.py","hash":"7c2f790474c65dc51f494c854a4f139079cd2be3","modified":1718016530977},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/_itertools.py","hash":"aeb22c2dfd0f5dbf25a590428ae844440aa61425","modified":1718016530973},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/readers.py","hash":"4eba4ec0fa1ccd5f0835057cb4de9e180916aa53","modified":1718016530975},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/__pycache__/__init__.cpython-310.pyc","hash":"fde3138174ae3d21d1d260747614cd097ba5cfe8","modified":1718016531253},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/jaraco/functools.py","hash":"8bd8c97aef2ce3daedb3a664bd3562d7099fea54","modified":1718016530981},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/more_itertools/__init__.py","hash":"7175cb194f5bb7669c133ff2206c9f886a0bbbc2","modified":1718016530984},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/_legacy.py","hash":"b5527daab8064c5155636f27a1619ef48e8ecccf","modified":1718016530974},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/jaraco/context.py","hash":"6cc9b5550bce50566360a1bf8cc04c06c721306a","modified":1718016530980},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/more_itertools/recipes.py","hash":"290fb11f83663a2e4409aa57a3ef10ff4188eb6b","modified":1718016530988},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/__pycache__/zipp.cpython-310.pyc","hash":"b2ae2a1e4683c84220aa27b32cae5db3eee17d02","modified":1718016531866},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/__pycache__/appdirs.cpython-310.pyc","hash":"c8e6d72952999b28e4ad80d34bc377be3547517d","modified":1718016531268},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/__init__.py","hash":"f2f946deeea358311798beab96b8a1b17058d59c","modified":1718016531003},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/common.py","hash":"de8dd9838210119b7befcd0946e7c9f379339d27","modified":1718016531004},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/extern/__pycache__/__init__.cpython-310.pyc","hash":"3e8037aef2a418c5882aed738737743e4d28df3a","modified":1718016531877},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/actions.py","hash":"67d8608694b23d9b9daadff16a49f39996e815a0","modified":1718016531003},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/exceptions.py","hash":"ab5129523325e6eaf08c54fdcc8bc44cdee58f4d","modified":1718016531007},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/results.py","hash":"271488318042ab293c99cc97053dbc066933d88f","modified":1718016531009},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/util.py","hash":"001eab2eabbf7018d2f36596c5c304ecd51116af","modified":1718016531012},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/testing.py","hash":"d22ccb3a0858fb6d190fe5996345b69826e19755","modified":1718016531010},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/helpers.py","hash":"9836a1212a067ea112bf7d37c6d9ed45992938b5","modified":1718016531008},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__init__.py","hash":"9501323e7783213ab6c7c8e8fd05cd95d7a76ba1","modified":1718016530990},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__about__.py","hash":"65369f014ea304064474d47c719401803c999ed8","modified":1718016530989},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/_musllinux.py","hash":"d446d94e2b0fe0ec6286292877c3926268ecab4a","modified":1718016530992},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/_structures.py","hash":"fe0c3747cf14e696276cb6806c6775503de002b8","modified":1718016530993},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/unicode.py","hash":"28c6a430f63c3c0b96c651b5c1b80655930f9d42","modified":1718016531011},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/_manylinux.py","hash":"0ff6c9ceb0819aef9d68cee59d7942fa0544661f","modified":1718016530991},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/requirements.py","hash":"41e9c9a41abc9fe2f040a246ac45bebbcd4ba5a1","modified":1718016530995},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/markers.py","hash":"60048be6cdf17dcee602644f59862e5bc36a1f87","modified":1718016530995},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/tags.py","hash":"1a2cecedf2686b5de23beb435957d92894bc990e","modified":1718016530999},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/specifiers.py","hash":"04ffe4f1c2e6d8796ae64b8d3ccd1b9791f31445","modified":1718016530998},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/__pycache__/__init__.cpython-310.pyc","hash":"1cfbc19313b2dc3de2c20c9c3bac400afa64b3b0","modified":1718016714947},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/__pycache__/_cmd.cpython-310.pyc","hash":"8df5ae1feb48bbbe83ff1ec81da17417760df3c6","modified":1718016714958},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/__pycache__/adapter.cpython-310.pyc","hash":"ff1e3d10bbeacc6a299160f86f58d0bd841149ae","modified":1718016714968},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/version.py","hash":"161edb467745642554aff7ee33a3eb69ff9e7287","modified":1718016531002},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/utils.py","hash":"5979c6b8353210e327b4689a66207c56a7c8e3d1","modified":1718016531001},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/__pycache__/cache.cpython-310.pyc","hash":"93d1075cfc7167c3181af6166765fcd05aa027df","modified":1718016714983},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py","hash":"9a65cfbe44f8b9c4d63bc4c1b7e48785000831d9","modified":1718016713033},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/__pycache__/filewrapper.cpython-310.pyc","hash":"c78a3e9ff7ff60f444d0108f8297c6140a951cf8","modified":1718016715042},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/__pycache__/serialize.cpython-310.pyc","hash":"6972fe37356680561191666bd6661bfb4853acb4","modified":1718016715068},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/caches/__init__.py","hash":"1e2ecfdebcf43feb2056d6e6aa58d6cd5123c782","modified":1718016713032},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/__pycache__/controller.cpython-310.pyc","hash":"2468af2d6e45a9efbb5d3948b3238adc1cff6cea","modified":1718016715030},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/caches/redis_cache.py","hash":"4049dd3d0f66a44f5ff886d4177dfc9ccb83dc03","modified":1718016713034},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/certifi/__pycache__/__main__.cpython-310.pyc","hash":"ad739453fe7ba80f6db4860d83659f3f3e99b36d","modified":1718016715091},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/__pycache__/wrapper.cpython-310.pyc","hash":"7ef4528855656a1afb1bf75d32905be38715cd28","modified":1718016715080},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/certifi/__pycache__/__init__.cpython-310.pyc","hash":"c25800e7221a2df87af63d8140f5e14bb26d4729","modified":1718016715088},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/__pycache__/heuristics.cpython-310.pyc","hash":"74cbaa6753ad58a8082ae29eb4f3872648220a9f","modified":1718016715056},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/__init__.py","hash":"9e20db9e534400745b7329d70dc87e8833201b18","modified":1718016713080},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/certifi/__pycache__/core.cpython-310.pyc","hash":"7e8b8bd4f7580154e206d35762965a41ebf93818","modified":1718016715103},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/ansi_test.py","hash":"5b77e569947032d68c619ae683452e181b763124","modified":1718016713081},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py","hash":"f12536366df3f26b15685884ce4a071c8ec70bab","modified":1718016713082},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/initialise_test.py","hash":"16afa8a34506b925f9b9eb34540972d23288e6ca","modified":1718016713082},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/__pycache__/ansi.cpython-310.pyc","hash":"6a9399354ee7b0a1b4166a4dd8674cc81eeeb640","modified":1718016715823},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/__pycache__/__init__.cpython-310.pyc","hash":"0e4ff154943d6819c2392e84db964d9a5c6e7d2b","modified":1718016715821},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/isatty_test.py","hash":"f3d9e6e2455a250d9f03f0850238c6311d6df6a1","modified":1718016713083},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/utils.py","hash":"783c1793406edec31d678f9b859d1e789085bf2c","modified":1718016713083},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/winterm_test.py","hash":"93f6f19aa15e24be89645e77dc9b0df9f6a6af4e","modified":1718016713084},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/__init__.cpython-310.pyc","hash":"967830bbd7bba74b600c62a7c9428b033c75d731","modified":1718016715965},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/__pycache__/ansitowin32.cpython-310.pyc","hash":"c55a7ad86f9aa5becd2b1f81c717b6575c9e4923","modified":1718016715837},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/__pycache__/initialise.cpython-310.pyc","hash":"4950832b4b27a135a489bce1fd6a5036bbd3421a","modified":1718016715850},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/compat.cpython-310.pyc","hash":"03e0e5596fd329f5835e32f13ead52001eda7c00","modified":1718016715984},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/__pycache__/winterm.cpython-310.pyc","hash":"5a794cccdd54315f618e57c89a89626c0622bde5","modified":1718016715955},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/index.cpython-310.pyc","hash":"d6f267c411162029723f0767c79c664cc7b5baf9","modified":1718016716015},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/__pycache__/win32.cpython-310.pyc","hash":"c6113b9938ffcd78174346fb39a341c13718b63e","modified":1718016715943},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/database.cpython-310.pyc","hash":"b01172811475a0b0d126c533aaa2d735db2b5f0c","modified":1718016716003},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/locators.cpython-310.pyc","hash":"d4eb0a336e63ebba6619f9d07b2eb729f365442b","modified":1718016716035},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/manifest.cpython-310.pyc","hash":"5301b160793c38e58488d7af18a1aa8e99a57e9b","modified":1718016716047},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/metadata.cpython-310.pyc","hash":"b5ac7928d4a92260e4bdcf6b88afade956ed8af6","modified":1718016716084},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/markers.cpython-310.pyc","hash":"92bde0744836e22d7d274a141b53c4a3852c6e13","modified":1718016716065},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/resources.cpython-310.pyc","hash":"b6e4301a271fc0564f84e952f1cf3f95d3d32116","modified":1718016716096},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/util.cpython-310.pyc","hash":"d3229891b663c0f15db75f8556912df12047f61e","modified":1718016716139},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/scripts.cpython-310.pyc","hash":"4a412ad454134bc29d83ff6f3630cbb61d09161f","modified":1718016716109},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/version.cpython-310.pyc","hash":"3af76962bd87f3ef4bb8f748c2cc23d455c1becc","modified":1718016716157},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/__pycache__/wheel.cpython-310.pyc","hash":"0077e705e877f86f3edc0c3362c9ddf975c84f75","modified":1718016716180},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/cli/chardetect.py","hash":"f513cae1e068585cd906f78626638a0422173c26","modified":1718016713075},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/__init__.cpython-310.pyc","hash":"22414a26c9f241fb9aba45969c46b2662debd9f0","modified":1718016715114},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/big5prober.cpython-310.pyc","hash":"7c433458230d7e37fa83c24e53f39d1a9bff7132","modified":1718016715139},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/chardistribution.cpython-310.pyc","hash":"6f976b44c05190a64449d1b29ed9d74ddd77f801","modified":1718016715152},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/big5freq.cpython-310.pyc","hash":"d5e1dfdf0e4cfa7b63d042d5ad52bb2641be2b2a","modified":1718016715130},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/charsetgroupprober.cpython-310.pyc","hash":"5513378635db7053b13efdd5847939ab22c5ba8c","modified":1718016715164},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/codingstatemachine.cpython-310.pyc","hash":"7636d26c79aecb8e5ee8ac573f2e5d33a9f5a070","modified":1718016715201},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/charsetprober.cpython-310.pyc","hash":"e685425648f58f8a7a48a2b85c9a4886504c3256","modified":1718016715173},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/codingstatemachinedict.cpython-310.pyc","hash":"d6ff5f9b9a49d3a30aa021380cc0300a14c24145","modified":1718016715212},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/cp949prober.cpython-310.pyc","hash":"a20066e8dba1384fde4ba807e36c4b9688112e55","modified":1718016715222},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/enums.cpython-310.pyc","hash":"98465f17372a457d129b297ef43ac7d32c277618","modified":1718016715231},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/escprober.cpython-310.pyc","hash":"8f0bb1796b107fb6253eb9974dfabc22ef94ea9e","modified":1718016715243},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/eucjpprober.cpython-310.pyc","hash":"660952090a958925bc1b8ee4f86c4ad0ba3eead7","modified":1718016715268},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/euctwprober.cpython-310.pyc","hash":"eea6570d30462e8b640178035fdeae077c584773","modified":1718016715327},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/euckrprober.cpython-310.pyc","hash":"053a8b572cda61e691d17b32ce26413f83eb3dd8","modified":1718016715298},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/escsm.cpython-310.pyc","hash":"644c607e92d37cdc7e61a1ffcaf29c8d5887044a","modified":1718016715259},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/gb2312freq.cpython-310.pyc","hash":"669a2081d0e4bcdb7a3f8b4ae12765553e823f93","modified":1718016715345},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/euckrfreq.cpython-310.pyc","hash":"08efab15823f37127240889bf2d2677a7d45d2d3","modified":1718016715288},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/euctwfreq.cpython-310.pyc","hash":"459b07c514d1dc3136d1631c2d12d43bd5ea7b5d","modified":1718016715318},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/hebrewprober.cpython-310.pyc","hash":"6ee49de6efa6fe57a5096542dcca0a97d8db10c8","modified":1718016715370},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/gb2312prober.cpython-310.pyc","hash":"2a9955bf2c0b1493fb7b3ec798a6556b92fc5036","modified":1718016715356},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/jisfreq.cpython-310.pyc","hash":"fc4dd50ec52fcc794198b0f77003bc159c63bf23","modified":1718016715389},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/johabprober.cpython-310.pyc","hash":"1d563602ab39caa61a191aec6a4056faf5f8ca3a","modified":1718016715421},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/langgreekmodel.cpython-310.pyc","hash":"7800d61048ca3c5d5929907061a3e99d6371a20d","modified":1718016715510},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/langbulgarianmodel.cpython-310.pyc","hash":"76bf545a274b2b2b67f2f494e9465e8bdb50dfde","modified":1718016715484},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/jpcntx.cpython-310.pyc","hash":"3ee870ad1dc864ba5644f21c4053ca8e4dd14731","modified":1718016715445},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/langhebrewmodel.cpython-310.pyc","hash":"77b306e26480df1f52a60d9176e3ff81bc59df3d","modified":1718016715544},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/latin1prober.cpython-310.pyc","hash":"cc161233bbd04ff6f8272b0d130120696f1464b5","modified":1718016715664},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/langhungarianmodel.cpython-310.pyc","hash":"bc313c75ff5b8dc8dc8596004def803885122006","modified":1718016715574},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/langthaimodel.cpython-310.pyc","hash":"da10bc6c155c59880d1da61dfdbddab345d950f1","modified":1718016715631},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/macromanprober.cpython-310.pyc","hash":"97bd3d2b7ab357bd8ba87dd7150acea8a90ea1fc","modified":1718016715677},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/mbcsgroupprober.cpython-310.pyc","hash":"1fdf48dbceeeff9579eac55b614678c6a722ef2e","modified":1718016715697},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/langrussianmodel.cpython-310.pyc","hash":"532d464d331604a76c36a73e50387e954712a613","modified":1718016715604},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/langturkishmodel.cpython-310.pyc","hash":"196854252cdc81a778cdf50f235777dc3e5308f9","modified":1718016715653},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/mbcharsetprober.cpython-310.pyc","hash":"fff5c89dd9bf915846ffa656867230cdd0e9843c","modified":1718016715686},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/resultdict.cpython-310.pyc","hash":"fe1becfd9f7287271f8a2f4e71056795036ef148","modified":1718016715737},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/mbcssm.cpython-310.pyc","hash":"e9a8a4ceafed38da7d3867304c5508d5e0a1a4cf","modified":1718016715714},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/sbcharsetprober.cpython-310.pyc","hash":"82c04ff50cb80a812fb467b5a7dde823e929bd5f","modified":1718016715746},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/sbcsgroupprober.cpython-310.pyc","hash":"7e20eabbcbfa7983b1ebe472364f099a53cccea6","modified":1718016715758},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/utf1632prober.cpython-310.pyc","hash":"45d1e1606d0eb8170bebe30dbf08bf9456855f39","modified":1718016715793},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/utf8prober.cpython-310.pyc","hash":"8b272573aecfd57f0efa36ea197f380abae0e56e","modified":1718016715805},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/sjisprober.cpython-310.pyc","hash":"4904610ab70803a6d59a0439814c2cdf9006704d","modified":1718016715770},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/universaldetector.cpython-310.pyc","hash":"7c0a6690b206c39c542be5151f70acb3b8a5190d","modified":1718016715783},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/version.cpython-310.pyc","hash":"06c6e51457414e7745fc9ce86f53d1efae891777","modified":1718016715812},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distro/__pycache__/__main__.cpython-310.pyc","hash":"cea70345aed6f3083b911db5e891da9474441193","modified":1718016716187},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distro/__pycache__/distro.cpython-310.pyc","hash":"0caef61c8c54891fde0898c2e29066a4be874732","modified":1718016716206},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/msgpack/__pycache__/exceptions.cpython-310.pyc","hash":"6330d2f511b4e29ca6631bd6ecc879299c1fcb98","modified":1718016716376},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distro/__pycache__/__init__.cpython-310.pyc","hash":"b3f88f258c82e49502ddfcbe3802003a10290030","modified":1718016716183},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/metadata/languages.py","hash":"a2e83aed7c5536cbaa0d01fa7b5ae29fd3f57b49","modified":1718016713076},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/__pycache__/__init__.cpython-310.pyc","hash":"dff0a7345ad328d055a16a896ed0090eb90b1ec5","modified":1718016716215},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/msgpack/__pycache__/__init__.cpython-310.pyc","hash":"dc51361e15068463159aa4845e5ea3574d0902b8","modified":1718016716372},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/__pycache__/codec.cpython-310.pyc","hash":"ca4b0c1bc7eb45acb609ba1dc12dad0dcb7b2a7b","modified":1718016716219},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/__pycache__/core.cpython-310.pyc","hash":"4ea4257891685334944d7badacc7baac250e1a28","modified":1718016716248},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/msgpack/__pycache__/fallback.cpython-310.pyc","hash":"e1f581f0e1b8f31fc5f4a28c7919508e15e3534c","modified":1718016716404},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/msgpack/__pycache__/ext.cpython-310.pyc","hash":"db8d43b55fd0c84443dfde900b5e6ad6ea4846b4","modified":1718016716388},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/__pycache__/compat.cpython-310.pyc","hash":"f0800be4e7ba0ec514e9b060f467b1e78f9c486d","modified":1718016716231},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/__pycache__/package_data.cpython-310.pyc","hash":"e3b29d8fbb3fa643fa3f0035f225fc1fba6a6ea4","modified":1718016716277},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/__pycache__/__init__.cpython-310.pyc","hash":"05712b9118d1592703ca877406247ffb9305689b","modified":1718016716554},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/__pycache__/intranges.cpython-310.pyc","hash":"82b511b9421712a21063278f79a4368cc95616b8","modified":1718016716271},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/__pycache__/__main__.cpython-310.pyc","hash":"4938f9f6c129ee4b1d249f06333c470a79fe13b4","modified":1718016716562},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/__pycache__/idnadata.cpython-310.pyc","hash":"9ac8784d4aae443d1be7815127b8f7de7b2788c1","modified":1718016716267},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/__pycache__/android.cpython-310.pyc","hash":"6e296a81f7e249b8885c9a365a2b1b353bce671f","modified":1718016716577},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/__pycache__/api.cpython-310.pyc","hash":"04ab9b57eeaba5ef8aae57b0798d865dce7b904f","modified":1718016716593},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/__pycache__/version.cpython-310.pyc","hash":"7b0b212fcdaca764afd7606fc39445854858377b","modified":1718016716626},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/__pycache__/unix.cpython-310.pyc","hash":"1ed9d98c1636ab12edd6cc2c549a396b8727430d","modified":1718016716619},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__pycache__/__about__.cpython-310.pyc","hash":"662d7ac4628d75582179c45e7471cb03b82c0ea9","modified":1718016716406},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/__pycache__/macos.cpython-310.pyc","hash":"2ea25f6f61da4bd868f6541ed650069f31b58e4e","modified":1718016716606},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__pycache__/__init__.cpython-310.pyc","hash":"2fb80440dd9cc9b1cb625941d022f7fb067853c9","modified":1718016716410},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/platformdirs/__pycache__/windows.cpython-310.pyc","hash":"ee971e232671f10be32ee88a2d893e1a3b5aea8d","modified":1718016716640},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__pycache__/_musllinux.cpython-310.pyc","hash":"68bcce37b1e22e3b29c918014ecb2642be31b75f","modified":1718016716424},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__pycache__/_structures.cpython-310.pyc","hash":"a21feedfdc5a5fc9782e3f6d9149d42ba1c440f8","modified":1718016716428},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__pycache__/_manylinux.cpython-310.pyc","hash":"28ab52e272c5b8074ed43670d183fb150033dc15","modified":1718016716420},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__pycache__/markers.cpython-310.pyc","hash":"0775491a4a779c13fe0eae0ac9382e49022e5306","modified":1718016716439},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__pycache__/requirements.cpython-310.pyc","hash":"f11455d5ab6ca142df33d8289807000ccb443d3d","modified":1718016716451},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/__init__.cpython-310.pyc","hash":"30784cc92c010030d8ddebd5bf36d616c5d5c02c","modified":1718016716654},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/console.cpython-310.pyc","hash":"9961db70246861f7872abe3cf76dad9682b74f5e","modified":1718016716686},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__pycache__/specifiers.cpython-310.pyc","hash":"f5496799d0ee657d3ddf34c9423caf88a4c8c561","modified":1718016716465},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__pycache__/tags.cpython-310.pyc","hash":"1e44cdffa185a32202860291138b21262c346fd7","modified":1718016716481},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__pycache__/version.cpython-310.pyc","hash":"09363398727d6e6389068ce5301fb7d4abeef4d9","modified":1718016716508},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/packaging/__pycache__/utils.cpython-310.pyc","hash":"d7ea88b5c37a01c8f8fac3e1d82f59c341870542","modified":1718016716493},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/cmdline.cpython-310.pyc","hash":"b8f1d77085954c3e6818509cd4a82a324f8853d7","modified":1718016716677},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/__main__.cpython-310.pyc","hash":"3d1d7b598128c09803e85f5a536a266f3b0728cc","modified":1718016716663},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/filter.cpython-310.pyc","hash":"d9d33d6206d0b9b9ff12f198eb875aa31b29f9eb","modified":1718016716697},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/plugin.cpython-310.pyc","hash":"68e4c36bef5cfe713454f89319091c46579a6f4e","modified":1718016717017},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/formatter.cpython-310.pyc","hash":"401597791edcb70043555c65706931c2a22d1b80","modified":1718016716723},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/sphinxext.cpython-310.pyc","hash":"4b07ed41786e1207abaa2b5a303f3b850b72191b","modified":1718016717053},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/regexopt.cpython-310.pyc","hash":"aacff9e0eebafd8ef43ba80bfa11d4c8dc73134f","modified":1718016717029},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/lexer.cpython-310.pyc","hash":"23daa1625a090f2c57b872f2cab6e0476846c6f3","modified":1718016716930},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/modeline.cpython-310.pyc","hash":"63c68bf5756a7ca3eed63c7c7fc766a0bc115d02","modified":1718016717008},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/filters/__init__.py","hash":"c166f4460e3da0cea2ffe9f54cbde12801ee53f6","modified":1718016713138},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__init__.py","hash":"15adb89d224ca7e4d293cff1ae2c6b0b29c7c198","modified":1718016713138},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/unistring.cpython-310.pyc","hash":"20602944570b1dc6e08858e9c1cfd803055e548b","modified":1718016717111},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/style.cpython-310.pyc","hash":"f0b08c9ecacb0bf6b74f509c8c9d4c4a4a1dc33a","modified":1718016717063},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/scanner.cpython-310.pyc","hash":"67e376e67dd2bc7fed320e2c9cfc0440d29957ba","modified":1718016717040},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/_mapping.py","hash":"70c2241423f14e151908d1e41ed0f70154f1858b","modified":1718016713139},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/util.cpython-310.pyc","hash":"d990d812423c88569d401c474bd763fbb759a3f0","modified":1718016717127},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/irc.py","hash":"5b8318e11da76ca37c2cb38946024c206a0637da","modified":1718016713142},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/__pycache__/token.cpython-310.pyc","hash":"5fb9b5f261106dd4f5ab2c5a71a490608586f7cf","modified":1718016717085},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/groff.py","hash":"ba7ebff6bef1b782bbac83582552213b1c815e48","modified":1718016713140},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/bbcode.py","hash":"a3d39fe035b11fe1a67bdfb935a8106150d29267","modified":1718016713139},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/other.py","hash":"04c749953f070666bd0a2f22c93b8a95522d9111","modified":1718016713143},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/html.py","hash":"ca4496d1df41b8aa27158c66e63f640ab511d654","modified":1718016713140},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/latex.py","hash":"9c53c6b35022251dc6edda5d00cf905953f789c0","modified":1718016713142},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/rtf.py","hash":"e63a50cbcccf45ce2e9affda76cc00f670d155f8","modified":1718016713144},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/img.py","hash":"d5fba1a1563d08268e0b6b6032f9eaf231bf534b","modified":1718016713141},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/pangomarkup.py","hash":"9956f2778a8b2c934849f005e7e752e22b524fcc","modified":1718016713143},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/lexers/__init__.py","hash":"c976a3ebedff96fe93cc3edbfd805250a73ba77c","modified":1718016713147},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/terminal256.py","hash":"9758ca0d25790d178fe0b9cfc3f8ca012d46841e","modified":1718016713145},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/__pycache__/__init__.cpython-310.pyc","hash":"66c2de0695456aa5cff3f8d514f3aea434ae96bf","modified":1718016717323},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/__pycache__/_compat.cpython-310.pyc","hash":"56129768a4ec002fe9998cc8f9a027a567ef6780","modified":1718016717330},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/_in_process/__init__.py","hash":"d594eace41476837a85468e99af3a31514cfa7c4","modified":1718016713159},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/terminal.py","hash":"ab7a1b9467adf12a34d845776267a048d375abab","modified":1718016713145},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py","hash":"b188aae41334ab7ded5aa1c9c992779fea0127eb","modified":1718016713160},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/__pycache__/_impl.cpython-310.pyc","hash":"abda7c8c2be45241139104df6080ef413b302152","modified":1718016717343},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/__pycache__/actions.cpython-310.pyc","hash":"c3153812541fa68122cc3a0e68e62dec6ee13131","modified":1718016717153},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/diagram/__init__.py","hash":"6e1a3c885fbc3d5dec270791ab81c64d9660ec8b","modified":1718016713157},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/lexers/python.py","hash":"8cac7e5d493ed6185eec6c8b1628109f888f28c1","modified":1718016713148},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/styles/__init__.py","hash":"76a719fb4c7ef7b5c52edf2f31a33824cb21b803","modified":1718016713149},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/__pycache__/__init__.cpython-310.pyc","hash":"c2b2564c6e38c11b79a2b697168665363ad3581c","modified":1718016717141},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/__pycache__/helpers.cpython-310.pyc","hash":"59f35fd4c6279d5c2474f9fdb4433c1253b6c1bf","modified":1718016717255},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/__pycache__/common.cpython-310.pyc","hash":"77cdce6f7a30c1976c5125d5f8a3bfb4e5760c96","modified":1718016717166},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/svg.py","hash":"0fb3ac6ef25f83db9877b5bb296c16149f01bc5f","modified":1718016713145},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/__pycache__/unicode.cpython-310.pyc","hash":"36275e8ee6295fbc98baa62c6996fae8e15c36d9","modified":1718016717300},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/__pycache__/results.cpython-310.pyc","hash":"e99f95a2eb4aeabae88a5fd0857062234f985952","modified":1718016717269},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/__pycache__/testing.cpython-310.pyc","hash":"8177441f34788ba70e3c4003a7918f03d37955bc","modified":1718016717284},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/__pycache__/__init__.cpython-310.pyc","hash":"a8bf60ac6fded840054134efbfc329951e028dd4","modified":1718016717616},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/__pycache__/util.cpython-310.pyc","hash":"68a256d68022b195484e83f45fb642f58940ada5","modified":1718016717312},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/__pycache__/providers.cpython-310.pyc","hash":"be879f98d090619d7d1b1aea2f64cf17170ce4b5","modified":1718016717643},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/compat/collections_abc.py","hash":"707dc63c9b0961b36cc1127216af38de6b1b31e7","modified":1718016713175},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/__version__.cpython-310.pyc","hash":"6c616aeac64a6fa4642da8a015e42557fbc2061b","modified":1718016717400},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/__pycache__/reporters.cpython-310.pyc","hash":"529edb0732592a3b3857af30b605b60cb7e2bbb4","modified":1718016717659},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/__init__.cpython-310.pyc","hash":"5c2fb92b743cb9c9e4230bc33ea261c4ae769b0b","modified":1718016717390},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/__pycache__/structs.cpython-310.pyc","hash":"0f5514d0108d7f9e19f937a60fda986203c3c5d8","modified":1718016717694},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/__pycache__/resolvers.cpython-310.pyc","hash":"c27c262bbf3d65fcbfd81b014d96c585e1a557e6","modified":1718016717681},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/_internal_utils.cpython-310.pyc","hash":"2c1d0739dda40d7621d49fb28e572afcb36e8760","modified":1718016717411},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/adapters.cpython-310.pyc","hash":"875eef7dd7faef35bdaeee7096eb4a4adcaabc25","modified":1718016717426},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/__pycache__/exceptions.cpython-310.pyc","hash":"e7b1121efe336a3b02b356d219f27b04791c6997","modified":1718016717236},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/api.cpython-310.pyc","hash":"a2f069b535c4eb84d49bbc169421d012f2bc10f9","modified":1718016717441},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/auth.cpython-310.pyc","hash":"89de706a7c514de76c142755ed4b393f73aff0d7","modified":1718016717456},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/certs.cpython-310.pyc","hash":"e6f0a60cd995a9779d336ed77e0c24ff2f16ecf8","modified":1718016717467},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/hooks.cpython-310.pyc","hash":"466c9c83f09e138f5edaf09bbe2029a3f48020c1","modified":1718016717522},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/compat.cpython-310.pyc","hash":"fc93f4f50147f1dab5a164b2491d03bde8e91f35","modified":1718016717480},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/cookies.cpython-310.pyc","hash":"2f645f69c67e495fb51300fa46f28a393bcd2706","modified":1718016717495},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/packages.cpython-310.pyc","hash":"97ea1166e437c911629bebb3bda321748ebe5de4","modified":1718016717551},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/help.cpython-310.pyc","hash":"9941ae1c5208c98ac9820a784c2c166e529201f4","modified":1718016717517},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/models.cpython-310.pyc","hash":"09c09d96c657832f86e05c3fefe3512125922104","modified":1718016717547},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/__pycache__/__init__.cpython-310.pyc","hash":"d59836b23a217583262892fdddf4de201c0c1a7b","modified":1718016718736},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/exceptions.cpython-310.pyc","hash":"43bbb5ede1b1ae5a53373a83545e3aebc551bb42","modified":1718016717513},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/__pycache__/_api.cpython-310.pyc","hash":"8b0d5c961e3ad87e1b340b0810bb308247e81b2c","modified":1718016718751},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/status_codes.cpython-310.pyc","hash":"e9395a3c3e8b32aacd14254169ed2bce95bdd48a","modified":1718016717574},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/utils.cpython-310.pyc","hash":"3ff79af8c6dcb12c9ae0019b4bbd2cbe313de342","modified":1718016717603},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/__pycache__/_macos.cpython-310.pyc","hash":"386631699c69a0093df54dc0cf2d084cea140bf5","modified":1718016718764},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/structures.cpython-310.pyc","hash":"140ebb2d5888c3fd87a29a002c156eee64cf5b71","modified":1718016717579},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/__pycache__/_openssl.cpython-310.pyc","hash":"1b51223de201c56d5faa86cfe6ff88c8eededc15","modified":1718016718774},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__pycache__/__init__.cpython-310.pyc","hash":"0469c166f4e5efcfb9049ed35f8d828fe72b89b8","modified":1718016718579},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/__pycache__/_windows.cpython-310.pyc","hash":"533d39b79c9b064c0d3c016fda5ee855077930af","modified":1718016718797},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__pycache__/_asyncio.cpython-310.pyc","hash":"6bdc66fd124a0b72b2a80badfb638aa743d3eb02","modified":1718016718589},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__pycache__/after.cpython-310.pyc","hash":"bf77095284f09c4aa629750afc47c7fc0872d817","modified":1718016718613},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__pycache__/_utils.cpython-310.pyc","hash":"845ee308e39c783630aa11f0dc4c0195e6bb5206","modified":1718016718603},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/truststore/__pycache__/_ssl_constants.cpython-310.pyc","hash":"eed9ec977d949b70aa0b3bb324e1371679a59b5e","modified":1718016718786},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__pycache__/nap.cpython-310.pyc","hash":"722e7baafacc4ef42ad89b8af639029a2a0504e6","modified":1718016718637},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/requests/__pycache__/sessions.cpython-310.pyc","hash":"4f336b722ac4fc77aea1510340e6c7fa1c408cb9","modified":1718016717570},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__pycache__/before_sleep.cpython-310.pyc","hash":"d5e99b9082da51d8c5adce339d60bcbf5fa9b0c9","modified":1718016718634},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__pycache__/stop.cpython-310.pyc","hash":"9ae192b2f025c02419fcbc143ff72a0082ba58d8","modified":1718016718665},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__pycache__/retry.cpython-310.pyc","hash":"55c83fe9645dddcf05827db7306bbe32a2a39a23","modified":1718016718653},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__pycache__/before.cpython-310.pyc","hash":"4ae2880afe85d78b45572964fc73bf1249830e46","modified":1718016718622},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tomli/__pycache__/_re.cpython-310.pyc","hash":"ae935643884089752c05cee9487f1ab4ab99b2fb","modified":1718016718719},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tomli/__pycache__/_types.cpython-310.pyc","hash":"83af14da3efbb9aaeb5b322a46453f6075acc2eb","modified":1718016718728},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__pycache__/wait.cpython-310.pyc","hash":"073a6d5577bb2f6bee3ee833d4b198ae7dcee773","modified":1718016718687},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tomli/__pycache__/__init__.cpython-310.pyc","hash":"2d11e4425bcf121ac90e2e0973561a2b0cfee24f","modified":1718016718691},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_cell_widths.cpython-310.pyc","hash":"ad006858c2ea467f24b7a532036eed622b84527f","modified":1718016717752},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tenacity/__pycache__/tornadoweb.cpython-310.pyc","hash":"c4ddc132961fb9004c2888c836fab8de6b53b61e","modified":1718016718677},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/tomli/__pycache__/_parser.cpython-310.pyc","hash":"1fafbc3a6ede1043926556c071564bc65140ee8a","modified":1718016718709},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/__main__.cpython-310.pyc","hash":"50eb33ca68d54be4e68527a094c392d065f72dd5","modified":1718016717730},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/__init__.cpython-310.pyc","hash":"88695b72844df81e0ec8121e65ed7c1b99363ab0","modified":1718016717710},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_extension.cpython-310.pyc","hash":"589f2bdd1f43f87c6b1127ea038793da6aefa3bb","modified":1718016717819},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_emoji_replace.cpython-310.pyc","hash":"e6a4ad76b810efb4236bedf31019ccdecbfe760e","modified":1718016717798},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_export_format.cpython-310.pyc","hash":"fc9f175e29b4ef946933225288789055f7db8334","modified":1718016717815},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_inspect.cpython-310.pyc","hash":"354bf9d43528046e28e62cdca278e7d77b34c78f","modified":1718016717843},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_fileno.cpython-310.pyc","hash":"546fc7c205fb623f0faef47436d2673dc2accb9f","modified":1718016717826},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_log_render.cpython-310.pyc","hash":"841e03c96b264519c0065afa184552957e8f5e11","modified":1718016717848},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_ratio.cpython-310.pyc","hash":"a1ce7b28de7127ec5646c84fb4d214a3d6d532fd","modified":1718016717896},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_loop.cpython-310.pyc","hash":"2cfc92915a84f89a0dcbee87ef24d318715e66d9","modified":1718016717853},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_null_file.cpython-310.pyc","hash":"ee327e4661cb5dd4ca911dcfdfca78283719f514","modified":1718016717861},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_palettes.cpython-310.pyc","hash":"05ee83a539259ed29eeb7ae7060726791f63bdb0","modified":1718016717874},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_pick.cpython-310.pyc","hash":"644395e375d13f974f8cdc4433109963558042d3","modified":1718016717883},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_stack.cpython-310.pyc","hash":"f64023587db04710fd655fb8ea1968c057601a0a","modified":1718016717924},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_timer.cpython-310.pyc","hash":"bf14bac5cd54ca3a51a4f3aa33ab7fba3bc3f949","modified":1718016717927},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_spinners.cpython-310.pyc","hash":"bebc7d2791b6ebc3fb407b94ba86cb9ce2a854a5","modified":1718016717920},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_win32_console.cpython-310.pyc","hash":"0b9b359b2eea55a93c9b4e350db5b15ce3944a5e","modified":1718016717943},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_windows_renderer.cpython-310.pyc","hash":"b29dfabbaa111b124191cfd0386b94d34d27c1ef","modified":1718016717960},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/abc.cpython-310.pyc","hash":"f464c7a17a9f508c9af2d6ae5f1d682f1c13d4f0","modified":1718016717967},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_wrap.cpython-310.pyc","hash":"918e3c7593f129e124455779b5af9d01b00ba82a","modified":1718016717964},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_windows.cpython-310.pyc","hash":"d5be59363cc8fb44c8d3edf49492ddda8853dba4","modified":1718016717957},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/align.cpython-310.pyc","hash":"cc543f892042ca75b5fe6f535b85de112ffc222b","modified":1718016717987},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/color.cpython-310.pyc","hash":"4ff4b4f5f1af4d2f185d0df65289b0fc7c36c2b4","modified":1718016718060},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/ansi.cpython-310.pyc","hash":"4094ec137f470a1a7f08baaafd1a833c88a6986a","modified":1718016718004},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/bar.cpython-310.pyc","hash":"ca1c8d15e3d800070753f0c175fec5ba7402274c","modified":1718016718020},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/box.cpython-310.pyc","hash":"1eb6ea064ebfdea4e630d4d6a978169efcf90eec","modified":1718016718034},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/cells.cpython-310.pyc","hash":"c25b48360fa9540642b231bbe67f7bdc6dcda8f0","modified":1718016718046},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/containers.cpython-310.pyc","hash":"5f4a7f1725e0308c823eeb306ae989ae2afe58c7","modified":1718016718106},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/constrain.cpython-310.pyc","hash":"35ff8b00da8b2c7422c978e30e5e70757ee3b671","modified":1718016718102},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/columns.cpython-310.pyc","hash":"ea69fdebb9954ceb5036a8946e76597d3a46b91a","modified":1718016718070},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/color_triplet.cpython-310.pyc","hash":"edadf011a727b91315044f8123a7dcb81d52be10","modified":1718016718065},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/control.cpython-310.pyc","hash":"b8856db0ee50c2d9186af90f68e4745a2bebbb56","modified":1718016718111},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/diagnose.cpython-310.pyc","hash":"3f246f2c09b8f461550af97d0d2a262f1531b2af","modified":1718016718126},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/default_styles.cpython-310.pyc","hash":"4dd0c4b5aec75e1aa65a08ec1f239cb1472c97c4","modified":1718016718123},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/file_proxy.cpython-310.pyc","hash":"4661e8185b21641fd5b54c451fdcf62838ae12ba","modified":1718016718146},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/errors.cpython-310.pyc","hash":"c8711c64c42190132d254b69001304a2fe19ea15","modified":1718016718134},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/emoji.cpython-310.pyc","hash":"1266f7d67b891103d88db2369bf264cb42995001","modified":1718016718130},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/highlighter.cpython-310.pyc","hash":"1131f3883d5e725e63dd413eb61e48b6f5a141ae","modified":1718016718167},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/layout.cpython-310.pyc","hash":"eec4ed41f97065fe2cc3e757d5405ed6d8a8c377","modified":1718016718203},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/json.cpython-310.pyc","hash":"1d2652be21129945a729b239cc4a536345d36038","modified":1718016718180},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/filesize.cpython-310.pyc","hash":"e45b16ef1c9c7806037d556ca119723c0d6bc869","modified":1718016718155},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/jupyter.cpython-310.pyc","hash":"1f4d0f44c1ae661feb3ae15a3c906b196d4c14fa","modified":1718016718191},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/live_render.cpython-310.pyc","hash":"94cb2596bec3fe14247cf0be4bc5ae01f7931765","modified":1718016718230},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/measure.cpython-310.pyc","hash":"96380cb164bba8283dada5e6e1960c61f8a1b0b4","modified":1718016718261},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/logging.cpython-310.pyc","hash":"6f1423557792f843e301707f81982a8d43e068ab","modified":1718016718244},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/live.cpython-310.pyc","hash":"82f066afc4fd4a9edeb88a9c1875b4b6adfc3968","modified":1718016718215},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/padding.cpython-310.pyc","hash":"8fe82e85292a1fdec510ac2bdec047eb23e00115","modified":1718016718265},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/panel.cpython-310.pyc","hash":"e586d21bf345e8a14f742dfc076c76d0aa4dac69","modified":1718016718301},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/pager.cpython-310.pyc","hash":"9a359269c0b9337cfec3f36d48b0e06c50f0e171","modified":1718016718279},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/markup.cpython-310.pyc","hash":"dfbe2cd4bab0da164bd655aa1250f75aef0df716","modified":1718016718258},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/palette.cpython-310.pyc","hash":"7ed8958efdde2224b05294d799edb9918cecb278","modified":1718016718289},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/progress.cpython-310.pyc","hash":"cbc297843235a2541891ee78e1b772f7bd9f793f","modified":1718016718335},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/region.cpython-310.pyc","hash":"cb18d861f71d9881281e92f18bd6a2ac3abdedb4","modified":1718016718363},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/progress_bar.cpython-310.pyc","hash":"39f8fb664ef9a0f07de2bc7786e5c8078c8cc156","modified":1718016718346},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/protocol.cpython-310.pyc","hash":"2c8cb42c6060be55b90f287fa5e2c5b48fae9fc8","modified":1718016718360},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/prompt.cpython-310.pyc","hash":"408c591a3f317afa62f3604110d1161c656d6d29","modified":1718016718356},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/scope.cpython-310.pyc","hash":"578f40afe468afd645c3067e50f402939c024320","modified":1718016718395},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/pretty.cpython-310.pyc","hash":"adfc0bce8328bad9a7b13d0d9f8f2854d127e439","modified":1718016718316},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/rule.cpython-310.pyc","hash":"764719c6389fbac325aac31d9cffd8d60af67eb4","modified":1718016718384},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/screen.cpython-310.pyc","hash":"560e1022e4e1d038ec60f8579a0f652375a1ed71","modified":1718016718399},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/repr.cpython-310.pyc","hash":"c77ee2043400cd8f0041fb2fe8f22ded3a609a1c","modified":1718016718374},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/segment.cpython-310.pyc","hash":"f375691192d1e12f8de923f41bc8bdecc12ae2ec","modified":1718016718411},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/syntax.cpython-310.pyc","hash":"5c134acc825120e910b4035fa5f765065080801d","modified":1718016718468},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/style.cpython-310.pyc","hash":"083549086e3112df49c761a1b1df85c4e175324f","modified":1718016718443},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/status.cpython-310.pyc","hash":"e00a6ffde1c326f10d0007385749458da9acab80","modified":1718016718424},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/terminal_theme.cpython-310.pyc","hash":"7a04163815c8a1eda36553529014f70b552b1e9e","modified":1718016718487},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/spinner.cpython-310.pyc","hash":"3731e96162b74ce2eaab64e7cec8e06ed3e6ea76","modified":1718016718421},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/theme.cpython-310.pyc","hash":"823ccc0c9c08fc11a6e83b184a107f1b76732324","modified":1718016718515},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/styled.cpython-310.pyc","hash":"febbf033de9f2595be63cdad3a6411033fcd63dc","modified":1718016718454},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/traceback.cpython-310.pyc","hash":"c22f893453d7321f623e9f03a5de76ec92e56517","modified":1718016718537},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/text.cpython-310.pyc","hash":"60795073883f19399df2f6043b267e8f9096161b","modified":1718016718504},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/themes.cpython-310.pyc","hash":"65a903a0bf019c273146bff1047a9e61aef5a26b","modified":1718016718523},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/tree.cpython-310.pyc","hash":"360e1396695eca97ae37f34e76e8c5321bf1727f","modified":1718016718550},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/appengine.py","hash":"7ad51ea2742a5dcb5570a366ca554b60e6f2093e","modified":1718016713243},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/table.cpython-310.pyc","hash":"fa630e2a19143bd4d76728532e99ce4e24598c4b","modified":1718016718484},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/_appengine_environ.py","hash":"c4cccec3d49682ba148aeeb6ebc8c9dc450c6a3c","modified":1718016713243},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/ntlmpool.py","hash":"40648662db6948a234e567d5f162afa5cd75cdb9","modified":1718016713244},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py","hash":"f33c6754f3afeaadb1f1e3a8c1cb4a0d1c4911aa","modified":1718016713245},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/securetransport.py","hash":"03df700c2b18e4ca078335afadb646f1177c7de8","modified":1718016713246},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__pycache__/_version.cpython-310.pyc","hash":"294d78e572131f4a703db060c113f9032825d9c8","modified":1718016718856},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__pycache__/__init__.cpython-310.pyc","hash":"91cd23bf9bf7cce7914a35b765ae0f0e8c778975","modified":1718016718836},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/socks.py","hash":"3bde3fd1dc48479b42833c8f7c68b9f57b120b46","modified":1718016713247},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__pycache__/_collections.cpython-310.pyc","hash":"5a6a1b389f2f24dcab5c3a750d0df08e2d9f8d6f","modified":1718016718850},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__pycache__/exceptions.cpython-310.pyc","hash":"2e56e804e365d03bed2c1536ba6172e2fabf08dd","modified":1718016718998},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__pycache__/connection.cpython-310.pyc","hash":"46a71d522e7d36cc478231ffde87a648bd37ee8e","modified":1718016718871},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__pycache__/connectionpool.cpython-310.pyc","hash":"33fb7beae249cf7a75b4d21e2152c1fc28d85345","modified":1718016718888},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__pycache__/poolmanager.cpython-310.pyc","hash":"3419abdcbb097882341af3c2c7b91b03050153ab","modified":1718016719074},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__pycache__/request.cpython-310.pyc","hash":"1a8e772c6a9c2dd02920049fc9ca75b7f34abd68","modified":1718016719086},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/webencodings/__pycache__/labels.cpython-310.pyc","hash":"f6a5a873b683e33b535705dbb75d2ae58c869d78","modified":1718016719236},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__pycache__/fields.cpython-310.pyc","hash":"fdebc03c1f2c70283c16f8242f2207d2dc4f1182","modified":1718016719014},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__pycache__/response.cpython-310.pyc","hash":"a304ada8bd2b646abe65584b01dcb44d7834d074","modified":1718016719101},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/__pycache__/filepost.cpython-310.pyc","hash":"90072ea49e445da0171a7351e9e6ee16707d24a3","modified":1718016719018},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/__init__.cpython-310.pyc","hash":"7dc3b514649511726e0e5d6f5204e97cfe0b109f","modified":1718016713470},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/webencodings/__pycache__/__init__.cpython-310.pyc","hash":"571cc8d5afbfb3072a90b97abaaec5554e8fe122","modified":1718016719228},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/webencodings/__pycache__/x_user_defined.cpython-310.pyc","hash":"70dde1c0f609eeba0ee56969e0845529b841a0e5","modified":1718016719252},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/webencodings/__pycache__/mklabels.cpython-310.pyc","hash":"659d5a859ec41da56aa6e9332a70fd25f7c782e9","modified":1718016719241},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/packages/six.py","hash":"cc785b461d93a38116b3357589301ba20e9c8452","modified":1718016713250},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/completion.cpython-310.pyc","hash":"90a0c29aa039c01c54578a74bcc39091c88ea596","modified":1718016713504},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/check.cpython-310.pyc","hash":"8663ab274a29f0210c7a56b8945d76e1f3ab15fc","modified":1718016713493},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/webencodings/__pycache__/tests.cpython-310.pyc","hash":"a929942b35e22a409a01cb2f264bf65d6192b43b","modified":1718016719247},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/configuration.cpython-310.pyc","hash":"02b7722ebb252981d665fe3db75e433b6c4d5d32","modified":1718016713515},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/debug.cpython-310.pyc","hash":"3115f2f5dbb25453e97f2dcb6133d92249a5dd9e","modified":1718016713529},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/cache.cpython-310.pyc","hash":"30f63252735d40d218a78319b7ed57d271eab9ba","modified":1718016713483},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/download.cpython-310.pyc","hash":"d1fb07c23566649140263a9b76bce9dcd7248779","modified":1718016713541},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/hash.cpython-310.pyc","hash":"9e0c030b94eb59dfe54379bc981a703e3fbc327b","modified":1718016713554},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/help.cpython-310.pyc","hash":"9205623b8a1de027b8010e27996b7d8e4eca4797","modified":1718016713556},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/index.cpython-310.pyc","hash":"580be7afa6e04876b73f54c00bbfb8604b3f430a","modified":1718016713597},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/inspect.cpython-310.pyc","hash":"c396e4fb98fc9753a767eeb9ccf5621151b6da98","modified":1718016713609},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/freeze.cpython-310.pyc","hash":"4b1ff770f85e2ece6c0d0a644fb51c787713a52b","modified":1718016713552},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__init__.py","hash":"896463bcd6481c029de1ef982b1f532942fa6b02","modified":1718016713252},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/search.cpython-310.pyc","hash":"d43d30845b5321e7c429d6371daee30b4e7f1e19","modified":1718016713637},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/install.cpython-310.pyc","hash":"30a6a83b1bd6bfac69bdfc66bbc8654e10cd3866","modified":1718016713622},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/uninstall.cpython-310.pyc","hash":"32a131ec8a3afa43330350bb632128b13b02b540","modified":1718016713664},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/queue.py","hash":"f768307325c0240b5c595bb79e618d87fe4016cb","modified":1718016713255},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/list.cpython-310.pyc","hash":"321697c92a587387b2875cc8a2e415c6f1a7adc9","modified":1718016713634},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/show.cpython-310.pyc","hash":"1f5b90fd6b21ff19c13f623df055ed0cb2553dfb","modified":1718016713650},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/commands/__pycache__/wheel.cpython-310.pyc","hash":"1e5bfec6aa42051c1b08cb54418912c47c93c32e","modified":1718016713675},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/proxy.py","hash":"86f81687390427c86da97b882dd7ad2b938275d3","modified":1718016713254},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/connection.py","hash":"4211cec45876cd6cb663bf60bb1ce41582d5d098","modified":1718016713253},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/request.py","hash":"db735e5c86ca859b2ad760b5a06e73db6dcd6330","modified":1718016713255},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/response.py","hash":"a3b6dd229aa3b2be1a4148673a7a68d51ea53024","modified":1718016713256},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/retry.py","hash":"0b9e7bfd446e8df15923b8cc02010075b9af8bdb","modified":1718016713256},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/ssl_.py","hash":"93d0641961b01c303cf84e54d8b66633ed410492","modified":1718016713257},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/distributions/__pycache__/__init__.cpython-310.pyc","hash":"79b6747f28dfed05af9cdfd59a80c9e6b506e9f6","modified":1718016713697},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/wait.py","hash":"7944d9bda2e8389c5ceba58a7ad704532a4f6dd2","modified":1718016713259},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/distributions/__pycache__/base.cpython-310.pyc","hash":"6dcacb8dea01c2f2842fa1faa8290d52fadf31e8","modified":1718016713705},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/index/__pycache__/__init__.cpython-310.pyc","hash":"86ead52c38cdf3df1705fbb2e127524c2d97512f","modified":1718016713767},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/ssl_match_hostname.py","hash":"e1f6ab140aa52211a136d25f784a475f47434263","modified":1718016713257},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/url.py","hash":"23d4363bf76691302dc9e216a3e4ad6dee839cdb","modified":1718016713259},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/timeout.py","hash":"d7f1427c1b312b0907973bd6f4c12e1e406c6825","modified":1718016713258},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/distributions/__pycache__/sdist.cpython-310.pyc","hash":"01ae931c8adebd9cceccbf3675ff4cea2220f7bf","modified":1718016713728},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/ssltransport.py","hash":"78d59e903fecd211aa975ae4c8dc01b17c8fad44","modified":1718016713258},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/index/__pycache__/collector.cpython-310.pyc","hash":"0f5e972f92d52a378639cd46f4ea3cd87c03e7e5","modified":1718016713781},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/distributions/__pycache__/installed.cpython-310.pyc","hash":"46ca6303f42d3958ebf3ef3a1de28c446a7473a4","modified":1718016713718},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/distributions/__pycache__/wheel.cpython-310.pyc","hash":"b430ab387ee6d2734d565ea37d9e385bda025314","modified":1718016713738},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/__init__.cpython-310.pyc","hash":"03ba0b8b82cabbe1052ab2b95a3846077ea187db","modified":1718016713334},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/index/__pycache__/package_finder.cpython-310.pyc","hash":"0442f499fd46cc752459224d500ea0fbabb196e7","modified":1718016713798},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/index/__pycache__/sources.cpython-310.pyc","hash":"efcd1692db84e004fe3a07fc6805ee84681185d3","modified":1718016713811},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/base_command.cpython-310.pyc","hash":"8ed3336ba665ed1aca8fbf369324dc9482d6aadd","modified":1718016713359},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/cmdoptions.cpython-310.pyc","hash":"73fb992b26c4c7277f43bfe4c1b0e379b6b8ec38","modified":1718016713385},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/autocompletion.cpython-310.pyc","hash":"9fa95dfb0fa525cad67638f893c8d60c78e59c4a","modified":1718016713345},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/parser.cpython-310.pyc","hash":"61042e533aaee5abb834daead303a40e76bab8a9","modified":1718016713421},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/command_context.cpython-310.pyc","hash":"792cafa63ac8d8eba48bebc792ecb3fa2d54e3a3","modified":1718016713388},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/main.cpython-310.pyc","hash":"ffb18fe1e619b83493ffdcd295d77081bc37e836","modified":1718016713399},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/candidate.cpython-310.pyc","hash":"387306d07949952713b963116a6e96e451b86bd1","modified":1718016713975},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/__init__.cpython-310.pyc","hash":"1e5ab416405880e400c3fe65ae20b1e5e4868a65","modified":1718016713966},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/main_parser.cpython-310.pyc","hash":"6591c6bf892849c24f58617d393be30dda8781be","modified":1718016713409},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/req_command.cpython-310.pyc","hash":"bab2163b9c8bbf86b009e718b9edff7f8f712997","modified":1718016713449},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/status_codes.cpython-310.pyc","hash":"8ba70b78c8162097af3c0ada1b81e38b8c4e206c","modified":1718016713467},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/progress_bars.cpython-310.pyc","hash":"a3ac58e82b6fac30f54effb9c70bc7186b57dade","modified":1718016713433},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/cli/__pycache__/spinners.cpython-310.pyc","hash":"ee3e6fe09e40550fbf7d54945c617b4794cead10","modified":1718016713460},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/format_control.cpython-310.pyc","hash":"f8704e57a47b664ff28f747334efb0b4da8a2d37","modified":1718016713999},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/index.cpython-310.pyc","hash":"d6ee15e7fbb91b5f66a769711b75ca74828b8b8d","modified":1718016714001},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/direct_url.cpython-310.pyc","hash":"821695eb4f2d55899f4f3884392195fba716fb4c","modified":1718016713988},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/installation_report.cpython-310.pyc","hash":"966eca0b81443e96dc985b75c667668ee7cb55e0","modified":1718016714012},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/importlib/__init__.py","hash":"e7447ed9c17db5df5a9200da03c4d0b8812cc185","modified":1718016712957},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/scheme.cpython-310.pyc","hash":"a1731c12a1107e7ca3e87dd373e735863a3eddd6","modified":1718016714029},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/search_scope.cpython-310.pyc","hash":"c3e6030af987b873800abe45503c5db6366f9779","modified":1718016714041},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/link.cpython-310.pyc","hash":"49e539913684dbab5d5e4ca40beff6f10867d272","modified":1718016714027},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/selection_prefs.cpython-310.pyc","hash":"ef26c2aa81037407a3a159fc4b69d307aa4ec1e1","modified":1718016714043},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/importlib/_compat.py","hash":"c14b0c6281f758b43fb481b2e0aefdb447a07e54","modified":1718016712958},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/wheel.cpython-310.pyc","hash":"053681c44f8732328716181de5da0a8b2a58b6a2","modified":1718016714066},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/importlib/_envs.py","hash":"02da419a727d5c6bac5ccfeb9fa2b6ec90929e0c","modified":1718016712959},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/importlib/_dists.py","hash":"fbfc2fc17e02a9c351968789e159c4aad2ac5eb9","modified":1718016712959},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/models/__pycache__/target_python.cpython-310.pyc","hash":"b0ec7731359f4a641ccc785199d355b2f2e0f22c","modified":1718016714055},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/__pycache__/_json.cpython-310.pyc","hash":"cb0ba24398889b7621fedfdbd1615d9f254b9486","modified":1718016713886},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/__pycache__/__init__.cpython-310.pyc","hash":"bf24f2884a13c33402a1c33e5663f5f266c113cb","modified":1718016713876},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/__pycache__/pkg_resources.cpython-310.pyc","hash":"eccf05233ed9c98dae867f1a88bad6c2d452be49","modified":1718016713957},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/locations/__pycache__/__init__.cpython-310.pyc","hash":"fd900086bcd43f4b8d5bcf06e50885912a699c26","modified":1718016713826},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/__pycache__/base.cpython-310.pyc","hash":"365c34c336b380b1d02267e15334359e26befbe4","modified":1718016713900},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/__pycache__/__init__.cpython-310.pyc","hash":"65959360f964bc330173ce5508570df9baf360bb","modified":1718016714154},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/locations/__pycache__/_sysconfig.cpython-310.pyc","hash":"d94a64519421db09e86cf31536025f5a2b39d2c9","modified":1718016713847},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/locations/__pycache__/_distutils.cpython-310.pyc","hash":"12a885cd0993c1d6893f37f7c7646eba83586673","modified":1718016713835},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/__pycache__/freeze.cpython-310.pyc","hash":"951dd7983736ac3133a835608105761ec8de5af2","modified":1718016714254},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/locations/__pycache__/base.cpython-310.pyc","hash":"9e1a7a9c86cd2e041b76b68dbfc610894784ef99","modified":1718016713859},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/build_tracker.py","hash":"ad8a4ab522bb9f567a393cf6d0de5ed1314cbab7","modified":1718016712977},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/__pycache__/prepare.cpython-310.pyc","hash":"afa9478f27179cab6a529da92a394c0788604cf7","modified":1718016714301},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/metadata.py","hash":"c816fd8f874f799a9620d92db505598d21c82ba8","modified":1718016712978},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/__pycache__/check.cpython-310.pyc","hash":"a102d920896121114986bb2639a23037d857c859","modified":1718016714240},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/install/__init__.py","hash":"c72c58e6cd7763f27ac8041d54f6390149afc48e","modified":1718016712982},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/metadata_editable.py","hash":"df9f933316c1dbfe666bfb169c6de0d2884c74e6","modified":1718016712979},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/wheel_legacy.py","hash":"30c3511ebd59dc05391d5239455c12d74e697bc0","modified":1718016712982},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/wheel.py","hash":"dcd764c358f280cc9fdb2e90ab06a9686d3f21ba","modified":1718016712980},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/metadata_legacy.py","hash":"01b6632b02f1fca9880dacf96142556d33f159bb","modified":1718016712980},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/install/wheel.py","hash":"1cc61594079640cf319031bd5fd0f278ed519d1e","modified":1718016712984},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/wheel_editable.py","hash":"1d8e256134a57f9c5fa78bb388b31b61d2d0c3ce","modified":1718016712981},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/__pycache__/__init__.cpython-310.pyc","hash":"9cd874aaf24ceb33ad35d8dde2887b0bdd417f31","modified":1718016714068},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/install/editable_legacy.py","hash":"61a524bda27c4ab0f2bd898903ee87e51d34f59a","modified":1718016712984},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/__pycache__/download.cpython-310.pyc","hash":"387cc268c02f65836318c3d792ce7345337001f2","modified":1718016714107},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/__pycache__/__init__.cpython-310.pyc","hash":"3cf2749643da9424b3eb4eb907f9d508cfdeb3f1","modified":1718016714325},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/__pycache__/auth.cpython-310.pyc","hash":"300aa7d2212878485ee3076c0ff146be1885a5d0","modified":1718016714083},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/__pycache__/lazy_wheel.cpython-310.pyc","hash":"73a5241a92b223e00e7e157134bbab570b74ac3c","modified":1718016714121},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/__pycache__/cache.cpython-310.pyc","hash":"fc817de9a28f91b4671f048cb107483cf516cef5","modified":1718016714095},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/__pycache__/xmlrpc.cpython-310.pyc","hash":"cf77d098c57a2cb3a78c66d53fce5b4f77b62d4b","modified":1718016714153},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/__pycache__/session.cpython-310.pyc","hash":"898035ceee559d8c9c1473b5348a500cdaffc4d0","modified":1718016714136},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/__pycache__/constructors.cpython-310.pyc","hash":"d035c5d7a259b46ed935fbbb870f78703e77d36f","modified":1718016714339},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/network/__pycache__/utils.cpython-310.pyc","hash":"bb7c285cb22c65abac1dee1e25a93bfc4da9e4aa","modified":1718016714140},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/__pycache__/__init__.cpython-310.pyc","hash":"cc541c082db1a3c1fb3fc83564ed267718f7d342","modified":1718016714834},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/__pycache__/req_file.cpython-310.pyc","hash":"fe9984dc0ec113dc8e41f9968f92bc8391e3b59a","modified":1718016714353},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/__pycache__/bazaar.cpython-310.pyc","hash":"bab380802a839a09d7d81dc3a18a04208448eac7","modified":1718016714844},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/__pycache__/req_install.cpython-310.pyc","hash":"d1da209d68bb1d41c7628152ed8bae7c2b52427e","modified":1718016714369},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/__pycache__/req_uninstall.cpython-310.pyc","hash":"b02fa99b9b9367a38dc57e0f0b9c13fb3b4ccebf","modified":1718016714398},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/__pycache__/git.cpython-310.pyc","hash":"918e9000e98f4b0704e5d7681709946fa7248b4c","modified":1718016714865},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/req/__pycache__/req_set.cpython-310.pyc","hash":"46c4288e022e39aea8c1c1ed65f1fa9ac58d57a7","modified":1718016714381},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/_jaraco_text.cpython-310.pyc","hash":"0d8ccd8c0fa42d8e8805a5f6b6362b3115246c71","modified":1718016714567},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/__init__.cpython-310.pyc","hash":"958ed43ce191aa1fe6a0b26a800236c112bf93b9","modified":1718016714555},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/__pycache__/mercurial.cpython-310.pyc","hash":"199e748588a77ef09bf0ae3c3e453cb82c8d1a90","modified":1718016714878},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/__pycache__/versioncontrol.cpython-310.pyc","hash":"e01d321d9217410f6a06806ecc875a6d9b176d56","modified":1718016714909},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/_log.cpython-310.pyc","hash":"c14a704d4d1f6d3fe67b37f134d387630f63acbe","modified":1718016714577},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/datetime.cpython-310.pyc","hash":"a6655b938f0806976bb68ac51f8db748e1a49928","modified":1718016714603},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/appdirs.cpython-310.pyc","hash":"36e016a9f61386a1871eaf23c00215b75878f5c6","modified":1718016714593},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/vcs/__pycache__/subversion.cpython-310.pyc","hash":"c1482f20037ead99f20676d3f64f2d3975cf5376","modified":1718016714895},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/compat.cpython-310.pyc","hash":"26c7e008cfe886b3779420c8e7c1b03985dff430","modified":1718016714597},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/direct_url_helpers.cpython-310.pyc","hash":"e90cc409598231c33d1845d4d4353cb60a93d38e","modified":1718016714632},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/compatibility_tags.cpython-310.pyc","hash":"550803abf51e84d1b63bc8e4a64acf25ae85ef5c","modified":1718016714600},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/egg_link.cpython-310.pyc","hash":"24596a2cf1f1897c7656b3a734b7e67897fbb4da","modified":1718016714642},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/deprecation.cpython-310.pyc","hash":"6797a30c525391d1accdf839d25f086b8813dc04","modified":1718016714616},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/encoding.cpython-310.pyc","hash":"832ff66b11276e6b30b170d39bed927036974fae","modified":1718016714647},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/entrypoints.cpython-310.pyc","hash":"5009c93180d34b0c89fce8efca058b5b1549cd02","modified":1718016714657},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/filesystem.cpython-310.pyc","hash":"222cbf218d6c7727ba3507506c6ebc3fd3ad1185","modified":1718016714675},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/glibc.cpython-310.pyc","hash":"cd0816122837c749f2da6f657ab3f161a849dde0","modified":1718016714687},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/filetypes.cpython-310.pyc","hash":"79a67d94d20c4b1c6cb9386bc2c5a3248304de6c","modified":1718016714679},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/logging.cpython-310.pyc","hash":"cdb7e19eaa224de9d522f1a8fc221e3fabee44e4","modified":1718016714715},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/misc.cpython-310.pyc","hash":"fb3151487bd2b1360870ec8e788acf2cd659f8f9","modified":1718016714733},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/packaging.cpython-310.pyc","hash":"7c9efd2498d22d4599dc58fb4bad09f6c357a51d","modified":1718016714739},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/setuptools_build.cpython-310.pyc","hash":"4b87d0de2238b43f51d619867b9acf1ec7bd002d","modified":1718016714753},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/subprocess.cpython-310.pyc","hash":"05344197234e7f8a9b6f3627100c83ac15aec647","modified":1718016714766},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/models.cpython-310.pyc","hash":"4b02ad7e6f10917b60fca64852846b97ab8324a2","modified":1718016714735},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/temp_dir.cpython-310.pyc","hash":"aecad743c7848139e1b3aa29badb478b83f1ac01","modified":1718016714780},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/urls.cpython-310.pyc","hash":"2baa95d1b3c2f6525913678855c6d3402d14a7c0","modified":1718016714806},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/__pycache__/__init__.cpython-310.pyc","hash":"3c4b221ac0905f1f49edb50854f94234f68f7650","modified":1718016714400},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/wheel.cpython-310.pyc","hash":"9086cdd9f12986d5d3eb73b228adab65b4811f4e","modified":1718016714831},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/unpacking.cpython-310.pyc","hash":"6b5dde4b6f3c473b90d040e5d13d607f25d0b57e","modified":1718016714795},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/virtualenv.cpython-310.pyc","hash":"8eedff2c0c9f0d5aa02452ddeee66203e45abeb4","modified":1718016714818},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/__pycache__/base.cpython-310.pyc","hash":"caad83f6842507233dda9bc9d9e6a63ed68fb754","modified":1718016714407},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/base.py","hash":"15b46dd6a5e1d47d7d12e4f5c7fc7dcc10a468fc","modified":1718016712995},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/utils/__pycache__/hashes.cpython-310.pyc","hash":"a96b163ad5834d3087f9a75f9022fc68584e46c5","modified":1718016714701},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/found_candidates.py","hash":"6e872ad864f5642639e2e2c625c0005269d472bd","modified":1718016712998},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/candidates.py","hash":"2bb311bbd7f8883f2f818863093863106280d462","modified":1718016712996},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/factory.py","hash":"4f32a162518b6317878fac1fb01b8647f715d940","modified":1718016712996},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/requirements.py","hash":"2d0ae87422662f0c8da9367fc8dfc8d3237a1913","modified":1718016713000},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/provider.py","hash":"76c0f41aca7e9f66646b58ec015c160ef21e4a36","modified":1718016712999},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/__init__.cpython-310.pyc","hash":"1f5d4e4ddcbdceec458d4111e4818509259d03a9","modified":1718016532044},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/resolver.py","hash":"1fd155fcfa0a1547f514e35c4013a1c214e64d6d","modified":1718016713000},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/reporter.py","hash":"e297b2b1fe62e181946180f25d71bec8d7f2ef90","modified":1718016712999},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/legacy/resolver.py","hash":"28a0853f100c0b441801b09796ceb2c032ffbc7a","modified":1718016712993},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/bdist.cpython-310.pyc","hash":"214fd33357d472e6387a42e0ad85f93b12176771","modified":1718016532068},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/bdist_dumb.cpython-310.pyc","hash":"37b0ba90dc3d1bc23728640fab636f7561593f34","modified":1718016532082},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/_framework_compat.cpython-310.pyc","hash":"71b8de0bd68f044e6b047dbf4cd9e223ce1ab721","modified":1718016532054},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/bdist_msi.cpython-310.pyc","hash":"3776deb348c3e55f5a74a73b5dc5162bf201e766","modified":1718016532102},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/bdist_rpm.cpython-310.pyc","hash":"ac453fc30655eebe3fa4583cddb37fe78cb9a497","modified":1718016532123},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/bdist_wininst.cpython-310.pyc","hash":"cbcdf3995a59530f55303e555a00184e5830161f","modified":1718016532136},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/build.cpython-310.pyc","hash":"7a219971cf25db84545a559f1c0ab56131398ced","modified":1718016532146},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/build_py.cpython-310.pyc","hash":"7940c9c320c4be00b461e197685c07b24d4b86d6","modified":1718016532188},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/build_clib.cpython-310.pyc","hash":"f1aa9c914ceea6067d1f9ef0999a7ba0d953f0ce","modified":1718016532160},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/build_ext.cpython-310.pyc","hash":"2f3a477127b7d518df0b1b60ed68e6f0e8fad8d9","modified":1718016532175},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/check.cpython-310.pyc","hash":"8986ad9ddbb4ae8dbd45729e0bfeb2fa4a5e9bd5","modified":1718016532210},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/build_scripts.cpython-310.pyc","hash":"9b5a150ec54044ca51ae135150b2ad374bba943d","modified":1718016532201},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/clean.cpython-310.pyc","hash":"cd5ea2097019b7fe08d14f02f6018f5f7a8b406e","modified":1718016532223},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/config.cpython-310.pyc","hash":"259e67f62746878a8c3ef364168c975d4c1b9831","modified":1718016532240},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/install.cpython-310.pyc","hash":"29e3a4d78fabed67d62ef864429a30b07f5b3f6d","modified":1718016532261},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/install_data.cpython-310.pyc","hash":"14d3b5d1164688ac09485f94637e0c57bcf692b0","modified":1718016532271},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/install_egg_info.cpython-310.pyc","hash":"037dbd2a4470783d43c324db462062a14977c10d","modified":1718016532286},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/__pycache__/__init__.cpython-310.pyc","hash":"b8a70bb3368c3cd36419b61f70d6a60305ddfaee","modified":1718016532870},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/install_headers.cpython-310.pyc","hash":"83433ca94279f5eaef4925ad42c470ece440a243","modified":1718016532299},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/install_lib.cpython-310.pyc","hash":"9e46f674cc4c0cf4a9d58bc52a2d27ecbc0fc3f1","modified":1718016532311},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/__pycache__/_adapters.cpython-310.pyc","hash":"66f11f99c41d7df7c1232eff36825c05add9811c","modified":1718016532874},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/install_scripts.cpython-310.pyc","hash":"bd47b85218cb1f74db559b40c3e7cd97ac5baccd","modified":1718016532324},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/py37compat.cpython-310.pyc","hash":"93d81d130ac90c0d726ffa582af0fa3d8b3cd3bf","modified":1718016532334},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/register.cpython-310.pyc","hash":"d22c56c6bfa15110404ec21f6dcce0674e8926ec","modified":1718016532356},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/__pycache__/_common.cpython-310.pyc","hash":"f6e477560bc49f16c7065268f8832f0cf1df068b","modified":1718016532877},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/__pycache__/_itertools.cpython-310.pyc","hash":"1d3af332b318139616c888cfb6cae42cbcb5b53c","modified":1718016532883},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/sdist.cpython-310.pyc","hash":"6b012f1e0fee37efd32c5c4698754134c249ec0e","modified":1718016532370},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/__pycache__/_compat.cpython-310.pyc","hash":"c9fff4c4caf6cba252a2a2c43844683a20faf040","modified":1718016532879},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_distutils/command/__pycache__/upload.cpython-310.pyc","hash":"dff4fbc07c3fdeb58a3bf638514c0cf8772106f4","modified":1718016532386},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/__pycache__/_legacy.cpython-310.pyc","hash":"11f573385587d72352b9c974426529088950998f","modified":1718016532896},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/__pycache__/_adapters.cpython-310.pyc","hash":"14867cb465e0c2eda64fcb780eb6b03a03e6fa76","modified":1718016532799},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/__pycache__/abc.cpython-310.pyc","hash":"4c6b32fee75e25d47e840c2e6f37bfa9bfe37937","modified":1718016532901},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/__pycache__/readers.cpython-310.pyc","hash":"04c7a4e1acf7589ec6f561943ddbfb6f082356d9","modified":1718016532905},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/__pycache__/__init__.cpython-310.pyc","hash":"3ee4e52a81295cdefd0d9616d6be8249fccaae4a","modified":1718016532787},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/__pycache__/_compat.cpython-310.pyc","hash":"6526fdf455dd9a6a633aac80c2d14c16e00409ea","modified":1718016532821},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_resources/__pycache__/simple.cpython-310.pyc","hash":"ee3643463a4966dc677b59270d1b5b9544deda9b","modified":1718016532908},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/__pycache__/_collections.cpython-310.pyc","hash":"022da3188a7c2eb739721f048a87a7fb4c8b8ae7","modified":1718016532807},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/__pycache__/_functools.cpython-310.pyc","hash":"8b02746c72c3b1f077ee92bb72e7a07a6955dcb3","modified":1718016532833},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/__pycache__/_itertools.cpython-310.pyc","hash":"bb7fe32aff8a5d5562c4a7db244dcbb74d6ec0e4","modified":1718016532844},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/jaraco/text/__init__.py","hash":"88ced1b87b0652fbe099cc609e0de706259b6b3e","modified":1718016531142},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/__pycache__/_text.cpython-310.pyc","hash":"9d2d06ad0b8c95718468ae289d7d39e179eec57f","modified":1718016532867},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/importlib_metadata/__pycache__/_meta.cpython-310.pyc","hash":"65b40d8f532f1a5fce84fb5c1c6af1aed5dae4cb","modified":1718016532857},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/diagram/__init__.py","hash":"d394931b7eff3f26e92ec5057cfcb5d80570837f","modified":1718016531161},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/__pycache__/__init__.cpython-310.pyc","hash":"be44c08f3a6b8bf75b430435cbaf3f1e1ef2a69a","modified":1718016533119},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/__pycache__/actions.cpython-310.pyc","hash":"ab564be4393210a7e34dd909ddccaf9a5d099ae9","modified":1718016533122},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/more_itertools/__pycache__/__init__.cpython-310.pyc","hash":"30e6119bff39ec7593adbc85d23e12ef4424ebf8","modified":1718016532951},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/__pycache__/exceptions.cpython-310.pyc","hash":"f0cb095327d670eee0be584a7a15e672ebdc0688","modified":1718016533196},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/__pycache__/common.cpython-310.pyc","hash":"e0c89cc3ce1648168e0f5c3b4e8d97a5651ca45a","modified":1718016533134},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/__pycache__/helpers.cpython-310.pyc","hash":"894f541aced5370ac431ec7e268f6233b74fe6bc","modified":1718016533217},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/jaraco/__pycache__/__init__.cpython-310.pyc","hash":"868155d533c3f17a7d99c3f5ddf80a832b85b346","modified":1718016532910},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/__pycache__/results.cpython-310.pyc","hash":"63e84f2425fc0e80cba08af71c822b787d2c3dd2","modified":1718016533232},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/__pycache__/testing.cpython-310.pyc","hash":"8c5b51fb773732b4205d08cbfdd1f3515469e763","modified":1718016533244},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/jaraco/__pycache__/context.cpython-310.pyc","hash":"dd36fe1e43da2d45a93b648f42018661d22d39ee","modified":1718016532914},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/tomli/__pycache__/__init__.cpython-310.pyc","hash":"e1e7091c6a7e3fb9186e24a1b3df5609227875d4","modified":1718016533268},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/more_itertools/__pycache__/recipes.cpython-310.pyc","hash":"645b57d4c039c12629056094413b4997858db2e9","modified":1718016532990},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/__pycache__/util.cpython-310.pyc","hash":"b1cf645f5fc1907a29ca826ec6d797e6eb16ce81","modified":1718016533260},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/tomli/__pycache__/_types.cpython-310.pyc","hash":"e8c3b0582799dfdd330889fcd524b18ea3814c58","modified":1718016533304},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/__pycache__/unicode.cpython-310.pyc","hash":"8825e1fdaa602710f0c445700217f727b1c00f29","modified":1718016533255},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/tomli/__pycache__/_parser.cpython-310.pyc","hash":"b8c0498ea0c52bf342ca3f84af25aa7dc8164d8d","modified":1718016533285},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/jaraco/__pycache__/functools.cpython-310.pyc","hash":"3ad0acf5709552c8ed3853f621175ac75346b7d0","modified":1718016532928},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__pycache__/__about__.cpython-310.pyc","hash":"94481575964b9a5daec7e72c5d04ce6c91ea6380","modified":1718016533005},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__pycache__/__init__.cpython-310.pyc","hash":"cc4884f020ed42e6d65efb2fc2cdeae058f30e02","modified":1718016533009},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__pycache__/_manylinux.cpython-310.pyc","hash":"0d2fcc496bf7b0ed0cc9bceb125fd3a1046bbd69","modified":1718016533021},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__pycache__/_structures.cpython-310.pyc","hash":"cd1cf802a5b14f0fba667e07c4c040660929af52","modified":1718016533035},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__pycache__/markers.cpython-310.pyc","hash":"8cc1d1375d5939c0178956cb26263420ee029726","modified":1718016533047},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/tomli/__pycache__/_re.cpython-310.pyc","hash":"b400b7985fb36dd0d43b624aa3f97a2fb53dfa76","modified":1718016533296},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__pycache__/_musllinux.cpython-310.pyc","hash":"a6506165c9ab86ade1c71a216cad8a916d2ee051","modified":1718016533026},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__pycache__/tags.cpython-310.pyc","hash":"a877c8a822d230e21a422993760dc4ab728ce0a9","modified":1718016533088},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__pycache__/requirements.cpython-310.pyc","hash":"c8f8d322342138c9fc1098c3cbe46749a5f72059","modified":1718016533059},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/__pycache__/__init__.cpython-310.pyc","hash":"b1f535609e308a981798e371be9e5936e514f007","modified":1718016533705},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__pycache__/specifiers.cpython-310.pyc","hash":"9acc9ca4ba3d3b1c9abf8130e5304da4bfd040f7","modified":1718016533071},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__pycache__/version.cpython-310.pyc","hash":"9da4b607a0e24e372ef4bcb4600bcd639e4b25b1","modified":1718016533105},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/packaging/__pycache__/utils.cpython-310.pyc","hash":"12d0c9a38c63a01d15803b437a6777585f321f60","modified":1718016533092},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/__pycache__/error_reporting.cpython-310.pyc","hash":"bc81a912f242aca807b8b32259570ea9bcf968fc","modified":1718016533718},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/__pycache__/extra_validations.cpython-310.pyc","hash":"2711ec08744fccdf7e2221da261aca298f834c0d","modified":1718016533727},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/jaraco/text/__init__.py","hash":"6566c5f36249b1b48006ab730ca162bc684cab8f","modified":1718016530982},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/__pycache__/fastjsonschema_exceptions.cpython-310.pyc","hash":"f35212edc12e434477e1273ed39b625b5f971ced","modified":1718016533738},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/diagram/__init__.py","hash":"d394931b7eff3f26e92ec5057cfcb5d80570837f","modified":1718016531013},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/more_itertools/__pycache__/__init__.cpython-310.pyc","hash":"e39600d3509a76e9ffd2bba0efd50f56ffb14ba2","modified":1718016531445},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/__pycache__/__init__.cpython-310.pyc","hash":"bd3c0ce600ba4ab5c09805d9d101f8f2b8b85a01","modified":1718016531662},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/more_itertools/__pycache__/recipes.cpython-310.pyc","hash":"f05d6ccadae7e7aa0f1517a93a2acb39049d70da","modified":1718016531497},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/__pycache__/formats.cpython-310.pyc","hash":"0e084195d04fb97cf7ee35f0ecef7ca6d5b34846","modified":1718016533813},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/__pycache__/actions.cpython-310.pyc","hash":"710afb0873f09ca644bb39579f11ebf2b39852e9","modified":1718016531673},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/__pycache__/common.cpython-310.pyc","hash":"6f6325ff9a6612142e1bf0f4aacad6fb4f9ba4b6","modified":1718016531689},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/__pycache__/exceptions.cpython-310.pyc","hash":"16023d0de47a3c9d1fd020d7415c893ead74f48b","modified":1718016531763},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/__pycache__/results.cpython-310.pyc","hash":"64435c85d25b81589c47ff663864b4ca08810fb1","modified":1718016531813},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/__pycache__/__init__.cpython-310.pyc","hash":"fe18fcac4d17cd820a8cb64a9f5ad1cf63b83f16","modified":1718016531285},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/__pycache__/helpers.cpython-310.pyc","hash":"05af965c9362986a4dec5e94f268078a33c8d8ab","modified":1718016531793},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/__pycache__/_adapters.cpython-310.pyc","hash":"ccc045fc715090b52a65c23b2f546004e97f21e8","modified":1718016531295},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/__pycache__/_common.cpython-310.pyc","hash":"9455c8aed0462f8fe44037ac3c5dc736ac33e84a","modified":1718016531314},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/__pycache__/unicode.cpython-310.pyc","hash":"503acc4fb0f1b8d5610230bb3727e00a79c68a47","modified":1718016531839},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/__pycache__/testing.cpython-310.pyc","hash":"e523808e69ebb9664a3b98b587c29522de4d67aa","modified":1718016531827},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/__pycache__/_compat.cpython-310.pyc","hash":"71ca128c5d1efae48c83de14dafae969261e039c","modified":1718016531325},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/__pycache__/util.cpython-310.pyc","hash":"2b8772a2ac4d5eead3e791be273b0b29e9b0a6d4","modified":1718016531852},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/__pycache__/_legacy.cpython-310.pyc","hash":"220f554e13edfe1c9660a70b3c25f26a3d32f936","modified":1718016531354},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__pycache__/__init__.cpython-310.pyc","hash":"48ee2f3be8fbbd7b68f96b65a18409973094ad53","modified":1718016531517},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/__pycache__/_itertools.cpython-310.pyc","hash":"126934ad346c0c3919ba1fb2834c5c07e0a2dc31","modified":1718016531336},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__pycache__/_manylinux.cpython-310.pyc","hash":"ec24cb739576184ba806b2ac6587dca4b99ec8a4","modified":1718016531534},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/__pycache__/readers.cpython-310.pyc","hash":"ba1b43db239d620a9c0c0f4eb72344c8e8a82e1e","modified":1718016531381},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__pycache__/__about__.cpython-310.pyc","hash":"9fde2536b38fa77642ff2ae6c056e12d4b645303","modified":1718016531505},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/__pycache__/abc.cpython-310.pyc","hash":"31146668be48313adec42898477e1c9b6122c9fd","modified":1718016531367},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__pycache__/_musllinux.cpython-310.pyc","hash":"9af0b47213790b77b0ffcf2c38a7a12417e4c837","modified":1718016531546},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/importlib_resources/__pycache__/simple.cpython-310.pyc","hash":"84bb58c86a23ed7713ef672268609e07874208a7","modified":1718016531392},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__pycache__/markers.cpython-310.pyc","hash":"06e79777b1dbb1103323f443cefac3ae4c70d981","modified":1718016531571},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__pycache__/_structures.cpython-310.pyc","hash":"96a9fb5d1e49273cd1a7d4d7efdf9694c4d59eff","modified":1718016531555},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__pycache__/requirements.cpython-310.pyc","hash":"98b83ae5b54e3abd9711dbfd30760c4b0d823f01","modified":1718016531587},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/jaraco/__pycache__/__init__.cpython-310.pyc","hash":"b4623acea0800d94f2fd9ceffe70dd66045afce2","modified":1718016531395},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/jaraco/__pycache__/context.cpython-310.pyc","hash":"f1268b7a6db6f175d09e80a0e9b57c4f4857f54d","modified":1718016531407},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__pycache__/specifiers.cpython-310.pyc","hash":"759d544b4056d99413959dde0ee0d87697f00d45","modified":1718016531603},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/jaraco/__pycache__/functools.cpython-310.pyc","hash":"01dc63b5e7a3db8bdf20318b0b41e71b67003090","modified":1718016531419},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__pycache__/tags.cpython-310.pyc","hash":"17e48b5046cbeae49fc111ce628b475a28497644","modified":1718016531619},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/caches/__pycache__/__init__.cpython-310.pyc","hash":"6021d8f793f6e5ff23821d7b431cdc0132fdfbd8","modified":1718016714993},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__pycache__/utils.cpython-310.pyc","hash":"ff1b39d887c93ca870954df33f843c77a15ef3ba","modified":1718016531631},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/__pycache__/__init__.cpython-310.pyc","hash":"b9f39a43c747b2279615afd95865ca3c5ac60830","modified":1718016715857},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/packaging/__pycache__/version.cpython-310.pyc","hash":"e4195039f6c49d7cc246a012a5369dd530466a55","modified":1718016531649},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/caches/__pycache__/redis_cache.cpython-310.pyc","hash":"d28a3c0136aeedfb9460cd6dba72bf624e454a53","modified":1718016715014},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/cachecontrol/caches/__pycache__/file_cache.cpython-310.pyc","hash":"8e0474cfa566d8fdeedd6f26ae6662fe502a83e8","modified":1718016715006},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/__pycache__/ansitowin32_test.cpython-310.pyc","hash":"608713ea59361d4d86e4f707f267e5cb28169808","modified":1718016715888},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/cli/__pycache__/__init__.cpython-310.pyc","hash":"81e7fbff16fb2371d69b4a3348040ecc20910bc3","modified":1718016715177},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/metadata/__pycache__/__init__.cpython-310.pyc","hash":"f6a3c5e95721700e89cc9b27fbb4b1e003ac28c5","modified":1718016715715},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/__pycache__/initialise_test.cpython-310.pyc","hash":"c9398dc3f2a6cd420afc8482ac0e196ea83d8a8d","modified":1718016715899},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/__pycache__/ansi_test.cpython-310.pyc","hash":"d22975ee1c74dbd3a2ce76c7a57ea12a802c4456","modified":1718016715874},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/__pycache__/isatty_test.cpython-310.pyc","hash":"abcdbee769f877a293a9961e474045dc150039c0","modified":1718016715909},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/__pycache__/utils.cpython-310.pyc","hash":"ff2e92e1bd6ce40ca4d9b3d1fa4bf9bf252abab9","modified":1718016715920},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/colorama/tests/__pycache__/winterm_test.cpython-310.pyc","hash":"b68c88c9c82664a18c7425c2d36b88be700d5ad9","modified":1718016715931},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/metadata/__pycache__/languages.cpython-310.pyc","hash":"f1d6c71763e8742edb171ffee2bc2f8eb161aeba","modified":1718016715729},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/cli/__pycache__/chardetect.cpython-310.pyc","hash":"542218760b380bd960ac804f3e7fa5fe7f994129","modified":1718016715189},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/filters/__pycache__/__init__.cpython-310.pyc","hash":"8a33ca37cab543e001521f6894805add97ca4add","modified":1718016716712},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/__init__.cpython-310.pyc","hash":"e7bd36d68d8f42d235e3982aafe4af920b77650d","modified":1718016716740},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/_mapping.cpython-310.pyc","hash":"706bb1091a04644219b771f144a95d2f5ef5d334","modified":1718016716753},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/html.cpython-310.pyc","hash":"f1fdb314b03cab41edd0f824302c55e8a16502bd","modified":1718016716799},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/groff.cpython-310.pyc","hash":"d18635d7d90abd2c6a9dbe001af420bb2298a950","modified":1718016716779},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/bbcode.cpython-310.pyc","hash":"cb7bf1873d5285c8f1917dd911700717ba285d83","modified":1718016716765},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/img.cpython-310.pyc","hash":"a8d40e76a4053073db101e41e7ea72651270476b","modified":1718016716812},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/latex.cpython-310.pyc","hash":"2d439967b398fba3dfbd09c58e48a935e4fca561","modified":1718016716837},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/_in_process/__pycache__/__init__.cpython-310.pyc","hash":"bc9320130a1ff470757acdb5349e5a9557af0a50","modified":1718016717352},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/irc.cpython-310.pyc","hash":"205b7465385bb4a4709d7f6701d21513c12c7110","modified":1718016716824},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/other.cpython-310.pyc","hash":"d33e7c5e22496aef2767386245f8f22560a04361","modified":1718016716848},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/pangomarkup.cpython-310.pyc","hash":"48eebb252aceb21ddcb19f09747fd4573eb72234","modified":1718016716862},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/rtf.cpython-310.pyc","hash":"c6e75a243b4889ad4a048b1e18721a91fb2ff871","modified":1718016716876},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/terminal.cpython-310.pyc","hash":"de4ed290424d576faf08eae58df03ad976cd3eed","modified":1718016716902},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyproject_hooks/_in_process/__pycache__/_in_process.cpython-310.pyc","hash":"741b4241ea727e2b3b1ce1eac5f6dfa82c052fb0","modified":1718016717371},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/terminal256.cpython-310.pyc","hash":"56715076b44e4f0fd6c37722b20beaa5b6a8fa4f","modified":1718016716914},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/formatters/__pycache__/svg.cpython-310.pyc","hash":"3b4ade5a31cbfc1f3e70f9276a577e891a87ce5f","modified":1718016716889},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/styles/__pycache__/__init__.cpython-310.pyc","hash":"56304f4c1ad2143107acef8fd8f94fb259833e62","modified":1718016717074},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/lexers/__pycache__/__init__.cpython-310.pyc","hash":"92ac8d58ab7537f61dfda6c526c04f41eeb90c62","modified":1718016716944},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/diagram/__pycache__/__init__.cpython-310.pyc","hash":"be10dd46632e4c05de08316aad73515697d4bc25","modified":1718016717220},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/compat/__pycache__/__init__.cpython-310.pyc","hash":"231a00dc72daee9d236e455e1e77da73c37367e4","modified":1718016717620},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/resolvelib/compat/__pycache__/collections_abc.cpython-310.pyc","hash":"23ace19cfd2436c41bcd2e70eb3fd37656d1bc83","modified":1718016717630},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/__pycache__/__init__.cpython-310.pyc","hash":"e68af886d8d4ff61e56510d54a72f58475840e88","modified":1718016718889},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/lexers/__pycache__/_mapping.cpython-310.pyc","hash":"5e8d74c887d5e47b6ea8b8d45cf9099d7352cebc","modified":1718016716974},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/__pycache__/_appengine_environ.cpython-310.pyc","hash":"6126f269a98516e082145405ce4bc0fed1ec4bd7","modified":1718016718893},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/lexers/__pycache__/python.cpython-310.pyc","hash":"fcb0e2c0991f600049ee8cd6e2372fb0e568fde1","modified":1718016716997},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/__pycache__/ntlmpool.cpython-310.pyc","hash":"4d7a104d1e11150f0d0dbe64fe67dbd510716c2c","modified":1718016718947},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/__pycache__/pyopenssl.cpython-310.pyc","hash":"2ae11c47c2307cb74d8f64e965f425b9db752dad","modified":1718016718961},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/__pycache__/appengine.cpython-310.pyc","hash":"c9b165320bde7f871cf2d46cbee160abeef80f0f","modified":1718016718934},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/packages/__pycache__/__init__.cpython-310.pyc","hash":"13ea455b38983115b3d7de3e733a5097ad54d8a2","modified":1718016719019},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/__pycache__/socks.cpython-310.pyc","hash":"b90528100d6f8c8ab113dd8a529cb855a2385398","modified":1718016718987},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/packages/__pycache__/six.cpython-310.pyc","hash":"9465e2ccef273fb4aadc2cce6c41b7846d9b4a99","modified":1718016719059},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/__pycache__/securetransport.cpython-310.pyc","hash":"551ebefd06c04eed84ec1de4371ec6727be51601","modified":1718016718976},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/packages/backports/weakref_finalize.py","hash":"d2ffb6de72f18ebe708d2b80f2c94e5d5e3bf489","modified":1718016713252},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/__init__.cpython-310.pyc","hash":"e8ab8c01196b241ae360980f3e70d746ee56b7f9","modified":1718016719104},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/_securetransport/bindings.py","hash":"5dc00f4748144a2c049d1f67c1ec16c18a66f9a6","modified":1718016713248},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/packages/backports/makefile.py","hash":"df04cdfc410623de6479af9fcb007388cfb9aa9e","modified":1718016713251},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/proxy.cpython-310.pyc","hash":"1d36017de9c5960f8bba19f446814342eec17c12","modified":1718016719130},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py","hash":"3e0a4a85c263a1269f8fd9bf290e7ddfc1806ff0","modified":1718016713249},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/connection.cpython-310.pyc","hash":"a685ae27f61789e18c0c8cfd16dfbb27a947fe43","modified":1718016719115},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/request.cpython-310.pyc","hash":"09247bfca2d62083792237e61b77a895b8844c6e","modified":1718016719147},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/response.cpython-310.pyc","hash":"95d6c74b36be27afea259ecf9353f44ef9b5e135","modified":1718016719149},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/queue.cpython-310.pyc","hash":"99be8ff2766a16c46abf10112d5363936cf1ce5a","modified":1718016719143},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/ssl_.cpython-310.pyc","hash":"f703898b32cf8ee148cc4c5e69a9850ca41cc84f","modified":1718016719176},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/timeout.cpython-310.pyc","hash":"154891c180d3ec180dcb790fcfbd14927ec5a6ee","modified":1718016719197},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/retry.cpython-310.pyc","hash":"35ba37625889d2fded5c2ee14cbe906007db4189","modified":1718016719163},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/url.cpython-310.pyc","hash":"7d0e0dcdd57c3f871f63f5232089c1dcdfd2f807","modified":1718016719210},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/importlib/__pycache__/_compat.cpython-310.pyc","hash":"6040652a5fa62a96f0fb67baca84c596c912a9c8","modified":1718016713920},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/ssl_match_hostname.cpython-310.pyc","hash":"c3c466969aed4c40b1ec3aae04dc348a51de0e2f","modified":1718016719181},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/install/__pycache__/__init__.cpython-310.pyc","hash":"cc3225ddca454ea3784d0b886d4424484d91e399","modified":1718016714258},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/wait.cpython-310.pyc","hash":"76b61e8dc0cb1a0c4864bc168a6a13b33ece7873","modified":1718016719213},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/__pycache__/__init__.cpython-310.pyc","hash":"9deb5c545b3b184d9978b87a1567f9ae7539f0e9","modified":1718016714427},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/util/__pycache__/ssltransport.cpython-310.pyc","hash":"0f96b401ab70073a95385e88ec57210867e96244","modified":1718016719185},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/install/__pycache__/wheel.cpython-310.pyc","hash":"fa822610da4449d7fefb2e1aa395711308577a58","modified":1718016714284},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/importlib/__pycache__/__init__.cpython-310.pyc","hash":"d059830f8d5e22e7c0a80bd88f6ab2913060b8bd","modified":1718016713908},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/importlib/__pycache__/_dists.cpython-310.pyc","hash":"cc72da82d8c568e79bce90ddf6808460a97f9c3f","modified":1718016713933},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/metadata/importlib/__pycache__/_envs.cpython-310.pyc","hash":"af8a6258ef5199c5ce525a597ddd3d6fd70136ce","modified":1718016713947},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/__pycache__/candidates.cpython-310.pyc","hash":"d3d4dcc8afe022d5679acbb904ef0352e2ddb938","modified":1718016714458},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/install/__pycache__/editable_legacy.cpython-310.pyc","hash":"b94c3a64972e1857e6c10da306366aaeb9ad978c","modified":1718016714269},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/__pycache__/base.cpython-310.pyc","hash":"bb20c0c0aca88959c7a8799ce07e5a4ca8ff06f5","modified":1718016714439},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/__pycache__/__init__.cpython-310.pyc","hash":"145a805abaa376e8483d646e487f2cad939d0946","modified":1718016714156},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/__pycache__/factory.cpython-310.pyc","hash":"1e1b9e0eb53f209bd260c9445eb8b3f6bcfef51e","modified":1718016714477},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/__pycache__/provider.cpython-310.pyc","hash":"45cb58cbf58639a925d5467595f016d0d30208dd","modified":1718016714494},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/__pycache__/build_tracker.cpython-310.pyc","hash":"8ddd96971883be3ae46719c2c5e73bc89a51f586","modified":1718016714171},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/__pycache__/requirements.cpython-310.pyc","hash":"fc672a7ff4a4a947d4cd4facd19cd5825e7213e4","modified":1718016714520},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/__pycache__/resolver.cpython-310.pyc","hash":"35d57038327b42ea0051941d8a1994f2183fdf72","modified":1718016714532},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/__pycache__/found_candidates.cpython-310.pyc","hash":"40db5d45a6f31f51c20e7328d3b4abccc4c917cb","modified":1718016714480},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/resolvelib/__pycache__/reporter.cpython-310.pyc","hash":"98a23a1e99e1e2e93cd448a2c60e56faeb4fee3d","modified":1718016714507},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/__pycache__/metadata.cpython-310.pyc","hash":"6461dcf7ea8b7f31ae6e9f5561b6ea5fd52f89e0","modified":1718016714183},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/legacy/__pycache__/__init__.cpython-310.pyc","hash":"17772d136dd9f5f8601619628b14cfe9af532593","modified":1718016714409},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/__pycache__/metadata_legacy.cpython-310.pyc","hash":"a96ff41e6b65fbe457d8e1726ae002f3d79c3d7c","modified":1718016714202},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/resolution/legacy/__pycache__/resolver.cpython-310.pyc","hash":"2538e4a77b4dba32de1ac308636dc7e6f967dea4","modified":1718016714425},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/__pycache__/wheel.cpython-310.pyc","hash":"77cfb3532e4895387b4cec86a6d7019e3861bd74","modified":1718016714214},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/__pycache__/metadata_editable.cpython-310.pyc","hash":"f559e84962330a10863462bf7eac75cf8f2f0dab","modified":1718016714198},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/__pycache__/wheel_legacy.cpython-310.pyc","hash":"eb9eddf34d2608085cd90615e508733b0e33ecde","modified":1718016714227},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/jaraco/text/__pycache__/__init__.cpython-310.pyc","hash":"d3d112394777780f7451f30b0c8db7a8a6fbaa8a","modified":1718016531436},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/diagram/__pycache__/__init__.cpython-310.pyc","hash":"35f14d9b3ed91fb0d0d6ca9bc046e908c0558525","modified":1718016531748},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_internal/operations/build/__pycache__/wheel_editable.cpython-310.pyc","hash":"7d586a45a22aaa8ae81f390cc7fd8efda68f3b1e","modified":1718016714225},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/packages/backports/__pycache__/__init__.cpython-310.pyc","hash":"d913295b1fd7fc5eec32b4143ef6d802cdb4b877","modified":1718016719021},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/packages/backports/__pycache__/weakref_finalize.cpython-310.pyc","hash":"1cd8fdd0ebc66e213c142c365b3d65a351340b3c","modified":1718016719042},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/packages/backports/__pycache__/makefile.cpython-310.pyc","hash":"98fc53ca24729276b14862558c0734fd77848674","modified":1718016719029},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/_securetransport/__pycache__/__init__.cpython-310.pyc","hash":"3b6a3e4ded08f8283a44ca88a94f4c303a0f3deb","modified":1718016718895},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/jaraco/text/__pycache__/__init__.cpython-310.pyc","hash":"e2afee393ad96c0f5289396321721289ab611474","modified":1718016532942},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/diagram/__pycache__/__init__.cpython-310.pyc","hash":"9d109251037d88fff1eb299eafbc2e05c0270c22","modified":1718016533185},{"_id":"source/HTML/hertaa1.gif","hash":"794867671d82b9d2f716cb3eb018f3431fb28ae3","modified":1700831323000},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/_securetransport/__pycache__/bindings.cpython-310.pyc","hash":"2714072fc75d1014e0be85ac495736ad95c991e0","modified":1718016718907},{"_id":"source/HTML/.venv/Scripts/pip.exe","hash":"e2aa453daa6ed7f5a70fb63df01eacc1c8e5e662","modified":1718016719418},{"_id":"source/HTML/.venv/Scripts/pip3.10.exe","hash":"e2aa453daa6ed7f5a70fb63df01eacc1c8e5e662","modified":1718016719422},{"_id":"source/HTML/.venv/Scripts/pip3.exe","hash":"e2aa453daa6ed7f5a70fb63df01eacc1c8e5e662","modified":1718016719420},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/cli-64.exe","hash":"31eee7114eed6b0d2fb77c9f3605057639050786","modified":1718016531029},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/gui-64.exe","hash":"1fd5ff6136fba36e9ee22598ecd250af3180ee53","modified":1718016531044},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/urllib3/contrib/_securetransport/__pycache__/low_level.cpython-310.pyc","hash":"67018479855382288a687698a2cfcf7a484074c5","modified":1718016718920},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/__init__.py","hash":"48a11addaf5b88f9a397eae5f6dda52bbb17cc3f","modified":1718016530961},{"_id":"source/HTML/.venv/Lib/site-packages/pip-24.0.dist-info/RECORD","hash":"bb0b36cce7b6f64c6ed57ed13ce9464ead696545","modified":1718016719576},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/typing_extensions.py","hash":"6b1d9cb5b0c11cb592dd64f6552fe807be6e4abf","modified":1718016713025},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/command/easy_install.py","hash":"9d77e6752f3fb946c71534ca7f1fd451e1f2da20","modified":1718016531174},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/__pycache__/__init__.cpython-310.pyc","hash":"4c02a5064477354aaedbf372b06e92796ae3824e","modified":1718016531251},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/typing_extensions.py","hash":"d29e4c0e1563514d9bccb3cadf361f085ddf22c7","modified":1718016531126},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/__pycache__/typing_extensions.cpython-310.pyc","hash":"d95302dc348feb433a9fb8c94ee4428c7ab1e2e4","modified":1718016718822},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/t64.exe","hash":"0d0c5e3b06f56ad12a77da46ab3fdab81acda628","modified":1718016713096},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/util.py","hash":"0e861b2982491b958f0d576d2c8b33d93164eb26","modified":1718016713097},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/t32.exe","hash":"c6f8034e2e8183d35d3f2b035405294ee01fa273","modified":1718016713093},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/w64.exe","hash":"34d3e30bcbf87581902409bf5f621f48c5fc2b10","modified":1718016713101},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/w32.exe","hash":"3a1e4e67422d9dd54f7e8bba2bb014474d2f6ea0","modified":1718016713098},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/langgreekmodel.py","hash":"4cc952eda440d1a4ba59dc62f814910175819565","modified":1718016713061},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/langrussianmodel.py","hash":"6407b97fd247383d48c520fb1259cadb75bf2204","modified":1718016713063},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/langhebrewmodel.py","hash":"20549a1de13da32d0dc72dcf3303c1e94b376219","modified":1718016713062},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/langhungarianmodel.py","hash":"900682f8726a2cc1f3628c41eb5546e56efb9c62","modified":1718016713062},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/langbulgarianmodel.py","hash":"eeef1bfbe316fa01db8842c0a01875a8e30b03a9","modified":1718016713060},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/langthaimodel.py","hash":"c55fc8a1df9bf4eb03eb664ab28916ee13962aa7","modified":1718016713064},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/langturkishmodel.py","hash":"d9268889827089dd399efe5f7a42e9cd6a540209","modified":1718016713065},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pkg_resources/__init__.py","hash":"1626018903f5a6dfd41fb8d60891a84aa3351ada","modified":1718016713124},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/console.py","hash":"f83d6f2484c96a6d2565284d3f038467ac9374dd","modified":1718016713195},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/__pycache__/typing_extensions.cpython-310.pyc","hash":"6f47ee4ad17d6c30c59de0611049ab7da5c42fe1","modified":1718016533329},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/more_itertools/more.py","hash":"1013c2c5304d4769f71299f1a96360f17fac77d8","modified":1718016531143},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pkg_resources/__pycache__/__init__.cpython-310.pyc","hash":"7cd4a94d90c55b53ec8a5a8a6dd151f82339c070","modified":1718016716539},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pygments/lexers/_mapping.py","hash":"ed7fe41ce6fe8446d6c4ddf9a230cd1cc2861b2c","modified":1718016713147},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/console.cpython-310.pyc","hash":"0f42a02eae3026bbd9c8ac98c0f16557609815de","modified":1718016718100},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/more_itertools/__pycache__/more.cpython-310.pyc","hash":"fb30132865ed3e62988df8d3f26af8ce3cabe1cc","modified":1718016532979},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/__pycache__/fastjsonschema_validations.cpython-310.pyc","hash":"fa86616f0305123b5a40a01dd7f35bc41afde2a8","modified":1718016533799},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/more_itertools/__pycache__/more.cpython-310.pyc","hash":"71f4d6bd3c838018d534fd432cd3a1423d87e546","modified":1718016531482},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/cli-arm64.exe","hash":"69d647baf45dfcab0325565443555e89fe071a23","modified":1718016531031},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/gui-arm64.exe","hash":"26cbb509eb641143871fd3cf204cdb93fa8189ea","modified":1718016531046},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/t64-arm.exe","hash":"c88f99bb82cbbf96992c36b61f6c614a15abc9d6","modified":1718016713094},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/distlib/w64-arm.exe","hash":"e0db21e02eea22f0da5b44745d1dd0184ddc6ebe","modified":1718016713100},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/_emoji_codes.py","hash":"668eaff13635a6a4368e1445d2e1dce7fdca6b7b","modified":1718016713178},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/more_itertools/more.py","hash":"47cd082916434bcb427af9f10c3234cfb8576756","modified":1718016530985},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/chardet/__pycache__/johabfreq.cpython-310.pyc","hash":"19916b90eda00a4801ff5a5d0fe7dca00b88064b","modified":1718016715410},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/__pycache__/uts46data.cpython-310.pyc","hash":"f182170ebdfe3cb7a63cbbf4ff8b57a0f2c6b8d6","modified":1718016716358},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/__pycache__/core.cpython-310.pyc","hash":"bdfb08015af8003e2472df8d0bbd79f9f85a6970","modified":1718016717204},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/__pycache__/core.cpython-310.pyc","hash":"495c417150c98e53e2636c556f2a002b5f2491f6","modified":1718016533171},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/__pycache__/core.cpython-310.pyc","hash":"7843f319c4de85e2aa4150e63e2e16393e6211e2","modified":1718016531733},{"_id":"source/HTML/.venv/Scripts/pythonw.exe","hash":"68e0b37d982d2a26205f1045bd1e423bdd3cd869","modified":1718016528706},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/idna/uts46data.py","hash":"b27c4b60a25b1b443ce9753e9c3bd572ff23cfa5","modified":1718016713111},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/pyparsing/core.py","hash":"5e8ffc7ae9b2be2fa70c726fcd183ed8d9588ce0","modified":1718016713151},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/_vendor/pyparsing/core.py","hash":"1bb41d817eb7b1d5f474cee0755202a1af22d6cf","modified":1718016531154},{"_id":"source/HTML/.venv/Lib/site-packages/pkg_resources/_vendor/pyparsing/core.py","hash":"1bb41d817eb7b1d5f474cee0755202a1af22d6cf","modified":1718016531006},{"_id":"source/HTML/.venv/Scripts/python.exe","hash":"813350ee29dede72ab6c1956ee25f3501462b469","modified":1718016528697},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/certifi/cacert.pem","hash":"9e177f31a3622ad71c3d403422c9a980e563fe32","modified":1718016713038},{"_id":"source/HTML/.venv/Lib/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py","hash":"8de0280b687ab09b29e08b38870437878ea6d17c","modified":1718016531193},{"_id":"source/HTML/.venv/Lib/site-packages/pip/_vendor/rich/__pycache__/_emoji_codes.cpython-310.pyc","hash":"cef60314760901ebe3721b552f553329cb02f3fd","modified":1718016717785},{"_id":"source/img/error1.png","hash":"e7ab57c6f14c13b1b3a7c41a07d123a374377cdd","modified":1717994873871},{"_id":"source/img/first_trial.png","hash":"76040e4b12632857e84c0ca55e798ecd12f58876","modified":1717946086957},{"_id":"public/HTML/index_ver1.html","hash":"373dd7dbd069ab4d948655635a0ddf892de0af8f","modified":1718076169093},{"_id":"public/HTML/autoREG.py","hash":"2b56783f0d621b762cbd56983f7189003b831030","modified":1718076169093},{"_id":"public/HTML/hertaa1.gif","hash":"794867671d82b9d2f716cb3eb018f3431fb28ae3","modified":1718076169093},{"_id":"public/img/error1.png","hash":"e7ab57c6f14c13b1b3a7c41a07d123a374377cdd","modified":1718076169093},{"_id":"public/img/first_trial.png","hash":"76040e4b12632857e84c0ca55e798ecd12f58876","modified":1718076169093}],"Category":[{"name":"python学习","_id":"clx775ny8001jzkuefe4j64k5"}],"Data":[],"Page":[{"_content":"@font-face {font-family: \"iconfont\";\n    src: url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.eot?t=1600502915140'); /* IE9 */\n    src: url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.eot?t=1600502915140#iefix') format('embedded-opentype'), /* IE6-IE8 */\n    url('data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAAuYAAsAAAAAFZwAAAtJAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCFSAqaXJUoATYCJANICyYABCAFhG0HgUIb+BEz0lFOSgLZf3Vgm5o71DuaDUPG3dBvWX408AyX7GRy04cX3mwzVHkl0gxFzVG8+u+2bGjwvufD05m9P392Mgq0YBb1kiidbMVsxRRMe0KaE5SmZ0XVrXmvwKE1y4U27QagQIwIb/eY1jQhSk3Vo9oYbNPC5qFzCnP9naggU3meySx8k6/Qljtv/UyEwtJcAoCOmivKtyOPPt/meimly+WehPATckIOYRvIsL6d+V9zdaJxb6FgH/14KEuV0u7f9N+/G6JHMpckGol4vo/eUEtbI7JQoVQqJSY0bLPpMXFM5DeeBgIQBYtE1mtlI3gskSNocXikD7wnHZtgIng3F3Fl8yZWeOHLduYHgL3Gz5OH+PAAw6tCfFbtcNEgcl3E7aDIY0EnRbBUJwK40gAKiASwV+FHprgAQt5mSpRmOQCEMWEx+IO4FC6lS9sBHdQhndTdrhHXNzffd9vdt7nvdzs8HiBZ9eBwxLUQYVJnQMDzwnSxXIEj3f7BI2RKKmoaWiAdRGRoP6zSgosoEARwKSDw4FJC8AKXFgIDrgAIFFxBEERwhXAozichFRz4bqRCAj+CVLDgvwEEAjffhyCD2w5BCe7bIKjAfT8ENbgfhKABtyMXWiLRaVdEALKAnYDX3oKwyyj3wmAVFuUEpYRAA6wmRUagvywrlRqN7nIPfz8/pUod4BfAs5ys0UuyJGKZ19WYlIEBQTICA4z+swTsm9EfDNo5azJ8GZDvq4Hj5GtJ+wVfOPE0y9VG7HGb+Ph/ndCSeF4HTEsRSUqgZnIQxaEY/tCsUq4YdrIV4mSYj1JtRZEEaEJUgjgOCKVyp3Dp3zIoWJaoJAwM+jBFzC60TG5cTP4CyycjHacYSZnyaY7j6Ej7SYoSRDljmUlsZNopUU0SgKktT4WTBrBVC+bANNiBHYG6CjlvVUdDEwlD9GiRhpJQSOpsYVU4UbROykz2QwH3hyKNA0BOA0H/FCPKjGWH+Cx7tyyVWB53Bv3ul0vLHr+uy7zkyjKfxGEJXHG2fMpGIRSVfIZ5u60b+RXaeb3kS4lfY0iiYYPLumnF2JDbUY2bimGRyDuoVJL57AeteeVuc6Sm3SPjlubyYp5xG7+pm32O4uGkq99yG70yPnrta2972toVJ7uvZ7MguNkFwpQvo2DEB06GOIIBi0QtEbxMuLok8rIiK/CiuTj6qjLbfn1sytG1CVhAovIE1R/nyZQisluGpI5Zf2dTIi4VCepCVUHfIpZgrMjH6PFjRKoawHHATD+7ZVJh/zDvmw4WCEdl93SlFjx8WZOB/iwpfPQvKf+/iLjyVMYWWEHeMOs9uvurzqWxSMyW3dfwPi19qzTo7q57qbupOoqOWPt/e+9ff5zovQhYwAkHu7XXve1kpWErlrI81mYlAg+kCUi3n0oi/ZswDcqBtIEisFtKArHZb5IABYyOqva08a0Nrxozxdve9rA7Oz/tkaPGcaebwjA4smTUjfjLimaK5dZn36CAUe/KieKVMFt5z1Rn0zl9wChXA5WGoyEllOhz+yLNW4oXLBgIT0dfma/JS/RCM3WqTvc42xt4AmX8rLI/ZFYN2M93EeVpRV8Q6Zbcz6me1Ev9feyerej1iY70vYt2IDrS1It/RyZipGUschcwaxoXXrZmmvf3hmdn29ZxLs2+b10q2b0/FkelDz3Id9ZQtO39Jpay5V9nJUx/03TF0O23sECxgitcGFc7/eHm6fqrw/7/xDp7CxSnxTfv53yFh2w+hqv6UsOVl3v0Vw3PxCrFwz2bNqUq88LLYpsjFSs6x8bFXjE4lko30smqxAuDd11UFCz8uoT/SLggKFI3dvtJTuOHgp/4okbZsPOC8IH3DdsFCzsaBx/BkSPbfLW+265cuSxwl8l7dyx96SeE5gnNkPYn7ZDmcW1TfuAOxTbOQUbFDsWD7689sX1qx7wdk7aPvD+yjVnO2M8ulT42fpSsKJW+N34vlYp0DJKR+6hKG6hVsTqVt535QZXgyD3GKH84Y721KG7IFHrE94jq3aG4RbeQ97p+Z2zh38bP784yv7YzgnhMsuk/GnFi28cn9nYgVF0dxfEVFZOT5F1e2HC/ZmDVh8xri17S4cmzH8ZNnetsG9R/bxjubB42jCyN+y2ySWDWii+H/S3qb+XXLHZ/5l1kLGzuHDZ8Zxhp6my03pWHyIJw21BSTg7uahtndh9nlqIgauBg/bIfX8/4JuybOT+9bnvnYOQAKWCW7j7OfVjW++i5xz+9+6ELlQOL4toCMDK6rpvkDVTIMlx51uGbtw4jgcldJb4N6dRU/vjv67vEL/wzXrz24mN7N+0MUI8hZzPHQSYW7bRUpFtsCSLEBJtxl2/jBiSPnyfP++3b379wzR0eX4/SqOhHSfrR5KSHmHWSK/A5Ls4UNybXVkNlmdPjycdbEgd25uaYP32e9eE5ow5TN80nhsIavvLE47T53DpcQPbutMWpM9JiFmzGEAY3Y+dLsZ7QwrUmmLThjBqOq4JTYeGdOqeg+QeS73DWbIuatWx81VAUXdu/cjhpRsXOtqaKpra8ldEYbZto9KKjLcMdM0jh8vbGjMLt82LqAu4qzinNvIcpzyjJNN0Z1ZD2rY3t4bl+O8wnd5G9vcYdEbm7vw019/MzKeU4dWX2ItlbIZrKrIXR07hfUZt7/dn6n8sejngDgbtvWW4zOvlbwinjiR/8v5JcX+wl4Svrw0Yn1dcuXG88wdUq9hh3J9vSD5XoKDkkn6vZR8rDO2MKdmRdu1PdFVkUXjFkuJd8cRivRAt9MesJaS2z1062jji+esA8mTmpMqZrxN12r30tE1ls2rBBecPDwWVBwYe9DwcHlQV3k/mbMb/B/uK1FcsMy4ghsQHz/XKJr0qv9M9qmzNwD/vjj1n3SIyGVKsjOxjZ1rF8zZbOaRVN9OiLLx6Fi1IGPcof0YTyCM365Or4S6W/b1of2hKSpaxNNsvCoTsljQzSem/5lN4wYdBPCUut062evDxlRIRxQgQ3xkXcV24w3Peo+8jlUtLTQ1RX6YVBnRLS24NSieEJS7Iedcqy89FX2+D4zJRPq6KruIR5Mmic5OVpcjWMSsaDJp/oCRj3/t47V7nTeEBP6qcNDYj71Pp2/OYy1v7FF3a4WEKwOjKZU0/ct7LjcVWClT7yCIXLSghWeldh/MpP7EFXDx48agnjj8LseRSA5/VJ6XSIhXQJ84th3sLcpFkoAM9G1kHNLOmnfJSG59uoCaCyYB4FPG+xmfoj8AU6aWHgzzOFqip/o51KSQyUcwJddFBd7dc8RP2ibGe7k2Dt+L63R535Gy/9A276gHy0gRzdqAAPBiJHOsie23qxjwIA67g5COu+ItiFiiUmetTbD1PojLJWGqyDDcpyBoAoLQI8zWTj46YFY2bbSVUwOoCBAkGAgkeEktVGAi9ISAQceOQAEXNQcr0EPRaDgrACgNnYzACBBrcDBio8Aig0oPtlwED7B/Y9+AcHrkLBie/c3vHUY8ZOnpTQqIb5GriS0clZdmK2fKcm9qhuhxHwTRq4BIo099e80UhahYewaEozB05lgFf2POp7gUmlpcpSbzbNssxFeUwrGbZOPFEEmRaxBubWiVlFjNzy5iTw/e9II+ohTRjwnfgbUQHvHhRSeQblGxkzDdiV9sFCo2RcdEDprsQAvHKR9FKlAFP0cS1SMSlfoHwyk/GJXFaSNi8Ma59g9Q0qfsoRRiiqphumZUvH9fxoo4vewYmj4Xj0w2PTiVJ2vPER9TiGfLBi3HB7EY33PaHaoSabyL6LG8+nXURumWQRxwOjPEQ5rB2Ur+OOG/Z67ujIi9eV5h8ET+nb73kZ6CBIzJa2tQUAAA==') format('woff2'),\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.woff?t=1600502915140') format('woff'),\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.ttf?t=1600502915140') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.svg?t=1600502915140#iconfont') format('svg'); /* iOS 4.1- */\n  }\n  \n  .iconfont {\n    font-family: \"iconfont\" !important;\n    font-size: 16px;\n    font-style: normal;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  .icon-luntan:before {\n    content: \"\\e6eb\";\n  }\n  \n  .icon-qingkong:before {\n    content: \"\\e611\";\n  }\n  \n  .icon-zhuangtai:before {\n    content: \"\\e61b\";\n  }\n  \n  .icon-xiazai:before {\n    content: \"\\e667\";\n  }\n  \n  .icon-kong:before {\n    content: \"\\e60d\";\n  }\n  \n  .icon-heart:before {\n    content: \"\\e635\";\n  }\n  \n  .icon-heart-o:before {\n    content: \"\\e61f\";\n  }\n  \n  .icon-fuzhi:before {\n    content: \"\\e607\";\n  }\n  \n  .icon-kuaijiejian:before {\n    content: \"\\e601\";\n  }\n  \n  .icon-jiesuo:before {\n    content: \"\\e61d\";\n  }\n  \n  .icon-diantai:before {\n    content: \"\\e65e\";\n  }\n  \n  .icon-fm:before {\n    content: \"\\e7da\";\n  }\n  \n  .icon-like:before {\n    content: \"\\e8ab\";\n  }\n  \n  .icon-dianying:before {\n    content: \"\\e8ae\";\n  }\n  \n  .icon-shezhi:before {\n    content: \"\\e8b7\";\n  }\n  \n  .icon-home:before {\n    content: \"\\e8b9\";\n  }\n  \n  .icon-sousuo:before {\n    content: \"\\e8ba\";\n  }","source":"HTML/ivest.css","raw":"@font-face {font-family: \"iconfont\";\n    src: url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.eot?t=1600502915140'); /* IE9 */\n    src: url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.eot?t=1600502915140#iefix') format('embedded-opentype'), /* IE6-IE8 */\n    url('data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAAuYAAsAAAAAFZwAAAtJAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCFSAqaXJUoATYCJANICyYABCAFhG0HgUIb+BEz0lFOSgLZf3Vgm5o71DuaDUPG3dBvWX408AyX7GRy04cX3mwzVHkl0gxFzVG8+u+2bGjwvufD05m9P392Mgq0YBb1kiidbMVsxRRMe0KaE5SmZ0XVrXmvwKE1y4U27QagQIwIb/eY1jQhSk3Vo9oYbNPC5qFzCnP9naggU3meySx8k6/Qljtv/UyEwtJcAoCOmivKtyOPPt/meimly+WehPATckIOYRvIsL6d+V9zdaJxb6FgH/14KEuV0u7f9N+/G6JHMpckGol4vo/eUEtbI7JQoVQqJSY0bLPpMXFM5DeeBgIQBYtE1mtlI3gskSNocXikD7wnHZtgIng3F3Fl8yZWeOHLduYHgL3Gz5OH+PAAw6tCfFbtcNEgcl3E7aDIY0EnRbBUJwK40gAKiASwV+FHprgAQt5mSpRmOQCEMWEx+IO4FC6lS9sBHdQhndTdrhHXNzffd9vdt7nvdzs8HiBZ9eBwxLUQYVJnQMDzwnSxXIEj3f7BI2RKKmoaWiAdRGRoP6zSgosoEARwKSDw4FJC8AKXFgIDrgAIFFxBEERwhXAozichFRz4bqRCAj+CVLDgvwEEAjffhyCD2w5BCe7bIKjAfT8ENbgfhKABtyMXWiLRaVdEALKAnYDX3oKwyyj3wmAVFuUEpYRAA6wmRUagvywrlRqN7nIPfz8/pUod4BfAs5ys0UuyJGKZ19WYlIEBQTICA4z+swTsm9EfDNo5azJ8GZDvq4Hj5GtJ+wVfOPE0y9VG7HGb+Ph/ndCSeF4HTEsRSUqgZnIQxaEY/tCsUq4YdrIV4mSYj1JtRZEEaEJUgjgOCKVyp3Dp3zIoWJaoJAwM+jBFzC60TG5cTP4CyycjHacYSZnyaY7j6Ej7SYoSRDljmUlsZNopUU0SgKktT4WTBrBVC+bANNiBHYG6CjlvVUdDEwlD9GiRhpJQSOpsYVU4UbROykz2QwH3hyKNA0BOA0H/FCPKjGWH+Cx7tyyVWB53Bv3ul0vLHr+uy7zkyjKfxGEJXHG2fMpGIRSVfIZ5u60b+RXaeb3kS4lfY0iiYYPLumnF2JDbUY2bimGRyDuoVJL57AeteeVuc6Sm3SPjlubyYp5xG7+pm32O4uGkq99yG70yPnrta2972toVJ7uvZ7MguNkFwpQvo2DEB06GOIIBi0QtEbxMuLok8rIiK/CiuTj6qjLbfn1sytG1CVhAovIE1R/nyZQisluGpI5Zf2dTIi4VCepCVUHfIpZgrMjH6PFjRKoawHHATD+7ZVJh/zDvmw4WCEdl93SlFjx8WZOB/iwpfPQvKf+/iLjyVMYWWEHeMOs9uvurzqWxSMyW3dfwPi19qzTo7q57qbupOoqOWPt/e+9ff5zovQhYwAkHu7XXve1kpWErlrI81mYlAg+kCUi3n0oi/ZswDcqBtIEisFtKArHZb5IABYyOqva08a0Nrxozxdve9rA7Oz/tkaPGcaebwjA4smTUjfjLimaK5dZn36CAUe/KieKVMFt5z1Rn0zl9wChXA5WGoyEllOhz+yLNW4oXLBgIT0dfma/JS/RCM3WqTvc42xt4AmX8rLI/ZFYN2M93EeVpRV8Q6Zbcz6me1Ev9feyerej1iY70vYt2IDrS1It/RyZipGUschcwaxoXXrZmmvf3hmdn29ZxLs2+b10q2b0/FkelDz3Id9ZQtO39Jpay5V9nJUx/03TF0O23sECxgitcGFc7/eHm6fqrw/7/xDp7CxSnxTfv53yFh2w+hqv6UsOVl3v0Vw3PxCrFwz2bNqUq88LLYpsjFSs6x8bFXjE4lko30smqxAuDd11UFCz8uoT/SLggKFI3dvtJTuOHgp/4okbZsPOC8IH3DdsFCzsaBx/BkSPbfLW+265cuSxwl8l7dyx96SeE5gnNkPYn7ZDmcW1TfuAOxTbOQUbFDsWD7689sX1qx7wdk7aPvD+yjVnO2M8ulT42fpSsKJW+N34vlYp0DJKR+6hKG6hVsTqVt535QZXgyD3GKH84Y721KG7IFHrE94jq3aG4RbeQ97p+Z2zh38bP784yv7YzgnhMsuk/GnFi28cn9nYgVF0dxfEVFZOT5F1e2HC/ZmDVh8xri17S4cmzH8ZNnetsG9R/bxjubB42jCyN+y2ySWDWii+H/S3qb+XXLHZ/5l1kLGzuHDZ8Zxhp6my03pWHyIJw21BSTg7uahtndh9nlqIgauBg/bIfX8/4JuybOT+9bnvnYOQAKWCW7j7OfVjW++i5xz+9+6ELlQOL4toCMDK6rpvkDVTIMlx51uGbtw4jgcldJb4N6dRU/vjv67vEL/wzXrz24mN7N+0MUI8hZzPHQSYW7bRUpFtsCSLEBJtxl2/jBiSPnyfP++3b379wzR0eX4/SqOhHSfrR5KSHmHWSK/A5Ls4UNybXVkNlmdPjycdbEgd25uaYP32e9eE5ow5TN80nhsIavvLE47T53DpcQPbutMWpM9JiFmzGEAY3Y+dLsZ7QwrUmmLThjBqOq4JTYeGdOqeg+QeS73DWbIuatWx81VAUXdu/cjhpRsXOtqaKpra8ldEYbZto9KKjLcMdM0jh8vbGjMLt82LqAu4qzinNvIcpzyjJNN0Z1ZD2rY3t4bl+O8wnd5G9vcYdEbm7vw019/MzKeU4dWX2ItlbIZrKrIXR07hfUZt7/dn6n8sejngDgbtvWW4zOvlbwinjiR/8v5JcX+wl4Svrw0Yn1dcuXG88wdUq9hh3J9vSD5XoKDkkn6vZR8rDO2MKdmRdu1PdFVkUXjFkuJd8cRivRAt9MesJaS2z1062jji+esA8mTmpMqZrxN12r30tE1ls2rBBecPDwWVBwYe9DwcHlQV3k/mbMb/B/uK1FcsMy4ghsQHz/XKJr0qv9M9qmzNwD/vjj1n3SIyGVKsjOxjZ1rF8zZbOaRVN9OiLLx6Fi1IGPcof0YTyCM365Or4S6W/b1of2hKSpaxNNsvCoTsljQzSem/5lN4wYdBPCUut062evDxlRIRxQgQ3xkXcV24w3Peo+8jlUtLTQ1RX6YVBnRLS24NSieEJS7Iedcqy89FX2+D4zJRPq6KruIR5Mmic5OVpcjWMSsaDJp/oCRj3/t47V7nTeEBP6qcNDYj71Pp2/OYy1v7FF3a4WEKwOjKZU0/ct7LjcVWClT7yCIXLSghWeldh/MpP7EFXDx48agnjj8LseRSA5/VJ6XSIhXQJ84th3sLcpFkoAM9G1kHNLOmnfJSG59uoCaCyYB4FPG+xmfoj8AU6aWHgzzOFqip/o51KSQyUcwJddFBd7dc8RP2ibGe7k2Dt+L63R535Gy/9A276gHy0gRzdqAAPBiJHOsie23qxjwIA67g5COu+ItiFiiUmetTbD1PojLJWGqyDDcpyBoAoLQI8zWTj46YFY2bbSVUwOoCBAkGAgkeEktVGAi9ISAQceOQAEXNQcr0EPRaDgrACgNnYzACBBrcDBio8Aig0oPtlwED7B/Y9+AcHrkLBie/c3vHUY8ZOnpTQqIb5GriS0clZdmK2fKcm9qhuhxHwTRq4BIo099e80UhahYewaEozB05lgFf2POp7gUmlpcpSbzbNssxFeUwrGbZOPFEEmRaxBubWiVlFjNzy5iTw/e9II+ohTRjwnfgbUQHvHhRSeQblGxkzDdiV9sFCo2RcdEDprsQAvHKR9FKlAFP0cS1SMSlfoHwyk/GJXFaSNi8Ma59g9Q0qfsoRRiiqphumZUvH9fxoo4vewYmj4Xj0w2PTiVJ2vPER9TiGfLBi3HB7EY33PaHaoSabyL6LG8+nXURumWQRxwOjPEQ5rB2Ur+OOG/Z67ujIi9eV5h8ET+nb73kZ6CBIzJa2tQUAAA==') format('woff2'),\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.woff?t=1600502915140') format('woff'),\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.ttf?t=1600502915140') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.svg?t=1600502915140#iconfont') format('svg'); /* iOS 4.1- */\n  }\n  \n  .iconfont {\n    font-family: \"iconfont\" !important;\n    font-size: 16px;\n    font-style: normal;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  .icon-luntan:before {\n    content: \"\\e6eb\";\n  }\n  \n  .icon-qingkong:before {\n    content: \"\\e611\";\n  }\n  \n  .icon-zhuangtai:before {\n    content: \"\\e61b\";\n  }\n  \n  .icon-xiazai:before {\n    content: \"\\e667\";\n  }\n  \n  .icon-kong:before {\n    content: \"\\e60d\";\n  }\n  \n  .icon-heart:before {\n    content: \"\\e635\";\n  }\n  \n  .icon-heart-o:before {\n    content: \"\\e61f\";\n  }\n  \n  .icon-fuzhi:before {\n    content: \"\\e607\";\n  }\n  \n  .icon-kuaijiejian:before {\n    content: \"\\e601\";\n  }\n  \n  .icon-jiesuo:before {\n    content: \"\\e61d\";\n  }\n  \n  .icon-diantai:before {\n    content: \"\\e65e\";\n  }\n  \n  .icon-fm:before {\n    content: \"\\e7da\";\n  }\n  \n  .icon-like:before {\n    content: \"\\e8ab\";\n  }\n  \n  .icon-dianying:before {\n    content: \"\\e8ae\";\n  }\n  \n  .icon-shezhi:before {\n    content: \"\\e8b7\";\n  }\n  \n  .icon-home:before {\n    content: \"\\e8b9\";\n  }\n  \n  .icon-sousuo:before {\n    content: \"\\e8ba\";\n  }","date":"2024-06-09T06:34:57.330Z","updated":"2024-06-09T04:53:03.774Z","path":"HTML/ivest.css","layout":"false","title":"","comments":1,"_id":"clx775nxd0000zkue7kchc7li","content":"@font-face {font-family: \"iconfont\";\n    src: url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.eot?t=1600502915140'); /* IE9 */\n    src: url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.eot?t=1600502915140#iefix') format('embedded-opentype'), /* IE6-IE8 */\n    url('data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAAuYAAsAAAAAFZwAAAtJAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCFSAqaXJUoATYCJANICyYABCAFhG0HgUIb+BEz0lFOSgLZf3Vgm5o71DuaDUPG3dBvWX408AyX7GRy04cX3mwzVHkl0gxFzVG8+u+2bGjwvufD05m9P392Mgq0YBb1kiidbMVsxRRMe0KaE5SmZ0XVrXmvwKE1y4U27QagQIwIb/eY1jQhSk3Vo9oYbNPC5qFzCnP9naggU3meySx8k6/Qljtv/UyEwtJcAoCOmivKtyOPPt/meimly+WehPATckIOYRvIsL6d+V9zdaJxb6FgH/14KEuV0u7f9N+/G6JHMpckGol4vo/eUEtbI7JQoVQqJSY0bLPpMXFM5DeeBgIQBYtE1mtlI3gskSNocXikD7wnHZtgIng3F3Fl8yZWeOHLduYHgL3Gz5OH+PAAw6tCfFbtcNEgcl3E7aDIY0EnRbBUJwK40gAKiASwV+FHprgAQt5mSpRmOQCEMWEx+IO4FC6lS9sBHdQhndTdrhHXNzffd9vdt7nvdzs8HiBZ9eBwxLUQYVJnQMDzwnSxXIEj3f7BI2RKKmoaWiAdRGRoP6zSgosoEARwKSDw4FJC8AKXFgIDrgAIFFxBEERwhXAozichFRz4bqRCAj+CVLDgvwEEAjffhyCD2w5BCe7bIKjAfT8ENbgfhKABtyMXWiLRaVdEALKAnYDX3oKwyyj3wmAVFuUEpYRAA6wmRUagvywrlRqN7nIPfz8/pUod4BfAs5ys0UuyJGKZ19WYlIEBQTICA4z+swTsm9EfDNo5azJ8GZDvq4Hj5GtJ+wVfOPE0y9VG7HGb+Ph/ndCSeF4HTEsRSUqgZnIQxaEY/tCsUq4YdrIV4mSYj1JtRZEEaEJUgjgOCKVyp3Dp3zIoWJaoJAwM+jBFzC60TG5cTP4CyycjHacYSZnyaY7j6Ej7SYoSRDljmUlsZNopUU0SgKktT4WTBrBVC+bANNiBHYG6CjlvVUdDEwlD9GiRhpJQSOpsYVU4UbROykz2QwH3hyKNA0BOA0H/FCPKjGWH+Cx7tyyVWB53Bv3ul0vLHr+uy7zkyjKfxGEJXHG2fMpGIRSVfIZ5u60b+RXaeb3kS4lfY0iiYYPLumnF2JDbUY2bimGRyDuoVJL57AeteeVuc6Sm3SPjlubyYp5xG7+pm32O4uGkq99yG70yPnrta2972toVJ7uvZ7MguNkFwpQvo2DEB06GOIIBi0QtEbxMuLok8rIiK/CiuTj6qjLbfn1sytG1CVhAovIE1R/nyZQisluGpI5Zf2dTIi4VCepCVUHfIpZgrMjH6PFjRKoawHHATD+7ZVJh/zDvmw4WCEdl93SlFjx8WZOB/iwpfPQvKf+/iLjyVMYWWEHeMOs9uvurzqWxSMyW3dfwPi19qzTo7q57qbupOoqOWPt/e+9ff5zovQhYwAkHu7XXve1kpWErlrI81mYlAg+kCUi3n0oi/ZswDcqBtIEisFtKArHZb5IABYyOqva08a0Nrxozxdve9rA7Oz/tkaPGcaebwjA4smTUjfjLimaK5dZn36CAUe/KieKVMFt5z1Rn0zl9wChXA5WGoyEllOhz+yLNW4oXLBgIT0dfma/JS/RCM3WqTvc42xt4AmX8rLI/ZFYN2M93EeVpRV8Q6Zbcz6me1Ev9feyerej1iY70vYt2IDrS1It/RyZipGUschcwaxoXXrZmmvf3hmdn29ZxLs2+b10q2b0/FkelDz3Id9ZQtO39Jpay5V9nJUx/03TF0O23sECxgitcGFc7/eHm6fqrw/7/xDp7CxSnxTfv53yFh2w+hqv6UsOVl3v0Vw3PxCrFwz2bNqUq88LLYpsjFSs6x8bFXjE4lko30smqxAuDd11UFCz8uoT/SLggKFI3dvtJTuOHgp/4okbZsPOC8IH3DdsFCzsaBx/BkSPbfLW+265cuSxwl8l7dyx96SeE5gnNkPYn7ZDmcW1TfuAOxTbOQUbFDsWD7689sX1qx7wdk7aPvD+yjVnO2M8ulT42fpSsKJW+N34vlYp0DJKR+6hKG6hVsTqVt535QZXgyD3GKH84Y721KG7IFHrE94jq3aG4RbeQ97p+Z2zh38bP784yv7YzgnhMsuk/GnFi28cn9nYgVF0dxfEVFZOT5F1e2HC/ZmDVh8xri17S4cmzH8ZNnetsG9R/bxjubB42jCyN+y2ySWDWii+H/S3qb+XXLHZ/5l1kLGzuHDZ8Zxhp6my03pWHyIJw21BSTg7uahtndh9nlqIgauBg/bIfX8/4JuybOT+9bnvnYOQAKWCW7j7OfVjW++i5xz+9+6ELlQOL4toCMDK6rpvkDVTIMlx51uGbtw4jgcldJb4N6dRU/vjv67vEL/wzXrz24mN7N+0MUI8hZzPHQSYW7bRUpFtsCSLEBJtxl2/jBiSPnyfP++3b379wzR0eX4/SqOhHSfrR5KSHmHWSK/A5Ls4UNybXVkNlmdPjycdbEgd25uaYP32e9eE5ow5TN80nhsIavvLE47T53DpcQPbutMWpM9JiFmzGEAY3Y+dLsZ7QwrUmmLThjBqOq4JTYeGdOqeg+QeS73DWbIuatWx81VAUXdu/cjhpRsXOtqaKpra8ldEYbZto9KKjLcMdM0jh8vbGjMLt82LqAu4qzinNvIcpzyjJNN0Z1ZD2rY3t4bl+O8wnd5G9vcYdEbm7vw019/MzKeU4dWX2ItlbIZrKrIXR07hfUZt7/dn6n8sejngDgbtvWW4zOvlbwinjiR/8v5JcX+wl4Svrw0Yn1dcuXG88wdUq9hh3J9vSD5XoKDkkn6vZR8rDO2MKdmRdu1PdFVkUXjFkuJd8cRivRAt9MesJaS2z1062jji+esA8mTmpMqZrxN12r30tE1ls2rBBecPDwWVBwYe9DwcHlQV3k/mbMb/B/uK1FcsMy4ghsQHz/XKJr0qv9M9qmzNwD/vjj1n3SIyGVKsjOxjZ1rF8zZbOaRVN9OiLLx6Fi1IGPcof0YTyCM365Or4S6W/b1of2hKSpaxNNsvCoTsljQzSem/5lN4wYdBPCUut062evDxlRIRxQgQ3xkXcV24w3Peo+8jlUtLTQ1RX6YVBnRLS24NSieEJS7Iedcqy89FX2+D4zJRPq6KruIR5Mmic5OVpcjWMSsaDJp/oCRj3/t47V7nTeEBP6qcNDYj71Pp2/OYy1v7FF3a4WEKwOjKZU0/ct7LjcVWClT7yCIXLSghWeldh/MpP7EFXDx48agnjj8LseRSA5/VJ6XSIhXQJ84th3sLcpFkoAM9G1kHNLOmnfJSG59uoCaCyYB4FPG+xmfoj8AU6aWHgzzOFqip/o51KSQyUcwJddFBd7dc8RP2ibGe7k2Dt+L63R535Gy/9A276gHy0gRzdqAAPBiJHOsie23qxjwIA67g5COu+ItiFiiUmetTbD1PojLJWGqyDDcpyBoAoLQI8zWTj46YFY2bbSVUwOoCBAkGAgkeEktVGAi9ISAQceOQAEXNQcr0EPRaDgrACgNnYzACBBrcDBio8Aig0oPtlwED7B/Y9+AcHrkLBie/c3vHUY8ZOnpTQqIb5GriS0clZdmK2fKcm9qhuhxHwTRq4BIo099e80UhahYewaEozB05lgFf2POp7gUmlpcpSbzbNssxFeUwrGbZOPFEEmRaxBubWiVlFjNzy5iTw/e9II+ohTRjwnfgbUQHvHhRSeQblGxkzDdiV9sFCo2RcdEDprsQAvHKR9FKlAFP0cS1SMSlfoHwyk/GJXFaSNi8Ma59g9Q0qfsoRRiiqphumZUvH9fxoo4vewYmj4Xj0w2PTiVJ2vPER9TiGfLBi3HB7EY33PaHaoSabyL6LG8+nXURumWQRxwOjPEQ5rB2Ur+OOG/Z67ujIi9eV5h8ET+nb73kZ6CBIzJa2tQUAAA==') format('woff2'),\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.woff?t=1600502915140') format('woff'),\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.ttf?t=1600502915140') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.svg?t=1600502915140#iconfont') format('svg'); /* iOS 4.1- */\n  }\n  \n  .iconfont {\n    font-family: \"iconfont\" !important;\n    font-size: 16px;\n    font-style: normal;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  .icon-luntan:before {\n    content: \"\\e6eb\";\n  }\n  \n  .icon-qingkong:before {\n    content: \"\\e611\";\n  }\n  \n  .icon-zhuangtai:before {\n    content: \"\\e61b\";\n  }\n  \n  .icon-xiazai:before {\n    content: \"\\e667\";\n  }\n  \n  .icon-kong:before {\n    content: \"\\e60d\";\n  }\n  \n  .icon-heart:before {\n    content: \"\\e635\";\n  }\n  \n  .icon-heart-o:before {\n    content: \"\\e61f\";\n  }\n  \n  .icon-fuzhi:before {\n    content: \"\\e607\";\n  }\n  \n  .icon-kuaijiejian:before {\n    content: \"\\e601\";\n  }\n  \n  .icon-jiesuo:before {\n    content: \"\\e61d\";\n  }\n  \n  .icon-diantai:before {\n    content: \"\\e65e\";\n  }\n  \n  .icon-fm:before {\n    content: \"\\e7da\";\n  }\n  \n  .icon-like:before {\n    content: \"\\e8ab\";\n  }\n  \n  .icon-dianying:before {\n    content: \"\\e8ae\";\n  }\n  \n  .icon-shezhi:before {\n    content: \"\\e8b7\";\n  }\n  \n  .icon-home:before {\n    content: \"\\e8b9\";\n  }\n  \n  .icon-sousuo:before {\n    content: \"\\e8ba\";\n  }","site":{"data":{}},"excerpt":"","more":"@font-face {font-family: \"iconfont\";\n    src: url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.eot?t=1600502915140'); /* IE9 */\n    src: url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.eot?t=1600502915140#iefix') format('embedded-opentype'), /* IE6-IE8 */\n    url('data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAAuYAAsAAAAAFZwAAAtJAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCFSAqaXJUoATYCJANICyYABCAFhG0HgUIb+BEz0lFOSgLZf3Vgm5o71DuaDUPG3dBvWX408AyX7GRy04cX3mwzVHkl0gxFzVG8+u+2bGjwvufD05m9P392Mgq0YBb1kiidbMVsxRRMe0KaE5SmZ0XVrXmvwKE1y4U27QagQIwIb/eY1jQhSk3Vo9oYbNPC5qFzCnP9naggU3meySx8k6/Qljtv/UyEwtJcAoCOmivKtyOPPt/meimly+WehPATckIOYRvIsL6d+V9zdaJxb6FgH/14KEuV0u7f9N+/G6JHMpckGol4vo/eUEtbI7JQoVQqJSY0bLPpMXFM5DeeBgIQBYtE1mtlI3gskSNocXikD7wnHZtgIng3F3Fl8yZWeOHLduYHgL3Gz5OH+PAAw6tCfFbtcNEgcl3E7aDIY0EnRbBUJwK40gAKiASwV+FHprgAQt5mSpRmOQCEMWEx+IO4FC6lS9sBHdQhndTdrhHXNzffd9vdt7nvdzs8HiBZ9eBwxLUQYVJnQMDzwnSxXIEj3f7BI2RKKmoaWiAdRGRoP6zSgosoEARwKSDw4FJC8AKXFgIDrgAIFFxBEERwhXAozichFRz4bqRCAj+CVLDgvwEEAjffhyCD2w5BCe7bIKjAfT8ENbgfhKABtyMXWiLRaVdEALKAnYDX3oKwyyj3wmAVFuUEpYRAA6wmRUagvywrlRqN7nIPfz8/pUod4BfAs5ys0UuyJGKZ19WYlIEBQTICA4z+swTsm9EfDNo5azJ8GZDvq4Hj5GtJ+wVfOPE0y9VG7HGb+Ph/ndCSeF4HTEsRSUqgZnIQxaEY/tCsUq4YdrIV4mSYj1JtRZEEaEJUgjgOCKVyp3Dp3zIoWJaoJAwM+jBFzC60TG5cTP4CyycjHacYSZnyaY7j6Ej7SYoSRDljmUlsZNopUU0SgKktT4WTBrBVC+bANNiBHYG6CjlvVUdDEwlD9GiRhpJQSOpsYVU4UbROykz2QwH3hyKNA0BOA0H/FCPKjGWH+Cx7tyyVWB53Bv3ul0vLHr+uy7zkyjKfxGEJXHG2fMpGIRSVfIZ5u60b+RXaeb3kS4lfY0iiYYPLumnF2JDbUY2bimGRyDuoVJL57AeteeVuc6Sm3SPjlubyYp5xG7+pm32O4uGkq99yG70yPnrta2972toVJ7uvZ7MguNkFwpQvo2DEB06GOIIBi0QtEbxMuLok8rIiK/CiuTj6qjLbfn1sytG1CVhAovIE1R/nyZQisluGpI5Zf2dTIi4VCepCVUHfIpZgrMjH6PFjRKoawHHATD+7ZVJh/zDvmw4WCEdl93SlFjx8WZOB/iwpfPQvKf+/iLjyVMYWWEHeMOs9uvurzqWxSMyW3dfwPi19qzTo7q57qbupOoqOWPt/e+9ff5zovQhYwAkHu7XXve1kpWErlrI81mYlAg+kCUi3n0oi/ZswDcqBtIEisFtKArHZb5IABYyOqva08a0Nrxozxdve9rA7Oz/tkaPGcaebwjA4smTUjfjLimaK5dZn36CAUe/KieKVMFt5z1Rn0zl9wChXA5WGoyEllOhz+yLNW4oXLBgIT0dfma/JS/RCM3WqTvc42xt4AmX8rLI/ZFYN2M93EeVpRV8Q6Zbcz6me1Ev9feyerej1iY70vYt2IDrS1It/RyZipGUschcwaxoXXrZmmvf3hmdn29ZxLs2+b10q2b0/FkelDz3Id9ZQtO39Jpay5V9nJUx/03TF0O23sECxgitcGFc7/eHm6fqrw/7/xDp7CxSnxTfv53yFh2w+hqv6UsOVl3v0Vw3PxCrFwz2bNqUq88LLYpsjFSs6x8bFXjE4lko30smqxAuDd11UFCz8uoT/SLggKFI3dvtJTuOHgp/4okbZsPOC8IH3DdsFCzsaBx/BkSPbfLW+265cuSxwl8l7dyx96SeE5gnNkPYn7ZDmcW1TfuAOxTbOQUbFDsWD7689sX1qx7wdk7aPvD+yjVnO2M8ulT42fpSsKJW+N34vlYp0DJKR+6hKG6hVsTqVt535QZXgyD3GKH84Y721KG7IFHrE94jq3aG4RbeQ97p+Z2zh38bP784yv7YzgnhMsuk/GnFi28cn9nYgVF0dxfEVFZOT5F1e2HC/ZmDVh8xri17S4cmzH8ZNnetsG9R/bxjubB42jCyN+y2ySWDWii+H/S3qb+XXLHZ/5l1kLGzuHDZ8Zxhp6my03pWHyIJw21BSTg7uahtndh9nlqIgauBg/bIfX8/4JuybOT+9bnvnYOQAKWCW7j7OfVjW++i5xz+9+6ELlQOL4toCMDK6rpvkDVTIMlx51uGbtw4jgcldJb4N6dRU/vjv67vEL/wzXrz24mN7N+0MUI8hZzPHQSYW7bRUpFtsCSLEBJtxl2/jBiSPnyfP++3b379wzR0eX4/SqOhHSfrR5KSHmHWSK/A5Ls4UNybXVkNlmdPjycdbEgd25uaYP32e9eE5ow5TN80nhsIavvLE47T53DpcQPbutMWpM9JiFmzGEAY3Y+dLsZ7QwrUmmLThjBqOq4JTYeGdOqeg+QeS73DWbIuatWx81VAUXdu/cjhpRsXOtqaKpra8ldEYbZto9KKjLcMdM0jh8vbGjMLt82LqAu4qzinNvIcpzyjJNN0Z1ZD2rY3t4bl+O8wnd5G9vcYdEbm7vw019/MzKeU4dWX2ItlbIZrKrIXR07hfUZt7/dn6n8sejngDgbtvWW4zOvlbwinjiR/8v5JcX+wl4Svrw0Yn1dcuXG88wdUq9hh3J9vSD5XoKDkkn6vZR8rDO2MKdmRdu1PdFVkUXjFkuJd8cRivRAt9MesJaS2z1062jji+esA8mTmpMqZrxN12r30tE1ls2rBBecPDwWVBwYe9DwcHlQV3k/mbMb/B/uK1FcsMy4ghsQHz/XKJr0qv9M9qmzNwD/vjj1n3SIyGVKsjOxjZ1rF8zZbOaRVN9OiLLx6Fi1IGPcof0YTyCM365Or4S6W/b1of2hKSpaxNNsvCoTsljQzSem/5lN4wYdBPCUut062evDxlRIRxQgQ3xkXcV24w3Peo+8jlUtLTQ1RX6YVBnRLS24NSieEJS7Iedcqy89FX2+D4zJRPq6KruIR5Mmic5OVpcjWMSsaDJp/oCRj3/t47V7nTeEBP6qcNDYj71Pp2/OYy1v7FF3a4WEKwOjKZU0/ct7LjcVWClT7yCIXLSghWeldh/MpP7EFXDx48agnjj8LseRSA5/VJ6XSIhXQJ84th3sLcpFkoAM9G1kHNLOmnfJSG59uoCaCyYB4FPG+xmfoj8AU6aWHgzzOFqip/o51KSQyUcwJddFBd7dc8RP2ibGe7k2Dt+L63R535Gy/9A276gHy0gRzdqAAPBiJHOsie23qxjwIA67g5COu+ItiFiiUmetTbD1PojLJWGqyDDcpyBoAoLQI8zWTj46YFY2bbSVUwOoCBAkGAgkeEktVGAi9ISAQceOQAEXNQcr0EPRaDgrACgNnYzACBBrcDBio8Aig0oPtlwED7B/Y9+AcHrkLBie/c3vHUY8ZOnpTQqIb5GriS0clZdmK2fKcm9qhuhxHwTRq4BIo099e80UhahYewaEozB05lgFf2POp7gUmlpcpSbzbNssxFeUwrGbZOPFEEmRaxBubWiVlFjNzy5iTw/e9II+ohTRjwnfgbUQHvHhRSeQblGxkzDdiV9sFCo2RcdEDprsQAvHKR9FKlAFP0cS1SMSlfoHwyk/GJXFaSNi8Ma59g9Q0qfsoRRiiqphumZUvH9fxoo4vewYmj4Xj0w2PTiVJ2vPER9TiGfLBi3HB7EY33PaHaoSabyL6LG8+nXURumWQRxwOjPEQ5rB2Ur+OOG/Z67ujIi9eV5h8ET+nb73kZ6CBIzJa2tQUAAA==') format('woff2'),\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.woff?t=1600502915140') format('woff'),\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.ttf?t=1600502915140') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n    url('//at.alicdn.com/t/font_1794884_qd9g0l7rzik.svg?t=1600502915140#iconfont') format('svg'); /* iOS 4.1- */\n  }\n  \n  .iconfont {\n    font-family: \"iconfont\" !important;\n    font-size: 16px;\n    font-style: normal;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  .icon-luntan:before {\n    content: \"\\e6eb\";\n  }\n  \n  .icon-qingkong:before {\n    content: \"\\e611\";\n  }\n  \n  .icon-zhuangtai:before {\n    content: \"\\e61b\";\n  }\n  \n  .icon-xiazai:before {\n    content: \"\\e667\";\n  }\n  \n  .icon-kong:before {\n    content: \"\\e60d\";\n  }\n  \n  .icon-heart:before {\n    content: \"\\e635\";\n  }\n  \n  .icon-heart-o:before {\n    content: \"\\e61f\";\n  }\n  \n  .icon-fuzhi:before {\n    content: \"\\e607\";\n  }\n  \n  .icon-kuaijiejian:before {\n    content: \"\\e601\";\n  }\n  \n  .icon-jiesuo:before {\n    content: \"\\e61d\";\n  }\n  \n  .icon-diantai:before {\n    content: \"\\e65e\";\n  }\n  \n  .icon-fm:before {\n    content: \"\\e7da\";\n  }\n  \n  .icon-like:before {\n    content: \"\\e8ab\";\n  }\n  \n  .icon-dianying:before {\n    content: \"\\e8ae\";\n  }\n  \n  .icon-shezhi:before {\n    content: \"\\e8b7\";\n  }\n  \n  .icon-home:before {\n    content: \"\\e8b9\";\n  }\n  \n  .icon-sousuo:before {\n    content: \"\\e8ba\";\n  }"},{"_content":"\n<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge,chrome=1\"><link rel=\"stylesheet\" href=\"https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/bootstrap/4.5.3/css/bootstrap.min.css\"><link rel=\"stylesheet\" href=\"https://at.alicdn.com/t/font_1794884_qd9g0l7rzik.css\"><link rel=\"shortcut icon\" href=\"/favicon.ico\"><link rel=\"apple-touch-icon\" href=\"https://thirdqq.qlogo.cn/g?b=sdk&k=fXJhGbvrIeja8vD6FckWXA&s=140\"><meta http-equiv=\"Cache-Control\" content=\"no-siteapp\"><title>myfreemp3 - audio music free download 音频音乐下歌吧</title><link rel=\"stylesheet\" href=\"static/css/main.css?v=2020072651\"><meta name=\"referrer\" content=\"never\"><meta name=\"theme-color\" content=\"#fff\"><meta name=\"apple-mobile-web-app-capable\" content=\"yes\"><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script></head><body><div id=\"loader\"><div id=\"argprogress\"><div class=\"progress-bar bg-gradient-primary\"></div></div></div><div id=\"main\" class=\"boxAd adsenbox adscenter adsbygalaksion adsblock adsblockvert adsbody adscontainer adsdiv adsTest\"><div class=\"nav-bar\"><div class=\"navBar-logo\">MyFree<span>MP3</span></div><div><a class=\"navBar-group head\"><span>BROWSE</span></a><a class=\"navBar-group\" data-page=\"searchPage\"><i class=\"iconfont icon-sousuo\"></i><span>搜索</span></a><a class=\"navBar-group\" data-page=\"audioPage\"><i class=\"iconfont icon-fm\"></i><span>播放列表</span></a><a class=\"navBar-group head\"><span>PAGES</span></a><a class=\"navBar-group\" data-page=\"fmPage\"><i class=\"iconfont icon-diantai\"></i><span>广播电台</span></a><a href=\"https://tool.liumingye.cn/unlock-music/\" target=\"_blank\" class=\"navBar-group\"><i class=\"iconfont icon-jiesuo\"></i><span>音乐解锁 v1.10.6</span></a><a class=\"navBar-group head\"><span>OTHER</span></a><a href=\"http://tools.liumingye.cn\" target=\"_blank\" class=\"navBar-group\"><span>在线工具</span></a><a href=\"https://xiageba.liumingye.cn/\" target=\"_blank\" class=\"navBar-group\"><span>下歌吧</span></a></div></div><div class=\"main-view pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links ad-text adSense adBlock adContent adBanner\"><nav class=\"navbar border-bottom sticky-top navbar-light bg-white px-md-4\"><div class=\"navbar-nav mr-auto pr-2\"><div class=\"d-md-none\">MyFreeMP3</div></div><a class=\"nav-link d-md-block d-none\" data-toggle=\"modal\" data-target=\"#shortcuts\"><i class=\"iconfont icon-kuaijiejian\"></i></a><a class=\"nav-link\" data-toggle=\"modal\" data-target=\"#configure\"><i class=\"iconfont icon-shezhi\"></i></a><li class=\"nav-item dropdown\"><a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"langdrop\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">简体中文</a><div id=\"lang\" class=\"dropdown-menu\" aria-labelledby=\"langdrop\" style=\"right:0;left:auto\"><button class=\"dropdown-item\" data-lang=\"en-us\">English</button><button class=\"dropdown-item\" data-lang=\"zh-cn\">简体中文</button><button class=\"dropdown-item\" data-lang=\"zh-tw\">繁體中文</button></div></li></nav><div id=\"discoverPage\" class=\"container-xl\"><div class=\"home-tab mb-3\"><ul><li data-page=\"featured\"><span>精选</span></li><li data-page=\"category\"><span>歌单分类</span></li><li data-page=\"toplist\"><span>排行榜</span></li></ul></div><div class=\"home-content\"></div></div><div id=\"searchPage\" class=\"container-xl\"><form id=\"search\"><div class=\"home-title\">搜索</div><div class=\"input-group mb-3\"><select id=\"type\" class=\"custom-select\"><option value=\"YQB\">C</option><option value=\"YQD\">B</option><option value=\"1ting\">H</option><option value=\"douban\">F</option><option value=\"wusingfc\">K</option><option value=\"wusingyc\">L</option></select><input type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"input\" placeholder=\"开始搜索...\" pattern=\"^.+$\" required><div class=\"input-group-append\"><button id=\"empty\" class=\"btn btn-outline-secondary\" type=\"button\"><i class=\"iconfont icon-qingkong\"></i></button><button class=\"btn btn-outline-secondary\" type=\"submit\"><i class=\"iconfont icon-sousuo\"></i></button></div></div></form><div id=\"smartbox\" style=\"margin-top:-30px\"><div class=\"home-title\">单曲</div><div class=\"smartbox_group key-group smartbox-song\"></div><div class=\"home-title\">专辑</div><div class=\"smartbox_group key-group smartbox-album\"></div><div class=\"home-title\">歌手</div><div class=\"smartbox_group key-group smartbox-singer\"></div></div><div id=\"searchbox\" style=\"margin-top:-30px\"><div class=\"home-title\">热门搜索</div><div id=\"hotkey\" class=\"key-group\"></div></div><div class=\"home-title\"></div><footer><div class=\"text-danger\">本页面已不再更新！！！</div><br>2019年05月13日，因收到腾讯法务函告通知，已删除QQ音乐，酷我音乐，酷狗音乐。<br>2019年10月29日，已删除油猴脚本。<br>2020年12月26日，已删除哔哩哔哩。<br>如有侵权，请联系本人予以删除！邮箱i@liumingye.cn或liumingye2015@gmail.com<br><br>本站本身不储存任何资源文件，资源来自互联网，仅供学习交流试听，请于下载后24小时内删除，支持购买正版专辑！</footer></div><div id=\"audioPage\" class=\"container-xl\"><div class=\"right-side\"><div class=\"right-row\"><div class=\"TLH_cover\"><div class=\"cover-art\"><div class=\"cover-art-image\"></div></div></div><div class=\"TLH_body\"><div class=\"mo-info\"><div class=\"mo-info-name\">MyFreeMP3</div></div><span class=\"mo-info-by\">作者</span><div class=\"mo-meta\">MyFreeMP3</div><div class=\"play-lrc aplayer aplayer-withlrc\"></div><div class=\"TLH_button\"><button class=\"btn-green TLH_download btn-green-disabled\">下载</button><button class=\"btn-green TLH_batch btn-green-disabled\">批量下载</button></div></div></div></div><div class=\"EmptyState\"><i class=\"iconfont icon-kong\"></i><h1>这里有点空哦…</h1></div><div class=\"left-side\"><div class=\"left-row\"><div id=\"player\" class=\"aplayer\"></div></div></div></div><div id=\"listPage\" class=\"container-xl\"><div class=\"home-title\">我的歌单（<span class=\"num\">0</span>）</div><div id=\"mySongSheet\" class=\"listwrapper\"></div><div class=\"home-title\">我的收藏（<span class=\"num\">0</span>）</div><div id=\"mySongCollect\" class=\"listwrapper\"></div></div><div id=\"fmPage\" class=\"container-xl\"><div class=\"listwrapper\" id=\"fmPlaylist\"></div></div><div id=\"statusPage\" class=\"container-xl\"></div><div class=\"goto-top\"><i></i></div></div><div id=\"play-bar\" class=\"aplayer aplayer-withlrc aplayer-withlist\"><div class=\"aplayer-lyrics-container\"></div></div><div class=\"m-nav-bar\"><ul><li class=\"m-navBar-group\" data-page=\"searchPage\"><i class=\"iconfont icon-sousuo\"></i></li><li class=\"m-navBar-group\" data-page=\"audioPage\"><i class=\"iconfont icon-fm\"></i></li><li class=\"m-navBar-group\" data-page=\"listPage\"><i class=\"iconfont icon-like\"></i></li></ul></div></div><script>var app = window.app || {};app.version =\"2020072651\";app.notice =\"&lt;p id=&quot;hitokoto&quot;&gt;:D 获取中...&lt;/p&gt;&lt;script src=&quot;https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto&quot; defer&gt;&lt;/script&gt;\";app.msg =\"\";</script><script src=\"static/js/localstorage.js?v=2020072651\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RWV44BMN28\"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-RWV44BMN28');</script></body></html>","source":"HTML/investigation.html","raw":"\n<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge,chrome=1\"><link rel=\"stylesheet\" href=\"https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/bootstrap/4.5.3/css/bootstrap.min.css\"><link rel=\"stylesheet\" href=\"https://at.alicdn.com/t/font_1794884_qd9g0l7rzik.css\"><link rel=\"shortcut icon\" href=\"/favicon.ico\"><link rel=\"apple-touch-icon\" href=\"https://thirdqq.qlogo.cn/g?b=sdk&k=fXJhGbvrIeja8vD6FckWXA&s=140\"><meta http-equiv=\"Cache-Control\" content=\"no-siteapp\"><title>myfreemp3 - audio music free download 音频音乐下歌吧</title><link rel=\"stylesheet\" href=\"static/css/main.css?v=2020072651\"><meta name=\"referrer\" content=\"never\"><meta name=\"theme-color\" content=\"#fff\"><meta name=\"apple-mobile-web-app-capable\" content=\"yes\"><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script></head><body><div id=\"loader\"><div id=\"argprogress\"><div class=\"progress-bar bg-gradient-primary\"></div></div></div><div id=\"main\" class=\"boxAd adsenbox adscenter adsbygalaksion adsblock adsblockvert adsbody adscontainer adsdiv adsTest\"><div class=\"nav-bar\"><div class=\"navBar-logo\">MyFree<span>MP3</span></div><div><a class=\"navBar-group head\"><span>BROWSE</span></a><a class=\"navBar-group\" data-page=\"searchPage\"><i class=\"iconfont icon-sousuo\"></i><span>搜索</span></a><a class=\"navBar-group\" data-page=\"audioPage\"><i class=\"iconfont icon-fm\"></i><span>播放列表</span></a><a class=\"navBar-group head\"><span>PAGES</span></a><a class=\"navBar-group\" data-page=\"fmPage\"><i class=\"iconfont icon-diantai\"></i><span>广播电台</span></a><a href=\"https://tool.liumingye.cn/unlock-music/\" target=\"_blank\" class=\"navBar-group\"><i class=\"iconfont icon-jiesuo\"></i><span>音乐解锁 v1.10.6</span></a><a class=\"navBar-group head\"><span>OTHER</span></a><a href=\"http://tools.liumingye.cn\" target=\"_blank\" class=\"navBar-group\"><span>在线工具</span></a><a href=\"https://xiageba.liumingye.cn/\" target=\"_blank\" class=\"navBar-group\"><span>下歌吧</span></a></div></div><div class=\"main-view pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links ad-text adSense adBlock adContent adBanner\"><nav class=\"navbar border-bottom sticky-top navbar-light bg-white px-md-4\"><div class=\"navbar-nav mr-auto pr-2\"><div class=\"d-md-none\">MyFreeMP3</div></div><a class=\"nav-link d-md-block d-none\" data-toggle=\"modal\" data-target=\"#shortcuts\"><i class=\"iconfont icon-kuaijiejian\"></i></a><a class=\"nav-link\" data-toggle=\"modal\" data-target=\"#configure\"><i class=\"iconfont icon-shezhi\"></i></a><li class=\"nav-item dropdown\"><a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"langdrop\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">简体中文</a><div id=\"lang\" class=\"dropdown-menu\" aria-labelledby=\"langdrop\" style=\"right:0;left:auto\"><button class=\"dropdown-item\" data-lang=\"en-us\">English</button><button class=\"dropdown-item\" data-lang=\"zh-cn\">简体中文</button><button class=\"dropdown-item\" data-lang=\"zh-tw\">繁體中文</button></div></li></nav><div id=\"discoverPage\" class=\"container-xl\"><div class=\"home-tab mb-3\"><ul><li data-page=\"featured\"><span>精选</span></li><li data-page=\"category\"><span>歌单分类</span></li><li data-page=\"toplist\"><span>排行榜</span></li></ul></div><div class=\"home-content\"></div></div><div id=\"searchPage\" class=\"container-xl\"><form id=\"search\"><div class=\"home-title\">搜索</div><div class=\"input-group mb-3\"><select id=\"type\" class=\"custom-select\"><option value=\"YQB\">C</option><option value=\"YQD\">B</option><option value=\"1ting\">H</option><option value=\"douban\">F</option><option value=\"wusingfc\">K</option><option value=\"wusingyc\">L</option></select><input type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"input\" placeholder=\"开始搜索...\" pattern=\"^.+$\" required><div class=\"input-group-append\"><button id=\"empty\" class=\"btn btn-outline-secondary\" type=\"button\"><i class=\"iconfont icon-qingkong\"></i></button><button class=\"btn btn-outline-secondary\" type=\"submit\"><i class=\"iconfont icon-sousuo\"></i></button></div></div></form><div id=\"smartbox\" style=\"margin-top:-30px\"><div class=\"home-title\">单曲</div><div class=\"smartbox_group key-group smartbox-song\"></div><div class=\"home-title\">专辑</div><div class=\"smartbox_group key-group smartbox-album\"></div><div class=\"home-title\">歌手</div><div class=\"smartbox_group key-group smartbox-singer\"></div></div><div id=\"searchbox\" style=\"margin-top:-30px\"><div class=\"home-title\">热门搜索</div><div id=\"hotkey\" class=\"key-group\"></div></div><div class=\"home-title\"></div><footer><div class=\"text-danger\">本页面已不再更新！！！</div><br>2019年05月13日，因收到腾讯法务函告通知，已删除QQ音乐，酷我音乐，酷狗音乐。<br>2019年10月29日，已删除油猴脚本。<br>2020年12月26日，已删除哔哩哔哩。<br>如有侵权，请联系本人予以删除！邮箱i@liumingye.cn或liumingye2015@gmail.com<br><br>本站本身不储存任何资源文件，资源来自互联网，仅供学习交流试听，请于下载后24小时内删除，支持购买正版专辑！</footer></div><div id=\"audioPage\" class=\"container-xl\"><div class=\"right-side\"><div class=\"right-row\"><div class=\"TLH_cover\"><div class=\"cover-art\"><div class=\"cover-art-image\"></div></div></div><div class=\"TLH_body\"><div class=\"mo-info\"><div class=\"mo-info-name\">MyFreeMP3</div></div><span class=\"mo-info-by\">作者</span><div class=\"mo-meta\">MyFreeMP3</div><div class=\"play-lrc aplayer aplayer-withlrc\"></div><div class=\"TLH_button\"><button class=\"btn-green TLH_download btn-green-disabled\">下载</button><button class=\"btn-green TLH_batch btn-green-disabled\">批量下载</button></div></div></div></div><div class=\"EmptyState\"><i class=\"iconfont icon-kong\"></i><h1>这里有点空哦…</h1></div><div class=\"left-side\"><div class=\"left-row\"><div id=\"player\" class=\"aplayer\"></div></div></div></div><div id=\"listPage\" class=\"container-xl\"><div class=\"home-title\">我的歌单（<span class=\"num\">0</span>）</div><div id=\"mySongSheet\" class=\"listwrapper\"></div><div class=\"home-title\">我的收藏（<span class=\"num\">0</span>）</div><div id=\"mySongCollect\" class=\"listwrapper\"></div></div><div id=\"fmPage\" class=\"container-xl\"><div class=\"listwrapper\" id=\"fmPlaylist\"></div></div><div id=\"statusPage\" class=\"container-xl\"></div><div class=\"goto-top\"><i></i></div></div><div id=\"play-bar\" class=\"aplayer aplayer-withlrc aplayer-withlist\"><div class=\"aplayer-lyrics-container\"></div></div><div class=\"m-nav-bar\"><ul><li class=\"m-navBar-group\" data-page=\"searchPage\"><i class=\"iconfont icon-sousuo\"></i></li><li class=\"m-navBar-group\" data-page=\"audioPage\"><i class=\"iconfont icon-fm\"></i></li><li class=\"m-navBar-group\" data-page=\"listPage\"><i class=\"iconfont icon-like\"></i></li></ul></div></div><script>var app = window.app || {};app.version =\"2020072651\";app.notice =\"&lt;p id=&quot;hitokoto&quot;&gt;:D 获取中...&lt;/p&gt;&lt;script src=&quot;https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto&quot; defer&gt;&lt;/script&gt;\";app.msg =\"\";</script><script src=\"static/js/localstorage.js?v=2020072651\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RWV44BMN28\"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-RWV44BMN28');</script></body></html>","date":"2024-06-09T06:34:57.333Z","updated":"2024-06-09T04:51:06.585Z","path":"HTML/investigation.html","title":"","comments":1,"layout":"page","_id":"clx775nxl0002zkue6ggu2uo5","content":"\n<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge,chrome=1\"><link rel=\"stylesheet\" href=\"https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/bootstrap/4.5.3/css/bootstrap.min.css\"><link rel=\"stylesheet\" href=\"https://at.alicdn.com/t/font_1794884_qd9g0l7rzik.css\"><link rel=\"shortcut icon\" href=\"/favicon.ico\"><link rel=\"apple-touch-icon\" href=\"https://thirdqq.qlogo.cn/g?b=sdk&k=fXJhGbvrIeja8vD6FckWXA&s=140\"><meta http-equiv=\"Cache-Control\" content=\"no-siteapp\"><title>myfreemp3 - audio music free download 音频音乐下歌吧</title><link rel=\"stylesheet\" href=\"static/css/main.css?v=2020072651\"><meta name=\"referrer\" content=\"never\"><meta name=\"theme-color\" content=\"#fff\"><meta name=\"apple-mobile-web-app-capable\" content=\"yes\"><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script></head><body><div id=\"loader\"><div id=\"argprogress\"><div class=\"progress-bar bg-gradient-primary\"></div></div></div><div id=\"main\" class=\"boxAd adsenbox adscenter adsbygalaksion adsblock adsblockvert adsbody adscontainer adsdiv adsTest\"><div class=\"nav-bar\"><div class=\"navBar-logo\">MyFree<span>MP3</span></div><div><a class=\"navBar-group head\"><span>BROWSE</span></a><a class=\"navBar-group\" data-page=\"searchPage\"><i class=\"iconfont icon-sousuo\"></i><span>搜索</span></a><a class=\"navBar-group\" data-page=\"audioPage\"><i class=\"iconfont icon-fm\"></i><span>播放列表</span></a><a class=\"navBar-group head\"><span>PAGES</span></a><a class=\"navBar-group\" data-page=\"fmPage\"><i class=\"iconfont icon-diantai\"></i><span>广播电台</span></a><a href=\"https://tool.liumingye.cn/unlock-music/\" target=\"_blank\" class=\"navBar-group\"><i class=\"iconfont icon-jiesuo\"></i><span>音乐解锁 v1.10.6</span></a><a class=\"navBar-group head\"><span>OTHER</span></a><a href=\"http://tools.liumingye.cn\" target=\"_blank\" class=\"navBar-group\"><span>在线工具</span></a><a href=\"https://xiageba.liumingye.cn/\" target=\"_blank\" class=\"navBar-group\"><span>下歌吧</span></a></div></div><div class=\"main-view pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links ad-text adSense adBlock adContent adBanner\"><nav class=\"navbar border-bottom sticky-top navbar-light bg-white px-md-4\"><div class=\"navbar-nav mr-auto pr-2\"><div class=\"d-md-none\">MyFreeMP3</div></div><a class=\"nav-link d-md-block d-none\" data-toggle=\"modal\" data-target=\"#shortcuts\"><i class=\"iconfont icon-kuaijiejian\"></i></a><a class=\"nav-link\" data-toggle=\"modal\" data-target=\"#configure\"><i class=\"iconfont icon-shezhi\"></i></a><li class=\"nav-item dropdown\"><a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"langdrop\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">简体中文</a><div id=\"lang\" class=\"dropdown-menu\" aria-labelledby=\"langdrop\" style=\"right:0;left:auto\"><button class=\"dropdown-item\" data-lang=\"en-us\">English</button><button class=\"dropdown-item\" data-lang=\"zh-cn\">简体中文</button><button class=\"dropdown-item\" data-lang=\"zh-tw\">繁體中文</button></div></li></nav><div id=\"discoverPage\" class=\"container-xl\"><div class=\"home-tab mb-3\"><ul><li data-page=\"featured\"><span>精选</span></li><li data-page=\"category\"><span>歌单分类</span></li><li data-page=\"toplist\"><span>排行榜</span></li></ul></div><div class=\"home-content\"></div></div><div id=\"searchPage\" class=\"container-xl\"><form id=\"search\"><div class=\"home-title\">搜索</div><div class=\"input-group mb-3\"><select id=\"type\" class=\"custom-select\"><option value=\"YQB\">C</option><option value=\"YQD\">B</option><option value=\"1ting\">H</option><option value=\"douban\">F</option><option value=\"wusingfc\">K</option><option value=\"wusingyc\">L</option></select><input type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"input\" placeholder=\"开始搜索...\" pattern=\"^.+$\" required><div class=\"input-group-append\"><button id=\"empty\" class=\"btn btn-outline-secondary\" type=\"button\"><i class=\"iconfont icon-qingkong\"></i></button><button class=\"btn btn-outline-secondary\" type=\"submit\"><i class=\"iconfont icon-sousuo\"></i></button></div></div></form><div id=\"smartbox\" style=\"margin-top:-30px\"><div class=\"home-title\">单曲</div><div class=\"smartbox_group key-group smartbox-song\"></div><div class=\"home-title\">专辑</div><div class=\"smartbox_group key-group smartbox-album\"></div><div class=\"home-title\">歌手</div><div class=\"smartbox_group key-group smartbox-singer\"></div></div><div id=\"searchbox\" style=\"margin-top:-30px\"><div class=\"home-title\">热门搜索</div><div id=\"hotkey\" class=\"key-group\"></div></div><div class=\"home-title\"></div><footer><div class=\"text-danger\">本页面已不再更新！！！</div><br>2019年05月13日，因收到腾讯法务函告通知，已删除QQ音乐，酷我音乐，酷狗音乐。<br>2019年10月29日，已删除油猴脚本。<br>2020年12月26日，已删除哔哩哔哩。<br>如有侵权，请联系本人予以删除！邮箱i@liumingye.cn或liumingye2015@gmail.com<br><br>本站本身不储存任何资源文件，资源来自互联网，仅供学习交流试听，请于下载后24小时内删除，支持购买正版专辑！</footer></div><div id=\"audioPage\" class=\"container-xl\"><div class=\"right-side\"><div class=\"right-row\"><div class=\"TLH_cover\"><div class=\"cover-art\"><div class=\"cover-art-image\"></div></div></div><div class=\"TLH_body\"><div class=\"mo-info\"><div class=\"mo-info-name\">MyFreeMP3</div></div><span class=\"mo-info-by\">作者</span><div class=\"mo-meta\">MyFreeMP3</div><div class=\"play-lrc aplayer aplayer-withlrc\"></div><div class=\"TLH_button\"><button class=\"btn-green TLH_download btn-green-disabled\">下载</button><button class=\"btn-green TLH_batch btn-green-disabled\">批量下载</button></div></div></div></div><div class=\"EmptyState\"><i class=\"iconfont icon-kong\"></i><h1>这里有点空哦…</h1></div><div class=\"left-side\"><div class=\"left-row\"><div id=\"player\" class=\"aplayer\"></div></div></div></div><div id=\"listPage\" class=\"container-xl\"><div class=\"home-title\">我的歌单（<span class=\"num\">0</span>）</div><div id=\"mySongSheet\" class=\"listwrapper\"></div><div class=\"home-title\">我的收藏（<span class=\"num\">0</span>）</div><div id=\"mySongCollect\" class=\"listwrapper\"></div></div><div id=\"fmPage\" class=\"container-xl\"><div class=\"listwrapper\" id=\"fmPlaylist\"></div></div><div id=\"statusPage\" class=\"container-xl\"></div><div class=\"goto-top\"><i></i></div></div><div id=\"play-bar\" class=\"aplayer aplayer-withlrc aplayer-withlist\"><div class=\"aplayer-lyrics-container\"></div></div><div class=\"m-nav-bar\"><ul><li class=\"m-navBar-group\" data-page=\"searchPage\"><i class=\"iconfont icon-sousuo\"></i></li><li class=\"m-navBar-group\" data-page=\"audioPage\"><i class=\"iconfont icon-fm\"></i></li><li class=\"m-navBar-group\" data-page=\"listPage\"><i class=\"iconfont icon-like\"></i></li></ul></div></div><script>var app = window.app || {};app.version =\"2020072651\";app.notice =\"&lt;p id=&quot;hitokoto&quot;&gt;:D 获取中...&lt;/p&gt;&lt;script src=&quot;https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto&quot; defer&gt;&lt;/script&gt;\";app.msg =\"\";</script><script src=\"static/js/localstorage.js?v=2020072651\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RWV44BMN28\"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-RWV44BMN28');</script></body></html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge,chrome=1\"><link rel=\"stylesheet\" href=\"https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/bootstrap/4.5.3/css/bootstrap.min.css\"><link rel=\"stylesheet\" href=\"https://at.alicdn.com/t/font_1794884_qd9g0l7rzik.css\"><link rel=\"shortcut icon\" href=\"/favicon.ico\"><link rel=\"apple-touch-icon\" href=\"https://thirdqq.qlogo.cn/g?b=sdk&k=fXJhGbvrIeja8vD6FckWXA&s=140\"><meta http-equiv=\"Cache-Control\" content=\"no-siteapp\"><title>myfreemp3 - audio music free download 音频音乐下歌吧</title><link rel=\"stylesheet\" href=\"static/css/main.css?v=2020072651\"><meta name=\"referrer\" content=\"never\"><meta name=\"theme-color\" content=\"#fff\"><meta name=\"apple-mobile-web-app-capable\" content=\"yes\"><script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script></head><body><div id=\"loader\"><div id=\"argprogress\"><div class=\"progress-bar bg-gradient-primary\"></div></div></div><div id=\"main\" class=\"boxAd adsenbox adscenter adsbygalaksion adsblock adsblockvert adsbody adscontainer adsdiv adsTest\"><div class=\"nav-bar\"><div class=\"navBar-logo\">MyFree<span>MP3</span></div><div><a class=\"navBar-group head\"><span>BROWSE</span></a><a class=\"navBar-group\" data-page=\"searchPage\"><i class=\"iconfont icon-sousuo\"></i><span>搜索</span></a><a class=\"navBar-group\" data-page=\"audioPage\"><i class=\"iconfont icon-fm\"></i><span>播放列表</span></a><a class=\"navBar-group head\"><span>PAGES</span></a><a class=\"navBar-group\" data-page=\"fmPage\"><i class=\"iconfont icon-diantai\"></i><span>广播电台</span></a><a href=\"https://tool.liumingye.cn/unlock-music/\" target=\"_blank\" class=\"navBar-group\"><i class=\"iconfont icon-jiesuo\"></i><span>音乐解锁 v1.10.6</span></a><a class=\"navBar-group head\"><span>OTHER</span></a><a href=\"http://tools.liumingye.cn\" target=\"_blank\" class=\"navBar-group\"><span>在线工具</span></a><a href=\"https://xiageba.liumingye.cn/\" target=\"_blank\" class=\"navBar-group\"><span>下歌吧</span></a></div></div><div class=\"main-view pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links ad-text adSense adBlock adContent adBanner\"><nav class=\"navbar border-bottom sticky-top navbar-light bg-white px-md-4\"><div class=\"navbar-nav mr-auto pr-2\"><div class=\"d-md-none\">MyFreeMP3</div></div><a class=\"nav-link d-md-block d-none\" data-toggle=\"modal\" data-target=\"#shortcuts\"><i class=\"iconfont icon-kuaijiejian\"></i></a><a class=\"nav-link\" data-toggle=\"modal\" data-target=\"#configure\"><i class=\"iconfont icon-shezhi\"></i></a><li class=\"nav-item dropdown\"><a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"langdrop\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">简体中文</a><div id=\"lang\" class=\"dropdown-menu\" aria-labelledby=\"langdrop\" style=\"right:0;left:auto\"><button class=\"dropdown-item\" data-lang=\"en-us\">English</button><button class=\"dropdown-item\" data-lang=\"zh-cn\">简体中文</button><button class=\"dropdown-item\" data-lang=\"zh-tw\">繁體中文</button></div></li></nav><div id=\"discoverPage\" class=\"container-xl\"><div class=\"home-tab mb-3\"><ul><li data-page=\"featured\"><span>精选</span></li><li data-page=\"category\"><span>歌单分类</span></li><li data-page=\"toplist\"><span>排行榜</span></li></ul></div><div class=\"home-content\"></div></div><div id=\"searchPage\" class=\"container-xl\"><form id=\"search\"><div class=\"home-title\">搜索</div><div class=\"input-group mb-3\"><select id=\"type\" class=\"custom-select\"><option value=\"YQB\">C</option><option value=\"YQD\">B</option><option value=\"1ting\">H</option><option value=\"douban\">F</option><option value=\"wusingfc\">K</option><option value=\"wusingyc\">L</option></select><input type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"input\" placeholder=\"开始搜索...\" pattern=\"^.+$\" required><div class=\"input-group-append\"><button id=\"empty\" class=\"btn btn-outline-secondary\" type=\"button\"><i class=\"iconfont icon-qingkong\"></i></button><button class=\"btn btn-outline-secondary\" type=\"submit\"><i class=\"iconfont icon-sousuo\"></i></button></div></div></form><div id=\"smartbox\" style=\"margin-top:-30px\"><div class=\"home-title\">单曲</div><div class=\"smartbox_group key-group smartbox-song\"></div><div class=\"home-title\">专辑</div><div class=\"smartbox_group key-group smartbox-album\"></div><div class=\"home-title\">歌手</div><div class=\"smartbox_group key-group smartbox-singer\"></div></div><div id=\"searchbox\" style=\"margin-top:-30px\"><div class=\"home-title\">热门搜索</div><div id=\"hotkey\" class=\"key-group\"></div></div><div class=\"home-title\"></div><footer><div class=\"text-danger\">本页面已不再更新！！！</div><br>2019年05月13日，因收到腾讯法务函告通知，已删除QQ音乐，酷我音乐，酷狗音乐。<br>2019年10月29日，已删除油猴脚本。<br>2020年12月26日，已删除哔哩哔哩。<br>如有侵权，请联系本人予以删除！邮箱i@liumingye.cn或liumingye2015@gmail.com<br><br>本站本身不储存任何资源文件，资源来自互联网，仅供学习交流试听，请于下载后24小时内删除，支持购买正版专辑！</footer></div><div id=\"audioPage\" class=\"container-xl\"><div class=\"right-side\"><div class=\"right-row\"><div class=\"TLH_cover\"><div class=\"cover-art\"><div class=\"cover-art-image\"></div></div></div><div class=\"TLH_body\"><div class=\"mo-info\"><div class=\"mo-info-name\">MyFreeMP3</div></div><span class=\"mo-info-by\">作者</span><div class=\"mo-meta\">MyFreeMP3</div><div class=\"play-lrc aplayer aplayer-withlrc\"></div><div class=\"TLH_button\"><button class=\"btn-green TLH_download btn-green-disabled\">下载</button><button class=\"btn-green TLH_batch btn-green-disabled\">批量下载</button></div></div></div></div><div class=\"EmptyState\"><i class=\"iconfont icon-kong\"></i><h1>这里有点空哦…</h1></div><div class=\"left-side\"><div class=\"left-row\"><div id=\"player\" class=\"aplayer\"></div></div></div></div><div id=\"listPage\" class=\"container-xl\"><div class=\"home-title\">我的歌单（<span class=\"num\">0</span>）</div><div id=\"mySongSheet\" class=\"listwrapper\"></div><div class=\"home-title\">我的收藏（<span class=\"num\">0</span>）</div><div id=\"mySongCollect\" class=\"listwrapper\"></div></div><div id=\"fmPage\" class=\"container-xl\"><div class=\"listwrapper\" id=\"fmPlaylist\"></div></div><div id=\"statusPage\" class=\"container-xl\"></div><div class=\"goto-top\"><i></i></div></div><div id=\"play-bar\" class=\"aplayer aplayer-withlrc aplayer-withlist\"><div class=\"aplayer-lyrics-container\"></div></div><div class=\"m-nav-bar\"><ul><li class=\"m-navBar-group\" data-page=\"searchPage\"><i class=\"iconfont icon-sousuo\"></i></li><li class=\"m-navBar-group\" data-page=\"audioPage\"><i class=\"iconfont icon-fm\"></i></li><li class=\"m-navBar-group\" data-page=\"listPage\"><i class=\"iconfont icon-like\"></i></li></ul></div></div><script>var app = window.app || {};app.version =\"2020072651\";app.notice =\"&lt;p id=&quot;hitokoto&quot;&gt;:D 获取中...&lt;/p&gt;&lt;script src=&quot;https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto&quot; defer&gt;&lt;/script&gt;\";app.msg =\"\";</script><script src=\"static/js/localstorage.js?v=2020072651\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RWV44BMN28\"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-RWV44BMN28');</script></body></html>"},{"title":"categories","date":"2023-08-30T09:46:13.000Z","type":"categories","layout":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-08-30 17:46:13\ntype: \"categories\"\nlayout: \"categories\"\n---\n\n","updated":"2023-08-30T10:51:24.244Z","path":"categories/index.html","comments":1,"_id":"clx775nxo0005zkue5ojieqby","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\">\n    <tr>\n        <td align=\"center\" class=\"biaoti\" height=\"60\">受理员业务统计表</td>\n    </tr>\n    <tr>\n        <td align=\"right\" height=\"25\">2017-01-02---2017-05-02</td>\n    </tr>\n</table>\n\n<table width=\"100%\" border=\"0\" cellspacing=\"1\" cellpadding=\"4\" bgcolor=\"#cccccc\" class=\"tabtop13\" align=\"center\">\n    <tr>\n        <td colspan=\"2\" class=\"btbg font-center titfont\" rowspan=\"2\">受理员</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">受理数</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">自办数</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">直接解答</td>\n        <td colspan=\"2\" class=\"btbg font-center titfont\">拟办意见</td>\n        <td colspan=\"2\" class=\"btbg font-center titfont\">返回修改</td>\n        <td colspan=\"3\" class=\"btbg font-center titfont\">工单类型</td>\n    </tr>\n    <tr>\n        <td width=\"8%\" class=\"btbg font-center\">同意</td>\n        <td width=\"8%\" class=\"btbg font-center\">比例</td>\n        <td width=\"8%\" class=\"btbg font-center\">数量</td>\n        <td width=\"8%\" class=\"btbg font-center\">比例</td>\n        <td width=\"8%\" class=\"btbg font-center\">建议件</td>\n        <td width=\"8%\" class=\"btbg font-center\">诉求件</td>\n        <td width=\"8%\" class=\"btbg font-center\">咨询件</td>\n    </tr>\n    <tr>\n        <td width=\"7%\" rowspan=\"8\" class=\"btbg1 font-center\">受理处</td>\n        <td width=\"7%\" class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2 font-center\">总计</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n    </tr>\n    <tr>\n        <td width=\"7%\" rowspan=\"8\" class=\"btbg1 font-center\">话务组</td>\n        <td width=\"7%\" class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2 font-center\">总计</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n    </tr>\n</table>\n<style>\n    @charset \"utf-8\";\n    /* CSS Document */\n    .tabtop13 {\n    \tmargin-top: 13px;\n    }\n    .tabtop13 td{\n    \tbackground-color:#ffffff;\n    \theight:25px;\n    \tline-height:150%;\n    }\n    .font-center{ text-align:center}\n    .btbg{background:#e9faff !important;}\n    .btbg1{background:#f2fbfe !important;}\n    .btbg2{background:#f3f3f3 !important;}\n    .biaoti{\n    \tfont-family: 微软雅黑;\n    \tfont-size: 26px;\n    \tfont-weight: bold;\n    \tborder-bottom:1px dashed #CCCCCC;\n    \tcolor: #255e95;\n    }\n    .titfont {\n    \t\n    \tfont-family: 微软雅黑;\n    \tfont-size: 16px;\n    \tfont-weight: bold;\n    \tcolor: #255e95;\n    \tbackground: url(../images/ico3.gif) no-repeat 15px center;\n    \tbackground-color:#e9faff;\n    }\n    .tabtxt2 {\n    \tfont-family: 微软雅黑;\n    \tfont-size: 14px;\n    \tfont-weight: bold;\n    \ttext-align: right;\n    \tpadding-right: 10px;\n    \tcolor:#327cd1;\n    }\n    .tabtxt3 {\n    \tfont-family: 微软雅黑;\n    \tfont-size: 14px;\n    \tpadding-left: 9px;\n    \tcolor: #000;\n    \tmargin-top: 10px;\n    \tmargin-bottom: 10px;\n    \tline-height: 20px;\n    }\n</style>","source":"HTML/runoob-test.html","raw":"<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\">\n    <tr>\n        <td align=\"center\" class=\"biaoti\" height=\"60\">受理员业务统计表</td>\n    </tr>\n    <tr>\n        <td align=\"right\" height=\"25\">2017-01-02---2017-05-02</td>\n    </tr>\n</table>\n\n<table width=\"100%\" border=\"0\" cellspacing=\"1\" cellpadding=\"4\" bgcolor=\"#cccccc\" class=\"tabtop13\" align=\"center\">\n    <tr>\n        <td colspan=\"2\" class=\"btbg font-center titfont\" rowspan=\"2\">受理员</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">受理数</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">自办数</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">直接解答</td>\n        <td colspan=\"2\" class=\"btbg font-center titfont\">拟办意见</td>\n        <td colspan=\"2\" class=\"btbg font-center titfont\">返回修改</td>\n        <td colspan=\"3\" class=\"btbg font-center titfont\">工单类型</td>\n    </tr>\n    <tr>\n        <td width=\"8%\" class=\"btbg font-center\">同意</td>\n        <td width=\"8%\" class=\"btbg font-center\">比例</td>\n        <td width=\"8%\" class=\"btbg font-center\">数量</td>\n        <td width=\"8%\" class=\"btbg font-center\">比例</td>\n        <td width=\"8%\" class=\"btbg font-center\">建议件</td>\n        <td width=\"8%\" class=\"btbg font-center\">诉求件</td>\n        <td width=\"8%\" class=\"btbg font-center\">咨询件</td>\n    </tr>\n    <tr>\n        <td width=\"7%\" rowspan=\"8\" class=\"btbg1 font-center\">受理处</td>\n        <td width=\"7%\" class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2 font-center\">总计</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n    </tr>\n    <tr>\n        <td width=\"7%\" rowspan=\"8\" class=\"btbg1 font-center\">话务组</td>\n        <td width=\"7%\" class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2 font-center\">总计</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n    </tr>\n</table>\n<style>\n    @charset \"utf-8\";\n    /* CSS Document */\n    .tabtop13 {\n    \tmargin-top: 13px;\n    }\n    .tabtop13 td{\n    \tbackground-color:#ffffff;\n    \theight:25px;\n    \tline-height:150%;\n    }\n    .font-center{ text-align:center}\n    .btbg{background:#e9faff !important;}\n    .btbg1{background:#f2fbfe !important;}\n    .btbg2{background:#f3f3f3 !important;}\n    .biaoti{\n    \tfont-family: 微软雅黑;\n    \tfont-size: 26px;\n    \tfont-weight: bold;\n    \tborder-bottom:1px dashed #CCCCCC;\n    \tcolor: #255e95;\n    }\n    .titfont {\n    \t\n    \tfont-family: 微软雅黑;\n    \tfont-size: 16px;\n    \tfont-weight: bold;\n    \tcolor: #255e95;\n    \tbackground: url(../images/ico3.gif) no-repeat 15px center;\n    \tbackground-color:#e9faff;\n    }\n    .tabtxt2 {\n    \tfont-family: 微软雅黑;\n    \tfont-size: 14px;\n    \tfont-weight: bold;\n    \ttext-align: right;\n    \tpadding-right: 10px;\n    \tcolor:#327cd1;\n    }\n    .tabtxt3 {\n    \tfont-family: 微软雅黑;\n    \tfont-size: 14px;\n    \tpadding-left: 9px;\n    \tcolor: #000;\n    \tmargin-top: 10px;\n    \tmargin-bottom: 10px;\n    \tline-height: 20px;\n    }\n</style>","date":"2024-06-09T01:50:08.455Z","updated":"2024-06-09T01:50:08.455Z","path":"HTML/runoob-test.html","title":"","comments":1,"layout":"page","_id":"clx775nxq0007zkueg68icwvu","content":"<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\">\n    <tr>\n        <td align=\"center\" class=\"biaoti\" height=\"60\">受理员业务统计表</td>\n    </tr>\n    <tr>\n        <td align=\"right\" height=\"25\">2017-01-02---2017-05-02</td>\n    </tr>\n</table>\n\n<table width=\"100%\" border=\"0\" cellspacing=\"1\" cellpadding=\"4\" bgcolor=\"#cccccc\" class=\"tabtop13\" align=\"center\">\n    <tr>\n        <td colspan=\"2\" class=\"btbg font-center titfont\" rowspan=\"2\">受理员</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">受理数</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">自办数</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">直接解答</td>\n        <td colspan=\"2\" class=\"btbg font-center titfont\">拟办意见</td>\n        <td colspan=\"2\" class=\"btbg font-center titfont\">返回修改</td>\n        <td colspan=\"3\" class=\"btbg font-center titfont\">工单类型</td>\n    </tr>\n    <tr>\n        <td width=\"8%\" class=\"btbg font-center\">同意</td>\n        <td width=\"8%\" class=\"btbg font-center\">比例</td>\n        <td width=\"8%\" class=\"btbg font-center\">数量</td>\n        <td width=\"8%\" class=\"btbg font-center\">比例</td>\n        <td width=\"8%\" class=\"btbg font-center\">建议件</td>\n        <td width=\"8%\" class=\"btbg font-center\">诉求件</td>\n        <td width=\"8%\" class=\"btbg font-center\">咨询件</td>\n    </tr>\n    <tr>\n        <td width=\"7%\" rowspan=\"8\" class=\"btbg1 font-center\">受理处</td>\n        <td width=\"7%\" class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2 font-center\">总计</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n    </tr>\n    <tr>\n        <td width=\"7%\" rowspan=\"8\" class=\"btbg1 font-center\">话务组</td>\n        <td width=\"7%\" class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2 font-center\">总计</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n    </tr>\n</table>\n<style>\n    @charset \"utf-8\";\n    /* CSS Document */\n    .tabtop13 {\n    \tmargin-top: 13px;\n    }\n    .tabtop13 td{\n    \tbackground-color:#ffffff;\n    \theight:25px;\n    \tline-height:150%;\n    }\n    .font-center{ text-align:center}\n    .btbg{background:#e9faff !important;}\n    .btbg1{background:#f2fbfe !important;}\n    .btbg2{background:#f3f3f3 !important;}\n    .biaoti{\n    \tfont-family: 微软雅黑;\n    \tfont-size: 26px;\n    \tfont-weight: bold;\n    \tborder-bottom:1px dashed #CCCCCC;\n    \tcolor: #255e95;\n    }\n    .titfont {\n    \t\n    \tfont-family: 微软雅黑;\n    \tfont-size: 16px;\n    \tfont-weight: bold;\n    \tcolor: #255e95;\n    \tbackground: url(../images/ico3.gif) no-repeat 15px center;\n    \tbackground-color:#e9faff;\n    }\n    .tabtxt2 {\n    \tfont-family: 微软雅黑;\n    \tfont-size: 14px;\n    \tfont-weight: bold;\n    \ttext-align: right;\n    \tpadding-right: 10px;\n    \tcolor:#327cd1;\n    }\n    .tabtxt3 {\n    \tfont-family: 微软雅黑;\n    \tfont-size: 14px;\n    \tpadding-left: 9px;\n    \tcolor: #000;\n    \tmargin-top: 10px;\n    \tmargin-bottom: 10px;\n    \tline-height: 20px;\n    }\n</style>","site":{"data":{}},"excerpt":"","more":"<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\">\n    <tr>\n        <td align=\"center\" class=\"biaoti\" height=\"60\">受理员业务统计表</td>\n    </tr>\n    <tr>\n        <td align=\"right\" height=\"25\">2017-01-02---2017-05-02</td>\n    </tr>\n</table>\n\n<table width=\"100%\" border=\"0\" cellspacing=\"1\" cellpadding=\"4\" bgcolor=\"#cccccc\" class=\"tabtop13\" align=\"center\">\n    <tr>\n        <td colspan=\"2\" class=\"btbg font-center titfont\" rowspan=\"2\">受理员</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">受理数</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">自办数</td>\n        <td width=\"10%\" class=\"btbg font-center titfont\" rowspan=\"2\">直接解答</td>\n        <td colspan=\"2\" class=\"btbg font-center titfont\">拟办意见</td>\n        <td colspan=\"2\" class=\"btbg font-center titfont\">返回修改</td>\n        <td colspan=\"3\" class=\"btbg font-center titfont\">工单类型</td>\n    </tr>\n    <tr>\n        <td width=\"8%\" class=\"btbg font-center\">同意</td>\n        <td width=\"8%\" class=\"btbg font-center\">比例</td>\n        <td width=\"8%\" class=\"btbg font-center\">数量</td>\n        <td width=\"8%\" class=\"btbg font-center\">比例</td>\n        <td width=\"8%\" class=\"btbg font-center\">建议件</td>\n        <td width=\"8%\" class=\"btbg font-center\">诉求件</td>\n        <td width=\"8%\" class=\"btbg font-center\">咨询件</td>\n    </tr>\n    <tr>\n        <td width=\"7%\" rowspan=\"8\" class=\"btbg1 font-center\">受理处</td>\n        <td width=\"7%\" class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2 font-center\">总计</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n    </tr>\n    <tr>\n        <td width=\"7%\" rowspan=\"8\" class=\"btbg1 font-center\">话务组</td>\n        <td width=\"7%\" class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">王艳</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2\">&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td class=\"btbg2 font-center\">总计</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n        <td class=\"btbg2 font-center\">20</td>\n    </tr>\n</table>\n<style>\n    @charset \"utf-8\";\n    /* CSS Document */\n    .tabtop13 {\n    \tmargin-top: 13px;\n    }\n    .tabtop13 td{\n    \tbackground-color:#ffffff;\n    \theight:25px;\n    \tline-height:150%;\n    }\n    .font-center{ text-align:center}\n    .btbg{background:#e9faff !important;}\n    .btbg1{background:#f2fbfe !important;}\n    .btbg2{background:#f3f3f3 !important;}\n    .biaoti{\n    \tfont-family: 微软雅黑;\n    \tfont-size: 26px;\n    \tfont-weight: bold;\n    \tborder-bottom:1px dashed #CCCCCC;\n    \tcolor: #255e95;\n    }\n    .titfont {\n    \t\n    \tfont-family: 微软雅黑;\n    \tfont-size: 16px;\n    \tfont-weight: bold;\n    \tcolor: #255e95;\n    \tbackground: url(../images/ico3.gif) no-repeat 15px center;\n    \tbackground-color:#e9faff;\n    }\n    .tabtxt2 {\n    \tfont-family: 微软雅黑;\n    \tfont-size: 14px;\n    \tfont-weight: bold;\n    \ttext-align: right;\n    \tpadding-right: 10px;\n    \tcolor:#327cd1;\n    }\n    .tabtxt3 {\n    \tfont-family: 微软雅黑;\n    \tfont-size: 14px;\n    \tpadding-left: 9px;\n    \tcolor: #000;\n    \tmargin-top: 10px;\n    \tmargin-bottom: 10px;\n    \tline-height: 20px;\n    }\n</style>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .video-box {\n            position: relative;\n            height: 100vh;\n            background-color: #C1CFF7;\n            /*进行视频裁剪*/\n            overflow: hidden;\n        }\n\n        .video-box .videobg {\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            /*保证视频内容始终居中*/\n            transform: translate(-50%, -50%);\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            min-height: 800px;\n        }\n        .lightup {\n            z-index: 1;\n            position: relative;\n        }\n\n        @font-face {\n            font-family: qianxia;\n            src: url(/qianxia.ttf);\n        }\n\n        #upper_banner {\n            text-align: left;\n            background-color:aquamarine;\n        }\n\n        #context {\n            width: 200px;\n            height: 400px;\n\n        }\n\n        ul {\n            width: 350px;\n            height: 300px;\n            text-align: left;\n        }\n        li {\n            list-style: none;\n            text-shadow: 1px 1px 2px aqua;\n            font-size: x-large;\n        }\n        \n        li::before {\n            content:\"→ \";\n            color: red;\n            text-shadow: 1px 1px 2px;\n            \n        }\n        \n        \n        a {\n            text-decoration: none;\n            color:aqua;\n            font-size: larger;\n            font-family: qianxia;\n        }\n\n        a:hover {\n            background-color: aqua;\n            color: black;\n            font-weight: bold;\n        }\n\n        #error_texts:hover {\n            text-decoration:line-through;\n            \n        }\n    </style>\n</head>\n<body>\n    <div class=\"mask\" id=\"video-box\">\n        <video class=\"video-background\" preload=\"auto\" loop playsinline autoplay\n        src=\"/bgvideo.mp4\" tabindex=\"-1\"\n        muted=\"muted\"></video>\n\n    </div>\n    <div id=\"upper_banner\" class=\"lightup\">\n\n        <strong style=\"font-size: xx-large;\"><big style=\"color:red;text-shadow: 1px 1px 1px red;\">HTML</big> 学习页</strong>\n    </div>\n\n    <div id=\"context\" class=\"lightup\">\n        <ul id = \"context_table\">\n            <li style=\"font-family: qianxia; font-size: xxx-large; text-decoration: underline; color: red\">学习进程</li>\n\n            <li><a href=\"https://Moniwarmth.top/html/html1\">Step 1 啥都没干的复习</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html2\" id=\"error_texts\">Step 2 千奇百怪的文字</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html4\">Step 3 小游戏：找密码</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html5\">Step 4 黑塔转圈圈 <img src=\"/html5/hertaa1.gif\" width=\"30px\" height=\"30px\"></a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html6\">Step 5 邦加人の奇怪语言</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html7\">Step 6 邦加人の奇怪语言</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html\">Step 7 邦加人の奇怪语言</a></li>\n        </ul>\n    </div>\n\n</body>\n</html>","source":"HTML/new_intropage.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .video-box {\n            position: relative;\n            height: 100vh;\n            background-color: #C1CFF7;\n            /*进行视频裁剪*/\n            overflow: hidden;\n        }\n\n        .video-box .videobg {\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            /*保证视频内容始终居中*/\n            transform: translate(-50%, -50%);\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            min-height: 800px;\n        }\n        .lightup {\n            z-index: 1;\n            position: relative;\n        }\n\n        @font-face {\n            font-family: qianxia;\n            src: url(/qianxia.ttf);\n        }\n\n        #upper_banner {\n            text-align: left;\n            background-color:aquamarine;\n        }\n\n        #context {\n            width: 200px;\n            height: 400px;\n\n        }\n\n        ul {\n            width: 350px;\n            height: 300px;\n            text-align: left;\n        }\n        li {\n            list-style: none;\n            text-shadow: 1px 1px 2px aqua;\n            font-size: x-large;\n        }\n        \n        li::before {\n            content:\"→ \";\n            color: red;\n            text-shadow: 1px 1px 2px;\n            \n        }\n        \n        \n        a {\n            text-decoration: none;\n            color:aqua;\n            font-size: larger;\n            font-family: qianxia;\n        }\n\n        a:hover {\n            background-color: aqua;\n            color: black;\n            font-weight: bold;\n        }\n\n        #error_texts:hover {\n            text-decoration:line-through;\n            \n        }\n    </style>\n</head>\n<body>\n    <div class=\"mask\" id=\"video-box\">\n        <video class=\"video-background\" preload=\"auto\" loop playsinline autoplay\n        src=\"/bgvideo.mp4\" tabindex=\"-1\"\n        muted=\"muted\"></video>\n\n    </div>\n    <div id=\"upper_banner\" class=\"lightup\">\n\n        <strong style=\"font-size: xx-large;\"><big style=\"color:red;text-shadow: 1px 1px 1px red;\">HTML</big> 学习页</strong>\n    </div>\n\n    <div id=\"context\" class=\"lightup\">\n        <ul id = \"context_table\">\n            <li style=\"font-family: qianxia; font-size: xxx-large; text-decoration: underline; color: red\">学习进程</li>\n\n            <li><a href=\"https://Moniwarmth.top/html/html1\">Step 1 啥都没干的复习</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html2\" id=\"error_texts\">Step 2 千奇百怪的文字</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html4\">Step 3 小游戏：找密码</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html5\">Step 4 黑塔转圈圈 <img src=\"/html5/hertaa1.gif\" width=\"30px\" height=\"30px\"></a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html6\">Step 5 邦加人の奇怪语言</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html7\">Step 6 邦加人の奇怪语言</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html\">Step 7 邦加人の奇怪语言</a></li>\n        </ul>\n    </div>\n\n</body>\n</html>","date":"2024-06-10T04:16:27.363Z","updated":"2024-06-10T04:16:27.363Z","path":"HTML/new_intropage.html","_id":"clx775nxr0009zkue450k5rr9","title":"","comments":1,"layout":"page","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .video-box {\n            position: relative;\n            height: 100vh;\n            background-color: #C1CFF7;\n            /*进行视频裁剪*/\n            overflow: hidden;\n        }\n\n        .video-box .videobg {\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            /*保证视频内容始终居中*/\n            transform: translate(-50%, -50%);\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            min-height: 800px;\n        }\n        .lightup {\n            z-index: 1;\n            position: relative;\n        }\n\n        @font-face {\n            font-family: qianxia;\n            src: url(/qianxia.ttf);\n        }\n\n        #upper_banner {\n            text-align: left;\n            background-color:aquamarine;\n        }\n\n        #context {\n            width: 200px;\n            height: 400px;\n\n        }\n\n        ul {\n            width: 350px;\n            height: 300px;\n            text-align: left;\n        }\n        li {\n            list-style: none;\n            text-shadow: 1px 1px 2px aqua;\n            font-size: x-large;\n        }\n        \n        li::before {\n            content:\"→ \";\n            color: red;\n            text-shadow: 1px 1px 2px;\n            \n        }\n        \n        \n        a {\n            text-decoration: none;\n            color:aqua;\n            font-size: larger;\n            font-family: qianxia;\n        }\n\n        a:hover {\n            background-color: aqua;\n            color: black;\n            font-weight: bold;\n        }\n\n        #error_texts:hover {\n            text-decoration:line-through;\n            \n        }\n    </style>\n</head>\n<body>\n    <div class=\"mask\" id=\"video-box\">\n        <video class=\"video-background\" preload=\"auto\" loop playsinline autoplay\n        src=\"/bgvideo.mp4\" tabindex=\"-1\"\n        muted=\"muted\"></video>\n\n    </div>\n    <div id=\"upper_banner\" class=\"lightup\">\n\n        <strong style=\"font-size: xx-large;\"><big style=\"color:red;text-shadow: 1px 1px 1px red;\">HTML</big> 学习页</strong>\n    </div>\n\n    <div id=\"context\" class=\"lightup\">\n        <ul id = \"context_table\">\n            <li style=\"font-family: qianxia; font-size: xxx-large; text-decoration: underline; color: red\">学习进程</li>\n\n            <li><a href=\"https://Moniwarmth.top/html/html1\">Step 1 啥都没干的复习</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html2\" id=\"error_texts\">Step 2 千奇百怪的文字</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html4\">Step 3 小游戏：找密码</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html5\">Step 4 黑塔转圈圈 <img src=\"/html5/hertaa1.gif\" width=\"30px\" height=\"30px\"></a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html6\">Step 5 邦加人の奇怪语言</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html7\">Step 6 邦加人の奇怪语言</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html\">Step 7 邦加人の奇怪语言</a></li>\n        </ul>\n    </div>\n\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .video-box {\n            position: relative;\n            height: 100vh;\n            background-color: #C1CFF7;\n            /*进行视频裁剪*/\n            overflow: hidden;\n        }\n\n        .video-box .videobg {\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            /*保证视频内容始终居中*/\n            transform: translate(-50%, -50%);\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            min-height: 800px;\n        }\n        .lightup {\n            z-index: 1;\n            position: relative;\n        }\n\n        @font-face {\n            font-family: qianxia;\n            src: url(/qianxia.ttf);\n        }\n\n        #upper_banner {\n            text-align: left;\n            background-color:aquamarine;\n        }\n\n        #context {\n            width: 200px;\n            height: 400px;\n\n        }\n\n        ul {\n            width: 350px;\n            height: 300px;\n            text-align: left;\n        }\n        li {\n            list-style: none;\n            text-shadow: 1px 1px 2px aqua;\n            font-size: x-large;\n        }\n        \n        li::before {\n            content:\"→ \";\n            color: red;\n            text-shadow: 1px 1px 2px;\n            \n        }\n        \n        \n        a {\n            text-decoration: none;\n            color:aqua;\n            font-size: larger;\n            font-family: qianxia;\n        }\n\n        a:hover {\n            background-color: aqua;\n            color: black;\n            font-weight: bold;\n        }\n\n        #error_texts:hover {\n            text-decoration:line-through;\n            \n        }\n    </style>\n</head>\n<body>\n    <div class=\"mask\" id=\"video-box\">\n        <video class=\"video-background\" preload=\"auto\" loop playsinline autoplay\n        src=\"/bgvideo.mp4\" tabindex=\"-1\"\n        muted=\"muted\"></video>\n\n    </div>\n    <div id=\"upper_banner\" class=\"lightup\">\n\n        <strong style=\"font-size: xx-large;\"><big style=\"color:red;text-shadow: 1px 1px 1px red;\">HTML</big> 学习页</strong>\n    </div>\n\n    <div id=\"context\" class=\"lightup\">\n        <ul id = \"context_table\">\n            <li style=\"font-family: qianxia; font-size: xxx-large; text-decoration: underline; color: red\">学习进程</li>\n\n            <li><a href=\"https://Moniwarmth.top/html/html1\">Step 1 啥都没干的复习</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html2\" id=\"error_texts\">Step 2 千奇百怪的文字</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html4\">Step 3 小游戏：找密码</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html5\">Step 4 黑塔转圈圈 <img src=\"/html5/hertaa1.gif\" width=\"30px\" height=\"30px\"></a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html6\">Step 5 邦加人の奇怪语言</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html7\">Step 6 邦加人の奇怪语言</a></li>\n            <li><a href=\"https://Moniwarmth.top/html/html\">Step 7 邦加人の奇怪语言</a></li>\n        </ul>\n    </div>\n\n</body>\n</html>"},{"_content":"\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\"/>\n    <meta name=\"referrer\" content=\"no-referrer\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"shortcut icon\" href=\"http://lf-cdn-tos.bytescm.com/obj/static/atsx-fe/campus/favicon.ico\">\n    <title>视频全屏背景</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n\n        body {\n            font-family: Gilroy Semi Bold, -apple-system, BlinkMacSystemFont, Segoe UI, PingFang SC, Hiragino Sans GB, Microsoft YaHei, Helvetica Neue, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;\n        }\n\n        .video-box {\n            position: relative;\n            height: 100vh;\n            background-color: #C1CFF7;\n            /*进行视频裁剪*/\n            overflow: hidden;\n        }\n\n        .video-box .video-background {\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            /*保证视频内容始终居中*/\n            transform: translate(-50%, -50%);\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            min-height: 800px;\n        }\n\n        .layer {\n            position: absolute;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100vh;\n            background: rgba(19, 60, 154, .2);\n        }\n\n        .layer img {\n            margin-top: 15px;\n            margin-left: 100px;\n        }\n\n        .slogan {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            width: 684px;\n            color: white;\n            text-align: center;\n        }\n\n        .slogan .subtitle {\n            font-weight: 550;\n            font-size: 20px;\n            letter-spacing: 10px;\n            margin: 0 0 16px;\n        }\n\n        .slogan .title {\n            font-weight: 550;\n            font-size: 56px;\n            margin: 0 0 16px;\n        }\n\n        .slogan .try-btn {\n            position: relative;\n            left: 50%;\n            width: 156px;\n            height: 54px;\n            line-height: 54px;\n            margin-top: 40px;\n            margin-left: -78px;\n            color: #3370ff;\n            background: white;\n            text-align: center;\n            border-radius: 100px;\n            font-weight: 600;\n        }\n\n        .content {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            height: 100vh;\n            background-color: black;\n        }\n\n        .content .avatar-box {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            color: white;\n        }\n\n        .content .avatar-box .avatar {\n            width: 80px;\n            height: 80px;\n            border-radius: 50%;\n            margin-right: 25px;\n        }\n\n        .content .avatar-box .nickname {\n            font-size: 35px;\n            font-weight: 550;\n        }\n    </style>\n</head>\n<body>\n<div class=\"video-box\">\n    <video class=\"video-background\" preload=\"auto\" loop playsinline autoplay\n           src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ha_lm_lswvlw/ljhwZthlaukjlkulzlp/portal/campus/2022-landing-page.mp4\" tabindex=\"-1\"\n           muted=\"muted\"></video>\n    <div class=\"layer\">\n        <img src=\"http://chengqige.com/svg/bytedance.svg\" alt=\"bytedance\"/>\n        <div class=\"slogan\">\n            <div class=\"subtitle\">字节跳动2023校园招聘</div>\n            <div class=\"title\">激发创造，丰富生活</div>\n            <div class=\"try-btn\" onclick=\"postNow()\">立即投递</div>\n        </div>\n    </div>\n</div>\n<div class=\"content\">\n    <div class=\"avatar-box\">\n        <img class=\"avatar\" src=\"https://avatar.csdnimg.cn/E/D/C/0_chengqige_1641776602.jpg\" alt=\"前端二次元\">\n        <p class=\"nickname\">CSDN-前端二次元~</p>\n    </div>\n</div>\n<script>\n    function postNow () {\n        location.href = 'https://jobs.bytedance.com/campus/position?keywords=&category=&location=&type=3&job_hot_flag='\n    }\n</script>\n</body>\n</html>","source":"HTML/zijie.html","raw":"\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\"/>\n    <meta name=\"referrer\" content=\"no-referrer\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"shortcut icon\" href=\"http://lf-cdn-tos.bytescm.com/obj/static/atsx-fe/campus/favicon.ico\">\n    <title>视频全屏背景</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n\n        body {\n            font-family: Gilroy Semi Bold, -apple-system, BlinkMacSystemFont, Segoe UI, PingFang SC, Hiragino Sans GB, Microsoft YaHei, Helvetica Neue, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;\n        }\n\n        .video-box {\n            position: relative;\n            height: 100vh;\n            background-color: #C1CFF7;\n            /*进行视频裁剪*/\n            overflow: hidden;\n        }\n\n        .video-box .video-background {\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            /*保证视频内容始终居中*/\n            transform: translate(-50%, -50%);\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            min-height: 800px;\n        }\n\n        .layer {\n            position: absolute;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100vh;\n            background: rgba(19, 60, 154, .2);\n        }\n\n        .layer img {\n            margin-top: 15px;\n            margin-left: 100px;\n        }\n\n        .slogan {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            width: 684px;\n            color: white;\n            text-align: center;\n        }\n\n        .slogan .subtitle {\n            font-weight: 550;\n            font-size: 20px;\n            letter-spacing: 10px;\n            margin: 0 0 16px;\n        }\n\n        .slogan .title {\n            font-weight: 550;\n            font-size: 56px;\n            margin: 0 0 16px;\n        }\n\n        .slogan .try-btn {\n            position: relative;\n            left: 50%;\n            width: 156px;\n            height: 54px;\n            line-height: 54px;\n            margin-top: 40px;\n            margin-left: -78px;\n            color: #3370ff;\n            background: white;\n            text-align: center;\n            border-radius: 100px;\n            font-weight: 600;\n        }\n\n        .content {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            height: 100vh;\n            background-color: black;\n        }\n\n        .content .avatar-box {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            color: white;\n        }\n\n        .content .avatar-box .avatar {\n            width: 80px;\n            height: 80px;\n            border-radius: 50%;\n            margin-right: 25px;\n        }\n\n        .content .avatar-box .nickname {\n            font-size: 35px;\n            font-weight: 550;\n        }\n    </style>\n</head>\n<body>\n<div class=\"video-box\">\n    <video class=\"video-background\" preload=\"auto\" loop playsinline autoplay\n           src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ha_lm_lswvlw/ljhwZthlaukjlkulzlp/portal/campus/2022-landing-page.mp4\" tabindex=\"-1\"\n           muted=\"muted\"></video>\n    <div class=\"layer\">\n        <img src=\"http://chengqige.com/svg/bytedance.svg\" alt=\"bytedance\"/>\n        <div class=\"slogan\">\n            <div class=\"subtitle\">字节跳动2023校园招聘</div>\n            <div class=\"title\">激发创造，丰富生活</div>\n            <div class=\"try-btn\" onclick=\"postNow()\">立即投递</div>\n        </div>\n    </div>\n</div>\n<div class=\"content\">\n    <div class=\"avatar-box\">\n        <img class=\"avatar\" src=\"https://avatar.csdnimg.cn/E/D/C/0_chengqige_1641776602.jpg\" alt=\"前端二次元\">\n        <p class=\"nickname\">CSDN-前端二次元~</p>\n    </div>\n</div>\n<script>\n    function postNow () {\n        location.href = 'https://jobs.bytedance.com/campus/position?keywords=&category=&location=&type=3&job_hot_flag='\n    }\n</script>\n</body>\n</html>","date":"2024-06-09T06:55:06.704Z","updated":"2024-06-09T06:55:06.704Z","path":"HTML/zijie.html","title":"","comments":1,"layout":"page","_id":"clx775nxt000dzkue05vhhukq","content":"\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\"/>\n    <meta name=\"referrer\" content=\"no-referrer\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"shortcut icon\" href=\"http://lf-cdn-tos.bytescm.com/obj/static/atsx-fe/campus/favicon.ico\">\n    <title>视频全屏背景</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n\n        body {\n            font-family: Gilroy Semi Bold, -apple-system, BlinkMacSystemFont, Segoe UI, PingFang SC, Hiragino Sans GB, Microsoft YaHei, Helvetica Neue, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;\n        }\n\n        .video-box {\n            position: relative;\n            height: 100vh;\n            background-color: #C1CFF7;\n            /*进行视频裁剪*/\n            overflow: hidden;\n        }\n\n        .video-box .video-background {\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            /*保证视频内容始终居中*/\n            transform: translate(-50%, -50%);\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            min-height: 800px;\n        }\n\n        .layer {\n            position: absolute;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100vh;\n            background: rgba(19, 60, 154, .2);\n        }\n\n        .layer img {\n            margin-top: 15px;\n            margin-left: 100px;\n        }\n\n        .slogan {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            width: 684px;\n            color: white;\n            text-align: center;\n        }\n\n        .slogan .subtitle {\n            font-weight: 550;\n            font-size: 20px;\n            letter-spacing: 10px;\n            margin: 0 0 16px;\n        }\n\n        .slogan .title {\n            font-weight: 550;\n            font-size: 56px;\n            margin: 0 0 16px;\n        }\n\n        .slogan .try-btn {\n            position: relative;\n            left: 50%;\n            width: 156px;\n            height: 54px;\n            line-height: 54px;\n            margin-top: 40px;\n            margin-left: -78px;\n            color: #3370ff;\n            background: white;\n            text-align: center;\n            border-radius: 100px;\n            font-weight: 600;\n        }\n\n        .content {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            height: 100vh;\n            background-color: black;\n        }\n\n        .content .avatar-box {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            color: white;\n        }\n\n        .content .avatar-box .avatar {\n            width: 80px;\n            height: 80px;\n            border-radius: 50%;\n            margin-right: 25px;\n        }\n\n        .content .avatar-box .nickname {\n            font-size: 35px;\n            font-weight: 550;\n        }\n    </style>\n</head>\n<body>\n<div class=\"video-box\">\n    <video class=\"video-background\" preload=\"auto\" loop playsinline autoplay\n           src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ha_lm_lswvlw/ljhwZthlaukjlkulzlp/portal/campus/2022-landing-page.mp4\" tabindex=\"-1\"\n           muted=\"muted\"></video>\n    <div class=\"layer\">\n        <img src=\"http://chengqige.com/svg/bytedance.svg\" alt=\"bytedance\"/>\n        <div class=\"slogan\">\n            <div class=\"subtitle\">字节跳动2023校园招聘</div>\n            <div class=\"title\">激发创造，丰富生活</div>\n            <div class=\"try-btn\" onclick=\"postNow()\">立即投递</div>\n        </div>\n    </div>\n</div>\n<div class=\"content\">\n    <div class=\"avatar-box\">\n        <img class=\"avatar\" src=\"https://avatar.csdnimg.cn/E/D/C/0_chengqige_1641776602.jpg\" alt=\"前端二次元\">\n        <p class=\"nickname\">CSDN-前端二次元~</p>\n    </div>\n</div>\n<script>\n    function postNow () {\n        location.href = 'https://jobs.bytedance.com/campus/position?keywords=&category=&location=&type=3&job_hot_flag='\n    }\n</script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\"/>\n    <meta name=\"referrer\" content=\"no-referrer\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"shortcut icon\" href=\"http://lf-cdn-tos.bytescm.com/obj/static/atsx-fe/campus/favicon.ico\">\n    <title>视频全屏背景</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n\n        body {\n            font-family: Gilroy Semi Bold, -apple-system, BlinkMacSystemFont, Segoe UI, PingFang SC, Hiragino Sans GB, Microsoft YaHei, Helvetica Neue, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;\n        }\n\n        .video-box {\n            position: relative;\n            height: 100vh;\n            background-color: #C1CFF7;\n            /*进行视频裁剪*/\n            overflow: hidden;\n        }\n\n        .video-box .video-background {\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            /*保证视频内容始终居中*/\n            transform: translate(-50%, -50%);\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            min-height: 800px;\n        }\n\n        .layer {\n            position: absolute;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100vh;\n            background: rgba(19, 60, 154, .2);\n        }\n\n        .layer img {\n            margin-top: 15px;\n            margin-left: 100px;\n        }\n\n        .slogan {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            width: 684px;\n            color: white;\n            text-align: center;\n        }\n\n        .slogan .subtitle {\n            font-weight: 550;\n            font-size: 20px;\n            letter-spacing: 10px;\n            margin: 0 0 16px;\n        }\n\n        .slogan .title {\n            font-weight: 550;\n            font-size: 56px;\n            margin: 0 0 16px;\n        }\n\n        .slogan .try-btn {\n            position: relative;\n            left: 50%;\n            width: 156px;\n            height: 54px;\n            line-height: 54px;\n            margin-top: 40px;\n            margin-left: -78px;\n            color: #3370ff;\n            background: white;\n            text-align: center;\n            border-radius: 100px;\n            font-weight: 600;\n        }\n\n        .content {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            height: 100vh;\n            background-color: black;\n        }\n\n        .content .avatar-box {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            color: white;\n        }\n\n        .content .avatar-box .avatar {\n            width: 80px;\n            height: 80px;\n            border-radius: 50%;\n            margin-right: 25px;\n        }\n\n        .content .avatar-box .nickname {\n            font-size: 35px;\n            font-weight: 550;\n        }\n    </style>\n</head>\n<body>\n<div class=\"video-box\">\n    <video class=\"video-background\" preload=\"auto\" loop playsinline autoplay\n           src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ha_lm_lswvlw/ljhwZthlaukjlkulzlp/portal/campus/2022-landing-page.mp4\" tabindex=\"-1\"\n           muted=\"muted\"></video>\n    <div class=\"layer\">\n        <img src=\"http://chengqige.com/svg/bytedance.svg\" alt=\"bytedance\"/>\n        <div class=\"slogan\">\n            <div class=\"subtitle\">字节跳动2023校园招聘</div>\n            <div class=\"title\">激发创造，丰富生活</div>\n            <div class=\"try-btn\" onclick=\"postNow()\">立即投递</div>\n        </div>\n    </div>\n</div>\n<div class=\"content\">\n    <div class=\"avatar-box\">\n        <img class=\"avatar\" src=\"https://avatar.csdnimg.cn/E/D/C/0_chengqige_1641776602.jpg\" alt=\"前端二次元\">\n        <p class=\"nickname\">CSDN-前端二次元~</p>\n    </div>\n</div>\n<script>\n    function postNow () {\n        location.href = 'https://jobs.bytedance.com/campus/position?keywords=&category=&location=&type=3&job_hot_flag='\n    }\n</script>\n</body>\n</html>"},{"title":"tags","date":"2023-08-30T10:39:08.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-08-30 18:39:08\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-08-30T10:40:01.779Z","path":"tags/index.html","comments":1,"_id":"clx775nxu000fzkue0fn28i2b","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .tablebd td {\n            background-color: aliceblue;\n        }\n    </style>\n</head>\n<body>\n    <table border = \"0\" cellpadding = \"7\" cellspacing = \"1\" bgcolor=\"black\">\n        <thead style=\"background-color: slategray; \">\n            <tr>\n                <th>属性</th>\n                <th>值</th>\n                <th>描述</th>\n            </tr>\n            <tbody class=\"tablebd\">\n                <tr>\n                    <td style=\"color:green\">align</td>\n                    <td>left<br/>right<br/>center<br/>justify</td>\n                    <td>HTML不支持，HTML4.01已废弃，规定div元素中的内容的对齐方式。</td>\n                </tr>\n            </tbody>\n        </thead>\n    </table>\n</body>\n</html>","source":"HTML/trial.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .tablebd td {\n            background-color: aliceblue;\n        }\n    </style>\n</head>\n<body>\n    <table border = \"0\" cellpadding = \"7\" cellspacing = \"1\" bgcolor=\"black\">\n        <thead style=\"background-color: slategray; \">\n            <tr>\n                <th>属性</th>\n                <th>值</th>\n                <th>描述</th>\n            </tr>\n            <tbody class=\"tablebd\">\n                <tr>\n                    <td style=\"color:green\">align</td>\n                    <td>left<br/>right<br/>center<br/>justify</td>\n                    <td>HTML不支持，HTML4.01已废弃，规定div元素中的内容的对齐方式。</td>\n                </tr>\n            </tbody>\n        </thead>\n    </table>\n</body>\n</html>","date":"2024-06-09T01:55:51.062Z","updated":"2024-06-09T01:55:51.062Z","path":"HTML/trial.html","title":"","comments":1,"layout":"page","_id":"clx775nxw000jzkue2fkihd9g","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .tablebd td {\n            background-color: aliceblue;\n        }\n    </style>\n</head>\n<body>\n    <table border = \"0\" cellpadding = \"7\" cellspacing = \"1\" bgcolor=\"black\">\n        <thead style=\"background-color: slategray; \">\n            <tr>\n                <th>属性</th>\n                <th>值</th>\n                <th>描述</th>\n            </tr>\n            <tbody class=\"tablebd\">\n                <tr>\n                    <td style=\"color:green\">align</td>\n                    <td>left<br/>right<br/>center<br/>justify</td>\n                    <td>HTML不支持，HTML4.01已废弃，规定div元素中的内容的对齐方式。</td>\n                </tr>\n            </tbody>\n        </thead>\n    </table>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .tablebd td {\n            background-color: aliceblue;\n        }\n    </style>\n</head>\n<body>\n    <table border = \"0\" cellpadding = \"7\" cellspacing = \"1\" bgcolor=\"black\">\n        <thead style=\"background-color: slategray; \">\n            <tr>\n                <th>属性</th>\n                <th>值</th>\n                <th>描述</th>\n            </tr>\n            <tbody class=\"tablebd\">\n                <tr>\n                    <td style=\"color:green\">align</td>\n                    <td>left<br/>right<br/>center<br/>justify</td>\n                    <td>HTML不支持，HTML4.01已废弃，规定div元素中的内容的对齐方式。</td>\n                </tr>\n            </tbody>\n        </thead>\n    </table>\n</body>\n</html>"},{"_content":"<!Doctype html>\n<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<title>May14th 复习</title>\n</head>\n\n<body>\n\t<h1>May14th 复习</h1>\n\t<p>如果你能看到这行文字，说明想法可行哦，恭喜！！😀,代码如下！</p>\n    <p>还不会做代码高亮捏。。。暂时只学了个这</p>\n\n    <pre>\n        <code>\n        &lt;!Doctype html&gt;\n        &lt;html&gt;\n            &lt;head&gt;\n            &lt;meta charset=\"utf-8\"&gt;\n            &lt;title&gt;May14th 复习&lt;/title&gt;\n        &lt;/head&gt;\n        \n        &lt;body&gt;\n            &lt;h1&gt;May14th 复习&lt;/h1&gt;\n            &lt;p&gt;如果你能看到这行文字，说明想法可行哦，恭喜！！😀,代码如下！&lt;/p&gt;\n            &lt;p&gt;还不会做代码高亮捏。。。只能截图咯&lt;/p&gt;\n            &lt;img src=\"HTML.png\" width=\"500\"&gt;\n            &lt;br&gt;\n            &lt;p&gt;送你一张图哦，希望能够帮你找到实现梦想的动力！&lt;/p&gt;\n            &lt;img src=\"encourage.png\" width=\"500\"&gt;\n            &lt;br&gt;\n        \n            &lt;a href=\"https://moniwarmth.top/html\"&gt;&lt;button&gt;点我返回上一级&lt;/button&gt;&lt;/a&gt;\n            &lt;a href=\"https://moniwarmth.top\"&gt;&lt;button&gt;点我返回博客&lt;/button&gt;&lt;/a&gt;\n        &lt;/body&gt;\n        &lt;/html&gt;\n        </code>\n    </pre>\n        \n    <br>\n    <p>送你一张图哦，希望能够帮你找到实现梦想的动力！</p>\n    <img src=\"encourage.png\" width=\"500\">\n    <br>\n\n    <a href=\"https://moniwarmth.top/html\"><button>点我返回上一级</button></a>\n    <a href=\"https://moniwarmth.top\"><button>点我返回博客</button></a>\n</body>\n</html>","source":"HTML/html1/index.html","raw":"<!Doctype html>\n<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<title>May14th 复习</title>\n</head>\n\n<body>\n\t<h1>May14th 复习</h1>\n\t<p>如果你能看到这行文字，说明想法可行哦，恭喜！！😀,代码如下！</p>\n    <p>还不会做代码高亮捏。。。暂时只学了个这</p>\n\n    <pre>\n        <code>\n        &lt;!Doctype html&gt;\n        &lt;html&gt;\n            &lt;head&gt;\n            &lt;meta charset=\"utf-8\"&gt;\n            &lt;title&gt;May14th 复习&lt;/title&gt;\n        &lt;/head&gt;\n        \n        &lt;body&gt;\n            &lt;h1&gt;May14th 复习&lt;/h1&gt;\n            &lt;p&gt;如果你能看到这行文字，说明想法可行哦，恭喜！！😀,代码如下！&lt;/p&gt;\n            &lt;p&gt;还不会做代码高亮捏。。。只能截图咯&lt;/p&gt;\n            &lt;img src=\"HTML.png\" width=\"500\"&gt;\n            &lt;br&gt;\n            &lt;p&gt;送你一张图哦，希望能够帮你找到实现梦想的动力！&lt;/p&gt;\n            &lt;img src=\"encourage.png\" width=\"500\"&gt;\n            &lt;br&gt;\n        \n            &lt;a href=\"https://moniwarmth.top/html\"&gt;&lt;button&gt;点我返回上一级&lt;/button&gt;&lt;/a&gt;\n            &lt;a href=\"https://moniwarmth.top\"&gt;&lt;button&gt;点我返回博客&lt;/button&gt;&lt;/a&gt;\n        &lt;/body&gt;\n        &lt;/html&gt;\n        </code>\n    </pre>\n        \n    <br>\n    <p>送你一张图哦，希望能够帮你找到实现梦想的动力！</p>\n    <img src=\"encourage.png\" width=\"500\">\n    <br>\n\n    <a href=\"https://moniwarmth.top/html\"><button>点我返回上一级</button></a>\n    <a href=\"https://moniwarmth.top\"><button>点我返回博客</button></a>\n</body>\n</html>","date":"2024-06-01T15:52:46.969Z","updated":"2024-05-16T23:29:36.590Z","path":"HTML/html1/index.html","title":"","comments":1,"layout":"page","_id":"clx775nxx000lzkuear6ngkgk","content":"<!Doctype html>\n<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<title>May14th 复习</title>\n</head>\n\n<body>\n\t<h1>May14th 复习</h1>\n\t<p>如果你能看到这行文字，说明想法可行哦，恭喜！！😀,代码如下！</p>\n    <p>还不会做代码高亮捏。。。暂时只学了个这</p>\n\n    <pre>\n        <code>\n        &lt;!Doctype html&gt;\n        &lt;html&gt;\n            &lt;head&gt;\n            &lt;meta charset=\"utf-8\"&gt;\n            &lt;title&gt;May14th 复习&lt;/title&gt;\n        &lt;/head&gt;\n        \n        &lt;body&gt;\n            &lt;h1&gt;May14th 复习&lt;/h1&gt;\n            &lt;p&gt;如果你能看到这行文字，说明想法可行哦，恭喜！！😀,代码如下！&lt;/p&gt;\n            &lt;p&gt;还不会做代码高亮捏。。。只能截图咯&lt;/p&gt;\n            &lt;img src=\"HTML.png\" width=\"500\"&gt;\n            &lt;br&gt;\n            &lt;p&gt;送你一张图哦，希望能够帮你找到实现梦想的动力！&lt;/p&gt;\n            &lt;img src=\"encourage.png\" width=\"500\"&gt;\n            &lt;br&gt;\n        \n            &lt;a href=\"https://moniwarmth.top/html\"&gt;&lt;button&gt;点我返回上一级&lt;/button&gt;&lt;/a&gt;\n            &lt;a href=\"https://moniwarmth.top\"&gt;&lt;button&gt;点我返回博客&lt;/button&gt;&lt;/a&gt;\n        &lt;/body&gt;\n        &lt;/html&gt;\n        </code>\n    </pre>\n        \n    <br>\n    <p>送你一张图哦，希望能够帮你找到实现梦想的动力！</p>\n    <img src=\"encourage.png\" width=\"500\">\n    <br>\n\n    <a href=\"https://moniwarmth.top/html\"><button>点我返回上一级</button></a>\n    <a href=\"https://moniwarmth.top\"><button>点我返回博客</button></a>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!Doctype html>\n<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<title>May14th 复习</title>\n</head>\n\n<body>\n\t<h1>May14th 复习</h1>\n\t<p>如果你能看到这行文字，说明想法可行哦，恭喜！！😀,代码如下！</p>\n    <p>还不会做代码高亮捏。。。暂时只学了个这</p>\n\n    <pre>\n        <code>\n        &lt;!Doctype html&gt;\n        &lt;html&gt;\n            &lt;head&gt;\n            &lt;meta charset=\"utf-8\"&gt;\n            &lt;title&gt;May14th 复习&lt;/title&gt;\n        &lt;/head&gt;\n        \n        &lt;body&gt;\n            &lt;h1&gt;May14th 复习&lt;/h1&gt;\n            &lt;p&gt;如果你能看到这行文字，说明想法可行哦，恭喜！！😀,代码如下！&lt;/p&gt;\n            &lt;p&gt;还不会做代码高亮捏。。。只能截图咯&lt;/p&gt;\n            &lt;img src=\"HTML.png\" width=\"500\"&gt;\n            &lt;br&gt;\n            &lt;p&gt;送你一张图哦，希望能够帮你找到实现梦想的动力！&lt;/p&gt;\n            &lt;img src=\"encourage.png\" width=\"500\"&gt;\n            &lt;br&gt;\n        \n            &lt;a href=\"https://moniwarmth.top/html\"&gt;&lt;button&gt;点我返回上一级&lt;/button&gt;&lt;/a&gt;\n            &lt;a href=\"https://moniwarmth.top\"&gt;&lt;button&gt;点我返回博客&lt;/button&gt;&lt;/a&gt;\n        &lt;/body&gt;\n        &lt;/html&gt;\n        </code>\n    </pre>\n        \n    <br>\n    <p>送你一张图哦，希望能够帮你找到实现梦想的动力！</p>\n    <img src=\"encourage.png\" width=\"500\">\n    <br>\n\n    <a href=\"https://moniwarmth.top/html\"><button>点我返回上一级</button></a>\n    <a href=\"https://moniwarmth.top\"><button>点我返回博客</button></a>\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <dfn>定义项目</dfn><br>\n    <code>一段电脑代码 print(\"Hello World\")</code><br>\n    <samp>计算机样本</samp><br>\n    <kbd>键盘输入</kbd><br>\n    <var>变量</var><br/>\n    <pre>预格式文本</pre>\n</body>\n</html>\n<!-- 编码测试，同时提醒一下英文感叹号+enter是html的模板 -->","source":"HTML/html3/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <dfn>定义项目</dfn><br>\n    <code>一段电脑代码 print(\"Hello World\")</code><br>\n    <samp>计算机样本</samp><br>\n    <kbd>键盘输入</kbd><br>\n    <var>变量</var><br/>\n    <pre>预格式文本</pre>\n</body>\n</html>\n<!-- 编码测试，同时提醒一下英文感叹号+enter是html的模板 -->","date":"2024-06-01T15:52:46.969Z","updated":"2024-05-18T15:37:42.347Z","path":"HTML/html3/index.html","title":"","comments":1,"layout":"page","_id":"clx775nxz000ozkuefdscexfh","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <dfn>定义项目</dfn><br>\n    <code>一段电脑代码 print(\"Hello World\")</code><br>\n    <samp>计算机样本</samp><br>\n    <kbd>键盘输入</kbd><br>\n    <var>变量</var><br/>\n    <pre>预格式文本</pre>\n</body>\n</html>\n<!-- 编码测试，同时提醒一下英文感叹号+enter是html的模板 -->","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <dfn>定义项目</dfn><br>\n    <code>一段电脑代码 print(\"Hello World\")</code><br>\n    <samp>计算机样本</samp><br>\n    <kbd>键盘输入</kbd><br>\n    <var>变量</var><br/>\n    <pre>预格式文本</pre>\n</body>\n</html>\n<!-- 编码测试，同时提醒一下英文感叹号+enter是html的模板 -->"},{"_content":"<!Doctype html>\n<html>\n<head>\n    <meta charset ='utf-8'>\n    <title>千奇百怪的文字捏！</title>\n</head>\n\n<body>\n    <p>一些<b>千奇</b><em>百怪</em>的<sup>文</sup><sub>字</sub>捏嘿嘿🤭。</p>\n    <p>甚至还有<code>代码高亮哦！</code></p>\n    <hr/>\n    <br/>\n\n    <small><sup>不行，我必须得用这个整个活...</sup></small>\n    <br/>\n    <blockquote><ins><b>一个悠闲的午后，风轻轻吹过，太阳在树的掩映下柔和了许多</b></ins></blockquote>\n    <br>\n    <big><b>你好！</b>姑娘</big>\n    <small><sub>(>__<)</sub></small>\n    <br/>\n    <small>你还记得我们那天去喝茶吗</small>\n    <pre>              --记得啊，怎么了。</pre>\n    <b>那个...那个,</b>\n    <small>我想说，你的品味真好啊。</small>\n    <p>我之前还没有喝过这个口味呢，那次之后我真忘不了，谢谢你<small><sub>(^ _ ^)</sub></small></p>\n    <pre>               --这样啊，嗯嗯。</pre>\n    <p>那个，<b>以后的话，我们还能去喝茶吗</b>,<small>就那家店。。</small></p>\n    <pre>               --好的呢。</pre>\n    <em>叮铃铃。。。小故事结束喽</em>\n    <br/>\n    <img src=\"Little_story.png\" width = \"400\">\n    <hr/>\n\n    <p>仍然在下面附一个代码图哦，这次编写<b>的确</b>是把<abbr title = \"真滴有点锻炼！\"><sub><b>\"毕生所学\"</b></sub></sub></abbr>都用上了😂</p>\n    <img src=\"code.png\" width = \"600\">\n    <hr>\n    <small><b>严肃地说！！咳咳。 在现在的标准里吧，我们一般是用<code>&lt;strong&gt;</code>标签和<code>&lt;em&gt;</code>标签分别表示粗体与斜体的，我没使用，自觉反省！</b></small>\n</body>\n<html>","source":"HTML/html2/index.html","raw":"<!Doctype html>\n<html>\n<head>\n    <meta charset ='utf-8'>\n    <title>千奇百怪的文字捏！</title>\n</head>\n\n<body>\n    <p>一些<b>千奇</b><em>百怪</em>的<sup>文</sup><sub>字</sub>捏嘿嘿🤭。</p>\n    <p>甚至还有<code>代码高亮哦！</code></p>\n    <hr/>\n    <br/>\n\n    <small><sup>不行，我必须得用这个整个活...</sup></small>\n    <br/>\n    <blockquote><ins><b>一个悠闲的午后，风轻轻吹过，太阳在树的掩映下柔和了许多</b></ins></blockquote>\n    <br>\n    <big><b>你好！</b>姑娘</big>\n    <small><sub>(>__<)</sub></small>\n    <br/>\n    <small>你还记得我们那天去喝茶吗</small>\n    <pre>              --记得啊，怎么了。</pre>\n    <b>那个...那个,</b>\n    <small>我想说，你的品味真好啊。</small>\n    <p>我之前还没有喝过这个口味呢，那次之后我真忘不了，谢谢你<small><sub>(^ _ ^)</sub></small></p>\n    <pre>               --这样啊，嗯嗯。</pre>\n    <p>那个，<b>以后的话，我们还能去喝茶吗</b>,<small>就那家店。。</small></p>\n    <pre>               --好的呢。</pre>\n    <em>叮铃铃。。。小故事结束喽</em>\n    <br/>\n    <img src=\"Little_story.png\" width = \"400\">\n    <hr/>\n\n    <p>仍然在下面附一个代码图哦，这次编写<b>的确</b>是把<abbr title = \"真滴有点锻炼！\"><sub><b>\"毕生所学\"</b></sub></sub></abbr>都用上了😂</p>\n    <img src=\"code.png\" width = \"600\">\n    <hr>\n    <small><b>严肃地说！！咳咳。 在现在的标准里吧，我们一般是用<code>&lt;strong&gt;</code>标签和<code>&lt;em&gt;</code>标签分别表示粗体与斜体的，我没使用，自觉反省！</b></small>\n</body>\n<html>","date":"2024-06-01T15:52:46.969Z","updated":"2024-05-18T15:01:49.427Z","path":"HTML/html2/index.html","title":"","comments":1,"layout":"page","_id":"clx775ny0000rzkuefzhgh8uw","content":"<!Doctype html>\n<html>\n<head>\n    <meta charset ='utf-8'>\n    <title>千奇百怪的文字捏！</title>\n</head>\n\n<body>\n    <p>一些<b>千奇</b><em>百怪</em>的<sup>文</sup><sub>字</sub>捏嘿嘿🤭。</p>\n    <p>甚至还有<code>代码高亮哦！</code></p>\n    <hr/>\n    <br/>\n\n    <small><sup>不行，我必须得用这个整个活...</sup></small>\n    <br/>\n    <blockquote><ins><b>一个悠闲的午后，风轻轻吹过，太阳在树的掩映下柔和了许多</b></ins></blockquote>\n    <br>\n    <big><b>你好！</b>姑娘</big>\n    <small><sub>(>__<)</sub></small>\n    <br/>\n    <small>你还记得我们那天去喝茶吗</small>\n    <pre>              --记得啊，怎么了。</pre>\n    <b>那个...那个,</b>\n    <small>我想说，你的品味真好啊。</small>\n    <p>我之前还没有喝过这个口味呢，那次之后我真忘不了，谢谢你<small><sub>(^ _ ^)</sub></small></p>\n    <pre>               --这样啊，嗯嗯。</pre>\n    <p>那个，<b>以后的话，我们还能去喝茶吗</b>,<small>就那家店。。</small></p>\n    <pre>               --好的呢。</pre>\n    <em>叮铃铃。。。小故事结束喽</em>\n    <br/>\n    <img src=\"Little_story.png\" width = \"400\">\n    <hr/>\n\n    <p>仍然在下面附一个代码图哦，这次编写<b>的确</b>是把<abbr title = \"真滴有点锻炼！\"><sub><b>\"毕生所学\"</b></sub></sub></abbr>都用上了😂</p>\n    <img src=\"code.png\" width = \"600\">\n    <hr>\n    <small><b>严肃地说！！咳咳。 在现在的标准里吧，我们一般是用<code>&lt;strong&gt;</code>标签和<code>&lt;em&gt;</code>标签分别表示粗体与斜体的，我没使用，自觉反省！</b></small>\n</body>\n<html>","site":{"data":{}},"excerpt":"","more":"<!Doctype html>\n<html>\n<head>\n    <meta charset ='utf-8'>\n    <title>千奇百怪的文字捏！</title>\n</head>\n\n<body>\n    <p>一些<b>千奇</b><em>百怪</em>的<sup>文</sup><sub>字</sub>捏嘿嘿🤭。</p>\n    <p>甚至还有<code>代码高亮哦！</code></p>\n    <hr/>\n    <br/>\n\n    <small><sup>不行，我必须得用这个整个活...</sup></small>\n    <br/>\n    <blockquote><ins><b>一个悠闲的午后，风轻轻吹过，太阳在树的掩映下柔和了许多</b></ins></blockquote>\n    <br>\n    <big><b>你好！</b>姑娘</big>\n    <small><sub>(>__<)</sub></small>\n    <br/>\n    <small>你还记得我们那天去喝茶吗</small>\n    <pre>              --记得啊，怎么了。</pre>\n    <b>那个...那个,</b>\n    <small>我想说，你的品味真好啊。</small>\n    <p>我之前还没有喝过这个口味呢，那次之后我真忘不了，谢谢你<small><sub>(^ _ ^)</sub></small></p>\n    <pre>               --这样啊，嗯嗯。</pre>\n    <p>那个，<b>以后的话，我们还能去喝茶吗</b>,<small>就那家店。。</small></p>\n    <pre>               --好的呢。</pre>\n    <em>叮铃铃。。。小故事结束喽</em>\n    <br/>\n    <img src=\"Little_story.png\" width = \"400\">\n    <hr/>\n\n    <p>仍然在下面附一个代码图哦，这次编写<b>的确</b>是把<abbr title = \"真滴有点锻炼！\"><sub><b>\"毕生所学\"</b></sub></sub></abbr>都用上了😂</p>\n    <img src=\"code.png\" width = \"600\">\n    <hr>\n    <small><b>严肃地说！！咳咳。 在现在的标准里吧，我们一般是用<code>&lt;strong&gt;</code>标签和<code>&lt;em&gt;</code>标签分别表示粗体与斜体的，我没使用，自觉反省！</b></small>\n</body>\n<html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <img src = \"circling.gif\">\n    <p>抱歉哦，答案并不是这个。。</p>\n    <a href=\"http://moniwarmth.top/html/html4\" target = \"_blank\"><button>点我返回起始页面</button></a>\n</body>\n</html>","source":"HTML/html4/blank.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <img src = \"circling.gif\">\n    <p>抱歉哦，答案并不是这个。。</p>\n    <a href=\"http://moniwarmth.top/html/html4\" target = \"_blank\"><button>点我返回起始页面</button></a>\n</body>\n</html>","date":"2024-06-01T15:52:46.969Z","updated":"2024-05-21T12:39:10.747Z","path":"HTML/html4/blank.html","title":"","comments":1,"layout":"page","_id":"clx775ny2000vzkuebqewfmsz","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <img src = \"circling.gif\">\n    <p>抱歉哦，答案并不是这个。。</p>\n    <a href=\"http://moniwarmth.top/html/html4\" target = \"_blank\"><button>点我返回起始页面</button></a>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <img src = \"circling.gif\">\n    <p>抱歉哦，答案并不是这个。。</p>\n    <a href=\"http://moniwarmth.top/html/html4\" target = \"_blank\"><button>点我返回起始页面</button></a>\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>恭喜找到了答案！！</title>\n</head>\n<body>\n    <img src = \"good.png\" width = \"100\">\n    <p>恭喜你找到了答案！长久支持，无以为报<br/>如果你认识我，来微信找我吧！</p>\n    <a href=\"http://moniwarmth.top/html/html4\"><button>点我返回起始页面</button></a>\n</body>\n</html>","source":"HTML/html4/the_answer.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>恭喜找到了答案！！</title>\n</head>\n<body>\n    <img src = \"good.png\" width = \"100\">\n    <p>恭喜你找到了答案！长久支持，无以为报<br/>如果你认识我，来微信找我吧！</p>\n    <a href=\"http://moniwarmth.top/html/html4\"><button>点我返回起始页面</button></a>\n</body>\n</html>","date":"2024-06-01T15:52:46.969Z","updated":"2024-05-20T15:08:32.722Z","path":"HTML/html4/the_answer.html","title":"","comments":1,"layout":"page","_id":"clx775ny2000yzkue173i4hts","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>恭喜找到了答案！！</title>\n</head>\n<body>\n    <img src = \"good.png\" width = \"100\">\n    <p>恭喜你找到了答案！长久支持，无以为报<br/>如果你认识我，来微信找我吧！</p>\n    <a href=\"http://moniwarmth.top/html/html4\"><button>点我返回起始页面</button></a>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>恭喜找到了答案！！</title>\n</head>\n<body>\n    <img src = \"good.png\" width = \"100\">\n    <p>恭喜你找到了答案！长久支持，无以为报<br/>如果你认识我，来微信找我吧！</p>\n    <a href=\"http://moniwarmth.top/html/html4\"><button>点我返回起始页面</button></a>\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>迷宫</title>\n</head>\n<body>\n    <button onclick = \"change_Image_Words()\"><blockquote><img src=\"girl.jpg\" width = 200 id = \"pic\"></blockquote></button>\n    <hr/>\n    <blockquote id = \"talking\">\"哟,看看这是谁来了\"。</blockquote>\n    <p><strong>暮暖今天想让你去他的迷宫转转</strong><br/>你可以通过<b>点击这个网页的一些地方</b>来得到<button_type = \"button\" onclick = \"change_state()\">密码</button_type><br/>最后通过点击<ins>文件的顺序</ins>来导向到正确的html文件上<br/>Good luck! :p</p>\n\n    <script>\n        var a = 0, maxa = 6, pica = 2, end = 7, nofind = 8, state = 0;\n        var speakings = [\"点我干嘛，我脸上又没有密码 😕\", \"别点啦，脸上有点痒\", \"好好好，我站起来和你好好说话好吧\", \"你想要密码是吧\", \"我保证密码一定在这个页面的某处\", \"emmmmm, 让我想想🤔\", \"我觉得它肯定在我下面，我能感受到它的气息！\", \"喏，这不就是密码啦！你真棒！\", \"你再点我也没用啦，再跟你说就不好玩啦!\"]\n        function change_Image_Words(){\n            now_image = document.getElementById(\"pic\");\n            now_word = document.getElementById(\"talking\");\n            if(state == 1)\n                now_word.textContent = speakings[end];\n            else if(a <= maxa - 1)\n            {\n                a += 1;\n                if(a >= 2)\n                    now_image.src = \"girlsit.gif\"\n                now_word.textContent = speakings[a];\n            } \n            else if(state == 0)\n                now_word.textContent = speakings[nofind];\n        } \n        function change_state(){\n            alert(\"密码是7!\");\n            state = 1;\n            change_Image_Words();\n        }\n    </script>\n\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">1</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">2</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">3</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">4</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">5</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">6</a>\n    <a href = \"https://moniwarmth.top/html/html4/the_answer.html\">7</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">8</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">9</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">0</a> \n\n    <br/>\n    <hr/>\n    <b>由于博客设置，请在点击图片按钮的时候不要点击图片，点击按钮边框便可以正常玩耍</b>\n\n   \n    <br/>\n</body>\n</html>","source":"HTML/html4/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>迷宫</title>\n</head>\n<body>\n    <button onclick = \"change_Image_Words()\"><blockquote><img src=\"girl.jpg\" width = 200 id = \"pic\"></blockquote></button>\n    <hr/>\n    <blockquote id = \"talking\">\"哟,看看这是谁来了\"。</blockquote>\n    <p><strong>暮暖今天想让你去他的迷宫转转</strong><br/>你可以通过<b>点击这个网页的一些地方</b>来得到<button_type = \"button\" onclick = \"change_state()\">密码</button_type><br/>最后通过点击<ins>文件的顺序</ins>来导向到正确的html文件上<br/>Good luck! :p</p>\n\n    <script>\n        var a = 0, maxa = 6, pica = 2, end = 7, nofind = 8, state = 0;\n        var speakings = [\"点我干嘛，我脸上又没有密码 😕\", \"别点啦，脸上有点痒\", \"好好好，我站起来和你好好说话好吧\", \"你想要密码是吧\", \"我保证密码一定在这个页面的某处\", \"emmmmm, 让我想想🤔\", \"我觉得它肯定在我下面，我能感受到它的气息！\", \"喏，这不就是密码啦！你真棒！\", \"你再点我也没用啦，再跟你说就不好玩啦!\"]\n        function change_Image_Words(){\n            now_image = document.getElementById(\"pic\");\n            now_word = document.getElementById(\"talking\");\n            if(state == 1)\n                now_word.textContent = speakings[end];\n            else if(a <= maxa - 1)\n            {\n                a += 1;\n                if(a >= 2)\n                    now_image.src = \"girlsit.gif\"\n                now_word.textContent = speakings[a];\n            } \n            else if(state == 0)\n                now_word.textContent = speakings[nofind];\n        } \n        function change_state(){\n            alert(\"密码是7!\");\n            state = 1;\n            change_Image_Words();\n        }\n    </script>\n\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">1</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">2</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">3</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">4</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">5</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">6</a>\n    <a href = \"https://moniwarmth.top/html/html4/the_answer.html\">7</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">8</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">9</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">0</a> \n\n    <br/>\n    <hr/>\n    <b>由于博客设置，请在点击图片按钮的时候不要点击图片，点击按钮边框便可以正常玩耍</b>\n\n   \n    <br/>\n</body>\n</html>","date":"2024-06-01T15:52:46.969Z","updated":"2024-05-20T14:54:44.854Z","path":"HTML/html4/index.html","title":"","comments":1,"layout":"page","_id":"clx775ny40012zkueglsb08z3","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>迷宫</title>\n</head>\n<body>\n    <button onclick = \"change_Image_Words()\"><blockquote><img src=\"girl.jpg\" width = 200 id = \"pic\"></blockquote></button>\n    <hr/>\n    <blockquote id = \"talking\">\"哟,看看这是谁来了\"。</blockquote>\n    <p><strong>暮暖今天想让你去他的迷宫转转</strong><br/>你可以通过<b>点击这个网页的一些地方</b>来得到<button_type = \"button\" onclick = \"change_state()\">密码</button_type><br/>最后通过点击<ins>文件的顺序</ins>来导向到正确的html文件上<br/>Good luck! :p</p>\n\n    <script>\n        var a = 0, maxa = 6, pica = 2, end = 7, nofind = 8, state = 0;\n        var speakings = [\"点我干嘛，我脸上又没有密码 😕\", \"别点啦，脸上有点痒\", \"好好好，我站起来和你好好说话好吧\", \"你想要密码是吧\", \"我保证密码一定在这个页面的某处\", \"emmmmm, 让我想想🤔\", \"我觉得它肯定在我下面，我能感受到它的气息！\", \"喏，这不就是密码啦！你真棒！\", \"你再点我也没用啦，再跟你说就不好玩啦!\"]\n        function change_Image_Words(){\n            now_image = document.getElementById(\"pic\");\n            now_word = document.getElementById(\"talking\");\n            if(state == 1)\n                now_word.textContent = speakings[end];\n            else if(a <= maxa - 1)\n            {\n                a += 1;\n                if(a >= 2)\n                    now_image.src = \"girlsit.gif\"\n                now_word.textContent = speakings[a];\n            } \n            else if(state == 0)\n                now_word.textContent = speakings[nofind];\n        } \n        function change_state(){\n            alert(\"密码是7!\");\n            state = 1;\n            change_Image_Words();\n        }\n    </script>\n\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">1</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">2</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">3</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">4</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">5</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">6</a>\n    <a href = \"https://moniwarmth.top/html/html4/the_answer.html\">7</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">8</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">9</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">0</a> \n\n    <br/>\n    <hr/>\n    <b>由于博客设置，请在点击图片按钮的时候不要点击图片，点击按钮边框便可以正常玩耍</b>\n\n   \n    <br/>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>迷宫</title>\n</head>\n<body>\n    <button onclick = \"change_Image_Words()\"><blockquote><img src=\"girl.jpg\" width = 200 id = \"pic\"></blockquote></button>\n    <hr/>\n    <blockquote id = \"talking\">\"哟,看看这是谁来了\"。</blockquote>\n    <p><strong>暮暖今天想让你去他的迷宫转转</strong><br/>你可以通过<b>点击这个网页的一些地方</b>来得到<button_type = \"button\" onclick = \"change_state()\">密码</button_type><br/>最后通过点击<ins>文件的顺序</ins>来导向到正确的html文件上<br/>Good luck! :p</p>\n\n    <script>\n        var a = 0, maxa = 6, pica = 2, end = 7, nofind = 8, state = 0;\n        var speakings = [\"点我干嘛，我脸上又没有密码 😕\", \"别点啦，脸上有点痒\", \"好好好，我站起来和你好好说话好吧\", \"你想要密码是吧\", \"我保证密码一定在这个页面的某处\", \"emmmmm, 让我想想🤔\", \"我觉得它肯定在我下面，我能感受到它的气息！\", \"喏，这不就是密码啦！你真棒！\", \"你再点我也没用啦，再跟你说就不好玩啦!\"]\n        function change_Image_Words(){\n            now_image = document.getElementById(\"pic\");\n            now_word = document.getElementById(\"talking\");\n            if(state == 1)\n                now_word.textContent = speakings[end];\n            else if(a <= maxa - 1)\n            {\n                a += 1;\n                if(a >= 2)\n                    now_image.src = \"girlsit.gif\"\n                now_word.textContent = speakings[a];\n            } \n            else if(state == 0)\n                now_word.textContent = speakings[nofind];\n        } \n        function change_state(){\n            alert(\"密码是7!\");\n            state = 1;\n            change_Image_Words();\n        }\n    </script>\n\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">1</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">2</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">3</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">4</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">5</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">6</a>\n    <a href = \"https://moniwarmth.top/html/html4/the_answer.html\">7</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">8</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">9</a>\n    <a href = \"https://moniwarmth.top/html/html4/blank.html\">0</a> \n\n    <br/>\n    <hr/>\n    <b>由于博客设置，请在点击图片按钮的时候不要点击图片，点击按钮边框便可以正常玩耍</b>\n\n   \n    <br/>\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-do list</title>\n    <style>\n        body {\n            background-color:beige;\n        }\n    </style>\n</head>\n<body>\n    <h1>作业</h1>\n    <hr/>\n    <dl>\n        <dd style=\"font-size: x-large; text-decoration: underline; color: green;\"><b>高等数学</b></dd>\n        <ul>\n            <li>学习通上的作业</li>\n            <li>课本课后题</li>\n        </ul>\n        <dd><em><b>记得复习重积分与曲线曲面积分，17周在线测试</b></em></dd><br/>\n        <hr/>\n        <dd style=\"font-size: x-large;color:darkblue;text-decoration: underline;\" ><b>线性代数</b></dd>\n        <ul>\n            <li>课本上画的题目</li>\n            <li>中国大学MOOC上的题目 <a style=\"color:red\"><b>（已经截止）</b></a></li>\n        </ul>\n        <hr/>\n        \n        <dd style=\"font-size: x-large;color:cornflowerblue;text-decoration: underline;\" ><b>大学物理</b></dd>\n        <ul>\n            <li>学习通上的题目</li>\n            <li>期中考试互评</li>\n            <li>做9与11章的选填，周三可能检查与讲</li>\n        </ul>\n        <hr/>\n        <dd style=\"font-size: x-large;color:orange;text-decoration: underline;\" ><b>大学英语</b></dd>\n        <dl>\n            <dd><big><b>读写译</b></big></dd>\n            <ul>\n                <li>准备四级考试，记单词与朗读课文</li>\n                <li>U校园单词与作文做完</li>\n            </ul>\n            <dd><big><b>视听说</b></big></dd>\n            <ul>\n                <li>We learn上的题目\n                </li>\n            </ul>\n        </dl>\n    </dl>\n\n\n</body>\n</html>","source":"HTML/html8/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-do list</title>\n    <style>\n        body {\n            background-color:beige;\n        }\n    </style>\n</head>\n<body>\n    <h1>作业</h1>\n    <hr/>\n    <dl>\n        <dd style=\"font-size: x-large; text-decoration: underline; color: green;\"><b>高等数学</b></dd>\n        <ul>\n            <li>学习通上的作业</li>\n            <li>课本课后题</li>\n        </ul>\n        <dd><em><b>记得复习重积分与曲线曲面积分，17周在线测试</b></em></dd><br/>\n        <hr/>\n        <dd style=\"font-size: x-large;color:darkblue;text-decoration: underline;\" ><b>线性代数</b></dd>\n        <ul>\n            <li>课本上画的题目</li>\n            <li>中国大学MOOC上的题目 <a style=\"color:red\"><b>（已经截止）</b></a></li>\n        </ul>\n        <hr/>\n        \n        <dd style=\"font-size: x-large;color:cornflowerblue;text-decoration: underline;\" ><b>大学物理</b></dd>\n        <ul>\n            <li>学习通上的题目</li>\n            <li>期中考试互评</li>\n            <li>做9与11章的选填，周三可能检查与讲</li>\n        </ul>\n        <hr/>\n        <dd style=\"font-size: x-large;color:orange;text-decoration: underline;\" ><b>大学英语</b></dd>\n        <dl>\n            <dd><big><b>读写译</b></big></dd>\n            <ul>\n                <li>准备四级考试，记单词与朗读课文</li>\n                <li>U校园单词与作文做完</li>\n            </ul>\n            <dd><big><b>视听说</b></big></dd>\n            <ul>\n                <li>We learn上的题目\n                </li>\n            </ul>\n        </dl>\n    </dl>\n\n\n</body>\n</html>","date":"2024-06-04T01:40:10.551Z","updated":"2024-06-04T01:36:45.026Z","path":"HTML/html8/index.html","title":"","comments":1,"layout":"page","_id":"clx775ny50015zkue4gdo1p63","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-do list</title>\n    <style>\n        body {\n            background-color:beige;\n        }\n    </style>\n</head>\n<body>\n    <h1>作业</h1>\n    <hr/>\n    <dl>\n        <dd style=\"font-size: x-large; text-decoration: underline; color: green;\"><b>高等数学</b></dd>\n        <ul>\n            <li>学习通上的作业</li>\n            <li>课本课后题</li>\n        </ul>\n        <dd><em><b>记得复习重积分与曲线曲面积分，17周在线测试</b></em></dd><br/>\n        <hr/>\n        <dd style=\"font-size: x-large;color:darkblue;text-decoration: underline;\" ><b>线性代数</b></dd>\n        <ul>\n            <li>课本上画的题目</li>\n            <li>中国大学MOOC上的题目 <a style=\"color:red\"><b>（已经截止）</b></a></li>\n        </ul>\n        <hr/>\n        \n        <dd style=\"font-size: x-large;color:cornflowerblue;text-decoration: underline;\" ><b>大学物理</b></dd>\n        <ul>\n            <li>学习通上的题目</li>\n            <li>期中考试互评</li>\n            <li>做9与11章的选填，周三可能检查与讲</li>\n        </ul>\n        <hr/>\n        <dd style=\"font-size: x-large;color:orange;text-decoration: underline;\" ><b>大学英语</b></dd>\n        <dl>\n            <dd><big><b>读写译</b></big></dd>\n            <ul>\n                <li>准备四级考试，记单词与朗读课文</li>\n                <li>U校园单词与作文做完</li>\n            </ul>\n            <dd><big><b>视听说</b></big></dd>\n            <ul>\n                <li>We learn上的题目\n                </li>\n            </ul>\n        </dl>\n    </dl>\n\n\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-do list</title>\n    <style>\n        body {\n            background-color:beige;\n        }\n    </style>\n</head>\n<body>\n    <h1>作业</h1>\n    <hr/>\n    <dl>\n        <dd style=\"font-size: x-large; text-decoration: underline; color: green;\"><b>高等数学</b></dd>\n        <ul>\n            <li>学习通上的作业</li>\n            <li>课本课后题</li>\n        </ul>\n        <dd><em><b>记得复习重积分与曲线曲面积分，17周在线测试</b></em></dd><br/>\n        <hr/>\n        <dd style=\"font-size: x-large;color:darkblue;text-decoration: underline;\" ><b>线性代数</b></dd>\n        <ul>\n            <li>课本上画的题目</li>\n            <li>中国大学MOOC上的题目 <a style=\"color:red\"><b>（已经截止）</b></a></li>\n        </ul>\n        <hr/>\n        \n        <dd style=\"font-size: x-large;color:cornflowerblue;text-decoration: underline;\" ><b>大学物理</b></dd>\n        <ul>\n            <li>学习通上的题目</li>\n            <li>期中考试互评</li>\n            <li>做9与11章的选填，周三可能检查与讲</li>\n        </ul>\n        <hr/>\n        <dd style=\"font-size: x-large;color:orange;text-decoration: underline;\" ><b>大学英语</b></dd>\n        <dl>\n            <dd><big><b>读写译</b></big></dd>\n            <ul>\n                <li>准备四级考试，记单词与朗读课文</li>\n                <li>U校园单词与作文做完</li>\n            </ul>\n            <dd><big><b>视听说</b></big></dd>\n            <ul>\n                <li>We learn上的题目\n                </li>\n            </ul>\n        </dl>\n    </dl>\n\n\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>食堂食物价格调查..</title>\n    <style>\n        a {\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <p>平时会限制自己每天吃饭的金额数，还是需要控制一下平时的预算的<br/></p>\n    <p>因而咱对于食堂的价格，有个大体的了解。下面列个表展示一下:p</p>\n\n    <table border=\"1\">\n        <thead>\n            <tr>\n                <th>食堂价格区间</th>\n                <th>1-2元</th>\n                <th>4.5元-6元</th>\n                <th>7元-10元</th>\n                <th>11元及以上</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td> </td>\n                <td>鸡蛋</td>\n                <td>麦多馅饼</td>\n                <td>米饭（一素一大荤）</td>\n                <td>蛋包饭</td>\n            </tr>\n            <tr>\n                <td>  </td>\n                <td>豆浆</td>\n                <td>掉渣饼</td>\n                <td>拉面/刀削面(香菇或者酸菜) + 豆干</td>\n                <td>咸肉菜饭的大部分</td>\n            </tr>\n            <tr>\n                <td> </td>\n                <td>各种馅饼/包子</td>\n                <td>鸡蛋灌饼（几乎不加东西）</td>\n                <td>鸡汤 + 油饼</td>\n                <td>二楼卤肉饭、红烧肉饭等</td>\n            </tr>\n        </tbody>\n    </table>\n    <hr/>\n    <p>就这样吧，用法已经展示完了，通过这个表也看出来咱多喜欢吃了吧🤭</p>\n    <hr/>\n    <p>这里还有两个废案，觉得不太好看，但是比这个表体现了更多的表格属性，姑且放在这</p>\n    <a href=\"feian/easy_and_smooth_languages.html\">1. 我学过的程序语言 </a><br/>\n    <a href=\"feian/revised_intro.html\">2.用表格表示的起始页</a> \n</body>\n</html>","source":"HTML/html7/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>食堂食物价格调查..</title>\n    <style>\n        a {\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <p>平时会限制自己每天吃饭的金额数，还是需要控制一下平时的预算的<br/></p>\n    <p>因而咱对于食堂的价格，有个大体的了解。下面列个表展示一下:p</p>\n\n    <table border=\"1\">\n        <thead>\n            <tr>\n                <th>食堂价格区间</th>\n                <th>1-2元</th>\n                <th>4.5元-6元</th>\n                <th>7元-10元</th>\n                <th>11元及以上</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td> </td>\n                <td>鸡蛋</td>\n                <td>麦多馅饼</td>\n                <td>米饭（一素一大荤）</td>\n                <td>蛋包饭</td>\n            </tr>\n            <tr>\n                <td>  </td>\n                <td>豆浆</td>\n                <td>掉渣饼</td>\n                <td>拉面/刀削面(香菇或者酸菜) + 豆干</td>\n                <td>咸肉菜饭的大部分</td>\n            </tr>\n            <tr>\n                <td> </td>\n                <td>各种馅饼/包子</td>\n                <td>鸡蛋灌饼（几乎不加东西）</td>\n                <td>鸡汤 + 油饼</td>\n                <td>二楼卤肉饭、红烧肉饭等</td>\n            </tr>\n        </tbody>\n    </table>\n    <hr/>\n    <p>就这样吧，用法已经展示完了，通过这个表也看出来咱多喜欢吃了吧🤭</p>\n    <hr/>\n    <p>这里还有两个废案，觉得不太好看，但是比这个表体现了更多的表格属性，姑且放在这</p>\n    <a href=\"feian/easy_and_smooth_languages.html\">1. 我学过的程序语言 </a><br/>\n    <a href=\"feian/revised_intro.html\">2.用表格表示的起始页</a> \n</body>\n</html>","date":"2024-06-11T03:22:26.702Z","updated":"2024-06-11T03:22:26.702Z","path":"HTML/html7/index.html","_id":"clx775ny60019zkue8y3o9jnp","title":"","comments":1,"layout":"page","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>食堂食物价格调查..</title>\n    <style>\n        a {\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <p>平时会限制自己每天吃饭的金额数，还是需要控制一下平时的预算的<br/></p>\n    <p>因而咱对于食堂的价格，有个大体的了解。下面列个表展示一下:p</p>\n\n    <table border=\"1\">\n        <thead>\n            <tr>\n                <th>食堂价格区间</th>\n                <th>1-2元</th>\n                <th>4.5元-6元</th>\n                <th>7元-10元</th>\n                <th>11元及以上</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td> </td>\n                <td>鸡蛋</td>\n                <td>麦多馅饼</td>\n                <td>米饭（一素一大荤）</td>\n                <td>蛋包饭</td>\n            </tr>\n            <tr>\n                <td>  </td>\n                <td>豆浆</td>\n                <td>掉渣饼</td>\n                <td>拉面/刀削面(香菇或者酸菜) + 豆干</td>\n                <td>咸肉菜饭的大部分</td>\n            </tr>\n            <tr>\n                <td> </td>\n                <td>各种馅饼/包子</td>\n                <td>鸡蛋灌饼（几乎不加东西）</td>\n                <td>鸡汤 + 油饼</td>\n                <td>二楼卤肉饭、红烧肉饭等</td>\n            </tr>\n        </tbody>\n    </table>\n    <hr/>\n    <p>就这样吧，用法已经展示完了，通过这个表也看出来咱多喜欢吃了吧🤭</p>\n    <hr/>\n    <p>这里还有两个废案，觉得不太好看，但是比这个表体现了更多的表格属性，姑且放在这</p>\n    <a href=\"feian/easy_and_smooth_languages.html\">1. 我学过的程序语言 </a><br/>\n    <a href=\"feian/revised_intro.html\">2.用表格表示的起始页</a> \n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>食堂食物价格调查..</title>\n    <style>\n        a {\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <p>平时会限制自己每天吃饭的金额数，还是需要控制一下平时的预算的<br/></p>\n    <p>因而咱对于食堂的价格，有个大体的了解。下面列个表展示一下:p</p>\n\n    <table border=\"1\">\n        <thead>\n            <tr>\n                <th>食堂价格区间</th>\n                <th>1-2元</th>\n                <th>4.5元-6元</th>\n                <th>7元-10元</th>\n                <th>11元及以上</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td> </td>\n                <td>鸡蛋</td>\n                <td>麦多馅饼</td>\n                <td>米饭（一素一大荤）</td>\n                <td>蛋包饭</td>\n            </tr>\n            <tr>\n                <td>  </td>\n                <td>豆浆</td>\n                <td>掉渣饼</td>\n                <td>拉面/刀削面(香菇或者酸菜) + 豆干</td>\n                <td>咸肉菜饭的大部分</td>\n            </tr>\n            <tr>\n                <td> </td>\n                <td>各种馅饼/包子</td>\n                <td>鸡蛋灌饼（几乎不加东西）</td>\n                <td>鸡汤 + 油饼</td>\n                <td>二楼卤肉饭、红烧肉饭等</td>\n            </tr>\n        </tbody>\n    </table>\n    <hr/>\n    <p>就这样吧，用法已经展示完了，通过这个表也看出来咱多喜欢吃了吧🤭</p>\n    <hr/>\n    <p>这里还有两个废案，觉得不太好看，但是比这个表体现了更多的表格属性，姑且放在这</p>\n    <a href=\"feian/easy_and_smooth_languages.html\">1. 我学过的程序语言 </a><br/>\n    <a href=\"feian/revised_intro.html\">2.用表格表示的起始页</a> \n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>邦加人の奇妙生活</title>\n</head>\n<body>\n    <h1>邦加人の奇妙生活</h1>\n    <hr/>\n    <div>\n        <p>推荐一本书，它叫<em>《带着三文鱼去旅行》</em>，这本书很有意思<br/>今天在想这个网页怎么做的时候，是这本书中的例子给予了我灵感，具体请看:</p>\n        <blockquote>邦加人日常所做的事情和我们都差不多，但他们有个奇怪的习惯，那就是他们说话时会提供<strong>完整</strong>的信息。</blockquote>\n        <p>具体的内容不详细讲，主要是一个方面</p>\n        <blockquote>比如说，我们现在开始说话，当然是要用语言说话了，毋须申明这一点。但一个邦加人对另一个邦加人说话，总是这样开始的：“注意，现在我要用语言讲话了。”</blockquote>\n        <p>于是，我要说“注意，现在我要介绍我的桌子了。”</p>\n    </div>\n    <hr/>\n    <img border=\"1\" alt=\"my desk\" src=\"Feb22nd.jpg\" width = 500px usemap=\"#deskmap\">\n    <map name=\"deskmap\" id=\"deskmap\">\n        <area shape=\"rect\" coords=\"0, 225, 50, 300\" onclick=\"bottles()\" href=\"#\">\n        <area shape=\"rect\" coords=\"52, 225, 97, 300\" onclick=\"teapot()\" href=\"#\">\n        <area shape=\"rect\" coords=\"0, 150, 125, 210\" onclick=\"twopigs()\" href=\"#\">\n        <area shape=\"rect\" coords=\"126, 150, 200, 230\" onclick=\"drawing()\" href=\"#\">\n        <area shape=\"rect\" coords=\"160, 230, 200, 271\" onclick=\"clock()\" href=\"#\">\n        <area shape=\"rect\" coords=\"240, 210, 275, 276\" onclick=\"penholder()\" href=\"#\">\n        <area shape=\"rect\" coords=\"276, 190, 290, 279\" onclick=\"litelight()\" href=\"#\">\n        <area shape=\"rect\" coords=\"291, 215, 341, 300\" onclick=\"rickcup()\" href=\"#\"> \n    </map>\n    <p id=\"description\" style=\"text-align: center;\">这是我的房间</p>\n    <hr/>\n    <strong><small>可以点击图中的某一部分来具体看</small></strong><br/>\n    <strong style=\"color:green\"><small>已结束更新。图片中仅部分可点，等待探索😜</small></strong>\n    <script>\n        var elem = document.getElementById(\"description\");\n        function bottles(){\n            elem.textContent = \"这是我的一个玻璃杯，过年的时候我常用它喝奶茶和饮料\"\n        }\n        function teapot(){\n            elem.textContent = \"一个茶罐，两次回家都没有尝过这茶的味道。\"\n        }\n        function twopigs(){\n            elem.textContent = \"两只可爱的小猪，是舅妈的礼物，妹妹常说这是我们俩🤭\"\n        }\n        function drawing() {\n            elem.textContent = \"很早之前去上海回来在火车上买的一幅画，没啥特点。\"\n        }\n        function clock() {\n            elem.textContent = \"高中时买的一个表，现在还在提醒着我时间\"\n        }\n        function penholder() {\n            elem.textContent = \"原本是妈妈放在电脑旁的装饰，被我拿来当笔筒咯🤭\"\n        }\n        function litelight() {\n            elem.textContent = \"上学期常常用的灯，并不是很亮，但是能够用很长时间。\"\n        }\n        function rickcup() {\n            elem.textContent = \"有瑞克姥爷的茶杯，我曾经很崇拜瑞克，希望能够有能力做任何自己想做的事情\"\n        }\n\n    </script>\n</body>\n</html>","source":"HTML/html6/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>邦加人の奇妙生活</title>\n</head>\n<body>\n    <h1>邦加人の奇妙生活</h1>\n    <hr/>\n    <div>\n        <p>推荐一本书，它叫<em>《带着三文鱼去旅行》</em>，这本书很有意思<br/>今天在想这个网页怎么做的时候，是这本书中的例子给予了我灵感，具体请看:</p>\n        <blockquote>邦加人日常所做的事情和我们都差不多，但他们有个奇怪的习惯，那就是他们说话时会提供<strong>完整</strong>的信息。</blockquote>\n        <p>具体的内容不详细讲，主要是一个方面</p>\n        <blockquote>比如说，我们现在开始说话，当然是要用语言说话了，毋须申明这一点。但一个邦加人对另一个邦加人说话，总是这样开始的：“注意，现在我要用语言讲话了。”</blockquote>\n        <p>于是，我要说“注意，现在我要介绍我的桌子了。”</p>\n    </div>\n    <hr/>\n    <img border=\"1\" alt=\"my desk\" src=\"Feb22nd.jpg\" width = 500px usemap=\"#deskmap\">\n    <map name=\"deskmap\" id=\"deskmap\">\n        <area shape=\"rect\" coords=\"0, 225, 50, 300\" onclick=\"bottles()\" href=\"#\">\n        <area shape=\"rect\" coords=\"52, 225, 97, 300\" onclick=\"teapot()\" href=\"#\">\n        <area shape=\"rect\" coords=\"0, 150, 125, 210\" onclick=\"twopigs()\" href=\"#\">\n        <area shape=\"rect\" coords=\"126, 150, 200, 230\" onclick=\"drawing()\" href=\"#\">\n        <area shape=\"rect\" coords=\"160, 230, 200, 271\" onclick=\"clock()\" href=\"#\">\n        <area shape=\"rect\" coords=\"240, 210, 275, 276\" onclick=\"penholder()\" href=\"#\">\n        <area shape=\"rect\" coords=\"276, 190, 290, 279\" onclick=\"litelight()\" href=\"#\">\n        <area shape=\"rect\" coords=\"291, 215, 341, 300\" onclick=\"rickcup()\" href=\"#\"> \n    </map>\n    <p id=\"description\" style=\"text-align: center;\">这是我的房间</p>\n    <hr/>\n    <strong><small>可以点击图中的某一部分来具体看</small></strong><br/>\n    <strong style=\"color:green\"><small>已结束更新。图片中仅部分可点，等待探索😜</small></strong>\n    <script>\n        var elem = document.getElementById(\"description\");\n        function bottles(){\n            elem.textContent = \"这是我的一个玻璃杯，过年的时候我常用它喝奶茶和饮料\"\n        }\n        function teapot(){\n            elem.textContent = \"一个茶罐，两次回家都没有尝过这茶的味道。\"\n        }\n        function twopigs(){\n            elem.textContent = \"两只可爱的小猪，是舅妈的礼物，妹妹常说这是我们俩🤭\"\n        }\n        function drawing() {\n            elem.textContent = \"很早之前去上海回来在火车上买的一幅画，没啥特点。\"\n        }\n        function clock() {\n            elem.textContent = \"高中时买的一个表，现在还在提醒着我时间\"\n        }\n        function penholder() {\n            elem.textContent = \"原本是妈妈放在电脑旁的装饰，被我拿来当笔筒咯🤭\"\n        }\n        function litelight() {\n            elem.textContent = \"上学期常常用的灯，并不是很亮，但是能够用很长时间。\"\n        }\n        function rickcup() {\n            elem.textContent = \"有瑞克姥爷的茶杯，我曾经很崇拜瑞克，希望能够有能力做任何自己想做的事情\"\n        }\n\n    </script>\n</body>\n</html>","date":"2024-06-01T15:52:46.976Z","updated":"2024-06-01T15:44:25.278Z","path":"HTML/html6/index.html","title":"","comments":1,"layout":"page","_id":"clx775ny6001czkueaio5dy2p","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>邦加人の奇妙生活</title>\n</head>\n<body>\n    <h1>邦加人の奇妙生活</h1>\n    <hr/>\n    <div>\n        <p>推荐一本书，它叫<em>《带着三文鱼去旅行》</em>，这本书很有意思<br/>今天在想这个网页怎么做的时候，是这本书中的例子给予了我灵感，具体请看:</p>\n        <blockquote>邦加人日常所做的事情和我们都差不多，但他们有个奇怪的习惯，那就是他们说话时会提供<strong>完整</strong>的信息。</blockquote>\n        <p>具体的内容不详细讲，主要是一个方面</p>\n        <blockquote>比如说，我们现在开始说话，当然是要用语言说话了，毋须申明这一点。但一个邦加人对另一个邦加人说话，总是这样开始的：“注意，现在我要用语言讲话了。”</blockquote>\n        <p>于是，我要说“注意，现在我要介绍我的桌子了。”</p>\n    </div>\n    <hr/>\n    <img border=\"1\" alt=\"my desk\" src=\"Feb22nd.jpg\" width = 500px usemap=\"#deskmap\">\n    <map name=\"deskmap\" id=\"deskmap\">\n        <area shape=\"rect\" coords=\"0, 225, 50, 300\" onclick=\"bottles()\" href=\"#\">\n        <area shape=\"rect\" coords=\"52, 225, 97, 300\" onclick=\"teapot()\" href=\"#\">\n        <area shape=\"rect\" coords=\"0, 150, 125, 210\" onclick=\"twopigs()\" href=\"#\">\n        <area shape=\"rect\" coords=\"126, 150, 200, 230\" onclick=\"drawing()\" href=\"#\">\n        <area shape=\"rect\" coords=\"160, 230, 200, 271\" onclick=\"clock()\" href=\"#\">\n        <area shape=\"rect\" coords=\"240, 210, 275, 276\" onclick=\"penholder()\" href=\"#\">\n        <area shape=\"rect\" coords=\"276, 190, 290, 279\" onclick=\"litelight()\" href=\"#\">\n        <area shape=\"rect\" coords=\"291, 215, 341, 300\" onclick=\"rickcup()\" href=\"#\"> \n    </map>\n    <p id=\"description\" style=\"text-align: center;\">这是我的房间</p>\n    <hr/>\n    <strong><small>可以点击图中的某一部分来具体看</small></strong><br/>\n    <strong style=\"color:green\"><small>已结束更新。图片中仅部分可点，等待探索😜</small></strong>\n    <script>\n        var elem = document.getElementById(\"description\");\n        function bottles(){\n            elem.textContent = \"这是我的一个玻璃杯，过年的时候我常用它喝奶茶和饮料\"\n        }\n        function teapot(){\n            elem.textContent = \"一个茶罐，两次回家都没有尝过这茶的味道。\"\n        }\n        function twopigs(){\n            elem.textContent = \"两只可爱的小猪，是舅妈的礼物，妹妹常说这是我们俩🤭\"\n        }\n        function drawing() {\n            elem.textContent = \"很早之前去上海回来在火车上买的一幅画，没啥特点。\"\n        }\n        function clock() {\n            elem.textContent = \"高中时买的一个表，现在还在提醒着我时间\"\n        }\n        function penholder() {\n            elem.textContent = \"原本是妈妈放在电脑旁的装饰，被我拿来当笔筒咯🤭\"\n        }\n        function litelight() {\n            elem.textContent = \"上学期常常用的灯，并不是很亮，但是能够用很长时间。\"\n        }\n        function rickcup() {\n            elem.textContent = \"有瑞克姥爷的茶杯，我曾经很崇拜瑞克，希望能够有能力做任何自己想做的事情\"\n        }\n\n    </script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>邦加人の奇妙生活</title>\n</head>\n<body>\n    <h1>邦加人の奇妙生活</h1>\n    <hr/>\n    <div>\n        <p>推荐一本书，它叫<em>《带着三文鱼去旅行》</em>，这本书很有意思<br/>今天在想这个网页怎么做的时候，是这本书中的例子给予了我灵感，具体请看:</p>\n        <blockquote>邦加人日常所做的事情和我们都差不多，但他们有个奇怪的习惯，那就是他们说话时会提供<strong>完整</strong>的信息。</blockquote>\n        <p>具体的内容不详细讲，主要是一个方面</p>\n        <blockquote>比如说，我们现在开始说话，当然是要用语言说话了，毋须申明这一点。但一个邦加人对另一个邦加人说话，总是这样开始的：“注意，现在我要用语言讲话了。”</blockquote>\n        <p>于是，我要说“注意，现在我要介绍我的桌子了。”</p>\n    </div>\n    <hr/>\n    <img border=\"1\" alt=\"my desk\" src=\"Feb22nd.jpg\" width = 500px usemap=\"#deskmap\">\n    <map name=\"deskmap\" id=\"deskmap\">\n        <area shape=\"rect\" coords=\"0, 225, 50, 300\" onclick=\"bottles()\" href=\"#\">\n        <area shape=\"rect\" coords=\"52, 225, 97, 300\" onclick=\"teapot()\" href=\"#\">\n        <area shape=\"rect\" coords=\"0, 150, 125, 210\" onclick=\"twopigs()\" href=\"#\">\n        <area shape=\"rect\" coords=\"126, 150, 200, 230\" onclick=\"drawing()\" href=\"#\">\n        <area shape=\"rect\" coords=\"160, 230, 200, 271\" onclick=\"clock()\" href=\"#\">\n        <area shape=\"rect\" coords=\"240, 210, 275, 276\" onclick=\"penholder()\" href=\"#\">\n        <area shape=\"rect\" coords=\"276, 190, 290, 279\" onclick=\"litelight()\" href=\"#\">\n        <area shape=\"rect\" coords=\"291, 215, 341, 300\" onclick=\"rickcup()\" href=\"#\"> \n    </map>\n    <p id=\"description\" style=\"text-align: center;\">这是我的房间</p>\n    <hr/>\n    <strong><small>可以点击图中的某一部分来具体看</small></strong><br/>\n    <strong style=\"color:green\"><small>已结束更新。图片中仅部分可点，等待探索😜</small></strong>\n    <script>\n        var elem = document.getElementById(\"description\");\n        function bottles(){\n            elem.textContent = \"这是我的一个玻璃杯，过年的时候我常用它喝奶茶和饮料\"\n        }\n        function teapot(){\n            elem.textContent = \"一个茶罐，两次回家都没有尝过这茶的味道。\"\n        }\n        function twopigs(){\n            elem.textContent = \"两只可爱的小猪，是舅妈的礼物，妹妹常说这是我们俩🤭\"\n        }\n        function drawing() {\n            elem.textContent = \"很早之前去上海回来在火车上买的一幅画，没啥特点。\"\n        }\n        function clock() {\n            elem.textContent = \"高中时买的一个表，现在还在提醒着我时间\"\n        }\n        function penholder() {\n            elem.textContent = \"原本是妈妈放在电脑旁的装饰，被我拿来当笔筒咯🤭\"\n        }\n        function litelight() {\n            elem.textContent = \"上学期常常用的灯，并不是很亮，但是能够用很长时间。\"\n        }\n        function rickcup() {\n            elem.textContent = \"有瑞克姥爷的茶杯，我曾经很崇拜瑞克，希望能够有能力做任何自己想做的事情\"\n        }\n\n    </script>\n</body>\n</html>"},{"_content":"    var x1 = document.getElementById(\"one\");\n    var x2 = document.getElementById(\"two\");\n    var x3 = document.getElementById(\"three\");\n    var x4 = document.getElementById(\"four\");\n\n    function gululu(){\n        const elem = document.createElement(\"img\");\n        var a = Math.floor((Math.random() * 10) + 1);\n        var b = Math.floor((Math.random() * 10) + 1);\n\n        if(a >= 5)\n            elem.src = \"hertaa1.gif\";\n        else\n            elem.src = \"hertaa2.gif\";\n            \n        if(b >= 8)\n            x1.play();\n        else if(b >= 5)\n            x4.play();\n        else if(b >= 2)\n            x3.play();\n        else if(b >= 0)\n            x2.play();\n            \n        elem.position = \"absolute\";\n        elem.style.right = \"-300px\";\n        elem.id = \"herta\";\n        document.body.appendChild(elem);\n        setTimeout(function () {\n            document.body.removeChild(elem);\n        }, 900);\n    }","source":"HTML/html5/js/script.js","raw":"    var x1 = document.getElementById(\"one\");\n    var x2 = document.getElementById(\"two\");\n    var x3 = document.getElementById(\"three\");\n    var x4 = document.getElementById(\"four\");\n\n    function gululu(){\n        const elem = document.createElement(\"img\");\n        var a = Math.floor((Math.random() * 10) + 1);\n        var b = Math.floor((Math.random() * 10) + 1);\n\n        if(a >= 5)\n            elem.src = \"hertaa1.gif\";\n        else\n            elem.src = \"hertaa2.gif\";\n            \n        if(b >= 8)\n            x1.play();\n        else if(b >= 5)\n            x4.play();\n        else if(b >= 2)\n            x3.play();\n        else if(b >= 0)\n            x2.play();\n            \n        elem.position = \"absolute\";\n        elem.style.right = \"-300px\";\n        elem.id = \"herta\";\n        document.body.appendChild(elem);\n        setTimeout(function () {\n            document.body.removeChild(elem);\n        }, 900);\n    }","date":"2024-06-01T15:52:46.969Z","updated":"2024-05-24T23:56:18.034Z","path":"HTML/html5/js/script.js","layout":"false","title":"","comments":1,"_id":"clx775ny7001fzkue7xndevok","content":"    var x1 = document.getElementById(\"one\");\n    var x2 = document.getElementById(\"two\");\n    var x3 = document.getElementById(\"three\");\n    var x4 = document.getElementById(\"four\");\n\n    function gululu(){\n        const elem = document.createElement(\"img\");\n        var a = Math.floor((Math.random() * 10) + 1);\n        var b = Math.floor((Math.random() * 10) + 1);\n\n        if(a >= 5)\n            elem.src = \"hertaa1.gif\";\n        else\n            elem.src = \"hertaa2.gif\";\n            \n        if(b >= 8)\n            x1.play();\n        else if(b >= 5)\n            x4.play();\n        else if(b >= 2)\n            x3.play();\n        else if(b >= 0)\n            x2.play();\n            \n        elem.position = \"absolute\";\n        elem.style.right = \"-300px\";\n        elem.id = \"herta\";\n        document.body.appendChild(elem);\n        setTimeout(function () {\n            document.body.removeChild(elem);\n        }, 900);\n    }","site":{"data":{}},"excerpt":"","more":"    var x1 = document.getElementById(\"one\");\n    var x2 = document.getElementById(\"two\");\n    var x3 = document.getElementById(\"three\");\n    var x4 = document.getElementById(\"four\");\n\n    function gululu(){\n        const elem = document.createElement(\"img\");\n        var a = Math.floor((Math.random() * 10) + 1);\n        var b = Math.floor((Math.random() * 10) + 1);\n\n        if(a >= 5)\n            elem.src = \"hertaa1.gif\";\n        else\n            elem.src = \"hertaa2.gif\";\n            \n        if(b >= 8)\n            x1.play();\n        else if(b >= 5)\n            x4.play();\n        else if(b >= 2)\n            x3.play();\n        else if(b >= 0)\n            x2.play();\n            \n        elem.position = \"absolute\";\n        elem.style.right = \"-300px\";\n        elem.id = \"herta\";\n        document.body.appendChild(elem);\n        setTimeout(function () {\n            document.body.removeChild(elem);\n        }, 900);\n    }"},{"_content":"body {\n    text-align: center;\n}\n@keyframes move {\nfrom {\n    top: 100px;\n    left: calc(100% + 500px);\n}\n\n100% {\n    top: 100px;\n    left: calc(0% - 500px);\n}\n}\n\npre {\n    background-color: plum;\n    height: 500px;\n    text-align: center;\n}\n\n#herta {\n    width: 500px;\n    position: absolute;\n    top: 0;\n    left: calc(100%);\n    animation: 1s linear 1 move;\n}\n#gulu {\n    background-color: purple;\n    border: none; /*这是按钮边界*/\n    border-radius: 30px; /*按钮边界的圆滑度*/\n    border-radius: 16px;\n    padding: 16px 32px;\n    color: aliceblue;\n    font-family: 'Roboto', sans-serif;\n    font-weight: bold;\n    font-size: 1em;\n    min-width: 120px;\n\n    position: relative;\n    overflow: hidden;\n    box-shadow: 6px 7px 40px -4px rgba(0, 0, 0, 0.2);\n    transition: background-color 0.1s ease-in-out, scale 0.1s cubic-bezier(0.075, 0.82, 0.165, 1);\n}\n\n#gulu:hover {\n    background-color: #2d2463;\n}\n\n#greetpic {\nwidth: 100px\n}\n\n#greeting {\n    display: flex;\n    justify-content: center;\n}\n#bk_herta {\n    background-color: plum;\n    height: 500px;\n    text-align: center;\n}","source":"HTML/html5/css/style.css","raw":"body {\n    text-align: center;\n}\n@keyframes move {\nfrom {\n    top: 100px;\n    left: calc(100% + 500px);\n}\n\n100% {\n    top: 100px;\n    left: calc(0% - 500px);\n}\n}\n\npre {\n    background-color: plum;\n    height: 500px;\n    text-align: center;\n}\n\n#herta {\n    width: 500px;\n    position: absolute;\n    top: 0;\n    left: calc(100%);\n    animation: 1s linear 1 move;\n}\n#gulu {\n    background-color: purple;\n    border: none; /*这是按钮边界*/\n    border-radius: 30px; /*按钮边界的圆滑度*/\n    border-radius: 16px;\n    padding: 16px 32px;\n    color: aliceblue;\n    font-family: 'Roboto', sans-serif;\n    font-weight: bold;\n    font-size: 1em;\n    min-width: 120px;\n\n    position: relative;\n    overflow: hidden;\n    box-shadow: 6px 7px 40px -4px rgba(0, 0, 0, 0.2);\n    transition: background-color 0.1s ease-in-out, scale 0.1s cubic-bezier(0.075, 0.82, 0.165, 1);\n}\n\n#gulu:hover {\n    background-color: #2d2463;\n}\n\n#greetpic {\nwidth: 100px\n}\n\n#greeting {\n    display: flex;\n    justify-content: center;\n}\n#bk_herta {\n    background-color: plum;\n    height: 500px;\n    text-align: center;\n}","date":"2024-06-01T15:52:46.969Z","updated":"2024-05-25T05:56:25.486Z","path":"HTML/html5/css/style.css","layout":"false","title":"","comments":1,"_id":"clx775ny8001kzkuehkco7m39","content":"body {\n    text-align: center;\n}\n@keyframes move {\nfrom {\n    top: 100px;\n    left: calc(100% + 500px);\n}\n\n100% {\n    top: 100px;\n    left: calc(0% - 500px);\n}\n}\n\npre {\n    background-color: plum;\n    height: 500px;\n    text-align: center;\n}\n\n#herta {\n    width: 500px;\n    position: absolute;\n    top: 0;\n    left: calc(100%);\n    animation: 1s linear 1 move;\n}\n#gulu {\n    background-color: purple;\n    border: none; /*这是按钮边界*/\n    border-radius: 30px; /*按钮边界的圆滑度*/\n    border-radius: 16px;\n    padding: 16px 32px;\n    color: aliceblue;\n    font-family: 'Roboto', sans-serif;\n    font-weight: bold;\n    font-size: 1em;\n    min-width: 120px;\n\n    position: relative;\n    overflow: hidden;\n    box-shadow: 6px 7px 40px -4px rgba(0, 0, 0, 0.2);\n    transition: background-color 0.1s ease-in-out, scale 0.1s cubic-bezier(0.075, 0.82, 0.165, 1);\n}\n\n#gulu:hover {\n    background-color: #2d2463;\n}\n\n#greetpic {\nwidth: 100px\n}\n\n#greeting {\n    display: flex;\n    justify-content: center;\n}\n#bk_herta {\n    background-color: plum;\n    height: 500px;\n    text-align: center;\n}","site":{"data":{}},"excerpt":"","more":"body {\n    text-align: center;\n}\n@keyframes move {\nfrom {\n    top: 100px;\n    left: calc(100% + 500px);\n}\n\n100% {\n    top: 100px;\n    left: calc(0% - 500px);\n}\n}\n\npre {\n    background-color: plum;\n    height: 500px;\n    text-align: center;\n}\n\n#herta {\n    width: 500px;\n    position: absolute;\n    top: 0;\n    left: calc(100%);\n    animation: 1s linear 1 move;\n}\n#gulu {\n    background-color: purple;\n    border: none; /*这是按钮边界*/\n    border-radius: 30px; /*按钮边界的圆滑度*/\n    border-radius: 16px;\n    padding: 16px 32px;\n    color: aliceblue;\n    font-family: 'Roboto', sans-serif;\n    font-weight: bold;\n    font-size: 1em;\n    min-width: 120px;\n\n    position: relative;\n    overflow: hidden;\n    box-shadow: 6px 7px 40px -4px rgba(0, 0, 0, 0.2);\n    transition: background-color 0.1s ease-in-out, scale 0.1s cubic-bezier(0.075, 0.82, 0.165, 1);\n}\n\n#gulu:hover {\n    background-color: #2d2463;\n}\n\n#greetpic {\nwidth: 100px\n}\n\n#greeting {\n    display: flex;\n    justify-content: center;\n}\n#bk_herta {\n    background-color: plum;\n    height: 500px;\n    text-align: center;\n}"},{"_content":"<!Doctype html>\n<html>\n    <head>\n        <meta charset = \"utf-8\">\n        <title>HTML展示页</title>\n        <style>\n            @font-face {\n                font-family: 'qianxia';\n                src: url('qianxia.ttf');\n            }\n            h1 {\n                color: coral;\n                font-family:'qianxia';\n            }\n            p {\n                font-family: 'qianxia';\n                font-size: larger;\n            }\n            #mn{\n                color: orange;\n            }\n            body{\n                background-color:beige;\n            }\n            a{\n                text-decoration: none;\n                font-family: qianxia';\n            }\n            #w1{\n                color: orange;\n                font-family:Verdana, Geneva, Tahoma, sans-serif ;\n            }\n\n        </style>\n    </head>\n    <body>\n        <h1>Html! ☀</h1>\n        <img src=\"girl.jpg\"width = \"100\"/></blockquote>\n        <p><strong><big id=\"mn\">Moniwarmth</big></strong>敬上</p>\n        <hr/>\n        <b>介是本人的博客地址<b style=\"color:coral\"> * v * </b></b>\n        <a href=\"https://Moniwarmth.top\" style=\"color:orange;font-family: qianxia;\">点我进入博客！！！</a>\n        <hr/>\n        \n        <table border=\"1\" cellpadding = \"5\">\n        <caption style=\"font-weight: bold;;\">下方是最近<i>HTML</i>学习成果</caption>\n        <tr>\n            <th>\n                <!-- 如果要加表格的背景颜色 在style里变更background-color属性 -->\n                <a href=\"https://Moniwarmth.top/html/html1\" id = \"w1\">May 14<sub>th</sub> 小复习</em></a> \n            </th>\n\n            <td>\n                <a href=\"./html1/index.html\" download>下载</a><br/>\n            </td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html2\" id = \"w1\">May 17</em><sub><em>th</em><big><strong> 千</strong>奇<em>百怪</em>的<sup>文字</sup></big><b>！</b></sub></big></a></th>\n            <td><a href=\"./html2/index.html\" download>下载</a><br/></td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html4\" id = \"w1\">May 19<sub><em>th</em></sub><b> 迷宫</b>游戏</em></th>\n            <td><a href=\"./html4/index.html\" download>下载</a><br/></td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html5\" id = \"w1\">May 22<sub><em>nd</em></sub>/23<sub><em>rd</em></sub></</a> <a href = \"https://Moniwarmth.top/html/html5\" style=\"color: orange;text-decoration: line-through;\">又给你玩出花来了...</a></th>\n            <td><a href=\"./html5/index.html\" download>下载</a><br/></td>\n        </tr>\n        \n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html6\" id = \"w1\">May 26<sub><em>th</em></sub><strong> 邦加人</strong>の奇妙生活</a></th>\n            <td><a href=\"./html6/index.html\" download>下载</a><br/></td>\n        </tr>\n\n        <tr>\n            <th> <a href=\"https://Moniwarmth.top/html/html7\" id = \"w1\">June 1<sub><em>st</em></sub> 我们学校的食物价格</a></th>\n            <td><a href=\"./html7/index.html\" download>下载</a><br/></td>\n        </tr>\n\n\n        </table>\n        <hr/>\n        <strong style=\"font-family: 'qianxia';\">22号的网页已经做好啦！是复刻的黑塔转圈圈😀</strong>\n    </body>\n</html>","source":"HTML/html7/feian/revised_intro.html","raw":"<!Doctype html>\n<html>\n    <head>\n        <meta charset = \"utf-8\">\n        <title>HTML展示页</title>\n        <style>\n            @font-face {\n                font-family: 'qianxia';\n                src: url('qianxia.ttf');\n            }\n            h1 {\n                color: coral;\n                font-family:'qianxia';\n            }\n            p {\n                font-family: 'qianxia';\n                font-size: larger;\n            }\n            #mn{\n                color: orange;\n            }\n            body{\n                background-color:beige;\n            }\n            a{\n                text-decoration: none;\n                font-family: qianxia';\n            }\n            #w1{\n                color: orange;\n                font-family:Verdana, Geneva, Tahoma, sans-serif ;\n            }\n\n        </style>\n    </head>\n    <body>\n        <h1>Html! ☀</h1>\n        <img src=\"girl.jpg\"width = \"100\"/></blockquote>\n        <p><strong><big id=\"mn\">Moniwarmth</big></strong>敬上</p>\n        <hr/>\n        <b>介是本人的博客地址<b style=\"color:coral\"> * v * </b></b>\n        <a href=\"https://Moniwarmth.top\" style=\"color:orange;font-family: qianxia;\">点我进入博客！！！</a>\n        <hr/>\n        \n        <table border=\"1\" cellpadding = \"5\">\n        <caption style=\"font-weight: bold;;\">下方是最近<i>HTML</i>学习成果</caption>\n        <tr>\n            <th>\n                <!-- 如果要加表格的背景颜色 在style里变更background-color属性 -->\n                <a href=\"https://Moniwarmth.top/html/html1\" id = \"w1\">May 14<sub>th</sub> 小复习</em></a> \n            </th>\n\n            <td>\n                <a href=\"./html1/index.html\" download>下载</a><br/>\n            </td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html2\" id = \"w1\">May 17</em><sub><em>th</em><big><strong> 千</strong>奇<em>百怪</em>的<sup>文字</sup></big><b>！</b></sub></big></a></th>\n            <td><a href=\"./html2/index.html\" download>下载</a><br/></td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html4\" id = \"w1\">May 19<sub><em>th</em></sub><b> 迷宫</b>游戏</em></th>\n            <td><a href=\"./html4/index.html\" download>下载</a><br/></td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html5\" id = \"w1\">May 22<sub><em>nd</em></sub>/23<sub><em>rd</em></sub></</a> <a href = \"https://Moniwarmth.top/html/html5\" style=\"color: orange;text-decoration: line-through;\">又给你玩出花来了...</a></th>\n            <td><a href=\"./html5/index.html\" download>下载</a><br/></td>\n        </tr>\n        \n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html6\" id = \"w1\">May 26<sub><em>th</em></sub><strong> 邦加人</strong>の奇妙生活</a></th>\n            <td><a href=\"./html6/index.html\" download>下载</a><br/></td>\n        </tr>\n\n        <tr>\n            <th> <a href=\"https://Moniwarmth.top/html/html7\" id = \"w1\">June 1<sub><em>st</em></sub> 我们学校的食物价格</a></th>\n            <td><a href=\"./html7/index.html\" download>下载</a><br/></td>\n        </tr>\n\n\n        </table>\n        <hr/>\n        <strong style=\"font-family: 'qianxia';\">22号的网页已经做好啦！是复刻的黑塔转圈圈😀</strong>\n    </body>\n</html>","date":"2024-06-02T14:43:27.393Z","updated":"2024-06-02T14:38:30.287Z","path":"HTML/html7/feian/revised_intro.html","title":"","comments":1,"layout":"page","_id":"clx775ny8001mzkue27ub7kew","content":"<!Doctype html>\n<html>\n    <head>\n        <meta charset = \"utf-8\">\n        <title>HTML展示页</title>\n        <style>\n            @font-face {\n                font-family: 'qianxia';\n                src: url('qianxia.ttf');\n            }\n            h1 {\n                color: coral;\n                font-family:'qianxia';\n            }\n            p {\n                font-family: 'qianxia';\n                font-size: larger;\n            }\n            #mn{\n                color: orange;\n            }\n            body{\n                background-color:beige;\n            }\n            a{\n                text-decoration: none;\n                font-family: qianxia';\n            }\n            #w1{\n                color: orange;\n                font-family:Verdana, Geneva, Tahoma, sans-serif ;\n            }\n\n        </style>\n    </head>\n    <body>\n        <h1>Html! ☀</h1>\n        <img src=\"girl.jpg\"width = \"100\"/></blockquote>\n        <p><strong><big id=\"mn\">Moniwarmth</big></strong>敬上</p>\n        <hr/>\n        <b>介是本人的博客地址<b style=\"color:coral\"> * v * </b></b>\n        <a href=\"https://Moniwarmth.top\" style=\"color:orange;font-family: qianxia;\">点我进入博客！！！</a>\n        <hr/>\n        \n        <table border=\"1\" cellpadding = \"5\">\n        <caption style=\"font-weight: bold;;\">下方是最近<i>HTML</i>学习成果</caption>\n        <tr>\n            <th>\n                <!-- 如果要加表格的背景颜色 在style里变更background-color属性 -->\n                <a href=\"https://Moniwarmth.top/html/html1\" id = \"w1\">May 14<sub>th</sub> 小复习</em></a> \n            </th>\n\n            <td>\n                <a href=\"./html1/index.html\" download>下载</a><br/>\n            </td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html2\" id = \"w1\">May 17</em><sub><em>th</em><big><strong> 千</strong>奇<em>百怪</em>的<sup>文字</sup></big><b>！</b></sub></big></a></th>\n            <td><a href=\"./html2/index.html\" download>下载</a><br/></td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html4\" id = \"w1\">May 19<sub><em>th</em></sub><b> 迷宫</b>游戏</em></th>\n            <td><a href=\"./html4/index.html\" download>下载</a><br/></td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html5\" id = \"w1\">May 22<sub><em>nd</em></sub>/23<sub><em>rd</em></sub></</a> <a href = \"https://Moniwarmth.top/html/html5\" style=\"color: orange;text-decoration: line-through;\">又给你玩出花来了...</a></th>\n            <td><a href=\"./html5/index.html\" download>下载</a><br/></td>\n        </tr>\n        \n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html6\" id = \"w1\">May 26<sub><em>th</em></sub><strong> 邦加人</strong>の奇妙生活</a></th>\n            <td><a href=\"./html6/index.html\" download>下载</a><br/></td>\n        </tr>\n\n        <tr>\n            <th> <a href=\"https://Moniwarmth.top/html/html7\" id = \"w1\">June 1<sub><em>st</em></sub> 我们学校的食物价格</a></th>\n            <td><a href=\"./html7/index.html\" download>下载</a><br/></td>\n        </tr>\n\n\n        </table>\n        <hr/>\n        <strong style=\"font-family: 'qianxia';\">22号的网页已经做好啦！是复刻的黑塔转圈圈😀</strong>\n    </body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!Doctype html>\n<html>\n    <head>\n        <meta charset = \"utf-8\">\n        <title>HTML展示页</title>\n        <style>\n            @font-face {\n                font-family: 'qianxia';\n                src: url('qianxia.ttf');\n            }\n            h1 {\n                color: coral;\n                font-family:'qianxia';\n            }\n            p {\n                font-family: 'qianxia';\n                font-size: larger;\n            }\n            #mn{\n                color: orange;\n            }\n            body{\n                background-color:beige;\n            }\n            a{\n                text-decoration: none;\n                font-family: qianxia';\n            }\n            #w1{\n                color: orange;\n                font-family:Verdana, Geneva, Tahoma, sans-serif ;\n            }\n\n        </style>\n    </head>\n    <body>\n        <h1>Html! ☀</h1>\n        <img src=\"girl.jpg\"width = \"100\"/></blockquote>\n        <p><strong><big id=\"mn\">Moniwarmth</big></strong>敬上</p>\n        <hr/>\n        <b>介是本人的博客地址<b style=\"color:coral\"> * v * </b></b>\n        <a href=\"https://Moniwarmth.top\" style=\"color:orange;font-family: qianxia;\">点我进入博客！！！</a>\n        <hr/>\n        \n        <table border=\"1\" cellpadding = \"5\">\n        <caption style=\"font-weight: bold;;\">下方是最近<i>HTML</i>学习成果</caption>\n        <tr>\n            <th>\n                <!-- 如果要加表格的背景颜色 在style里变更background-color属性 -->\n                <a href=\"https://Moniwarmth.top/html/html1\" id = \"w1\">May 14<sub>th</sub> 小复习</em></a> \n            </th>\n\n            <td>\n                <a href=\"./html1/index.html\" download>下载</a><br/>\n            </td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html2\" id = \"w1\">May 17</em><sub><em>th</em><big><strong> 千</strong>奇<em>百怪</em>的<sup>文字</sup></big><b>！</b></sub></big></a></th>\n            <td><a href=\"./html2/index.html\" download>下载</a><br/></td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html4\" id = \"w1\">May 19<sub><em>th</em></sub><b> 迷宫</b>游戏</em></th>\n            <td><a href=\"./html4/index.html\" download>下载</a><br/></td>\n        </tr>\n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html5\" id = \"w1\">May 22<sub><em>nd</em></sub>/23<sub><em>rd</em></sub></</a> <a href = \"https://Moniwarmth.top/html/html5\" style=\"color: orange;text-decoration: line-through;\">又给你玩出花来了...</a></th>\n            <td><a href=\"./html5/index.html\" download>下载</a><br/></td>\n        </tr>\n        \n        <tr>\n            <th><a href=\"https://Moniwarmth.top/html/html6\" id = \"w1\">May 26<sub><em>th</em></sub><strong> 邦加人</strong>の奇妙生活</a></th>\n            <td><a href=\"./html6/index.html\" download>下载</a><br/></td>\n        </tr>\n\n        <tr>\n            <th> <a href=\"https://Moniwarmth.top/html/html7\" id = \"w1\">June 1<sub><em>st</em></sub> 我们学校的食物价格</a></th>\n            <td><a href=\"./html7/index.html\" download>下载</a><br/></td>\n        </tr>\n\n\n        </table>\n        <hr/>\n        <strong style=\"font-family: 'qianxia';\">22号的网页已经做好啦！是复刻的黑塔转圈圈😀</strong>\n    </body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>A table</title>\n</head>\n<body>\n    <h1>Easy and smooth computer languages</h1>\n    <hr/>\n    <table border = \"1\" cellpadding = '10' align = \"center\">\n        <tr>\n            <caption>Languages that I learned before</caption>\n            <th>C&C++</th>\n            <td>High algorithm skills required.</td>\n        </tr>\n        <tr>\n            <th>Python</th>\n            <td>Many functions provided.</td>\n        </tr>\n        <tr>\n            <th rowspan = '2'>Javascript</th>\n            <td>Simular to C</td>\n        </tr>\n        <tr>\n            <td>Support page making.\n            </td>\n        </tr>\n    </table>\n\n\n    <p>And Javascript is which i'm going to learn this summer vacation.</p>\n</body>\n</html>","source":"HTML/html7/feian/easy_and_smooth_languages.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>A table</title>\n</head>\n<body>\n    <h1>Easy and smooth computer languages</h1>\n    <hr/>\n    <table border = \"1\" cellpadding = '10' align = \"center\">\n        <tr>\n            <caption>Languages that I learned before</caption>\n            <th>C&C++</th>\n            <td>High algorithm skills required.</td>\n        </tr>\n        <tr>\n            <th>Python</th>\n            <td>Many functions provided.</td>\n        </tr>\n        <tr>\n            <th rowspan = '2'>Javascript</th>\n            <td>Simular to C</td>\n        </tr>\n        <tr>\n            <td>Support page making.\n            </td>\n        </tr>\n    </table>\n\n\n    <p>And Javascript is which i'm going to learn this summer vacation.</p>\n</body>\n</html>","date":"2024-06-02T14:42:47.459Z","updated":"2024-06-02T14:17:20.363Z","path":"HTML/html7/feian/easy_and_smooth_languages.html","title":"","comments":1,"layout":"page","_id":"clx775ny9001pzkue4j47831c","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>A table</title>\n</head>\n<body>\n    <h1>Easy and smooth computer languages</h1>\n    <hr/>\n    <table border = \"1\" cellpadding = '10' align = \"center\">\n        <tr>\n            <caption>Languages that I learned before</caption>\n            <th>C&C++</th>\n            <td>High algorithm skills required.</td>\n        </tr>\n        <tr>\n            <th>Python</th>\n            <td>Many functions provided.</td>\n        </tr>\n        <tr>\n            <th rowspan = '2'>Javascript</th>\n            <td>Simular to C</td>\n        </tr>\n        <tr>\n            <td>Support page making.\n            </td>\n        </tr>\n    </table>\n\n\n    <p>And Javascript is which i'm going to learn this summer vacation.</p>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>A table</title>\n</head>\n<body>\n    <h1>Easy and smooth computer languages</h1>\n    <hr/>\n    <table border = \"1\" cellpadding = '10' align = \"center\">\n        <tr>\n            <caption>Languages that I learned before</caption>\n            <th>C&C++</th>\n            <td>High algorithm skills required.</td>\n        </tr>\n        <tr>\n            <th>Python</th>\n            <td>Many functions provided.</td>\n        </tr>\n        <tr>\n            <th rowspan = '2'>Javascript</th>\n            <td>Simular to C</td>\n        </tr>\n        <tr>\n            <td>Support page making.\n            </td>\n        </tr>\n    </table>\n\n\n    <p>And Javascript is which i'm going to learn this summer vacation.</p>\n</body>\n</html>"},{"_content":"<!Doctype html>\n<html>\n    <head>\n        <meta charset = \"utf-8\">\n        <title>HTML展示页</title>\n        <style>\n            @font-face {\n                font-family: 'qianxia';\n                src: url('qianxia.ttf');\n            }\n            h1 {\n                color: coral;\n                font-family:'qianxia';\n            }\n            p {\n                font-family: 'qianxia';\n                font-size: larger;\n            }\n            #mn{\n                color: orange;\n            }\n            body{\n                background-color:beige;\n            }\n            a{\n                text-decoration: none;\n                font-family: qianxia';\n            }\n            #w1{\n                color: orange;\n                font-family:Verdana, Geneva, Tahoma, sans-serif ;\n            }\n\n        </style>\n    </head>\n    <body>\n        <h1>Html! ☀</h1>\n        <img src=\"girl.jpg\"width = \"100\"/></blockquote>\n        <p><strong><big id=\"mn\">Moniwarmth</big></strong>敬上</p>\n        <hr/>\n        <b>介是本人的博客地址<b style=\"color:coral\"> * v * </b></b>\n        <a href=\"https://Moniwarmth.top\" style=\"color:orange;font-family: qianxia;\">点我进入博客！！！</a>\n        <hr/>\n    \n        <b>下方是最近<i>HTML</i>学习的进程</b>\n        <br/>\n        <a href=\"https://Moniwarmth.top/html/html1\" id = \"w1\">May 14<sub>th</sub> 小复习</em></a> <a href=\"./html1/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html2\" id = \"w1\">May 17</em><sub><em>th</em><big><strong> 千</strong>奇<em>百怪</em>的<sup>文字</sup></big><b>！</b></sub></big></a> <a href=\"./html1/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html4\" id = \"w1\">May 19<sub><em>th</em></sub><b> 迷宫</b>游戏</em></a> <a href=\"./html4/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html5\" id = \"w1\">May 22<sub><em>nd</em></sub>/23<sub><em>rd</em></sub></</a> <a href = \"https://Moniwarmth.top/html/html5\" style=\"color: orange;text-decoration: line-through;\">又给你玩出花来了...</a><a href=\"./html5/index.html\" download> 下载</a></a><br/> \n        <a href=\"https://Moniwarmth.top/html/html6\" id = \"w1\">May 26<sub><em>th</em></sub><strong> 邦加人</strong>の奇妙生活</a> <a href=\"./html6/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html7\" id = \"w1\">June 1<sub><em>st</em></sub> 我们学校的食物价格</a> <a href=\"/html7/index.html\" download> 下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html8\" id = \"w1\">June 4<sub><em></em></sub> 写给同学的<b>作业汇总</b></a> <a href=\"/html8/index.html\" download> 下载</a>\n        <hr/>\n        <strong style=\"font-family: 'qianxia';\">22号的网页已经做好啦！是复刻的黑塔转圈圈😀</strong>\n    </body>\n</html>","source":"HTML/index_ver1.html","raw":"<!Doctype html>\n<html>\n    <head>\n        <meta charset = \"utf-8\">\n        <title>HTML展示页</title>\n        <style>\n            @font-face {\n                font-family: 'qianxia';\n                src: url('qianxia.ttf');\n            }\n            h1 {\n                color: coral;\n                font-family:'qianxia';\n            }\n            p {\n                font-family: 'qianxia';\n                font-size: larger;\n            }\n            #mn{\n                color: orange;\n            }\n            body{\n                background-color:beige;\n            }\n            a{\n                text-decoration: none;\n                font-family: qianxia';\n            }\n            #w1{\n                color: orange;\n                font-family:Verdana, Geneva, Tahoma, sans-serif ;\n            }\n\n        </style>\n    </head>\n    <body>\n        <h1>Html! ☀</h1>\n        <img src=\"girl.jpg\"width = \"100\"/></blockquote>\n        <p><strong><big id=\"mn\">Moniwarmth</big></strong>敬上</p>\n        <hr/>\n        <b>介是本人的博客地址<b style=\"color:coral\"> * v * </b></b>\n        <a href=\"https://Moniwarmth.top\" style=\"color:orange;font-family: qianxia;\">点我进入博客！！！</a>\n        <hr/>\n    \n        <b>下方是最近<i>HTML</i>学习的进程</b>\n        <br/>\n        <a href=\"https://Moniwarmth.top/html/html1\" id = \"w1\">May 14<sub>th</sub> 小复习</em></a> <a href=\"./html1/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html2\" id = \"w1\">May 17</em><sub><em>th</em><big><strong> 千</strong>奇<em>百怪</em>的<sup>文字</sup></big><b>！</b></sub></big></a> <a href=\"./html1/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html4\" id = \"w1\">May 19<sub><em>th</em></sub><b> 迷宫</b>游戏</em></a> <a href=\"./html4/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html5\" id = \"w1\">May 22<sub><em>nd</em></sub>/23<sub><em>rd</em></sub></</a> <a href = \"https://Moniwarmth.top/html/html5\" style=\"color: orange;text-decoration: line-through;\">又给你玩出花来了...</a><a href=\"./html5/index.html\" download> 下载</a></a><br/> \n        <a href=\"https://Moniwarmth.top/html/html6\" id = \"w1\">May 26<sub><em>th</em></sub><strong> 邦加人</strong>の奇妙生活</a> <a href=\"./html6/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html7\" id = \"w1\">June 1<sub><em>st</em></sub> 我们学校的食物价格</a> <a href=\"/html7/index.html\" download> 下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html8\" id = \"w1\">June 4<sub><em></em></sub> 写给同学的<b>作业汇总</b></a> <a href=\"/html8/index.html\" download> 下载</a>\n        <hr/>\n        <strong style=\"font-family: 'qianxia';\">22号的网页已经做好啦！是复刻的黑塔转圈圈😀</strong>\n    </body>\n</html>","date":"2024-06-10T05:29:44.466Z","updated":"2024-06-04T01:44:51.510Z","path":"HTML/index_ver1.html","title":"","comments":1,"layout":"page","_id":"clx9u6yha00003kueei585xtl","content":"<!Doctype html>\n<html>\n    <head>\n        <meta charset = \"utf-8\">\n        <title>HTML展示页</title>\n        <style>\n            @font-face {\n                font-family: 'qianxia';\n                src: url('qianxia.ttf');\n            }\n            h1 {\n                color: coral;\n                font-family:'qianxia';\n            }\n            p {\n                font-family: 'qianxia';\n                font-size: larger;\n            }\n            #mn{\n                color: orange;\n            }\n            body{\n                background-color:beige;\n            }\n            a{\n                text-decoration: none;\n                font-family: qianxia';\n            }\n            #w1{\n                color: orange;\n                font-family:Verdana, Geneva, Tahoma, sans-serif ;\n            }\n\n        </style>\n    </head>\n    <body>\n        <h1>Html! ☀</h1>\n        <img src=\"girl.jpg\"width = \"100\"/></blockquote>\n        <p><strong><big id=\"mn\">Moniwarmth</big></strong>敬上</p>\n        <hr/>\n        <b>介是本人的博客地址<b style=\"color:coral\"> * v * </b></b>\n        <a href=\"https://Moniwarmth.top\" style=\"color:orange;font-family: qianxia;\">点我进入博客！！！</a>\n        <hr/>\n    \n        <b>下方是最近<i>HTML</i>学习的进程</b>\n        <br/>\n        <a href=\"https://Moniwarmth.top/html/html1\" id = \"w1\">May 14<sub>th</sub> 小复习</em></a> <a href=\"./html1/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html2\" id = \"w1\">May 17</em><sub><em>th</em><big><strong> 千</strong>奇<em>百怪</em>的<sup>文字</sup></big><b>！</b></sub></big></a> <a href=\"./html1/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html4\" id = \"w1\">May 19<sub><em>th</em></sub><b> 迷宫</b>游戏</em></a> <a href=\"./html4/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html5\" id = \"w1\">May 22<sub><em>nd</em></sub>/23<sub><em>rd</em></sub></</a> <a href = \"https://Moniwarmth.top/html/html5\" style=\"color: orange;text-decoration: line-through;\">又给你玩出花来了...</a><a href=\"./html5/index.html\" download> 下载</a></a><br/> \n        <a href=\"https://Moniwarmth.top/html/html6\" id = \"w1\">May 26<sub><em>th</em></sub><strong> 邦加人</strong>の奇妙生活</a> <a href=\"./html6/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html7\" id = \"w1\">June 1<sub><em>st</em></sub> 我们学校的食物价格</a> <a href=\"/html7/index.html\" download> 下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html8\" id = \"w1\">June 4<sub><em></em></sub> 写给同学的<b>作业汇总</b></a> <a href=\"/html8/index.html\" download> 下载</a>\n        <hr/>\n        <strong style=\"font-family: 'qianxia';\">22号的网页已经做好啦！是复刻的黑塔转圈圈😀</strong>\n    </body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!Doctype html>\n<html>\n    <head>\n        <meta charset = \"utf-8\">\n        <title>HTML展示页</title>\n        <style>\n            @font-face {\n                font-family: 'qianxia';\n                src: url('qianxia.ttf');\n            }\n            h1 {\n                color: coral;\n                font-family:'qianxia';\n            }\n            p {\n                font-family: 'qianxia';\n                font-size: larger;\n            }\n            #mn{\n                color: orange;\n            }\n            body{\n                background-color:beige;\n            }\n            a{\n                text-decoration: none;\n                font-family: qianxia';\n            }\n            #w1{\n                color: orange;\n                font-family:Verdana, Geneva, Tahoma, sans-serif ;\n            }\n\n        </style>\n    </head>\n    <body>\n        <h1>Html! ☀</h1>\n        <img src=\"girl.jpg\"width = \"100\"/></blockquote>\n        <p><strong><big id=\"mn\">Moniwarmth</big></strong>敬上</p>\n        <hr/>\n        <b>介是本人的博客地址<b style=\"color:coral\"> * v * </b></b>\n        <a href=\"https://Moniwarmth.top\" style=\"color:orange;font-family: qianxia;\">点我进入博客！！！</a>\n        <hr/>\n    \n        <b>下方是最近<i>HTML</i>学习的进程</b>\n        <br/>\n        <a href=\"https://Moniwarmth.top/html/html1\" id = \"w1\">May 14<sub>th</sub> 小复习</em></a> <a href=\"./html1/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html2\" id = \"w1\">May 17</em><sub><em>th</em><big><strong> 千</strong>奇<em>百怪</em>的<sup>文字</sup></big><b>！</b></sub></big></a> <a href=\"./html1/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html4\" id = \"w1\">May 19<sub><em>th</em></sub><b> 迷宫</b>游戏</em></a> <a href=\"./html4/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html5\" id = \"w1\">May 22<sub><em>nd</em></sub>/23<sub><em>rd</em></sub></</a> <a href = \"https://Moniwarmth.top/html/html5\" style=\"color: orange;text-decoration: line-through;\">又给你玩出花来了...</a><a href=\"./html5/index.html\" download> 下载</a></a><br/> \n        <a href=\"https://Moniwarmth.top/html/html6\" id = \"w1\">May 26<sub><em>th</em></sub><strong> 邦加人</strong>の奇妙生活</a> <a href=\"./html6/index.html\" download>下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html7\" id = \"w1\">June 1<sub><em>st</em></sub> 我们学校的食物价格</a> <a href=\"/html7/index.html\" download> 下载</a><br/>\n        <a href=\"https://Moniwarmth.top/html/html8\" id = \"w1\">June 4<sub><em></em></sub> 写给同学的<b>作业汇总</b></a> <a href=\"/html8/index.html\" download> 下载</a>\n        <hr/>\n        <strong style=\"font-family: 'qianxia';\">22号的网页已经做好啦！是复刻的黑塔转圈圈😀</strong>\n    </body>\n</html>"}],"Post":[{"title":"C premier plus Chapter 1","date":"2023-11-27T15:18:43.000Z","_content":"\n# 第一章 学习准备\n\n>**你将会在这一章学到：**\n> \t1. C的历史以及特点\n> \t2. 写程序的步骤\n> \t3. 关于代码连接器与编译器的一些知识\n> \t4. C标准\n\n欢迎来到C语言的世界！C语言是一种充满活力的高级编程语言，它受到业余与商用编程者的喜爱。\n这一章会为你学习与利用这种强大而又受欢迎的语言，而且会向你介绍几种你最有可能搭建C语言基础的环境。\n\n首先，我们看向C语言的来源和它的一些特点（优点以及缺点）。接着，我们会了解编程的起源，查看编程的总体规则。\n最终，我们会讨论如何在常见的系统中运行C程序。\n<!--more-->\n\n# 1.1 C语言的由来\n\n贝尔实验室的Dennis Richie在1972年创造了C语言，也就在那时，他和Ken Thompson正在致力于设计Unix系统。C语言的想法并不完全是在Richie的脑袋里冒出来的，而是来自Thompson的B语言，B语言来自哪里又是另一个故事了。重点是，C语言是作为工作中的编程人员的工具被创造出来的，所以它的首要目标就是成为一种有用易用的语言。\n\n很多编程语言都有着类似的目标，但是它们又经常会有其他的顾虑，举几个例子，Pascal语言的主要目标，就是为了教授编程规则提供良好的平台。BASIC语言，被设计得与英语很相像，从而可以方便地让不熟悉电脑的学生们学习。这些目标都是很重要的，但是并不与实际使用协调，也并不是普遍都很易用。相比之下，C语言是为了编程人员而生的，而且成功地成为了现代编程语言的一种选择。\n\n# 1.2 为什么使用C语言？\n\n在过去的30年来，C语言已经成为了最重要与最受欢迎的编程语言。它的成长，就是因为人们经过尝试之后，喜欢使用它。过去的10年里，许多人从C语言转到的更有规模的C++上，但C语言仍然是拥有权重的一种很重要的语言，C++也是从C语言迁移过来的。在学习C语言的过程中，你会意识到C语言的许多长处（见图1.1）让我们预先查看一下。\n![插图](/img/Chapter1.2.png)\n（上图，左上为强大的控制结构，右上运行速度快，左下小型代码-小程序，右下是可以传输到不同的电脑）\n\n## 1.2.1设计特点\nC语言是一种拥有在理论界以及计算机科学实践中令人满意的控制特色的现代编程语言。它的设计让它很自然地能自上而下地规划程序、结构化编程以及模块化设计，从而设计出的程序也更可靠，更易懂。\n\n## 1.2.2 效率\nC语言是一种高效的编程语言，它的设计很好地利用了现代电脑的性能。C语言编写的程序常常是小型的，并且运行速度很快。事实上，C表现了一些在汇编语言中好的控制方法，（汇编语言是对于特定的中央处理单元(Central Processing Unit,CPU)的内部指令设计的的助记语句，不同的CPU有着不同的汇编语言）。如果你选择C语言，你可以调节你的程序到达最快速度或者让程序对于内存的使用更有效。\n\n## 1.2.3 可传递性\nC语言是一种可传递的编程语言，那意味着在一个系统上的C语言程序也可以在其他系统经过少量的改动或者不改动运行。即使改动是必须的，也只是改动头文件与main程序里的几个词条而已。大多数也打算着有可传递性，但是任何想要把个人电脑IBM里的BASIC程序放到苹果BASIC（它们是近亲）或者尝试把主机上的IBM里的FORTRAN程序在Unix系统中运行都知道传递烦人透顶。C语言是可传递性的领头者。C语言的编译器（把你的C语言代码转换为电脑内部指令的程序）对于40种系统都是可以使用的。从微型处理器到超算。但需要注意的是，一部分程序对于不同的硬件设备是不一样的，比如显示器监控，或者因为在运算系统上的特殊点，比如WinXP与OS X，它们通常是不具有传递性的。\n\n因为C语言与Unix操作系统关系紧密，Unix系统的安装包是自带C语言的编译器的，Linux安装时也通常带有C语言编译器，一些C语言编译器是可以在个人电脑上使用的，包括运行着各种版本的Windows系统的电脑，还有Mac。所以不论你是正在使用着家里的电脑，还是使用专业的工作站或者大型电脑，你都是有很大可能获得一个适用于你的系统的C语言编译器的。\n\n## 1.2.4能力与灵活性\nC语言既强大又灵活（在计算机文献中最受喜欢的两个词）。\n举个例子，许多功能强大与灵活的操作系统是用C语言写的。许多的其他编程语言（如FORTRAN、Perl、Python、Pascal、LISP、Logo与BASIC）的编译器与翻译器是用C语言写的。结果，当你在Unix机上使用FORTRAN语言，最后是用C语言程序生成的exe文件。C语言程序被用作解决物理、工程问题甚至在电影如《角斗士》中栩栩如生地重现特殊的现象。\n\n## 1.2.5 以程序员为方向的\nC语言重视于满足程序员的需求，让我们轻松地触达硬件，而且让你独立地操纵内存中的每一个bit。它拥有非常多的运算符，能够让你简洁地表达自己。C语言比起，比如说Pascal语言就在限制着你可以做的事情。这种灵活性既是优势也很危险。优势在许多的任务，像是数据形式转换，在C语言中简单很多。危险就是用C语言，你有可能犯在其他语言中不可能犯的错误。C语言给予了你更大的自由，也让你承担了更多的责任。\n\n另外，大多数C语言的实施都有着大量有用的C语言库函数。这些函数能够应对很多编程人员通常的需求。\n\n## 1.2.6 缺点\nC确实有一些不足之处。通常，像人一样，不足与长处是同一个特点的两面。例如，我们提到了C语言的自由表达也需要更多的责任。C语言的指针（我们以后会学习到）使用特别地，意味着编程错误会更难跟踪到。曾经也提到了一台没有文字的电脑，解放的代价就是格外的警惕，\n\n有着大量的运算符，C的简明也让有可能让我们写出极其难以理解的代码。你可能并不是必须要写晦涩的代码，但是可能性总在那儿。毕竟，其他语言哪个有每年一次的混乱的编程比赛？\n\n还会有更多的长处，毫无疑问也会有更多的缺陷。与其在这个问题上挖的更深，还不如移到下一个话题。\n\n# 1.3 C语言的用处\n\n到 1980 年代初，C 语言已经是 Unix 系统小型计算机世界的主导语言了。从那时起，它就已经被传播到个人计算机（微型计算机）和大型主机（大型计算机）了。（参见图 1.2）许多软件公司把C语言作为制作文字处理程序、电子表格、编译器和其他产品的首选语言。它们知道C语言编写的程序代码量小而且高效。更重要的是，他们知道这些程序将易于修改，并易于适应新型号的计算机。\n![图片](/img/Chapter1.3.png)\n（以上，C语言被用作编程Unix操作系统，被用作电影如Star wars，在电脑游戏、电脑语言处理、嵌入式系统与机器人工程中都有显著的作用）\n\nC语言不仅对公司和老手有好处，对其他用户也有好处。越来越多的计算机用户已经开始使用 C 语言，它的优势也得到了确保。你不必是专业的计算机编程人员就可以使用C语言了。\n在 1990 年代，许多软件公司开始转向 C++ 语言进行大型编程项目。C++ 将面向对象的编程工具嫁接到 C 语言中。（面向对象编程是一种思想体系，它试图使语言来适应问题，而不是让问题来适应语言。）C++ 几乎是 C 语言的超集，这意味着任何 C程序也是，或者它几乎也是一个有效的C++程序。通过学习 C语言，您还学习了许多 C++。\n尽管 C++ 和 Java 等新型的编程语言很受欢迎，但 C语言在软件公司依然是核心技能，一直排在所需技能的前 10 名。特别的，C语言已成为在嵌入式系统编程中很受欢迎的一种语言，也就是说，它被用于编程越来越多的汽车、相机、DVD 播放器和其它现代便利设施中的常见的微型处理器。此外，C语言已经开始追赶在科技科学编程上具有长久的主导地位的FORTRAN语言。最后，作为为开发操作系统而生的语言，C语言在Linux系统的发展中发挥着重要作用。所以，在二十一世纪的第一个十年， C 语言的影响力仍然在变得更大。\n\n简而言之，C 是最重要的编程语言之一，并将继续如此。如果你想要一份编程软件的工作，这应该是你能够回答“是”的第一个问题中的一个，“嗯，比如说，你会C语言吗？“\n\n# 1.4 计算机的作用\n\n既然你已经要开始学习如何运行C语言程序了，你很可能需要了解一下电脑是怎么工作的，这些知识能够帮助你了解C语言程序与最终运行程序后发生的事情之间的关联。\n\n现代的电脑有几个组成部分，***中央处理器***，又叫***CPU***，做了电脑运转时的大部分工作。***随机存取器***，又叫***RAM***，作为保存文件与程序的工作区。永久存储器，比如硬盘，存储程序和文件，即使电脑已经关机。各种外设，比如键盘、鼠标还有显示器，在你与电脑交互中搭建了桥梁。CPU运行程序，所以我们集中于它的作用。\n\nCPU的自始至终的工作，简单来说，其实是非常简单的。它从内存中依次抓取一条条的指令，然后执行它。（千兆赫CPU可以在一秒钟执行这个过程百亿次，所以CPU可以以一种惊人的速度运作），CPU也有自己的小工作区，有几个储存数的***寄存器***。每一个寄存器保存下一条指令的内存地址，然后CPU就使用这些信息来抓取下一条指令。接下来，CPU再把指令储存在另一个寄存器中，然后把上一个寄存器的命令更新到下一条。CPU能够理解的指令（也叫指令集）是有限的。而且这些指令都是各自分明的。很多指令都是要求电脑去把数字从一个地方移动到另一个地方。---例如，从内存到寄存器。\n\n在这个过程中有几点很有趣。第一，在电脑中任何东西都是以数字的形式储存的，数字是以数字的形式储存的。字符（例如你在文本编辑中的英文字母），也是由数字的形式储存的，每一个字符都有一个数字编码。计算机储存进寄存器的指令也是数字的形式，指令集中的每一条指令都对应着一个数字编码。第二，电脑程序最终会被以数字指令的形式表达，这又叫***机器语言***。\n\n计算机运行的一种结果就是，如果你想让计算机做些事，你需要提供一系列的指令或者是程序，来明确地告诉它要做什么和怎么做。你必须创建一个电脑能够直接理解（使用机器语言）的程序。这是个精细、单调、费劲的任务。一些像两个数相加的简单的任务可能会被分解成几步，可能会像下面几步。\n\n>1.从内存区域2000把数字复制到寄存器1\n>2.从内存区域2004把数字复制到寄存器2\n>3.用数字二的数值加上数字一，在寄存器1留下答案。\n>4.把寄存器1中的数据复制到内存区域2008\n\n而且你还得把每一条指令用数字指令表述出来！\n\n如果你是喜欢以这种方式写程序的，你会很难过地了解到机器语言编程的黄金时期已经远远地过去了。但是如果你更喜欢那些更愉快的编程，那就对高级编程语言打开怀抱吧！\n\n# 1.5 高级计算机语言与编译器\n\n>高级编程语言，比如C语言，以很多方式简化了你的编程。\n\t第一，你不需要用数字的形式来表达你的指令。\n\t第二，你使用的指令与你对于程序的思考而不是与电脑使用的精确的指令\n\n与其关心某一个CPU为了完成某一个任务进行的某一步。你可以以一种更复杂的形式来表达你想做的事情，例如，你也许会写下面的东西。\n\n```C\n\ttotal = mine + yours;\n```\n\n看到这样的代码，你能够很明白它是干啥的，\n而看着机器语言以数字构成的替代指令，那就太不易读了。\n\n不幸的是，机器语言才是适合电脑的，对于电脑来说，高级语言完全无法理解。这就到了编译器上场的时候了，***编译器***是把高级语言程序详细地翻译成电脑需要的机器语言指令的程序。你以高级的方式思考，编译器做这些令人生厌的工作。\n\n编译器方法还有另一种好处。每台电脑都设计了各自的机器语言，所以比如说英特尔PentiumCPU的机器语言对于摩托罗拉PowerPC CPU可能没有任何意义，但是你可以根据特定的机器语言搭配编译器。所以，使用一系列的编译器或者合适的编译器，你就可以把同样的高级编程语言转化成一系列不同的机器语言程序。你只需要解决这个问题一次，然后让编译器把这个解法翻译成一系列机器语言程序。\n\n简短地说，高级的编程语言，比如C语言、Java还有Pascal，它们以一种更加抽象、与特定的CPU并不绑定的方式来表述程序行为。而且，对于机器语言来说，高级语言学习起来简单而且也更容易编程。\n\n# 1.6 使用C语言的七步走\n\nC语言，如你所见，是一种编译型的语言，如果你习惯于使用如Pascal或者FORTRAN的编译型语言，你应该已经对组成C语言程序的基本步骤很熟悉了。如果你的基础语言是如BASIC，或者面向接口的计算机图形语言（如Visual Basic）的翻译型语言，或者你还没有编程基础，你需要学习如何编译。我们一会就会研究那个过程，你会认识到这是很合理简单的。首先，为了让你宏观、大体上了解编程，让我们把编写C语言程序分解成7个步骤（见图1.3）。值得注意的是，这只是理想化的步骤，在编程实践中，你需要在步骤中来回切换，用后面一步了解到的来使之前的一步得到优化。\n![七步走](/img/Chapter1.6.png)\n\n## 1.6.1 确定程序目的\n\n很自然的，你需要明确地知道你想让程序做什么，思考你的程序需要什么信息，需要在计算与控制上完成什么样子的事情，而且程序内的信息需要对你有所反馈，在这一步的规划中，你应当以大体出发，而不是根据特定的编程语言来思考。\n\n## 1.6.2 设计程序\n\n在有了对于你的程序应该干啥的印象之后，你应该选择程序如何来运行它，用户的交互界面会是什么样子的？程序应该如何被组织起来？程序的目标人群是？你需要多长时间来做完这个程序？\n\n你还要决定在程序中呈现数据，而且很可能的，在辅助文件里也要。要决定用什么方式来处理数据。在刚开始学习C语言时，可能选择会很简单，但是随着你应对更多复杂的情况后，你就会知道这些选择是需要更多的思考的。选择一种好的方式来呈现数据经常会让设计程序与处理数据简单很多。\n\n再一次，你需要在大体层面上思考而不是在特定的代码上，但是有些选择可能是基于编程语言的大体特点的，举个例子，C语言编程人员就比，比如说，Pascal编程人员在数据呈现上拥有更多的选择。\n\n## 1.6.3 编写代码\n\n既然你已经对于你的程序有个清晰的设计了，你就可以通过写代码的方式来实现它了。也就是说，你可以把你的程序设计翻译为C语言。这就是你需要用上C语言知识的地方了，你可以在纸上画出你的想法，但最后你还是要把你的代码输入电脑。这个过程主要取决于你的编程环境，我们一会会呈现更多的常见的编程环境。总体上，你会使用文本编辑器来创造一份源码文件，它包含了你程序设计的C语言翻译，例1.1给出了C语言源码的一个例子。\n\n![图例1.1](/img/listing1.1.png)\n在这一步，你应该记录你的工作，最简单的方式是使用C语言的注释功能，它包含着你对于源码的解释，我们会在第二章详细讲到如何注释你的代码。\n\n## 1.6.4 编译\n下一步就是编译源码，再一次，细节上的问题是与你的编程环境相关的，我们马上会研究几种常见的环境了。现在，让我们以更概念化的方式看看发生了什么。\n\n我们已经知道编译器的工作就是把源码转化成可执行文件。***可执行文件***是以我们电脑的自然语言（或者说***机器语言***）写成的，这种语言是以精细的数字代码形式呈现的。而且你之前也了解到了，不同的电脑的机器语言是不一样的。C语言的编译器也包括着C语言库中的代码。C语言库包含着很多的基础的、日常使用的东西，比如**Printf**和**scanf**函数。（更精确地说，一个叫做连接器的程序把C语言库中的一组代码带到编译器，但是编译器在大多数系统都是可以运行连接器的），最终结果就是包含着电脑可理解的可执行文件的程序，你可以直接运行。\n\n编译器还会检查你的程序是不是使用了符合语法的C语言，如果编译器发现了错误，它就会汇报给你，而且不会生成可执行文件，理解编译器提示的错误信息也是你会很快习得的另一项技能。\n\n## 1.6.5 运行程序\n\n通常的，可执行文件是你可以运行的程序，你可以在很多常见的环境中，包括MS-DOS、Unix、Linux控制台、只需要打字写下可执行文件的名称。其他的环境，比如VMX、VAX可能需要一些运行指令或者其他的机制方法。***集成开发环境（IDE）***，像很多在Windows系统或者Mac系统上的，使你能够在IDE内部通过菜单选项或者按几个按键来编辑与运行你的C语言程序。最终生成的文件也可以通过双击文件名或者图标的方式从你的操作系统直接运行。\n\n## 1.6.6 测试与Debugging\n\n你的程序能够运行是个好迹象，但是有可能你的程序并没有正确地运行。因此，你应该检查下是否它做到了它应该做的事情。你会发现有些程序是会有问题（在计算机领域内的行话叫bugs）的。调试是查找与修复程序错误的过程，学习的过程中犯错误是自然且正常的。看起来编程“天生”需要调试，所以当你把学习到的与编程实际结合起来的时候，你最好准备好在犯错的时候提醒自己。随着你成为一个更加强大与巧妙的编程人员，你也会不断地犯错，但你也因此不断地变得更加强大与巧妙。\n\n你会有很多机会犯错，基础的设计层面错误，实现过程出错，忽略了可能会搞砸你的程序的输入。你可能会不恰当地使用C语言，你可能会拼写错误，可能会把括号放错了位置等等等等。你会有自己的错误方式来丰富这一列的。\n\n幸运的是，这种情况并不是无望的，即使有时候你会这样认为啦。\n编译器会捕捉到很多种类的错误，而且还会有工具来帮助你找到许多种编译器没有办法捕捉的错误。继续读下去，这本书也会给到你一些调试的建议。\n\n## 1.6.7 维护与修改程序\n\n当你为自己或者别人创造了一个程序，你可能会发现程序是可以有更多的用处的。如果是的，你可能会发现是有理由做出些修改的。可能有个小bug只有别人把名字以Z/z开头的时候才会发生，或者你会想出一种能够解决问题的更好的方式，可以聪明地加入一些的新功能，你可能需要改写程序以便它能够在不同电脑系统中运行。如果你明确地注释了这些程序，所有这些任务都会被极度地简化。\n\n## 1.6.8 注释\n\n编程的过程并不总是像这个过程描述的那样线性。有的时候你需要在步骤中前后切换。例如，当你在写代码的时候，你有可能发现你的计划并不实际。你有可能发现了一种更好的方式来做事，或者在看到程序是怎么运行的之后，你会想要改变你的设计，记录你的工作能够帮助你在不同的等级之间前后切换。\n\n许多学习者通常会忽略掉第一步与第二步（确定程序目的与设计程序）直接进入第三部（写程序），你写的第一个程序或许可以直接在脑中看到完全的流程，如果犯错也很好定位错误。但是随着你编写的程序越来越复杂，越来越冗长，心智的视觉化就开始失效了，而且错误也会更难以发现。最终，那些忽略了规划步骤的人就陷入数小时的时间浪费、困惑还有沮丧，因为他们写出的丑陋的，无法实现功能而又深奥的程序。这项工作越是复杂，需要的规划工作就越多。\n\n道理就是你需要养成在写代码之前做规划的习惯，使用这种古老但是可敬的笔尖技术来记下你程序的目的，给程序设计做出大纲。如果你这样做的话，你最终会收获节省时间与满足感的巨大红利。\n\n## 1.6.9 编程技术\n\n你生成程序的明确步骤是取决于你的电脑系统的，因为C语言是可传输的，它是可以适用于很多的系统环境的，包括Unix，Linux，MS-DOS（是的，很多人仍然在用），Windows与Mac OS，其实还有很多只不过没有足够的空间留给它们了，这尤其是因为各自的产品不是演化、消亡，就者被取代。\n\n首先，即使如此，让我们先来研究许多C语言运行环境的共有特点，包括我们刚才已经提到的五种系统，你不需要明确地知道是什么引导了C语言程序的运行，但这是良好的基础，它也能够帮助你更好地理解为什么你需要经历一些特定的步骤来得到一个C语言程序。\n\n当你在写C语言程序的时候，你会在源码文件中储存你在文本文件中写下的东西。大多数由C语言编程的系统，也包括我们提到的那一些，需要以`.c`结尾的文件（举个例子，`wordcount.c`与`budget.c`）在`.c`之前的那部分名字叫做***基准名（Basename）***\n在这一段后面的名称叫做***拓展名（Extension）***，因此，`budget`是基准名，`.c`是拓展名。它们的混合就是文件名。文件名也必须要复合特定的电脑操作系统的需要。例如，IBM-PC与[克隆机？]上的MS-DOS系统，它就要求你的文件名不能多于8个字符长。所以，`wordcount.c`在DOS系统中就不是合法的文件名。一些Unix系统在整个文件名上有14个字符的限制，包括拓展名，其他Unix系统也允许更长的名称，不多于255个字符即可。Linux、Windows与MacOS也允许更长的文件名。\n\n让我们假设我们拥有一份名字叫`Concrete.c`的源文件储存着例1.2的C语言源码。\n![Concrete.c](/img/listing1.2.png)\n不需要担心在源码文件中的一些细节，在第二章你会学到的。\n\n#\n\n## 1.7.1 目标代码文件、可执行文件和库\n\nC语言编程的一个基本本领就是把你的源代码文件转化成保存着即时就可运行的可执行文件。要实现这个过程需要两个步骤：编译与连接。编译器可以把源代码转换成中间代码，然后连接器再把中间代码与其他代码组合，由此创造出可执行文件。C语言利用这两部分结合的方法让程序易于模块化生成。你可以把每一个模块分开来编译，再用连接器把每一个编译过的模块结合起来。以那种方式，如果你想改变其中的一个模块，你就不需要再重新编译其他的模块，而且连接器也会把你的程序与预先编译好的库代码结合起来。\n\n要生成中间文件的方法还有几种，最流行的而且能够实施的在这里已经提到了，就是把源代码文件转化成机器语言代码，把结果放在目标代码文件中或者简短地说，目标文件。（假设你的源码是由单一文件组成的），虽然目标文件包括了机器语言代码，它还没准备好运行。目标文件包含了对于源代码的翻译版本，但是它还不完整。\n\n缺失的第一个部分就是起始代码，它作为你的程序与操作系统的接口。举个例子，你可以在在DOS或者Linux之下协调地运行BM PC，它们的硬件都是类似的，所以同样的目标文件对于两种系统都是可以起作用的，但是你需要在DOS与Linux不同的起始代码，因为不同的系统是以不同的方式处理程序的。\n\n第二个缺失的部分就是常用库的代码。几乎所有的C语言程序都需要利用C语言的库函数。比如`Concrete.c`使用的`printf()`。目标代码文件并不包括这个函数的代码。它只包含了`printf`函数的声明指令，实际的代码是在另一个文件中储存的，它叫***库文件***。库文件包含了很多函数的代码。\n\n连接器的作用就是把这三个部分连接在一起-你的目标代码、起始代码和库代码，然后把三者整合为一个文件，即可执行文件。对于库代码，连接器只提取需要使用的函数在C语言库中对应的代码。\n（见图1.4）\n![图1.4](/img/listing1.4.png)\n（可见，上图中，由源代码经过编译器生成目标代码文件，再由目标代码文件与起始代码、库代码通过连接器转化为可执行文件`concrete.exe`）.\n\n简短来说，一份目标文件与可执行文件都由机器语言指令组成。然而，可执行文件只把你使用的代码翻译为机器语言，但可执行文件还由常用库与起始代码的机器语言翻译组成。\n\n在一些系统中，你必须把编译与连接的过程分开。另外的一些系统中，编译器会自动启动连接器，所以你只需要编译即可。\n\n现在我们就针对于特定的系统来研究一下。\n\n## 1.7.2 Unix系统\n因为C的流行始于Unix系统，我们就从它开始。\n\n### 在Unix系统中进行编辑\nUnix系统并没有独立的C语言编译器。你反而需要一些多功能的Unix编辑器，例如emacs、jove、vi或者一个X Window系统文本编辑器。\n\n你的最主要的两个目的就是正确地书写程序，并且为储存程序的文件起个名字。正像已经提到的，文件的名称必须以`.c`。注意到Unix系统会以大小写来区分文件，所以`BUDGET.c`、`budget.c`还有`Budget.c`是三个各自不同的C源文件名称，但是`BUDGET.C`是不合法的，因为它的扩展名使用了大写。\n\n使用vi编辑器，我们把下面的程序保存在名叫`inform.c`的文件中。\n![inform.c](/img/informc.png)\n这些文本就是源代码，而`inform.c`是源文件，重点就在源文件只是一个过程的起点，而不是结尾。\n\n### 在Unix系统中进行编译\n我们的程序，虽然已经不可否认地很精致了，对于电脑仍然是一派胡言，电脑是不理解什么是`#include`和`printf`的（现在你可能也不理解，但是我们很快就会学习，然而电脑并不会），正像我们之前讨论过的。我们需要编译器的帮助来把我们的代码（源代码）翻译为电脑的代码（机器语言）。这些工作的结果就是可执行文件，它会包含所有可以让电脑完成工作的代码。\n\nUnixC编译器叫`cc`，为了编译`inform.c`程序，你需要把下面的指令打下来。\n```C\n\tcc inform.c\n```\n\n几秒之后，Unix系统的命令提示符就会给出反馈，告诉你这件事已经做完了，如果你没有正确地编写代码的话可能会得到警告或者错误信息，但我们先假设一切都是正确的。（如果你的编译器对于`void`这个词进行报错，那是你的编译器还没有更新到 **ANSI C** 的编译器，我们会在不久提到更多的标准，即使这样，你从例子中删掉void就好）。如果你使用`ls`指令来把你的文件列出来的话，你会发现产生了一个新文件叫`a.out`（见图1.5）这就是包含了程序中翻译后指令（或编译后指令）的可执行文件。想要运行的话直接打下`a.out`即可。\n\n然后，文件中的指令执行，智言倾泻而出。\n```Bash\nA .c is used to end a C program filename.\n```\n如果你想要吧可执行文件保存下来，你需要重新命名它，\n否则，这个文件在你下一次编译时就会被新的同名文件代替。\n![The process](/img/process.png)\n（从源码到程序的过程）\n\n## Linux 系统\nLinux也是个很受欢迎的开源的，与Unix类似的多平台操作系统，它包括IBM与Mac的兼容。在Linux上设计程序与Unix系统的过程大部分是相似的，除了你需要使用公用C语言编译器，它叫gcc，是由GNU提供的，在那里面，编译的指令是这样的：\n```Bash\ngcc inform.c\n```\n注意到在Linux安装的时候安装gcc的时候可能是可选的，所以你（或者其他人）有可能如果之前没装的话必须得自己安装gcc。通常这会让cc成为gcc的一个别名，所以你喜欢的话可以用cc来代替gcc。\n\n你可以在下面的网站中获取关于gcc获取更多的信息，包括最新的版本。\nhttp://www.gnu.org/software/gcc/gcc.html.\n\n## 集成开发环境（Windows）\n\nC编译器并不是Windows安装包中的一部分，所以你也有可能需要安装一个C语言编译器。很多供应商，比如Microsoft, Borland, Metrowerks, 还有Digital Mars, 提供了以Windows系统为基础的集成开发环境（***IDE***）（近来，很多已经把C语言与C++编译器结合在一起了。）它们都有快速且集成的环境，可以方便地生成C语言程序。值得注意的是，每一个程序都有一个嵌入式的编辑器，你可以用它来编写C语言程序。都有可以让你命名、保存、编译、运行的菜单。每一次编译运行如果编译器发现错误了你都可以回到编辑器，而且出错的代码行都会被突出显示出来，并搭配上适当的错误信息。\n\nWindows IDE通常是可以一同处理C与C++的，你需要声明你需要一个C++程序。使用一些产品，比如Metroworks或者CodeWarrior里你需要用项目类型来区分你使用的语言。其他的产品比如Visual C++你是使用`.c`的扩展名来表示你想要使用C语言而不是C++。然而，大多数C语言程序也作为C++程序运作，可以参考“Differences Between C and C++”，那里对C与C++进行了比较。\n\n你有可能遇到的一个问题是当程序停止的时候程序运行的窗口也随之关闭，如果你也遇到这种情况，你可以让程序直到你输入一个字符再结束。只要在代码结尾，return语句前加上一行代码即可。\n\n```C\n\tgetchar();\n```\n这一行代码读取一个键盘输入，所以直到你输入下一个字符之前程序都是暂停着的。一些时候，受到程序运行方式的影响，可能在最后已经有一个键入数据等待了，这种情况下你就得输入两次。\n\n```C\n\tgetchar();\n\tgetchar();\n```\n\n例如，如果程序做的最后一件事是要求你输入你的体重，你已经输入完体重了然后输入enter来输入数据，程序会读取你的体重，第一个`getchar`会读取回车符，第二个`getchar`直到你再打一个字符才会有，如果你现在还不太能够理解，你学习完C语言输入就会明白了。\n\n即使多种多样的IDEs普遍有着比较类似的标准，但是细节方面还是各自不同的，不仅在一行程序内，还在编译器的不同版本。你需要做些实验，来获知你的编译器是怎么工作的，你还有可能需要阅读使用手册或者尝试网上教程。\n\n## IBMPC上的DOS编译器\n对于很多人来说，在个人电脑上运行DOS是很过时的事情，但是它对于那些电脑资源与预算受限、喜欢更简单的，没有[响铃、哨音]与令人分心的事物的操作系统。很多Windows IDEs额外提供了命令行工具，这就然你能够在DOS命令行环境下编程。Comeau的C/C++编译器在很多系统中是适用的，包括几种Unix、Linux的变体，它就拥有一个命令行DOS的版本。并且，它还有免费与共享的DOS系统编译器，例如，GNU gcc编译器就有一个以DOS为基础的版本。\n\n源码文件应该以文本文件形式存在，而它们并不是文字处理文件。（文字处理文件包括了很多额外信息，比如字体和格式）你应该使用一个文本编辑器如Windows Notepad或者与一些版本的DOS一同发布的EDIT程序。文件的扩展名需要是`.c`，一些处理器会自动在文本文件后面加上`.txt`的扩展名。如果你遇到了这种情况，你需要改变文件名，把`.txt`改为`.c`。\n\n电脑上的C语言编译器通常，但并不总是，生成带有`.obj`后缀的中间目标代码，不像Unix编译器，C语言编译器通常不会在编译完成之后删除这些文件。有些编译器也会生成带有`.asm`扩展名的汇编语言文件，或者使用它们自己的特殊形式。\n\n## Mac上的C语言\n\n最广受闻名的Mac C/C++编译器就是Metrowerks CodeWarrior 编译器（Windows与Mac版本的CodeWarrior有相似的界面），它提供了与Windows编译器相似的以项目为基础的IDE。从文件菜单选择新文件开始，一系列的项目类型选择将会陈列在你眼前。在最新的CodeWarrior版本中，使用Std C控制台即可（不同的发布版本需要经过不同的步骤才到达选择这一步），你还有可能在68KB版本（适于摩托罗拉 680 * 0 系列的处理器），PPC版本（适于PowerPC处理器）或者Carbon版本（适于OS X系统）\n\n新的项目在最初项目中会有一个很小的源码文件，你可以尝试编译或者运行它来获知你的系统是否设置好了。\n\n# 1.8 语言标准\n\n现在，很多C语言实例都是可行的，理想化情况下，当你在写C语言程序时，在任何的实例中都是一样运作的（假设你没有使用特殊机器来编程），为了这件事情能够实现，不同的实例需要有一个确定的、可识别的标准。\n\n最初，C语言官方并没有语言标准，但是，由Brian Kernighan和Dennis Ritchie（1978）编纂的最初一版的***C Programming Language***确立了被接受的标准，它通常被称作为***K&R C***或者***classic C***。特别的是，那本书附录中的“C Reference Manual”作为了C语言实例的指导。但是，比如编译器，就会要求一个完整的K&R实例，因为即使附录中定义了C语言，它还没有定义C语言库。C比其他的大多数语言都要更加依赖于C语言库，所以库标准还需要确立。没有任何的官方标准的情况下，Unix实例中提供的库就成为了实际的标准。\n\n## 第一个ANSI/ISO C语言标准\n随着C语言的进步与在不同系统中的广泛使用，C语言社区意识到它需要一个更加综合、与时俱进并且严格的标准。为了满足这种需求，美国国家标准研究院在1983年成立了X3J11委员会，开发了一种新的标准，它在1989年被正式使用，这种新型标准（ANSI C）不仅定义了语言而且还定义了基础的C语言库，国际标准化组织采用了在1990年一种C语言标准（ISO C）。ISO C与ANSI C本质上是一样的标准。ANSI/ISO标准的最后一种版本通常被称作***C89***（因为那是ANSI同意的时候）或者***C90***（那是ISO同意的时候），而且因为ANSI版本是先推出的，人们更经常用的是ANSI C。\n\n这个协会有几项指导准则，可能最有趣的就是这一项：保持C语言的精神\n委员会在阐述这种精神的时候列出了以下的几点。\n\n+ 相信编程人员。\n+ 不要阻止编程人员做需要做的事情。\n+ 保证简单、小型地使用这种语言。\n+ 一项操作只提供一种方式。\n+ 即使传输性会下降，也要尽力让C语言程序运行变快。\n\n在最后一点中，委员会的意思是实例必须界定一种对于目标电脑的运转最好的操作，而不是试着强加抽象的、统一的定义。在学习语言的同时，你也会体会到这种哲学的。\n\n## C99标准\n在1994年，他们开始重新审视这个标准，这也导致了C99标准的产生，一个ASIO/ISO联合委员会，也被称作***C9X***委员会批准了C90标准的准则，包括保持语言的小型与简洁，委员会的目的并不是向语言中添加新的特性，而是按需去达到新的目标。其中一个主要目标就是，通过比如提供解决国际字符集的方法，来支持国际编程。另一个目标就是“把现存的实践编程化来解决明显的缺陷”。因此，当在达成把C语言移植到64位的处理器上的需要时，委员会 以在真实生活中应对过这种问题的人的经验为基础来添加标准。第三个目标就是改善C语言执行科学与工程项目时做关键数字运算时的合适度。\n\n这三点-国际化，纠正缺陷与对于计算可用度的改善是最主要的以改变为方向的目标，其他的改变计划自然更加保守，例如，把与C90与C++的不协调降到最低，并且让这个语言概念上是简洁的。用委员会人员的话来说，“委员会在让C++变得更加重要，更加有发展动力。\n\nC99改变的结果，就是它保持了C语言的必要的基本特征，C语言仍然是一个小型的，简洁并高效的语言，这本书指出了很多C99的变化，因为现在的大多数编译器还没有完全实现所有的C99的改变，你可能会发现有些在你的系统上不能实施，或者你会发现一些C99特征只有你改变了一些编译器的设置才可以实现。\n\n#注意 \n这本书将会使用ISO/ANSI C这些词来表示这些特征来表示均为两种标准均适用的特征，使用C99来指明新的特征。偶然的，当一种特性是第一次加入C语言时，它也指C90标准。 \n\n# 1.9 本书的组织架构\n\n组织信息的方式有很多。其中一种最直接的方式就是把每一个话题的所有相关信息全部列出来，这对于参考书是极其实用的，因为你就可以在一个地方找到所有关于给定主题的信息。但是它对于学习项目并不是最好的顺序。例如，如果你从开始学习名词开始学习英语，你的表达能力就会被严重地限制。当然，学习好了名词你随便找到某个东西就能说出它的名字，但是如果你能够学一些名词、动词、形容词等等，还有一些关于这些部分如何相互连接的规则，你就会有更大的能力来表达自己。\n\n为了让你能够更均衡地消化信息，这本书使用了一种螺旋上升的方式，在初期的时候先提到这个主题，然后在后文给予更充分的讨论。例如，对于理解C语言，理解函数是极其关键的，因此，在前面的几章就会包括对于函数的一些讲述，以便于你能够在第九章全面讲述函数的时候，已经能够使用函数获得到一些轻松了。相似的早期的篇章也会预先讲述字符串和循环，那样你就可以在还没有细致地地了解它们之前，在你的程序中先使用那些有用的工具。\n\n# 1.10 例子的使用\n\n我们已经差不多要开始学习C语言了，这一单元已经包括了我们在陈述材料的时候的一些例子了。\n\n## 字体 Typeface\n\n对于呈现文字的程序与电脑的输入输出，我们使用你很可能在屏幕上或者在输出的时候看到的相似的字体。我们已经使用过几次了。为了防止你没有注意到，字体看起来是下面这样的\n\n![字体示例](/img/typeface.png)\n\n相同的等宽字体也被用作是与编程相关的词汇，比如`main()`，也用作文件名，比如`stdio.h`，对于用来替换特殊词汇的占位字符，我们是用斜体的等宽字符来写的，比如下面的描述。\n*type_name variable_name;*\n例如，你有可能用*type_name*来替换`int`，用*variable_name*来替换*zebra_count*\n\n## 程序输出 Program Output\n\n电脑中的输出是以与我们书中相同的形式被印出来的，但输入是以粗体字被显示出来的。例如，下面就是在14章“结构体与其他数据类型”中的输出。\n\n![输出示例](/img/output.png)\n\n以正常电脑字体打印出来的是程序的输出，黑体字是用户的输入。\n你与你的电脑交互的方式有很多，我们假设你是用键盘在键入指令的，在屏幕上阅读反馈。\n\n## 特别的按键 Special Keystrokes\n\n通常，你会通过一个标签为Enter的按键，c/r，返回或者其他的方式输入一行指令，我们在文中称这些按键为***Enter key***，自然也就会默认你会在每一行输入之后按下Enter键。然而，为了阐明特定的观点，一些例子可能会明示出Enter键，以[enter]的形式来呈现它，这个括号就表示你需要按下一个按键而不是打字**enter**。\n\n控制字符中的特殊按键，比如CTRL+D，这种标记指在你按下Ctrl标志的按键（或者可能是Control）时按下D键。\n\n## 准备学习这本书使用的系统\n## Systems Used in Prepare This Book\n\nC语言的一些部分，比如储存数字时使用的空间，是取决于系统的。当我们举例子并且指的是我们的系统，“我们提的是一台在WinXP专业版下有奔腾处理器的电脑，并且使用Metrowork的CodeWarrior开发工作室9.2版本和微软的Visual C++ 7.1（这个版本Microsoft Visual Studio .NET 2003也开发完成）,或者gcc 3.3.3。在编写的时候，对C99的支持并不完全，而且没有编译器能够支持C99的全部特性。但是，在它们之间，这些编译器已经包含了许多的新标准下的东西了。大多数实例是在Mac G4上通过Metrowerks CodeWarrior Development Studio 9.2来测试的。\n\n这本书有的时候也参考在Unix系统中运行的结果，Unix系统是在Berkley's BSD 4.3 version的Unix系统中，在VAX 11/750电脑上运行的。而且，一些程序也是在Linux系统下使用gcc 3.3.1与Comeau 4.3.3在奔腾处理器的电脑上测试的。\n\n样本代码，对于在这本书中陈述的完整程序是可以在Sams网址 (www.samspublishing.com) 中找到的，搜索这本书的ISBN号（不带连字号）就会显示这本书的昵称，点击昵称，进入网址，你就可以下载代码了。你还可以在这个网站上找到编程训练的解决方法。\n\n## 你的系统-你需要的 Your System\n\n你需要有一个C语言编译器，或者至少可以使用一个。C可以在很多中电脑中运行，所以你有很多的选择。一定要确保使用的编译器是专门为了你的系统而设计的。这本书中的一些实例需要C99标准支持，但是大多数实例在C90标准下的编译器都是可以运行的。如果你使用的是在ANSI/ISO标准之前的，你就需要做出一些调整了，很可能得通常鼓励你去找寻些新的东西了。\n\n大多数编译器的供应商会为学生与教育者特价，如果你是那类人，那就看看供应商的网站。\n\n## 特殊元素 Special Element\n\n这本书包含了几部分特殊元素，强调了特别的重点：补充、建议、警告、笔记。\n\n![四种特殊信息类型](/img/four_kinds.png)\n\n+ Sidebar(补充) \n\t为阐明内容提供了更深刻的见解或者更多的背景信息\n+ Tip(建议)\n\t对于特定的编程情况提供了简短，使用的建议。\n+ Caution(警告)\n\t警告潜在的陷阱\n+ Note(笔记？)\n\t提供了综合的注释，不符合其他的特殊类型的信息。\n\n# 总结\nC语言是一种强大、简洁的编程语言。\n因为提供了使用的编程工具、对于硬件设备的控制良好，\n并且是最容易从一种设备传输到另一种设备的语言，\n它受到很多人的欢迎。\n\nC语言是一种编译型的语言，\n需要C语言编译器与连接器来把C语言源代码转化成可执行程序。\n\nC语言的编程可能是费力、困难甚至令人沮丧的，\n但是它也可以是有趣的、令人振奋与满足的。\n我们希望你能够像我们一样找到C语言的乐趣与魅力。\n\n# 回顾问题\n\n你会在**附录A-回顾问题答案**中找到问题的答案。\n(以下为我本人的想法)\n\n1.在编程中，***传输性***指的是什么?\n\t编程得到的文件在不同类型的操作系统中几乎不需要修改或者只需要修改一点就可以顺利地进行转移。\n2.解释源码文件、目标代码文件与可执行文件。\n\t源码文件是我们通过编辑器输入的代码，目标代码文件是源码文件经过编译器处理之后生成的包含库文件函数声明与我们输入的代码的机器语言翻译的文件，一般是asm的汇编文件或者obj，不具有执行的能力。\n\t可执行文件是把库文件与目标代码文件结合起来之后翻译成的最终文件，它包含了程序运行需要的一切函数声明、变量、指令的翻译。\n3.编程的七步走。\n\t首先在纸上想这个问题可以怎么解决，然后结合具体的语言来想实现方法，然后写代码，然后编译，然后运行，然后检查正误，进行修改与调试。\n\t×\n\t第一步，明确程序目的，你想要程序做什么\n\t第二步，设计程序，包括目标人群，用户界面与交互方式，实现时间，数据处理方式\n\t第三步，使用C语言知识写代码\n\t第四步，编译\n\t第五步，运行程序\n\t第六步，通过输出过程量等方法来调试，输入多个值来测试。\n\t第七步，维护与修改程序。\n4.编译器做了什么工作？\n\t把源码文件中你输入的代码转变为机器语言。\n5.连接器做了什么工作。\n\t把你代码中缺少的库函数内容补充完整，并且针对系统添加起始代码。\n\n# 编程训练\n\n我们现在还不期望你开始写C语言代码，所以这一次锻炼就集中于编程过程的早期阶段吧。\n\n1.你被MacroMusic公司录取了，这个公司正在进入欧洲市场，想要一个能够把英尺换算成厘米的程序（1 inch = 2.54cm）公司想要让这个程序能够提示使用者去输入一个英尺值，你的任务就是找出这个程序的目的，并且设计这个程序。\n\n程序目的：我想要设计一个通过乘除法来把输入的数值变作2.54倍的程序，输入是英尺值，2.54倍是厘米值。\n\n程序设计：\n首先输出一行：请输入英尺值\n然后向用户获取输入值。\n接着经过把值 * 2.54来获取厘米值\n然后在屏幕上输出数值。\n\n交互方式就是输入输出，因为目标人群是欧洲人，所以需要英语，需要更多的UI设计等。\n\n> END..","source":"_posts/C-premier-plus-Chapter-1.md","raw":"---\ntitle: C premier plus Chapter 1\ndate: 2023-11-27 23:18:43\ntags: C_premier_plus\n---\n\n# 第一章 学习准备\n\n>**你将会在这一章学到：**\n> \t1. C的历史以及特点\n> \t2. 写程序的步骤\n> \t3. 关于代码连接器与编译器的一些知识\n> \t4. C标准\n\n欢迎来到C语言的世界！C语言是一种充满活力的高级编程语言，它受到业余与商用编程者的喜爱。\n这一章会为你学习与利用这种强大而又受欢迎的语言，而且会向你介绍几种你最有可能搭建C语言基础的环境。\n\n首先，我们看向C语言的来源和它的一些特点（优点以及缺点）。接着，我们会了解编程的起源，查看编程的总体规则。\n最终，我们会讨论如何在常见的系统中运行C程序。\n<!--more-->\n\n# 1.1 C语言的由来\n\n贝尔实验室的Dennis Richie在1972年创造了C语言，也就在那时，他和Ken Thompson正在致力于设计Unix系统。C语言的想法并不完全是在Richie的脑袋里冒出来的，而是来自Thompson的B语言，B语言来自哪里又是另一个故事了。重点是，C语言是作为工作中的编程人员的工具被创造出来的，所以它的首要目标就是成为一种有用易用的语言。\n\n很多编程语言都有着类似的目标，但是它们又经常会有其他的顾虑，举几个例子，Pascal语言的主要目标，就是为了教授编程规则提供良好的平台。BASIC语言，被设计得与英语很相像，从而可以方便地让不熟悉电脑的学生们学习。这些目标都是很重要的，但是并不与实际使用协调，也并不是普遍都很易用。相比之下，C语言是为了编程人员而生的，而且成功地成为了现代编程语言的一种选择。\n\n# 1.2 为什么使用C语言？\n\n在过去的30年来，C语言已经成为了最重要与最受欢迎的编程语言。它的成长，就是因为人们经过尝试之后，喜欢使用它。过去的10年里，许多人从C语言转到的更有规模的C++上，但C语言仍然是拥有权重的一种很重要的语言，C++也是从C语言迁移过来的。在学习C语言的过程中，你会意识到C语言的许多长处（见图1.1）让我们预先查看一下。\n![插图](/img/Chapter1.2.png)\n（上图，左上为强大的控制结构，右上运行速度快，左下小型代码-小程序，右下是可以传输到不同的电脑）\n\n## 1.2.1设计特点\nC语言是一种拥有在理论界以及计算机科学实践中令人满意的控制特色的现代编程语言。它的设计让它很自然地能自上而下地规划程序、结构化编程以及模块化设计，从而设计出的程序也更可靠，更易懂。\n\n## 1.2.2 效率\nC语言是一种高效的编程语言，它的设计很好地利用了现代电脑的性能。C语言编写的程序常常是小型的，并且运行速度很快。事实上，C表现了一些在汇编语言中好的控制方法，（汇编语言是对于特定的中央处理单元(Central Processing Unit,CPU)的内部指令设计的的助记语句，不同的CPU有着不同的汇编语言）。如果你选择C语言，你可以调节你的程序到达最快速度或者让程序对于内存的使用更有效。\n\n## 1.2.3 可传递性\nC语言是一种可传递的编程语言，那意味着在一个系统上的C语言程序也可以在其他系统经过少量的改动或者不改动运行。即使改动是必须的，也只是改动头文件与main程序里的几个词条而已。大多数也打算着有可传递性，但是任何想要把个人电脑IBM里的BASIC程序放到苹果BASIC（它们是近亲）或者尝试把主机上的IBM里的FORTRAN程序在Unix系统中运行都知道传递烦人透顶。C语言是可传递性的领头者。C语言的编译器（把你的C语言代码转换为电脑内部指令的程序）对于40种系统都是可以使用的。从微型处理器到超算。但需要注意的是，一部分程序对于不同的硬件设备是不一样的，比如显示器监控，或者因为在运算系统上的特殊点，比如WinXP与OS X，它们通常是不具有传递性的。\n\n因为C语言与Unix操作系统关系紧密，Unix系统的安装包是自带C语言的编译器的，Linux安装时也通常带有C语言编译器，一些C语言编译器是可以在个人电脑上使用的，包括运行着各种版本的Windows系统的电脑，还有Mac。所以不论你是正在使用着家里的电脑，还是使用专业的工作站或者大型电脑，你都是有很大可能获得一个适用于你的系统的C语言编译器的。\n\n## 1.2.4能力与灵活性\nC语言既强大又灵活（在计算机文献中最受喜欢的两个词）。\n举个例子，许多功能强大与灵活的操作系统是用C语言写的。许多的其他编程语言（如FORTRAN、Perl、Python、Pascal、LISP、Logo与BASIC）的编译器与翻译器是用C语言写的。结果，当你在Unix机上使用FORTRAN语言，最后是用C语言程序生成的exe文件。C语言程序被用作解决物理、工程问题甚至在电影如《角斗士》中栩栩如生地重现特殊的现象。\n\n## 1.2.5 以程序员为方向的\nC语言重视于满足程序员的需求，让我们轻松地触达硬件，而且让你独立地操纵内存中的每一个bit。它拥有非常多的运算符，能够让你简洁地表达自己。C语言比起，比如说Pascal语言就在限制着你可以做的事情。这种灵活性既是优势也很危险。优势在许多的任务，像是数据形式转换，在C语言中简单很多。危险就是用C语言，你有可能犯在其他语言中不可能犯的错误。C语言给予了你更大的自由，也让你承担了更多的责任。\n\n另外，大多数C语言的实施都有着大量有用的C语言库函数。这些函数能够应对很多编程人员通常的需求。\n\n## 1.2.6 缺点\nC确实有一些不足之处。通常，像人一样，不足与长处是同一个特点的两面。例如，我们提到了C语言的自由表达也需要更多的责任。C语言的指针（我们以后会学习到）使用特别地，意味着编程错误会更难跟踪到。曾经也提到了一台没有文字的电脑，解放的代价就是格外的警惕，\n\n有着大量的运算符，C的简明也让有可能让我们写出极其难以理解的代码。你可能并不是必须要写晦涩的代码，但是可能性总在那儿。毕竟，其他语言哪个有每年一次的混乱的编程比赛？\n\n还会有更多的长处，毫无疑问也会有更多的缺陷。与其在这个问题上挖的更深，还不如移到下一个话题。\n\n# 1.3 C语言的用处\n\n到 1980 年代初，C 语言已经是 Unix 系统小型计算机世界的主导语言了。从那时起，它就已经被传播到个人计算机（微型计算机）和大型主机（大型计算机）了。（参见图 1.2）许多软件公司把C语言作为制作文字处理程序、电子表格、编译器和其他产品的首选语言。它们知道C语言编写的程序代码量小而且高效。更重要的是，他们知道这些程序将易于修改，并易于适应新型号的计算机。\n![图片](/img/Chapter1.3.png)\n（以上，C语言被用作编程Unix操作系统，被用作电影如Star wars，在电脑游戏、电脑语言处理、嵌入式系统与机器人工程中都有显著的作用）\n\nC语言不仅对公司和老手有好处，对其他用户也有好处。越来越多的计算机用户已经开始使用 C 语言，它的优势也得到了确保。你不必是专业的计算机编程人员就可以使用C语言了。\n在 1990 年代，许多软件公司开始转向 C++ 语言进行大型编程项目。C++ 将面向对象的编程工具嫁接到 C 语言中。（面向对象编程是一种思想体系，它试图使语言来适应问题，而不是让问题来适应语言。）C++ 几乎是 C 语言的超集，这意味着任何 C程序也是，或者它几乎也是一个有效的C++程序。通过学习 C语言，您还学习了许多 C++。\n尽管 C++ 和 Java 等新型的编程语言很受欢迎，但 C语言在软件公司依然是核心技能，一直排在所需技能的前 10 名。特别的，C语言已成为在嵌入式系统编程中很受欢迎的一种语言，也就是说，它被用于编程越来越多的汽车、相机、DVD 播放器和其它现代便利设施中的常见的微型处理器。此外，C语言已经开始追赶在科技科学编程上具有长久的主导地位的FORTRAN语言。最后，作为为开发操作系统而生的语言，C语言在Linux系统的发展中发挥着重要作用。所以，在二十一世纪的第一个十年， C 语言的影响力仍然在变得更大。\n\n简而言之，C 是最重要的编程语言之一，并将继续如此。如果你想要一份编程软件的工作，这应该是你能够回答“是”的第一个问题中的一个，“嗯，比如说，你会C语言吗？“\n\n# 1.4 计算机的作用\n\n既然你已经要开始学习如何运行C语言程序了，你很可能需要了解一下电脑是怎么工作的，这些知识能够帮助你了解C语言程序与最终运行程序后发生的事情之间的关联。\n\n现代的电脑有几个组成部分，***中央处理器***，又叫***CPU***，做了电脑运转时的大部分工作。***随机存取器***，又叫***RAM***，作为保存文件与程序的工作区。永久存储器，比如硬盘，存储程序和文件，即使电脑已经关机。各种外设，比如键盘、鼠标还有显示器，在你与电脑交互中搭建了桥梁。CPU运行程序，所以我们集中于它的作用。\n\nCPU的自始至终的工作，简单来说，其实是非常简单的。它从内存中依次抓取一条条的指令，然后执行它。（千兆赫CPU可以在一秒钟执行这个过程百亿次，所以CPU可以以一种惊人的速度运作），CPU也有自己的小工作区，有几个储存数的***寄存器***。每一个寄存器保存下一条指令的内存地址，然后CPU就使用这些信息来抓取下一条指令。接下来，CPU再把指令储存在另一个寄存器中，然后把上一个寄存器的命令更新到下一条。CPU能够理解的指令（也叫指令集）是有限的。而且这些指令都是各自分明的。很多指令都是要求电脑去把数字从一个地方移动到另一个地方。---例如，从内存到寄存器。\n\n在这个过程中有几点很有趣。第一，在电脑中任何东西都是以数字的形式储存的，数字是以数字的形式储存的。字符（例如你在文本编辑中的英文字母），也是由数字的形式储存的，每一个字符都有一个数字编码。计算机储存进寄存器的指令也是数字的形式，指令集中的每一条指令都对应着一个数字编码。第二，电脑程序最终会被以数字指令的形式表达，这又叫***机器语言***。\n\n计算机运行的一种结果就是，如果你想让计算机做些事，你需要提供一系列的指令或者是程序，来明确地告诉它要做什么和怎么做。你必须创建一个电脑能够直接理解（使用机器语言）的程序。这是个精细、单调、费劲的任务。一些像两个数相加的简单的任务可能会被分解成几步，可能会像下面几步。\n\n>1.从内存区域2000把数字复制到寄存器1\n>2.从内存区域2004把数字复制到寄存器2\n>3.用数字二的数值加上数字一，在寄存器1留下答案。\n>4.把寄存器1中的数据复制到内存区域2008\n\n而且你还得把每一条指令用数字指令表述出来！\n\n如果你是喜欢以这种方式写程序的，你会很难过地了解到机器语言编程的黄金时期已经远远地过去了。但是如果你更喜欢那些更愉快的编程，那就对高级编程语言打开怀抱吧！\n\n# 1.5 高级计算机语言与编译器\n\n>高级编程语言，比如C语言，以很多方式简化了你的编程。\n\t第一，你不需要用数字的形式来表达你的指令。\n\t第二，你使用的指令与你对于程序的思考而不是与电脑使用的精确的指令\n\n与其关心某一个CPU为了完成某一个任务进行的某一步。你可以以一种更复杂的形式来表达你想做的事情，例如，你也许会写下面的东西。\n\n```C\n\ttotal = mine + yours;\n```\n\n看到这样的代码，你能够很明白它是干啥的，\n而看着机器语言以数字构成的替代指令，那就太不易读了。\n\n不幸的是，机器语言才是适合电脑的，对于电脑来说，高级语言完全无法理解。这就到了编译器上场的时候了，***编译器***是把高级语言程序详细地翻译成电脑需要的机器语言指令的程序。你以高级的方式思考，编译器做这些令人生厌的工作。\n\n编译器方法还有另一种好处。每台电脑都设计了各自的机器语言，所以比如说英特尔PentiumCPU的机器语言对于摩托罗拉PowerPC CPU可能没有任何意义，但是你可以根据特定的机器语言搭配编译器。所以，使用一系列的编译器或者合适的编译器，你就可以把同样的高级编程语言转化成一系列不同的机器语言程序。你只需要解决这个问题一次，然后让编译器把这个解法翻译成一系列机器语言程序。\n\n简短地说，高级的编程语言，比如C语言、Java还有Pascal，它们以一种更加抽象、与特定的CPU并不绑定的方式来表述程序行为。而且，对于机器语言来说，高级语言学习起来简单而且也更容易编程。\n\n# 1.6 使用C语言的七步走\n\nC语言，如你所见，是一种编译型的语言，如果你习惯于使用如Pascal或者FORTRAN的编译型语言，你应该已经对组成C语言程序的基本步骤很熟悉了。如果你的基础语言是如BASIC，或者面向接口的计算机图形语言（如Visual Basic）的翻译型语言，或者你还没有编程基础，你需要学习如何编译。我们一会就会研究那个过程，你会认识到这是很合理简单的。首先，为了让你宏观、大体上了解编程，让我们把编写C语言程序分解成7个步骤（见图1.3）。值得注意的是，这只是理想化的步骤，在编程实践中，你需要在步骤中来回切换，用后面一步了解到的来使之前的一步得到优化。\n![七步走](/img/Chapter1.6.png)\n\n## 1.6.1 确定程序目的\n\n很自然的，你需要明确地知道你想让程序做什么，思考你的程序需要什么信息，需要在计算与控制上完成什么样子的事情，而且程序内的信息需要对你有所反馈，在这一步的规划中，你应当以大体出发，而不是根据特定的编程语言来思考。\n\n## 1.6.2 设计程序\n\n在有了对于你的程序应该干啥的印象之后，你应该选择程序如何来运行它，用户的交互界面会是什么样子的？程序应该如何被组织起来？程序的目标人群是？你需要多长时间来做完这个程序？\n\n你还要决定在程序中呈现数据，而且很可能的，在辅助文件里也要。要决定用什么方式来处理数据。在刚开始学习C语言时，可能选择会很简单，但是随着你应对更多复杂的情况后，你就会知道这些选择是需要更多的思考的。选择一种好的方式来呈现数据经常会让设计程序与处理数据简单很多。\n\n再一次，你需要在大体层面上思考而不是在特定的代码上，但是有些选择可能是基于编程语言的大体特点的，举个例子，C语言编程人员就比，比如说，Pascal编程人员在数据呈现上拥有更多的选择。\n\n## 1.6.3 编写代码\n\n既然你已经对于你的程序有个清晰的设计了，你就可以通过写代码的方式来实现它了。也就是说，你可以把你的程序设计翻译为C语言。这就是你需要用上C语言知识的地方了，你可以在纸上画出你的想法，但最后你还是要把你的代码输入电脑。这个过程主要取决于你的编程环境，我们一会会呈现更多的常见的编程环境。总体上，你会使用文本编辑器来创造一份源码文件，它包含了你程序设计的C语言翻译，例1.1给出了C语言源码的一个例子。\n\n![图例1.1](/img/listing1.1.png)\n在这一步，你应该记录你的工作，最简单的方式是使用C语言的注释功能，它包含着你对于源码的解释，我们会在第二章详细讲到如何注释你的代码。\n\n## 1.6.4 编译\n下一步就是编译源码，再一次，细节上的问题是与你的编程环境相关的，我们马上会研究几种常见的环境了。现在，让我们以更概念化的方式看看发生了什么。\n\n我们已经知道编译器的工作就是把源码转化成可执行文件。***可执行文件***是以我们电脑的自然语言（或者说***机器语言***）写成的，这种语言是以精细的数字代码形式呈现的。而且你之前也了解到了，不同的电脑的机器语言是不一样的。C语言的编译器也包括着C语言库中的代码。C语言库包含着很多的基础的、日常使用的东西，比如**Printf**和**scanf**函数。（更精确地说，一个叫做连接器的程序把C语言库中的一组代码带到编译器，但是编译器在大多数系统都是可以运行连接器的），最终结果就是包含着电脑可理解的可执行文件的程序，你可以直接运行。\n\n编译器还会检查你的程序是不是使用了符合语法的C语言，如果编译器发现了错误，它就会汇报给你，而且不会生成可执行文件，理解编译器提示的错误信息也是你会很快习得的另一项技能。\n\n## 1.6.5 运行程序\n\n通常的，可执行文件是你可以运行的程序，你可以在很多常见的环境中，包括MS-DOS、Unix、Linux控制台、只需要打字写下可执行文件的名称。其他的环境，比如VMX、VAX可能需要一些运行指令或者其他的机制方法。***集成开发环境（IDE）***，像很多在Windows系统或者Mac系统上的，使你能够在IDE内部通过菜单选项或者按几个按键来编辑与运行你的C语言程序。最终生成的文件也可以通过双击文件名或者图标的方式从你的操作系统直接运行。\n\n## 1.6.6 测试与Debugging\n\n你的程序能够运行是个好迹象，但是有可能你的程序并没有正确地运行。因此，你应该检查下是否它做到了它应该做的事情。你会发现有些程序是会有问题（在计算机领域内的行话叫bugs）的。调试是查找与修复程序错误的过程，学习的过程中犯错误是自然且正常的。看起来编程“天生”需要调试，所以当你把学习到的与编程实际结合起来的时候，你最好准备好在犯错的时候提醒自己。随着你成为一个更加强大与巧妙的编程人员，你也会不断地犯错，但你也因此不断地变得更加强大与巧妙。\n\n你会有很多机会犯错，基础的设计层面错误，实现过程出错，忽略了可能会搞砸你的程序的输入。你可能会不恰当地使用C语言，你可能会拼写错误，可能会把括号放错了位置等等等等。你会有自己的错误方式来丰富这一列的。\n\n幸运的是，这种情况并不是无望的，即使有时候你会这样认为啦。\n编译器会捕捉到很多种类的错误，而且还会有工具来帮助你找到许多种编译器没有办法捕捉的错误。继续读下去，这本书也会给到你一些调试的建议。\n\n## 1.6.7 维护与修改程序\n\n当你为自己或者别人创造了一个程序，你可能会发现程序是可以有更多的用处的。如果是的，你可能会发现是有理由做出些修改的。可能有个小bug只有别人把名字以Z/z开头的时候才会发生，或者你会想出一种能够解决问题的更好的方式，可以聪明地加入一些的新功能，你可能需要改写程序以便它能够在不同电脑系统中运行。如果你明确地注释了这些程序，所有这些任务都会被极度地简化。\n\n## 1.6.8 注释\n\n编程的过程并不总是像这个过程描述的那样线性。有的时候你需要在步骤中前后切换。例如，当你在写代码的时候，你有可能发现你的计划并不实际。你有可能发现了一种更好的方式来做事，或者在看到程序是怎么运行的之后，你会想要改变你的设计，记录你的工作能够帮助你在不同的等级之间前后切换。\n\n许多学习者通常会忽略掉第一步与第二步（确定程序目的与设计程序）直接进入第三部（写程序），你写的第一个程序或许可以直接在脑中看到完全的流程，如果犯错也很好定位错误。但是随着你编写的程序越来越复杂，越来越冗长，心智的视觉化就开始失效了，而且错误也会更难以发现。最终，那些忽略了规划步骤的人就陷入数小时的时间浪费、困惑还有沮丧，因为他们写出的丑陋的，无法实现功能而又深奥的程序。这项工作越是复杂，需要的规划工作就越多。\n\n道理就是你需要养成在写代码之前做规划的习惯，使用这种古老但是可敬的笔尖技术来记下你程序的目的，给程序设计做出大纲。如果你这样做的话，你最终会收获节省时间与满足感的巨大红利。\n\n## 1.6.9 编程技术\n\n你生成程序的明确步骤是取决于你的电脑系统的，因为C语言是可传输的，它是可以适用于很多的系统环境的，包括Unix，Linux，MS-DOS（是的，很多人仍然在用），Windows与Mac OS，其实还有很多只不过没有足够的空间留给它们了，这尤其是因为各自的产品不是演化、消亡，就者被取代。\n\n首先，即使如此，让我们先来研究许多C语言运行环境的共有特点，包括我们刚才已经提到的五种系统，你不需要明确地知道是什么引导了C语言程序的运行，但这是良好的基础，它也能够帮助你更好地理解为什么你需要经历一些特定的步骤来得到一个C语言程序。\n\n当你在写C语言程序的时候，你会在源码文件中储存你在文本文件中写下的东西。大多数由C语言编程的系统，也包括我们提到的那一些，需要以`.c`结尾的文件（举个例子，`wordcount.c`与`budget.c`）在`.c`之前的那部分名字叫做***基准名（Basename）***\n在这一段后面的名称叫做***拓展名（Extension）***，因此，`budget`是基准名，`.c`是拓展名。它们的混合就是文件名。文件名也必须要复合特定的电脑操作系统的需要。例如，IBM-PC与[克隆机？]上的MS-DOS系统，它就要求你的文件名不能多于8个字符长。所以，`wordcount.c`在DOS系统中就不是合法的文件名。一些Unix系统在整个文件名上有14个字符的限制，包括拓展名，其他Unix系统也允许更长的名称，不多于255个字符即可。Linux、Windows与MacOS也允许更长的文件名。\n\n让我们假设我们拥有一份名字叫`Concrete.c`的源文件储存着例1.2的C语言源码。\n![Concrete.c](/img/listing1.2.png)\n不需要担心在源码文件中的一些细节，在第二章你会学到的。\n\n#\n\n## 1.7.1 目标代码文件、可执行文件和库\n\nC语言编程的一个基本本领就是把你的源代码文件转化成保存着即时就可运行的可执行文件。要实现这个过程需要两个步骤：编译与连接。编译器可以把源代码转换成中间代码，然后连接器再把中间代码与其他代码组合，由此创造出可执行文件。C语言利用这两部分结合的方法让程序易于模块化生成。你可以把每一个模块分开来编译，再用连接器把每一个编译过的模块结合起来。以那种方式，如果你想改变其中的一个模块，你就不需要再重新编译其他的模块，而且连接器也会把你的程序与预先编译好的库代码结合起来。\n\n要生成中间文件的方法还有几种，最流行的而且能够实施的在这里已经提到了，就是把源代码文件转化成机器语言代码，把结果放在目标代码文件中或者简短地说，目标文件。（假设你的源码是由单一文件组成的），虽然目标文件包括了机器语言代码，它还没准备好运行。目标文件包含了对于源代码的翻译版本，但是它还不完整。\n\n缺失的第一个部分就是起始代码，它作为你的程序与操作系统的接口。举个例子，你可以在在DOS或者Linux之下协调地运行BM PC，它们的硬件都是类似的，所以同样的目标文件对于两种系统都是可以起作用的，但是你需要在DOS与Linux不同的起始代码，因为不同的系统是以不同的方式处理程序的。\n\n第二个缺失的部分就是常用库的代码。几乎所有的C语言程序都需要利用C语言的库函数。比如`Concrete.c`使用的`printf()`。目标代码文件并不包括这个函数的代码。它只包含了`printf`函数的声明指令，实际的代码是在另一个文件中储存的，它叫***库文件***。库文件包含了很多函数的代码。\n\n连接器的作用就是把这三个部分连接在一起-你的目标代码、起始代码和库代码，然后把三者整合为一个文件，即可执行文件。对于库代码，连接器只提取需要使用的函数在C语言库中对应的代码。\n（见图1.4）\n![图1.4](/img/listing1.4.png)\n（可见，上图中，由源代码经过编译器生成目标代码文件，再由目标代码文件与起始代码、库代码通过连接器转化为可执行文件`concrete.exe`）.\n\n简短来说，一份目标文件与可执行文件都由机器语言指令组成。然而，可执行文件只把你使用的代码翻译为机器语言，但可执行文件还由常用库与起始代码的机器语言翻译组成。\n\n在一些系统中，你必须把编译与连接的过程分开。另外的一些系统中，编译器会自动启动连接器，所以你只需要编译即可。\n\n现在我们就针对于特定的系统来研究一下。\n\n## 1.7.2 Unix系统\n因为C的流行始于Unix系统，我们就从它开始。\n\n### 在Unix系统中进行编辑\nUnix系统并没有独立的C语言编译器。你反而需要一些多功能的Unix编辑器，例如emacs、jove、vi或者一个X Window系统文本编辑器。\n\n你的最主要的两个目的就是正确地书写程序，并且为储存程序的文件起个名字。正像已经提到的，文件的名称必须以`.c`。注意到Unix系统会以大小写来区分文件，所以`BUDGET.c`、`budget.c`还有`Budget.c`是三个各自不同的C源文件名称，但是`BUDGET.C`是不合法的，因为它的扩展名使用了大写。\n\n使用vi编辑器，我们把下面的程序保存在名叫`inform.c`的文件中。\n![inform.c](/img/informc.png)\n这些文本就是源代码，而`inform.c`是源文件，重点就在源文件只是一个过程的起点，而不是结尾。\n\n### 在Unix系统中进行编译\n我们的程序，虽然已经不可否认地很精致了，对于电脑仍然是一派胡言，电脑是不理解什么是`#include`和`printf`的（现在你可能也不理解，但是我们很快就会学习，然而电脑并不会），正像我们之前讨论过的。我们需要编译器的帮助来把我们的代码（源代码）翻译为电脑的代码（机器语言）。这些工作的结果就是可执行文件，它会包含所有可以让电脑完成工作的代码。\n\nUnixC编译器叫`cc`，为了编译`inform.c`程序，你需要把下面的指令打下来。\n```C\n\tcc inform.c\n```\n\n几秒之后，Unix系统的命令提示符就会给出反馈，告诉你这件事已经做完了，如果你没有正确地编写代码的话可能会得到警告或者错误信息，但我们先假设一切都是正确的。（如果你的编译器对于`void`这个词进行报错，那是你的编译器还没有更新到 **ANSI C** 的编译器，我们会在不久提到更多的标准，即使这样，你从例子中删掉void就好）。如果你使用`ls`指令来把你的文件列出来的话，你会发现产生了一个新文件叫`a.out`（见图1.5）这就是包含了程序中翻译后指令（或编译后指令）的可执行文件。想要运行的话直接打下`a.out`即可。\n\n然后，文件中的指令执行，智言倾泻而出。\n```Bash\nA .c is used to end a C program filename.\n```\n如果你想要吧可执行文件保存下来，你需要重新命名它，\n否则，这个文件在你下一次编译时就会被新的同名文件代替。\n![The process](/img/process.png)\n（从源码到程序的过程）\n\n## Linux 系统\nLinux也是个很受欢迎的开源的，与Unix类似的多平台操作系统，它包括IBM与Mac的兼容。在Linux上设计程序与Unix系统的过程大部分是相似的，除了你需要使用公用C语言编译器，它叫gcc，是由GNU提供的，在那里面，编译的指令是这样的：\n```Bash\ngcc inform.c\n```\n注意到在Linux安装的时候安装gcc的时候可能是可选的，所以你（或者其他人）有可能如果之前没装的话必须得自己安装gcc。通常这会让cc成为gcc的一个别名，所以你喜欢的话可以用cc来代替gcc。\n\n你可以在下面的网站中获取关于gcc获取更多的信息，包括最新的版本。\nhttp://www.gnu.org/software/gcc/gcc.html.\n\n## 集成开发环境（Windows）\n\nC编译器并不是Windows安装包中的一部分，所以你也有可能需要安装一个C语言编译器。很多供应商，比如Microsoft, Borland, Metrowerks, 还有Digital Mars, 提供了以Windows系统为基础的集成开发环境（***IDE***）（近来，很多已经把C语言与C++编译器结合在一起了。）它们都有快速且集成的环境，可以方便地生成C语言程序。值得注意的是，每一个程序都有一个嵌入式的编辑器，你可以用它来编写C语言程序。都有可以让你命名、保存、编译、运行的菜单。每一次编译运行如果编译器发现错误了你都可以回到编辑器，而且出错的代码行都会被突出显示出来，并搭配上适当的错误信息。\n\nWindows IDE通常是可以一同处理C与C++的，你需要声明你需要一个C++程序。使用一些产品，比如Metroworks或者CodeWarrior里你需要用项目类型来区分你使用的语言。其他的产品比如Visual C++你是使用`.c`的扩展名来表示你想要使用C语言而不是C++。然而，大多数C语言程序也作为C++程序运作，可以参考“Differences Between C and C++”，那里对C与C++进行了比较。\n\n你有可能遇到的一个问题是当程序停止的时候程序运行的窗口也随之关闭，如果你也遇到这种情况，你可以让程序直到你输入一个字符再结束。只要在代码结尾，return语句前加上一行代码即可。\n\n```C\n\tgetchar();\n```\n这一行代码读取一个键盘输入，所以直到你输入下一个字符之前程序都是暂停着的。一些时候，受到程序运行方式的影响，可能在最后已经有一个键入数据等待了，这种情况下你就得输入两次。\n\n```C\n\tgetchar();\n\tgetchar();\n```\n\n例如，如果程序做的最后一件事是要求你输入你的体重，你已经输入完体重了然后输入enter来输入数据，程序会读取你的体重，第一个`getchar`会读取回车符，第二个`getchar`直到你再打一个字符才会有，如果你现在还不太能够理解，你学习完C语言输入就会明白了。\n\n即使多种多样的IDEs普遍有着比较类似的标准，但是细节方面还是各自不同的，不仅在一行程序内，还在编译器的不同版本。你需要做些实验，来获知你的编译器是怎么工作的，你还有可能需要阅读使用手册或者尝试网上教程。\n\n## IBMPC上的DOS编译器\n对于很多人来说，在个人电脑上运行DOS是很过时的事情，但是它对于那些电脑资源与预算受限、喜欢更简单的，没有[响铃、哨音]与令人分心的事物的操作系统。很多Windows IDEs额外提供了命令行工具，这就然你能够在DOS命令行环境下编程。Comeau的C/C++编译器在很多系统中是适用的，包括几种Unix、Linux的变体，它就拥有一个命令行DOS的版本。并且，它还有免费与共享的DOS系统编译器，例如，GNU gcc编译器就有一个以DOS为基础的版本。\n\n源码文件应该以文本文件形式存在，而它们并不是文字处理文件。（文字处理文件包括了很多额外信息，比如字体和格式）你应该使用一个文本编辑器如Windows Notepad或者与一些版本的DOS一同发布的EDIT程序。文件的扩展名需要是`.c`，一些处理器会自动在文本文件后面加上`.txt`的扩展名。如果你遇到了这种情况，你需要改变文件名，把`.txt`改为`.c`。\n\n电脑上的C语言编译器通常，但并不总是，生成带有`.obj`后缀的中间目标代码，不像Unix编译器，C语言编译器通常不会在编译完成之后删除这些文件。有些编译器也会生成带有`.asm`扩展名的汇编语言文件，或者使用它们自己的特殊形式。\n\n## Mac上的C语言\n\n最广受闻名的Mac C/C++编译器就是Metrowerks CodeWarrior 编译器（Windows与Mac版本的CodeWarrior有相似的界面），它提供了与Windows编译器相似的以项目为基础的IDE。从文件菜单选择新文件开始，一系列的项目类型选择将会陈列在你眼前。在最新的CodeWarrior版本中，使用Std C控制台即可（不同的发布版本需要经过不同的步骤才到达选择这一步），你还有可能在68KB版本（适于摩托罗拉 680 * 0 系列的处理器），PPC版本（适于PowerPC处理器）或者Carbon版本（适于OS X系统）\n\n新的项目在最初项目中会有一个很小的源码文件，你可以尝试编译或者运行它来获知你的系统是否设置好了。\n\n# 1.8 语言标准\n\n现在，很多C语言实例都是可行的，理想化情况下，当你在写C语言程序时，在任何的实例中都是一样运作的（假设你没有使用特殊机器来编程），为了这件事情能够实现，不同的实例需要有一个确定的、可识别的标准。\n\n最初，C语言官方并没有语言标准，但是，由Brian Kernighan和Dennis Ritchie（1978）编纂的最初一版的***C Programming Language***确立了被接受的标准，它通常被称作为***K&R C***或者***classic C***。特别的是，那本书附录中的“C Reference Manual”作为了C语言实例的指导。但是，比如编译器，就会要求一个完整的K&R实例，因为即使附录中定义了C语言，它还没有定义C语言库。C比其他的大多数语言都要更加依赖于C语言库，所以库标准还需要确立。没有任何的官方标准的情况下，Unix实例中提供的库就成为了实际的标准。\n\n## 第一个ANSI/ISO C语言标准\n随着C语言的进步与在不同系统中的广泛使用，C语言社区意识到它需要一个更加综合、与时俱进并且严格的标准。为了满足这种需求，美国国家标准研究院在1983年成立了X3J11委员会，开发了一种新的标准，它在1989年被正式使用，这种新型标准（ANSI C）不仅定义了语言而且还定义了基础的C语言库，国际标准化组织采用了在1990年一种C语言标准（ISO C）。ISO C与ANSI C本质上是一样的标准。ANSI/ISO标准的最后一种版本通常被称作***C89***（因为那是ANSI同意的时候）或者***C90***（那是ISO同意的时候），而且因为ANSI版本是先推出的，人们更经常用的是ANSI C。\n\n这个协会有几项指导准则，可能最有趣的就是这一项：保持C语言的精神\n委员会在阐述这种精神的时候列出了以下的几点。\n\n+ 相信编程人员。\n+ 不要阻止编程人员做需要做的事情。\n+ 保证简单、小型地使用这种语言。\n+ 一项操作只提供一种方式。\n+ 即使传输性会下降，也要尽力让C语言程序运行变快。\n\n在最后一点中，委员会的意思是实例必须界定一种对于目标电脑的运转最好的操作，而不是试着强加抽象的、统一的定义。在学习语言的同时，你也会体会到这种哲学的。\n\n## C99标准\n在1994年，他们开始重新审视这个标准，这也导致了C99标准的产生，一个ASIO/ISO联合委员会，也被称作***C9X***委员会批准了C90标准的准则，包括保持语言的小型与简洁，委员会的目的并不是向语言中添加新的特性，而是按需去达到新的目标。其中一个主要目标就是，通过比如提供解决国际字符集的方法，来支持国际编程。另一个目标就是“把现存的实践编程化来解决明显的缺陷”。因此，当在达成把C语言移植到64位的处理器上的需要时，委员会 以在真实生活中应对过这种问题的人的经验为基础来添加标准。第三个目标就是改善C语言执行科学与工程项目时做关键数字运算时的合适度。\n\n这三点-国际化，纠正缺陷与对于计算可用度的改善是最主要的以改变为方向的目标，其他的改变计划自然更加保守，例如，把与C90与C++的不协调降到最低，并且让这个语言概念上是简洁的。用委员会人员的话来说，“委员会在让C++变得更加重要，更加有发展动力。\n\nC99改变的结果，就是它保持了C语言的必要的基本特征，C语言仍然是一个小型的，简洁并高效的语言，这本书指出了很多C99的变化，因为现在的大多数编译器还没有完全实现所有的C99的改变，你可能会发现有些在你的系统上不能实施，或者你会发现一些C99特征只有你改变了一些编译器的设置才可以实现。\n\n#注意 \n这本书将会使用ISO/ANSI C这些词来表示这些特征来表示均为两种标准均适用的特征，使用C99来指明新的特征。偶然的，当一种特性是第一次加入C语言时，它也指C90标准。 \n\n# 1.9 本书的组织架构\n\n组织信息的方式有很多。其中一种最直接的方式就是把每一个话题的所有相关信息全部列出来，这对于参考书是极其实用的，因为你就可以在一个地方找到所有关于给定主题的信息。但是它对于学习项目并不是最好的顺序。例如，如果你从开始学习名词开始学习英语，你的表达能力就会被严重地限制。当然，学习好了名词你随便找到某个东西就能说出它的名字，但是如果你能够学一些名词、动词、形容词等等，还有一些关于这些部分如何相互连接的规则，你就会有更大的能力来表达自己。\n\n为了让你能够更均衡地消化信息，这本书使用了一种螺旋上升的方式，在初期的时候先提到这个主题，然后在后文给予更充分的讨论。例如，对于理解C语言，理解函数是极其关键的，因此，在前面的几章就会包括对于函数的一些讲述，以便于你能够在第九章全面讲述函数的时候，已经能够使用函数获得到一些轻松了。相似的早期的篇章也会预先讲述字符串和循环，那样你就可以在还没有细致地地了解它们之前，在你的程序中先使用那些有用的工具。\n\n# 1.10 例子的使用\n\n我们已经差不多要开始学习C语言了，这一单元已经包括了我们在陈述材料的时候的一些例子了。\n\n## 字体 Typeface\n\n对于呈现文字的程序与电脑的输入输出，我们使用你很可能在屏幕上或者在输出的时候看到的相似的字体。我们已经使用过几次了。为了防止你没有注意到，字体看起来是下面这样的\n\n![字体示例](/img/typeface.png)\n\n相同的等宽字体也被用作是与编程相关的词汇，比如`main()`，也用作文件名，比如`stdio.h`，对于用来替换特殊词汇的占位字符，我们是用斜体的等宽字符来写的，比如下面的描述。\n*type_name variable_name;*\n例如，你有可能用*type_name*来替换`int`，用*variable_name*来替换*zebra_count*\n\n## 程序输出 Program Output\n\n电脑中的输出是以与我们书中相同的形式被印出来的，但输入是以粗体字被显示出来的。例如，下面就是在14章“结构体与其他数据类型”中的输出。\n\n![输出示例](/img/output.png)\n\n以正常电脑字体打印出来的是程序的输出，黑体字是用户的输入。\n你与你的电脑交互的方式有很多，我们假设你是用键盘在键入指令的，在屏幕上阅读反馈。\n\n## 特别的按键 Special Keystrokes\n\n通常，你会通过一个标签为Enter的按键，c/r，返回或者其他的方式输入一行指令，我们在文中称这些按键为***Enter key***，自然也就会默认你会在每一行输入之后按下Enter键。然而，为了阐明特定的观点，一些例子可能会明示出Enter键，以[enter]的形式来呈现它，这个括号就表示你需要按下一个按键而不是打字**enter**。\n\n控制字符中的特殊按键，比如CTRL+D，这种标记指在你按下Ctrl标志的按键（或者可能是Control）时按下D键。\n\n## 准备学习这本书使用的系统\n## Systems Used in Prepare This Book\n\nC语言的一些部分，比如储存数字时使用的空间，是取决于系统的。当我们举例子并且指的是我们的系统，“我们提的是一台在WinXP专业版下有奔腾处理器的电脑，并且使用Metrowork的CodeWarrior开发工作室9.2版本和微软的Visual C++ 7.1（这个版本Microsoft Visual Studio .NET 2003也开发完成）,或者gcc 3.3.3。在编写的时候，对C99的支持并不完全，而且没有编译器能够支持C99的全部特性。但是，在它们之间，这些编译器已经包含了许多的新标准下的东西了。大多数实例是在Mac G4上通过Metrowerks CodeWarrior Development Studio 9.2来测试的。\n\n这本书有的时候也参考在Unix系统中运行的结果，Unix系统是在Berkley's BSD 4.3 version的Unix系统中，在VAX 11/750电脑上运行的。而且，一些程序也是在Linux系统下使用gcc 3.3.1与Comeau 4.3.3在奔腾处理器的电脑上测试的。\n\n样本代码，对于在这本书中陈述的完整程序是可以在Sams网址 (www.samspublishing.com) 中找到的，搜索这本书的ISBN号（不带连字号）就会显示这本书的昵称，点击昵称，进入网址，你就可以下载代码了。你还可以在这个网站上找到编程训练的解决方法。\n\n## 你的系统-你需要的 Your System\n\n你需要有一个C语言编译器，或者至少可以使用一个。C可以在很多中电脑中运行，所以你有很多的选择。一定要确保使用的编译器是专门为了你的系统而设计的。这本书中的一些实例需要C99标准支持，但是大多数实例在C90标准下的编译器都是可以运行的。如果你使用的是在ANSI/ISO标准之前的，你就需要做出一些调整了，很可能得通常鼓励你去找寻些新的东西了。\n\n大多数编译器的供应商会为学生与教育者特价，如果你是那类人，那就看看供应商的网站。\n\n## 特殊元素 Special Element\n\n这本书包含了几部分特殊元素，强调了特别的重点：补充、建议、警告、笔记。\n\n![四种特殊信息类型](/img/four_kinds.png)\n\n+ Sidebar(补充) \n\t为阐明内容提供了更深刻的见解或者更多的背景信息\n+ Tip(建议)\n\t对于特定的编程情况提供了简短，使用的建议。\n+ Caution(警告)\n\t警告潜在的陷阱\n+ Note(笔记？)\n\t提供了综合的注释，不符合其他的特殊类型的信息。\n\n# 总结\nC语言是一种强大、简洁的编程语言。\n因为提供了使用的编程工具、对于硬件设备的控制良好，\n并且是最容易从一种设备传输到另一种设备的语言，\n它受到很多人的欢迎。\n\nC语言是一种编译型的语言，\n需要C语言编译器与连接器来把C语言源代码转化成可执行程序。\n\nC语言的编程可能是费力、困难甚至令人沮丧的，\n但是它也可以是有趣的、令人振奋与满足的。\n我们希望你能够像我们一样找到C语言的乐趣与魅力。\n\n# 回顾问题\n\n你会在**附录A-回顾问题答案**中找到问题的答案。\n(以下为我本人的想法)\n\n1.在编程中，***传输性***指的是什么?\n\t编程得到的文件在不同类型的操作系统中几乎不需要修改或者只需要修改一点就可以顺利地进行转移。\n2.解释源码文件、目标代码文件与可执行文件。\n\t源码文件是我们通过编辑器输入的代码，目标代码文件是源码文件经过编译器处理之后生成的包含库文件函数声明与我们输入的代码的机器语言翻译的文件，一般是asm的汇编文件或者obj，不具有执行的能力。\n\t可执行文件是把库文件与目标代码文件结合起来之后翻译成的最终文件，它包含了程序运行需要的一切函数声明、变量、指令的翻译。\n3.编程的七步走。\n\t首先在纸上想这个问题可以怎么解决，然后结合具体的语言来想实现方法，然后写代码，然后编译，然后运行，然后检查正误，进行修改与调试。\n\t×\n\t第一步，明确程序目的，你想要程序做什么\n\t第二步，设计程序，包括目标人群，用户界面与交互方式，实现时间，数据处理方式\n\t第三步，使用C语言知识写代码\n\t第四步，编译\n\t第五步，运行程序\n\t第六步，通过输出过程量等方法来调试，输入多个值来测试。\n\t第七步，维护与修改程序。\n4.编译器做了什么工作？\n\t把源码文件中你输入的代码转变为机器语言。\n5.连接器做了什么工作。\n\t把你代码中缺少的库函数内容补充完整，并且针对系统添加起始代码。\n\n# 编程训练\n\n我们现在还不期望你开始写C语言代码，所以这一次锻炼就集中于编程过程的早期阶段吧。\n\n1.你被MacroMusic公司录取了，这个公司正在进入欧洲市场，想要一个能够把英尺换算成厘米的程序（1 inch = 2.54cm）公司想要让这个程序能够提示使用者去输入一个英尺值，你的任务就是找出这个程序的目的，并且设计这个程序。\n\n程序目的：我想要设计一个通过乘除法来把输入的数值变作2.54倍的程序，输入是英尺值，2.54倍是厘米值。\n\n程序设计：\n首先输出一行：请输入英尺值\n然后向用户获取输入值。\n接着经过把值 * 2.54来获取厘米值\n然后在屏幕上输出数值。\n\n交互方式就是输入输出，因为目标人群是欧洲人，所以需要英语，需要更多的UI设计等。\n\n> END..","slug":"C-premier-plus-Chapter-1","published":1,"updated":"2023-11-28T04:23:33.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nxi0001zkuebhvlbq9l","content":"<h1 id=\"第一章-学习准备\"><a href=\"#第一章-学习准备\" class=\"headerlink\" title=\"第一章 学习准备\"></a>第一章 学习准备</h1><blockquote>\n<p><strong>你将会在这一章学到：</strong><br>    1. C的历史以及特点<br>    2. 写程序的步骤<br>    3. 关于代码连接器与编译器的一些知识<br>    4. C标准</p>\n</blockquote>\n<p>欢迎来到C语言的世界！C语言是一种充满活力的高级编程语言，它受到业余与商用编程者的喜爱。<br>这一章会为你学习与利用这种强大而又受欢迎的语言，而且会向你介绍几种你最有可能搭建C语言基础的环境。</p>\n<p>首先，我们看向C语言的来源和它的一些特点（优点以及缺点）。接着，我们会了解编程的起源，查看编程的总体规则。<br>最终，我们会讨论如何在常见的系统中运行C程序。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-1-C语言的由来\"><a href=\"#1-1-C语言的由来\" class=\"headerlink\" title=\"1.1 C语言的由来\"></a>1.1 C语言的由来</h1><p>贝尔实验室的Dennis Richie在1972年创造了C语言，也就在那时，他和Ken Thompson正在致力于设计Unix系统。C语言的想法并不完全是在Richie的脑袋里冒出来的，而是来自Thompson的B语言，B语言来自哪里又是另一个故事了。重点是，C语言是作为工作中的编程人员的工具被创造出来的，所以它的首要目标就是成为一种有用易用的语言。</p>\n<p>很多编程语言都有着类似的目标，但是它们又经常会有其他的顾虑，举几个例子，Pascal语言的主要目标，就是为了教授编程规则提供良好的平台。BASIC语言，被设计得与英语很相像，从而可以方便地让不熟悉电脑的学生们学习。这些目标都是很重要的，但是并不与实际使用协调，也并不是普遍都很易用。相比之下，C语言是为了编程人员而生的，而且成功地成为了现代编程语言的一种选择。</p>\n<h1 id=\"1-2-为什么使用C语言？\"><a href=\"#1-2-为什么使用C语言？\" class=\"headerlink\" title=\"1.2 为什么使用C语言？\"></a>1.2 为什么使用C语言？</h1><p>在过去的30年来，C语言已经成为了最重要与最受欢迎的编程语言。它的成长，就是因为人们经过尝试之后，喜欢使用它。过去的10年里，许多人从C语言转到的更有规模的C++上，但C语言仍然是拥有权重的一种很重要的语言，C++也是从C语言迁移过来的。在学习C语言的过程中，你会意识到C语言的许多长处（见图1.1）让我们预先查看一下。<br><img src=\"/img/Chapter1.2.png\" alt=\"插图\"><br>（上图，左上为强大的控制结构，右上运行速度快，左下小型代码-小程序，右下是可以传输到不同的电脑）</p>\n<h2 id=\"1-2-1设计特点\"><a href=\"#1-2-1设计特点\" class=\"headerlink\" title=\"1.2.1设计特点\"></a>1.2.1设计特点</h2><p>C语言是一种拥有在理论界以及计算机科学实践中令人满意的控制特色的现代编程语言。它的设计让它很自然地能自上而下地规划程序、结构化编程以及模块化设计，从而设计出的程序也更可靠，更易懂。</p>\n<h2 id=\"1-2-2-效率\"><a href=\"#1-2-2-效率\" class=\"headerlink\" title=\"1.2.2 效率\"></a>1.2.2 效率</h2><p>C语言是一种高效的编程语言，它的设计很好地利用了现代电脑的性能。C语言编写的程序常常是小型的，并且运行速度很快。事实上，C表现了一些在汇编语言中好的控制方法，（汇编语言是对于特定的中央处理单元(Central Processing Unit,CPU)的内部指令设计的的助记语句，不同的CPU有着不同的汇编语言）。如果你选择C语言，你可以调节你的程序到达最快速度或者让程序对于内存的使用更有效。</p>\n<h2 id=\"1-2-3-可传递性\"><a href=\"#1-2-3-可传递性\" class=\"headerlink\" title=\"1.2.3 可传递性\"></a>1.2.3 可传递性</h2><p>C语言是一种可传递的编程语言，那意味着在一个系统上的C语言程序也可以在其他系统经过少量的改动或者不改动运行。即使改动是必须的，也只是改动头文件与main程序里的几个词条而已。大多数也打算着有可传递性，但是任何想要把个人电脑IBM里的BASIC程序放到苹果BASIC（它们是近亲）或者尝试把主机上的IBM里的FORTRAN程序在Unix系统中运行都知道传递烦人透顶。C语言是可传递性的领头者。C语言的编译器（把你的C语言代码转换为电脑内部指令的程序）对于40种系统都是可以使用的。从微型处理器到超算。但需要注意的是，一部分程序对于不同的硬件设备是不一样的，比如显示器监控，或者因为在运算系统上的特殊点，比如WinXP与OS X，它们通常是不具有传递性的。</p>\n<p>因为C语言与Unix操作系统关系紧密，Unix系统的安装包是自带C语言的编译器的，Linux安装时也通常带有C语言编译器，一些C语言编译器是可以在个人电脑上使用的，包括运行着各种版本的Windows系统的电脑，还有Mac。所以不论你是正在使用着家里的电脑，还是使用专业的工作站或者大型电脑，你都是有很大可能获得一个适用于你的系统的C语言编译器的。</p>\n<h2 id=\"1-2-4能力与灵活性\"><a href=\"#1-2-4能力与灵活性\" class=\"headerlink\" title=\"1.2.4能力与灵活性\"></a>1.2.4能力与灵活性</h2><p>C语言既强大又灵活（在计算机文献中最受喜欢的两个词）。<br>举个例子，许多功能强大与灵活的操作系统是用C语言写的。许多的其他编程语言（如FORTRAN、Perl、Python、Pascal、LISP、Logo与BASIC）的编译器与翻译器是用C语言写的。结果，当你在Unix机上使用FORTRAN语言，最后是用C语言程序生成的exe文件。C语言程序被用作解决物理、工程问题甚至在电影如《角斗士》中栩栩如生地重现特殊的现象。</p>\n<h2 id=\"1-2-5-以程序员为方向的\"><a href=\"#1-2-5-以程序员为方向的\" class=\"headerlink\" title=\"1.2.5 以程序员为方向的\"></a>1.2.5 以程序员为方向的</h2><p>C语言重视于满足程序员的需求，让我们轻松地触达硬件，而且让你独立地操纵内存中的每一个bit。它拥有非常多的运算符，能够让你简洁地表达自己。C语言比起，比如说Pascal语言就在限制着你可以做的事情。这种灵活性既是优势也很危险。优势在许多的任务，像是数据形式转换，在C语言中简单很多。危险就是用C语言，你有可能犯在其他语言中不可能犯的错误。C语言给予了你更大的自由，也让你承担了更多的责任。</p>\n<p>另外，大多数C语言的实施都有着大量有用的C语言库函数。这些函数能够应对很多编程人员通常的需求。</p>\n<h2 id=\"1-2-6-缺点\"><a href=\"#1-2-6-缺点\" class=\"headerlink\" title=\"1.2.6 缺点\"></a>1.2.6 缺点</h2><p>C确实有一些不足之处。通常，像人一样，不足与长处是同一个特点的两面。例如，我们提到了C语言的自由表达也需要更多的责任。C语言的指针（我们以后会学习到）使用特别地，意味着编程错误会更难跟踪到。曾经也提到了一台没有文字的电脑，解放的代价就是格外的警惕，</p>\n<p>有着大量的运算符，C的简明也让有可能让我们写出极其难以理解的代码。你可能并不是必须要写晦涩的代码，但是可能性总在那儿。毕竟，其他语言哪个有每年一次的混乱的编程比赛？</p>\n<p>还会有更多的长处，毫无疑问也会有更多的缺陷。与其在这个问题上挖的更深，还不如移到下一个话题。</p>\n<h1 id=\"1-3-C语言的用处\"><a href=\"#1-3-C语言的用处\" class=\"headerlink\" title=\"1.3 C语言的用处\"></a>1.3 C语言的用处</h1><p>到 1980 年代初，C 语言已经是 Unix 系统小型计算机世界的主导语言了。从那时起，它就已经被传播到个人计算机（微型计算机）和大型主机（大型计算机）了。（参见图 1.2）许多软件公司把C语言作为制作文字处理程序、电子表格、编译器和其他产品的首选语言。它们知道C语言编写的程序代码量小而且高效。更重要的是，他们知道这些程序将易于修改，并易于适应新型号的计算机。<br><img src=\"/img/Chapter1.3.png\" alt=\"图片\"><br>（以上，C语言被用作编程Unix操作系统，被用作电影如Star wars，在电脑游戏、电脑语言处理、嵌入式系统与机器人工程中都有显著的作用）</p>\n<p>C语言不仅对公司和老手有好处，对其他用户也有好处。越来越多的计算机用户已经开始使用 C 语言，它的优势也得到了确保。你不必是专业的计算机编程人员就可以使用C语言了。<br>在 1990 年代，许多软件公司开始转向 C++ 语言进行大型编程项目。C++ 将面向对象的编程工具嫁接到 C 语言中。（面向对象编程是一种思想体系，它试图使语言来适应问题，而不是让问题来适应语言。）C++ 几乎是 C 语言的超集，这意味着任何 C程序也是，或者它几乎也是一个有效的C++程序。通过学习 C语言，您还学习了许多 C++。<br>尽管 C++ 和 Java 等新型的编程语言很受欢迎，但 C语言在软件公司依然是核心技能，一直排在所需技能的前 10 名。特别的，C语言已成为在嵌入式系统编程中很受欢迎的一种语言，也就是说，它被用于编程越来越多的汽车、相机、DVD 播放器和其它现代便利设施中的常见的微型处理器。此外，C语言已经开始追赶在科技科学编程上具有长久的主导地位的FORTRAN语言。最后，作为为开发操作系统而生的语言，C语言在Linux系统的发展中发挥着重要作用。所以，在二十一世纪的第一个十年， C 语言的影响力仍然在变得更大。</p>\n<p>简而言之，C 是最重要的编程语言之一，并将继续如此。如果你想要一份编程软件的工作，这应该是你能够回答“是”的第一个问题中的一个，“嗯，比如说，你会C语言吗？“</p>\n<h1 id=\"1-4-计算机的作用\"><a href=\"#1-4-计算机的作用\" class=\"headerlink\" title=\"1.4 计算机的作用\"></a>1.4 计算机的作用</h1><p>既然你已经要开始学习如何运行C语言程序了，你很可能需要了解一下电脑是怎么工作的，这些知识能够帮助你了解C语言程序与最终运行程序后发生的事情之间的关联。</p>\n<p>现代的电脑有几个组成部分，<em><strong>中央处理器</strong></em>，又叫<em><strong>CPU</strong></em>，做了电脑运转时的大部分工作。<em><strong>随机存取器</strong></em>，又叫<em><strong>RAM</strong></em>，作为保存文件与程序的工作区。永久存储器，比如硬盘，存储程序和文件，即使电脑已经关机。各种外设，比如键盘、鼠标还有显示器，在你与电脑交互中搭建了桥梁。CPU运行程序，所以我们集中于它的作用。</p>\n<p>CPU的自始至终的工作，简单来说，其实是非常简单的。它从内存中依次抓取一条条的指令，然后执行它。（千兆赫CPU可以在一秒钟执行这个过程百亿次，所以CPU可以以一种惊人的速度运作），CPU也有自己的小工作区，有几个储存数的<em><strong>寄存器</strong></em>。每一个寄存器保存下一条指令的内存地址，然后CPU就使用这些信息来抓取下一条指令。接下来，CPU再把指令储存在另一个寄存器中，然后把上一个寄存器的命令更新到下一条。CPU能够理解的指令（也叫指令集）是有限的。而且这些指令都是各自分明的。很多指令都是要求电脑去把数字从一个地方移动到另一个地方。—例如，从内存到寄存器。</p>\n<p>在这个过程中有几点很有趣。第一，在电脑中任何东西都是以数字的形式储存的，数字是以数字的形式储存的。字符（例如你在文本编辑中的英文字母），也是由数字的形式储存的，每一个字符都有一个数字编码。计算机储存进寄存器的指令也是数字的形式，指令集中的每一条指令都对应着一个数字编码。第二，电脑程序最终会被以数字指令的形式表达，这又叫<em><strong>机器语言</strong></em>。</p>\n<p>计算机运行的一种结果就是，如果你想让计算机做些事，你需要提供一系列的指令或者是程序，来明确地告诉它要做什么和怎么做。你必须创建一个电脑能够直接理解（使用机器语言）的程序。这是个精细、单调、费劲的任务。一些像两个数相加的简单的任务可能会被分解成几步，可能会像下面几步。</p>\n<blockquote>\n<p>1.从内存区域2000把数字复制到寄存器1<br>2.从内存区域2004把数字复制到寄存器2<br>3.用数字二的数值加上数字一，在寄存器1留下答案。<br>4.把寄存器1中的数据复制到内存区域2008</p>\n</blockquote>\n<p>而且你还得把每一条指令用数字指令表述出来！</p>\n<p>如果你是喜欢以这种方式写程序的，你会很难过地了解到机器语言编程的黄金时期已经远远地过去了。但是如果你更喜欢那些更愉快的编程，那就对高级编程语言打开怀抱吧！</p>\n<h1 id=\"1-5-高级计算机语言与编译器\"><a href=\"#1-5-高级计算机语言与编译器\" class=\"headerlink\" title=\"1.5 高级计算机语言与编译器\"></a>1.5 高级计算机语言与编译器</h1><blockquote>\n<p>高级编程语言，比如C语言，以很多方式简化了你的编程。<br>    第一，你不需要用数字的形式来表达你的指令。<br>    第二，你使用的指令与你对于程序的思考而不是与电脑使用的精确的指令</p>\n</blockquote>\n<p>与其关心某一个CPU为了完成某一个任务进行的某一步。你可以以一种更复杂的形式来表达你想做的事情，例如，你也许会写下面的东西。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = mine + yours;</span><br></pre></td></tr></table></figure>\n\n<p>看到这样的代码，你能够很明白它是干啥的，<br>而看着机器语言以数字构成的替代指令，那就太不易读了。</p>\n<p>不幸的是，机器语言才是适合电脑的，对于电脑来说，高级语言完全无法理解。这就到了编译器上场的时候了，<em><strong>编译器</strong></em>是把高级语言程序详细地翻译成电脑需要的机器语言指令的程序。你以高级的方式思考，编译器做这些令人生厌的工作。</p>\n<p>编译器方法还有另一种好处。每台电脑都设计了各自的机器语言，所以比如说英特尔PentiumCPU的机器语言对于摩托罗拉PowerPC CPU可能没有任何意义，但是你可以根据特定的机器语言搭配编译器。所以，使用一系列的编译器或者合适的编译器，你就可以把同样的高级编程语言转化成一系列不同的机器语言程序。你只需要解决这个问题一次，然后让编译器把这个解法翻译成一系列机器语言程序。</p>\n<p>简短地说，高级的编程语言，比如C语言、Java还有Pascal，它们以一种更加抽象、与特定的CPU并不绑定的方式来表述程序行为。而且，对于机器语言来说，高级语言学习起来简单而且也更容易编程。</p>\n<h1 id=\"1-6-使用C语言的七步走\"><a href=\"#1-6-使用C语言的七步走\" class=\"headerlink\" title=\"1.6 使用C语言的七步走\"></a>1.6 使用C语言的七步走</h1><p>C语言，如你所见，是一种编译型的语言，如果你习惯于使用如Pascal或者FORTRAN的编译型语言，你应该已经对组成C语言程序的基本步骤很熟悉了。如果你的基础语言是如BASIC，或者面向接口的计算机图形语言（如Visual Basic）的翻译型语言，或者你还没有编程基础，你需要学习如何编译。我们一会就会研究那个过程，你会认识到这是很合理简单的。首先，为了让你宏观、大体上了解编程，让我们把编写C语言程序分解成7个步骤（见图1.3）。值得注意的是，这只是理想化的步骤，在编程实践中，你需要在步骤中来回切换，用后面一步了解到的来使之前的一步得到优化。<br><img src=\"/img/Chapter1.6.png\" alt=\"七步走\"></p>\n<h2 id=\"1-6-1-确定程序目的\"><a href=\"#1-6-1-确定程序目的\" class=\"headerlink\" title=\"1.6.1 确定程序目的\"></a>1.6.1 确定程序目的</h2><p>很自然的，你需要明确地知道你想让程序做什么，思考你的程序需要什么信息，需要在计算与控制上完成什么样子的事情，而且程序内的信息需要对你有所反馈，在这一步的规划中，你应当以大体出发，而不是根据特定的编程语言来思考。</p>\n<h2 id=\"1-6-2-设计程序\"><a href=\"#1-6-2-设计程序\" class=\"headerlink\" title=\"1.6.2 设计程序\"></a>1.6.2 设计程序</h2><p>在有了对于你的程序应该干啥的印象之后，你应该选择程序如何来运行它，用户的交互界面会是什么样子的？程序应该如何被组织起来？程序的目标人群是？你需要多长时间来做完这个程序？</p>\n<p>你还要决定在程序中呈现数据，而且很可能的，在辅助文件里也要。要决定用什么方式来处理数据。在刚开始学习C语言时，可能选择会很简单，但是随着你应对更多复杂的情况后，你就会知道这些选择是需要更多的思考的。选择一种好的方式来呈现数据经常会让设计程序与处理数据简单很多。</p>\n<p>再一次，你需要在大体层面上思考而不是在特定的代码上，但是有些选择可能是基于编程语言的大体特点的，举个例子，C语言编程人员就比，比如说，Pascal编程人员在数据呈现上拥有更多的选择。</p>\n<h2 id=\"1-6-3-编写代码\"><a href=\"#1-6-3-编写代码\" class=\"headerlink\" title=\"1.6.3 编写代码\"></a>1.6.3 编写代码</h2><p>既然你已经对于你的程序有个清晰的设计了，你就可以通过写代码的方式来实现它了。也就是说，你可以把你的程序设计翻译为C语言。这就是你需要用上C语言知识的地方了，你可以在纸上画出你的想法，但最后你还是要把你的代码输入电脑。这个过程主要取决于你的编程环境，我们一会会呈现更多的常见的编程环境。总体上，你会使用文本编辑器来创造一份源码文件，它包含了你程序设计的C语言翻译，例1.1给出了C语言源码的一个例子。</p>\n<p><img src=\"/img/listing1.1.png\" alt=\"图例1.1\"><br>在这一步，你应该记录你的工作，最简单的方式是使用C语言的注释功能，它包含着你对于源码的解释，我们会在第二章详细讲到如何注释你的代码。</p>\n<h2 id=\"1-6-4-编译\"><a href=\"#1-6-4-编译\" class=\"headerlink\" title=\"1.6.4 编译\"></a>1.6.4 编译</h2><p>下一步就是编译源码，再一次，细节上的问题是与你的编程环境相关的，我们马上会研究几种常见的环境了。现在，让我们以更概念化的方式看看发生了什么。</p>\n<p>我们已经知道编译器的工作就是把源码转化成可执行文件。<em><strong>可执行文件</strong></em>是以我们电脑的自然语言（或者说<em><strong>机器语言</strong></em>）写成的，这种语言是以精细的数字代码形式呈现的。而且你之前也了解到了，不同的电脑的机器语言是不一样的。C语言的编译器也包括着C语言库中的代码。C语言库包含着很多的基础的、日常使用的东西，比如<strong>Printf</strong>和<strong>scanf</strong>函数。（更精确地说，一个叫做连接器的程序把C语言库中的一组代码带到编译器，但是编译器在大多数系统都是可以运行连接器的），最终结果就是包含着电脑可理解的可执行文件的程序，你可以直接运行。</p>\n<p>编译器还会检查你的程序是不是使用了符合语法的C语言，如果编译器发现了错误，它就会汇报给你，而且不会生成可执行文件，理解编译器提示的错误信息也是你会很快习得的另一项技能。</p>\n<h2 id=\"1-6-5-运行程序\"><a href=\"#1-6-5-运行程序\" class=\"headerlink\" title=\"1.6.5 运行程序\"></a>1.6.5 运行程序</h2><p>通常的，可执行文件是你可以运行的程序，你可以在很多常见的环境中，包括MS-DOS、Unix、Linux控制台、只需要打字写下可执行文件的名称。其他的环境，比如VMX、VAX可能需要一些运行指令或者其他的机制方法。<em><strong>集成开发环境（IDE）</strong></em>，像很多在Windows系统或者Mac系统上的，使你能够在IDE内部通过菜单选项或者按几个按键来编辑与运行你的C语言程序。最终生成的文件也可以通过双击文件名或者图标的方式从你的操作系统直接运行。</p>\n<h2 id=\"1-6-6-测试与Debugging\"><a href=\"#1-6-6-测试与Debugging\" class=\"headerlink\" title=\"1.6.6 测试与Debugging\"></a>1.6.6 测试与Debugging</h2><p>你的程序能够运行是个好迹象，但是有可能你的程序并没有正确地运行。因此，你应该检查下是否它做到了它应该做的事情。你会发现有些程序是会有问题（在计算机领域内的行话叫bugs）的。调试是查找与修复程序错误的过程，学习的过程中犯错误是自然且正常的。看起来编程“天生”需要调试，所以当你把学习到的与编程实际结合起来的时候，你最好准备好在犯错的时候提醒自己。随着你成为一个更加强大与巧妙的编程人员，你也会不断地犯错，但你也因此不断地变得更加强大与巧妙。</p>\n<p>你会有很多机会犯错，基础的设计层面错误，实现过程出错，忽略了可能会搞砸你的程序的输入。你可能会不恰当地使用C语言，你可能会拼写错误，可能会把括号放错了位置等等等等。你会有自己的错误方式来丰富这一列的。</p>\n<p>幸运的是，这种情况并不是无望的，即使有时候你会这样认为啦。<br>编译器会捕捉到很多种类的错误，而且还会有工具来帮助你找到许多种编译器没有办法捕捉的错误。继续读下去，这本书也会给到你一些调试的建议。</p>\n<h2 id=\"1-6-7-维护与修改程序\"><a href=\"#1-6-7-维护与修改程序\" class=\"headerlink\" title=\"1.6.7 维护与修改程序\"></a>1.6.7 维护与修改程序</h2><p>当你为自己或者别人创造了一个程序，你可能会发现程序是可以有更多的用处的。如果是的，你可能会发现是有理由做出些修改的。可能有个小bug只有别人把名字以Z&#x2F;z开头的时候才会发生，或者你会想出一种能够解决问题的更好的方式，可以聪明地加入一些的新功能，你可能需要改写程序以便它能够在不同电脑系统中运行。如果你明确地注释了这些程序，所有这些任务都会被极度地简化。</p>\n<h2 id=\"1-6-8-注释\"><a href=\"#1-6-8-注释\" class=\"headerlink\" title=\"1.6.8 注释\"></a>1.6.8 注释</h2><p>编程的过程并不总是像这个过程描述的那样线性。有的时候你需要在步骤中前后切换。例如，当你在写代码的时候，你有可能发现你的计划并不实际。你有可能发现了一种更好的方式来做事，或者在看到程序是怎么运行的之后，你会想要改变你的设计，记录你的工作能够帮助你在不同的等级之间前后切换。</p>\n<p>许多学习者通常会忽略掉第一步与第二步（确定程序目的与设计程序）直接进入第三部（写程序），你写的第一个程序或许可以直接在脑中看到完全的流程，如果犯错也很好定位错误。但是随着你编写的程序越来越复杂，越来越冗长，心智的视觉化就开始失效了，而且错误也会更难以发现。最终，那些忽略了规划步骤的人就陷入数小时的时间浪费、困惑还有沮丧，因为他们写出的丑陋的，无法实现功能而又深奥的程序。这项工作越是复杂，需要的规划工作就越多。</p>\n<p>道理就是你需要养成在写代码之前做规划的习惯，使用这种古老但是可敬的笔尖技术来记下你程序的目的，给程序设计做出大纲。如果你这样做的话，你最终会收获节省时间与满足感的巨大红利。</p>\n<h2 id=\"1-6-9-编程技术\"><a href=\"#1-6-9-编程技术\" class=\"headerlink\" title=\"1.6.9 编程技术\"></a>1.6.9 编程技术</h2><p>你生成程序的明确步骤是取决于你的电脑系统的，因为C语言是可传输的，它是可以适用于很多的系统环境的，包括Unix，Linux，MS-DOS（是的，很多人仍然在用），Windows与Mac OS，其实还有很多只不过没有足够的空间留给它们了，这尤其是因为各自的产品不是演化、消亡，就者被取代。</p>\n<p>首先，即使如此，让我们先来研究许多C语言运行环境的共有特点，包括我们刚才已经提到的五种系统，你不需要明确地知道是什么引导了C语言程序的运行，但这是良好的基础，它也能够帮助你更好地理解为什么你需要经历一些特定的步骤来得到一个C语言程序。</p>\n<p>当你在写C语言程序的时候，你会在源码文件中储存你在文本文件中写下的东西。大多数由C语言编程的系统，也包括我们提到的那一些，需要以<code>.c</code>结尾的文件（举个例子，<code>wordcount.c</code>与<code>budget.c</code>）在<code>.c</code>之前的那部分名字叫做<em><strong>基准名（Basename）</strong></em><br>在这一段后面的名称叫做<em><strong>拓展名（Extension）</strong></em>，因此，<code>budget</code>是基准名，<code>.c</code>是拓展名。它们的混合就是文件名。文件名也必须要复合特定的电脑操作系统的需要。例如，IBM-PC与[克隆机？]上的MS-DOS系统，它就要求你的文件名不能多于8个字符长。所以，<code>wordcount.c</code>在DOS系统中就不是合法的文件名。一些Unix系统在整个文件名上有14个字符的限制，包括拓展名，其他Unix系统也允许更长的名称，不多于255个字符即可。Linux、Windows与MacOS也允许更长的文件名。</p>\n<p>让我们假设我们拥有一份名字叫<code>Concrete.c</code>的源文件储存着例1.2的C语言源码。<br><img src=\"/img/listing1.2.png\" alt=\"Concrete.c\"><br>不需要担心在源码文件中的一些细节，在第二章你会学到的。</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h2 id=\"1-7-1-目标代码文件、可执行文件和库\"><a href=\"#1-7-1-目标代码文件、可执行文件和库\" class=\"headerlink\" title=\"1.7.1 目标代码文件、可执行文件和库\"></a>1.7.1 目标代码文件、可执行文件和库</h2><p>C语言编程的一个基本本领就是把你的源代码文件转化成保存着即时就可运行的可执行文件。要实现这个过程需要两个步骤：编译与连接。编译器可以把源代码转换成中间代码，然后连接器再把中间代码与其他代码组合，由此创造出可执行文件。C语言利用这两部分结合的方法让程序易于模块化生成。你可以把每一个模块分开来编译，再用连接器把每一个编译过的模块结合起来。以那种方式，如果你想改变其中的一个模块，你就不需要再重新编译其他的模块，而且连接器也会把你的程序与预先编译好的库代码结合起来。</p>\n<p>要生成中间文件的方法还有几种，最流行的而且能够实施的在这里已经提到了，就是把源代码文件转化成机器语言代码，把结果放在目标代码文件中或者简短地说，目标文件。（假设你的源码是由单一文件组成的），虽然目标文件包括了机器语言代码，它还没准备好运行。目标文件包含了对于源代码的翻译版本，但是它还不完整。</p>\n<p>缺失的第一个部分就是起始代码，它作为你的程序与操作系统的接口。举个例子，你可以在在DOS或者Linux之下协调地运行BM PC，它们的硬件都是类似的，所以同样的目标文件对于两种系统都是可以起作用的，但是你需要在DOS与Linux不同的起始代码，因为不同的系统是以不同的方式处理程序的。</p>\n<p>第二个缺失的部分就是常用库的代码。几乎所有的C语言程序都需要利用C语言的库函数。比如<code>Concrete.c</code>使用的<code>printf()</code>。目标代码文件并不包括这个函数的代码。它只包含了<code>printf</code>函数的声明指令，实际的代码是在另一个文件中储存的，它叫<em><strong>库文件</strong></em>。库文件包含了很多函数的代码。</p>\n<p>连接器的作用就是把这三个部分连接在一起-你的目标代码、起始代码和库代码，然后把三者整合为一个文件，即可执行文件。对于库代码，连接器只提取需要使用的函数在C语言库中对应的代码。<br>（见图1.4）<br><img src=\"/img/listing1.4.png\" alt=\"图1.4\"><br>（可见，上图中，由源代码经过编译器生成目标代码文件，再由目标代码文件与起始代码、库代码通过连接器转化为可执行文件<code>concrete.exe</code>）.</p>\n<p>简短来说，一份目标文件与可执行文件都由机器语言指令组成。然而，可执行文件只把你使用的代码翻译为机器语言，但可执行文件还由常用库与起始代码的机器语言翻译组成。</p>\n<p>在一些系统中，你必须把编译与连接的过程分开。另外的一些系统中，编译器会自动启动连接器，所以你只需要编译即可。</p>\n<p>现在我们就针对于特定的系统来研究一下。</p>\n<h2 id=\"1-7-2-Unix系统\"><a href=\"#1-7-2-Unix系统\" class=\"headerlink\" title=\"1.7.2 Unix系统\"></a>1.7.2 Unix系统</h2><p>因为C的流行始于Unix系统，我们就从它开始。</p>\n<h3 id=\"在Unix系统中进行编辑\"><a href=\"#在Unix系统中进行编辑\" class=\"headerlink\" title=\"在Unix系统中进行编辑\"></a>在Unix系统中进行编辑</h3><p>Unix系统并没有独立的C语言编译器。你反而需要一些多功能的Unix编辑器，例如emacs、jove、vi或者一个X Window系统文本编辑器。</p>\n<p>你的最主要的两个目的就是正确地书写程序，并且为储存程序的文件起个名字。正像已经提到的，文件的名称必须以<code>.c</code>。注意到Unix系统会以大小写来区分文件，所以<code>BUDGET.c</code>、<code>budget.c</code>还有<code>Budget.c</code>是三个各自不同的C源文件名称，但是<code>BUDGET.C</code>是不合法的，因为它的扩展名使用了大写。</p>\n<p>使用vi编辑器，我们把下面的程序保存在名叫<code>inform.c</code>的文件中。<br><img src=\"/img/informc.png\" alt=\"inform.c\"><br>这些文本就是源代码，而<code>inform.c</code>是源文件，重点就在源文件只是一个过程的起点，而不是结尾。</p>\n<h3 id=\"在Unix系统中进行编译\"><a href=\"#在Unix系统中进行编译\" class=\"headerlink\" title=\"在Unix系统中进行编译\"></a>在Unix系统中进行编译</h3><p>我们的程序，虽然已经不可否认地很精致了，对于电脑仍然是一派胡言，电脑是不理解什么是<code>#include</code>和<code>printf</code>的（现在你可能也不理解，但是我们很快就会学习，然而电脑并不会），正像我们之前讨论过的。我们需要编译器的帮助来把我们的代码（源代码）翻译为电脑的代码（机器语言）。这些工作的结果就是可执行文件，它会包含所有可以让电脑完成工作的代码。</p>\n<p>UnixC编译器叫<code>cc</code>，为了编译<code>inform.c</code>程序，你需要把下面的指令打下来。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc inform.c</span><br></pre></td></tr></table></figure>\n\n<p>几秒之后，Unix系统的命令提示符就会给出反馈，告诉你这件事已经做完了，如果你没有正确地编写代码的话可能会得到警告或者错误信息，但我们先假设一切都是正确的。（如果你的编译器对于<code>void</code>这个词进行报错，那是你的编译器还没有更新到 <strong>ANSI C</strong> 的编译器，我们会在不久提到更多的标准，即使这样，你从例子中删掉void就好）。如果你使用<code>ls</code>指令来把你的文件列出来的话，你会发现产生了一个新文件叫<code>a.out</code>（见图1.5）这就是包含了程序中翻译后指令（或编译后指令）的可执行文件。想要运行的话直接打下<code>a.out</code>即可。</p>\n<p>然后，文件中的指令执行，智言倾泻而出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A .c is used to end a C program filename.</span><br></pre></td></tr></table></figure>\n<p>如果你想要吧可执行文件保存下来，你需要重新命名它，<br>否则，这个文件在你下一次编译时就会被新的同名文件代替。<br><img src=\"/img/process.png\" alt=\"The process\"><br>（从源码到程序的过程）</p>\n<h2 id=\"Linux-系统\"><a href=\"#Linux-系统\" class=\"headerlink\" title=\"Linux 系统\"></a>Linux 系统</h2><p>Linux也是个很受欢迎的开源的，与Unix类似的多平台操作系统，它包括IBM与Mac的兼容。在Linux上设计程序与Unix系统的过程大部分是相似的，除了你需要使用公用C语言编译器，它叫gcc，是由GNU提供的，在那里面，编译的指令是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc inform.c</span><br></pre></td></tr></table></figure>\n<p>注意到在Linux安装的时候安装gcc的时候可能是可选的，所以你（或者其他人）有可能如果之前没装的话必须得自己安装gcc。通常这会让cc成为gcc的一个别名，所以你喜欢的话可以用cc来代替gcc。</p>\n<p>你可以在下面的网站中获取关于gcc获取更多的信息，包括最新的版本。<br><a href=\"http://www.gnu.org/software/gcc/gcc.html\">http://www.gnu.org/software/gcc/gcc.html</a>.</p>\n<h2 id=\"集成开发环境（Windows）\"><a href=\"#集成开发环境（Windows）\" class=\"headerlink\" title=\"集成开发环境（Windows）\"></a>集成开发环境（Windows）</h2><p>C编译器并不是Windows安装包中的一部分，所以你也有可能需要安装一个C语言编译器。很多供应商，比如Microsoft, Borland, Metrowerks, 还有Digital Mars, 提供了以Windows系统为基础的集成开发环境（<em><strong>IDE</strong></em>）（近来，很多已经把C语言与C++编译器结合在一起了。）它们都有快速且集成的环境，可以方便地生成C语言程序。值得注意的是，每一个程序都有一个嵌入式的编辑器，你可以用它来编写C语言程序。都有可以让你命名、保存、编译、运行的菜单。每一次编译运行如果编译器发现错误了你都可以回到编辑器，而且出错的代码行都会被突出显示出来，并搭配上适当的错误信息。</p>\n<p>Windows IDE通常是可以一同处理C与C++的，你需要声明你需要一个C++程序。使用一些产品，比如Metroworks或者CodeWarrior里你需要用项目类型来区分你使用的语言。其他的产品比如Visual C++你是使用<code>.c</code>的扩展名来表示你想要使用C语言而不是C++。然而，大多数C语言程序也作为C++程序运作，可以参考“Differences Between C and C++”，那里对C与C++进行了比较。</p>\n<p>你有可能遇到的一个问题是当程序停止的时候程序运行的窗口也随之关闭，如果你也遇到这种情况，你可以让程序直到你输入一个字符再结束。只要在代码结尾，return语句前加上一行代码即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getchar();</span><br></pre></td></tr></table></figure>\n<p>这一行代码读取一个键盘输入，所以直到你输入下一个字符之前程序都是暂停着的。一些时候，受到程序运行方式的影响，可能在最后已经有一个键入数据等待了，这种情况下你就得输入两次。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getchar();</span><br><span class=\"line\">getchar();</span><br></pre></td></tr></table></figure>\n\n<p>例如，如果程序做的最后一件事是要求你输入你的体重，你已经输入完体重了然后输入enter来输入数据，程序会读取你的体重，第一个<code>getchar</code>会读取回车符，第二个<code>getchar</code>直到你再打一个字符才会有，如果你现在还不太能够理解，你学习完C语言输入就会明白了。</p>\n<p>即使多种多样的IDEs普遍有着比较类似的标准，但是细节方面还是各自不同的，不仅在一行程序内，还在编译器的不同版本。你需要做些实验，来获知你的编译器是怎么工作的，你还有可能需要阅读使用手册或者尝试网上教程。</p>\n<h2 id=\"IBMPC上的DOS编译器\"><a href=\"#IBMPC上的DOS编译器\" class=\"headerlink\" title=\"IBMPC上的DOS编译器\"></a>IBMPC上的DOS编译器</h2><p>对于很多人来说，在个人电脑上运行DOS是很过时的事情，但是它对于那些电脑资源与预算受限、喜欢更简单的，没有[响铃、哨音]与令人分心的事物的操作系统。很多Windows IDEs额外提供了命令行工具，这就然你能够在DOS命令行环境下编程。Comeau的C&#x2F;C++编译器在很多系统中是适用的，包括几种Unix、Linux的变体，它就拥有一个命令行DOS的版本。并且，它还有免费与共享的DOS系统编译器，例如，GNU gcc编译器就有一个以DOS为基础的版本。</p>\n<p>源码文件应该以文本文件形式存在，而它们并不是文字处理文件。（文字处理文件包括了很多额外信息，比如字体和格式）你应该使用一个文本编辑器如Windows Notepad或者与一些版本的DOS一同发布的EDIT程序。文件的扩展名需要是<code>.c</code>，一些处理器会自动在文本文件后面加上<code>.txt</code>的扩展名。如果你遇到了这种情况，你需要改变文件名，把<code>.txt</code>改为<code>.c</code>。</p>\n<p>电脑上的C语言编译器通常，但并不总是，生成带有<code>.obj</code>后缀的中间目标代码，不像Unix编译器，C语言编译器通常不会在编译完成之后删除这些文件。有些编译器也会生成带有<code>.asm</code>扩展名的汇编语言文件，或者使用它们自己的特殊形式。</p>\n<h2 id=\"Mac上的C语言\"><a href=\"#Mac上的C语言\" class=\"headerlink\" title=\"Mac上的C语言\"></a>Mac上的C语言</h2><p>最广受闻名的Mac C&#x2F;C++编译器就是Metrowerks CodeWarrior 编译器（Windows与Mac版本的CodeWarrior有相似的界面），它提供了与Windows编译器相似的以项目为基础的IDE。从文件菜单选择新文件开始，一系列的项目类型选择将会陈列在你眼前。在最新的CodeWarrior版本中，使用Std C控制台即可（不同的发布版本需要经过不同的步骤才到达选择这一步），你还有可能在68KB版本（适于摩托罗拉 680 * 0 系列的处理器），PPC版本（适于PowerPC处理器）或者Carbon版本（适于OS X系统）</p>\n<p>新的项目在最初项目中会有一个很小的源码文件，你可以尝试编译或者运行它来获知你的系统是否设置好了。</p>\n<h1 id=\"1-8-语言标准\"><a href=\"#1-8-语言标准\" class=\"headerlink\" title=\"1.8 语言标准\"></a>1.8 语言标准</h1><p>现在，很多C语言实例都是可行的，理想化情况下，当你在写C语言程序时，在任何的实例中都是一样运作的（假设你没有使用特殊机器来编程），为了这件事情能够实现，不同的实例需要有一个确定的、可识别的标准。</p>\n<p>最初，C语言官方并没有语言标准，但是，由Brian Kernighan和Dennis Ritchie（1978）编纂的最初一版的<em><strong>C Programming Language</strong></em>确立了被接受的标准，它通常被称作为<em><strong>K&amp;R C</strong></em>或者<em><strong>classic C</strong></em>。特别的是，那本书附录中的“C Reference Manual”作为了C语言实例的指导。但是，比如编译器，就会要求一个完整的K&amp;R实例，因为即使附录中定义了C语言，它还没有定义C语言库。C比其他的大多数语言都要更加依赖于C语言库，所以库标准还需要确立。没有任何的官方标准的情况下，Unix实例中提供的库就成为了实际的标准。</p>\n<h2 id=\"第一个ANSI-ISO-C语言标准\"><a href=\"#第一个ANSI-ISO-C语言标准\" class=\"headerlink\" title=\"第一个ANSI&#x2F;ISO C语言标准\"></a>第一个ANSI&#x2F;ISO C语言标准</h2><p>随着C语言的进步与在不同系统中的广泛使用，C语言社区意识到它需要一个更加综合、与时俱进并且严格的标准。为了满足这种需求，美国国家标准研究院在1983年成立了X3J11委员会，开发了一种新的标准，它在1989年被正式使用，这种新型标准（ANSI C）不仅定义了语言而且还定义了基础的C语言库，国际标准化组织采用了在1990年一种C语言标准（ISO C）。ISO C与ANSI C本质上是一样的标准。ANSI&#x2F;ISO标准的最后一种版本通常被称作<em><strong>C89</strong></em>（因为那是ANSI同意的时候）或者<em><strong>C90</strong></em>（那是ISO同意的时候），而且因为ANSI版本是先推出的，人们更经常用的是ANSI C。</p>\n<p>这个协会有几项指导准则，可能最有趣的就是这一项：保持C语言的精神<br>委员会在阐述这种精神的时候列出了以下的几点。</p>\n<ul>\n<li>相信编程人员。</li>\n<li>不要阻止编程人员做需要做的事情。</li>\n<li>保证简单、小型地使用这种语言。</li>\n<li>一项操作只提供一种方式。</li>\n<li>即使传输性会下降，也要尽力让C语言程序运行变快。</li>\n</ul>\n<p>在最后一点中，委员会的意思是实例必须界定一种对于目标电脑的运转最好的操作，而不是试着强加抽象的、统一的定义。在学习语言的同时，你也会体会到这种哲学的。</p>\n<h2 id=\"C99标准\"><a href=\"#C99标准\" class=\"headerlink\" title=\"C99标准\"></a>C99标准</h2><p>在1994年，他们开始重新审视这个标准，这也导致了C99标准的产生，一个ASIO&#x2F;ISO联合委员会，也被称作<em><strong>C9X</strong></em>委员会批准了C90标准的准则，包括保持语言的小型与简洁，委员会的目的并不是向语言中添加新的特性，而是按需去达到新的目标。其中一个主要目标就是，通过比如提供解决国际字符集的方法，来支持国际编程。另一个目标就是“把现存的实践编程化来解决明显的缺陷”。因此，当在达成把C语言移植到64位的处理器上的需要时，委员会 以在真实生活中应对过这种问题的人的经验为基础来添加标准。第三个目标就是改善C语言执行科学与工程项目时做关键数字运算时的合适度。</p>\n<p>这三点-国际化，纠正缺陷与对于计算可用度的改善是最主要的以改变为方向的目标，其他的改变计划自然更加保守，例如，把与C90与C++的不协调降到最低，并且让这个语言概念上是简洁的。用委员会人员的话来说，“委员会在让C++变得更加重要，更加有发展动力。</p>\n<p>C99改变的结果，就是它保持了C语言的必要的基本特征，C语言仍然是一个小型的，简洁并高效的语言，这本书指出了很多C99的变化，因为现在的大多数编译器还没有完全实现所有的C99的改变，你可能会发现有些在你的系统上不能实施，或者你会发现一些C99特征只有你改变了一些编译器的设置才可以实现。</p>\n<p>#注意<br>这本书将会使用ISO&#x2F;ANSI C这些词来表示这些特征来表示均为两种标准均适用的特征，使用C99来指明新的特征。偶然的，当一种特性是第一次加入C语言时，它也指C90标准。 </p>\n<h1 id=\"1-9-本书的组织架构\"><a href=\"#1-9-本书的组织架构\" class=\"headerlink\" title=\"1.9 本书的组织架构\"></a>1.9 本书的组织架构</h1><p>组织信息的方式有很多。其中一种最直接的方式就是把每一个话题的所有相关信息全部列出来，这对于参考书是极其实用的，因为你就可以在一个地方找到所有关于给定主题的信息。但是它对于学习项目并不是最好的顺序。例如，如果你从开始学习名词开始学习英语，你的表达能力就会被严重地限制。当然，学习好了名词你随便找到某个东西就能说出它的名字，但是如果你能够学一些名词、动词、形容词等等，还有一些关于这些部分如何相互连接的规则，你就会有更大的能力来表达自己。</p>\n<p>为了让你能够更均衡地消化信息，这本书使用了一种螺旋上升的方式，在初期的时候先提到这个主题，然后在后文给予更充分的讨论。例如，对于理解C语言，理解函数是极其关键的，因此，在前面的几章就会包括对于函数的一些讲述，以便于你能够在第九章全面讲述函数的时候，已经能够使用函数获得到一些轻松了。相似的早期的篇章也会预先讲述字符串和循环，那样你就可以在还没有细致地地了解它们之前，在你的程序中先使用那些有用的工具。</p>\n<h1 id=\"1-10-例子的使用\"><a href=\"#1-10-例子的使用\" class=\"headerlink\" title=\"1.10 例子的使用\"></a>1.10 例子的使用</h1><p>我们已经差不多要开始学习C语言了，这一单元已经包括了我们在陈述材料的时候的一些例子了。</p>\n<h2 id=\"字体-Typeface\"><a href=\"#字体-Typeface\" class=\"headerlink\" title=\"字体 Typeface\"></a>字体 Typeface</h2><p>对于呈现文字的程序与电脑的输入输出，我们使用你很可能在屏幕上或者在输出的时候看到的相似的字体。我们已经使用过几次了。为了防止你没有注意到，字体看起来是下面这样的</p>\n<p><img src=\"/img/typeface.png\" alt=\"字体示例\"></p>\n<p>相同的等宽字体也被用作是与编程相关的词汇，比如<code>main()</code>，也用作文件名，比如<code>stdio.h</code>，对于用来替换特殊词汇的占位字符，我们是用斜体的等宽字符来写的，比如下面的描述。<br><em>type_name variable_name;</em><br>例如，你有可能用<em>type_name</em>来替换<code>int</code>，用<em>variable_name</em>来替换<em>zebra_count</em></p>\n<h2 id=\"程序输出-Program-Output\"><a href=\"#程序输出-Program-Output\" class=\"headerlink\" title=\"程序输出 Program Output\"></a>程序输出 Program Output</h2><p>电脑中的输出是以与我们书中相同的形式被印出来的，但输入是以粗体字被显示出来的。例如，下面就是在14章“结构体与其他数据类型”中的输出。</p>\n<p><img src=\"/img/output.png\" alt=\"输出示例\"></p>\n<p>以正常电脑字体打印出来的是程序的输出，黑体字是用户的输入。<br>你与你的电脑交互的方式有很多，我们假设你是用键盘在键入指令的，在屏幕上阅读反馈。</p>\n<h2 id=\"特别的按键-Special-Keystrokes\"><a href=\"#特别的按键-Special-Keystrokes\" class=\"headerlink\" title=\"特别的按键 Special Keystrokes\"></a>特别的按键 Special Keystrokes</h2><p>通常，你会通过一个标签为Enter的按键，c&#x2F;r，返回或者其他的方式输入一行指令，我们在文中称这些按键为<em><strong>Enter key</strong></em>，自然也就会默认你会在每一行输入之后按下Enter键。然而，为了阐明特定的观点，一些例子可能会明示出Enter键，以[enter]的形式来呈现它，这个括号就表示你需要按下一个按键而不是打字<strong>enter</strong>。</p>\n<p>控制字符中的特殊按键，比如CTRL+D，这种标记指在你按下Ctrl标志的按键（或者可能是Control）时按下D键。</p>\n<h2 id=\"准备学习这本书使用的系统\"><a href=\"#准备学习这本书使用的系统\" class=\"headerlink\" title=\"准备学习这本书使用的系统\"></a>准备学习这本书使用的系统</h2><h2 id=\"Systems-Used-in-Prepare-This-Book\"><a href=\"#Systems-Used-in-Prepare-This-Book\" class=\"headerlink\" title=\"Systems Used in Prepare This Book\"></a>Systems Used in Prepare This Book</h2><p>C语言的一些部分，比如储存数字时使用的空间，是取决于系统的。当我们举例子并且指的是我们的系统，“我们提的是一台在WinXP专业版下有奔腾处理器的电脑，并且使用Metrowork的CodeWarrior开发工作室9.2版本和微软的Visual C++ 7.1（这个版本Microsoft Visual Studio .NET 2003也开发完成）,或者gcc 3.3.3。在编写的时候，对C99的支持并不完全，而且没有编译器能够支持C99的全部特性。但是，在它们之间，这些编译器已经包含了许多的新标准下的东西了。大多数实例是在Mac G4上通过Metrowerks CodeWarrior Development Studio 9.2来测试的。</p>\n<p>这本书有的时候也参考在Unix系统中运行的结果，Unix系统是在Berkley’s BSD 4.3 version的Unix系统中，在VAX 11&#x2F;750电脑上运行的。而且，一些程序也是在Linux系统下使用gcc 3.3.1与Comeau 4.3.3在奔腾处理器的电脑上测试的。</p>\n<p>样本代码，对于在这本书中陈述的完整程序是可以在Sams网址 (<a href=\"http://www.samspublishing.com/\">www.samspublishing.com</a>) 中找到的，搜索这本书的ISBN号（不带连字号）就会显示这本书的昵称，点击昵称，进入网址，你就可以下载代码了。你还可以在这个网站上找到编程训练的解决方法。</p>\n<h2 id=\"你的系统-你需要的-Your-System\"><a href=\"#你的系统-你需要的-Your-System\" class=\"headerlink\" title=\"你的系统-你需要的 Your System\"></a>你的系统-你需要的 Your System</h2><p>你需要有一个C语言编译器，或者至少可以使用一个。C可以在很多中电脑中运行，所以你有很多的选择。一定要确保使用的编译器是专门为了你的系统而设计的。这本书中的一些实例需要C99标准支持，但是大多数实例在C90标准下的编译器都是可以运行的。如果你使用的是在ANSI&#x2F;ISO标准之前的，你就需要做出一些调整了，很可能得通常鼓励你去找寻些新的东西了。</p>\n<p>大多数编译器的供应商会为学生与教育者特价，如果你是那类人，那就看看供应商的网站。</p>\n<h2 id=\"特殊元素-Special-Element\"><a href=\"#特殊元素-Special-Element\" class=\"headerlink\" title=\"特殊元素 Special Element\"></a>特殊元素 Special Element</h2><p>这本书包含了几部分特殊元素，强调了特别的重点：补充、建议、警告、笔记。</p>\n<p><img src=\"/img/four_kinds.png\" alt=\"四种特殊信息类型\"></p>\n<ul>\n<li>Sidebar(补充)<br>  为阐明内容提供了更深刻的见解或者更多的背景信息</li>\n<li>Tip(建议)<br>  对于特定的编程情况提供了简短，使用的建议。</li>\n<li>Caution(警告)<br>  警告潜在的陷阱</li>\n<li>Note(笔记？)<br>  提供了综合的注释，不符合其他的特殊类型的信息。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>C语言是一种强大、简洁的编程语言。<br>因为提供了使用的编程工具、对于硬件设备的控制良好，<br>并且是最容易从一种设备传输到另一种设备的语言，<br>它受到很多人的欢迎。</p>\n<p>C语言是一种编译型的语言，<br>需要C语言编译器与连接器来把C语言源代码转化成可执行程序。</p>\n<p>C语言的编程可能是费力、困难甚至令人沮丧的，<br>但是它也可以是有趣的、令人振奋与满足的。<br>我们希望你能够像我们一样找到C语言的乐趣与魅力。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><p>你会在<strong>附录A-回顾问题答案</strong>中找到问题的答案。<br>(以下为我本人的想法)</p>\n<p>1.在编程中，<em><strong>传输性</strong></em>指的是什么?<br>    编程得到的文件在不同类型的操作系统中几乎不需要修改或者只需要修改一点就可以顺利地进行转移。<br>2.解释源码文件、目标代码文件与可执行文件。<br>    源码文件是我们通过编辑器输入的代码，目标代码文件是源码文件经过编译器处理之后生成的包含库文件函数声明与我们输入的代码的机器语言翻译的文件，一般是asm的汇编文件或者obj，不具有执行的能力。<br>    可执行文件是把库文件与目标代码文件结合起来之后翻译成的最终文件，它包含了程序运行需要的一切函数声明、变量、指令的翻译。<br>3.编程的七步走。<br>    首先在纸上想这个问题可以怎么解决，然后结合具体的语言来想实现方法，然后写代码，然后编译，然后运行，然后检查正误，进行修改与调试。<br>    ×<br>    第一步，明确程序目的，你想要程序做什么<br>    第二步，设计程序，包括目标人群，用户界面与交互方式，实现时间，数据处理方式<br>    第三步，使用C语言知识写代码<br>    第四步，编译<br>    第五步，运行程序<br>    第六步，通过输出过程量等方法来调试，输入多个值来测试。<br>    第七步，维护与修改程序。<br>4.编译器做了什么工作？<br>    把源码文件中你输入的代码转变为机器语言。<br>5.连接器做了什么工作。<br>    把你代码中缺少的库函数内容补充完整，并且针对系统添加起始代码。</p>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>我们现在还不期望你开始写C语言代码，所以这一次锻炼就集中于编程过程的早期阶段吧。</p>\n<p>1.你被MacroMusic公司录取了，这个公司正在进入欧洲市场，想要一个能够把英尺换算成厘米的程序（1 inch &#x3D; 2.54cm）公司想要让这个程序能够提示使用者去输入一个英尺值，你的任务就是找出这个程序的目的，并且设计这个程序。</p>\n<p>程序目的：我想要设计一个通过乘除法来把输入的数值变作2.54倍的程序，输入是英尺值，2.54倍是厘米值。</p>\n<p>程序设计：<br>首先输出一行：请输入英尺值<br>然后向用户获取输入值。<br>接着经过把值 * 2.54来获取厘米值<br>然后在屏幕上输出数值。</p>\n<p>交互方式就是输入输出，因为目标人群是欧洲人，所以需要英语，需要更多的UI设计等。</p>\n<blockquote>\n<p>END..</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"第一章-学习准备\"><a href=\"#第一章-学习准备\" class=\"headerlink\" title=\"第一章 学习准备\"></a>第一章 学习准备</h1><blockquote>\n<p><strong>你将会在这一章学到：</strong><br>    1. C的历史以及特点<br>    2. 写程序的步骤<br>    3. 关于代码连接器与编译器的一些知识<br>    4. C标准</p>\n</blockquote>\n<p>欢迎来到C语言的世界！C语言是一种充满活力的高级编程语言，它受到业余与商用编程者的喜爱。<br>这一章会为你学习与利用这种强大而又受欢迎的语言，而且会向你介绍几种你最有可能搭建C语言基础的环境。</p>\n<p>首先，我们看向C语言的来源和它的一些特点（优点以及缺点）。接着，我们会了解编程的起源，查看编程的总体规则。<br>最终，我们会讨论如何在常见的系统中运行C程序。</p>","more":"<h1 id=\"1-1-C语言的由来\"><a href=\"#1-1-C语言的由来\" class=\"headerlink\" title=\"1.1 C语言的由来\"></a>1.1 C语言的由来</h1><p>贝尔实验室的Dennis Richie在1972年创造了C语言，也就在那时，他和Ken Thompson正在致力于设计Unix系统。C语言的想法并不完全是在Richie的脑袋里冒出来的，而是来自Thompson的B语言，B语言来自哪里又是另一个故事了。重点是，C语言是作为工作中的编程人员的工具被创造出来的，所以它的首要目标就是成为一种有用易用的语言。</p>\n<p>很多编程语言都有着类似的目标，但是它们又经常会有其他的顾虑，举几个例子，Pascal语言的主要目标，就是为了教授编程规则提供良好的平台。BASIC语言，被设计得与英语很相像，从而可以方便地让不熟悉电脑的学生们学习。这些目标都是很重要的，但是并不与实际使用协调，也并不是普遍都很易用。相比之下，C语言是为了编程人员而生的，而且成功地成为了现代编程语言的一种选择。</p>\n<h1 id=\"1-2-为什么使用C语言？\"><a href=\"#1-2-为什么使用C语言？\" class=\"headerlink\" title=\"1.2 为什么使用C语言？\"></a>1.2 为什么使用C语言？</h1><p>在过去的30年来，C语言已经成为了最重要与最受欢迎的编程语言。它的成长，就是因为人们经过尝试之后，喜欢使用它。过去的10年里，许多人从C语言转到的更有规模的C++上，但C语言仍然是拥有权重的一种很重要的语言，C++也是从C语言迁移过来的。在学习C语言的过程中，你会意识到C语言的许多长处（见图1.1）让我们预先查看一下。<br><img src=\"/img/Chapter1.2.png\" alt=\"插图\"><br>（上图，左上为强大的控制结构，右上运行速度快，左下小型代码-小程序，右下是可以传输到不同的电脑）</p>\n<h2 id=\"1-2-1设计特点\"><a href=\"#1-2-1设计特点\" class=\"headerlink\" title=\"1.2.1设计特点\"></a>1.2.1设计特点</h2><p>C语言是一种拥有在理论界以及计算机科学实践中令人满意的控制特色的现代编程语言。它的设计让它很自然地能自上而下地规划程序、结构化编程以及模块化设计，从而设计出的程序也更可靠，更易懂。</p>\n<h2 id=\"1-2-2-效率\"><a href=\"#1-2-2-效率\" class=\"headerlink\" title=\"1.2.2 效率\"></a>1.2.2 效率</h2><p>C语言是一种高效的编程语言，它的设计很好地利用了现代电脑的性能。C语言编写的程序常常是小型的，并且运行速度很快。事实上，C表现了一些在汇编语言中好的控制方法，（汇编语言是对于特定的中央处理单元(Central Processing Unit,CPU)的内部指令设计的的助记语句，不同的CPU有着不同的汇编语言）。如果你选择C语言，你可以调节你的程序到达最快速度或者让程序对于内存的使用更有效。</p>\n<h2 id=\"1-2-3-可传递性\"><a href=\"#1-2-3-可传递性\" class=\"headerlink\" title=\"1.2.3 可传递性\"></a>1.2.3 可传递性</h2><p>C语言是一种可传递的编程语言，那意味着在一个系统上的C语言程序也可以在其他系统经过少量的改动或者不改动运行。即使改动是必须的，也只是改动头文件与main程序里的几个词条而已。大多数也打算着有可传递性，但是任何想要把个人电脑IBM里的BASIC程序放到苹果BASIC（它们是近亲）或者尝试把主机上的IBM里的FORTRAN程序在Unix系统中运行都知道传递烦人透顶。C语言是可传递性的领头者。C语言的编译器（把你的C语言代码转换为电脑内部指令的程序）对于40种系统都是可以使用的。从微型处理器到超算。但需要注意的是，一部分程序对于不同的硬件设备是不一样的，比如显示器监控，或者因为在运算系统上的特殊点，比如WinXP与OS X，它们通常是不具有传递性的。</p>\n<p>因为C语言与Unix操作系统关系紧密，Unix系统的安装包是自带C语言的编译器的，Linux安装时也通常带有C语言编译器，一些C语言编译器是可以在个人电脑上使用的，包括运行着各种版本的Windows系统的电脑，还有Mac。所以不论你是正在使用着家里的电脑，还是使用专业的工作站或者大型电脑，你都是有很大可能获得一个适用于你的系统的C语言编译器的。</p>\n<h2 id=\"1-2-4能力与灵活性\"><a href=\"#1-2-4能力与灵活性\" class=\"headerlink\" title=\"1.2.4能力与灵活性\"></a>1.2.4能力与灵活性</h2><p>C语言既强大又灵活（在计算机文献中最受喜欢的两个词）。<br>举个例子，许多功能强大与灵活的操作系统是用C语言写的。许多的其他编程语言（如FORTRAN、Perl、Python、Pascal、LISP、Logo与BASIC）的编译器与翻译器是用C语言写的。结果，当你在Unix机上使用FORTRAN语言，最后是用C语言程序生成的exe文件。C语言程序被用作解决物理、工程问题甚至在电影如《角斗士》中栩栩如生地重现特殊的现象。</p>\n<h2 id=\"1-2-5-以程序员为方向的\"><a href=\"#1-2-5-以程序员为方向的\" class=\"headerlink\" title=\"1.2.5 以程序员为方向的\"></a>1.2.5 以程序员为方向的</h2><p>C语言重视于满足程序员的需求，让我们轻松地触达硬件，而且让你独立地操纵内存中的每一个bit。它拥有非常多的运算符，能够让你简洁地表达自己。C语言比起，比如说Pascal语言就在限制着你可以做的事情。这种灵活性既是优势也很危险。优势在许多的任务，像是数据形式转换，在C语言中简单很多。危险就是用C语言，你有可能犯在其他语言中不可能犯的错误。C语言给予了你更大的自由，也让你承担了更多的责任。</p>\n<p>另外，大多数C语言的实施都有着大量有用的C语言库函数。这些函数能够应对很多编程人员通常的需求。</p>\n<h2 id=\"1-2-6-缺点\"><a href=\"#1-2-6-缺点\" class=\"headerlink\" title=\"1.2.6 缺点\"></a>1.2.6 缺点</h2><p>C确实有一些不足之处。通常，像人一样，不足与长处是同一个特点的两面。例如，我们提到了C语言的自由表达也需要更多的责任。C语言的指针（我们以后会学习到）使用特别地，意味着编程错误会更难跟踪到。曾经也提到了一台没有文字的电脑，解放的代价就是格外的警惕，</p>\n<p>有着大量的运算符，C的简明也让有可能让我们写出极其难以理解的代码。你可能并不是必须要写晦涩的代码，但是可能性总在那儿。毕竟，其他语言哪个有每年一次的混乱的编程比赛？</p>\n<p>还会有更多的长处，毫无疑问也会有更多的缺陷。与其在这个问题上挖的更深，还不如移到下一个话题。</p>\n<h1 id=\"1-3-C语言的用处\"><a href=\"#1-3-C语言的用处\" class=\"headerlink\" title=\"1.3 C语言的用处\"></a>1.3 C语言的用处</h1><p>到 1980 年代初，C 语言已经是 Unix 系统小型计算机世界的主导语言了。从那时起，它就已经被传播到个人计算机（微型计算机）和大型主机（大型计算机）了。（参见图 1.2）许多软件公司把C语言作为制作文字处理程序、电子表格、编译器和其他产品的首选语言。它们知道C语言编写的程序代码量小而且高效。更重要的是，他们知道这些程序将易于修改，并易于适应新型号的计算机。<br><img src=\"/img/Chapter1.3.png\" alt=\"图片\"><br>（以上，C语言被用作编程Unix操作系统，被用作电影如Star wars，在电脑游戏、电脑语言处理、嵌入式系统与机器人工程中都有显著的作用）</p>\n<p>C语言不仅对公司和老手有好处，对其他用户也有好处。越来越多的计算机用户已经开始使用 C 语言，它的优势也得到了确保。你不必是专业的计算机编程人员就可以使用C语言了。<br>在 1990 年代，许多软件公司开始转向 C++ 语言进行大型编程项目。C++ 将面向对象的编程工具嫁接到 C 语言中。（面向对象编程是一种思想体系，它试图使语言来适应问题，而不是让问题来适应语言。）C++ 几乎是 C 语言的超集，这意味着任何 C程序也是，或者它几乎也是一个有效的C++程序。通过学习 C语言，您还学习了许多 C++。<br>尽管 C++ 和 Java 等新型的编程语言很受欢迎，但 C语言在软件公司依然是核心技能，一直排在所需技能的前 10 名。特别的，C语言已成为在嵌入式系统编程中很受欢迎的一种语言，也就是说，它被用于编程越来越多的汽车、相机、DVD 播放器和其它现代便利设施中的常见的微型处理器。此外，C语言已经开始追赶在科技科学编程上具有长久的主导地位的FORTRAN语言。最后，作为为开发操作系统而生的语言，C语言在Linux系统的发展中发挥着重要作用。所以，在二十一世纪的第一个十年， C 语言的影响力仍然在变得更大。</p>\n<p>简而言之，C 是最重要的编程语言之一，并将继续如此。如果你想要一份编程软件的工作，这应该是你能够回答“是”的第一个问题中的一个，“嗯，比如说，你会C语言吗？“</p>\n<h1 id=\"1-4-计算机的作用\"><a href=\"#1-4-计算机的作用\" class=\"headerlink\" title=\"1.4 计算机的作用\"></a>1.4 计算机的作用</h1><p>既然你已经要开始学习如何运行C语言程序了，你很可能需要了解一下电脑是怎么工作的，这些知识能够帮助你了解C语言程序与最终运行程序后发生的事情之间的关联。</p>\n<p>现代的电脑有几个组成部分，<em><strong>中央处理器</strong></em>，又叫<em><strong>CPU</strong></em>，做了电脑运转时的大部分工作。<em><strong>随机存取器</strong></em>，又叫<em><strong>RAM</strong></em>，作为保存文件与程序的工作区。永久存储器，比如硬盘，存储程序和文件，即使电脑已经关机。各种外设，比如键盘、鼠标还有显示器，在你与电脑交互中搭建了桥梁。CPU运行程序，所以我们集中于它的作用。</p>\n<p>CPU的自始至终的工作，简单来说，其实是非常简单的。它从内存中依次抓取一条条的指令，然后执行它。（千兆赫CPU可以在一秒钟执行这个过程百亿次，所以CPU可以以一种惊人的速度运作），CPU也有自己的小工作区，有几个储存数的<em><strong>寄存器</strong></em>。每一个寄存器保存下一条指令的内存地址，然后CPU就使用这些信息来抓取下一条指令。接下来，CPU再把指令储存在另一个寄存器中，然后把上一个寄存器的命令更新到下一条。CPU能够理解的指令（也叫指令集）是有限的。而且这些指令都是各自分明的。很多指令都是要求电脑去把数字从一个地方移动到另一个地方。—例如，从内存到寄存器。</p>\n<p>在这个过程中有几点很有趣。第一，在电脑中任何东西都是以数字的形式储存的，数字是以数字的形式储存的。字符（例如你在文本编辑中的英文字母），也是由数字的形式储存的，每一个字符都有一个数字编码。计算机储存进寄存器的指令也是数字的形式，指令集中的每一条指令都对应着一个数字编码。第二，电脑程序最终会被以数字指令的形式表达，这又叫<em><strong>机器语言</strong></em>。</p>\n<p>计算机运行的一种结果就是，如果你想让计算机做些事，你需要提供一系列的指令或者是程序，来明确地告诉它要做什么和怎么做。你必须创建一个电脑能够直接理解（使用机器语言）的程序。这是个精细、单调、费劲的任务。一些像两个数相加的简单的任务可能会被分解成几步，可能会像下面几步。</p>\n<blockquote>\n<p>1.从内存区域2000把数字复制到寄存器1<br>2.从内存区域2004把数字复制到寄存器2<br>3.用数字二的数值加上数字一，在寄存器1留下答案。<br>4.把寄存器1中的数据复制到内存区域2008</p>\n</blockquote>\n<p>而且你还得把每一条指令用数字指令表述出来！</p>\n<p>如果你是喜欢以这种方式写程序的，你会很难过地了解到机器语言编程的黄金时期已经远远地过去了。但是如果你更喜欢那些更愉快的编程，那就对高级编程语言打开怀抱吧！</p>\n<h1 id=\"1-5-高级计算机语言与编译器\"><a href=\"#1-5-高级计算机语言与编译器\" class=\"headerlink\" title=\"1.5 高级计算机语言与编译器\"></a>1.5 高级计算机语言与编译器</h1><blockquote>\n<p>高级编程语言，比如C语言，以很多方式简化了你的编程。<br>    第一，你不需要用数字的形式来表达你的指令。<br>    第二，你使用的指令与你对于程序的思考而不是与电脑使用的精确的指令</p>\n</blockquote>\n<p>与其关心某一个CPU为了完成某一个任务进行的某一步。你可以以一种更复杂的形式来表达你想做的事情，例如，你也许会写下面的东西。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = mine + yours;</span><br></pre></td></tr></table></figure>\n\n<p>看到这样的代码，你能够很明白它是干啥的，<br>而看着机器语言以数字构成的替代指令，那就太不易读了。</p>\n<p>不幸的是，机器语言才是适合电脑的，对于电脑来说，高级语言完全无法理解。这就到了编译器上场的时候了，<em><strong>编译器</strong></em>是把高级语言程序详细地翻译成电脑需要的机器语言指令的程序。你以高级的方式思考，编译器做这些令人生厌的工作。</p>\n<p>编译器方法还有另一种好处。每台电脑都设计了各自的机器语言，所以比如说英特尔PentiumCPU的机器语言对于摩托罗拉PowerPC CPU可能没有任何意义，但是你可以根据特定的机器语言搭配编译器。所以，使用一系列的编译器或者合适的编译器，你就可以把同样的高级编程语言转化成一系列不同的机器语言程序。你只需要解决这个问题一次，然后让编译器把这个解法翻译成一系列机器语言程序。</p>\n<p>简短地说，高级的编程语言，比如C语言、Java还有Pascal，它们以一种更加抽象、与特定的CPU并不绑定的方式来表述程序行为。而且，对于机器语言来说，高级语言学习起来简单而且也更容易编程。</p>\n<h1 id=\"1-6-使用C语言的七步走\"><a href=\"#1-6-使用C语言的七步走\" class=\"headerlink\" title=\"1.6 使用C语言的七步走\"></a>1.6 使用C语言的七步走</h1><p>C语言，如你所见，是一种编译型的语言，如果你习惯于使用如Pascal或者FORTRAN的编译型语言，你应该已经对组成C语言程序的基本步骤很熟悉了。如果你的基础语言是如BASIC，或者面向接口的计算机图形语言（如Visual Basic）的翻译型语言，或者你还没有编程基础，你需要学习如何编译。我们一会就会研究那个过程，你会认识到这是很合理简单的。首先，为了让你宏观、大体上了解编程，让我们把编写C语言程序分解成7个步骤（见图1.3）。值得注意的是，这只是理想化的步骤，在编程实践中，你需要在步骤中来回切换，用后面一步了解到的来使之前的一步得到优化。<br><img src=\"/img/Chapter1.6.png\" alt=\"七步走\"></p>\n<h2 id=\"1-6-1-确定程序目的\"><a href=\"#1-6-1-确定程序目的\" class=\"headerlink\" title=\"1.6.1 确定程序目的\"></a>1.6.1 确定程序目的</h2><p>很自然的，你需要明确地知道你想让程序做什么，思考你的程序需要什么信息，需要在计算与控制上完成什么样子的事情，而且程序内的信息需要对你有所反馈，在这一步的规划中，你应当以大体出发，而不是根据特定的编程语言来思考。</p>\n<h2 id=\"1-6-2-设计程序\"><a href=\"#1-6-2-设计程序\" class=\"headerlink\" title=\"1.6.2 设计程序\"></a>1.6.2 设计程序</h2><p>在有了对于你的程序应该干啥的印象之后，你应该选择程序如何来运行它，用户的交互界面会是什么样子的？程序应该如何被组织起来？程序的目标人群是？你需要多长时间来做完这个程序？</p>\n<p>你还要决定在程序中呈现数据，而且很可能的，在辅助文件里也要。要决定用什么方式来处理数据。在刚开始学习C语言时，可能选择会很简单，但是随着你应对更多复杂的情况后，你就会知道这些选择是需要更多的思考的。选择一种好的方式来呈现数据经常会让设计程序与处理数据简单很多。</p>\n<p>再一次，你需要在大体层面上思考而不是在特定的代码上，但是有些选择可能是基于编程语言的大体特点的，举个例子，C语言编程人员就比，比如说，Pascal编程人员在数据呈现上拥有更多的选择。</p>\n<h2 id=\"1-6-3-编写代码\"><a href=\"#1-6-3-编写代码\" class=\"headerlink\" title=\"1.6.3 编写代码\"></a>1.6.3 编写代码</h2><p>既然你已经对于你的程序有个清晰的设计了，你就可以通过写代码的方式来实现它了。也就是说，你可以把你的程序设计翻译为C语言。这就是你需要用上C语言知识的地方了，你可以在纸上画出你的想法，但最后你还是要把你的代码输入电脑。这个过程主要取决于你的编程环境，我们一会会呈现更多的常见的编程环境。总体上，你会使用文本编辑器来创造一份源码文件，它包含了你程序设计的C语言翻译，例1.1给出了C语言源码的一个例子。</p>\n<p><img src=\"/img/listing1.1.png\" alt=\"图例1.1\"><br>在这一步，你应该记录你的工作，最简单的方式是使用C语言的注释功能，它包含着你对于源码的解释，我们会在第二章详细讲到如何注释你的代码。</p>\n<h2 id=\"1-6-4-编译\"><a href=\"#1-6-4-编译\" class=\"headerlink\" title=\"1.6.4 编译\"></a>1.6.4 编译</h2><p>下一步就是编译源码，再一次，细节上的问题是与你的编程环境相关的，我们马上会研究几种常见的环境了。现在，让我们以更概念化的方式看看发生了什么。</p>\n<p>我们已经知道编译器的工作就是把源码转化成可执行文件。<em><strong>可执行文件</strong></em>是以我们电脑的自然语言（或者说<em><strong>机器语言</strong></em>）写成的，这种语言是以精细的数字代码形式呈现的。而且你之前也了解到了，不同的电脑的机器语言是不一样的。C语言的编译器也包括着C语言库中的代码。C语言库包含着很多的基础的、日常使用的东西，比如<strong>Printf</strong>和<strong>scanf</strong>函数。（更精确地说，一个叫做连接器的程序把C语言库中的一组代码带到编译器，但是编译器在大多数系统都是可以运行连接器的），最终结果就是包含着电脑可理解的可执行文件的程序，你可以直接运行。</p>\n<p>编译器还会检查你的程序是不是使用了符合语法的C语言，如果编译器发现了错误，它就会汇报给你，而且不会生成可执行文件，理解编译器提示的错误信息也是你会很快习得的另一项技能。</p>\n<h2 id=\"1-6-5-运行程序\"><a href=\"#1-6-5-运行程序\" class=\"headerlink\" title=\"1.6.5 运行程序\"></a>1.6.5 运行程序</h2><p>通常的，可执行文件是你可以运行的程序，你可以在很多常见的环境中，包括MS-DOS、Unix、Linux控制台、只需要打字写下可执行文件的名称。其他的环境，比如VMX、VAX可能需要一些运行指令或者其他的机制方法。<em><strong>集成开发环境（IDE）</strong></em>，像很多在Windows系统或者Mac系统上的，使你能够在IDE内部通过菜单选项或者按几个按键来编辑与运行你的C语言程序。最终生成的文件也可以通过双击文件名或者图标的方式从你的操作系统直接运行。</p>\n<h2 id=\"1-6-6-测试与Debugging\"><a href=\"#1-6-6-测试与Debugging\" class=\"headerlink\" title=\"1.6.6 测试与Debugging\"></a>1.6.6 测试与Debugging</h2><p>你的程序能够运行是个好迹象，但是有可能你的程序并没有正确地运行。因此，你应该检查下是否它做到了它应该做的事情。你会发现有些程序是会有问题（在计算机领域内的行话叫bugs）的。调试是查找与修复程序错误的过程，学习的过程中犯错误是自然且正常的。看起来编程“天生”需要调试，所以当你把学习到的与编程实际结合起来的时候，你最好准备好在犯错的时候提醒自己。随着你成为一个更加强大与巧妙的编程人员，你也会不断地犯错，但你也因此不断地变得更加强大与巧妙。</p>\n<p>你会有很多机会犯错，基础的设计层面错误，实现过程出错，忽略了可能会搞砸你的程序的输入。你可能会不恰当地使用C语言，你可能会拼写错误，可能会把括号放错了位置等等等等。你会有自己的错误方式来丰富这一列的。</p>\n<p>幸运的是，这种情况并不是无望的，即使有时候你会这样认为啦。<br>编译器会捕捉到很多种类的错误，而且还会有工具来帮助你找到许多种编译器没有办法捕捉的错误。继续读下去，这本书也会给到你一些调试的建议。</p>\n<h2 id=\"1-6-7-维护与修改程序\"><a href=\"#1-6-7-维护与修改程序\" class=\"headerlink\" title=\"1.6.7 维护与修改程序\"></a>1.6.7 维护与修改程序</h2><p>当你为自己或者别人创造了一个程序，你可能会发现程序是可以有更多的用处的。如果是的，你可能会发现是有理由做出些修改的。可能有个小bug只有别人把名字以Z&#x2F;z开头的时候才会发生，或者你会想出一种能够解决问题的更好的方式，可以聪明地加入一些的新功能，你可能需要改写程序以便它能够在不同电脑系统中运行。如果你明确地注释了这些程序，所有这些任务都会被极度地简化。</p>\n<h2 id=\"1-6-8-注释\"><a href=\"#1-6-8-注释\" class=\"headerlink\" title=\"1.6.8 注释\"></a>1.6.8 注释</h2><p>编程的过程并不总是像这个过程描述的那样线性。有的时候你需要在步骤中前后切换。例如，当你在写代码的时候，你有可能发现你的计划并不实际。你有可能发现了一种更好的方式来做事，或者在看到程序是怎么运行的之后，你会想要改变你的设计，记录你的工作能够帮助你在不同的等级之间前后切换。</p>\n<p>许多学习者通常会忽略掉第一步与第二步（确定程序目的与设计程序）直接进入第三部（写程序），你写的第一个程序或许可以直接在脑中看到完全的流程，如果犯错也很好定位错误。但是随着你编写的程序越来越复杂，越来越冗长，心智的视觉化就开始失效了，而且错误也会更难以发现。最终，那些忽略了规划步骤的人就陷入数小时的时间浪费、困惑还有沮丧，因为他们写出的丑陋的，无法实现功能而又深奥的程序。这项工作越是复杂，需要的规划工作就越多。</p>\n<p>道理就是你需要养成在写代码之前做规划的习惯，使用这种古老但是可敬的笔尖技术来记下你程序的目的，给程序设计做出大纲。如果你这样做的话，你最终会收获节省时间与满足感的巨大红利。</p>\n<h2 id=\"1-6-9-编程技术\"><a href=\"#1-6-9-编程技术\" class=\"headerlink\" title=\"1.6.9 编程技术\"></a>1.6.9 编程技术</h2><p>你生成程序的明确步骤是取决于你的电脑系统的，因为C语言是可传输的，它是可以适用于很多的系统环境的，包括Unix，Linux，MS-DOS（是的，很多人仍然在用），Windows与Mac OS，其实还有很多只不过没有足够的空间留给它们了，这尤其是因为各自的产品不是演化、消亡，就者被取代。</p>\n<p>首先，即使如此，让我们先来研究许多C语言运行环境的共有特点，包括我们刚才已经提到的五种系统，你不需要明确地知道是什么引导了C语言程序的运行，但这是良好的基础，它也能够帮助你更好地理解为什么你需要经历一些特定的步骤来得到一个C语言程序。</p>\n<p>当你在写C语言程序的时候，你会在源码文件中储存你在文本文件中写下的东西。大多数由C语言编程的系统，也包括我们提到的那一些，需要以<code>.c</code>结尾的文件（举个例子，<code>wordcount.c</code>与<code>budget.c</code>）在<code>.c</code>之前的那部分名字叫做<em><strong>基准名（Basename）</strong></em><br>在这一段后面的名称叫做<em><strong>拓展名（Extension）</strong></em>，因此，<code>budget</code>是基准名，<code>.c</code>是拓展名。它们的混合就是文件名。文件名也必须要复合特定的电脑操作系统的需要。例如，IBM-PC与[克隆机？]上的MS-DOS系统，它就要求你的文件名不能多于8个字符长。所以，<code>wordcount.c</code>在DOS系统中就不是合法的文件名。一些Unix系统在整个文件名上有14个字符的限制，包括拓展名，其他Unix系统也允许更长的名称，不多于255个字符即可。Linux、Windows与MacOS也允许更长的文件名。</p>\n<p>让我们假设我们拥有一份名字叫<code>Concrete.c</code>的源文件储存着例1.2的C语言源码。<br><img src=\"/img/listing1.2.png\" alt=\"Concrete.c\"><br>不需要担心在源码文件中的一些细节，在第二章你会学到的。</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h2 id=\"1-7-1-目标代码文件、可执行文件和库\"><a href=\"#1-7-1-目标代码文件、可执行文件和库\" class=\"headerlink\" title=\"1.7.1 目标代码文件、可执行文件和库\"></a>1.7.1 目标代码文件、可执行文件和库</h2><p>C语言编程的一个基本本领就是把你的源代码文件转化成保存着即时就可运行的可执行文件。要实现这个过程需要两个步骤：编译与连接。编译器可以把源代码转换成中间代码，然后连接器再把中间代码与其他代码组合，由此创造出可执行文件。C语言利用这两部分结合的方法让程序易于模块化生成。你可以把每一个模块分开来编译，再用连接器把每一个编译过的模块结合起来。以那种方式，如果你想改变其中的一个模块，你就不需要再重新编译其他的模块，而且连接器也会把你的程序与预先编译好的库代码结合起来。</p>\n<p>要生成中间文件的方法还有几种，最流行的而且能够实施的在这里已经提到了，就是把源代码文件转化成机器语言代码，把结果放在目标代码文件中或者简短地说，目标文件。（假设你的源码是由单一文件组成的），虽然目标文件包括了机器语言代码，它还没准备好运行。目标文件包含了对于源代码的翻译版本，但是它还不完整。</p>\n<p>缺失的第一个部分就是起始代码，它作为你的程序与操作系统的接口。举个例子，你可以在在DOS或者Linux之下协调地运行BM PC，它们的硬件都是类似的，所以同样的目标文件对于两种系统都是可以起作用的，但是你需要在DOS与Linux不同的起始代码，因为不同的系统是以不同的方式处理程序的。</p>\n<p>第二个缺失的部分就是常用库的代码。几乎所有的C语言程序都需要利用C语言的库函数。比如<code>Concrete.c</code>使用的<code>printf()</code>。目标代码文件并不包括这个函数的代码。它只包含了<code>printf</code>函数的声明指令，实际的代码是在另一个文件中储存的，它叫<em><strong>库文件</strong></em>。库文件包含了很多函数的代码。</p>\n<p>连接器的作用就是把这三个部分连接在一起-你的目标代码、起始代码和库代码，然后把三者整合为一个文件，即可执行文件。对于库代码，连接器只提取需要使用的函数在C语言库中对应的代码。<br>（见图1.4）<br><img src=\"/img/listing1.4.png\" alt=\"图1.4\"><br>（可见，上图中，由源代码经过编译器生成目标代码文件，再由目标代码文件与起始代码、库代码通过连接器转化为可执行文件<code>concrete.exe</code>）.</p>\n<p>简短来说，一份目标文件与可执行文件都由机器语言指令组成。然而，可执行文件只把你使用的代码翻译为机器语言，但可执行文件还由常用库与起始代码的机器语言翻译组成。</p>\n<p>在一些系统中，你必须把编译与连接的过程分开。另外的一些系统中，编译器会自动启动连接器，所以你只需要编译即可。</p>\n<p>现在我们就针对于特定的系统来研究一下。</p>\n<h2 id=\"1-7-2-Unix系统\"><a href=\"#1-7-2-Unix系统\" class=\"headerlink\" title=\"1.7.2 Unix系统\"></a>1.7.2 Unix系统</h2><p>因为C的流行始于Unix系统，我们就从它开始。</p>\n<h3 id=\"在Unix系统中进行编辑\"><a href=\"#在Unix系统中进行编辑\" class=\"headerlink\" title=\"在Unix系统中进行编辑\"></a>在Unix系统中进行编辑</h3><p>Unix系统并没有独立的C语言编译器。你反而需要一些多功能的Unix编辑器，例如emacs、jove、vi或者一个X Window系统文本编辑器。</p>\n<p>你的最主要的两个目的就是正确地书写程序，并且为储存程序的文件起个名字。正像已经提到的，文件的名称必须以<code>.c</code>。注意到Unix系统会以大小写来区分文件，所以<code>BUDGET.c</code>、<code>budget.c</code>还有<code>Budget.c</code>是三个各自不同的C源文件名称，但是<code>BUDGET.C</code>是不合法的，因为它的扩展名使用了大写。</p>\n<p>使用vi编辑器，我们把下面的程序保存在名叫<code>inform.c</code>的文件中。<br><img src=\"/img/informc.png\" alt=\"inform.c\"><br>这些文本就是源代码，而<code>inform.c</code>是源文件，重点就在源文件只是一个过程的起点，而不是结尾。</p>\n<h3 id=\"在Unix系统中进行编译\"><a href=\"#在Unix系统中进行编译\" class=\"headerlink\" title=\"在Unix系统中进行编译\"></a>在Unix系统中进行编译</h3><p>我们的程序，虽然已经不可否认地很精致了，对于电脑仍然是一派胡言，电脑是不理解什么是<code>#include</code>和<code>printf</code>的（现在你可能也不理解，但是我们很快就会学习，然而电脑并不会），正像我们之前讨论过的。我们需要编译器的帮助来把我们的代码（源代码）翻译为电脑的代码（机器语言）。这些工作的结果就是可执行文件，它会包含所有可以让电脑完成工作的代码。</p>\n<p>UnixC编译器叫<code>cc</code>，为了编译<code>inform.c</code>程序，你需要把下面的指令打下来。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc inform.c</span><br></pre></td></tr></table></figure>\n\n<p>几秒之后，Unix系统的命令提示符就会给出反馈，告诉你这件事已经做完了，如果你没有正确地编写代码的话可能会得到警告或者错误信息，但我们先假设一切都是正确的。（如果你的编译器对于<code>void</code>这个词进行报错，那是你的编译器还没有更新到 <strong>ANSI C</strong> 的编译器，我们会在不久提到更多的标准，即使这样，你从例子中删掉void就好）。如果你使用<code>ls</code>指令来把你的文件列出来的话，你会发现产生了一个新文件叫<code>a.out</code>（见图1.5）这就是包含了程序中翻译后指令（或编译后指令）的可执行文件。想要运行的话直接打下<code>a.out</code>即可。</p>\n<p>然后，文件中的指令执行，智言倾泻而出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A .c is used to end a C program filename.</span><br></pre></td></tr></table></figure>\n<p>如果你想要吧可执行文件保存下来，你需要重新命名它，<br>否则，这个文件在你下一次编译时就会被新的同名文件代替。<br><img src=\"/img/process.png\" alt=\"The process\"><br>（从源码到程序的过程）</p>\n<h2 id=\"Linux-系统\"><a href=\"#Linux-系统\" class=\"headerlink\" title=\"Linux 系统\"></a>Linux 系统</h2><p>Linux也是个很受欢迎的开源的，与Unix类似的多平台操作系统，它包括IBM与Mac的兼容。在Linux上设计程序与Unix系统的过程大部分是相似的，除了你需要使用公用C语言编译器，它叫gcc，是由GNU提供的，在那里面，编译的指令是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc inform.c</span><br></pre></td></tr></table></figure>\n<p>注意到在Linux安装的时候安装gcc的时候可能是可选的，所以你（或者其他人）有可能如果之前没装的话必须得自己安装gcc。通常这会让cc成为gcc的一个别名，所以你喜欢的话可以用cc来代替gcc。</p>\n<p>你可以在下面的网站中获取关于gcc获取更多的信息，包括最新的版本。<br><a href=\"http://www.gnu.org/software/gcc/gcc.html\">http://www.gnu.org/software/gcc/gcc.html</a>.</p>\n<h2 id=\"集成开发环境（Windows）\"><a href=\"#集成开发环境（Windows）\" class=\"headerlink\" title=\"集成开发环境（Windows）\"></a>集成开发环境（Windows）</h2><p>C编译器并不是Windows安装包中的一部分，所以你也有可能需要安装一个C语言编译器。很多供应商，比如Microsoft, Borland, Metrowerks, 还有Digital Mars, 提供了以Windows系统为基础的集成开发环境（<em><strong>IDE</strong></em>）（近来，很多已经把C语言与C++编译器结合在一起了。）它们都有快速且集成的环境，可以方便地生成C语言程序。值得注意的是，每一个程序都有一个嵌入式的编辑器，你可以用它来编写C语言程序。都有可以让你命名、保存、编译、运行的菜单。每一次编译运行如果编译器发现错误了你都可以回到编辑器，而且出错的代码行都会被突出显示出来，并搭配上适当的错误信息。</p>\n<p>Windows IDE通常是可以一同处理C与C++的，你需要声明你需要一个C++程序。使用一些产品，比如Metroworks或者CodeWarrior里你需要用项目类型来区分你使用的语言。其他的产品比如Visual C++你是使用<code>.c</code>的扩展名来表示你想要使用C语言而不是C++。然而，大多数C语言程序也作为C++程序运作，可以参考“Differences Between C and C++”，那里对C与C++进行了比较。</p>\n<p>你有可能遇到的一个问题是当程序停止的时候程序运行的窗口也随之关闭，如果你也遇到这种情况，你可以让程序直到你输入一个字符再结束。只要在代码结尾，return语句前加上一行代码即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getchar();</span><br></pre></td></tr></table></figure>\n<p>这一行代码读取一个键盘输入，所以直到你输入下一个字符之前程序都是暂停着的。一些时候，受到程序运行方式的影响，可能在最后已经有一个键入数据等待了，这种情况下你就得输入两次。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getchar();</span><br><span class=\"line\">getchar();</span><br></pre></td></tr></table></figure>\n\n<p>例如，如果程序做的最后一件事是要求你输入你的体重，你已经输入完体重了然后输入enter来输入数据，程序会读取你的体重，第一个<code>getchar</code>会读取回车符，第二个<code>getchar</code>直到你再打一个字符才会有，如果你现在还不太能够理解，你学习完C语言输入就会明白了。</p>\n<p>即使多种多样的IDEs普遍有着比较类似的标准，但是细节方面还是各自不同的，不仅在一行程序内，还在编译器的不同版本。你需要做些实验，来获知你的编译器是怎么工作的，你还有可能需要阅读使用手册或者尝试网上教程。</p>\n<h2 id=\"IBMPC上的DOS编译器\"><a href=\"#IBMPC上的DOS编译器\" class=\"headerlink\" title=\"IBMPC上的DOS编译器\"></a>IBMPC上的DOS编译器</h2><p>对于很多人来说，在个人电脑上运行DOS是很过时的事情，但是它对于那些电脑资源与预算受限、喜欢更简单的，没有[响铃、哨音]与令人分心的事物的操作系统。很多Windows IDEs额外提供了命令行工具，这就然你能够在DOS命令行环境下编程。Comeau的C&#x2F;C++编译器在很多系统中是适用的，包括几种Unix、Linux的变体，它就拥有一个命令行DOS的版本。并且，它还有免费与共享的DOS系统编译器，例如，GNU gcc编译器就有一个以DOS为基础的版本。</p>\n<p>源码文件应该以文本文件形式存在，而它们并不是文字处理文件。（文字处理文件包括了很多额外信息，比如字体和格式）你应该使用一个文本编辑器如Windows Notepad或者与一些版本的DOS一同发布的EDIT程序。文件的扩展名需要是<code>.c</code>，一些处理器会自动在文本文件后面加上<code>.txt</code>的扩展名。如果你遇到了这种情况，你需要改变文件名，把<code>.txt</code>改为<code>.c</code>。</p>\n<p>电脑上的C语言编译器通常，但并不总是，生成带有<code>.obj</code>后缀的中间目标代码，不像Unix编译器，C语言编译器通常不会在编译完成之后删除这些文件。有些编译器也会生成带有<code>.asm</code>扩展名的汇编语言文件，或者使用它们自己的特殊形式。</p>\n<h2 id=\"Mac上的C语言\"><a href=\"#Mac上的C语言\" class=\"headerlink\" title=\"Mac上的C语言\"></a>Mac上的C语言</h2><p>最广受闻名的Mac C&#x2F;C++编译器就是Metrowerks CodeWarrior 编译器（Windows与Mac版本的CodeWarrior有相似的界面），它提供了与Windows编译器相似的以项目为基础的IDE。从文件菜单选择新文件开始，一系列的项目类型选择将会陈列在你眼前。在最新的CodeWarrior版本中，使用Std C控制台即可（不同的发布版本需要经过不同的步骤才到达选择这一步），你还有可能在68KB版本（适于摩托罗拉 680 * 0 系列的处理器），PPC版本（适于PowerPC处理器）或者Carbon版本（适于OS X系统）</p>\n<p>新的项目在最初项目中会有一个很小的源码文件，你可以尝试编译或者运行它来获知你的系统是否设置好了。</p>\n<h1 id=\"1-8-语言标准\"><a href=\"#1-8-语言标准\" class=\"headerlink\" title=\"1.8 语言标准\"></a>1.8 语言标准</h1><p>现在，很多C语言实例都是可行的，理想化情况下，当你在写C语言程序时，在任何的实例中都是一样运作的（假设你没有使用特殊机器来编程），为了这件事情能够实现，不同的实例需要有一个确定的、可识别的标准。</p>\n<p>最初，C语言官方并没有语言标准，但是，由Brian Kernighan和Dennis Ritchie（1978）编纂的最初一版的<em><strong>C Programming Language</strong></em>确立了被接受的标准，它通常被称作为<em><strong>K&amp;R C</strong></em>或者<em><strong>classic C</strong></em>。特别的是，那本书附录中的“C Reference Manual”作为了C语言实例的指导。但是，比如编译器，就会要求一个完整的K&amp;R实例，因为即使附录中定义了C语言，它还没有定义C语言库。C比其他的大多数语言都要更加依赖于C语言库，所以库标准还需要确立。没有任何的官方标准的情况下，Unix实例中提供的库就成为了实际的标准。</p>\n<h2 id=\"第一个ANSI-ISO-C语言标准\"><a href=\"#第一个ANSI-ISO-C语言标准\" class=\"headerlink\" title=\"第一个ANSI&#x2F;ISO C语言标准\"></a>第一个ANSI&#x2F;ISO C语言标准</h2><p>随着C语言的进步与在不同系统中的广泛使用，C语言社区意识到它需要一个更加综合、与时俱进并且严格的标准。为了满足这种需求，美国国家标准研究院在1983年成立了X3J11委员会，开发了一种新的标准，它在1989年被正式使用，这种新型标准（ANSI C）不仅定义了语言而且还定义了基础的C语言库，国际标准化组织采用了在1990年一种C语言标准（ISO C）。ISO C与ANSI C本质上是一样的标准。ANSI&#x2F;ISO标准的最后一种版本通常被称作<em><strong>C89</strong></em>（因为那是ANSI同意的时候）或者<em><strong>C90</strong></em>（那是ISO同意的时候），而且因为ANSI版本是先推出的，人们更经常用的是ANSI C。</p>\n<p>这个协会有几项指导准则，可能最有趣的就是这一项：保持C语言的精神<br>委员会在阐述这种精神的时候列出了以下的几点。</p>\n<ul>\n<li>相信编程人员。</li>\n<li>不要阻止编程人员做需要做的事情。</li>\n<li>保证简单、小型地使用这种语言。</li>\n<li>一项操作只提供一种方式。</li>\n<li>即使传输性会下降，也要尽力让C语言程序运行变快。</li>\n</ul>\n<p>在最后一点中，委员会的意思是实例必须界定一种对于目标电脑的运转最好的操作，而不是试着强加抽象的、统一的定义。在学习语言的同时，你也会体会到这种哲学的。</p>\n<h2 id=\"C99标准\"><a href=\"#C99标准\" class=\"headerlink\" title=\"C99标准\"></a>C99标准</h2><p>在1994年，他们开始重新审视这个标准，这也导致了C99标准的产生，一个ASIO&#x2F;ISO联合委员会，也被称作<em><strong>C9X</strong></em>委员会批准了C90标准的准则，包括保持语言的小型与简洁，委员会的目的并不是向语言中添加新的特性，而是按需去达到新的目标。其中一个主要目标就是，通过比如提供解决国际字符集的方法，来支持国际编程。另一个目标就是“把现存的实践编程化来解决明显的缺陷”。因此，当在达成把C语言移植到64位的处理器上的需要时，委员会 以在真实生活中应对过这种问题的人的经验为基础来添加标准。第三个目标就是改善C语言执行科学与工程项目时做关键数字运算时的合适度。</p>\n<p>这三点-国际化，纠正缺陷与对于计算可用度的改善是最主要的以改变为方向的目标，其他的改变计划自然更加保守，例如，把与C90与C++的不协调降到最低，并且让这个语言概念上是简洁的。用委员会人员的话来说，“委员会在让C++变得更加重要，更加有发展动力。</p>\n<p>C99改变的结果，就是它保持了C语言的必要的基本特征，C语言仍然是一个小型的，简洁并高效的语言，这本书指出了很多C99的变化，因为现在的大多数编译器还没有完全实现所有的C99的改变，你可能会发现有些在你的系统上不能实施，或者你会发现一些C99特征只有你改变了一些编译器的设置才可以实现。</p>\n<p>#注意<br>这本书将会使用ISO&#x2F;ANSI C这些词来表示这些特征来表示均为两种标准均适用的特征，使用C99来指明新的特征。偶然的，当一种特性是第一次加入C语言时，它也指C90标准。 </p>\n<h1 id=\"1-9-本书的组织架构\"><a href=\"#1-9-本书的组织架构\" class=\"headerlink\" title=\"1.9 本书的组织架构\"></a>1.9 本书的组织架构</h1><p>组织信息的方式有很多。其中一种最直接的方式就是把每一个话题的所有相关信息全部列出来，这对于参考书是极其实用的，因为你就可以在一个地方找到所有关于给定主题的信息。但是它对于学习项目并不是最好的顺序。例如，如果你从开始学习名词开始学习英语，你的表达能力就会被严重地限制。当然，学习好了名词你随便找到某个东西就能说出它的名字，但是如果你能够学一些名词、动词、形容词等等，还有一些关于这些部分如何相互连接的规则，你就会有更大的能力来表达自己。</p>\n<p>为了让你能够更均衡地消化信息，这本书使用了一种螺旋上升的方式，在初期的时候先提到这个主题，然后在后文给予更充分的讨论。例如，对于理解C语言，理解函数是极其关键的，因此，在前面的几章就会包括对于函数的一些讲述，以便于你能够在第九章全面讲述函数的时候，已经能够使用函数获得到一些轻松了。相似的早期的篇章也会预先讲述字符串和循环，那样你就可以在还没有细致地地了解它们之前，在你的程序中先使用那些有用的工具。</p>\n<h1 id=\"1-10-例子的使用\"><a href=\"#1-10-例子的使用\" class=\"headerlink\" title=\"1.10 例子的使用\"></a>1.10 例子的使用</h1><p>我们已经差不多要开始学习C语言了，这一单元已经包括了我们在陈述材料的时候的一些例子了。</p>\n<h2 id=\"字体-Typeface\"><a href=\"#字体-Typeface\" class=\"headerlink\" title=\"字体 Typeface\"></a>字体 Typeface</h2><p>对于呈现文字的程序与电脑的输入输出，我们使用你很可能在屏幕上或者在输出的时候看到的相似的字体。我们已经使用过几次了。为了防止你没有注意到，字体看起来是下面这样的</p>\n<p><img src=\"/img/typeface.png\" alt=\"字体示例\"></p>\n<p>相同的等宽字体也被用作是与编程相关的词汇，比如<code>main()</code>，也用作文件名，比如<code>stdio.h</code>，对于用来替换特殊词汇的占位字符，我们是用斜体的等宽字符来写的，比如下面的描述。<br><em>type_name variable_name;</em><br>例如，你有可能用<em>type_name</em>来替换<code>int</code>，用<em>variable_name</em>来替换<em>zebra_count</em></p>\n<h2 id=\"程序输出-Program-Output\"><a href=\"#程序输出-Program-Output\" class=\"headerlink\" title=\"程序输出 Program Output\"></a>程序输出 Program Output</h2><p>电脑中的输出是以与我们书中相同的形式被印出来的，但输入是以粗体字被显示出来的。例如，下面就是在14章“结构体与其他数据类型”中的输出。</p>\n<p><img src=\"/img/output.png\" alt=\"输出示例\"></p>\n<p>以正常电脑字体打印出来的是程序的输出，黑体字是用户的输入。<br>你与你的电脑交互的方式有很多，我们假设你是用键盘在键入指令的，在屏幕上阅读反馈。</p>\n<h2 id=\"特别的按键-Special-Keystrokes\"><a href=\"#特别的按键-Special-Keystrokes\" class=\"headerlink\" title=\"特别的按键 Special Keystrokes\"></a>特别的按键 Special Keystrokes</h2><p>通常，你会通过一个标签为Enter的按键，c&#x2F;r，返回或者其他的方式输入一行指令，我们在文中称这些按键为<em><strong>Enter key</strong></em>，自然也就会默认你会在每一行输入之后按下Enter键。然而，为了阐明特定的观点，一些例子可能会明示出Enter键，以[enter]的形式来呈现它，这个括号就表示你需要按下一个按键而不是打字<strong>enter</strong>。</p>\n<p>控制字符中的特殊按键，比如CTRL+D，这种标记指在你按下Ctrl标志的按键（或者可能是Control）时按下D键。</p>\n<h2 id=\"准备学习这本书使用的系统\"><a href=\"#准备学习这本书使用的系统\" class=\"headerlink\" title=\"准备学习这本书使用的系统\"></a>准备学习这本书使用的系统</h2><h2 id=\"Systems-Used-in-Prepare-This-Book\"><a href=\"#Systems-Used-in-Prepare-This-Book\" class=\"headerlink\" title=\"Systems Used in Prepare This Book\"></a>Systems Used in Prepare This Book</h2><p>C语言的一些部分，比如储存数字时使用的空间，是取决于系统的。当我们举例子并且指的是我们的系统，“我们提的是一台在WinXP专业版下有奔腾处理器的电脑，并且使用Metrowork的CodeWarrior开发工作室9.2版本和微软的Visual C++ 7.1（这个版本Microsoft Visual Studio .NET 2003也开发完成）,或者gcc 3.3.3。在编写的时候，对C99的支持并不完全，而且没有编译器能够支持C99的全部特性。但是，在它们之间，这些编译器已经包含了许多的新标准下的东西了。大多数实例是在Mac G4上通过Metrowerks CodeWarrior Development Studio 9.2来测试的。</p>\n<p>这本书有的时候也参考在Unix系统中运行的结果，Unix系统是在Berkley’s BSD 4.3 version的Unix系统中，在VAX 11&#x2F;750电脑上运行的。而且，一些程序也是在Linux系统下使用gcc 3.3.1与Comeau 4.3.3在奔腾处理器的电脑上测试的。</p>\n<p>样本代码，对于在这本书中陈述的完整程序是可以在Sams网址 (<a href=\"http://www.samspublishing.com/\">www.samspublishing.com</a>) 中找到的，搜索这本书的ISBN号（不带连字号）就会显示这本书的昵称，点击昵称，进入网址，你就可以下载代码了。你还可以在这个网站上找到编程训练的解决方法。</p>\n<h2 id=\"你的系统-你需要的-Your-System\"><a href=\"#你的系统-你需要的-Your-System\" class=\"headerlink\" title=\"你的系统-你需要的 Your System\"></a>你的系统-你需要的 Your System</h2><p>你需要有一个C语言编译器，或者至少可以使用一个。C可以在很多中电脑中运行，所以你有很多的选择。一定要确保使用的编译器是专门为了你的系统而设计的。这本书中的一些实例需要C99标准支持，但是大多数实例在C90标准下的编译器都是可以运行的。如果你使用的是在ANSI&#x2F;ISO标准之前的，你就需要做出一些调整了，很可能得通常鼓励你去找寻些新的东西了。</p>\n<p>大多数编译器的供应商会为学生与教育者特价，如果你是那类人，那就看看供应商的网站。</p>\n<h2 id=\"特殊元素-Special-Element\"><a href=\"#特殊元素-Special-Element\" class=\"headerlink\" title=\"特殊元素 Special Element\"></a>特殊元素 Special Element</h2><p>这本书包含了几部分特殊元素，强调了特别的重点：补充、建议、警告、笔记。</p>\n<p><img src=\"/img/four_kinds.png\" alt=\"四种特殊信息类型\"></p>\n<ul>\n<li>Sidebar(补充)<br>  为阐明内容提供了更深刻的见解或者更多的背景信息</li>\n<li>Tip(建议)<br>  对于特定的编程情况提供了简短，使用的建议。</li>\n<li>Caution(警告)<br>  警告潜在的陷阱</li>\n<li>Note(笔记？)<br>  提供了综合的注释，不符合其他的特殊类型的信息。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>C语言是一种强大、简洁的编程语言。<br>因为提供了使用的编程工具、对于硬件设备的控制良好，<br>并且是最容易从一种设备传输到另一种设备的语言，<br>它受到很多人的欢迎。</p>\n<p>C语言是一种编译型的语言，<br>需要C语言编译器与连接器来把C语言源代码转化成可执行程序。</p>\n<p>C语言的编程可能是费力、困难甚至令人沮丧的，<br>但是它也可以是有趣的、令人振奋与满足的。<br>我们希望你能够像我们一样找到C语言的乐趣与魅力。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><p>你会在<strong>附录A-回顾问题答案</strong>中找到问题的答案。<br>(以下为我本人的想法)</p>\n<p>1.在编程中，<em><strong>传输性</strong></em>指的是什么?<br>    编程得到的文件在不同类型的操作系统中几乎不需要修改或者只需要修改一点就可以顺利地进行转移。<br>2.解释源码文件、目标代码文件与可执行文件。<br>    源码文件是我们通过编辑器输入的代码，目标代码文件是源码文件经过编译器处理之后生成的包含库文件函数声明与我们输入的代码的机器语言翻译的文件，一般是asm的汇编文件或者obj，不具有执行的能力。<br>    可执行文件是把库文件与目标代码文件结合起来之后翻译成的最终文件，它包含了程序运行需要的一切函数声明、变量、指令的翻译。<br>3.编程的七步走。<br>    首先在纸上想这个问题可以怎么解决，然后结合具体的语言来想实现方法，然后写代码，然后编译，然后运行，然后检查正误，进行修改与调试。<br>    ×<br>    第一步，明确程序目的，你想要程序做什么<br>    第二步，设计程序，包括目标人群，用户界面与交互方式，实现时间，数据处理方式<br>    第三步，使用C语言知识写代码<br>    第四步，编译<br>    第五步，运行程序<br>    第六步，通过输出过程量等方法来调试，输入多个值来测试。<br>    第七步，维护与修改程序。<br>4.编译器做了什么工作？<br>    把源码文件中你输入的代码转变为机器语言。<br>5.连接器做了什么工作。<br>    把你代码中缺少的库函数内容补充完整，并且针对系统添加起始代码。</p>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>我们现在还不期望你开始写C语言代码，所以这一次锻炼就集中于编程过程的早期阶段吧。</p>\n<p>1.你被MacroMusic公司录取了，这个公司正在进入欧洲市场，想要一个能够把英尺换算成厘米的程序（1 inch &#x3D; 2.54cm）公司想要让这个程序能够提示使用者去输入一个英尺值，你的任务就是找出这个程序的目的，并且设计这个程序。</p>\n<p>程序目的：我想要设计一个通过乘除法来把输入的数值变作2.54倍的程序，输入是英尺值，2.54倍是厘米值。</p>\n<p>程序设计：<br>首先输出一行：请输入英尺值<br>然后向用户获取输入值。<br>接着经过把值 * 2.54来获取厘米值<br>然后在屏幕上输出数值。</p>\n<p>交互方式就是输入输出，因为目标人群是欧洲人，所以需要英语，需要更多的UI设计等。</p>\n<blockquote>\n<p>END..</p>\n</blockquote>"},{"title":"C premier plus Chapter 2","date":"2023-11-28T04:36:23.000Z","_content":"\n# 第二章 C语言介绍\n\n> **你将会在这一章学到**\n> \t1.赋值运算符\n> \t2.函数main()与printf()\n> \t3.一个简单C语言程序的构成\n> \t4.创造整型变量，赋值并在屏幕上显示它们的值\n> \t5.换行符`'\\n'`\n> \t6.如何在程序中添加注释，让你的程序中同时拥有多个函数\n> \t\t并能找出程序中的错误。\n> \t7.关键字是什么\n\nC语言的程序是什么样子的？如果你大体浏览过这本书，你会看到很多的例子的。几乎一致的是，你会觉得C语言程序看起来很怪异，有些需要用到类似`{，cp->tort,*ptr`这样的符号。随着你通读完这本书，你就会慢慢觉得这些符号不是那么陌生了，会变得更加熟悉，甚至有可能会很高兴遇见它们。在这一章中，我们从给出并解释一个简单的实例起步。同时，我们也会强调一些C语言的基本特征。\n<!--more-->\n\n# 2.1 一个简单的例子\n\n让我们先研究一个简单的C语言程序。在图2.1展示的这个程序，专门为了突出一些C语言编程的特征。在你将要读接下来对于程序的逐行解释之前，先看看图2.1，试试你是不是能够靠自己搞明白它会做什么事情。\n![小例子](/img/example.png)\n>1.#include <stdio.h> 包含头文件\n>2.int main(void) 定义一个返回值为整数，输入值为空的主函数\n>{\n>\tint num; 定义一个名为num的整型变量\n>\tnum = 1; 给num赋值1\n>\t\n> \tprintf(\"I am a simple \"); 输出一行字\n> \tprintf(\"computer. \\n\");\n> \t输出一个词，接在刚才的一句话之后，并换行\n> \tprintf(\"My favorite number is %d because it is first.\\n\",num);\n> \treturn 0; 返回值0，表示结束。\n>}\n>\n>注释中的三个部分：1.定义变量 2.赋值 3.使用函数\n\n如果你认为这个函数将会在你的屏幕上打印一些东西。是的，你是对的。但对于明确的什么东西将会被打印到屏幕上可能并不明显，所以我们运行这个程序，看看会发生什么。\n+ 第一步，使用你最喜欢的编辑器\n\t或者你的编译器中最喜欢的编辑器\n+ 第二步，创造一个包括了图2.1中文本的文件，\n\t并且以`.c`为结尾，从而满足你的系统对于文件名的需要。\n\t举个例子`first.c`就是合法的名称。\n+ 第三步，编译并运行程序。\n\t查看第一章来得知这方面的详细过程。\n\n如果一切都运转良好的话，你会在屏幕上看到这样的输出。\n![输出](/img/输出.png)\n\n总之，这个结果并不是很惊人，但是`\\n`与`%d`的作用是什么呢？\n程序中有几行也看起来很陌生，这就到解释的时候了。\n\n# 2.2 解释这个例子\n\n我们会对这个例子解释两遍，第一遍（Pass1：速览大纲），强调了每一行的意义，从而你能够大体上得知发生了什么。第二遍（Pass2：程序细节），探索了特定部分的含义，并且给出了细节以便你能够更深刻地理解。\n\n图2.1总结了C语言程序的每一个部分，\n除了我们第一个例子使用的，它们还包含着更多要素与步骤。\n\n## Pass1：速览大纲：\n这一部分包括了对于程序每一行的简短解释。\n下一部分会更加充分地探索这些主题的内容。\n\n>#include <stdio.h> 包含另一个文件。\n\n这一行告诉编译器要从文件`stdio.h`中收集信息，这个文件是所有C语言编译器安装包的基础部分，提供了对于键盘输入与显示输出的支持。\n\n>int main(void) 一个函数名\n\n![对C语言程序的分析](/img/analysis.png)\n\nC语言包括一个或者多个***函数***，它是C语言程序的基本模块。这个程序由一个叫做`main`的函数组成，圆括号表示了`main()`是个函数的名字。`int`表明了`main()`函数会返回一个整数，`void`表明`main()`不会获取任何的参数，这些都是我们过会会深入研究的事情。现在，接受`void`与`int`是在ISO/ANSI标准下定义`main()`函数的方法（如果你有在ISO/ANSI标准之前的编译器，省略`void`就好，但你可能也想获取更新的版本来避免不协调。）\n\n> /* a simple program*/ 一条注释。\n\n`/*`与`*/`符号框定了一条能够帮助阐明一个程序的注释，它们是只为阅读者准备的，会被编译器忽略掉。\n\n>{    函数体的开头\n\n起始大括号`{`标志着函数中语句的开始，\n函数的定义由终止大括号`}`结束。\n\n> int num; 一个声明语句\n\n这个语句声明了你正在使用一个叫做`num`的变量，而且`num`会是`int`（integer-十进制整数）类型。\n\n> num = 1; 一个赋值语句\n\n这个语句`num = 1`把值`1`赋给叫做`num`的变量。\n\n> printf(\"I am a simple \"); 一个调用函数的语句\n\n第一句使用了`printf()`函数来在屏幕上显示`I am a simple `这句话，把光标留在了同一行。这里的`printf()`函数是标准C语言库的一部分。它被称作一个***函数***，而在程序中使用一个函数叫***调用函数***。\n\n> printf(\"computer.\\n\");  另一个函数调用语句\n\n第二次调用`printf()`函数是在上一句打印下来的话后面添加了`computer`，`\\n`符号是告诉电脑要另起一行-也就是说把光标移到下一行的起始。\n\n> printf(\"My favorite number is %d because it is first.\\n\");\n\n最后一次使用`printf()`是基于引用的语句把`num`的数值(1)打印到屏幕上，`%d`指示电脑从哪里，以什么方式输出`num`的数值。\n\n> return 0;\n\n一个C语言函数是可以提供，或者说***return(返回)***，一个数值\n\n> } 结束。\n\n正像说过的，程序以终止大括号结束。\n\n## Pass2：程序细节\n\n既然你已经大体了解了图2.1中的内容，我们要更详尽地研究一下它了。再一次，我们将会逐行地查看程序，为了能够培养一种更宏观的C语言编程视角，这一句我们会以每一行代码作为起点，然后一步步深入代码之后的细节。\n### # include **指示与头文件**\n#### # include <stdio.h>\n这是一个程序的开始行，**#include <stdio.h>** 的作用就和你把`stdio.h`中所有的内容都打字写在程序#include的位置是一样的。因此，这是一个剪切粘贴的操作，在共享对于很多程序都一样的信息上，**include**文件提供了一种便利的方式。\n\n`#include`语句是C语言**预处理指令**的一个范例。大体上，C语言编译器会在编译之前对于源码做一些准备工作，这在术语中称为***预处理***\n\n在大部分上，头文件包含着编译器制作最终的可执行文件需要使用的信息。例如，它们可能会定义一些常量或者声明一些函数的名字，与它们应该被怎样使用，但是库中函数真正的代码-编译前代码，不是在头文件中的。编译器的一部分-连接器会负责找到你需要的这一部分库代码。简单地说，头文件会帮助引导编译器来正确地把程序组装起来。\n\nISO/ANSI标准下的C语言必须提供头文件，有些程序需要包含`stdio.h`头文件，有些不需要。对于C语言实例的记录应该包含使用的C语言标准库函数的描述，这些函数描述就确认了需要什么头文件。例如对于`printf()`的描述就表明了需要使用`stdio.h`，省略恰当的头文件可能并不会影响特定的程序，但是最好不要依赖它。这本书每一次使用库函数时，我们都会为函数使用`include`来把ISO/ANSI标准制定的的文件包括在程序内。\n\n![为什么输入输出不是内建函数？](/img/original.png)\n\n为什么输入输出并不是内建函数？\n你有可能想知道为什么像输入输出这样基本的东西并不会被自动包含进程序中。一种回答是，并不是所有的程序都要使用I/O（input/output）包，而且C语言的哲学中也说到要避免承担不必要的重量。这个经济学上资源利用的准则让C语言受到嵌入式编程的欢迎-例如，为控制自动燃油系统编写代码。顺带一说，#include这一行甚至不是C语言的语句。#符号阐述了这一行是在编译器之前被预处理器处理的代码。你会在后面学习预处理指令时遇到很多例子，而且在第16章对这个主题还有更加充分的讲述。\n\n### `main`函数\n#### int main(void)\n程序的下一行声明了一个名字为`main`的函数，`main`是个挺普通的程序，但是它是唯一的选择。一个C语言程序（有些我们无需担心的例外），通常是以名叫`main`的函数开始运行的，其他函数的名字是可以随意选择的，但是作为一切的开端，`main`函数必须存在。那么圆括号呢？它们是为了确定`main()`是个函数，你会很快学习学到关于函数的更多内容。现在，记住这个函数是C语言程序的基础模块。\n\n`int`是`main()`函数的返回值类型，它意味着`main()`返回的数值种类必须是十进制整数(integer)。那么返回到哪里？返回到操作系统-我们会在第六章讨论循环的时候回到这个问题上来。\n\n跟随在函数名后面的圆括号大体上囊括了需要传递给函数的信息，举个简单的例子，没有东西被传递，那么这个括号就包含着`void`-空类型（在第11章，“字符指针与字符串函数”介绍了第二种从操作系统把信息传递给`main()`函数的形式）\n\n如果你查看过很久以前的C语言代码，你会经常看到程序是以下面的形式开始的:\n\n```C\nmain()\n```\n\nC90标准勉强地包容了这个形式，但是C99没有，所以即使你现在的编译器让你写成这个样子，不要听。\n\n下面是另一种你可能会看见的形式\n\n```C\nvoid main()\n```\n\n有一些编译器是允许这样写的，但是没有一个标准把它列为一种选择，\n因此，编译器也没有必要接受这个形式，有几种确实也没有。再一次，坚守标准的形式，你就不会在更换编译器的时候陷入困境。\n\n### 注释\n\n```C\n/*a simple program*/\n```\n\n这一部分由/ *  * /符号框定起来的内容就是注释，使用注释可以让一些人（包括你自己）更好地理解你的程序。C语言的一个很好的特点就是注释可以放在任何地方，甚至与它们解释的“原文内容”放在一行。长一点的知识可以放在一行甚至延伸至多行，以/ * 开始并以 * /结束的内容都会被编译器忽略。下面是注释的合法与非法写法。\n\n![注释示例](/img/comment.png)\n# 翻译\n>（1.这是一行C语言注释）\n>（2.这个注释延伸到了两行）\n>（3.你也可以这样做）\n>（4.但是这是不合法的因为没有结束符号）\n\nC99添加了注释的另一种形式，它在C++与Java中很受欢迎，这种新形式使用`//`符号来生成只在一行内的注释。\n\n![新形式](/img/newform.png)\n\n因为一行的结束标志这这行注释的结束，这种方式需要在注释开始的时候添加注释符号。\n\n新形式的出现是为了响应旧形式的潜在问题，假设你有下面的代码。\n\n![我希望这可以运行...](/img/ihope.png)\n\n下一次，我推断你要删除第四行\n然后意外地把第三行删掉了，\n然后这代码就会变成这个样子\n\n![哦不...](/img/hopeagain.png)\n\n现在编译器把第一行的起始符与第四行的结束符进行配对，结果使这四行全部成为了注释，包括那本应该是代码的一部分的一行。因为`//`并不会延伸到另一行，它不会引起代码的“消失”。\n\n一些编译器有可能并不支持C99的这个特点，还有些有可能需要改变一些编译器的设置才能够应用C99的特性。\n\n### 大括号、函数体与代码块\n\n```C\n{\n...\n}\n```\n\n在图2.1，大括号划定了`main()`的界限。大体上，所有的C语言函数都需要使用大括号来标志着函数体的起始与结束。它们是必须出现的，所以一定不要漏了。只有大括号是起这个作用的，不要使用圆括号或者中括号。\n\n大括号还可以被用来把语句聚集在一个函数中，形成一个单元或者语句块。如果你对于Pascal，ADA，Modula-2或者Algol熟悉的话，你就会意识到大括号划定起始与结束在这些语言里也是相似的。\n\n### 声明\n\n```C\nint num;\n```\n\n程序的这一行术语中称为***声明语句***，声明语句是C语言的其中一个最重要的特点。这个特例声明了两件事，一是在函数的某一个部分有一个叫`num`的变量（好好笑啊哈哈，在那遥远的函数中，有个小变量。）第二，`int`声明了`num`是一个十进制整数-也就是说，没有十进制小数点。（`int`是***数据类型***的一个例子），编译器使用这些信息为`num`变量准备合适的内存空间。结尾的分号标志了这一行是C语言的语句或者指令。分号也是这个语句的一部分，并不只是像在Pascal里的语句之间的分隔符。\n\nC语言中，`int`是一个确定了一种数据类型的*关键字*，关键字是我们用来表达语言的单词，而且你不能把它们强占用于其他目的。例如，你不能把`int`作为函数或者是变量的名称。这些限制在语言之外就会失去作用，反而你把一只猫或者你最喜欢的孩子叫做`int`是没有问题的。（除非本地官员或者法律不准用这个名字）。\n\n`num`是*标识符*的一个例子，也就是你为变量、函数或者其他实型取的名字。从而声明把特定的标识符与电脑的特定的内存区联系在了一起，而且它也建立了信息的类型，或者说数据的类型，来放在那个区域里。\n\n在C语言中，*所有的*变量都需要在被使用之前先*声明*，这也就意味着你必须对于所有在一个程序中使用的变量列出包括数据类型的声明。人们也认为声明变量是一个优秀的编程技巧，而且，在C语言中，它是必须进行的。\n\n通常来说，C语言要求在代码块的起始部分声明变量，而且其他的语句是不允许放在这之前的。也就是说，`main()`函数的函数体会是这个样子。\n\n![传统方式](/img/tradition.png)\n\n\nC99标准学习了C++的时间，现在可以让你在代码块的任何地方声明变量。然而，你还是需要在第一次使用变量之前声明它。所以如果你的编译器支持的话，你就可以像下面这样写：\n\n![C99新方式(1)](/img/C99.png)\n![C99新方式(2)](/img/C992.png)\n\n为了能够和更旧的系统兼容，这本书还是会坚持原来的标准。（一些更新的编译器只有当你设置之后才会支持C99的特点）。\n\n就此，你很可能有三个问题：\n+ 1.数据类型是什么？\n+ 2.在取名的时候我们可以怎么选择？\n+ 3.为什么你需要把变量全部声明出来。\n那就让我们探究这些问题的答案吧。\n\n### 数据类型\n\nC语言主要处理的是这几种数据：十进制整数、字符、浮点数，仅举几例。声明一个整型或者字符类型变量可以使电脑恰当地储存、抓取与翻译数据。你会在下一章研究到更多可用的数据类型。\n\n### 名字的选择\n\n你应该为变量使用有意义的名字（像是`sheep_count`而不是`x3`如果你的程序是数羊的），如果名字不能达到表意的需求，那么就使用注释来解释变量代表了什么。以这种方式为程序做记录是其中一种优秀的编程技巧。\n\n你可以使用的字符要视实际情况而定。C99标准要求不多于63个字符，除非是外部的标识符。（在第12章“内存分级、链接性与储存管理”中会提到），相比于分别只能识别31个字符与6个字符的C90，这是一个巨大的提升，而且老的C语言编译器最多只能接受8个字符。事实上你可以使用更多的字符的，但是编译器会忽略它们。因此，当一个系统有着8个字符的限制时，`shakespeare`与`shakespencil`就会被认为是一样的了，因为它们的前八个字符是一样的。（如果你想要63个字符的例子，可以自己造一个）。\n\n你可以在大写字母、小写字母与下划线之间任意选择。第一个字符必须是一个字母或者一个下划线。下面是一些示范。\n![示范](/img/valid.png)\n操作系统与C语言标准库通常会使用1或2个下划线字符，比如`_kcab`，所以最好避免自己使用它。以一个或者两个下划线字符开始的，标准的标签，比如库中的标识符，会被***储存***起来，也就是说，即使使用它们作为名字并没有任何的语义错误，它是会造成一些名字冲突的。\n\nC的标识符是***区分大小写***的，也就意味着大学字母是被看做与对应的小写字母字符不同的。因此，`stars`与`Stars`和`STARS`是不同的。\n\n为了让C语言能够更加国际化，C99使用通用字符名称机制(UCN)进行了巨大的扩充，在附录B中的参考单元VII“更广大的字符支持”，我们讨论了这些加入的部分。\n\n### 声明变量的四个好处\n\n一些年代更远的语言，比如FORTRAN与BASIC语言的原型版本，可以让你在没有声明的情况下使用变量。那么为什么我们不能在C语言中使用这种简单易行的方法呢？这里就是一些原因：\n+ 把所有的变量放在一个地方能够让阅读者更容易地知道程序是关于什么的。这点好处在你给变量取有意义的名称的时候尤其明显，（就像`taxrate`与`r`），如果名字不能达意就使用注释来解释，以这种方式给程序做记录是一种良好的编程技巧。\n+ 通过思考声明变量是为了什么鼓励你全心投入地去写程序之前做一些准备。程序开始需要什么类型的信息？我到底想要程序输出什么？呈现数据的最好方式是什么？\n+ 声明变量有助于我们预防编程中更多难以发现又狡猾的错误之一-也就是拼错了变量的名字。举个例子，假设在一些没有声明的语言中，你写下了这个语句。\n\n```C\nradius1 = 20.4;\n```\n\n然后在另一个地方，你拼错了变量名。\n\n```C\n> circum = 6.28 * radiusl;\n```\n\n你无意地把数字`1`换成了`l`，那种语言也会创造一个`radiusl`的变量，然后用未知的值（或许是0，或许是垃圾值），`circum`就会被给予一个错误的值，而且你可能需要极其多的时间来搞清楚为什么，这在C语言是不可能出现的（除非你确实是笨到家了去定义两个这样相似的变量名），因为编译器会在radiusl出现的时候报错。\n\n+ 如果你不声明变量的话，你的C语言程序是不会进行编译的。如果先前的原因没有动摇你的话，对于这一点你可就得好好想想了。\n\n既然你需要声明需要使用的变量，它们会到哪里呢？就像上文提过的，C语言在C99之前就要求声明需要在代码块之前完成，遵循这种把声明放在一起的做法，你就可以更容易地得知程序正在做什么。当然，把你的声明分布在各个地方也是有好处的，正像现在C99所允许的。这也就是在你赋值之前先声明变量。那让你更难以忘记给他们赋值。作为关键性的事情，许多的编译器还不支持C99的这个规则。\n\n### 赋值\n```C\nnum = 1;\n```\n\n下一行的程序是一个***赋值语句***，C语言中的其中一种基础运算。这个例子的意思是“把值`1`赋给变量`num`，之前的`int num`”这一行在电脑内存中为`num`分配了空间，这一行也就在这个空间中储存值。如果想要的的话你可以过会给`num`赋另一个值，那也就是`num`被叫做***变量***的原因。需要注意的是赋值语句会把值从右边到左边传递。\n同时，这一句也是以分号结尾的，就像图2.2中显示的。\n![赋值图示](/img/assignment.png)\n\n## `printf()`函数\n\n```C\nprintf(\"I am a simple \");\nprintf(\"computer.\\n\");\nprintf(\"My favorite number is %d because it is first.\\n\",num);\n```\n这些行使用了一个C标准库中叫`printf`的函数，圆括号表明了`printf`是一个函数的名字，在圆括号之中的内容就是`main()`函数向`printf()`函数传递的信息。例如，第一行就传递了这句话 `I am a simple`这样的信息叫做***参数***，或者更加充分地，叫做函数的***实际参数***（见图2.3），那么`printf()`函数会对对这种语句做些什么呢？它会抓取在双引号之间的一切，然后把文本打印在屏幕上。\n\n![函数调用](/img/calling.png)\n\n第一行`printf()`是你调用函数的一个很好的例子，你只需要打字写下函数的名称，把需要的参数放在圆括号内。当程序运行到这一行时，控制流就转换到已经定义的函数（在这个例子中是`printf()`）中，然后当函数已经完成了它需要做的事情之后，控制流就又回到原来的（***调用***）函数-在这个例子中是`main()`。\n\n下一行的`printf`呢？它在引号中包含了`\\n`这个字符，而且它并没有被打印下来？发生了什么？`\\n`的作用其实是另起一行，`\\n`的组合体（打印下来是两个字符）就组成了`\\n`这个叫***换行符***的新字符。对于`printf()`它意味着“在左下角再起一行”。也就是说，打印换行符和你在常规键盘上按下`enter`键的作用是差不多的。那么为什么不在打字写`printf`的时候用`Enter`键呢？那是因为因为那只会被认为是对于你的编译器的即时的指令，而不是对于源码的指令，也就是说，当你按下`enter`键时编辑器会退出当前的行，然后另起一行。换行符，影响着程序是如何显示的。\n\n换行符是***转义字符***的范例，***转义字符***是用来呈现难以或者几乎不能通过打印显示出来的字符的。其他的还有`\\t`对应着`Tab`、`\\b`对应着`Backspace`，每一个转义字符都会由`\\`来起始，我们会在第三章：C语言与数据再回到这个话题深入研究。\n\n这也就解释了为什么三个`printf`却只有两行文字了，第一个`printf()`命令没有换行符，但是第二个与第三个是有的。\n\n最后的`printf()`又带来了另外一个异样的地方：当这行文字被打印的时候`%d`发生了什么？你应该还记得，输出是这个样子的。\n\n```Bash\nMy favorite number is 1 because it is first.\n```\n啊哈，当被打印出来的时候，数字`1`就是`%d`的替换物，而且变量`num`的值就是`1`，`%d`是展示`num`的值在什么时候被打印的占位符，这一行与下面的BASIC语句是相似的：\n\n```BASIC\nPRINT \"My favorite number is \"; num; because it is first.\"\n```\n事实上，C语言的版本比这个做的工作还要多一点，`%`告诉程序有一个变量需要在这个区域被输出，`d`表达了要把这个变量以十进制整数的方式输出。`printf`还可以以其他变量形式进行输出，包括十六进制数、带有十进制小数点的数。事实上，`printf()`中的`f`表明了它是一个***格式化***打印函数。每种数据类型都有自己的指示符，这本书也会在介绍新的数据类型的同时引入对应的指示符。\n\n### 返回语句\n```C\nreturn 0;\n```\n\n返回语句是这个程序的最后一个语句，在`int main(void)`中的`int`意味着`main()`函数应该返回一个十进制整数。`main()`函数这样返回是C语言标准要求的。返回值的C语言函数都会使用return语句来进行这个操作，return语句包含着关键字`return`与返回的值，以一个分号结束。如果你遗漏了这一句，大多数编译器会报错，但是它们仍然会对程序进行编译。这样的话，你可以把return语句看成为了增加逻辑的连贯性的东西，但是它对于一些操作系统是由实际用处的，包括DOS和Unix，我们在第11章会更深入地对于这个话题给出解释。\n\n# 2.3 简单程序的结构\n\n既然你已经看过了具体的例子，你已经准备好了解C语言程序的一些基本规则了。***程序***由包含一个函数或者多个函数的组组成，其中一个必须叫`main()`对于函数的描述包括函数头与函数体，***函数头***包括预处理语句，如`#include`，与函数的名字。你可以通过看圆括号的方式来得知这是个函数，即使圆括号可能是空的。***函数体***是由大括号框定的，它包括了一系列的语句，每一个都是由一个分号结尾的（见图2.4）。在例子中有***声明语句***，它是用来声明变量的类型与名字的，还有***赋值语句***，它给予变量一个值。然后还有三个***print语句***，每一个都调用了`printf()`函数，这些print语句是***函数调用语句***的一些示范。最后`main()`函数以返回值结束。\n\n简单来说，一个简单的、标准的C语言程序应该使用下面的格式。\n![图2.4](/img/function1.png)\n![标准格式](/img/structure.png)\n\n# 2.4 可读性建议\n\n使你的程序变得更可读是一种优秀的编程实践。可读性高的程序很容易理解，也就很容易去修改、纠正。让一个程序变得可读的过程也帮助你理清你对于程序执行自己的概念。\n\n你已经看过两种可以增加可读性的技巧了：选择变量名与使用注释。注意这两种技巧是相互补充的。如果你给一个变量注名`width`，你就不需要对于这个变量表示什么做任何解释了。但是叫做`video_routine_4`的变量就需要对于video routine 4的解释。\n\n另一个技巧是使用空行来分隔函数中的概念模块。例如，简单的实例程序就使用了空行分开了声明部分与行动部分。C语言不需要空行，但是它能够提高可读性。\n\n第四个技巧就是每行使用一个语句。再一次，这是一个针对于可读性的惯例，并不是C语言的要求。C语言的格式是***形式自由***的，你可以把几句话放在一行或者一直延伸到第二行。下面的代码是合法的，但是看起来很丑。\n![丑](/img/poorreadability.png)\n分号向编译器指示了一个语句什么时候结束和下一句什么时候开始。但是如果你能够遵从这种在本章的例子中使用的传统手法，程序的逻辑会清晰很多。（见图2.5）\n![可读性规范](/img/readable.png)\n\n# 2.5 更进一步\n\n我们的第一个C语言例子还是很简单的，接下来的图2.2就是第二个例子，但也并不是非常难。\n\n![例子](/img/example2.png)\n\n新在哪里呢？代码中提供了对于程序的描述（在注释中），声明了很多变量，做了一些乘法运算，然后把这两个变量的值打印下来，让我们把这些点深入地了解一下。\n\n## 记录 Documentation\n\n第一，程序是以注释开始的（使用的是新的注释形式），它确定了文件名与程序的目的。这种程序的记录只花费一分钟就可以做，而且之后会在你浏览多个文件并打印它们的时候起到很大帮助。\n\n## 多行声明 Multiple Declarations\n\n然后，程序在一行中声明了两个而不是一个变量。为了达成这个目的，可以把两个变量（`feet`与`fathoms`）的声明使用一个逗号隔开，也就是下面这样。\n\n```C\nint feet, fathoms;\n```\n\n它和下面的形式是等价的。\n\n```C\nint feet;\nint fathoms;\n```\n\n## 运算 Multiplication\n\n第三步，程序进行运算，它利用了计算机系统庞大的算力来计算2乘6。\n在C语言中，同样也在很多语言中，`*`是乘法运算的符号。\n因此，下面的语句：\n\n```C\nfeet = 6 * fathoms;\n```\n\n它的意思就是：查看`fathoms`的值，乘以6，然后把这个运算的结果的值赋给变量`feet`。\n\n## 打印多个值 Printing Multiple Values\n\n最终，程序更多样地使用了`printf()`如果你编译运行过这个例子，输出应该是这个样子的。\n\n```Bash\nThere are 12 feet in 2 fathoms！\nYes, I said 12 feet!\n```\n\n这一次，代码在第一次使用`printf()`的时候，使用了两次替代符，在双引号中的第一个`%d`被在后面引用列表的第一个变量的值替换了(`feet`)然后第二个`%d`被第二个变量代替了。要注意的是待打印变量列表是在双引号部分后面，另外也注意每一个都是用括号分开的。\n\n第二次使用`printf()`表明了打印的值并不一定是变量的，只是必须要指定一个值，就像`6 * fathoms`这样，可以是恰当类型的值。\n\n这个程序受篇幅不长，但是它可以呈现把fathoms转换到feet的核心。我们需要的就是动态地去赋其他的值给`feet`我们会在以后的章节解释如何做。\n\n# 2.6 顺便一提：多重函数\n\n目前为止，这些程序已经使用过了基本的`printf()`函数。图2.3向你展示了如何把自己的函数-除了`main()`以外的函数-加到程序里。\n\n![两个函数的程序](/img/twofunc.png)\n\n输出是这个样子的。\n\n```Bash\nI will summon the butler function.\nYou rang, sir?\nYes,Bring me some tea and writeable CD-ROMS.\n```\n\n`butler()`函数在程序中出现了三次，第一次出现是在***原型***中，那告诉了编译器要使用的函数。第二次出现是在`main()`函数中，在***函数调用***中出现，最终，程序呈现了***函数的定义***过程，那是函数本身的源码。让我们再来看看这三次出现。\n\nC90标准添加了原型，老翻译器可能并不能识别它们（我们将会讲到当你使用那种编译器的时候要怎么做。）原型就是一种告诉编译器你正在使用一个特定的函数的声明。它也指定了函数的属性。例如，`butler()`函数的第一个词`void`指明了它没有返回值。（大体上，函数可以为了使用值而返回这些值，但`butler`没有），第二个`void`-在`butler(void)`-的意思是它没有参数。因此，当编译到达`main()`函数中`butler`被使用的这一行时，它会检查是否`butler`是被恰当地使用的。需要注意，`void`是被用来表示empty（空），而不是invalid（不合法、无效）。\n\n早先的C语言支持的函数声明类型有限，那时你只能定下返回值的类型，但是对于参数的描述就被省略。\n\n```C\nvoid butler();\n```\n\n那时的C语言代码使用的函数声明就像是上述的样子，而不是函数原型，C90与C99标准都能够辨认出这种更老的形式，但是它们表示这种形式会随着时间被淘汰，所以不要用。如果你从一些更老的地方拿到了C语言代码，你有可能想要把老式的声明变成原型。以后的章节会回到原型制作、函数声明与返回值上。\n\n接下来，你通过给出`butler`的名字与圆括号来援引函数。（调用），当`butler`完成了它的工作，程序就会移向`main()`函数中的下一行。\n\n最终，函数`butler()`以与`main()`函数一样的形式被定义，有函数头与用大括号框定的函数体。函数头重复了你在原型中提供的信息：`butler`不使用信息，而且不返回值。对于老旧的编译器，省略第二个`void`。\n\n有一点需要注意的，就是在`main()`函数中`butler()`被调用的位置-而不是`butler()`函数被定义的位置-决定了`butler()`函数的运行位置。比如，你可以把`butler()`函数的定义放在`main()`函数的前面，程序还是会照旧那样把`butler()`放在两个`printf()`中间运行。记住，所有的C语言程序都是以`main()`函数开始的，无论`main()`函数在程序文件的什么位置。然而，C语言实际上是先把`main()`函数列出来，因为它通常提供了基本的程序框架。\n\nC语言标准建议你为所有你使用的函数提供原型，标准的`include`文件为标准库函数做这个工作，例如，在标准C语言下，`stdio.h`文件就有`printf()`函数的原型，第六章的最后一个例子会告诉你如何去更广泛地为非`void`的函数制作原型，第九章会全面地讲述函数。\n\n# 2.7 调试引入\n\n现在你已经可以写一个简单的C语言程序了，你有可能海域犯些简单的错误。程序的错误通常被叫做***bugs***，寻找与修复它们就叫做***调试***，图2.4就展现了有些bugs的程序，看看你是否能够找到。\n\n![找找吧，有几处？](/img/nogood.png)\n\n## 语法错误 Syntax Errors\n\n图2.4的例子犯了几个语法错误，当你没有遵循C语言的规则，你就会犯***语法错误***，这也可以类比到英语的语法错误。例如，思考一下这句话：***Bugs frustrate be can.*** 这句话使用的单词是正确的，但是并没有遵循单词顺序的规律，而且使用的单词形式也不太对，不管怎样，C语言的语法错误就是在错误的地方使用了正确的C语言标志。\n\n所以`nogood.c`这个程序究竟犯了什么错误呢？第一，它使用的是括号而不是大括号来标记函数体，也是把正确的C语言符号用在了错误的地方，第二，声明应该是这个样子的\n\n```C\n\tint n, n2, n3;\n```\n\n或者这样\n\n```C\n\tint n;\n\tint n2;\n\tint n3;\n```\n\n而且，这个例子遗漏了安置一条注释必须要使用的`*/`符号对（作为替换，你可以用`//`形式替换`/*`），最后，它遗漏了`printf()`后的本应作为语句结束标志的分号。\n\n你如何来检查语法错误呢？第一，在编译之前，浏览你的源码，看你是否看到一些明显的错误。第二，你可以检查编译器找到的错误，因为它的一部分工作就是检查语义错误。当你编译程序的时候，编译器会反馈找到的所有错误，并且会明确错误类型与出错的位置。\n\n然而，编译器有时也会混乱，实际上的一个区域内的语义错误有可能会让编译器错误地认为它找到了其他种类的错误。例如，因为这个例子没有恰当地声明`n2`与`n3`，所以编译器会认为它在被使用的地方找到了错误。事实上，与其试图一次把所有报告的错误修正过来，不如只修改一两个然后重新编译，这样的话有些其他种类的错误就会消失。继续这样做，直到程序正常运行。另一个常见的编译器“诡计”是它会在后面的行报错，但其实出错是在前面的行里。例如，编译器有可能直到下一行才能判断出上一行遗漏了分号。所以如果编译器报错说缺少分号，那么在这一行之前进行检查。\n\n## 语义错误 Semantic Errors\n\n语义错误是在意义上的错误，例如，思考这一句话: ***Furry inflation thinks greenly.***  语法上是正确的，因为形容词、名词、动词、还有副词都在合适的位置上，但这句话就是一派胡言。在C语言中，当你遵循了C语言的规则但是导致了不合适的结果，这个例子中就有这样的错误。\n\n```C\nn3 = n2 * n2;\n```\n\nn3本应该是用来展现`n`的3次方的，结果程序把它算成了`n`的4次方。编译器是检测不出来语义错误的，因为它们并不违背C语言的规则。编译器没有能力去猜测你程序的意图。那也就只能由你来找到这些种类的错误了。一种方式是把程序做的事情与程序应该做的事情进行对比。例如，假定你已经找到了例子中的语法错误，那么它现在看起来是这个图2.5样子的。\n\n![还是错的...](/img/stillbad.png)\n\n它的输出是\n\n```Bash\nn = 5, n squared = 25, n cubed = 625 \n```\n\n如果你可以口算立方的话，那么你就会注意到625是个错误的值。下一阶段就是找到你是如何陷入这个错误的。例如，你有可能会通过观察找到错误。大体上，然而你还需要一些系统的方法。一种方法是假装你是电脑，然后一步步地跟着程序走，让我们现在就尝试一下那个方法。\n\n程序体以声明三个变量`n1, n2与n3`开始，你可以通过画三个盒子并把它们各自标注名称来模拟这个情况。（看图2.6）然后，程序会把5赋给`n`，通过把数字5写在盒子里来模拟，然后，程序用`n`乘`n`然后把它的值赋给`n2`，所以看向盒子`n`，看着5乘5得到了25，然后把25放在盒子里。为了模拟下一句，也是同样，看向盒子2，然后用25乘25，然后把这个值给予`n3`，啊哈，你做乘法的时候使用的是`n`的平方而不是用`n`。\n\n嗯，有可能这个过程对于这个程序有点过了，但是以这种方式一步步地浏览程序总会是得知发生了什么最好的方法。\n\n## 程序状态\n\n通过手工地一步步地追踪程序，追踪每一个变量，你监视了程序的状态，**程序状态**就是所有变量在一个时间点上被给予的一组值。它是运算状态的快照。\n\n![追踪程序状态](/img/tracer.png)\n\n我们刚刚讨论了一种追踪程序状态的方法：通过自己一步一步地运行程序。在一个进行1000次迭代的程序中，你可能觉得并不能完成那个工作。然而，你还是可以经历一些迭代过程，看看你的程序是不是按你想要的方式来运行的。然而，通常是会有这种情况的，你会按照你想要的方式去“执行”它们，而不是真正把它们写下来，所以在写真正的代码的时候要努力做到正确。\n\n另一个方法就是通过在程序的自始至终放置几个`printf`语句来定位语义问题。在程序运行的关键点监测选定变量的数值。看看数值是怎么变化的可以让你知道正在发生什么。在你让程序按照你满意的方式运行之后，你就可以去掉多余的语句去重新编译了。\n\n第三种监测的方法就是使用调试器。***Debugger***是一种能够让你一步一步地运行程序并且查看程序变量的值的程序。它们使用的难易程度与复杂度都各有不同。更高级的编译器可以显示哪一行代码正在被运行。这对于多路径的程序是非常方便的，因为可以很容易地看到走的是哪一条路径。如果你的编译器中有调试器，那么花谢时间学学则呢么使用吧。比如像图2.4那样尝试使用它。\n\n# 2.8 关键字与内置标识符\n\n关键字就是C语言中的词汇，因为它们对于C语言是特别的，所以你不能把它们作为标识符来使用。有一些关键字分别了多种多样的类型，比如说`int`，其他的比如说`if`是被用来控制程序运行语句的顺序的。在以下的C语言关键字的列表中，黑体表示在ISO/ANSI C90标准下的关键字，斜体的是C99标准加入的新关键字\n\n![关键字](/img/keywords.png)\n\n如果你尝试把关键字用于变量的名字，编译器会把它识别为语法错误，还有其他的标识符，它们叫做***内建标识符***，你也是不应该使用的，他们不会导致语法错误，因为它们是合法的名称，但是语言已经使用过或者还保留着使用它们的权利，所以如果你使用这些标识符来表示其他的东西会引起问题。内置的标识符包括以下划线开始的词还有库函数的名称，就像`printf()`.\n\n# 关键概念\n\n电脑编程是一项有挑战性的活动，它需要复杂与概念化的思考，而且还需要对于细节格外注意。你会发现编译器会强制你去注意细节。当你对朋友说话的时候，你可能会把几个词用错，犯几个语法错误，可能话没有说完，但是你的朋友仍然能够理解你在说什么。但是编译器不会允许这种情况。对于编译器来说，几乎对了也是错的。\n\n编译器并不能在概念问题帮到你多少，比如在这里说的这些东西。所以这本书会尽力通过给出每一章关键概念的大纲来弥合那个差距。\n\n对这一章，你的目标是你需要理解C语言程序是什么，你可以认为程序就是你对于想让电脑干什么的描述。编译器精细化地解决把你的描述变为含蓄的机器语言。（对于编译器做多少工作的测量显示，它可以从你1KB的源码文件创造出来60KB的可执行程序）即使一个简单的C语言程序也需要很多的机器语言来代表它们。）因为编译器并没有智能，你必须使用编译器的词汇来描述你的意思，而且这些词汇是由C语言标准设立的正规规则。（即使很受限制，还是比直接用机器语言来表达强的多了！）\n\n编译器期望着收到以独特的形式写出的指令，这一章已经详细地描述了。你作为编程人员的工作就是表达在编译器框架下你对于程序应该如何运作的想法-由C语言标准所引导就可以正确地运行。\n\n# 回顾问题\n\n4. Indiana Sloth准备了如下的程序，让你看一看是不是正确，请帮帮他吧。\n\n![问题4](/img/quest4.png)\n\nmain函数用了{}来括起来，函数体用的是括号，是错的。\n声明语句没加分号，赋值只需要一个=号即可。\n是printf而不是print。没加双引号，没加引用列表。最后没结束。stdio.h打错了而且#和<>，注释另一边写反了，导致全文为注释。\n\n5.假设下面的每一个例子都是完整程序的一部分，它们每一个会打印什么呢?\n\n![问题5](/img/quest5.png)\n\n```Bash\n#a.\nBaa Baa Black Sheep.Have you any wool?\n\n#b.\nBegone!\ncreature of lard!\n#c.\nWhat?\nNo/nBonzo?\n\n#d.\n2 + 2 = 4\n```\n\n6. 下面哪些是C语言关键字？ `main, int, function, char, =`\nint、char\n\n7. 你会如何把**行数**与**字数**打印出来？\n在以下的形式中`There were 3020 words and 350 lines.`\n\n```C\nword = 3020;\nline = 350;\nprintf(\"There were %d words and %d lines.\", word, line);\n```\n\n8. 思考下面的程序\n![问题8](/img/quest8.png)\n在第7行之后的程序状态是什么？\n第八与第九行呢？\n\n> 第7行 a = 5，b = 2\n\n> 第8行 a = 5， b = 5\n\n> 第9行 a = 5， b = 5\n\n# 编程训练\n\n只是阅读是不够的，你得尝试写一两个简单的程序来看看是不是写程序和你看这一章的感觉一样流畅。下面有一些建议，但是你也确实需要独立思考一些问题。你会在网站上找到下面选出问题的答案。\n\n1. 调用一次printf，把你的姓与名在一行中输出\n\t再调用一次printf，把你的姓与名在两行中输出。\n\t使用两次printf把你的姓和名在一行中输出。\n\n```C\n//简略一写\nprintf(\"Mike Smith\\n\");\nprintf(\"Mike\\nSmith\\n\");\nprintf(\"Mike\");\nprintf(\"Smith\\n\");\n```\n\n2. 写一个打印你的姓名与地址的程序\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tprintf(\"My name is Ywx\\n\");\n\tprintf(\"Address: Zhengzhou city in Henan province\");\n\treturn 0;\n}\n```\n\n3. 写一个把你的年龄转换成天数的程序，展示两者的值。不必关心闰年和平年。\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint age, days;\n\tscanf(\"%d\", &age);\n\tdays = age * 365;\n\tprintf(\"%d %d\", age, days);\n\treturn 0;\n}\n```\n\n4.写一个会打印出以下语句的程序\n\n![语句](/img/four.png)\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tfor(int i = 0;i < 3;i++)\n\t\tprintf(\"For he's a jolly good fellow!\\n\");\n\tprintf(\"Which nobody can deny!\");\n\treturn 0;\n}\n```\n\n5.写一个程序，创建一个叫做`toes`的变量，把`toes`设为10，\n计算toes的二倍和平方分别是什么，并把它们打印下来\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\ttoes = 10;\n\tprintf(\"%d %d %d\", toes, toes * 2, toes * toes);\n\treturn 0;\n}\n```\n\n6.写一个会打印出如下的输出的程序\n\n![Smile!](/img/six.png)\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tfor(int i = 3;i >= 1;i--)\n\t{\n\t\tfor(int j = 0;j < i;j++)\n\t\t{\n\t\t\tprintf(\"Smile\");\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n\n7.写一个叫做`one_three()`的函数，这个函数应该在一行内展现文字`one`然后调用函数`two()`，接着在另一行内显示文字`three`。\n`two()`把文字`two`在一行输出。以Stating now开始，像这样。\n\n![数数](/img/last.png)\n\n```C\n#include <stdio.h>\n\nvoid two()\n{\n\tprintf(\"two\\n\");\n}\n\nvoid one_three()\n{\n\tprintf(\"one\\n\");\n\ttwo();\n\tprintf(\"three\\n\")l\n}\n\nint main(void)\n{\n\tprintf(\"starting now:\\n\");\n\tone_three();\n\treturn 0;\n}\n```\n\n> End...","source":"_posts/C-premier-plus-Chapter-2.md","raw":"---\ntitle: C premier plus Chapter 2\ndate: 2023-11-28 12:36:23\ntags: C_premier_plus\n---\n\n# 第二章 C语言介绍\n\n> **你将会在这一章学到**\n> \t1.赋值运算符\n> \t2.函数main()与printf()\n> \t3.一个简单C语言程序的构成\n> \t4.创造整型变量，赋值并在屏幕上显示它们的值\n> \t5.换行符`'\\n'`\n> \t6.如何在程序中添加注释，让你的程序中同时拥有多个函数\n> \t\t并能找出程序中的错误。\n> \t7.关键字是什么\n\nC语言的程序是什么样子的？如果你大体浏览过这本书，你会看到很多的例子的。几乎一致的是，你会觉得C语言程序看起来很怪异，有些需要用到类似`{，cp->tort,*ptr`这样的符号。随着你通读完这本书，你就会慢慢觉得这些符号不是那么陌生了，会变得更加熟悉，甚至有可能会很高兴遇见它们。在这一章中，我们从给出并解释一个简单的实例起步。同时，我们也会强调一些C语言的基本特征。\n<!--more-->\n\n# 2.1 一个简单的例子\n\n让我们先研究一个简单的C语言程序。在图2.1展示的这个程序，专门为了突出一些C语言编程的特征。在你将要读接下来对于程序的逐行解释之前，先看看图2.1，试试你是不是能够靠自己搞明白它会做什么事情。\n![小例子](/img/example.png)\n>1.#include <stdio.h> 包含头文件\n>2.int main(void) 定义一个返回值为整数，输入值为空的主函数\n>{\n>\tint num; 定义一个名为num的整型变量\n>\tnum = 1; 给num赋值1\n>\t\n> \tprintf(\"I am a simple \"); 输出一行字\n> \tprintf(\"computer. \\n\");\n> \t输出一个词，接在刚才的一句话之后，并换行\n> \tprintf(\"My favorite number is %d because it is first.\\n\",num);\n> \treturn 0; 返回值0，表示结束。\n>}\n>\n>注释中的三个部分：1.定义变量 2.赋值 3.使用函数\n\n如果你认为这个函数将会在你的屏幕上打印一些东西。是的，你是对的。但对于明确的什么东西将会被打印到屏幕上可能并不明显，所以我们运行这个程序，看看会发生什么。\n+ 第一步，使用你最喜欢的编辑器\n\t或者你的编译器中最喜欢的编辑器\n+ 第二步，创造一个包括了图2.1中文本的文件，\n\t并且以`.c`为结尾，从而满足你的系统对于文件名的需要。\n\t举个例子`first.c`就是合法的名称。\n+ 第三步，编译并运行程序。\n\t查看第一章来得知这方面的详细过程。\n\n如果一切都运转良好的话，你会在屏幕上看到这样的输出。\n![输出](/img/输出.png)\n\n总之，这个结果并不是很惊人，但是`\\n`与`%d`的作用是什么呢？\n程序中有几行也看起来很陌生，这就到解释的时候了。\n\n# 2.2 解释这个例子\n\n我们会对这个例子解释两遍，第一遍（Pass1：速览大纲），强调了每一行的意义，从而你能够大体上得知发生了什么。第二遍（Pass2：程序细节），探索了特定部分的含义，并且给出了细节以便你能够更深刻地理解。\n\n图2.1总结了C语言程序的每一个部分，\n除了我们第一个例子使用的，它们还包含着更多要素与步骤。\n\n## Pass1：速览大纲：\n这一部分包括了对于程序每一行的简短解释。\n下一部分会更加充分地探索这些主题的内容。\n\n>#include <stdio.h> 包含另一个文件。\n\n这一行告诉编译器要从文件`stdio.h`中收集信息，这个文件是所有C语言编译器安装包的基础部分，提供了对于键盘输入与显示输出的支持。\n\n>int main(void) 一个函数名\n\n![对C语言程序的分析](/img/analysis.png)\n\nC语言包括一个或者多个***函数***，它是C语言程序的基本模块。这个程序由一个叫做`main`的函数组成，圆括号表示了`main()`是个函数的名字。`int`表明了`main()`函数会返回一个整数，`void`表明`main()`不会获取任何的参数，这些都是我们过会会深入研究的事情。现在，接受`void`与`int`是在ISO/ANSI标准下定义`main()`函数的方法（如果你有在ISO/ANSI标准之前的编译器，省略`void`就好，但你可能也想获取更新的版本来避免不协调。）\n\n> /* a simple program*/ 一条注释。\n\n`/*`与`*/`符号框定了一条能够帮助阐明一个程序的注释，它们是只为阅读者准备的，会被编译器忽略掉。\n\n>{    函数体的开头\n\n起始大括号`{`标志着函数中语句的开始，\n函数的定义由终止大括号`}`结束。\n\n> int num; 一个声明语句\n\n这个语句声明了你正在使用一个叫做`num`的变量，而且`num`会是`int`（integer-十进制整数）类型。\n\n> num = 1; 一个赋值语句\n\n这个语句`num = 1`把值`1`赋给叫做`num`的变量。\n\n> printf(\"I am a simple \"); 一个调用函数的语句\n\n第一句使用了`printf()`函数来在屏幕上显示`I am a simple `这句话，把光标留在了同一行。这里的`printf()`函数是标准C语言库的一部分。它被称作一个***函数***，而在程序中使用一个函数叫***调用函数***。\n\n> printf(\"computer.\\n\");  另一个函数调用语句\n\n第二次调用`printf()`函数是在上一句打印下来的话后面添加了`computer`，`\\n`符号是告诉电脑要另起一行-也就是说把光标移到下一行的起始。\n\n> printf(\"My favorite number is %d because it is first.\\n\");\n\n最后一次使用`printf()`是基于引用的语句把`num`的数值(1)打印到屏幕上，`%d`指示电脑从哪里，以什么方式输出`num`的数值。\n\n> return 0;\n\n一个C语言函数是可以提供，或者说***return(返回)***，一个数值\n\n> } 结束。\n\n正像说过的，程序以终止大括号结束。\n\n## Pass2：程序细节\n\n既然你已经大体了解了图2.1中的内容，我们要更详尽地研究一下它了。再一次，我们将会逐行地查看程序，为了能够培养一种更宏观的C语言编程视角，这一句我们会以每一行代码作为起点，然后一步步深入代码之后的细节。\n### # include **指示与头文件**\n#### # include <stdio.h>\n这是一个程序的开始行，**#include <stdio.h>** 的作用就和你把`stdio.h`中所有的内容都打字写在程序#include的位置是一样的。因此，这是一个剪切粘贴的操作，在共享对于很多程序都一样的信息上，**include**文件提供了一种便利的方式。\n\n`#include`语句是C语言**预处理指令**的一个范例。大体上，C语言编译器会在编译之前对于源码做一些准备工作，这在术语中称为***预处理***\n\n在大部分上，头文件包含着编译器制作最终的可执行文件需要使用的信息。例如，它们可能会定义一些常量或者声明一些函数的名字，与它们应该被怎样使用，但是库中函数真正的代码-编译前代码，不是在头文件中的。编译器的一部分-连接器会负责找到你需要的这一部分库代码。简单地说，头文件会帮助引导编译器来正确地把程序组装起来。\n\nISO/ANSI标准下的C语言必须提供头文件，有些程序需要包含`stdio.h`头文件，有些不需要。对于C语言实例的记录应该包含使用的C语言标准库函数的描述，这些函数描述就确认了需要什么头文件。例如对于`printf()`的描述就表明了需要使用`stdio.h`，省略恰当的头文件可能并不会影响特定的程序，但是最好不要依赖它。这本书每一次使用库函数时，我们都会为函数使用`include`来把ISO/ANSI标准制定的的文件包括在程序内。\n\n![为什么输入输出不是内建函数？](/img/original.png)\n\n为什么输入输出并不是内建函数？\n你有可能想知道为什么像输入输出这样基本的东西并不会被自动包含进程序中。一种回答是，并不是所有的程序都要使用I/O（input/output）包，而且C语言的哲学中也说到要避免承担不必要的重量。这个经济学上资源利用的准则让C语言受到嵌入式编程的欢迎-例如，为控制自动燃油系统编写代码。顺带一说，#include这一行甚至不是C语言的语句。#符号阐述了这一行是在编译器之前被预处理器处理的代码。你会在后面学习预处理指令时遇到很多例子，而且在第16章对这个主题还有更加充分的讲述。\n\n### `main`函数\n#### int main(void)\n程序的下一行声明了一个名字为`main`的函数，`main`是个挺普通的程序，但是它是唯一的选择。一个C语言程序（有些我们无需担心的例外），通常是以名叫`main`的函数开始运行的，其他函数的名字是可以随意选择的，但是作为一切的开端，`main`函数必须存在。那么圆括号呢？它们是为了确定`main()`是个函数，你会很快学习学到关于函数的更多内容。现在，记住这个函数是C语言程序的基础模块。\n\n`int`是`main()`函数的返回值类型，它意味着`main()`返回的数值种类必须是十进制整数(integer)。那么返回到哪里？返回到操作系统-我们会在第六章讨论循环的时候回到这个问题上来。\n\n跟随在函数名后面的圆括号大体上囊括了需要传递给函数的信息，举个简单的例子，没有东西被传递，那么这个括号就包含着`void`-空类型（在第11章，“字符指针与字符串函数”介绍了第二种从操作系统把信息传递给`main()`函数的形式）\n\n如果你查看过很久以前的C语言代码，你会经常看到程序是以下面的形式开始的:\n\n```C\nmain()\n```\n\nC90标准勉强地包容了这个形式，但是C99没有，所以即使你现在的编译器让你写成这个样子，不要听。\n\n下面是另一种你可能会看见的形式\n\n```C\nvoid main()\n```\n\n有一些编译器是允许这样写的，但是没有一个标准把它列为一种选择，\n因此，编译器也没有必要接受这个形式，有几种确实也没有。再一次，坚守标准的形式，你就不会在更换编译器的时候陷入困境。\n\n### 注释\n\n```C\n/*a simple program*/\n```\n\n这一部分由/ *  * /符号框定起来的内容就是注释，使用注释可以让一些人（包括你自己）更好地理解你的程序。C语言的一个很好的特点就是注释可以放在任何地方，甚至与它们解释的“原文内容”放在一行。长一点的知识可以放在一行甚至延伸至多行，以/ * 开始并以 * /结束的内容都会被编译器忽略。下面是注释的合法与非法写法。\n\n![注释示例](/img/comment.png)\n# 翻译\n>（1.这是一行C语言注释）\n>（2.这个注释延伸到了两行）\n>（3.你也可以这样做）\n>（4.但是这是不合法的因为没有结束符号）\n\nC99添加了注释的另一种形式，它在C++与Java中很受欢迎，这种新形式使用`//`符号来生成只在一行内的注释。\n\n![新形式](/img/newform.png)\n\n因为一行的结束标志这这行注释的结束，这种方式需要在注释开始的时候添加注释符号。\n\n新形式的出现是为了响应旧形式的潜在问题，假设你有下面的代码。\n\n![我希望这可以运行...](/img/ihope.png)\n\n下一次，我推断你要删除第四行\n然后意外地把第三行删掉了，\n然后这代码就会变成这个样子\n\n![哦不...](/img/hopeagain.png)\n\n现在编译器把第一行的起始符与第四行的结束符进行配对，结果使这四行全部成为了注释，包括那本应该是代码的一部分的一行。因为`//`并不会延伸到另一行，它不会引起代码的“消失”。\n\n一些编译器有可能并不支持C99的这个特点，还有些有可能需要改变一些编译器的设置才能够应用C99的特性。\n\n### 大括号、函数体与代码块\n\n```C\n{\n...\n}\n```\n\n在图2.1，大括号划定了`main()`的界限。大体上，所有的C语言函数都需要使用大括号来标志着函数体的起始与结束。它们是必须出现的，所以一定不要漏了。只有大括号是起这个作用的，不要使用圆括号或者中括号。\n\n大括号还可以被用来把语句聚集在一个函数中，形成一个单元或者语句块。如果你对于Pascal，ADA，Modula-2或者Algol熟悉的话，你就会意识到大括号划定起始与结束在这些语言里也是相似的。\n\n### 声明\n\n```C\nint num;\n```\n\n程序的这一行术语中称为***声明语句***，声明语句是C语言的其中一个最重要的特点。这个特例声明了两件事，一是在函数的某一个部分有一个叫`num`的变量（好好笑啊哈哈，在那遥远的函数中，有个小变量。）第二，`int`声明了`num`是一个十进制整数-也就是说，没有十进制小数点。（`int`是***数据类型***的一个例子），编译器使用这些信息为`num`变量准备合适的内存空间。结尾的分号标志了这一行是C语言的语句或者指令。分号也是这个语句的一部分，并不只是像在Pascal里的语句之间的分隔符。\n\nC语言中，`int`是一个确定了一种数据类型的*关键字*，关键字是我们用来表达语言的单词，而且你不能把它们强占用于其他目的。例如，你不能把`int`作为函数或者是变量的名称。这些限制在语言之外就会失去作用，反而你把一只猫或者你最喜欢的孩子叫做`int`是没有问题的。（除非本地官员或者法律不准用这个名字）。\n\n`num`是*标识符*的一个例子，也就是你为变量、函数或者其他实型取的名字。从而声明把特定的标识符与电脑的特定的内存区联系在了一起，而且它也建立了信息的类型，或者说数据的类型，来放在那个区域里。\n\n在C语言中，*所有的*变量都需要在被使用之前先*声明*，这也就意味着你必须对于所有在一个程序中使用的变量列出包括数据类型的声明。人们也认为声明变量是一个优秀的编程技巧，而且，在C语言中，它是必须进行的。\n\n通常来说，C语言要求在代码块的起始部分声明变量，而且其他的语句是不允许放在这之前的。也就是说，`main()`函数的函数体会是这个样子。\n\n![传统方式](/img/tradition.png)\n\n\nC99标准学习了C++的时间，现在可以让你在代码块的任何地方声明变量。然而，你还是需要在第一次使用变量之前声明它。所以如果你的编译器支持的话，你就可以像下面这样写：\n\n![C99新方式(1)](/img/C99.png)\n![C99新方式(2)](/img/C992.png)\n\n为了能够和更旧的系统兼容，这本书还是会坚持原来的标准。（一些更新的编译器只有当你设置之后才会支持C99的特点）。\n\n就此，你很可能有三个问题：\n+ 1.数据类型是什么？\n+ 2.在取名的时候我们可以怎么选择？\n+ 3.为什么你需要把变量全部声明出来。\n那就让我们探究这些问题的答案吧。\n\n### 数据类型\n\nC语言主要处理的是这几种数据：十进制整数、字符、浮点数，仅举几例。声明一个整型或者字符类型变量可以使电脑恰当地储存、抓取与翻译数据。你会在下一章研究到更多可用的数据类型。\n\n### 名字的选择\n\n你应该为变量使用有意义的名字（像是`sheep_count`而不是`x3`如果你的程序是数羊的），如果名字不能达到表意的需求，那么就使用注释来解释变量代表了什么。以这种方式为程序做记录是其中一种优秀的编程技巧。\n\n你可以使用的字符要视实际情况而定。C99标准要求不多于63个字符，除非是外部的标识符。（在第12章“内存分级、链接性与储存管理”中会提到），相比于分别只能识别31个字符与6个字符的C90，这是一个巨大的提升，而且老的C语言编译器最多只能接受8个字符。事实上你可以使用更多的字符的，但是编译器会忽略它们。因此，当一个系统有着8个字符的限制时，`shakespeare`与`shakespencil`就会被认为是一样的了，因为它们的前八个字符是一样的。（如果你想要63个字符的例子，可以自己造一个）。\n\n你可以在大写字母、小写字母与下划线之间任意选择。第一个字符必须是一个字母或者一个下划线。下面是一些示范。\n![示范](/img/valid.png)\n操作系统与C语言标准库通常会使用1或2个下划线字符，比如`_kcab`，所以最好避免自己使用它。以一个或者两个下划线字符开始的，标准的标签，比如库中的标识符，会被***储存***起来，也就是说，即使使用它们作为名字并没有任何的语义错误，它是会造成一些名字冲突的。\n\nC的标识符是***区分大小写***的，也就意味着大学字母是被看做与对应的小写字母字符不同的。因此，`stars`与`Stars`和`STARS`是不同的。\n\n为了让C语言能够更加国际化，C99使用通用字符名称机制(UCN)进行了巨大的扩充，在附录B中的参考单元VII“更广大的字符支持”，我们讨论了这些加入的部分。\n\n### 声明变量的四个好处\n\n一些年代更远的语言，比如FORTRAN与BASIC语言的原型版本，可以让你在没有声明的情况下使用变量。那么为什么我们不能在C语言中使用这种简单易行的方法呢？这里就是一些原因：\n+ 把所有的变量放在一个地方能够让阅读者更容易地知道程序是关于什么的。这点好处在你给变量取有意义的名称的时候尤其明显，（就像`taxrate`与`r`），如果名字不能达意就使用注释来解释，以这种方式给程序做记录是一种良好的编程技巧。\n+ 通过思考声明变量是为了什么鼓励你全心投入地去写程序之前做一些准备。程序开始需要什么类型的信息？我到底想要程序输出什么？呈现数据的最好方式是什么？\n+ 声明变量有助于我们预防编程中更多难以发现又狡猾的错误之一-也就是拼错了变量的名字。举个例子，假设在一些没有声明的语言中，你写下了这个语句。\n\n```C\nradius1 = 20.4;\n```\n\n然后在另一个地方，你拼错了变量名。\n\n```C\n> circum = 6.28 * radiusl;\n```\n\n你无意地把数字`1`换成了`l`，那种语言也会创造一个`radiusl`的变量，然后用未知的值（或许是0，或许是垃圾值），`circum`就会被给予一个错误的值，而且你可能需要极其多的时间来搞清楚为什么，这在C语言是不可能出现的（除非你确实是笨到家了去定义两个这样相似的变量名），因为编译器会在radiusl出现的时候报错。\n\n+ 如果你不声明变量的话，你的C语言程序是不会进行编译的。如果先前的原因没有动摇你的话，对于这一点你可就得好好想想了。\n\n既然你需要声明需要使用的变量，它们会到哪里呢？就像上文提过的，C语言在C99之前就要求声明需要在代码块之前完成，遵循这种把声明放在一起的做法，你就可以更容易地得知程序正在做什么。当然，把你的声明分布在各个地方也是有好处的，正像现在C99所允许的。这也就是在你赋值之前先声明变量。那让你更难以忘记给他们赋值。作为关键性的事情，许多的编译器还不支持C99的这个规则。\n\n### 赋值\n```C\nnum = 1;\n```\n\n下一行的程序是一个***赋值语句***，C语言中的其中一种基础运算。这个例子的意思是“把值`1`赋给变量`num`，之前的`int num`”这一行在电脑内存中为`num`分配了空间，这一行也就在这个空间中储存值。如果想要的的话你可以过会给`num`赋另一个值，那也就是`num`被叫做***变量***的原因。需要注意的是赋值语句会把值从右边到左边传递。\n同时，这一句也是以分号结尾的，就像图2.2中显示的。\n![赋值图示](/img/assignment.png)\n\n## `printf()`函数\n\n```C\nprintf(\"I am a simple \");\nprintf(\"computer.\\n\");\nprintf(\"My favorite number is %d because it is first.\\n\",num);\n```\n这些行使用了一个C标准库中叫`printf`的函数，圆括号表明了`printf`是一个函数的名字，在圆括号之中的内容就是`main()`函数向`printf()`函数传递的信息。例如，第一行就传递了这句话 `I am a simple`这样的信息叫做***参数***，或者更加充分地，叫做函数的***实际参数***（见图2.3），那么`printf()`函数会对对这种语句做些什么呢？它会抓取在双引号之间的一切，然后把文本打印在屏幕上。\n\n![函数调用](/img/calling.png)\n\n第一行`printf()`是你调用函数的一个很好的例子，你只需要打字写下函数的名称，把需要的参数放在圆括号内。当程序运行到这一行时，控制流就转换到已经定义的函数（在这个例子中是`printf()`）中，然后当函数已经完成了它需要做的事情之后，控制流就又回到原来的（***调用***）函数-在这个例子中是`main()`。\n\n下一行的`printf`呢？它在引号中包含了`\\n`这个字符，而且它并没有被打印下来？发生了什么？`\\n`的作用其实是另起一行，`\\n`的组合体（打印下来是两个字符）就组成了`\\n`这个叫***换行符***的新字符。对于`printf()`它意味着“在左下角再起一行”。也就是说，打印换行符和你在常规键盘上按下`enter`键的作用是差不多的。那么为什么不在打字写`printf`的时候用`Enter`键呢？那是因为因为那只会被认为是对于你的编译器的即时的指令，而不是对于源码的指令，也就是说，当你按下`enter`键时编辑器会退出当前的行，然后另起一行。换行符，影响着程序是如何显示的。\n\n换行符是***转义字符***的范例，***转义字符***是用来呈现难以或者几乎不能通过打印显示出来的字符的。其他的还有`\\t`对应着`Tab`、`\\b`对应着`Backspace`，每一个转义字符都会由`\\`来起始，我们会在第三章：C语言与数据再回到这个话题深入研究。\n\n这也就解释了为什么三个`printf`却只有两行文字了，第一个`printf()`命令没有换行符，但是第二个与第三个是有的。\n\n最后的`printf()`又带来了另外一个异样的地方：当这行文字被打印的时候`%d`发生了什么？你应该还记得，输出是这个样子的。\n\n```Bash\nMy favorite number is 1 because it is first.\n```\n啊哈，当被打印出来的时候，数字`1`就是`%d`的替换物，而且变量`num`的值就是`1`，`%d`是展示`num`的值在什么时候被打印的占位符，这一行与下面的BASIC语句是相似的：\n\n```BASIC\nPRINT \"My favorite number is \"; num; because it is first.\"\n```\n事实上，C语言的版本比这个做的工作还要多一点，`%`告诉程序有一个变量需要在这个区域被输出，`d`表达了要把这个变量以十进制整数的方式输出。`printf`还可以以其他变量形式进行输出，包括十六进制数、带有十进制小数点的数。事实上，`printf()`中的`f`表明了它是一个***格式化***打印函数。每种数据类型都有自己的指示符，这本书也会在介绍新的数据类型的同时引入对应的指示符。\n\n### 返回语句\n```C\nreturn 0;\n```\n\n返回语句是这个程序的最后一个语句，在`int main(void)`中的`int`意味着`main()`函数应该返回一个十进制整数。`main()`函数这样返回是C语言标准要求的。返回值的C语言函数都会使用return语句来进行这个操作，return语句包含着关键字`return`与返回的值，以一个分号结束。如果你遗漏了这一句，大多数编译器会报错，但是它们仍然会对程序进行编译。这样的话，你可以把return语句看成为了增加逻辑的连贯性的东西，但是它对于一些操作系统是由实际用处的，包括DOS和Unix，我们在第11章会更深入地对于这个话题给出解释。\n\n# 2.3 简单程序的结构\n\n既然你已经看过了具体的例子，你已经准备好了解C语言程序的一些基本规则了。***程序***由包含一个函数或者多个函数的组组成，其中一个必须叫`main()`对于函数的描述包括函数头与函数体，***函数头***包括预处理语句，如`#include`，与函数的名字。你可以通过看圆括号的方式来得知这是个函数，即使圆括号可能是空的。***函数体***是由大括号框定的，它包括了一系列的语句，每一个都是由一个分号结尾的（见图2.4）。在例子中有***声明语句***，它是用来声明变量的类型与名字的，还有***赋值语句***，它给予变量一个值。然后还有三个***print语句***，每一个都调用了`printf()`函数，这些print语句是***函数调用语句***的一些示范。最后`main()`函数以返回值结束。\n\n简单来说，一个简单的、标准的C语言程序应该使用下面的格式。\n![图2.4](/img/function1.png)\n![标准格式](/img/structure.png)\n\n# 2.4 可读性建议\n\n使你的程序变得更可读是一种优秀的编程实践。可读性高的程序很容易理解，也就很容易去修改、纠正。让一个程序变得可读的过程也帮助你理清你对于程序执行自己的概念。\n\n你已经看过两种可以增加可读性的技巧了：选择变量名与使用注释。注意这两种技巧是相互补充的。如果你给一个变量注名`width`，你就不需要对于这个变量表示什么做任何解释了。但是叫做`video_routine_4`的变量就需要对于video routine 4的解释。\n\n另一个技巧是使用空行来分隔函数中的概念模块。例如，简单的实例程序就使用了空行分开了声明部分与行动部分。C语言不需要空行，但是它能够提高可读性。\n\n第四个技巧就是每行使用一个语句。再一次，这是一个针对于可读性的惯例，并不是C语言的要求。C语言的格式是***形式自由***的，你可以把几句话放在一行或者一直延伸到第二行。下面的代码是合法的，但是看起来很丑。\n![丑](/img/poorreadability.png)\n分号向编译器指示了一个语句什么时候结束和下一句什么时候开始。但是如果你能够遵从这种在本章的例子中使用的传统手法，程序的逻辑会清晰很多。（见图2.5）\n![可读性规范](/img/readable.png)\n\n# 2.5 更进一步\n\n我们的第一个C语言例子还是很简单的，接下来的图2.2就是第二个例子，但也并不是非常难。\n\n![例子](/img/example2.png)\n\n新在哪里呢？代码中提供了对于程序的描述（在注释中），声明了很多变量，做了一些乘法运算，然后把这两个变量的值打印下来，让我们把这些点深入地了解一下。\n\n## 记录 Documentation\n\n第一，程序是以注释开始的（使用的是新的注释形式），它确定了文件名与程序的目的。这种程序的记录只花费一分钟就可以做，而且之后会在你浏览多个文件并打印它们的时候起到很大帮助。\n\n## 多行声明 Multiple Declarations\n\n然后，程序在一行中声明了两个而不是一个变量。为了达成这个目的，可以把两个变量（`feet`与`fathoms`）的声明使用一个逗号隔开，也就是下面这样。\n\n```C\nint feet, fathoms;\n```\n\n它和下面的形式是等价的。\n\n```C\nint feet;\nint fathoms;\n```\n\n## 运算 Multiplication\n\n第三步，程序进行运算，它利用了计算机系统庞大的算力来计算2乘6。\n在C语言中，同样也在很多语言中，`*`是乘法运算的符号。\n因此，下面的语句：\n\n```C\nfeet = 6 * fathoms;\n```\n\n它的意思就是：查看`fathoms`的值，乘以6，然后把这个运算的结果的值赋给变量`feet`。\n\n## 打印多个值 Printing Multiple Values\n\n最终，程序更多样地使用了`printf()`如果你编译运行过这个例子，输出应该是这个样子的。\n\n```Bash\nThere are 12 feet in 2 fathoms！\nYes, I said 12 feet!\n```\n\n这一次，代码在第一次使用`printf()`的时候，使用了两次替代符，在双引号中的第一个`%d`被在后面引用列表的第一个变量的值替换了(`feet`)然后第二个`%d`被第二个变量代替了。要注意的是待打印变量列表是在双引号部分后面，另外也注意每一个都是用括号分开的。\n\n第二次使用`printf()`表明了打印的值并不一定是变量的，只是必须要指定一个值，就像`6 * fathoms`这样，可以是恰当类型的值。\n\n这个程序受篇幅不长，但是它可以呈现把fathoms转换到feet的核心。我们需要的就是动态地去赋其他的值给`feet`我们会在以后的章节解释如何做。\n\n# 2.6 顺便一提：多重函数\n\n目前为止，这些程序已经使用过了基本的`printf()`函数。图2.3向你展示了如何把自己的函数-除了`main()`以外的函数-加到程序里。\n\n![两个函数的程序](/img/twofunc.png)\n\n输出是这个样子的。\n\n```Bash\nI will summon the butler function.\nYou rang, sir?\nYes,Bring me some tea and writeable CD-ROMS.\n```\n\n`butler()`函数在程序中出现了三次，第一次出现是在***原型***中，那告诉了编译器要使用的函数。第二次出现是在`main()`函数中，在***函数调用***中出现，最终，程序呈现了***函数的定义***过程，那是函数本身的源码。让我们再来看看这三次出现。\n\nC90标准添加了原型，老翻译器可能并不能识别它们（我们将会讲到当你使用那种编译器的时候要怎么做。）原型就是一种告诉编译器你正在使用一个特定的函数的声明。它也指定了函数的属性。例如，`butler()`函数的第一个词`void`指明了它没有返回值。（大体上，函数可以为了使用值而返回这些值，但`butler`没有），第二个`void`-在`butler(void)`-的意思是它没有参数。因此，当编译到达`main()`函数中`butler`被使用的这一行时，它会检查是否`butler`是被恰当地使用的。需要注意，`void`是被用来表示empty（空），而不是invalid（不合法、无效）。\n\n早先的C语言支持的函数声明类型有限，那时你只能定下返回值的类型，但是对于参数的描述就被省略。\n\n```C\nvoid butler();\n```\n\n那时的C语言代码使用的函数声明就像是上述的样子，而不是函数原型，C90与C99标准都能够辨认出这种更老的形式，但是它们表示这种形式会随着时间被淘汰，所以不要用。如果你从一些更老的地方拿到了C语言代码，你有可能想要把老式的声明变成原型。以后的章节会回到原型制作、函数声明与返回值上。\n\n接下来，你通过给出`butler`的名字与圆括号来援引函数。（调用），当`butler`完成了它的工作，程序就会移向`main()`函数中的下一行。\n\n最终，函数`butler()`以与`main()`函数一样的形式被定义，有函数头与用大括号框定的函数体。函数头重复了你在原型中提供的信息：`butler`不使用信息，而且不返回值。对于老旧的编译器，省略第二个`void`。\n\n有一点需要注意的，就是在`main()`函数中`butler()`被调用的位置-而不是`butler()`函数被定义的位置-决定了`butler()`函数的运行位置。比如，你可以把`butler()`函数的定义放在`main()`函数的前面，程序还是会照旧那样把`butler()`放在两个`printf()`中间运行。记住，所有的C语言程序都是以`main()`函数开始的，无论`main()`函数在程序文件的什么位置。然而，C语言实际上是先把`main()`函数列出来，因为它通常提供了基本的程序框架。\n\nC语言标准建议你为所有你使用的函数提供原型，标准的`include`文件为标准库函数做这个工作，例如，在标准C语言下，`stdio.h`文件就有`printf()`函数的原型，第六章的最后一个例子会告诉你如何去更广泛地为非`void`的函数制作原型，第九章会全面地讲述函数。\n\n# 2.7 调试引入\n\n现在你已经可以写一个简单的C语言程序了，你有可能海域犯些简单的错误。程序的错误通常被叫做***bugs***，寻找与修复它们就叫做***调试***，图2.4就展现了有些bugs的程序，看看你是否能够找到。\n\n![找找吧，有几处？](/img/nogood.png)\n\n## 语法错误 Syntax Errors\n\n图2.4的例子犯了几个语法错误，当你没有遵循C语言的规则，你就会犯***语法错误***，这也可以类比到英语的语法错误。例如，思考一下这句话：***Bugs frustrate be can.*** 这句话使用的单词是正确的，但是并没有遵循单词顺序的规律，而且使用的单词形式也不太对，不管怎样，C语言的语法错误就是在错误的地方使用了正确的C语言标志。\n\n所以`nogood.c`这个程序究竟犯了什么错误呢？第一，它使用的是括号而不是大括号来标记函数体，也是把正确的C语言符号用在了错误的地方，第二，声明应该是这个样子的\n\n```C\n\tint n, n2, n3;\n```\n\n或者这样\n\n```C\n\tint n;\n\tint n2;\n\tint n3;\n```\n\n而且，这个例子遗漏了安置一条注释必须要使用的`*/`符号对（作为替换，你可以用`//`形式替换`/*`），最后，它遗漏了`printf()`后的本应作为语句结束标志的分号。\n\n你如何来检查语法错误呢？第一，在编译之前，浏览你的源码，看你是否看到一些明显的错误。第二，你可以检查编译器找到的错误，因为它的一部分工作就是检查语义错误。当你编译程序的时候，编译器会反馈找到的所有错误，并且会明确错误类型与出错的位置。\n\n然而，编译器有时也会混乱，实际上的一个区域内的语义错误有可能会让编译器错误地认为它找到了其他种类的错误。例如，因为这个例子没有恰当地声明`n2`与`n3`，所以编译器会认为它在被使用的地方找到了错误。事实上，与其试图一次把所有报告的错误修正过来，不如只修改一两个然后重新编译，这样的话有些其他种类的错误就会消失。继续这样做，直到程序正常运行。另一个常见的编译器“诡计”是它会在后面的行报错，但其实出错是在前面的行里。例如，编译器有可能直到下一行才能判断出上一行遗漏了分号。所以如果编译器报错说缺少分号，那么在这一行之前进行检查。\n\n## 语义错误 Semantic Errors\n\n语义错误是在意义上的错误，例如，思考这一句话: ***Furry inflation thinks greenly.***  语法上是正确的，因为形容词、名词、动词、还有副词都在合适的位置上，但这句话就是一派胡言。在C语言中，当你遵循了C语言的规则但是导致了不合适的结果，这个例子中就有这样的错误。\n\n```C\nn3 = n2 * n2;\n```\n\nn3本应该是用来展现`n`的3次方的，结果程序把它算成了`n`的4次方。编译器是检测不出来语义错误的，因为它们并不违背C语言的规则。编译器没有能力去猜测你程序的意图。那也就只能由你来找到这些种类的错误了。一种方式是把程序做的事情与程序应该做的事情进行对比。例如，假定你已经找到了例子中的语法错误，那么它现在看起来是这个图2.5样子的。\n\n![还是错的...](/img/stillbad.png)\n\n它的输出是\n\n```Bash\nn = 5, n squared = 25, n cubed = 625 \n```\n\n如果你可以口算立方的话，那么你就会注意到625是个错误的值。下一阶段就是找到你是如何陷入这个错误的。例如，你有可能会通过观察找到错误。大体上，然而你还需要一些系统的方法。一种方法是假装你是电脑，然后一步步地跟着程序走，让我们现在就尝试一下那个方法。\n\n程序体以声明三个变量`n1, n2与n3`开始，你可以通过画三个盒子并把它们各自标注名称来模拟这个情况。（看图2.6）然后，程序会把5赋给`n`，通过把数字5写在盒子里来模拟，然后，程序用`n`乘`n`然后把它的值赋给`n2`，所以看向盒子`n`，看着5乘5得到了25，然后把25放在盒子里。为了模拟下一句，也是同样，看向盒子2，然后用25乘25，然后把这个值给予`n3`，啊哈，你做乘法的时候使用的是`n`的平方而不是用`n`。\n\n嗯，有可能这个过程对于这个程序有点过了，但是以这种方式一步步地浏览程序总会是得知发生了什么最好的方法。\n\n## 程序状态\n\n通过手工地一步步地追踪程序，追踪每一个变量，你监视了程序的状态，**程序状态**就是所有变量在一个时间点上被给予的一组值。它是运算状态的快照。\n\n![追踪程序状态](/img/tracer.png)\n\n我们刚刚讨论了一种追踪程序状态的方法：通过自己一步一步地运行程序。在一个进行1000次迭代的程序中，你可能觉得并不能完成那个工作。然而，你还是可以经历一些迭代过程，看看你的程序是不是按你想要的方式来运行的。然而，通常是会有这种情况的，你会按照你想要的方式去“执行”它们，而不是真正把它们写下来，所以在写真正的代码的时候要努力做到正确。\n\n另一个方法就是通过在程序的自始至终放置几个`printf`语句来定位语义问题。在程序运行的关键点监测选定变量的数值。看看数值是怎么变化的可以让你知道正在发生什么。在你让程序按照你满意的方式运行之后，你就可以去掉多余的语句去重新编译了。\n\n第三种监测的方法就是使用调试器。***Debugger***是一种能够让你一步一步地运行程序并且查看程序变量的值的程序。它们使用的难易程度与复杂度都各有不同。更高级的编译器可以显示哪一行代码正在被运行。这对于多路径的程序是非常方便的，因为可以很容易地看到走的是哪一条路径。如果你的编译器中有调试器，那么花谢时间学学则呢么使用吧。比如像图2.4那样尝试使用它。\n\n# 2.8 关键字与内置标识符\n\n关键字就是C语言中的词汇，因为它们对于C语言是特别的，所以你不能把它们作为标识符来使用。有一些关键字分别了多种多样的类型，比如说`int`，其他的比如说`if`是被用来控制程序运行语句的顺序的。在以下的C语言关键字的列表中，黑体表示在ISO/ANSI C90标准下的关键字，斜体的是C99标准加入的新关键字\n\n![关键字](/img/keywords.png)\n\n如果你尝试把关键字用于变量的名字，编译器会把它识别为语法错误，还有其他的标识符，它们叫做***内建标识符***，你也是不应该使用的，他们不会导致语法错误，因为它们是合法的名称，但是语言已经使用过或者还保留着使用它们的权利，所以如果你使用这些标识符来表示其他的东西会引起问题。内置的标识符包括以下划线开始的词还有库函数的名称，就像`printf()`.\n\n# 关键概念\n\n电脑编程是一项有挑战性的活动，它需要复杂与概念化的思考，而且还需要对于细节格外注意。你会发现编译器会强制你去注意细节。当你对朋友说话的时候，你可能会把几个词用错，犯几个语法错误，可能话没有说完，但是你的朋友仍然能够理解你在说什么。但是编译器不会允许这种情况。对于编译器来说，几乎对了也是错的。\n\n编译器并不能在概念问题帮到你多少，比如在这里说的这些东西。所以这本书会尽力通过给出每一章关键概念的大纲来弥合那个差距。\n\n对这一章，你的目标是你需要理解C语言程序是什么，你可以认为程序就是你对于想让电脑干什么的描述。编译器精细化地解决把你的描述变为含蓄的机器语言。（对于编译器做多少工作的测量显示，它可以从你1KB的源码文件创造出来60KB的可执行程序）即使一个简单的C语言程序也需要很多的机器语言来代表它们。）因为编译器并没有智能，你必须使用编译器的词汇来描述你的意思，而且这些词汇是由C语言标准设立的正规规则。（即使很受限制，还是比直接用机器语言来表达强的多了！）\n\n编译器期望着收到以独特的形式写出的指令，这一章已经详细地描述了。你作为编程人员的工作就是表达在编译器框架下你对于程序应该如何运作的想法-由C语言标准所引导就可以正确地运行。\n\n# 回顾问题\n\n4. Indiana Sloth准备了如下的程序，让你看一看是不是正确，请帮帮他吧。\n\n![问题4](/img/quest4.png)\n\nmain函数用了{}来括起来，函数体用的是括号，是错的。\n声明语句没加分号，赋值只需要一个=号即可。\n是printf而不是print。没加双引号，没加引用列表。最后没结束。stdio.h打错了而且#和<>，注释另一边写反了，导致全文为注释。\n\n5.假设下面的每一个例子都是完整程序的一部分，它们每一个会打印什么呢?\n\n![问题5](/img/quest5.png)\n\n```Bash\n#a.\nBaa Baa Black Sheep.Have you any wool?\n\n#b.\nBegone!\ncreature of lard!\n#c.\nWhat?\nNo/nBonzo?\n\n#d.\n2 + 2 = 4\n```\n\n6. 下面哪些是C语言关键字？ `main, int, function, char, =`\nint、char\n\n7. 你会如何把**行数**与**字数**打印出来？\n在以下的形式中`There were 3020 words and 350 lines.`\n\n```C\nword = 3020;\nline = 350;\nprintf(\"There were %d words and %d lines.\", word, line);\n```\n\n8. 思考下面的程序\n![问题8](/img/quest8.png)\n在第7行之后的程序状态是什么？\n第八与第九行呢？\n\n> 第7行 a = 5，b = 2\n\n> 第8行 a = 5， b = 5\n\n> 第9行 a = 5， b = 5\n\n# 编程训练\n\n只是阅读是不够的，你得尝试写一两个简单的程序来看看是不是写程序和你看这一章的感觉一样流畅。下面有一些建议，但是你也确实需要独立思考一些问题。你会在网站上找到下面选出问题的答案。\n\n1. 调用一次printf，把你的姓与名在一行中输出\n\t再调用一次printf，把你的姓与名在两行中输出。\n\t使用两次printf把你的姓和名在一行中输出。\n\n```C\n//简略一写\nprintf(\"Mike Smith\\n\");\nprintf(\"Mike\\nSmith\\n\");\nprintf(\"Mike\");\nprintf(\"Smith\\n\");\n```\n\n2. 写一个打印你的姓名与地址的程序\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tprintf(\"My name is Ywx\\n\");\n\tprintf(\"Address: Zhengzhou city in Henan province\");\n\treturn 0;\n}\n```\n\n3. 写一个把你的年龄转换成天数的程序，展示两者的值。不必关心闰年和平年。\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint age, days;\n\tscanf(\"%d\", &age);\n\tdays = age * 365;\n\tprintf(\"%d %d\", age, days);\n\treturn 0;\n}\n```\n\n4.写一个会打印出以下语句的程序\n\n![语句](/img/four.png)\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tfor(int i = 0;i < 3;i++)\n\t\tprintf(\"For he's a jolly good fellow!\\n\");\n\tprintf(\"Which nobody can deny!\");\n\treturn 0;\n}\n```\n\n5.写一个程序，创建一个叫做`toes`的变量，把`toes`设为10，\n计算toes的二倍和平方分别是什么，并把它们打印下来\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\ttoes = 10;\n\tprintf(\"%d %d %d\", toes, toes * 2, toes * toes);\n\treturn 0;\n}\n```\n\n6.写一个会打印出如下的输出的程序\n\n![Smile!](/img/six.png)\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tfor(int i = 3;i >= 1;i--)\n\t{\n\t\tfor(int j = 0;j < i;j++)\n\t\t{\n\t\t\tprintf(\"Smile\");\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n\n7.写一个叫做`one_three()`的函数，这个函数应该在一行内展现文字`one`然后调用函数`two()`，接着在另一行内显示文字`three`。\n`two()`把文字`two`在一行输出。以Stating now开始，像这样。\n\n![数数](/img/last.png)\n\n```C\n#include <stdio.h>\n\nvoid two()\n{\n\tprintf(\"two\\n\");\n}\n\nvoid one_three()\n{\n\tprintf(\"one\\n\");\n\ttwo();\n\tprintf(\"three\\n\")l\n}\n\nint main(void)\n{\n\tprintf(\"starting now:\\n\");\n\tone_three();\n\treturn 0;\n}\n```\n\n> End...","slug":"C-premier-plus-Chapter-2","published":1,"updated":"2024-03-04T01:25:38.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nxm0003zkue9ee39agy","content":"<h1 id=\"第二章-C语言介绍\"><a href=\"#第二章-C语言介绍\" class=\"headerlink\" title=\"第二章 C语言介绍\"></a>第二章 C语言介绍</h1><blockquote>\n<p><strong>你将会在这一章学到</strong><br>    1.赋值运算符<br>    2.函数main()与printf()<br>    3.一个简单C语言程序的构成<br>    4.创造整型变量，赋值并在屏幕上显示它们的值<br>    5.换行符<code>&#39;\\n&#39;</code><br>    6.如何在程序中添加注释，让你的程序中同时拥有多个函数<br>        并能找出程序中的错误。<br>    7.关键字是什么</p>\n</blockquote>\n<p>C语言的程序是什么样子的？如果你大体浏览过这本书，你会看到很多的例子的。几乎一致的是，你会觉得C语言程序看起来很怪异，有些需要用到类似<code>&#123;，cp-&gt;tort,*ptr</code>这样的符号。随着你通读完这本书，你就会慢慢觉得这些符号不是那么陌生了，会变得更加熟悉，甚至有可能会很高兴遇见它们。在这一章中，我们从给出并解释一个简单的实例起步。同时，我们也会强调一些C语言的基本特征。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"2-1-一个简单的例子\"><a href=\"#2-1-一个简单的例子\" class=\"headerlink\" title=\"2.1 一个简单的例子\"></a>2.1 一个简单的例子</h1><p>让我们先研究一个简单的C语言程序。在图2.1展示的这个程序，专门为了突出一些C语言编程的特征。在你将要读接下来对于程序的逐行解释之前，先看看图2.1，试试你是不是能够靠自己搞明白它会做什么事情。<br><img src=\"/img/example.png\" alt=\"小例子\"></p>\n<blockquote>\n<p>1.#include &lt;stdio.h&gt; 包含头文件<br>2.int main(void) 定义一个返回值为整数，输入值为空的主函数<br>{<br>int num; 定义一个名为num的整型变量<br>num &#x3D; 1; 给num赋值1</p>\n<pre><code>printf(&quot;I am a simple &quot;); 输出一行字\nprintf(&quot;computer. \\n&quot;);\n输出一个词，接在刚才的一句话之后，并换行\nprintf(&quot;My favorite number is %d because it is first.\\n&quot;,num);\nreturn 0; 返回值0，表示结束。\n</code></pre>\n<p>}</p>\n<p>注释中的三个部分：1.定义变量 2.赋值 3.使用函数</p>\n</blockquote>\n<p>如果你认为这个函数将会在你的屏幕上打印一些东西。是的，你是对的。但对于明确的什么东西将会被打印到屏幕上可能并不明显，所以我们运行这个程序，看看会发生什么。</p>\n<ul>\n<li>第一步，使用你最喜欢的编辑器<br>  或者你的编译器中最喜欢的编辑器</li>\n<li>第二步，创造一个包括了图2.1中文本的文件，<br>  并且以<code>.c</code>为结尾，从而满足你的系统对于文件名的需要。<br>  举个例子<code>first.c</code>就是合法的名称。</li>\n<li>第三步，编译并运行程序。<br>  查看第一章来得知这方面的详细过程。</li>\n</ul>\n<p>如果一切都运转良好的话，你会在屏幕上看到这样的输出。<br><img src=\"/img/%E8%BE%93%E5%87%BA.png\" alt=\"输出\"></p>\n<p>总之，这个结果并不是很惊人，但是<code>\\n</code>与<code>%d</code>的作用是什么呢？<br>程序中有几行也看起来很陌生，这就到解释的时候了。</p>\n<h1 id=\"2-2-解释这个例子\"><a href=\"#2-2-解释这个例子\" class=\"headerlink\" title=\"2.2 解释这个例子\"></a>2.2 解释这个例子</h1><p>我们会对这个例子解释两遍，第一遍（Pass1：速览大纲），强调了每一行的意义，从而你能够大体上得知发生了什么。第二遍（Pass2：程序细节），探索了特定部分的含义，并且给出了细节以便你能够更深刻地理解。</p>\n<p>图2.1总结了C语言程序的每一个部分，<br>除了我们第一个例子使用的，它们还包含着更多要素与步骤。</p>\n<h2 id=\"Pass1：速览大纲：\"><a href=\"#Pass1：速览大纲：\" class=\"headerlink\" title=\"Pass1：速览大纲：\"></a>Pass1：速览大纲：</h2><p>这一部分包括了对于程序每一行的简短解释。<br>下一部分会更加充分地探索这些主题的内容。</p>\n<blockquote>\n<p>#include &lt;stdio.h&gt; 包含另一个文件。</p>\n</blockquote>\n<p>这一行告诉编译器要从文件<code>stdio.h</code>中收集信息，这个文件是所有C语言编译器安装包的基础部分，提供了对于键盘输入与显示输出的支持。</p>\n<blockquote>\n<p>int main(void) 一个函数名</p>\n</blockquote>\n<p><img src=\"/img/analysis.png\" alt=\"对C语言程序的分析\"></p>\n<p>C语言包括一个或者多个<em><strong>函数</strong></em>，它是C语言程序的基本模块。这个程序由一个叫做<code>main</code>的函数组成，圆括号表示了<code>main()</code>是个函数的名字。<code>int</code>表明了<code>main()</code>函数会返回一个整数，<code>void</code>表明<code>main()</code>不会获取任何的参数，这些都是我们过会会深入研究的事情。现在，接受<code>void</code>与<code>int</code>是在ISO&#x2F;ANSI标准下定义<code>main()</code>函数的方法（如果你有在ISO&#x2F;ANSI标准之前的编译器，省略<code>void</code>就好，但你可能也想获取更新的版本来避免不协调。）</p>\n<blockquote>\n<p>&#x2F;* a simple program*&#x2F; 一条注释。</p>\n</blockquote>\n<p><code>/*</code>与<code>*/</code>符号框定了一条能够帮助阐明一个程序的注释，它们是只为阅读者准备的，会被编译器忽略掉。</p>\n<blockquote>\n<p>{    函数体的开头</p>\n</blockquote>\n<p>起始大括号<code>&#123;</code>标志着函数中语句的开始，<br>函数的定义由终止大括号<code>&#125;</code>结束。</p>\n<blockquote>\n<p>int num; 一个声明语句</p>\n</blockquote>\n<p>这个语句声明了你正在使用一个叫做<code>num</code>的变量，而且<code>num</code>会是<code>int</code>（integer-十进制整数）类型。</p>\n<blockquote>\n<p>num &#x3D; 1; 一个赋值语句</p>\n</blockquote>\n<p>这个语句<code>num = 1</code>把值<code>1</code>赋给叫做<code>num</code>的变量。</p>\n<blockquote>\n<p>printf(“I am a simple “); 一个调用函数的语句</p>\n</blockquote>\n<p>第一句使用了<code>printf()</code>函数来在屏幕上显示<code>I am a simple </code>这句话，把光标留在了同一行。这里的<code>printf()</code>函数是标准C语言库的一部分。它被称作一个<em><strong>函数</strong></em>，而在程序中使用一个函数叫<em><strong>调用函数</strong></em>。</p>\n<blockquote>\n<p>printf(“computer.\\n”);  另一个函数调用语句</p>\n</blockquote>\n<p>第二次调用<code>printf()</code>函数是在上一句打印下来的话后面添加了<code>computer</code>，<code>\\n</code>符号是告诉电脑要另起一行-也就是说把光标移到下一行的起始。</p>\n<blockquote>\n<p>printf(“My favorite number is %d because it is first.\\n”);</p>\n</blockquote>\n<p>最后一次使用<code>printf()</code>是基于引用的语句把<code>num</code>的数值(1)打印到屏幕上，<code>%d</code>指示电脑从哪里，以什么方式输出<code>num</code>的数值。</p>\n<blockquote>\n<p>return 0;</p>\n</blockquote>\n<p>一个C语言函数是可以提供，或者说***return(返回)***，一个数值</p>\n<blockquote>\n<p>} 结束。</p>\n</blockquote>\n<p>正像说过的，程序以终止大括号结束。</p>\n<h2 id=\"Pass2：程序细节\"><a href=\"#Pass2：程序细节\" class=\"headerlink\" title=\"Pass2：程序细节\"></a>Pass2：程序细节</h2><p>既然你已经大体了解了图2.1中的内容，我们要更详尽地研究一下它了。再一次，我们将会逐行地查看程序，为了能够培养一种更宏观的C语言编程视角，这一句我们会以每一行代码作为起点，然后一步步深入代码之后的细节。</p>\n<h3 id=\"include-指示与头文件\"><a href=\"#include-指示与头文件\" class=\"headerlink\" title=\"# include 指示与头文件\"></a># include <strong>指示与头文件</strong></h3><h4 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"# include &lt;stdio.h&gt;\"></a># include &lt;stdio.h&gt;</h4><p>这是一个程序的开始行，**#include &lt;stdio.h&gt;** 的作用就和你把<code>stdio.h</code>中所有的内容都打字写在程序#include的位置是一样的。因此，这是一个剪切粘贴的操作，在共享对于很多程序都一样的信息上，<strong>include</strong>文件提供了一种便利的方式。</p>\n<p><code>#include</code>语句是C语言<strong>预处理指令</strong>的一个范例。大体上，C语言编译器会在编译之前对于源码做一些准备工作，这在术语中称为<em><strong>预处理</strong></em></p>\n<p>在大部分上，头文件包含着编译器制作最终的可执行文件需要使用的信息。例如，它们可能会定义一些常量或者声明一些函数的名字，与它们应该被怎样使用，但是库中函数真正的代码-编译前代码，不是在头文件中的。编译器的一部分-连接器会负责找到你需要的这一部分库代码。简单地说，头文件会帮助引导编译器来正确地把程序组装起来。</p>\n<p>ISO&#x2F;ANSI标准下的C语言必须提供头文件，有些程序需要包含<code>stdio.h</code>头文件，有些不需要。对于C语言实例的记录应该包含使用的C语言标准库函数的描述，这些函数描述就确认了需要什么头文件。例如对于<code>printf()</code>的描述就表明了需要使用<code>stdio.h</code>，省略恰当的头文件可能并不会影响特定的程序，但是最好不要依赖它。这本书每一次使用库函数时，我们都会为函数使用<code>include</code>来把ISO&#x2F;ANSI标准制定的的文件包括在程序内。</p>\n<p><img src=\"/img/original.png\" alt=\"为什么输入输出不是内建函数？\"></p>\n<p>为什么输入输出并不是内建函数？<br>你有可能想知道为什么像输入输出这样基本的东西并不会被自动包含进程序中。一种回答是，并不是所有的程序都要使用I&#x2F;O（input&#x2F;output）包，而且C语言的哲学中也说到要避免承担不必要的重量。这个经济学上资源利用的准则让C语言受到嵌入式编程的欢迎-例如，为控制自动燃油系统编写代码。顺带一说，#include这一行甚至不是C语言的语句。#符号阐述了这一行是在编译器之前被预处理器处理的代码。你会在后面学习预处理指令时遇到很多例子，而且在第16章对这个主题还有更加充分的讲述。</p>\n<h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a><code>main</code>函数</h3><h4 id=\"int-main-void\"><a href=\"#int-main-void\" class=\"headerlink\" title=\"int main(void)\"></a>int main(void)</h4><p>程序的下一行声明了一个名字为<code>main</code>的函数，<code>main</code>是个挺普通的程序，但是它是唯一的选择。一个C语言程序（有些我们无需担心的例外），通常是以名叫<code>main</code>的函数开始运行的，其他函数的名字是可以随意选择的，但是作为一切的开端，<code>main</code>函数必须存在。那么圆括号呢？它们是为了确定<code>main()</code>是个函数，你会很快学习学到关于函数的更多内容。现在，记住这个函数是C语言程序的基础模块。</p>\n<p><code>int</code>是<code>main()</code>函数的返回值类型，它意味着<code>main()</code>返回的数值种类必须是十进制整数(integer)。那么返回到哪里？返回到操作系统-我们会在第六章讨论循环的时候回到这个问题上来。</p>\n<p>跟随在函数名后面的圆括号大体上囊括了需要传递给函数的信息，举个简单的例子，没有东西被传递，那么这个括号就包含着<code>void</code>-空类型（在第11章，“字符指针与字符串函数”介绍了第二种从操作系统把信息传递给<code>main()</code>函数的形式）</p>\n<p>如果你查看过很久以前的C语言代码，你会经常看到程序是以下面的形式开始的:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>C90标准勉强地包容了这个形式，但是C99没有，所以即使你现在的编译器让你写成这个样子，不要听。</p>\n<p>下面是另一种你可能会看见的形式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<p>有一些编译器是允许这样写的，但是没有一个标准把它列为一种选择，<br>因此，编译器也没有必要接受这个形式，有几种确实也没有。再一次，坚守标准的形式，你就不会在更换编译器的时候陷入困境。</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*a simple program*/</span></span><br></pre></td></tr></table></figure>\n\n<p>这一部分由&#x2F; *  * &#x2F;符号框定起来的内容就是注释，使用注释可以让一些人（包括你自己）更好地理解你的程序。C语言的一个很好的特点就是注释可以放在任何地方，甚至与它们解释的“原文内容”放在一行。长一点的知识可以放在一行甚至延伸至多行，以&#x2F; * 开始并以 * &#x2F;结束的内容都会被编译器忽略。下面是注释的合法与非法写法。</p>\n<p><img src=\"/img/comment.png\" alt=\"注释示例\"></p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><blockquote>\n<p>（1.这是一行C语言注释）<br>（2.这个注释延伸到了两行）<br>（3.你也可以这样做）<br>（4.但是这是不合法的因为没有结束符号）</p>\n</blockquote>\n<p>C99添加了注释的另一种形式，它在C++与Java中很受欢迎，这种新形式使用<code>//</code>符号来生成只在一行内的注释。</p>\n<p><img src=\"/img/newform.png\" alt=\"新形式\"></p>\n<p>因为一行的结束标志这这行注释的结束，这种方式需要在注释开始的时候添加注释符号。</p>\n<p>新形式的出现是为了响应旧形式的潜在问题，假设你有下面的代码。</p>\n<p><img src=\"/img/ihope.png\" alt=\"我希望这可以运行...\"></p>\n<p>下一次，我推断你要删除第四行<br>然后意外地把第三行删掉了，<br>然后这代码就会变成这个样子</p>\n<p><img src=\"/img/hopeagain.png\" alt=\"哦不...\"></p>\n<p>现在编译器把第一行的起始符与第四行的结束符进行配对，结果使这四行全部成为了注释，包括那本应该是代码的一部分的一行。因为<code>//</code>并不会延伸到另一行，它不会引起代码的“消失”。</p>\n<p>一些编译器有可能并不支持C99的这个特点，还有些有可能需要改变一些编译器的设置才能够应用C99的特性。</p>\n<h3 id=\"大括号、函数体与代码块\"><a href=\"#大括号、函数体与代码块\" class=\"headerlink\" title=\"大括号、函数体与代码块\"></a>大括号、函数体与代码块</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在图2.1，大括号划定了<code>main()</code>的界限。大体上，所有的C语言函数都需要使用大括号来标志着函数体的起始与结束。它们是必须出现的，所以一定不要漏了。只有大括号是起这个作用的，不要使用圆括号或者中括号。</p>\n<p>大括号还可以被用来把语句聚集在一个函数中，形成一个单元或者语句块。如果你对于Pascal，ADA，Modula-2或者Algol熟悉的话，你就会意识到大括号划定起始与结束在这些语言里也是相似的。</p>\n<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num;</span><br></pre></td></tr></table></figure>\n\n<p>程序的这一行术语中称为<em><strong>声明语句</strong></em>，声明语句是C语言的其中一个最重要的特点。这个特例声明了两件事，一是在函数的某一个部分有一个叫<code>num</code>的变量（好好笑啊哈哈，在那遥远的函数中，有个小变量。）第二，<code>int</code>声明了<code>num</code>是一个十进制整数-也就是说，没有十进制小数点。（<code>int</code>是<em><strong>数据类型</strong></em>的一个例子），编译器使用这些信息为<code>num</code>变量准备合适的内存空间。结尾的分号标志了这一行是C语言的语句或者指令。分号也是这个语句的一部分，并不只是像在Pascal里的语句之间的分隔符。</p>\n<p>C语言中，<code>int</code>是一个确定了一种数据类型的<em>关键字</em>，关键字是我们用来表达语言的单词，而且你不能把它们强占用于其他目的。例如，你不能把<code>int</code>作为函数或者是变量的名称。这些限制在语言之外就会失去作用，反而你把一只猫或者你最喜欢的孩子叫做<code>int</code>是没有问题的。（除非本地官员或者法律不准用这个名字）。</p>\n<p><code>num</code>是<em>标识符</em>的一个例子，也就是你为变量、函数或者其他实型取的名字。从而声明把特定的标识符与电脑的特定的内存区联系在了一起，而且它也建立了信息的类型，或者说数据的类型，来放在那个区域里。</p>\n<p>在C语言中，<em>所有的</em>变量都需要在被使用之前先<em>声明</em>，这也就意味着你必须对于所有在一个程序中使用的变量列出包括数据类型的声明。人们也认为声明变量是一个优秀的编程技巧，而且，在C语言中，它是必须进行的。</p>\n<p>通常来说，C语言要求在代码块的起始部分声明变量，而且其他的语句是不允许放在这之前的。也就是说，<code>main()</code>函数的函数体会是这个样子。</p>\n<p><img src=\"/img/tradition.png\" alt=\"传统方式\"></p>\n<p>C99标准学习了C++的时间，现在可以让你在代码块的任何地方声明变量。然而，你还是需要在第一次使用变量之前声明它。所以如果你的编译器支持的话，你就可以像下面这样写：</p>\n<p><img src=\"/img/C99.png\" alt=\"C99新方式(1)\"><br><img src=\"/img/C992.png\" alt=\"C99新方式(2)\"></p>\n<p>为了能够和更旧的系统兼容，这本书还是会坚持原来的标准。（一些更新的编译器只有当你设置之后才会支持C99的特点）。</p>\n<p>就此，你很可能有三个问题：</p>\n<ul>\n<li>1.数据类型是什么？</li>\n<li>2.在取名的时候我们可以怎么选择？</li>\n<li>3.为什么你需要把变量全部声明出来。<br>那就让我们探究这些问题的答案吧。</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>C语言主要处理的是这几种数据：十进制整数、字符、浮点数，仅举几例。声明一个整型或者字符类型变量可以使电脑恰当地储存、抓取与翻译数据。你会在下一章研究到更多可用的数据类型。</p>\n<h3 id=\"名字的选择\"><a href=\"#名字的选择\" class=\"headerlink\" title=\"名字的选择\"></a>名字的选择</h3><p>你应该为变量使用有意义的名字（像是<code>sheep_count</code>而不是<code>x3</code>如果你的程序是数羊的），如果名字不能达到表意的需求，那么就使用注释来解释变量代表了什么。以这种方式为程序做记录是其中一种优秀的编程技巧。</p>\n<p>你可以使用的字符要视实际情况而定。C99标准要求不多于63个字符，除非是外部的标识符。（在第12章“内存分级、链接性与储存管理”中会提到），相比于分别只能识别31个字符与6个字符的C90，这是一个巨大的提升，而且老的C语言编译器最多只能接受8个字符。事实上你可以使用更多的字符的，但是编译器会忽略它们。因此，当一个系统有着8个字符的限制时，<code>shakespeare</code>与<code>shakespencil</code>就会被认为是一样的了，因为它们的前八个字符是一样的。（如果你想要63个字符的例子，可以自己造一个）。</p>\n<p>你可以在大写字母、小写字母与下划线之间任意选择。第一个字符必须是一个字母或者一个下划线。下面是一些示范。<br><img src=\"/img/valid.png\" alt=\"示范\"><br>操作系统与C语言标准库通常会使用1或2个下划线字符，比如<code>_kcab</code>，所以最好避免自己使用它。以一个或者两个下划线字符开始的，标准的标签，比如库中的标识符，会被<em><strong>储存</strong></em>起来，也就是说，即使使用它们作为名字并没有任何的语义错误，它是会造成一些名字冲突的。</p>\n<p>C的标识符是<em><strong>区分大小写</strong></em>的，也就意味着大学字母是被看做与对应的小写字母字符不同的。因此，<code>stars</code>与<code>Stars</code>和<code>STARS</code>是不同的。</p>\n<p>为了让C语言能够更加国际化，C99使用通用字符名称机制(UCN)进行了巨大的扩充，在附录B中的参考单元VII“更广大的字符支持”，我们讨论了这些加入的部分。</p>\n<h3 id=\"声明变量的四个好处\"><a href=\"#声明变量的四个好处\" class=\"headerlink\" title=\"声明变量的四个好处\"></a>声明变量的四个好处</h3><p>一些年代更远的语言，比如FORTRAN与BASIC语言的原型版本，可以让你在没有声明的情况下使用变量。那么为什么我们不能在C语言中使用这种简单易行的方法呢？这里就是一些原因：</p>\n<ul>\n<li>把所有的变量放在一个地方能够让阅读者更容易地知道程序是关于什么的。这点好处在你给变量取有意义的名称的时候尤其明显，（就像<code>taxrate</code>与<code>r</code>），如果名字不能达意就使用注释来解释，以这种方式给程序做记录是一种良好的编程技巧。</li>\n<li>通过思考声明变量是为了什么鼓励你全心投入地去写程序之前做一些准备。程序开始需要什么类型的信息？我到底想要程序输出什么？呈现数据的最好方式是什么？</li>\n<li>声明变量有助于我们预防编程中更多难以发现又狡猾的错误之一-也就是拼错了变量的名字。举个例子，假设在一些没有声明的语言中，你写下了这个语句。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">radius1 = <span class=\"number\">20.4</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后在另一个地方，你拼错了变量名。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; circum = <span class=\"number\">6.28</span> * radiusl;</span><br></pre></td></tr></table></figure>\n\n<p>你无意地把数字<code>1</code>换成了<code>l</code>，那种语言也会创造一个<code>radiusl</code>的变量，然后用未知的值（或许是0，或许是垃圾值），<code>circum</code>就会被给予一个错误的值，而且你可能需要极其多的时间来搞清楚为什么，这在C语言是不可能出现的（除非你确实是笨到家了去定义两个这样相似的变量名），因为编译器会在radiusl出现的时候报错。</p>\n<ul>\n<li>如果你不声明变量的话，你的C语言程序是不会进行编译的。如果先前的原因没有动摇你的话，对于这一点你可就得好好想想了。</li>\n</ul>\n<p>既然你需要声明需要使用的变量，它们会到哪里呢？就像上文提过的，C语言在C99之前就要求声明需要在代码块之前完成，遵循这种把声明放在一起的做法，你就可以更容易地得知程序正在做什么。当然，把你的声明分布在各个地方也是有好处的，正像现在C99所允许的。这也就是在你赋值之前先声明变量。那让你更难以忘记给他们赋值。作为关键性的事情，许多的编译器还不支持C99的这个规则。</p>\n<h3 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>下一行的程序是一个<em><strong>赋值语句</strong></em>，C语言中的其中一种基础运算。这个例子的意思是“把值<code>1</code>赋给变量<code>num</code>，之前的<code>int num</code>”这一行在电脑内存中为<code>num</code>分配了空间，这一行也就在这个空间中储存值。如果想要的的话你可以过会给<code>num</code>赋另一个值，那也就是<code>num</code>被叫做<em><strong>变量</strong></em>的原因。需要注意的是赋值语句会把值从右边到左边传递。<br>同时，这一句也是以分号结尾的，就像图2.2中显示的。<br><img src=\"/img/assignment.png\" alt=\"赋值图示\"></p>\n<h2 id=\"printf-函数\"><a href=\"#printf-函数\" class=\"headerlink\" title=\"printf()函数\"></a><code>printf()</code>函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I am a simple &quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;computer.\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;My favorite number is %d because it is first.\\n&quot;</span>,num);</span><br></pre></td></tr></table></figure>\n<p>这些行使用了一个C标准库中叫<code>printf</code>的函数，圆括号表明了<code>printf</code>是一个函数的名字，在圆括号之中的内容就是<code>main()</code>函数向<code>printf()</code>函数传递的信息。例如，第一行就传递了这句话 <code>I am a simple</code>这样的信息叫做<em><strong>参数</strong></em>，或者更加充分地，叫做函数的<em><strong>实际参数</strong></em>（见图2.3），那么<code>printf()</code>函数会对对这种语句做些什么呢？它会抓取在双引号之间的一切，然后把文本打印在屏幕上。</p>\n<p><img src=\"/img/calling.png\" alt=\"函数调用\"></p>\n<p>第一行<code>printf()</code>是你调用函数的一个很好的例子，你只需要打字写下函数的名称，把需要的参数放在圆括号内。当程序运行到这一行时，控制流就转换到已经定义的函数（在这个例子中是<code>printf()</code>）中，然后当函数已经完成了它需要做的事情之后，控制流就又回到原来的（<em><strong>调用</strong></em>）函数-在这个例子中是<code>main()</code>。</p>\n<p>下一行的<code>printf</code>呢？它在引号中包含了<code>\\n</code>这个字符，而且它并没有被打印下来？发生了什么？<code>\\n</code>的作用其实是另起一行，<code>\\n</code>的组合体（打印下来是两个字符）就组成了<code>\\n</code>这个叫<em><strong>换行符</strong></em>的新字符。对于<code>printf()</code>它意味着“在左下角再起一行”。也就是说，打印换行符和你在常规键盘上按下<code>enter</code>键的作用是差不多的。那么为什么不在打字写<code>printf</code>的时候用<code>Enter</code>键呢？那是因为因为那只会被认为是对于你的编译器的即时的指令，而不是对于源码的指令，也就是说，当你按下<code>enter</code>键时编辑器会退出当前的行，然后另起一行。换行符，影响着程序是如何显示的。</p>\n<p>换行符是<em><strong>转义字符</strong></em>的范例，<em><strong>转义字符</strong></em>是用来呈现难以或者几乎不能通过打印显示出来的字符的。其他的还有<code>\\t</code>对应着<code>Tab</code>、<code>\\b</code>对应着<code>Backspace</code>，每一个转义字符都会由<code>\\</code>来起始，我们会在第三章：C语言与数据再回到这个话题深入研究。</p>\n<p>这也就解释了为什么三个<code>printf</code>却只有两行文字了，第一个<code>printf()</code>命令没有换行符，但是第二个与第三个是有的。</p>\n<p>最后的<code>printf()</code>又带来了另外一个异样的地方：当这行文字被打印的时候<code>%d</code>发生了什么？你应该还记得，输出是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">My favorite number is 1 because it is first.</span><br></pre></td></tr></table></figure>\n<p>啊哈，当被打印出来的时候，数字<code>1</code>就是<code>%d</code>的替换物，而且变量<code>num</code>的值就是<code>1</code>，<code>%d</code>是展示<code>num</code>的值在什么时候被打印的占位符，这一行与下面的BASIC语句是相似的：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PRINT</span> <span class=\"string\">&quot;My favorite number is &quot;</span>; num; because it is first.<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<p>事实上，C语言的版本比这个做的工作还要多一点，<code>%</code>告诉程序有一个变量需要在这个区域被输出，<code>d</code>表达了要把这个变量以十进制整数的方式输出。<code>printf</code>还可以以其他变量形式进行输出，包括十六进制数、带有十进制小数点的数。事实上，<code>printf()</code>中的<code>f</code>表明了它是一个<em><strong>格式化</strong></em>打印函数。每种数据类型都有自己的指示符，这本书也会在介绍新的数据类型的同时引入对应的指示符。</p>\n<h3 id=\"返回语句\"><a href=\"#返回语句\" class=\"headerlink\" title=\"返回语句\"></a>返回语句</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>返回语句是这个程序的最后一个语句，在<code>int main(void)</code>中的<code>int</code>意味着<code>main()</code>函数应该返回一个十进制整数。<code>main()</code>函数这样返回是C语言标准要求的。返回值的C语言函数都会使用return语句来进行这个操作，return语句包含着关键字<code>return</code>与返回的值，以一个分号结束。如果你遗漏了这一句，大多数编译器会报错，但是它们仍然会对程序进行编译。这样的话，你可以把return语句看成为了增加逻辑的连贯性的东西，但是它对于一些操作系统是由实际用处的，包括DOS和Unix，我们在第11章会更深入地对于这个话题给出解释。</p>\n<h1 id=\"2-3-简单程序的结构\"><a href=\"#2-3-简单程序的结构\" class=\"headerlink\" title=\"2.3 简单程序的结构\"></a>2.3 简单程序的结构</h1><p>既然你已经看过了具体的例子，你已经准备好了解C语言程序的一些基本规则了。<em><strong>程序</strong></em>由包含一个函数或者多个函数的组组成，其中一个必须叫<code>main()</code>对于函数的描述包括函数头与函数体，<em><strong>函数头</strong></em>包括预处理语句，如<code>#include</code>，与函数的名字。你可以通过看圆括号的方式来得知这是个函数，即使圆括号可能是空的。<em><strong>函数体</strong></em>是由大括号框定的，它包括了一系列的语句，每一个都是由一个分号结尾的（见图2.4）。在例子中有<em><strong>声明语句</strong></em>，它是用来声明变量的类型与名字的，还有<em><strong>赋值语句</strong></em>，它给予变量一个值。然后还有三个<em><strong>print语句</strong></em>，每一个都调用了<code>printf()</code>函数，这些print语句是<em><strong>函数调用语句</strong></em>的一些示范。最后<code>main()</code>函数以返回值结束。</p>\n<p>简单来说，一个简单的、标准的C语言程序应该使用下面的格式。<br><img src=\"/img/function1.png\" alt=\"图2.4\"><br><img src=\"/img/structure.png\" alt=\"标准格式\"></p>\n<h1 id=\"2-4-可读性建议\"><a href=\"#2-4-可读性建议\" class=\"headerlink\" title=\"2.4 可读性建议\"></a>2.4 可读性建议</h1><p>使你的程序变得更可读是一种优秀的编程实践。可读性高的程序很容易理解，也就很容易去修改、纠正。让一个程序变得可读的过程也帮助你理清你对于程序执行自己的概念。</p>\n<p>你已经看过两种可以增加可读性的技巧了：选择变量名与使用注释。注意这两种技巧是相互补充的。如果你给一个变量注名<code>width</code>，你就不需要对于这个变量表示什么做任何解释了。但是叫做<code>video_routine_4</code>的变量就需要对于video routine 4的解释。</p>\n<p>另一个技巧是使用空行来分隔函数中的概念模块。例如，简单的实例程序就使用了空行分开了声明部分与行动部分。C语言不需要空行，但是它能够提高可读性。</p>\n<p>第四个技巧就是每行使用一个语句。再一次，这是一个针对于可读性的惯例，并不是C语言的要求。C语言的格式是<em><strong>形式自由</strong></em>的，你可以把几句话放在一行或者一直延伸到第二行。下面的代码是合法的，但是看起来很丑。<br><img src=\"/img/poorreadability.png\" alt=\"丑\"><br>分号向编译器指示了一个语句什么时候结束和下一句什么时候开始。但是如果你能够遵从这种在本章的例子中使用的传统手法，程序的逻辑会清晰很多。（见图2.5）<br><img src=\"/img/readable.png\" alt=\"可读性规范\"></p>\n<h1 id=\"2-5-更进一步\"><a href=\"#2-5-更进一步\" class=\"headerlink\" title=\"2.5 更进一步\"></a>2.5 更进一步</h1><p>我们的第一个C语言例子还是很简单的，接下来的图2.2就是第二个例子，但也并不是非常难。</p>\n<p><img src=\"/img/example2.png\" alt=\"例子\"></p>\n<p>新在哪里呢？代码中提供了对于程序的描述（在注释中），声明了很多变量，做了一些乘法运算，然后把这两个变量的值打印下来，让我们把这些点深入地了解一下。</p>\n<h2 id=\"记录-Documentation\"><a href=\"#记录-Documentation\" class=\"headerlink\" title=\"记录 Documentation\"></a>记录 Documentation</h2><p>第一，程序是以注释开始的（使用的是新的注释形式），它确定了文件名与程序的目的。这种程序的记录只花费一分钟就可以做，而且之后会在你浏览多个文件并打印它们的时候起到很大帮助。</p>\n<h2 id=\"多行声明-Multiple-Declarations\"><a href=\"#多行声明-Multiple-Declarations\" class=\"headerlink\" title=\"多行声明 Multiple Declarations\"></a>多行声明 Multiple Declarations</h2><p>然后，程序在一行中声明了两个而不是一个变量。为了达成这个目的，可以把两个变量（<code>feet</code>与<code>fathoms</code>）的声明使用一个逗号隔开，也就是下面这样。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> feet, fathoms;</span><br></pre></td></tr></table></figure>\n\n<p>它和下面的形式是等价的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> feet;</span><br><span class=\"line\"><span class=\"type\">int</span> fathoms;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运算-Multiplication\"><a href=\"#运算-Multiplication\" class=\"headerlink\" title=\"运算 Multiplication\"></a>运算 Multiplication</h2><p>第三步，程序进行运算，它利用了计算机系统庞大的算力来计算2乘6。<br>在C语言中，同样也在很多语言中，<code>*</code>是乘法运算的符号。<br>因此，下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feet = <span class=\"number\">6</span> * fathoms;</span><br></pre></td></tr></table></figure>\n\n<p>它的意思就是：查看<code>fathoms</code>的值，乘以6，然后把这个运算的结果的值赋给变量<code>feet</code>。</p>\n<h2 id=\"打印多个值-Printing-Multiple-Values\"><a href=\"#打印多个值-Printing-Multiple-Values\" class=\"headerlink\" title=\"打印多个值 Printing Multiple Values\"></a>打印多个值 Printing Multiple Values</h2><p>最终，程序更多样地使用了<code>printf()</code>如果你编译运行过这个例子，输出应该是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">There are 12 feet <span class=\"keyword\">in</span> 2 fathoms！</span><br><span class=\"line\">Yes, I said 12 feet!</span><br></pre></td></tr></table></figure>\n\n<p>这一次，代码在第一次使用<code>printf()</code>的时候，使用了两次替代符，在双引号中的第一个<code>%d</code>被在后面引用列表的第一个变量的值替换了(<code>feet</code>)然后第二个<code>%d</code>被第二个变量代替了。要注意的是待打印变量列表是在双引号部分后面，另外也注意每一个都是用括号分开的。</p>\n<p>第二次使用<code>printf()</code>表明了打印的值并不一定是变量的，只是必须要指定一个值，就像<code>6 * fathoms</code>这样，可以是恰当类型的值。</p>\n<p>这个程序受篇幅不长，但是它可以呈现把fathoms转换到feet的核心。我们需要的就是动态地去赋其他的值给<code>feet</code>我们会在以后的章节解释如何做。</p>\n<h1 id=\"2-6-顺便一提：多重函数\"><a href=\"#2-6-顺便一提：多重函数\" class=\"headerlink\" title=\"2.6 顺便一提：多重函数\"></a>2.6 顺便一提：多重函数</h1><p>目前为止，这些程序已经使用过了基本的<code>printf()</code>函数。图2.3向你展示了如何把自己的函数-除了<code>main()</code>以外的函数-加到程序里。</p>\n<p><img src=\"/img/twofunc.png\" alt=\"两个函数的程序\"></p>\n<p>输出是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I will summon the butler <span class=\"keyword\">function</span>.</span><br><span class=\"line\">You rang, sir?</span><br><span class=\"line\">Yes,Bring me some tea and writeable CD-ROMS.</span><br></pre></td></tr></table></figure>\n\n<p><code>butler()</code>函数在程序中出现了三次，第一次出现是在<em><strong>原型</strong></em>中，那告诉了编译器要使用的函数。第二次出现是在<code>main()</code>函数中，在<em><strong>函数调用</strong></em>中出现，最终，程序呈现了<em><strong>函数的定义</strong></em>过程，那是函数本身的源码。让我们再来看看这三次出现。</p>\n<p>C90标准添加了原型，老翻译器可能并不能识别它们（我们将会讲到当你使用那种编译器的时候要怎么做。）原型就是一种告诉编译器你正在使用一个特定的函数的声明。它也指定了函数的属性。例如，<code>butler()</code>函数的第一个词<code>void</code>指明了它没有返回值。（大体上，函数可以为了使用值而返回这些值，但<code>butler</code>没有），第二个<code>void</code>-在<code>butler(void)</code>-的意思是它没有参数。因此，当编译到达<code>main()</code>函数中<code>butler</code>被使用的这一行时，它会检查是否<code>butler</code>是被恰当地使用的。需要注意，<code>void</code>是被用来表示empty（空），而不是invalid（不合法、无效）。</p>\n<p>早先的C语言支持的函数声明类型有限，那时你只能定下返回值的类型，但是对于参数的描述就被省略。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">butler</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<p>那时的C语言代码使用的函数声明就像是上述的样子，而不是函数原型，C90与C99标准都能够辨认出这种更老的形式，但是它们表示这种形式会随着时间被淘汰，所以不要用。如果你从一些更老的地方拿到了C语言代码，你有可能想要把老式的声明变成原型。以后的章节会回到原型制作、函数声明与返回值上。</p>\n<p>接下来，你通过给出<code>butler</code>的名字与圆括号来援引函数。（调用），当<code>butler</code>完成了它的工作，程序就会移向<code>main()</code>函数中的下一行。</p>\n<p>最终，函数<code>butler()</code>以与<code>main()</code>函数一样的形式被定义，有函数头与用大括号框定的函数体。函数头重复了你在原型中提供的信息：<code>butler</code>不使用信息，而且不返回值。对于老旧的编译器，省略第二个<code>void</code>。</p>\n<p>有一点需要注意的，就是在<code>main()</code>函数中<code>butler()</code>被调用的位置-而不是<code>butler()</code>函数被定义的位置-决定了<code>butler()</code>函数的运行位置。比如，你可以把<code>butler()</code>函数的定义放在<code>main()</code>函数的前面，程序还是会照旧那样把<code>butler()</code>放在两个<code>printf()</code>中间运行。记住，所有的C语言程序都是以<code>main()</code>函数开始的，无论<code>main()</code>函数在程序文件的什么位置。然而，C语言实际上是先把<code>main()</code>函数列出来，因为它通常提供了基本的程序框架。</p>\n<p>C语言标准建议你为所有你使用的函数提供原型，标准的<code>include</code>文件为标准库函数做这个工作，例如，在标准C语言下，<code>stdio.h</code>文件就有<code>printf()</code>函数的原型，第六章的最后一个例子会告诉你如何去更广泛地为非<code>void</code>的函数制作原型，第九章会全面地讲述函数。</p>\n<h1 id=\"2-7-调试引入\"><a href=\"#2-7-调试引入\" class=\"headerlink\" title=\"2.7 调试引入\"></a>2.7 调试引入</h1><p>现在你已经可以写一个简单的C语言程序了，你有可能海域犯些简单的错误。程序的错误通常被叫做<em><strong>bugs</strong></em>，寻找与修复它们就叫做<em><strong>调试</strong></em>，图2.4就展现了有些bugs的程序，看看你是否能够找到。</p>\n<p><img src=\"/img/nogood.png\" alt=\"找找吧，有几处？\"></p>\n<h2 id=\"语法错误-Syntax-Errors\"><a href=\"#语法错误-Syntax-Errors\" class=\"headerlink\" title=\"语法错误 Syntax Errors\"></a>语法错误 Syntax Errors</h2><p>图2.4的例子犯了几个语法错误，当你没有遵循C语言的规则，你就会犯<em><strong>语法错误</strong></em>，这也可以类比到英语的语法错误。例如，思考一下这句话：<em><strong>Bugs frustrate be can.</strong></em> 这句话使用的单词是正确的，但是并没有遵循单词顺序的规律，而且使用的单词形式也不太对，不管怎样，C语言的语法错误就是在错误的地方使用了正确的C语言标志。</p>\n<p>所以<code>nogood.c</code>这个程序究竟犯了什么错误呢？第一，它使用的是括号而不是大括号来标记函数体，也是把正确的C语言符号用在了错误的地方，第二，声明应该是这个样子的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, n2, n3;</span><br></pre></td></tr></table></figure>\n\n<p>或者这样</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> n2;</span><br><span class=\"line\"><span class=\"type\">int</span> n3;</span><br></pre></td></tr></table></figure>\n\n<p>而且，这个例子遗漏了安置一条注释必须要使用的<code>*/</code>符号对（作为替换，你可以用<code>//</code>形式替换<code>/*</code>），最后，它遗漏了<code>printf()</code>后的本应作为语句结束标志的分号。</p>\n<p>你如何来检查语法错误呢？第一，在编译之前，浏览你的源码，看你是否看到一些明显的错误。第二，你可以检查编译器找到的错误，因为它的一部分工作就是检查语义错误。当你编译程序的时候，编译器会反馈找到的所有错误，并且会明确错误类型与出错的位置。</p>\n<p>然而，编译器有时也会混乱，实际上的一个区域内的语义错误有可能会让编译器错误地认为它找到了其他种类的错误。例如，因为这个例子没有恰当地声明<code>n2</code>与<code>n3</code>，所以编译器会认为它在被使用的地方找到了错误。事实上，与其试图一次把所有报告的错误修正过来，不如只修改一两个然后重新编译，这样的话有些其他种类的错误就会消失。继续这样做，直到程序正常运行。另一个常见的编译器“诡计”是它会在后面的行报错，但其实出错是在前面的行里。例如，编译器有可能直到下一行才能判断出上一行遗漏了分号。所以如果编译器报错说缺少分号，那么在这一行之前进行检查。</p>\n<h2 id=\"语义错误-Semantic-Errors\"><a href=\"#语义错误-Semantic-Errors\" class=\"headerlink\" title=\"语义错误 Semantic Errors\"></a>语义错误 Semantic Errors</h2><p>语义错误是在意义上的错误，例如，思考这一句话: <em><strong>Furry inflation thinks greenly.</strong></em>  语法上是正确的，因为形容词、名词、动词、还有副词都在合适的位置上，但这句话就是一派胡言。在C语言中，当你遵循了C语言的规则但是导致了不合适的结果，这个例子中就有这样的错误。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n3 = n2 * n2;</span><br></pre></td></tr></table></figure>\n\n<p>n3本应该是用来展现<code>n</code>的3次方的，结果程序把它算成了<code>n</code>的4次方。编译器是检测不出来语义错误的，因为它们并不违背C语言的规则。编译器没有能力去猜测你程序的意图。那也就只能由你来找到这些种类的错误了。一种方式是把程序做的事情与程序应该做的事情进行对比。例如，假定你已经找到了例子中的语法错误，那么它现在看起来是这个图2.5样子的。</p>\n<p><img src=\"/img/stillbad.png\" alt=\"还是错的...\"></p>\n<p>它的输出是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = 5, n squared = 25, n cubed = 625 </span><br></pre></td></tr></table></figure>\n\n<p>如果你可以口算立方的话，那么你就会注意到625是个错误的值。下一阶段就是找到你是如何陷入这个错误的。例如，你有可能会通过观察找到错误。大体上，然而你还需要一些系统的方法。一种方法是假装你是电脑，然后一步步地跟着程序走，让我们现在就尝试一下那个方法。</p>\n<p>程序体以声明三个变量<code>n1, n2与n3</code>开始，你可以通过画三个盒子并把它们各自标注名称来模拟这个情况。（看图2.6）然后，程序会把5赋给<code>n</code>，通过把数字5写在盒子里来模拟，然后，程序用<code>n</code>乘<code>n</code>然后把它的值赋给<code>n2</code>，所以看向盒子<code>n</code>，看着5乘5得到了25，然后把25放在盒子里。为了模拟下一句，也是同样，看向盒子2，然后用25乘25，然后把这个值给予<code>n3</code>，啊哈，你做乘法的时候使用的是<code>n</code>的平方而不是用<code>n</code>。</p>\n<p>嗯，有可能这个过程对于这个程序有点过了，但是以这种方式一步步地浏览程序总会是得知发生了什么最好的方法。</p>\n<h2 id=\"程序状态\"><a href=\"#程序状态\" class=\"headerlink\" title=\"程序状态\"></a>程序状态</h2><p>通过手工地一步步地追踪程序，追踪每一个变量，你监视了程序的状态，<strong>程序状态</strong>就是所有变量在一个时间点上被给予的一组值。它是运算状态的快照。</p>\n<p><img src=\"/img/tracer.png\" alt=\"追踪程序状态\"></p>\n<p>我们刚刚讨论了一种追踪程序状态的方法：通过自己一步一步地运行程序。在一个进行1000次迭代的程序中，你可能觉得并不能完成那个工作。然而，你还是可以经历一些迭代过程，看看你的程序是不是按你想要的方式来运行的。然而，通常是会有这种情况的，你会按照你想要的方式去“执行”它们，而不是真正把它们写下来，所以在写真正的代码的时候要努力做到正确。</p>\n<p>另一个方法就是通过在程序的自始至终放置几个<code>printf</code>语句来定位语义问题。在程序运行的关键点监测选定变量的数值。看看数值是怎么变化的可以让你知道正在发生什么。在你让程序按照你满意的方式运行之后，你就可以去掉多余的语句去重新编译了。</p>\n<p>第三种监测的方法就是使用调试器。<em><strong>Debugger</strong></em>是一种能够让你一步一步地运行程序并且查看程序变量的值的程序。它们使用的难易程度与复杂度都各有不同。更高级的编译器可以显示哪一行代码正在被运行。这对于多路径的程序是非常方便的，因为可以很容易地看到走的是哪一条路径。如果你的编译器中有调试器，那么花谢时间学学则呢么使用吧。比如像图2.4那样尝试使用它。</p>\n<h1 id=\"2-8-关键字与内置标识符\"><a href=\"#2-8-关键字与内置标识符\" class=\"headerlink\" title=\"2.8 关键字与内置标识符\"></a>2.8 关键字与内置标识符</h1><p>关键字就是C语言中的词汇，因为它们对于C语言是特别的，所以你不能把它们作为标识符来使用。有一些关键字分别了多种多样的类型，比如说<code>int</code>，其他的比如说<code>if</code>是被用来控制程序运行语句的顺序的。在以下的C语言关键字的列表中，黑体表示在ISO&#x2F;ANSI C90标准下的关键字，斜体的是C99标准加入的新关键字</p>\n<p><img src=\"/img/keywords.png\" alt=\"关键字\"></p>\n<p>如果你尝试把关键字用于变量的名字，编译器会把它识别为语法错误，还有其他的标识符，它们叫做<em><strong>内建标识符</strong></em>，你也是不应该使用的，他们不会导致语法错误，因为它们是合法的名称，但是语言已经使用过或者还保留着使用它们的权利，所以如果你使用这些标识符来表示其他的东西会引起问题。内置的标识符包括以下划线开始的词还有库函数的名称，就像<code>printf()</code>.</p>\n<h1 id=\"关键概念\"><a href=\"#关键概念\" class=\"headerlink\" title=\"关键概念\"></a>关键概念</h1><p>电脑编程是一项有挑战性的活动，它需要复杂与概念化的思考，而且还需要对于细节格外注意。你会发现编译器会强制你去注意细节。当你对朋友说话的时候，你可能会把几个词用错，犯几个语法错误，可能话没有说完，但是你的朋友仍然能够理解你在说什么。但是编译器不会允许这种情况。对于编译器来说，几乎对了也是错的。</p>\n<p>编译器并不能在概念问题帮到你多少，比如在这里说的这些东西。所以这本书会尽力通过给出每一章关键概念的大纲来弥合那个差距。</p>\n<p>对这一章，你的目标是你需要理解C语言程序是什么，你可以认为程序就是你对于想让电脑干什么的描述。编译器精细化地解决把你的描述变为含蓄的机器语言。（对于编译器做多少工作的测量显示，它可以从你1KB的源码文件创造出来60KB的可执行程序）即使一个简单的C语言程序也需要很多的机器语言来代表它们。）因为编译器并没有智能，你必须使用编译器的词汇来描述你的意思，而且这些词汇是由C语言标准设立的正规规则。（即使很受限制，还是比直接用机器语言来表达强的多了！）</p>\n<p>编译器期望着收到以独特的形式写出的指令，这一章已经详细地描述了。你作为编程人员的工作就是表达在编译器框架下你对于程序应该如何运作的想法-由C语言标准所引导就可以正确地运行。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><ol start=\"4\">\n<li>Indiana Sloth准备了如下的程序，让你看一看是不是正确，请帮帮他吧。</li>\n</ol>\n<p><img src=\"/img/quest4.png\" alt=\"问题4\"></p>\n<p>main函数用了{}来括起来，函数体用的是括号，是错的。<br>声明语句没加分号，赋值只需要一个&#x3D;号即可。<br>是printf而不是print。没加双引号，没加引用列表。最后没结束。stdio.h打错了而且#和&lt;&gt;，注释另一边写反了，导致全文为注释。</p>\n<p>5.假设下面的每一个例子都是完整程序的一部分，它们每一个会打印什么呢?</p>\n<p><img src=\"/img/quest5.png\" alt=\"问题5\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#a.</span></span><br><span class=\"line\">Baa Baa Black Sheep.Have you any wool?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#b.</span></span><br><span class=\"line\">Begone!</span><br><span class=\"line\">creature of lard!</span><br><span class=\"line\"><span class=\"comment\">#c.</span></span><br><span class=\"line\">What?</span><br><span class=\"line\">No/nBonzo?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#d.</span></span><br><span class=\"line\">2 + 2 = 4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><p>下面哪些是C语言关键字？ <code>main, int, function, char, =</code><br>int、char</p>\n</li>\n<li><p>你会如何把<strong>行数</strong>与<strong>字数</strong>打印出来？<br>在以下的形式中<code>There were 3020 words and 350 lines.</code></p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">word = <span class=\"number\">3020</span>;</span><br><span class=\"line\">line = <span class=\"number\">350</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;There were %d words and %d lines.&quot;</span>, word, line);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>思考下面的程序<br><img src=\"/img/quest8.png\" alt=\"问题8\"><br>在第7行之后的程序状态是什么？<br>第八与第九行呢？</li>\n</ol>\n<blockquote>\n<p>第7行 a &#x3D; 5，b &#x3D; 2</p>\n</blockquote>\n<blockquote>\n<p>第8行 a &#x3D; 5， b &#x3D; 5</p>\n</blockquote>\n<blockquote>\n<p>第9行 a &#x3D; 5， b &#x3D; 5</p>\n</blockquote>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>只是阅读是不够的，你得尝试写一两个简单的程序来看看是不是写程序和你看这一章的感觉一样流畅。下面有一些建议，但是你也确实需要独立思考一些问题。你会在网站上找到下面选出问题的答案。</p>\n<ol>\n<li>调用一次printf，把你的姓与名在一行中输出<br> 再调用一次printf，把你的姓与名在两行中输出。<br> 使用两次printf把你的姓和名在一行中输出。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简略一写</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike Smith\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike\\nSmith\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Smith\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>写一个打印你的姓名与地址的程序</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;My name is Ywx\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Address: Zhengzhou city in Henan province&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>写一个把你的年龄转换成天数的程序，展示两者的值。不必关心闰年和平年。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age, days;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;age);</span><br><span class=\"line\">\tdays = age * <span class=\"number\">365</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, age, days);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.写一个会打印出以下语句的程序</p>\n<p><img src=\"/img/four.png\" alt=\"语句\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;For he&#x27;s a jolly good fellow!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Which nobody can deny!&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.写一个程序，创建一个叫做<code>toes</code>的变量，把<code>toes</code>设为10，<br>计算toes的二倍和平方分别是什么，并把它们打印下来</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttoes = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, toes, toes * <span class=\"number\">2</span>, toes * toes);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.写一个会打印出如下的输出的程序</p>\n<p><img src=\"/img/six.png\" alt=\"Smile!\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">3</span>;i &gt;= <span class=\"number\">1</span>;i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt; i;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Smile&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7.写一个叫做<code>one_three()</code>的函数，这个函数应该在一行内展现文字<code>one</code>然后调用函数<code>two()</code>，接着在另一行内显示文字<code>three</code>。<br><code>two()</code>把文字<code>two</code>在一行输出。以Stating now开始，像这样。</p>\n<p><img src=\"/img/last.png\" alt=\"数数\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">two</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;two\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">one_three</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;one\\n&quot;</span>);</span><br><span class=\"line\">\ttwo();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;three\\n&quot;</span>)l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;starting now:\\n&quot;</span>);</span><br><span class=\"line\">\tone_three();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>End…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"第二章-C语言介绍\"><a href=\"#第二章-C语言介绍\" class=\"headerlink\" title=\"第二章 C语言介绍\"></a>第二章 C语言介绍</h1><blockquote>\n<p><strong>你将会在这一章学到</strong><br>    1.赋值运算符<br>    2.函数main()与printf()<br>    3.一个简单C语言程序的构成<br>    4.创造整型变量，赋值并在屏幕上显示它们的值<br>    5.换行符<code>&#39;\\n&#39;</code><br>    6.如何在程序中添加注释，让你的程序中同时拥有多个函数<br>        并能找出程序中的错误。<br>    7.关键字是什么</p>\n</blockquote>\n<p>C语言的程序是什么样子的？如果你大体浏览过这本书，你会看到很多的例子的。几乎一致的是，你会觉得C语言程序看起来很怪异，有些需要用到类似<code>&#123;，cp-&gt;tort,*ptr</code>这样的符号。随着你通读完这本书，你就会慢慢觉得这些符号不是那么陌生了，会变得更加熟悉，甚至有可能会很高兴遇见它们。在这一章中，我们从给出并解释一个简单的实例起步。同时，我们也会强调一些C语言的基本特征。</p>","more":"<h1 id=\"2-1-一个简单的例子\"><a href=\"#2-1-一个简单的例子\" class=\"headerlink\" title=\"2.1 一个简单的例子\"></a>2.1 一个简单的例子</h1><p>让我们先研究一个简单的C语言程序。在图2.1展示的这个程序，专门为了突出一些C语言编程的特征。在你将要读接下来对于程序的逐行解释之前，先看看图2.1，试试你是不是能够靠自己搞明白它会做什么事情。<br><img src=\"/img/example.png\" alt=\"小例子\"></p>\n<blockquote>\n<p>1.#include &lt;stdio.h&gt; 包含头文件<br>2.int main(void) 定义一个返回值为整数，输入值为空的主函数<br>{<br>int num; 定义一个名为num的整型变量<br>num &#x3D; 1; 给num赋值1</p>\n<pre><code>printf(&quot;I am a simple &quot;); 输出一行字\nprintf(&quot;computer. \\n&quot;);\n输出一个词，接在刚才的一句话之后，并换行\nprintf(&quot;My favorite number is %d because it is first.\\n&quot;,num);\nreturn 0; 返回值0，表示结束。\n</code></pre>\n<p>}</p>\n<p>注释中的三个部分：1.定义变量 2.赋值 3.使用函数</p>\n</blockquote>\n<p>如果你认为这个函数将会在你的屏幕上打印一些东西。是的，你是对的。但对于明确的什么东西将会被打印到屏幕上可能并不明显，所以我们运行这个程序，看看会发生什么。</p>\n<ul>\n<li>第一步，使用你最喜欢的编辑器<br>  或者你的编译器中最喜欢的编辑器</li>\n<li>第二步，创造一个包括了图2.1中文本的文件，<br>  并且以<code>.c</code>为结尾，从而满足你的系统对于文件名的需要。<br>  举个例子<code>first.c</code>就是合法的名称。</li>\n<li>第三步，编译并运行程序。<br>  查看第一章来得知这方面的详细过程。</li>\n</ul>\n<p>如果一切都运转良好的话，你会在屏幕上看到这样的输出。<br><img src=\"/img/%E8%BE%93%E5%87%BA.png\" alt=\"输出\"></p>\n<p>总之，这个结果并不是很惊人，但是<code>\\n</code>与<code>%d</code>的作用是什么呢？<br>程序中有几行也看起来很陌生，这就到解释的时候了。</p>\n<h1 id=\"2-2-解释这个例子\"><a href=\"#2-2-解释这个例子\" class=\"headerlink\" title=\"2.2 解释这个例子\"></a>2.2 解释这个例子</h1><p>我们会对这个例子解释两遍，第一遍（Pass1：速览大纲），强调了每一行的意义，从而你能够大体上得知发生了什么。第二遍（Pass2：程序细节），探索了特定部分的含义，并且给出了细节以便你能够更深刻地理解。</p>\n<p>图2.1总结了C语言程序的每一个部分，<br>除了我们第一个例子使用的，它们还包含着更多要素与步骤。</p>\n<h2 id=\"Pass1：速览大纲：\"><a href=\"#Pass1：速览大纲：\" class=\"headerlink\" title=\"Pass1：速览大纲：\"></a>Pass1：速览大纲：</h2><p>这一部分包括了对于程序每一行的简短解释。<br>下一部分会更加充分地探索这些主题的内容。</p>\n<blockquote>\n<p>#include &lt;stdio.h&gt; 包含另一个文件。</p>\n</blockquote>\n<p>这一行告诉编译器要从文件<code>stdio.h</code>中收集信息，这个文件是所有C语言编译器安装包的基础部分，提供了对于键盘输入与显示输出的支持。</p>\n<blockquote>\n<p>int main(void) 一个函数名</p>\n</blockquote>\n<p><img src=\"/img/analysis.png\" alt=\"对C语言程序的分析\"></p>\n<p>C语言包括一个或者多个<em><strong>函数</strong></em>，它是C语言程序的基本模块。这个程序由一个叫做<code>main</code>的函数组成，圆括号表示了<code>main()</code>是个函数的名字。<code>int</code>表明了<code>main()</code>函数会返回一个整数，<code>void</code>表明<code>main()</code>不会获取任何的参数，这些都是我们过会会深入研究的事情。现在，接受<code>void</code>与<code>int</code>是在ISO&#x2F;ANSI标准下定义<code>main()</code>函数的方法（如果你有在ISO&#x2F;ANSI标准之前的编译器，省略<code>void</code>就好，但你可能也想获取更新的版本来避免不协调。）</p>\n<blockquote>\n<p>&#x2F;* a simple program*&#x2F; 一条注释。</p>\n</blockquote>\n<p><code>/*</code>与<code>*/</code>符号框定了一条能够帮助阐明一个程序的注释，它们是只为阅读者准备的，会被编译器忽略掉。</p>\n<blockquote>\n<p>{    函数体的开头</p>\n</blockquote>\n<p>起始大括号<code>&#123;</code>标志着函数中语句的开始，<br>函数的定义由终止大括号<code>&#125;</code>结束。</p>\n<blockquote>\n<p>int num; 一个声明语句</p>\n</blockquote>\n<p>这个语句声明了你正在使用一个叫做<code>num</code>的变量，而且<code>num</code>会是<code>int</code>（integer-十进制整数）类型。</p>\n<blockquote>\n<p>num &#x3D; 1; 一个赋值语句</p>\n</blockquote>\n<p>这个语句<code>num = 1</code>把值<code>1</code>赋给叫做<code>num</code>的变量。</p>\n<blockquote>\n<p>printf(“I am a simple “); 一个调用函数的语句</p>\n</blockquote>\n<p>第一句使用了<code>printf()</code>函数来在屏幕上显示<code>I am a simple </code>这句话，把光标留在了同一行。这里的<code>printf()</code>函数是标准C语言库的一部分。它被称作一个<em><strong>函数</strong></em>，而在程序中使用一个函数叫<em><strong>调用函数</strong></em>。</p>\n<blockquote>\n<p>printf(“computer.\\n”);  另一个函数调用语句</p>\n</blockquote>\n<p>第二次调用<code>printf()</code>函数是在上一句打印下来的话后面添加了<code>computer</code>，<code>\\n</code>符号是告诉电脑要另起一行-也就是说把光标移到下一行的起始。</p>\n<blockquote>\n<p>printf(“My favorite number is %d because it is first.\\n”);</p>\n</blockquote>\n<p>最后一次使用<code>printf()</code>是基于引用的语句把<code>num</code>的数值(1)打印到屏幕上，<code>%d</code>指示电脑从哪里，以什么方式输出<code>num</code>的数值。</p>\n<blockquote>\n<p>return 0;</p>\n</blockquote>\n<p>一个C语言函数是可以提供，或者说***return(返回)***，一个数值</p>\n<blockquote>\n<p>} 结束。</p>\n</blockquote>\n<p>正像说过的，程序以终止大括号结束。</p>\n<h2 id=\"Pass2：程序细节\"><a href=\"#Pass2：程序细节\" class=\"headerlink\" title=\"Pass2：程序细节\"></a>Pass2：程序细节</h2><p>既然你已经大体了解了图2.1中的内容，我们要更详尽地研究一下它了。再一次，我们将会逐行地查看程序，为了能够培养一种更宏观的C语言编程视角，这一句我们会以每一行代码作为起点，然后一步步深入代码之后的细节。</p>\n<h3 id=\"include-指示与头文件\"><a href=\"#include-指示与头文件\" class=\"headerlink\" title=\"# include 指示与头文件\"></a># include <strong>指示与头文件</strong></h3><h4 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"# include &lt;stdio.h&gt;\"></a># include &lt;stdio.h&gt;</h4><p>这是一个程序的开始行，**#include &lt;stdio.h&gt;** 的作用就和你把<code>stdio.h</code>中所有的内容都打字写在程序#include的位置是一样的。因此，这是一个剪切粘贴的操作，在共享对于很多程序都一样的信息上，<strong>include</strong>文件提供了一种便利的方式。</p>\n<p><code>#include</code>语句是C语言<strong>预处理指令</strong>的一个范例。大体上，C语言编译器会在编译之前对于源码做一些准备工作，这在术语中称为<em><strong>预处理</strong></em></p>\n<p>在大部分上，头文件包含着编译器制作最终的可执行文件需要使用的信息。例如，它们可能会定义一些常量或者声明一些函数的名字，与它们应该被怎样使用，但是库中函数真正的代码-编译前代码，不是在头文件中的。编译器的一部分-连接器会负责找到你需要的这一部分库代码。简单地说，头文件会帮助引导编译器来正确地把程序组装起来。</p>\n<p>ISO&#x2F;ANSI标准下的C语言必须提供头文件，有些程序需要包含<code>stdio.h</code>头文件，有些不需要。对于C语言实例的记录应该包含使用的C语言标准库函数的描述，这些函数描述就确认了需要什么头文件。例如对于<code>printf()</code>的描述就表明了需要使用<code>stdio.h</code>，省略恰当的头文件可能并不会影响特定的程序，但是最好不要依赖它。这本书每一次使用库函数时，我们都会为函数使用<code>include</code>来把ISO&#x2F;ANSI标准制定的的文件包括在程序内。</p>\n<p><img src=\"/img/original.png\" alt=\"为什么输入输出不是内建函数？\"></p>\n<p>为什么输入输出并不是内建函数？<br>你有可能想知道为什么像输入输出这样基本的东西并不会被自动包含进程序中。一种回答是，并不是所有的程序都要使用I&#x2F;O（input&#x2F;output）包，而且C语言的哲学中也说到要避免承担不必要的重量。这个经济学上资源利用的准则让C语言受到嵌入式编程的欢迎-例如，为控制自动燃油系统编写代码。顺带一说，#include这一行甚至不是C语言的语句。#符号阐述了这一行是在编译器之前被预处理器处理的代码。你会在后面学习预处理指令时遇到很多例子，而且在第16章对这个主题还有更加充分的讲述。</p>\n<h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a><code>main</code>函数</h3><h4 id=\"int-main-void\"><a href=\"#int-main-void\" class=\"headerlink\" title=\"int main(void)\"></a>int main(void)</h4><p>程序的下一行声明了一个名字为<code>main</code>的函数，<code>main</code>是个挺普通的程序，但是它是唯一的选择。一个C语言程序（有些我们无需担心的例外），通常是以名叫<code>main</code>的函数开始运行的，其他函数的名字是可以随意选择的，但是作为一切的开端，<code>main</code>函数必须存在。那么圆括号呢？它们是为了确定<code>main()</code>是个函数，你会很快学习学到关于函数的更多内容。现在，记住这个函数是C语言程序的基础模块。</p>\n<p><code>int</code>是<code>main()</code>函数的返回值类型，它意味着<code>main()</code>返回的数值种类必须是十进制整数(integer)。那么返回到哪里？返回到操作系统-我们会在第六章讨论循环的时候回到这个问题上来。</p>\n<p>跟随在函数名后面的圆括号大体上囊括了需要传递给函数的信息，举个简单的例子，没有东西被传递，那么这个括号就包含着<code>void</code>-空类型（在第11章，“字符指针与字符串函数”介绍了第二种从操作系统把信息传递给<code>main()</code>函数的形式）</p>\n<p>如果你查看过很久以前的C语言代码，你会经常看到程序是以下面的形式开始的:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>C90标准勉强地包容了这个形式，但是C99没有，所以即使你现在的编译器让你写成这个样子，不要听。</p>\n<p>下面是另一种你可能会看见的形式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<p>有一些编译器是允许这样写的，但是没有一个标准把它列为一种选择，<br>因此，编译器也没有必要接受这个形式，有几种确实也没有。再一次，坚守标准的形式，你就不会在更换编译器的时候陷入困境。</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*a simple program*/</span></span><br></pre></td></tr></table></figure>\n\n<p>这一部分由&#x2F; *  * &#x2F;符号框定起来的内容就是注释，使用注释可以让一些人（包括你自己）更好地理解你的程序。C语言的一个很好的特点就是注释可以放在任何地方，甚至与它们解释的“原文内容”放在一行。长一点的知识可以放在一行甚至延伸至多行，以&#x2F; * 开始并以 * &#x2F;结束的内容都会被编译器忽略。下面是注释的合法与非法写法。</p>\n<p><img src=\"/img/comment.png\" alt=\"注释示例\"></p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><blockquote>\n<p>（1.这是一行C语言注释）<br>（2.这个注释延伸到了两行）<br>（3.你也可以这样做）<br>（4.但是这是不合法的因为没有结束符号）</p>\n</blockquote>\n<p>C99添加了注释的另一种形式，它在C++与Java中很受欢迎，这种新形式使用<code>//</code>符号来生成只在一行内的注释。</p>\n<p><img src=\"/img/newform.png\" alt=\"新形式\"></p>\n<p>因为一行的结束标志这这行注释的结束，这种方式需要在注释开始的时候添加注释符号。</p>\n<p>新形式的出现是为了响应旧形式的潜在问题，假设你有下面的代码。</p>\n<p><img src=\"/img/ihope.png\" alt=\"我希望这可以运行...\"></p>\n<p>下一次，我推断你要删除第四行<br>然后意外地把第三行删掉了，<br>然后这代码就会变成这个样子</p>\n<p><img src=\"/img/hopeagain.png\" alt=\"哦不...\"></p>\n<p>现在编译器把第一行的起始符与第四行的结束符进行配对，结果使这四行全部成为了注释，包括那本应该是代码的一部分的一行。因为<code>//</code>并不会延伸到另一行，它不会引起代码的“消失”。</p>\n<p>一些编译器有可能并不支持C99的这个特点，还有些有可能需要改变一些编译器的设置才能够应用C99的特性。</p>\n<h3 id=\"大括号、函数体与代码块\"><a href=\"#大括号、函数体与代码块\" class=\"headerlink\" title=\"大括号、函数体与代码块\"></a>大括号、函数体与代码块</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在图2.1，大括号划定了<code>main()</code>的界限。大体上，所有的C语言函数都需要使用大括号来标志着函数体的起始与结束。它们是必须出现的，所以一定不要漏了。只有大括号是起这个作用的，不要使用圆括号或者中括号。</p>\n<p>大括号还可以被用来把语句聚集在一个函数中，形成一个单元或者语句块。如果你对于Pascal，ADA，Modula-2或者Algol熟悉的话，你就会意识到大括号划定起始与结束在这些语言里也是相似的。</p>\n<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num;</span><br></pre></td></tr></table></figure>\n\n<p>程序的这一行术语中称为<em><strong>声明语句</strong></em>，声明语句是C语言的其中一个最重要的特点。这个特例声明了两件事，一是在函数的某一个部分有一个叫<code>num</code>的变量（好好笑啊哈哈，在那遥远的函数中，有个小变量。）第二，<code>int</code>声明了<code>num</code>是一个十进制整数-也就是说，没有十进制小数点。（<code>int</code>是<em><strong>数据类型</strong></em>的一个例子），编译器使用这些信息为<code>num</code>变量准备合适的内存空间。结尾的分号标志了这一行是C语言的语句或者指令。分号也是这个语句的一部分，并不只是像在Pascal里的语句之间的分隔符。</p>\n<p>C语言中，<code>int</code>是一个确定了一种数据类型的<em>关键字</em>，关键字是我们用来表达语言的单词，而且你不能把它们强占用于其他目的。例如，你不能把<code>int</code>作为函数或者是变量的名称。这些限制在语言之外就会失去作用，反而你把一只猫或者你最喜欢的孩子叫做<code>int</code>是没有问题的。（除非本地官员或者法律不准用这个名字）。</p>\n<p><code>num</code>是<em>标识符</em>的一个例子，也就是你为变量、函数或者其他实型取的名字。从而声明把特定的标识符与电脑的特定的内存区联系在了一起，而且它也建立了信息的类型，或者说数据的类型，来放在那个区域里。</p>\n<p>在C语言中，<em>所有的</em>变量都需要在被使用之前先<em>声明</em>，这也就意味着你必须对于所有在一个程序中使用的变量列出包括数据类型的声明。人们也认为声明变量是一个优秀的编程技巧，而且，在C语言中，它是必须进行的。</p>\n<p>通常来说，C语言要求在代码块的起始部分声明变量，而且其他的语句是不允许放在这之前的。也就是说，<code>main()</code>函数的函数体会是这个样子。</p>\n<p><img src=\"/img/tradition.png\" alt=\"传统方式\"></p>\n<p>C99标准学习了C++的时间，现在可以让你在代码块的任何地方声明变量。然而，你还是需要在第一次使用变量之前声明它。所以如果你的编译器支持的话，你就可以像下面这样写：</p>\n<p><img src=\"/img/C99.png\" alt=\"C99新方式(1)\"><br><img src=\"/img/C992.png\" alt=\"C99新方式(2)\"></p>\n<p>为了能够和更旧的系统兼容，这本书还是会坚持原来的标准。（一些更新的编译器只有当你设置之后才会支持C99的特点）。</p>\n<p>就此，你很可能有三个问题：</p>\n<ul>\n<li>1.数据类型是什么？</li>\n<li>2.在取名的时候我们可以怎么选择？</li>\n<li>3.为什么你需要把变量全部声明出来。<br>那就让我们探究这些问题的答案吧。</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>C语言主要处理的是这几种数据：十进制整数、字符、浮点数，仅举几例。声明一个整型或者字符类型变量可以使电脑恰当地储存、抓取与翻译数据。你会在下一章研究到更多可用的数据类型。</p>\n<h3 id=\"名字的选择\"><a href=\"#名字的选择\" class=\"headerlink\" title=\"名字的选择\"></a>名字的选择</h3><p>你应该为变量使用有意义的名字（像是<code>sheep_count</code>而不是<code>x3</code>如果你的程序是数羊的），如果名字不能达到表意的需求，那么就使用注释来解释变量代表了什么。以这种方式为程序做记录是其中一种优秀的编程技巧。</p>\n<p>你可以使用的字符要视实际情况而定。C99标准要求不多于63个字符，除非是外部的标识符。（在第12章“内存分级、链接性与储存管理”中会提到），相比于分别只能识别31个字符与6个字符的C90，这是一个巨大的提升，而且老的C语言编译器最多只能接受8个字符。事实上你可以使用更多的字符的，但是编译器会忽略它们。因此，当一个系统有着8个字符的限制时，<code>shakespeare</code>与<code>shakespencil</code>就会被认为是一样的了，因为它们的前八个字符是一样的。（如果你想要63个字符的例子，可以自己造一个）。</p>\n<p>你可以在大写字母、小写字母与下划线之间任意选择。第一个字符必须是一个字母或者一个下划线。下面是一些示范。<br><img src=\"/img/valid.png\" alt=\"示范\"><br>操作系统与C语言标准库通常会使用1或2个下划线字符，比如<code>_kcab</code>，所以最好避免自己使用它。以一个或者两个下划线字符开始的，标准的标签，比如库中的标识符，会被<em><strong>储存</strong></em>起来，也就是说，即使使用它们作为名字并没有任何的语义错误，它是会造成一些名字冲突的。</p>\n<p>C的标识符是<em><strong>区分大小写</strong></em>的，也就意味着大学字母是被看做与对应的小写字母字符不同的。因此，<code>stars</code>与<code>Stars</code>和<code>STARS</code>是不同的。</p>\n<p>为了让C语言能够更加国际化，C99使用通用字符名称机制(UCN)进行了巨大的扩充，在附录B中的参考单元VII“更广大的字符支持”，我们讨论了这些加入的部分。</p>\n<h3 id=\"声明变量的四个好处\"><a href=\"#声明变量的四个好处\" class=\"headerlink\" title=\"声明变量的四个好处\"></a>声明变量的四个好处</h3><p>一些年代更远的语言，比如FORTRAN与BASIC语言的原型版本，可以让你在没有声明的情况下使用变量。那么为什么我们不能在C语言中使用这种简单易行的方法呢？这里就是一些原因：</p>\n<ul>\n<li>把所有的变量放在一个地方能够让阅读者更容易地知道程序是关于什么的。这点好处在你给变量取有意义的名称的时候尤其明显，（就像<code>taxrate</code>与<code>r</code>），如果名字不能达意就使用注释来解释，以这种方式给程序做记录是一种良好的编程技巧。</li>\n<li>通过思考声明变量是为了什么鼓励你全心投入地去写程序之前做一些准备。程序开始需要什么类型的信息？我到底想要程序输出什么？呈现数据的最好方式是什么？</li>\n<li>声明变量有助于我们预防编程中更多难以发现又狡猾的错误之一-也就是拼错了变量的名字。举个例子，假设在一些没有声明的语言中，你写下了这个语句。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">radius1 = <span class=\"number\">20.4</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后在另一个地方，你拼错了变量名。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; circum = <span class=\"number\">6.28</span> * radiusl;</span><br></pre></td></tr></table></figure>\n\n<p>你无意地把数字<code>1</code>换成了<code>l</code>，那种语言也会创造一个<code>radiusl</code>的变量，然后用未知的值（或许是0，或许是垃圾值），<code>circum</code>就会被给予一个错误的值，而且你可能需要极其多的时间来搞清楚为什么，这在C语言是不可能出现的（除非你确实是笨到家了去定义两个这样相似的变量名），因为编译器会在radiusl出现的时候报错。</p>\n<ul>\n<li>如果你不声明变量的话，你的C语言程序是不会进行编译的。如果先前的原因没有动摇你的话，对于这一点你可就得好好想想了。</li>\n</ul>\n<p>既然你需要声明需要使用的变量，它们会到哪里呢？就像上文提过的，C语言在C99之前就要求声明需要在代码块之前完成，遵循这种把声明放在一起的做法，你就可以更容易地得知程序正在做什么。当然，把你的声明分布在各个地方也是有好处的，正像现在C99所允许的。这也就是在你赋值之前先声明变量。那让你更难以忘记给他们赋值。作为关键性的事情，许多的编译器还不支持C99的这个规则。</p>\n<h3 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>下一行的程序是一个<em><strong>赋值语句</strong></em>，C语言中的其中一种基础运算。这个例子的意思是“把值<code>1</code>赋给变量<code>num</code>，之前的<code>int num</code>”这一行在电脑内存中为<code>num</code>分配了空间，这一行也就在这个空间中储存值。如果想要的的话你可以过会给<code>num</code>赋另一个值，那也就是<code>num</code>被叫做<em><strong>变量</strong></em>的原因。需要注意的是赋值语句会把值从右边到左边传递。<br>同时，这一句也是以分号结尾的，就像图2.2中显示的。<br><img src=\"/img/assignment.png\" alt=\"赋值图示\"></p>\n<h2 id=\"printf-函数\"><a href=\"#printf-函数\" class=\"headerlink\" title=\"printf()函数\"></a><code>printf()</code>函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I am a simple &quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;computer.\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;My favorite number is %d because it is first.\\n&quot;</span>,num);</span><br></pre></td></tr></table></figure>\n<p>这些行使用了一个C标准库中叫<code>printf</code>的函数，圆括号表明了<code>printf</code>是一个函数的名字，在圆括号之中的内容就是<code>main()</code>函数向<code>printf()</code>函数传递的信息。例如，第一行就传递了这句话 <code>I am a simple</code>这样的信息叫做<em><strong>参数</strong></em>，或者更加充分地，叫做函数的<em><strong>实际参数</strong></em>（见图2.3），那么<code>printf()</code>函数会对对这种语句做些什么呢？它会抓取在双引号之间的一切，然后把文本打印在屏幕上。</p>\n<p><img src=\"/img/calling.png\" alt=\"函数调用\"></p>\n<p>第一行<code>printf()</code>是你调用函数的一个很好的例子，你只需要打字写下函数的名称，把需要的参数放在圆括号内。当程序运行到这一行时，控制流就转换到已经定义的函数（在这个例子中是<code>printf()</code>）中，然后当函数已经完成了它需要做的事情之后，控制流就又回到原来的（<em><strong>调用</strong></em>）函数-在这个例子中是<code>main()</code>。</p>\n<p>下一行的<code>printf</code>呢？它在引号中包含了<code>\\n</code>这个字符，而且它并没有被打印下来？发生了什么？<code>\\n</code>的作用其实是另起一行，<code>\\n</code>的组合体（打印下来是两个字符）就组成了<code>\\n</code>这个叫<em><strong>换行符</strong></em>的新字符。对于<code>printf()</code>它意味着“在左下角再起一行”。也就是说，打印换行符和你在常规键盘上按下<code>enter</code>键的作用是差不多的。那么为什么不在打字写<code>printf</code>的时候用<code>Enter</code>键呢？那是因为因为那只会被认为是对于你的编译器的即时的指令，而不是对于源码的指令，也就是说，当你按下<code>enter</code>键时编辑器会退出当前的行，然后另起一行。换行符，影响着程序是如何显示的。</p>\n<p>换行符是<em><strong>转义字符</strong></em>的范例，<em><strong>转义字符</strong></em>是用来呈现难以或者几乎不能通过打印显示出来的字符的。其他的还有<code>\\t</code>对应着<code>Tab</code>、<code>\\b</code>对应着<code>Backspace</code>，每一个转义字符都会由<code>\\</code>来起始，我们会在第三章：C语言与数据再回到这个话题深入研究。</p>\n<p>这也就解释了为什么三个<code>printf</code>却只有两行文字了，第一个<code>printf()</code>命令没有换行符，但是第二个与第三个是有的。</p>\n<p>最后的<code>printf()</code>又带来了另外一个异样的地方：当这行文字被打印的时候<code>%d</code>发生了什么？你应该还记得，输出是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">My favorite number is 1 because it is first.</span><br></pre></td></tr></table></figure>\n<p>啊哈，当被打印出来的时候，数字<code>1</code>就是<code>%d</code>的替换物，而且变量<code>num</code>的值就是<code>1</code>，<code>%d</code>是展示<code>num</code>的值在什么时候被打印的占位符，这一行与下面的BASIC语句是相似的：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PRINT</span> <span class=\"string\">&quot;My favorite number is &quot;</span>; num; because it is first.<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<p>事实上，C语言的版本比这个做的工作还要多一点，<code>%</code>告诉程序有一个变量需要在这个区域被输出，<code>d</code>表达了要把这个变量以十进制整数的方式输出。<code>printf</code>还可以以其他变量形式进行输出，包括十六进制数、带有十进制小数点的数。事实上，<code>printf()</code>中的<code>f</code>表明了它是一个<em><strong>格式化</strong></em>打印函数。每种数据类型都有自己的指示符，这本书也会在介绍新的数据类型的同时引入对应的指示符。</p>\n<h3 id=\"返回语句\"><a href=\"#返回语句\" class=\"headerlink\" title=\"返回语句\"></a>返回语句</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>返回语句是这个程序的最后一个语句，在<code>int main(void)</code>中的<code>int</code>意味着<code>main()</code>函数应该返回一个十进制整数。<code>main()</code>函数这样返回是C语言标准要求的。返回值的C语言函数都会使用return语句来进行这个操作，return语句包含着关键字<code>return</code>与返回的值，以一个分号结束。如果你遗漏了这一句，大多数编译器会报错，但是它们仍然会对程序进行编译。这样的话，你可以把return语句看成为了增加逻辑的连贯性的东西，但是它对于一些操作系统是由实际用处的，包括DOS和Unix，我们在第11章会更深入地对于这个话题给出解释。</p>\n<h1 id=\"2-3-简单程序的结构\"><a href=\"#2-3-简单程序的结构\" class=\"headerlink\" title=\"2.3 简单程序的结构\"></a>2.3 简单程序的结构</h1><p>既然你已经看过了具体的例子，你已经准备好了解C语言程序的一些基本规则了。<em><strong>程序</strong></em>由包含一个函数或者多个函数的组组成，其中一个必须叫<code>main()</code>对于函数的描述包括函数头与函数体，<em><strong>函数头</strong></em>包括预处理语句，如<code>#include</code>，与函数的名字。你可以通过看圆括号的方式来得知这是个函数，即使圆括号可能是空的。<em><strong>函数体</strong></em>是由大括号框定的，它包括了一系列的语句，每一个都是由一个分号结尾的（见图2.4）。在例子中有<em><strong>声明语句</strong></em>，它是用来声明变量的类型与名字的，还有<em><strong>赋值语句</strong></em>，它给予变量一个值。然后还有三个<em><strong>print语句</strong></em>，每一个都调用了<code>printf()</code>函数，这些print语句是<em><strong>函数调用语句</strong></em>的一些示范。最后<code>main()</code>函数以返回值结束。</p>\n<p>简单来说，一个简单的、标准的C语言程序应该使用下面的格式。<br><img src=\"/img/function1.png\" alt=\"图2.4\"><br><img src=\"/img/structure.png\" alt=\"标准格式\"></p>\n<h1 id=\"2-4-可读性建议\"><a href=\"#2-4-可读性建议\" class=\"headerlink\" title=\"2.4 可读性建议\"></a>2.4 可读性建议</h1><p>使你的程序变得更可读是一种优秀的编程实践。可读性高的程序很容易理解，也就很容易去修改、纠正。让一个程序变得可读的过程也帮助你理清你对于程序执行自己的概念。</p>\n<p>你已经看过两种可以增加可读性的技巧了：选择变量名与使用注释。注意这两种技巧是相互补充的。如果你给一个变量注名<code>width</code>，你就不需要对于这个变量表示什么做任何解释了。但是叫做<code>video_routine_4</code>的变量就需要对于video routine 4的解释。</p>\n<p>另一个技巧是使用空行来分隔函数中的概念模块。例如，简单的实例程序就使用了空行分开了声明部分与行动部分。C语言不需要空行，但是它能够提高可读性。</p>\n<p>第四个技巧就是每行使用一个语句。再一次，这是一个针对于可读性的惯例，并不是C语言的要求。C语言的格式是<em><strong>形式自由</strong></em>的，你可以把几句话放在一行或者一直延伸到第二行。下面的代码是合法的，但是看起来很丑。<br><img src=\"/img/poorreadability.png\" alt=\"丑\"><br>分号向编译器指示了一个语句什么时候结束和下一句什么时候开始。但是如果你能够遵从这种在本章的例子中使用的传统手法，程序的逻辑会清晰很多。（见图2.5）<br><img src=\"/img/readable.png\" alt=\"可读性规范\"></p>\n<h1 id=\"2-5-更进一步\"><a href=\"#2-5-更进一步\" class=\"headerlink\" title=\"2.5 更进一步\"></a>2.5 更进一步</h1><p>我们的第一个C语言例子还是很简单的，接下来的图2.2就是第二个例子，但也并不是非常难。</p>\n<p><img src=\"/img/example2.png\" alt=\"例子\"></p>\n<p>新在哪里呢？代码中提供了对于程序的描述（在注释中），声明了很多变量，做了一些乘法运算，然后把这两个变量的值打印下来，让我们把这些点深入地了解一下。</p>\n<h2 id=\"记录-Documentation\"><a href=\"#记录-Documentation\" class=\"headerlink\" title=\"记录 Documentation\"></a>记录 Documentation</h2><p>第一，程序是以注释开始的（使用的是新的注释形式），它确定了文件名与程序的目的。这种程序的记录只花费一分钟就可以做，而且之后会在你浏览多个文件并打印它们的时候起到很大帮助。</p>\n<h2 id=\"多行声明-Multiple-Declarations\"><a href=\"#多行声明-Multiple-Declarations\" class=\"headerlink\" title=\"多行声明 Multiple Declarations\"></a>多行声明 Multiple Declarations</h2><p>然后，程序在一行中声明了两个而不是一个变量。为了达成这个目的，可以把两个变量（<code>feet</code>与<code>fathoms</code>）的声明使用一个逗号隔开，也就是下面这样。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> feet, fathoms;</span><br></pre></td></tr></table></figure>\n\n<p>它和下面的形式是等价的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> feet;</span><br><span class=\"line\"><span class=\"type\">int</span> fathoms;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运算-Multiplication\"><a href=\"#运算-Multiplication\" class=\"headerlink\" title=\"运算 Multiplication\"></a>运算 Multiplication</h2><p>第三步，程序进行运算，它利用了计算机系统庞大的算力来计算2乘6。<br>在C语言中，同样也在很多语言中，<code>*</code>是乘法运算的符号。<br>因此，下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feet = <span class=\"number\">6</span> * fathoms;</span><br></pre></td></tr></table></figure>\n\n<p>它的意思就是：查看<code>fathoms</code>的值，乘以6，然后把这个运算的结果的值赋给变量<code>feet</code>。</p>\n<h2 id=\"打印多个值-Printing-Multiple-Values\"><a href=\"#打印多个值-Printing-Multiple-Values\" class=\"headerlink\" title=\"打印多个值 Printing Multiple Values\"></a>打印多个值 Printing Multiple Values</h2><p>最终，程序更多样地使用了<code>printf()</code>如果你编译运行过这个例子，输出应该是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">There are 12 feet <span class=\"keyword\">in</span> 2 fathoms！</span><br><span class=\"line\">Yes, I said 12 feet!</span><br></pre></td></tr></table></figure>\n\n<p>这一次，代码在第一次使用<code>printf()</code>的时候，使用了两次替代符，在双引号中的第一个<code>%d</code>被在后面引用列表的第一个变量的值替换了(<code>feet</code>)然后第二个<code>%d</code>被第二个变量代替了。要注意的是待打印变量列表是在双引号部分后面，另外也注意每一个都是用括号分开的。</p>\n<p>第二次使用<code>printf()</code>表明了打印的值并不一定是变量的，只是必须要指定一个值，就像<code>6 * fathoms</code>这样，可以是恰当类型的值。</p>\n<p>这个程序受篇幅不长，但是它可以呈现把fathoms转换到feet的核心。我们需要的就是动态地去赋其他的值给<code>feet</code>我们会在以后的章节解释如何做。</p>\n<h1 id=\"2-6-顺便一提：多重函数\"><a href=\"#2-6-顺便一提：多重函数\" class=\"headerlink\" title=\"2.6 顺便一提：多重函数\"></a>2.6 顺便一提：多重函数</h1><p>目前为止，这些程序已经使用过了基本的<code>printf()</code>函数。图2.3向你展示了如何把自己的函数-除了<code>main()</code>以外的函数-加到程序里。</p>\n<p><img src=\"/img/twofunc.png\" alt=\"两个函数的程序\"></p>\n<p>输出是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I will summon the butler <span class=\"keyword\">function</span>.</span><br><span class=\"line\">You rang, sir?</span><br><span class=\"line\">Yes,Bring me some tea and writeable CD-ROMS.</span><br></pre></td></tr></table></figure>\n\n<p><code>butler()</code>函数在程序中出现了三次，第一次出现是在<em><strong>原型</strong></em>中，那告诉了编译器要使用的函数。第二次出现是在<code>main()</code>函数中，在<em><strong>函数调用</strong></em>中出现，最终，程序呈现了<em><strong>函数的定义</strong></em>过程，那是函数本身的源码。让我们再来看看这三次出现。</p>\n<p>C90标准添加了原型，老翻译器可能并不能识别它们（我们将会讲到当你使用那种编译器的时候要怎么做。）原型就是一种告诉编译器你正在使用一个特定的函数的声明。它也指定了函数的属性。例如，<code>butler()</code>函数的第一个词<code>void</code>指明了它没有返回值。（大体上，函数可以为了使用值而返回这些值，但<code>butler</code>没有），第二个<code>void</code>-在<code>butler(void)</code>-的意思是它没有参数。因此，当编译到达<code>main()</code>函数中<code>butler</code>被使用的这一行时，它会检查是否<code>butler</code>是被恰当地使用的。需要注意，<code>void</code>是被用来表示empty（空），而不是invalid（不合法、无效）。</p>\n<p>早先的C语言支持的函数声明类型有限，那时你只能定下返回值的类型，但是对于参数的描述就被省略。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">butler</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<p>那时的C语言代码使用的函数声明就像是上述的样子，而不是函数原型，C90与C99标准都能够辨认出这种更老的形式，但是它们表示这种形式会随着时间被淘汰，所以不要用。如果你从一些更老的地方拿到了C语言代码，你有可能想要把老式的声明变成原型。以后的章节会回到原型制作、函数声明与返回值上。</p>\n<p>接下来，你通过给出<code>butler</code>的名字与圆括号来援引函数。（调用），当<code>butler</code>完成了它的工作，程序就会移向<code>main()</code>函数中的下一行。</p>\n<p>最终，函数<code>butler()</code>以与<code>main()</code>函数一样的形式被定义，有函数头与用大括号框定的函数体。函数头重复了你在原型中提供的信息：<code>butler</code>不使用信息，而且不返回值。对于老旧的编译器，省略第二个<code>void</code>。</p>\n<p>有一点需要注意的，就是在<code>main()</code>函数中<code>butler()</code>被调用的位置-而不是<code>butler()</code>函数被定义的位置-决定了<code>butler()</code>函数的运行位置。比如，你可以把<code>butler()</code>函数的定义放在<code>main()</code>函数的前面，程序还是会照旧那样把<code>butler()</code>放在两个<code>printf()</code>中间运行。记住，所有的C语言程序都是以<code>main()</code>函数开始的，无论<code>main()</code>函数在程序文件的什么位置。然而，C语言实际上是先把<code>main()</code>函数列出来，因为它通常提供了基本的程序框架。</p>\n<p>C语言标准建议你为所有你使用的函数提供原型，标准的<code>include</code>文件为标准库函数做这个工作，例如，在标准C语言下，<code>stdio.h</code>文件就有<code>printf()</code>函数的原型，第六章的最后一个例子会告诉你如何去更广泛地为非<code>void</code>的函数制作原型，第九章会全面地讲述函数。</p>\n<h1 id=\"2-7-调试引入\"><a href=\"#2-7-调试引入\" class=\"headerlink\" title=\"2.7 调试引入\"></a>2.7 调试引入</h1><p>现在你已经可以写一个简单的C语言程序了，你有可能海域犯些简单的错误。程序的错误通常被叫做<em><strong>bugs</strong></em>，寻找与修复它们就叫做<em><strong>调试</strong></em>，图2.4就展现了有些bugs的程序，看看你是否能够找到。</p>\n<p><img src=\"/img/nogood.png\" alt=\"找找吧，有几处？\"></p>\n<h2 id=\"语法错误-Syntax-Errors\"><a href=\"#语法错误-Syntax-Errors\" class=\"headerlink\" title=\"语法错误 Syntax Errors\"></a>语法错误 Syntax Errors</h2><p>图2.4的例子犯了几个语法错误，当你没有遵循C语言的规则，你就会犯<em><strong>语法错误</strong></em>，这也可以类比到英语的语法错误。例如，思考一下这句话：<em><strong>Bugs frustrate be can.</strong></em> 这句话使用的单词是正确的，但是并没有遵循单词顺序的规律，而且使用的单词形式也不太对，不管怎样，C语言的语法错误就是在错误的地方使用了正确的C语言标志。</p>\n<p>所以<code>nogood.c</code>这个程序究竟犯了什么错误呢？第一，它使用的是括号而不是大括号来标记函数体，也是把正确的C语言符号用在了错误的地方，第二，声明应该是这个样子的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, n2, n3;</span><br></pre></td></tr></table></figure>\n\n<p>或者这样</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> n2;</span><br><span class=\"line\"><span class=\"type\">int</span> n3;</span><br></pre></td></tr></table></figure>\n\n<p>而且，这个例子遗漏了安置一条注释必须要使用的<code>*/</code>符号对（作为替换，你可以用<code>//</code>形式替换<code>/*</code>），最后，它遗漏了<code>printf()</code>后的本应作为语句结束标志的分号。</p>\n<p>你如何来检查语法错误呢？第一，在编译之前，浏览你的源码，看你是否看到一些明显的错误。第二，你可以检查编译器找到的错误，因为它的一部分工作就是检查语义错误。当你编译程序的时候，编译器会反馈找到的所有错误，并且会明确错误类型与出错的位置。</p>\n<p>然而，编译器有时也会混乱，实际上的一个区域内的语义错误有可能会让编译器错误地认为它找到了其他种类的错误。例如，因为这个例子没有恰当地声明<code>n2</code>与<code>n3</code>，所以编译器会认为它在被使用的地方找到了错误。事实上，与其试图一次把所有报告的错误修正过来，不如只修改一两个然后重新编译，这样的话有些其他种类的错误就会消失。继续这样做，直到程序正常运行。另一个常见的编译器“诡计”是它会在后面的行报错，但其实出错是在前面的行里。例如，编译器有可能直到下一行才能判断出上一行遗漏了分号。所以如果编译器报错说缺少分号，那么在这一行之前进行检查。</p>\n<h2 id=\"语义错误-Semantic-Errors\"><a href=\"#语义错误-Semantic-Errors\" class=\"headerlink\" title=\"语义错误 Semantic Errors\"></a>语义错误 Semantic Errors</h2><p>语义错误是在意义上的错误，例如，思考这一句话: <em><strong>Furry inflation thinks greenly.</strong></em>  语法上是正确的，因为形容词、名词、动词、还有副词都在合适的位置上，但这句话就是一派胡言。在C语言中，当你遵循了C语言的规则但是导致了不合适的结果，这个例子中就有这样的错误。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n3 = n2 * n2;</span><br></pre></td></tr></table></figure>\n\n<p>n3本应该是用来展现<code>n</code>的3次方的，结果程序把它算成了<code>n</code>的4次方。编译器是检测不出来语义错误的，因为它们并不违背C语言的规则。编译器没有能力去猜测你程序的意图。那也就只能由你来找到这些种类的错误了。一种方式是把程序做的事情与程序应该做的事情进行对比。例如，假定你已经找到了例子中的语法错误，那么它现在看起来是这个图2.5样子的。</p>\n<p><img src=\"/img/stillbad.png\" alt=\"还是错的...\"></p>\n<p>它的输出是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = 5, n squared = 25, n cubed = 625 </span><br></pre></td></tr></table></figure>\n\n<p>如果你可以口算立方的话，那么你就会注意到625是个错误的值。下一阶段就是找到你是如何陷入这个错误的。例如，你有可能会通过观察找到错误。大体上，然而你还需要一些系统的方法。一种方法是假装你是电脑，然后一步步地跟着程序走，让我们现在就尝试一下那个方法。</p>\n<p>程序体以声明三个变量<code>n1, n2与n3</code>开始，你可以通过画三个盒子并把它们各自标注名称来模拟这个情况。（看图2.6）然后，程序会把5赋给<code>n</code>，通过把数字5写在盒子里来模拟，然后，程序用<code>n</code>乘<code>n</code>然后把它的值赋给<code>n2</code>，所以看向盒子<code>n</code>，看着5乘5得到了25，然后把25放在盒子里。为了模拟下一句，也是同样，看向盒子2，然后用25乘25，然后把这个值给予<code>n3</code>，啊哈，你做乘法的时候使用的是<code>n</code>的平方而不是用<code>n</code>。</p>\n<p>嗯，有可能这个过程对于这个程序有点过了，但是以这种方式一步步地浏览程序总会是得知发生了什么最好的方法。</p>\n<h2 id=\"程序状态\"><a href=\"#程序状态\" class=\"headerlink\" title=\"程序状态\"></a>程序状态</h2><p>通过手工地一步步地追踪程序，追踪每一个变量，你监视了程序的状态，<strong>程序状态</strong>就是所有变量在一个时间点上被给予的一组值。它是运算状态的快照。</p>\n<p><img src=\"/img/tracer.png\" alt=\"追踪程序状态\"></p>\n<p>我们刚刚讨论了一种追踪程序状态的方法：通过自己一步一步地运行程序。在一个进行1000次迭代的程序中，你可能觉得并不能完成那个工作。然而，你还是可以经历一些迭代过程，看看你的程序是不是按你想要的方式来运行的。然而，通常是会有这种情况的，你会按照你想要的方式去“执行”它们，而不是真正把它们写下来，所以在写真正的代码的时候要努力做到正确。</p>\n<p>另一个方法就是通过在程序的自始至终放置几个<code>printf</code>语句来定位语义问题。在程序运行的关键点监测选定变量的数值。看看数值是怎么变化的可以让你知道正在发生什么。在你让程序按照你满意的方式运行之后，你就可以去掉多余的语句去重新编译了。</p>\n<p>第三种监测的方法就是使用调试器。<em><strong>Debugger</strong></em>是一种能够让你一步一步地运行程序并且查看程序变量的值的程序。它们使用的难易程度与复杂度都各有不同。更高级的编译器可以显示哪一行代码正在被运行。这对于多路径的程序是非常方便的，因为可以很容易地看到走的是哪一条路径。如果你的编译器中有调试器，那么花谢时间学学则呢么使用吧。比如像图2.4那样尝试使用它。</p>\n<h1 id=\"2-8-关键字与内置标识符\"><a href=\"#2-8-关键字与内置标识符\" class=\"headerlink\" title=\"2.8 关键字与内置标识符\"></a>2.8 关键字与内置标识符</h1><p>关键字就是C语言中的词汇，因为它们对于C语言是特别的，所以你不能把它们作为标识符来使用。有一些关键字分别了多种多样的类型，比如说<code>int</code>，其他的比如说<code>if</code>是被用来控制程序运行语句的顺序的。在以下的C语言关键字的列表中，黑体表示在ISO&#x2F;ANSI C90标准下的关键字，斜体的是C99标准加入的新关键字</p>\n<p><img src=\"/img/keywords.png\" alt=\"关键字\"></p>\n<p>如果你尝试把关键字用于变量的名字，编译器会把它识别为语法错误，还有其他的标识符，它们叫做<em><strong>内建标识符</strong></em>，你也是不应该使用的，他们不会导致语法错误，因为它们是合法的名称，但是语言已经使用过或者还保留着使用它们的权利，所以如果你使用这些标识符来表示其他的东西会引起问题。内置的标识符包括以下划线开始的词还有库函数的名称，就像<code>printf()</code>.</p>\n<h1 id=\"关键概念\"><a href=\"#关键概念\" class=\"headerlink\" title=\"关键概念\"></a>关键概念</h1><p>电脑编程是一项有挑战性的活动，它需要复杂与概念化的思考，而且还需要对于细节格外注意。你会发现编译器会强制你去注意细节。当你对朋友说话的时候，你可能会把几个词用错，犯几个语法错误，可能话没有说完，但是你的朋友仍然能够理解你在说什么。但是编译器不会允许这种情况。对于编译器来说，几乎对了也是错的。</p>\n<p>编译器并不能在概念问题帮到你多少，比如在这里说的这些东西。所以这本书会尽力通过给出每一章关键概念的大纲来弥合那个差距。</p>\n<p>对这一章，你的目标是你需要理解C语言程序是什么，你可以认为程序就是你对于想让电脑干什么的描述。编译器精细化地解决把你的描述变为含蓄的机器语言。（对于编译器做多少工作的测量显示，它可以从你1KB的源码文件创造出来60KB的可执行程序）即使一个简单的C语言程序也需要很多的机器语言来代表它们。）因为编译器并没有智能，你必须使用编译器的词汇来描述你的意思，而且这些词汇是由C语言标准设立的正规规则。（即使很受限制，还是比直接用机器语言来表达强的多了！）</p>\n<p>编译器期望着收到以独特的形式写出的指令，这一章已经详细地描述了。你作为编程人员的工作就是表达在编译器框架下你对于程序应该如何运作的想法-由C语言标准所引导就可以正确地运行。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><ol start=\"4\">\n<li>Indiana Sloth准备了如下的程序，让你看一看是不是正确，请帮帮他吧。</li>\n</ol>\n<p><img src=\"/img/quest4.png\" alt=\"问题4\"></p>\n<p>main函数用了{}来括起来，函数体用的是括号，是错的。<br>声明语句没加分号，赋值只需要一个&#x3D;号即可。<br>是printf而不是print。没加双引号，没加引用列表。最后没结束。stdio.h打错了而且#和&lt;&gt;，注释另一边写反了，导致全文为注释。</p>\n<p>5.假设下面的每一个例子都是完整程序的一部分，它们每一个会打印什么呢?</p>\n<p><img src=\"/img/quest5.png\" alt=\"问题5\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#a.</span></span><br><span class=\"line\">Baa Baa Black Sheep.Have you any wool?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#b.</span></span><br><span class=\"line\">Begone!</span><br><span class=\"line\">creature of lard!</span><br><span class=\"line\"><span class=\"comment\">#c.</span></span><br><span class=\"line\">What?</span><br><span class=\"line\">No/nBonzo?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#d.</span></span><br><span class=\"line\">2 + 2 = 4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><p>下面哪些是C语言关键字？ <code>main, int, function, char, =</code><br>int、char</p>\n</li>\n<li><p>你会如何把<strong>行数</strong>与<strong>字数</strong>打印出来？<br>在以下的形式中<code>There were 3020 words and 350 lines.</code></p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">word = <span class=\"number\">3020</span>;</span><br><span class=\"line\">line = <span class=\"number\">350</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;There were %d words and %d lines.&quot;</span>, word, line);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>思考下面的程序<br><img src=\"/img/quest8.png\" alt=\"问题8\"><br>在第7行之后的程序状态是什么？<br>第八与第九行呢？</li>\n</ol>\n<blockquote>\n<p>第7行 a &#x3D; 5，b &#x3D; 2</p>\n</blockquote>\n<blockquote>\n<p>第8行 a &#x3D; 5， b &#x3D; 5</p>\n</blockquote>\n<blockquote>\n<p>第9行 a &#x3D; 5， b &#x3D; 5</p>\n</blockquote>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>只是阅读是不够的，你得尝试写一两个简单的程序来看看是不是写程序和你看这一章的感觉一样流畅。下面有一些建议，但是你也确实需要独立思考一些问题。你会在网站上找到下面选出问题的答案。</p>\n<ol>\n<li>调用一次printf，把你的姓与名在一行中输出<br> 再调用一次printf，把你的姓与名在两行中输出。<br> 使用两次printf把你的姓和名在一行中输出。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简略一写</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike Smith\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike\\nSmith\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Smith\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>写一个打印你的姓名与地址的程序</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;My name is Ywx\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Address: Zhengzhou city in Henan province&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>写一个把你的年龄转换成天数的程序，展示两者的值。不必关心闰年和平年。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age, days;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;age);</span><br><span class=\"line\">\tdays = age * <span class=\"number\">365</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, age, days);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.写一个会打印出以下语句的程序</p>\n<p><img src=\"/img/four.png\" alt=\"语句\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;For he&#x27;s a jolly good fellow!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Which nobody can deny!&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.写一个程序，创建一个叫做<code>toes</code>的变量，把<code>toes</code>设为10，<br>计算toes的二倍和平方分别是什么，并把它们打印下来</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttoes = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, toes, toes * <span class=\"number\">2</span>, toes * toes);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.写一个会打印出如下的输出的程序</p>\n<p><img src=\"/img/six.png\" alt=\"Smile!\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">3</span>;i &gt;= <span class=\"number\">1</span>;i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt; i;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Smile&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7.写一个叫做<code>one_three()</code>的函数，这个函数应该在一行内展现文字<code>one</code>然后调用函数<code>two()</code>，接着在另一行内显示文字<code>three</code>。<br><code>two()</code>把文字<code>two</code>在一行输出。以Stating now开始，像这样。</p>\n<p><img src=\"/img/last.png\" alt=\"数数\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">two</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;two\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">one_three</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;one\\n&quot;</span>);</span><br><span class=\"line\">\ttwo();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;three\\n&quot;</span>)l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;starting now:\\n&quot;</span>);</span><br><span class=\"line\">\tone_three();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>End…</p>\n</blockquote>"},{"title":"C语言练习7讲解","date":"2023-11-24T13:37:44.000Z","_content":"可能因为课题的深入吧，我们的题目难度也与日俱增。今天关于数组的题目有些很值得讲的，今天和大家分享一下我的看法。\n<!--more-->\n\n## 逆序\n\n因为今天上午已经学过并且讲过，所以这题没啥好说的。\n从0到n - 1输入数组，从n - 1到0输出数组。\n两个for循环搞定。\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tint array[11];     //1-10 略大一点，留有余地。\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\tfor(int i = n - 1;i > 0;i--)\n\t{\n\t\tprintf(\"%4d\",array[i]);\n\t}\n\treturn 0;\n}\n```\n\n## 数组最小值\n\n审题得：题目的要求是求最小值以及其下标，然后输出下标最小的一个\n最小值我们知道怎么求，一个for循环搞定。\n其实因为你找到了第一个值，把它设置为最小值之后，\n就算另一个值与它相等，我们找的是比它小的数，而不是相等，\n相当于没关系了。\n\n那么开写\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n, min, iPosit;\n\tint array[1001]\n\tscanf(\"%d\",&n);\n\t\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\tmin = array[0];\n\tfor(int i = 1;i < n;i++)\n\t{\n\t\tif(min > array[i])\n\t\t{\n\t\t\tmin = array[i];\n\t\t\tiPosit = i;\n\t\t}\n\t}\n\tprintf(\"%d %d\",min,iPosit);\n\treturn 0;\n}\n```\n\n数组n个输入的模版-仅供参考。\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n;\n\tint array[101]\n\tscanf(\"%d\",&n);\n\t\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\t//...\n\treturn 0;\n}\n```\n\n## 删除元素：\n\n在直播中我们只讲函数，思路今天上午已经讲过了。\n\n一个是PrintArr，相信不太用多说\n```C\nvoid PrintArr(int a[], int n)\n{\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tprint(\"%d\", a[i]);\n\t}\n}\n```\n\n另一个就是我们的del函数，用的是覆盖的思路。\n```C\nvoid del(int a[], int n, int i)\n{\n\tfor(int k = i;k < n - 1;k++)\n\t{\n\t\ta[k] = a[k + 1];\n\t}\n}\n```\n\n今天下午看到我们小伙伴有对调用时数组的形式不太理解的，\n这里说一下。\n我们调用函数的时候参数填入的是数组的名称\n比如我们调用del函数时，我们是这样写的。\n\n```C\n\tdel(array, n, k);\n\t//array为数组名，n为长度，k是要删除的下标。\n```\n\n不需要加中括号，那样的话指向的就是数组中的元素了。\n比如array[10]，甚至我们数组中没有这个元素，那样就会导致**运行错误**\n余下就执行函数就好，注意PrintArr在覆盖之后输出n - 1的值。\n因为数组在覆盖之后最后一个值与倒数第二个值是相等的。\n\n```C\n#include <stdio.h>\n \nvoid del(int a[], int n, int i);\nvoid PrintArr(int a[],int n);\n \nint main(void)\n{\n    int n, k;\n    int array[10];\n    scanf(\"%d\", &n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d\",&k);\n    del(array, n, k);\n    PrintArr(array, n - 1);\n    return 0;\n}\n \nvoid del(int a[], int n, int i)\n{\n    for(int k = i;k < n - 1;k++)\n    {\n        a[k] = a[k + 1]; \n    }\n}\n \nvoid PrintArr(int a[], int n)\n{\n    for(int i = 0;i < n;i++)\n    {\n        printf(\"%d \", a[i]);\n    }\n}\n```\n\n数组元素\n\n下一题，加入一个find函数，在主函数中加入一个if判断找不找的到就好\n找的到，返回i，找不到，返回-1.\n\n[find函数]\n```C\nint find(int a[], int n, int x)\n{\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tif(x == a[i]) return i; \n\t}\n\treturn -1;\n}\n```\n\n后面判断一下find的值是不是大于0即可。\n\n## 路旁的树\n\n一条数轴，相当于一个一维数组。\n维度这个概念其实是与数轴相关的。\n如果平面直角坐标系的话一般就会用二维数组，\n像天梯赛模拟题的炎爆那道题\n\n思路是，首先把每个元素初始化成2\n注意今天上午老师讲的那个错误，\n如\n```C\n\tint array[1001] = {2}\n```\n不要犯这种错误。\n正确的是用for循环把n个元素的值赋为2\n\n这题应该挺简单的。\n也就是多次下把这个区间上的元素全部**降为0**。\n（注意不是-2，这样区间重叠就成负的了。）\n\n然后再定义一个sum变量，再一个一个地加。\n最后输出值即可。\n代码如下。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, N, sum = 0, x, y;\n    int array[1001];\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&N);\n \n    for(int i = 0;i < n;i++)\n    {\n        array[i] = 2;\n    }\n \n    for(int i = 0;i < N;i++)\n    {\n        scanf(\"%d %d\",&x,&y);\n        for(int i = x - 1;i <= y - 1;i++)\n        {\n            array[i] = 0;\n        }\n    }\n    for(int i = 0;i < n;i++)\n    {\n        sum += array[i];\n    }\n    printf(\"%d\",sum);\n    return 0;\n}\n```\n\n## 按分数段统计学生人数\n\n简单的循环题，但是被强行地转成了数组题。\n如果输入的t在输入成绩之前这就是循环了，我们都比较擅长。\n直接输入数据，然后用for循环一个一个比对，\n造一个初始值为0的变量，然后如果大于等于那个值就加一。\n最后输出就好。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, gradelimit, num = 0;\n    int array[101];\n    scanf(\"%d\",&n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d\",&gradelimit);\n    for(int i = 0;i < n;i++)\n    {\n        if(array[i] >= gradelimit) num += 1;\n    }\n    printf(\"%d\",num);\n    return 0;\n}\n```\n\n# 两道比较难的题目\n\n## 1.区间元素和\n\n这道题难在判断的条件多，\n我在做的时候没有想到left与right小于0的情况，\n所以没有做对，但是后来结合志鹏的解答也给出了简单点的答案。\n但是不太好理解，你们要是觉得不好懂看志鹏的就好。\n虽然用的是C++，你们看条件就好。\n\n![志鹏同学的答案](/img/22cf517c3686de1119cf1f156160bd4.jpg)\n（std::cin就相当于我们的scanf，std::cout就相当于我们的printf）\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, left, right;\n    long long sum = 0;\n    int array[101];\n    scanf(\"%d\",&n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d %d\",&left, &right);\n    if(left < n)\n    {\n        for(int i = left;i <= right;i++)\n        {\n            if(i < n && i >= 0)\n                sum += array[i];\n        }\n        printf(\"%d\",sum);\n    }\n    else printf(\"%lld\",0);\n    return 0;\n}\n```\n\n确保left是小于n的，那么两个集合就一定有交集。\n然后保证加的是在0到n - 1上的元素（数组内的）。\n\n## 找出旷课的人\n\n先放代码，直播讲\n\n```C\n#include <stdio.h>\n \nvoid Sort(int a[], int n)\n{\n    int t;\n    for(int i = 0;i < n - 1;i++)\n    {\n        for(int j = i;j < n;j++)\n        {\n            if(a[i] > a[j])\n            {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}\n \nint main(void)\n{\n    int m, n, flag, count = 0, l = 0;\n    int array1[10001];\n    int array2[10001];\n    int array3[10001];\n    scanf(\"%d %d\",&m, &n);\n \n    for(int i = 0;i < m;i++)\n    {\n        scanf(\"%d\",&array1[i]);\n    }\n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array2[i]);\n    }\n \n    for(int i = 0;i < m;i++)\n    {\n        flag = 0;\n        for(int j = 0;j < n;j++)\n        {\n            if(array1[i] == array2[j])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0)\n        {\n            array3[l] = array1[i];\n            count += 1;\n            l++;\n        }\n    }\n     \n    if(count == 0) printf(\"good\\n\"); \n    else\n    {\n        Sort(array3, l);\n        for(int i = 0;i < l;i ++)\n        {\n            printf(\"%d \", array3[i]);\n        }\n    }\n    return 0;\n}\n```\n\n一次模块化的实践，但我当时很怕时间超限。。\n由几个部分组成\n判断相等-加入数组-排序（冒泡）-输出。\n\n## 宿舍的选择\n\n很简单的一道题，关于long long，只是为了防止越界吧。\n判断宿舍可住人数与目前的人数的差，然后与学长的人数相比就好。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int m,n,p,q;\n    long long count = 0;\n    scanf(\"%d\",&m);\n    scanf(\"%d\",&n);\n    for(int i = 0;i < m;i++)\n    {\n        scanf(\"%d %d\",&p,&q);\n        if((q - p) > n)\n            count += 1;\n    }\n \n    printf(\"%d\",count);\n    return 0;\n}\n```\n\n最后说说，这几道题还是很好地帮助我们锻炼了循环那边的知识\n也帮我们抓起来了现在刚学的数组，\n通过写题也得到了一些数学模型上的思考，挺好的。","source":"_posts/C语言练习7讲解.md","raw":"---\ntitle: C语言练习7讲解\ndate: 2023-11-24 21:37:44\ntags: C语言学习\n---\n可能因为课题的深入吧，我们的题目难度也与日俱增。今天关于数组的题目有些很值得讲的，今天和大家分享一下我的看法。\n<!--more-->\n\n## 逆序\n\n因为今天上午已经学过并且讲过，所以这题没啥好说的。\n从0到n - 1输入数组，从n - 1到0输出数组。\n两个for循环搞定。\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tint array[11];     //1-10 略大一点，留有余地。\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\tfor(int i = n - 1;i > 0;i--)\n\t{\n\t\tprintf(\"%4d\",array[i]);\n\t}\n\treturn 0;\n}\n```\n\n## 数组最小值\n\n审题得：题目的要求是求最小值以及其下标，然后输出下标最小的一个\n最小值我们知道怎么求，一个for循环搞定。\n其实因为你找到了第一个值，把它设置为最小值之后，\n就算另一个值与它相等，我们找的是比它小的数，而不是相等，\n相当于没关系了。\n\n那么开写\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n, min, iPosit;\n\tint array[1001]\n\tscanf(\"%d\",&n);\n\t\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\tmin = array[0];\n\tfor(int i = 1;i < n;i++)\n\t{\n\t\tif(min > array[i])\n\t\t{\n\t\t\tmin = array[i];\n\t\t\tiPosit = i;\n\t\t}\n\t}\n\tprintf(\"%d %d\",min,iPosit);\n\treturn 0;\n}\n```\n\n数组n个输入的模版-仅供参考。\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n;\n\tint array[101]\n\tscanf(\"%d\",&n);\n\t\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\t//...\n\treturn 0;\n}\n```\n\n## 删除元素：\n\n在直播中我们只讲函数，思路今天上午已经讲过了。\n\n一个是PrintArr，相信不太用多说\n```C\nvoid PrintArr(int a[], int n)\n{\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tprint(\"%d\", a[i]);\n\t}\n}\n```\n\n另一个就是我们的del函数，用的是覆盖的思路。\n```C\nvoid del(int a[], int n, int i)\n{\n\tfor(int k = i;k < n - 1;k++)\n\t{\n\t\ta[k] = a[k + 1];\n\t}\n}\n```\n\n今天下午看到我们小伙伴有对调用时数组的形式不太理解的，\n这里说一下。\n我们调用函数的时候参数填入的是数组的名称\n比如我们调用del函数时，我们是这样写的。\n\n```C\n\tdel(array, n, k);\n\t//array为数组名，n为长度，k是要删除的下标。\n```\n\n不需要加中括号，那样的话指向的就是数组中的元素了。\n比如array[10]，甚至我们数组中没有这个元素，那样就会导致**运行错误**\n余下就执行函数就好，注意PrintArr在覆盖之后输出n - 1的值。\n因为数组在覆盖之后最后一个值与倒数第二个值是相等的。\n\n```C\n#include <stdio.h>\n \nvoid del(int a[], int n, int i);\nvoid PrintArr(int a[],int n);\n \nint main(void)\n{\n    int n, k;\n    int array[10];\n    scanf(\"%d\", &n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d\",&k);\n    del(array, n, k);\n    PrintArr(array, n - 1);\n    return 0;\n}\n \nvoid del(int a[], int n, int i)\n{\n    for(int k = i;k < n - 1;k++)\n    {\n        a[k] = a[k + 1]; \n    }\n}\n \nvoid PrintArr(int a[], int n)\n{\n    for(int i = 0;i < n;i++)\n    {\n        printf(\"%d \", a[i]);\n    }\n}\n```\n\n数组元素\n\n下一题，加入一个find函数，在主函数中加入一个if判断找不找的到就好\n找的到，返回i，找不到，返回-1.\n\n[find函数]\n```C\nint find(int a[], int n, int x)\n{\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tif(x == a[i]) return i; \n\t}\n\treturn -1;\n}\n```\n\n后面判断一下find的值是不是大于0即可。\n\n## 路旁的树\n\n一条数轴，相当于一个一维数组。\n维度这个概念其实是与数轴相关的。\n如果平面直角坐标系的话一般就会用二维数组，\n像天梯赛模拟题的炎爆那道题\n\n思路是，首先把每个元素初始化成2\n注意今天上午老师讲的那个错误，\n如\n```C\n\tint array[1001] = {2}\n```\n不要犯这种错误。\n正确的是用for循环把n个元素的值赋为2\n\n这题应该挺简单的。\n也就是多次下把这个区间上的元素全部**降为0**。\n（注意不是-2，这样区间重叠就成负的了。）\n\n然后再定义一个sum变量，再一个一个地加。\n最后输出值即可。\n代码如下。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, N, sum = 0, x, y;\n    int array[1001];\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&N);\n \n    for(int i = 0;i < n;i++)\n    {\n        array[i] = 2;\n    }\n \n    for(int i = 0;i < N;i++)\n    {\n        scanf(\"%d %d\",&x,&y);\n        for(int i = x - 1;i <= y - 1;i++)\n        {\n            array[i] = 0;\n        }\n    }\n    for(int i = 0;i < n;i++)\n    {\n        sum += array[i];\n    }\n    printf(\"%d\",sum);\n    return 0;\n}\n```\n\n## 按分数段统计学生人数\n\n简单的循环题，但是被强行地转成了数组题。\n如果输入的t在输入成绩之前这就是循环了，我们都比较擅长。\n直接输入数据，然后用for循环一个一个比对，\n造一个初始值为0的变量，然后如果大于等于那个值就加一。\n最后输出就好。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, gradelimit, num = 0;\n    int array[101];\n    scanf(\"%d\",&n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d\",&gradelimit);\n    for(int i = 0;i < n;i++)\n    {\n        if(array[i] >= gradelimit) num += 1;\n    }\n    printf(\"%d\",num);\n    return 0;\n}\n```\n\n# 两道比较难的题目\n\n## 1.区间元素和\n\n这道题难在判断的条件多，\n我在做的时候没有想到left与right小于0的情况，\n所以没有做对，但是后来结合志鹏的解答也给出了简单点的答案。\n但是不太好理解，你们要是觉得不好懂看志鹏的就好。\n虽然用的是C++，你们看条件就好。\n\n![志鹏同学的答案](/img/22cf517c3686de1119cf1f156160bd4.jpg)\n（std::cin就相当于我们的scanf，std::cout就相当于我们的printf）\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, left, right;\n    long long sum = 0;\n    int array[101];\n    scanf(\"%d\",&n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d %d\",&left, &right);\n    if(left < n)\n    {\n        for(int i = left;i <= right;i++)\n        {\n            if(i < n && i >= 0)\n                sum += array[i];\n        }\n        printf(\"%d\",sum);\n    }\n    else printf(\"%lld\",0);\n    return 0;\n}\n```\n\n确保left是小于n的，那么两个集合就一定有交集。\n然后保证加的是在0到n - 1上的元素（数组内的）。\n\n## 找出旷课的人\n\n先放代码，直播讲\n\n```C\n#include <stdio.h>\n \nvoid Sort(int a[], int n)\n{\n    int t;\n    for(int i = 0;i < n - 1;i++)\n    {\n        for(int j = i;j < n;j++)\n        {\n            if(a[i] > a[j])\n            {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}\n \nint main(void)\n{\n    int m, n, flag, count = 0, l = 0;\n    int array1[10001];\n    int array2[10001];\n    int array3[10001];\n    scanf(\"%d %d\",&m, &n);\n \n    for(int i = 0;i < m;i++)\n    {\n        scanf(\"%d\",&array1[i]);\n    }\n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array2[i]);\n    }\n \n    for(int i = 0;i < m;i++)\n    {\n        flag = 0;\n        for(int j = 0;j < n;j++)\n        {\n            if(array1[i] == array2[j])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0)\n        {\n            array3[l] = array1[i];\n            count += 1;\n            l++;\n        }\n    }\n     \n    if(count == 0) printf(\"good\\n\"); \n    else\n    {\n        Sort(array3, l);\n        for(int i = 0;i < l;i ++)\n        {\n            printf(\"%d \", array3[i]);\n        }\n    }\n    return 0;\n}\n```\n\n一次模块化的实践，但我当时很怕时间超限。。\n由几个部分组成\n判断相等-加入数组-排序（冒泡）-输出。\n\n## 宿舍的选择\n\n很简单的一道题，关于long long，只是为了防止越界吧。\n判断宿舍可住人数与目前的人数的差，然后与学长的人数相比就好。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int m,n,p,q;\n    long long count = 0;\n    scanf(\"%d\",&m);\n    scanf(\"%d\",&n);\n    for(int i = 0;i < m;i++)\n    {\n        scanf(\"%d %d\",&p,&q);\n        if((q - p) > n)\n            count += 1;\n    }\n \n    printf(\"%d\",count);\n    return 0;\n}\n```\n\n最后说说，这几道题还是很好地帮助我们锻炼了循环那边的知识\n也帮我们抓起来了现在刚学的数组，\n通过写题也得到了一些数学模型上的思考，挺好的。","slug":"C语言练习7讲解","published":1,"updated":"2023-11-27T13:22:41.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nxp0006zkueanm1h0j9","content":"<p>可能因为课题的深入吧，我们的题目难度也与日俱增。今天关于数组的题目有些很值得讲的，今天和大家分享一下我的看法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"逆序\"><a href=\"#逆序\" class=\"headerlink\" title=\"逆序\"></a>逆序</h2><p>因为今天上午已经学过并且讲过，所以这题没啥好说的。<br>从0到n - 1输入数组，从n - 1到0输出数组。<br>两个for循环搞定。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">11</span>];     <span class=\"comment\">//1-10 略大一点，留有余地。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%4d&quot;</span>,<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组最小值\"><a href=\"#数组最小值\" class=\"headerlink\" title=\"数组最小值\"></a>数组最小值</h2><p>审题得：题目的要求是求最小值以及其下标，然后输出下标最小的一个<br>最小值我们知道怎么求，一个for循环搞定。<br>其实因为你找到了第一个值，把它设置为最小值之后，<br>就算另一个值与它相等，我们找的是比它小的数，而不是相等，<br>相当于没关系了。</p>\n<p>那么开写</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, min, iPosit;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>]</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmin = <span class=\"built_in\">array</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(min &gt; <span class=\"built_in\">array</span>[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmin = <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">\t\t\tiPosit = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,min,iPosit);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组n个输入的模版-仅供参考。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>]</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除元素：\"><a href=\"#删除元素：\" class=\"headerlink\" title=\"删除元素：\"></a>删除元素：</h2><p>在直播中我们只讲函数，思路今天上午已经讲过了。</p>\n<p>一个是PrintArr，相信不太用多说</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprint(<span class=\"string\">&quot;%d&quot;</span>, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个就是我们的del函数，用的是覆盖的思路。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i;k &lt; n - <span class=\"number\">1</span>;k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[k] = a[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>今天下午看到我们小伙伴有对调用时数组的形式不太理解的，<br>这里说一下。<br>我们调用函数的时候参数填入的是数组的名称<br>比如我们调用del函数时，我们是这样写的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del(<span class=\"built_in\">array</span>, n, k);</span><br><span class=\"line\"><span class=\"comment\">//array为数组名，n为长度，k是要删除的下标。</span></span><br></pre></td></tr></table></figure>\n\n<p>不需要加中括号，那样的话指向的就是数组中的元素了。<br>比如array[10]，甚至我们数组中没有这个元素，那样就会导致<strong>运行错误</strong><br>余下就执行函数就好，注意PrintArr在覆盖之后输出n - 1的值。<br>因为数组在覆盖之后最后一个值与倒数第二个值是相等的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[],<span class=\"type\">int</span> n)</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;k);</span><br><span class=\"line\">    del(<span class=\"built_in\">array</span>, n, k);</span><br><span class=\"line\">    PrintArr(<span class=\"built_in\">array</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i;k &lt; n - <span class=\"number\">1</span>;k++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[k] = a[k + <span class=\"number\">1</span>]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组元素</p>\n<p>下一题，加入一个find函数，在主函数中加入一个if判断找不找的到就好<br>找的到，返回i，找不到，返回-1.</p>\n<p>[find函数]</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x == a[i]) <span class=\"keyword\">return</span> i; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后面判断一下find的值是不是大于0即可。</p>\n<h2 id=\"路旁的树\"><a href=\"#路旁的树\" class=\"headerlink\" title=\"路旁的树\"></a>路旁的树</h2><p>一条数轴，相当于一个一维数组。<br>维度这个概念其实是与数轴相关的。<br>如果平面直角坐标系的话一般就会用二维数组，<br>像天梯赛模拟题的炎爆那道题</p>\n<p>思路是，首先把每个元素初始化成2<br>注意今天上午老师讲的那个错误，<br>如</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>] = &#123;<span class=\"number\">2</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>不要犯这种错误。<br>正确的是用for循环把n个元素的值赋为2</p>\n<p>这题应该挺简单的。<br>也就是多次下把这个区间上的元素全部<strong>降为0</strong>。<br>（注意不是-2，这样区间重叠就成负的了。）</p>\n<p>然后再定义一个sum变量，再一个一个地加。<br>最后输出值即可。<br>代码如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, N, sum = <span class=\"number\">0</span>, x, y;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;N);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">array</span>[i] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = x - <span class=\"number\">1</span>;i &lt;= y - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按分数段统计学生人数\"><a href=\"#按分数段统计学生人数\" class=\"headerlink\" title=\"按分数段统计学生人数\"></a>按分数段统计学生人数</h2><p>简单的循环题，但是被强行地转成了数组题。<br>如果输入的t在输入成绩之前这就是循环了，我们都比较擅长。<br>直接输入数据，然后用for循环一个一个比对，<br>造一个初始值为0的变量，然后如果大于等于那个值就加一。<br>最后输出就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, gradelimit, num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;gradelimit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">array</span>[i] &gt;= gradelimit) num += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,num);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"两道比较难的题目\"><a href=\"#两道比较难的题目\" class=\"headerlink\" title=\"两道比较难的题目\"></a>两道比较难的题目</h1><h2 id=\"1-区间元素和\"><a href=\"#1-区间元素和\" class=\"headerlink\" title=\"1.区间元素和\"></a>1.区间元素和</h2><p>这道题难在判断的条件多，<br>我在做的时候没有想到left与right小于0的情况，<br>所以没有做对，但是后来结合志鹏的解答也给出了简单点的答案。<br>但是不太好理解，你们要是觉得不好懂看志鹏的就好。<br>虽然用的是C++，你们看条件就好。</p>\n<p><img src=\"/img/22cf517c3686de1119cf1f156160bd4.jpg\" alt=\"志鹏同学的答案\"><br>（std::cin就相当于我们的scanf，std::cout就相当于我们的printf）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, left, right;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;left, &amp;right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &lt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = left;i &lt;= right;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; n &amp;&amp; i &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                sum += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>确保left是小于n的，那么两个集合就一定有交集。<br>然后保证加的是在0到n - 1上的元素（数组内的）。</p>\n<h2 id=\"找出旷课的人\"><a href=\"#找出旷课的人\" class=\"headerlink\" title=\"找出旷课的人\"></a>找出旷课的人</h2><p>先放代码，直播讲</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Sort</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i;j &lt; n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                t = a[i];</span><br><span class=\"line\">                a[i] = a[j];</span><br><span class=\"line\">                a[j] = t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, flag, count = <span class=\"number\">0</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> array1[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> array2[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> array3[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;m, &amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;array1[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;array2[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt; n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array1[i] == array2[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            array3[l] = array1[i];</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count == <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;good\\n&quot;</span>); </span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Sort(array3, l);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; l;i ++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, array3[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一次模块化的实践，但我当时很怕时间超限。。<br>由几个部分组成<br>判断相等-加入数组-排序（冒泡）-输出。</p>\n<h2 id=\"宿舍的选择\"><a href=\"#宿舍的选择\" class=\"headerlink\" title=\"宿舍的选择\"></a>宿舍的选择</h2><p>很简单的一道题，关于long long，只是为了防止越界吧。<br>判断宿舍可住人数与目前的人数的差，然后与学长的人数相比就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,n,p,q;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;p,&amp;q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((q - p) &gt; n)</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后说说，这几道题还是很好地帮助我们锻炼了循环那边的知识<br>也帮我们抓起来了现在刚学的数组，<br>通过写题也得到了一些数学模型上的思考，挺好的。</p>\n","site":{"data":{}},"excerpt":"<p>可能因为课题的深入吧，我们的题目难度也与日俱增。今天关于数组的题目有些很值得讲的，今天和大家分享一下我的看法。</p>","more":"<h2 id=\"逆序\"><a href=\"#逆序\" class=\"headerlink\" title=\"逆序\"></a>逆序</h2><p>因为今天上午已经学过并且讲过，所以这题没啥好说的。<br>从0到n - 1输入数组，从n - 1到0输出数组。<br>两个for循环搞定。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">11</span>];     <span class=\"comment\">//1-10 略大一点，留有余地。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%4d&quot;</span>,<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组最小值\"><a href=\"#数组最小值\" class=\"headerlink\" title=\"数组最小值\"></a>数组最小值</h2><p>审题得：题目的要求是求最小值以及其下标，然后输出下标最小的一个<br>最小值我们知道怎么求，一个for循环搞定。<br>其实因为你找到了第一个值，把它设置为最小值之后，<br>就算另一个值与它相等，我们找的是比它小的数，而不是相等，<br>相当于没关系了。</p>\n<p>那么开写</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, min, iPosit;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>]</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmin = <span class=\"built_in\">array</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(min &gt; <span class=\"built_in\">array</span>[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmin = <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">\t\t\tiPosit = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,min,iPosit);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组n个输入的模版-仅供参考。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>]</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除元素：\"><a href=\"#删除元素：\" class=\"headerlink\" title=\"删除元素：\"></a>删除元素：</h2><p>在直播中我们只讲函数，思路今天上午已经讲过了。</p>\n<p>一个是PrintArr，相信不太用多说</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprint(<span class=\"string\">&quot;%d&quot;</span>, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个就是我们的del函数，用的是覆盖的思路。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i;k &lt; n - <span class=\"number\">1</span>;k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[k] = a[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>今天下午看到我们小伙伴有对调用时数组的形式不太理解的，<br>这里说一下。<br>我们调用函数的时候参数填入的是数组的名称<br>比如我们调用del函数时，我们是这样写的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del(<span class=\"built_in\">array</span>, n, k);</span><br><span class=\"line\"><span class=\"comment\">//array为数组名，n为长度，k是要删除的下标。</span></span><br></pre></td></tr></table></figure>\n\n<p>不需要加中括号，那样的话指向的就是数组中的元素了。<br>比如array[10]，甚至我们数组中没有这个元素，那样就会导致<strong>运行错误</strong><br>余下就执行函数就好，注意PrintArr在覆盖之后输出n - 1的值。<br>因为数组在覆盖之后最后一个值与倒数第二个值是相等的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[],<span class=\"type\">int</span> n)</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;k);</span><br><span class=\"line\">    del(<span class=\"built_in\">array</span>, n, k);</span><br><span class=\"line\">    PrintArr(<span class=\"built_in\">array</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i;k &lt; n - <span class=\"number\">1</span>;k++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[k] = a[k + <span class=\"number\">1</span>]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组元素</p>\n<p>下一题，加入一个find函数，在主函数中加入一个if判断找不找的到就好<br>找的到，返回i，找不到，返回-1.</p>\n<p>[find函数]</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x == a[i]) <span class=\"keyword\">return</span> i; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后面判断一下find的值是不是大于0即可。</p>\n<h2 id=\"路旁的树\"><a href=\"#路旁的树\" class=\"headerlink\" title=\"路旁的树\"></a>路旁的树</h2><p>一条数轴，相当于一个一维数组。<br>维度这个概念其实是与数轴相关的。<br>如果平面直角坐标系的话一般就会用二维数组，<br>像天梯赛模拟题的炎爆那道题</p>\n<p>思路是，首先把每个元素初始化成2<br>注意今天上午老师讲的那个错误，<br>如</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>] = &#123;<span class=\"number\">2</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>不要犯这种错误。<br>正确的是用for循环把n个元素的值赋为2</p>\n<p>这题应该挺简单的。<br>也就是多次下把这个区间上的元素全部<strong>降为0</strong>。<br>（注意不是-2，这样区间重叠就成负的了。）</p>\n<p>然后再定义一个sum变量，再一个一个地加。<br>最后输出值即可。<br>代码如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, N, sum = <span class=\"number\">0</span>, x, y;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;N);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">array</span>[i] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = x - <span class=\"number\">1</span>;i &lt;= y - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按分数段统计学生人数\"><a href=\"#按分数段统计学生人数\" class=\"headerlink\" title=\"按分数段统计学生人数\"></a>按分数段统计学生人数</h2><p>简单的循环题，但是被强行地转成了数组题。<br>如果输入的t在输入成绩之前这就是循环了，我们都比较擅长。<br>直接输入数据，然后用for循环一个一个比对，<br>造一个初始值为0的变量，然后如果大于等于那个值就加一。<br>最后输出就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, gradelimit, num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;gradelimit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">array</span>[i] &gt;= gradelimit) num += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,num);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"两道比较难的题目\"><a href=\"#两道比较难的题目\" class=\"headerlink\" title=\"两道比较难的题目\"></a>两道比较难的题目</h1><h2 id=\"1-区间元素和\"><a href=\"#1-区间元素和\" class=\"headerlink\" title=\"1.区间元素和\"></a>1.区间元素和</h2><p>这道题难在判断的条件多，<br>我在做的时候没有想到left与right小于0的情况，<br>所以没有做对，但是后来结合志鹏的解答也给出了简单点的答案。<br>但是不太好理解，你们要是觉得不好懂看志鹏的就好。<br>虽然用的是C++，你们看条件就好。</p>\n<p><img src=\"/img/22cf517c3686de1119cf1f156160bd4.jpg\" alt=\"志鹏同学的答案\"><br>（std::cin就相当于我们的scanf，std::cout就相当于我们的printf）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, left, right;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;left, &amp;right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &lt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = left;i &lt;= right;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; n &amp;&amp; i &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                sum += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>确保left是小于n的，那么两个集合就一定有交集。<br>然后保证加的是在0到n - 1上的元素（数组内的）。</p>\n<h2 id=\"找出旷课的人\"><a href=\"#找出旷课的人\" class=\"headerlink\" title=\"找出旷课的人\"></a>找出旷课的人</h2><p>先放代码，直播讲</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Sort</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i;j &lt; n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                t = a[i];</span><br><span class=\"line\">                a[i] = a[j];</span><br><span class=\"line\">                a[j] = t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, flag, count = <span class=\"number\">0</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> array1[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> array2[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> array3[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;m, &amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;array1[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;array2[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt; n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array1[i] == array2[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            array3[l] = array1[i];</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count == <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;good\\n&quot;</span>); </span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Sort(array3, l);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; l;i ++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, array3[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一次模块化的实践，但我当时很怕时间超限。。<br>由几个部分组成<br>判断相等-加入数组-排序（冒泡）-输出。</p>\n<h2 id=\"宿舍的选择\"><a href=\"#宿舍的选择\" class=\"headerlink\" title=\"宿舍的选择\"></a>宿舍的选择</h2><p>很简单的一道题，关于long long，只是为了防止越界吧。<br>判断宿舍可住人数与目前的人数的差，然后与学长的人数相比就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,n,p,q;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;p,&amp;q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((q - p) &gt; n)</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后说说，这几道题还是很好地帮助我们锻炼了循环那边的知识<br>也帮我们抓起来了现在刚学的数组，<br>通过写题也得到了一些数学模型上的思考，挺好的。</p>"},{"title":"OJ中的那些小丑行为","date":"2023-11-20T00:55:43.000Z","index_img":"/img/OJclown.png","_content":"在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，\n有些时候错得自己像小丑一样。\n\n![My feelings](/img/OJclown.png)\n\n我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。<!--more-->\n\n1. 编译错误引火线\n+ 复制到做题平台上时复制漏了一些东西。 -不必多讲。\n+ if语句后加了分号，导致出现对于else语句的错误。\n+ 变量重名，或者没改完一些变量的名字。\n+ 忘了一些分号。\n+ int mian（int main）或者stdio打错了\n+ 修改程序的时候忘了关黑框，有时候会不能编译新的文件。\n+ for循环中分号用成逗号\n+ 函数声明与定义部分，都需要对于形式变量的数据类型进行设置。\n\n2. 运行错误引火线\n+ for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加\n\t死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。\n\n3. 程序结果错误引火线\n+ scanf没有加取址符，printf加了取址符\n\tscanf不加的话，就不会对于变量进行赋值操作\n\tprintf加的话，返回的是变量的储存地址，垃圾数据。\n\n+ 部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）\n\t数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。\n\n+ 循环完一次的结果归零。\n\t有些循环比如while进行多实例检测的时候，会执行多个循环，\n\t如果某些计数的变量没有归零，会导致数据很离谱。\n\n+ 判断相等运算符 == 写成赋值运算符 = \n\t建议把变量放后面，值放前面，这样如果犯这个错的话会报错\n\n+ 赋值运算符=的结合性不清楚。\n\t用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。\n\n+ double转int的坑\n\tdouble储存的数据是近似值，切去小数点后有可能数据-1\n\t届时答案对不对完全看你运气。\n\n+ 数据类型对应的格式化符在更改变量类型的时候没有改变。\n\n+ switch语句中漏写了一个break。\n\t直接不受控地向下面的case进发，全部执行，直到遇到新的break。\n\n+ scanf中的格式加空格就算了，别的不要轻易加。\n+ \n+ 多字符输入的时候，注意处理回车与空格，一般用getchar来解决\n\n检查的思路：\n1. 首先基本问题，不要出编译错误，对于一些常见符号要打对\n\t比如，scanf中的&符号，各个语句后面的分号，大括号不要漏一边。\n2. 然后，看修改变量的时候有没有注意类型，\n相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改\n3. 接着看循环，\n对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环\n对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。\n看分支，看if语句的限定是否满足自己想要的条件，是否存在== 写成=的情况。\n看switch语句的break。\n4. 最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。","source":"_posts/OJ中的那些小丑行为.md","raw":"---\ntitle: OJ中的那些小丑行为\ndate: 2023-11-20 08:55:43\ntags: C语言学习\nindex_img: /img/OJclown.png\n---\n在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，\n有些时候错得自己像小丑一样。\n\n![My feelings](/img/OJclown.png)\n\n我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。<!--more-->\n\n1. 编译错误引火线\n+ 复制到做题平台上时复制漏了一些东西。 -不必多讲。\n+ if语句后加了分号，导致出现对于else语句的错误。\n+ 变量重名，或者没改完一些变量的名字。\n+ 忘了一些分号。\n+ int mian（int main）或者stdio打错了\n+ 修改程序的时候忘了关黑框，有时候会不能编译新的文件。\n+ for循环中分号用成逗号\n+ 函数声明与定义部分，都需要对于形式变量的数据类型进行设置。\n\n2. 运行错误引火线\n+ for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加\n\t死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。\n\n3. 程序结果错误引火线\n+ scanf没有加取址符，printf加了取址符\n\tscanf不加的话，就不会对于变量进行赋值操作\n\tprintf加的话，返回的是变量的储存地址，垃圾数据。\n\n+ 部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）\n\t数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。\n\n+ 循环完一次的结果归零。\n\t有些循环比如while进行多实例检测的时候，会执行多个循环，\n\t如果某些计数的变量没有归零，会导致数据很离谱。\n\n+ 判断相等运算符 == 写成赋值运算符 = \n\t建议把变量放后面，值放前面，这样如果犯这个错的话会报错\n\n+ 赋值运算符=的结合性不清楚。\n\t用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。\n\n+ double转int的坑\n\tdouble储存的数据是近似值，切去小数点后有可能数据-1\n\t届时答案对不对完全看你运气。\n\n+ 数据类型对应的格式化符在更改变量类型的时候没有改变。\n\n+ switch语句中漏写了一个break。\n\t直接不受控地向下面的case进发，全部执行，直到遇到新的break。\n\n+ scanf中的格式加空格就算了，别的不要轻易加。\n+ \n+ 多字符输入的时候，注意处理回车与空格，一般用getchar来解决\n\n检查的思路：\n1. 首先基本问题，不要出编译错误，对于一些常见符号要打对\n\t比如，scanf中的&符号，各个语句后面的分号，大括号不要漏一边。\n2. 然后，看修改变量的时候有没有注意类型，\n相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改\n3. 接着看循环，\n对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环\n对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。\n看分支，看if语句的限定是否满足自己想要的条件，是否存在== 写成=的情况。\n看switch语句的break。\n4. 最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。","slug":"OJ中的那些小丑行为","published":1,"updated":"2023-11-21T00:46:35.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nxq0008zkue9fxr8c8h","content":"<p>在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，<br>有些时候错得自己像小丑一样。</p>\n<p><img src=\"/img/OJclown.png\" alt=\"My feelings\"></p>\n<p>我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。<span id=\"more\"></span></p>\n<ol>\n<li>编译错误引火线</li>\n</ol>\n<ul>\n<li>复制到做题平台上时复制漏了一些东西。 -不必多讲。</li>\n<li>if语句后加了分号，导致出现对于else语句的错误。</li>\n<li>变量重名，或者没改完一些变量的名字。</li>\n<li>忘了一些分号。</li>\n<li>int mian（int main）或者stdio打错了</li>\n<li>修改程序的时候忘了关黑框，有时候会不能编译新的文件。</li>\n<li>for循环中分号用成逗号</li>\n<li>函数声明与定义部分，都需要对于形式变量的数据类型进行设置。</li>\n</ul>\n<ol start=\"2\">\n<li>运行错误引火线</li>\n</ol>\n<ul>\n<li>for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加<br>  死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。</li>\n</ul>\n<ol start=\"3\">\n<li>程序结果错误引火线</li>\n</ol>\n<ul>\n<li><p>scanf没有加取址符，printf加了取址符<br>  scanf不加的话，就不会对于变量进行赋值操作<br>  printf加的话，返回的是变量的储存地址，垃圾数据。</p>\n</li>\n<li><p>部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）<br>  数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。</p>\n</li>\n<li><p>循环完一次的结果归零。<br>  有些循环比如while进行多实例检测的时候，会执行多个循环，<br>  如果某些计数的变量没有归零，会导致数据很离谱。</p>\n</li>\n<li><p>判断相等运算符 &#x3D;&#x3D; 写成赋值运算符 &#x3D;<br>  建议把变量放后面，值放前面，这样如果犯这个错的话会报错</p>\n</li>\n<li><p>赋值运算符&#x3D;的结合性不清楚。<br>  用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。</p>\n</li>\n<li><p>double转int的坑<br>  double储存的数据是近似值，切去小数点后有可能数据-1<br>  届时答案对不对完全看你运气。</p>\n</li>\n<li><p>数据类型对应的格式化符在更改变量类型的时候没有改变。</p>\n</li>\n<li><p>switch语句中漏写了一个break。<br>  直接不受控地向下面的case进发，全部执行，直到遇到新的break。</p>\n</li>\n<li><p>scanf中的格式加空格就算了，别的不要轻易加。</p>\n</li>\n<li></li>\n<li><p>多字符输入的时候，注意处理回车与空格，一般用getchar来解决</p>\n</li>\n</ul>\n<p>检查的思路：</p>\n<ol>\n<li>首先基本问题，不要出编译错误，对于一些常见符号要打对<br> 比如，scanf中的&amp;符号，各个语句后面的分号，大括号不要漏一边。</li>\n<li>然后，看修改变量的时候有没有注意类型，<br>相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改</li>\n<li>接着看循环，<br>对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环<br>对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。<br>看分支，看if语句的限定是否满足自己想要的条件，是否存在&#x3D;&#x3D; 写成&#x3D;的情况。<br>看switch语句的break。</li>\n<li>最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，<br>有些时候错得自己像小丑一样。</p>\n<p><img src=\"/img/OJclown.png\" alt=\"My feelings\"></p>\n<p>我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。","more":"</p>\n<ol>\n<li>编译错误引火线</li>\n</ol>\n<ul>\n<li>复制到做题平台上时复制漏了一些东西。 -不必多讲。</li>\n<li>if语句后加了分号，导致出现对于else语句的错误。</li>\n<li>变量重名，或者没改完一些变量的名字。</li>\n<li>忘了一些分号。</li>\n<li>int mian（int main）或者stdio打错了</li>\n<li>修改程序的时候忘了关黑框，有时候会不能编译新的文件。</li>\n<li>for循环中分号用成逗号</li>\n<li>函数声明与定义部分，都需要对于形式变量的数据类型进行设置。</li>\n</ul>\n<ol start=\"2\">\n<li>运行错误引火线</li>\n</ol>\n<ul>\n<li>for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加<br>  死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。</li>\n</ul>\n<ol start=\"3\">\n<li>程序结果错误引火线</li>\n</ol>\n<ul>\n<li><p>scanf没有加取址符，printf加了取址符<br>  scanf不加的话，就不会对于变量进行赋值操作<br>  printf加的话，返回的是变量的储存地址，垃圾数据。</p>\n</li>\n<li><p>部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）<br>  数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。</p>\n</li>\n<li><p>循环完一次的结果归零。<br>  有些循环比如while进行多实例检测的时候，会执行多个循环，<br>  如果某些计数的变量没有归零，会导致数据很离谱。</p>\n</li>\n<li><p>判断相等运算符 &#x3D;&#x3D; 写成赋值运算符 &#x3D;<br>  建议把变量放后面，值放前面，这样如果犯这个错的话会报错</p>\n</li>\n<li><p>赋值运算符&#x3D;的结合性不清楚。<br>  用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。</p>\n</li>\n<li><p>double转int的坑<br>  double储存的数据是近似值，切去小数点后有可能数据-1<br>  届时答案对不对完全看你运气。</p>\n</li>\n<li><p>数据类型对应的格式化符在更改变量类型的时候没有改变。</p>\n</li>\n<li><p>switch语句中漏写了一个break。<br>  直接不受控地向下面的case进发，全部执行，直到遇到新的break。</p>\n</li>\n<li><p>scanf中的格式加空格就算了，别的不要轻易加。</p>\n</li>\n<li></li>\n<li><p>多字符输入的时候，注意处理回车与空格，一般用getchar来解决</p>\n</li>\n</ul>\n<p>检查的思路：</p>\n<ol>\n<li>首先基本问题，不要出编译错误，对于一些常见符号要打对<br> 比如，scanf中的&amp;符号，各个语句后面的分号，大括号不要漏一边。</li>\n<li>然后，看修改变量的时候有没有注意类型，<br>相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改</li>\n<li>接着看循环，<br>对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环<br>对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。<br>看分支，看if语句的限定是否满足自己想要的条件，是否存在&#x3D;&#x3D; 写成&#x3D;的情况。<br>看switch语句的break。</li>\n<li>最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。</li>\n</ol>"},{"title":"Javascript学习：一个新起点","date":"2024-01-22T15:31:11.000Z","_content":"\n今天过的是真的开心啊，\n不仅与之前的好朋友聊了聊，还学习了我一直都想要学习的东西，那就是前端制作网站。\n想起之前玩趣站 (www.youquhome.com) 的时候，那个时候真的是见了不少新奇的网站设计\n有在夜空中放烟花的，有像云朵的时钟，还有各种H5小游戏。\n那时候其实就已经有点心思想学H5、CSS以及JS了，\n嘿嘿，还是之前上外网经历给我的加成，甚至那时候我已经接触过几个JS命令了。\n<!--more-->\n\n![嘿嘿](/img/Chathappy.jpg)\n\n你要是一路看到这里肯定说：“于，你咋变心这么快，前几天不还好好学着算法的吗?\"。\n要怪也怪我的博客，要怪也怪我，今天的轨迹也是十分离谱（哈哈哈）。\n\n今天看着自己这几天写过的博客，还有总体的博客页面突发奇想。\n“我是不是也能像kmjj那样自己对于主题进行二次加工？”\n于是上网上找hexo主题的开发教程，需要node.js基础，找到了教程。\n然后跳到了自己之前几天在搞的Windows中的LinuxWSL系统\n想在里面安个浏览器，之后就能一直在Terminal环境下js编程了，而且界面也挺干净的\n安了半天实在是没搞定，能安上，但是打不开。\n最后听人家官方说：“我们还不支持软件安装，只能运行命令行下的软件”\n**果断放弃，害，浪费时间！**\n\n因为nodejs使用的是JS文件编程，之前用的Sublime Text不能编译运行，\n我又去网上找资料配置好了错误百出的VsCode。\n最终在终端上成功运行了自己的第一条JS指令。\n\n```Javascript\nconsole.log(\"Hello World!\");\n```\n\n呼，到这一步，已经是上午的12点了，\n不过接触到一个新世界，我的热情还没有退下。\n于是继续在 (www.liaoxuefeng.com) 上学NodeJS。\n直到有些概念感觉迷迷糊糊，才知道它需要一些JS的基础。\n在下午充好电之后，我开始了JS的探索。\n\n在这其间，还发生了一件给我动力的事情。\n无意刷手机的时候注意到了平板上的一个app\n也是我比较怀旧吧，这个app的动态壁纸还挺有说法的，\n模拟雨的效果真的是我见过的最顶的了。\n\n![必应搜雨纸或Rainpaper可能能搜到](/img/Rainpaper.jpg)\n\n效果如下：\n\n![绝美！](/img/Raining.jpg)\n\n这的雨滴的大小与降水概率以及雾度还有后面的图片都是可以改的。\n就真的很干净很好看，于是我想找到这个app的源码，\n借着自己现在知道的编程知识，想实现一下这个效果。\n但是也可叹啊，这个软件已经很久了，它的github源码已经被删的干干净净了。\n我能找到的就只有一个提供这个雨滴效果的网站。\n因为它的效果是用WebGL渲染的，我们的任务又回到了JS上。\n\n于是今晚又一通学就搞到了现在，做出了一个HTML文件。\n它的源码就在下面了！\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>MY First HTML Page</title>\n</head>\n<body>\n\n<script>\ndocument.write(\"<h1>Moniwarmth</h1>\");\ndocument.write(\"<p>And his little cute icon!:)</p>\");\nfunction clickfunction()\n{\n    x = document.getElementById(\"Greetings\");\n    if(x == null)\n      document.write(\"Oops! We don't find the expected text!\");\n    else \n    {\n      alert(\"Hahaha, any problems?\");\n      x.innerHTML = \"Hello Js World!!\";\n    }\n}\nfunction changeImage()\n{\n    element=document.getElementById('myimage')\n    if (element.src.match(\"sit\"))\n    {\n        element.src=\"girl.jpg\";\n    }\n    else\n    {\n        element.src=\"girlsit.gif\";\n    }\n}\n</script>\n\n<p id = \"Greetings\">\n  Hello, this is the first step of my webplaying.\n  Hope that I can stick to it!!\n</p>\n\n<img id=\"myimage\" onclick=\"changeImage()\" src=\"girl.jpg\" width=\"180\" height=\"180\">\n\n<button_type = \"button\" onclick = \"clickfunction()\">点我!(本来在HTML中可以点图片出现一张动态图, 这里被覆盖了 ToT)</button_type>\n\n<img id=\"gifgirl\" src = \"girlsit.gif\" width = \"180\" height = \"180\">\n\n<p>嘿嘿, 这是我的第一个HTML文件,Javascript学习的第一步!! </p>\n</body>\n</html>\n```\n\n嘿嘿，就一个小网页，还是有点复杂的吧，不过做出来当即就能传到网站上，挺有成就感的呢！\n\n今天做的事情真的很让我找到了热爱的感觉。--一直学习，直到电脑没电，充电之后继续学。\n今天当即就做出了一个HTML小页面，你可能也注意到了在左边的小栏里有一个“创作”。\n那里我还暂时不知道要放什么，于是先写了点欢迎语，放了两张小图片。\n这个页面的内容就是我制作的HTML文件。\n\n算法的学习还是不会轻易放弃的，JS的学习也不会结束，一切都自热爱与感动而起！\n**继续奋斗，终会把路越走越宽！**\n\n\n","source":"_posts/Javascript学习：一个新起点.md","raw":"---\ntitle: Javascript学习：一个新起点\ndate: 2024-01-22 23:31:11\ntags: JS学习\n---\n\n今天过的是真的开心啊，\n不仅与之前的好朋友聊了聊，还学习了我一直都想要学习的东西，那就是前端制作网站。\n想起之前玩趣站 (www.youquhome.com) 的时候，那个时候真的是见了不少新奇的网站设计\n有在夜空中放烟花的，有像云朵的时钟，还有各种H5小游戏。\n那时候其实就已经有点心思想学H5、CSS以及JS了，\n嘿嘿，还是之前上外网经历给我的加成，甚至那时候我已经接触过几个JS命令了。\n<!--more-->\n\n![嘿嘿](/img/Chathappy.jpg)\n\n你要是一路看到这里肯定说：“于，你咋变心这么快，前几天不还好好学着算法的吗?\"。\n要怪也怪我的博客，要怪也怪我，今天的轨迹也是十分离谱（哈哈哈）。\n\n今天看着自己这几天写过的博客，还有总体的博客页面突发奇想。\n“我是不是也能像kmjj那样自己对于主题进行二次加工？”\n于是上网上找hexo主题的开发教程，需要node.js基础，找到了教程。\n然后跳到了自己之前几天在搞的Windows中的LinuxWSL系统\n想在里面安个浏览器，之后就能一直在Terminal环境下js编程了，而且界面也挺干净的\n安了半天实在是没搞定，能安上，但是打不开。\n最后听人家官方说：“我们还不支持软件安装，只能运行命令行下的软件”\n**果断放弃，害，浪费时间！**\n\n因为nodejs使用的是JS文件编程，之前用的Sublime Text不能编译运行，\n我又去网上找资料配置好了错误百出的VsCode。\n最终在终端上成功运行了自己的第一条JS指令。\n\n```Javascript\nconsole.log(\"Hello World!\");\n```\n\n呼，到这一步，已经是上午的12点了，\n不过接触到一个新世界，我的热情还没有退下。\n于是继续在 (www.liaoxuefeng.com) 上学NodeJS。\n直到有些概念感觉迷迷糊糊，才知道它需要一些JS的基础。\n在下午充好电之后，我开始了JS的探索。\n\n在这其间，还发生了一件给我动力的事情。\n无意刷手机的时候注意到了平板上的一个app\n也是我比较怀旧吧，这个app的动态壁纸还挺有说法的，\n模拟雨的效果真的是我见过的最顶的了。\n\n![必应搜雨纸或Rainpaper可能能搜到](/img/Rainpaper.jpg)\n\n效果如下：\n\n![绝美！](/img/Raining.jpg)\n\n这的雨滴的大小与降水概率以及雾度还有后面的图片都是可以改的。\n就真的很干净很好看，于是我想找到这个app的源码，\n借着自己现在知道的编程知识，想实现一下这个效果。\n但是也可叹啊，这个软件已经很久了，它的github源码已经被删的干干净净了。\n我能找到的就只有一个提供这个雨滴效果的网站。\n因为它的效果是用WebGL渲染的，我们的任务又回到了JS上。\n\n于是今晚又一通学就搞到了现在，做出了一个HTML文件。\n它的源码就在下面了！\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>MY First HTML Page</title>\n</head>\n<body>\n\n<script>\ndocument.write(\"<h1>Moniwarmth</h1>\");\ndocument.write(\"<p>And his little cute icon!:)</p>\");\nfunction clickfunction()\n{\n    x = document.getElementById(\"Greetings\");\n    if(x == null)\n      document.write(\"Oops! We don't find the expected text!\");\n    else \n    {\n      alert(\"Hahaha, any problems?\");\n      x.innerHTML = \"Hello Js World!!\";\n    }\n}\nfunction changeImage()\n{\n    element=document.getElementById('myimage')\n    if (element.src.match(\"sit\"))\n    {\n        element.src=\"girl.jpg\";\n    }\n    else\n    {\n        element.src=\"girlsit.gif\";\n    }\n}\n</script>\n\n<p id = \"Greetings\">\n  Hello, this is the first step of my webplaying.\n  Hope that I can stick to it!!\n</p>\n\n<img id=\"myimage\" onclick=\"changeImage()\" src=\"girl.jpg\" width=\"180\" height=\"180\">\n\n<button_type = \"button\" onclick = \"clickfunction()\">点我!(本来在HTML中可以点图片出现一张动态图, 这里被覆盖了 ToT)</button_type>\n\n<img id=\"gifgirl\" src = \"girlsit.gif\" width = \"180\" height = \"180\">\n\n<p>嘿嘿, 这是我的第一个HTML文件,Javascript学习的第一步!! </p>\n</body>\n</html>\n```\n\n嘿嘿，就一个小网页，还是有点复杂的吧，不过做出来当即就能传到网站上，挺有成就感的呢！\n\n今天做的事情真的很让我找到了热爱的感觉。--一直学习，直到电脑没电，充电之后继续学。\n今天当即就做出了一个HTML小页面，你可能也注意到了在左边的小栏里有一个“创作”。\n那里我还暂时不知道要放什么，于是先写了点欢迎语，放了两张小图片。\n这个页面的内容就是我制作的HTML文件。\n\n算法的学习还是不会轻易放弃的，JS的学习也不会结束，一切都自热爱与感动而起！\n**继续奋斗，终会把路越走越宽！**\n\n\n","slug":"Javascript学习：一个新起点","published":1,"updated":"2024-01-22T15:35:57.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nxr000azkue8rqk2tt6","content":"<p>今天过的是真的开心啊，<br>不仅与之前的好朋友聊了聊，还学习了我一直都想要学习的东西，那就是前端制作网站。<br>想起之前玩趣站 (<a href=\"http://www.youquhome.com/\">www.youquhome.com</a>) 的时候，那个时候真的是见了不少新奇的网站设计<br>有在夜空中放烟花的，有像云朵的时钟，还有各种H5小游戏。<br>那时候其实就已经有点心思想学H5、CSS以及JS了，<br>嘿嘿，还是之前上外网经历给我的加成，甚至那时候我已经接触过几个JS命令了。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/img/Chathappy.jpg\" alt=\"嘿嘿\"></p>\n<p>你要是一路看到这里肯定说：“于，你咋变心这么快，前几天不还好好学着算法的吗?”。<br>要怪也怪我的博客，要怪也怪我，今天的轨迹也是十分离谱（哈哈哈）。</p>\n<p>今天看着自己这几天写过的博客，还有总体的博客页面突发奇想。<br>“我是不是也能像kmjj那样自己对于主题进行二次加工？”<br>于是上网上找hexo主题的开发教程，需要node.js基础，找到了教程。<br>然后跳到了自己之前几天在搞的Windows中的LinuxWSL系统<br>想在里面安个浏览器，之后就能一直在Terminal环境下js编程了，而且界面也挺干净的<br>安了半天实在是没搞定，能安上，但是打不开。<br>最后听人家官方说：“我们还不支持软件安装，只能运行命令行下的软件”<br><strong>果断放弃，害，浪费时间！</strong></p>\n<p>因为nodejs使用的是JS文件编程，之前用的Sublime Text不能编译运行，<br>我又去网上找资料配置好了错误百出的VsCode。<br>最终在终端上成功运行了自己的第一条JS指令。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>呼，到这一步，已经是上午的12点了，<br>不过接触到一个新世界，我的热情还没有退下。<br>于是继续在 (<a href=\"http://www.liaoxuefeng.com/\">www.liaoxuefeng.com</a>) 上学NodeJS。<br>直到有些概念感觉迷迷糊糊，才知道它需要一些JS的基础。<br>在下午充好电之后，我开始了JS的探索。</p>\n<p>在这其间，还发生了一件给我动力的事情。<br>无意刷手机的时候注意到了平板上的一个app<br>也是我比较怀旧吧，这个app的动态壁纸还挺有说法的，<br>模拟雨的效果真的是我见过的最顶的了。</p>\n<p><img src=\"/img/Rainpaper.jpg\" alt=\"必应搜雨纸或Rainpaper可能能搜到\"></p>\n<p>效果如下：</p>\n<p><img src=\"/img/Raining.jpg\" alt=\"绝美！\"></p>\n<p>这的雨滴的大小与降水概率以及雾度还有后面的图片都是可以改的。<br>就真的很干净很好看，于是我想找到这个app的源码，<br>借着自己现在知道的编程知识，想实现一下这个效果。<br>但是也可叹啊，这个软件已经很久了，它的github源码已经被删的干干净净了。<br>我能找到的就只有一个提供这个雨滴效果的网站。<br>因为它的效果是用WebGL渲染的，我们的任务又回到了JS上。</p>\n<p>于是今晚又一通学就搞到了现在，做出了一个HTML文件。<br>它的源码就在下面了！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>MY First HTML Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;&lt;h1&gt;Moniwarmth&lt;/h1&gt;&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;&lt;p&gt;And his little cute icon!:)&lt;/p&gt;&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">clickfunction</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    x = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;Greetings&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(x == <span class=\"literal\">null</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;Oops! We don&#x27;t find the expected text!&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">else</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Hahaha, any problems?&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      x.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;Hello Js World!!&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeImage</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    element=<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myimage&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span> (element.<span class=\"property\">src</span>.<span class=\"title function_\">match</span>(<span class=\"string\">&quot;sit&quot;</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        element.<span class=\"property\">src</span>=<span class=\"string\">&quot;girl.jpg&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        element.<span class=\"property\">src</span>=<span class=\"string\">&quot;girlsit.gif&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span> = <span class=\"string\">&quot;Greetings&quot;</span>&gt;</span></span><br><span class=\"line\">  Hello, this is the first step of my webplaying.</span><br><span class=\"line\">  Hope that I can stick to it!!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myimage&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;changeImage()&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;girl.jpg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;180&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;180&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button_type</span> = <span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">onclick</span> = <span class=\"string\">&quot;clickfunction()&quot;</span>&gt;</span>点我!(本来在HTML中可以点图片出现一张动态图, 这里被覆盖了 ToT)<span class=\"tag\">&lt;/<span class=\"name\">button_type</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gifgirl&quot;</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;girlsit.gif&quot;</span> <span class=\"attr\">width</span> = <span class=\"string\">&quot;180&quot;</span> <span class=\"attr\">height</span> = <span class=\"string\">&quot;180&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>嘿嘿, 这是我的第一个HTML文件,Javascript学习的第一步!! <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>嘿嘿，就一个小网页，还是有点复杂的吧，不过做出来当即就能传到网站上，挺有成就感的呢！</p>\n<p>今天做的事情真的很让我找到了热爱的感觉。–一直学习，直到电脑没电，充电之后继续学。<br>今天当即就做出了一个HTML小页面，你可能也注意到了在左边的小栏里有一个“创作”。<br>那里我还暂时不知道要放什么，于是先写了点欢迎语，放了两张小图片。<br>这个页面的内容就是我制作的HTML文件。</p>\n<p>算法的学习还是不会轻易放弃的，JS的学习也不会结束，一切都自热爱与感动而起！<br><strong>继续奋斗，终会把路越走越宽！</strong></p>\n","site":{"data":{}},"excerpt":"<p>今天过的是真的开心啊，<br>不仅与之前的好朋友聊了聊，还学习了我一直都想要学习的东西，那就是前端制作网站。<br>想起之前玩趣站 (<a href=\"http://www.youquhome.com/\">www.youquhome.com</a>) 的时候，那个时候真的是见了不少新奇的网站设计<br>有在夜空中放烟花的，有像云朵的时钟，还有各种H5小游戏。<br>那时候其实就已经有点心思想学H5、CSS以及JS了，<br>嘿嘿，还是之前上外网经历给我的加成，甚至那时候我已经接触过几个JS命令了。</p>","more":"<p><img src=\"/img/Chathappy.jpg\" alt=\"嘿嘿\"></p>\n<p>你要是一路看到这里肯定说：“于，你咋变心这么快，前几天不还好好学着算法的吗?”。<br>要怪也怪我的博客，要怪也怪我，今天的轨迹也是十分离谱（哈哈哈）。</p>\n<p>今天看着自己这几天写过的博客，还有总体的博客页面突发奇想。<br>“我是不是也能像kmjj那样自己对于主题进行二次加工？”<br>于是上网上找hexo主题的开发教程，需要node.js基础，找到了教程。<br>然后跳到了自己之前几天在搞的Windows中的LinuxWSL系统<br>想在里面安个浏览器，之后就能一直在Terminal环境下js编程了，而且界面也挺干净的<br>安了半天实在是没搞定，能安上，但是打不开。<br>最后听人家官方说：“我们还不支持软件安装，只能运行命令行下的软件”<br><strong>果断放弃，害，浪费时间！</strong></p>\n<p>因为nodejs使用的是JS文件编程，之前用的Sublime Text不能编译运行，<br>我又去网上找资料配置好了错误百出的VsCode。<br>最终在终端上成功运行了自己的第一条JS指令。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>呼，到这一步，已经是上午的12点了，<br>不过接触到一个新世界，我的热情还没有退下。<br>于是继续在 (<a href=\"http://www.liaoxuefeng.com/\">www.liaoxuefeng.com</a>) 上学NodeJS。<br>直到有些概念感觉迷迷糊糊，才知道它需要一些JS的基础。<br>在下午充好电之后，我开始了JS的探索。</p>\n<p>在这其间，还发生了一件给我动力的事情。<br>无意刷手机的时候注意到了平板上的一个app<br>也是我比较怀旧吧，这个app的动态壁纸还挺有说法的，<br>模拟雨的效果真的是我见过的最顶的了。</p>\n<p><img src=\"/img/Rainpaper.jpg\" alt=\"必应搜雨纸或Rainpaper可能能搜到\"></p>\n<p>效果如下：</p>\n<p><img src=\"/img/Raining.jpg\" alt=\"绝美！\"></p>\n<p>这的雨滴的大小与降水概率以及雾度还有后面的图片都是可以改的。<br>就真的很干净很好看，于是我想找到这个app的源码，<br>借着自己现在知道的编程知识，想实现一下这个效果。<br>但是也可叹啊，这个软件已经很久了，它的github源码已经被删的干干净净了。<br>我能找到的就只有一个提供这个雨滴效果的网站。<br>因为它的效果是用WebGL渲染的，我们的任务又回到了JS上。</p>\n<p>于是今晚又一通学就搞到了现在，做出了一个HTML文件。<br>它的源码就在下面了！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>MY First HTML Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;&lt;h1&gt;Moniwarmth&lt;/h1&gt;&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;&lt;p&gt;And his little cute icon!:)&lt;/p&gt;&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">clickfunction</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    x = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;Greetings&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(x == <span class=\"literal\">null</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;Oops! We don&#x27;t find the expected text!&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">else</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Hahaha, any problems?&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      x.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;Hello Js World!!&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeImage</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    element=<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myimage&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span> (element.<span class=\"property\">src</span>.<span class=\"title function_\">match</span>(<span class=\"string\">&quot;sit&quot;</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        element.<span class=\"property\">src</span>=<span class=\"string\">&quot;girl.jpg&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        element.<span class=\"property\">src</span>=<span class=\"string\">&quot;girlsit.gif&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span> = <span class=\"string\">&quot;Greetings&quot;</span>&gt;</span></span><br><span class=\"line\">  Hello, this is the first step of my webplaying.</span><br><span class=\"line\">  Hope that I can stick to it!!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myimage&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;changeImage()&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;girl.jpg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;180&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;180&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button_type</span> = <span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">onclick</span> = <span class=\"string\">&quot;clickfunction()&quot;</span>&gt;</span>点我!(本来在HTML中可以点图片出现一张动态图, 这里被覆盖了 ToT)<span class=\"tag\">&lt;/<span class=\"name\">button_type</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gifgirl&quot;</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;girlsit.gif&quot;</span> <span class=\"attr\">width</span> = <span class=\"string\">&quot;180&quot;</span> <span class=\"attr\">height</span> = <span class=\"string\">&quot;180&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>嘿嘿, 这是我的第一个HTML文件,Javascript学习的第一步!! <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>嘿嘿，就一个小网页，还是有点复杂的吧，不过做出来当即就能传到网站上，挺有成就感的呢！</p>\n<p>今天做的事情真的很让我找到了热爱的感觉。–一直学习，直到电脑没电，充电之后继续学。<br>今天当即就做出了一个HTML小页面，你可能也注意到了在左边的小栏里有一个“创作”。<br>那里我还暂时不知道要放什么，于是先写了点欢迎语，放了两张小图片。<br>这个页面的内容就是我制作的HTML文件。</p>\n<p>算法的学习还是不会轻易放弃的，JS的学习也不会结束，一切都自热爱与感动而起！<br><strong>继续奋斗，终会把路越走越宽！</strong></p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-11-07T03:53:23.878Z","updated":"2023-08-30T07:41:06.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nxt000ezkueaj3rfw8s","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Kiss记录(From 2024.2.19)","date":"2023-11-20T01:50:34.000Z","_content":"# 总体网站集合\n>1.菜鸟教程 www.runoob.com\n>2.空梦博客 www.kmar.top\n>3.昨日学长的B站号 [@zyoobn]\n>\t学长的CSDN [@郑轻大不知名]\n>4.编程爱好者协会 www.godyu.com\n>\tB站直播号 [@郑轻编程爱好者协会]\n\n看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了\n那网站上没法发帖子，所以我还是自己想办法建个博客吧。\n<!--more-->\n\n--------------分割线-------------------\n\n> 发现这个记录的你算是获得了我每天生活的窥视权，\n> 可以借鉴，当然不建议你抄，每个人都有自己的生活。\n> 下面的记录来自于A是传奇老师的Kiss模型。\n> 也就是Keep、Improve、Start、Stop这四个方面，\n> 用来记录并评估我日常的生活状态，找到我们生活中所展现的能力。\n> 记录开始时间为2.19日，是打卡，\n> 但是不希望因为外面人能看到所以给到自己压力，打卡不下去。\n> 另外我的目标是游戏行业，我深思熟虑过，调研了很多东西。\n> 另外需要通过考研路径来更换城市到上海（Mihoyo！）\n> 要是想聊一聊来找我也好 :)\n\n## 二月十九日 大风、有雨、清爽\n\n![小茶杯到货咯](/img/Feb19th.jpg)\n\n**坚持**：\n+ 坚持学习C++。\n+ 坚持学习练习吉他。\n+ 坚持今日一个主线的游戏时间。\n**改进**：\n+ 改进只有编程与游戏的生活。\n+ 改进每天晚睡的生活。 - 23：00之前必须睡。\n**开始**：\n+ 开始投入额外精力在执行学习路径上。\n**停止**：\n+ 停止意淫\n\n另附前一天的调整：\n尽快推进C++学习进度到STL，\n尽快应用其中的数据结构。\n\n## 二月二十日 早阴天，晚冰雹，寒风吹。\n\n![外边还是挺冷的。](/img/Feb20th.jpg)\n\n**坚持**\n坚持学习C++语言\n坚持练习吉他弹唱《童年》\n\n**改进**\n改进了之前的学习方式，\n加入回顾与总结知识点。\n\n**开始**\n开始总结之前的编程知识点\n开始6点之内起床。\n开始玩崩坏三\n\n**结束**\n结束肝原神，会有很长一段时间\n\n## 二月二十一日 大雪覆地，美不胜收。\n\n![大雪，想必郑州也是这样吧，快开学了。](/img/Feb21st.jpg)\n\n**坚持**\n坚持学习C++\n坚持练习吉他\n\n**改进**\n有走出去感受天气，不再困在家里\n\n**开始**\n开始原神与崩三一起玩，原神完任务，崩三攒钻石\n开始加快学习C++的脚步。\n\n**停止**\n停止23点之前睡：为了改娜维娅PPT\n![受凹凸世界动画启发搞的](/img/nvyppt.png)\n\n## 二月二十二日 雪冰交加，寸步难行\n\n![my studio](/img/Feb22nd.jpg)\n\n**坚持**\n坚持晚上23点之前睡觉\n坚持学习C++\n坚持练习吉他\n\n**改进**\n改进玩游戏缺乏目标 \n+游戏时间，-空白时间\n+ 原神: 角色突破养成\n+ 崩3: 多赚钻石抽角色\n\n改进学习C++没有针对于原初目的：\n学习STL。\n\n**开始**\n开始以准确的方式记录KISS。\n以平面直角坐标系来，x轴好与不好，y轴持续与非持续\n1-4象限 keep improve stop start\n\n开始参照网课自我学习吉他。\n\n开始问学长问题，对自己学的知识反思，加深理解。\n\n## 二月二十三日 比较开心的一天?\n\n![Fireworks!](/img/Feb23rd.jpg)\n\n**坚持**\n坚持晚上23点之前睡觉\n坚持晚上规律洗漱\n坚持学习C++\n坚持练习吉他\n\n**改进**\n改进只学习少实践的学习风格:学完STL去做了题。\n\n**开始**\n开始接触并学习STL模板库\n开始做编程题\n开始用笔记笔记，记忆效果要好于打字\n\n开始从外界回应中找到内心的平衡：\n别人对你的表现或者问题严格或者冷漠，是因为他们期望你做得更好，\n但不要反过来认为自己不好。\n\n## 二月二十四日 元宵，但在家的最后一天\n\n![* 温暖的感觉](/img/Feb24th.jpg)\n\n**坚持**\n坚持晚上23点睡觉\n坚持晚上规律洗漱\n坚持学习C++(STL)\n坚持练习吉他\n\n**开始**\n开始深度学习STL\n开始晚上22:30之前学习\n开始准备以后的学习生活\n\n**结束**\n结束寒假在家。\n\n## 二月二十五日 挺自律的一天\n\n![收拾好的小桌子](/img/Feb25th.jpg)\n\n**坚持**\n坚持晚上23点之前睡觉\n坚持晚上规律洗漱\n坚持练习吉他\n坚持学习C++(STL)\n\n**改进**\n改进莫名感到自卑的内心想法: \n> 想要放松下就放松下\n> 方向明确，在做该做的事情，就没有啥好自卑的\n> 各个人的方向不一样。\n> 坚持做自己要做的事情，慢慢地改进生活。\n\n优化了找人提问的步骤：优先使用AI找寻问题的答案。\t\n\n**开始**\n开始即时查看微Q信息\n开始筹备预习明天课程\n开始积极社交\n开始学习PS\n\n**结束**\n结束在家模式\n结束即时的不开心\n\n## 二月二十六日 Well-Assembled Day\n\n![温暖的茶水](/img/Feb26th.jpg)\n\n**坚持**\n坚持预习课程\n坚持练习吉他\n坚持规律洗漱\n坚持学习Ps\n\n**改进**\n根据老师的上课建议改进了英语学习方案：\n加入听写，写作方式。\n\n**开始**\n开始以中国大学MOOC为平台学习电子技术\n开始听写单词并预习英语。\n开始规划当下课程预习方案。\n\n**结束**\n结束23点睡觉: 玩原神与讨论游戏，明日改回来\n\n## 二月二十七日 忙碌的一天\n\n![体育课随手拍](/img/Feb27th.jpg)\n\n**坚持**\n坚持学习Ps\n坚持练习吉他\n坚持预习课程\n坚持规律洗漱\n坚持23点睡觉\n坚持每日早晨英语学习\n\n**开始**\n开始跑步:今日约2.4Km，13000步数，很棒。\n开始规划决策树。\n\n**结束**\n结束编程学习\n\n## 二月二十八日 差点就输过了情绪\n\n![早晨三个闹钟没给我叫起来，也可能是没响](/img/Feb28th.jpg)\n\n**坚持**\n坚持23点之前睡觉，并规律洗漱。\n坚持练习吉他：目前想要尝试新曲子。\n坚持预习明日课程，复习知识，画思维导图。\n坚持学习PS\n\n**改进**\n改进之前对于安全边际给予太少的缺点：\n今天因为晚起很多事没有很早做，一些事没做，导致情绪有波动，很多事心态上有阻碍。\n无需绷紧脑弦，只是最近确实事情有点多，做自己能做的就好。\n\n**开始**\n开始写入党申请书\n开始有意向去主动社交\n开始感到焦虑：竞争与对比焦虑、\n\n## 二月二十九日 写了一天入党申请书\n\n![累。](/img/Feb29th.png)\n\n**坚持**\n坚持练习吉他\n坚持23点之前睡觉，规律洗漱\n\n**改进**\n改进了最近的比较想法:\n脑子里不需要想那么多，我们的方向真的不一样。\n\n**开始**\n开始主动社交\n\n**结束**\n结束写入党申请书\n结束预习课程\n结束PS学习\n（事情多尽量周末或者明天开始拾起来）\n\n\n## 三月一日 调整好了心态，一身轻松\n\n![为\"挑战杯\"做的游戏场景](/img/Mar2nd.png)\n\n**坚持**\n坚持进行课程预习复习\n坚持规律洗漱\n坚持练习吉他\n\n**改进**\n再次改进最近的心态问题：\n从自己的想法后面推演心理，\n然后使用事实与观点的观点来判断这件事该不该这样想\n\n**开始**\n开始主动社交\n开始尝试新曲子\n开始准备“挑战杯”比赛\n\n**结束**\n结束23点睡觉：\n原因今晚准备挑战杯累 - 玩星穹 - 整理物理课程内容\n明日改进一下。\n\n## 三月二日 做了不少事情，很累也很充实\n\n![挑战杯PPT的封面](/img/Mar2nd1.png)\n\n**坚持**\n坚持规律洗漱\n坚持练习吉他\n坚持推进挑战杯的进程\n\n**开始**\n开始去澡堂洗澡\n开始体会协作的乐趣\n开始画像素画\n\n![可莉可爱捏](/img/Mar2nd2.png)\n\n开始设计PPT封面\n开始P图\n\n**结束**\n结束对于英语的早晨学习：明天的重点要移到作业以及学习上\n\n## 三月三日 化急为友\n\n今天没有配图，因为是非常充实与繁忙的一天。\n\n**坚持**\n坚持练习吉他\n坚持规律洗漱\n坚持23:30之前睡觉\n坚持推进挑战杯：PPT设计、文本写作\n\n**改进**\n改进了自己对于C++做题的态度：\n因为以后的就业需要使用相关算法\n以及对C++的理解也能够帮助对于C#的学习\n最后，这是第一次突破一件事情，可以作为未来自学的参考\n\n**开始**\n开始做C语言题\n开始预习单词以及做U校园题目\n\n**结束**\n制定完毕了“闲时学习指南”的参考框架。\n\n## 三月四日 有情绪波动，有点大，但用学习度过了。\n\n![小游戏快做完了](/img/Mar4th.png)\n\n**坚持**\n坚持规律洗漱\n坚持推进挑战杯\n坚持复习与预习课程\n\n**结束**\n结束练习吉他\n结束学习C语言\n结束23:30之前睡觉\n\n## 三月五日 彻底摆脱负担。\n\n![Mile Stone.](/img/Mar5th.png)\n\n**坚持**\n坚持规律洗漱\n坚持尽早睡觉\n坚持推进挑战杯课程\n坚持预习课程\n\n**改进**\n改进过去会因为一些原因心态不平稳的情况：\n别人的看法咋样我不管，我要过好自己的生活。\n\n**开始**\n开始跑步 - 步数12000步\n\n\n## 三月六日 挺愉快的一天\n\n![在微信读书上发现了这本书，真的好有意思](/img/Mar6th.jpg)\n\n**坚持**\n坚持尽早睡觉\n坚持规律洗漱\n坚持预习课程\n\n**改进**\n学会维持专注状态，不会因为自我觉察而打破。\n\n**开始**\n开始阅读书籍\n开始练习编程题\n开始练习吉他\n\n## 三月七日 有时不知道做啥，有时就突然知道了\n\n![折花，一个小时，没折出来](/img/Mar7th.jpg)\n\n**坚持**\n坚持23:30之前睡觉\n坚持练习吉他\n坚持学习编程\n坚持学习课程\n\n**改进**\n改进了最近无所事事的心态，开始做自己方向上的事情。\n\n**开始**\n开始玩折纸。\n开始学习算法\n\n**结束**\n结束意淫\n\n## 三月八日 - 有点难受，做着自己喜欢的事情，总体称之为幸福。\n\n![与周围格格不入的白玫瑰花。](/img/Mar8th.jpg)\n\nC++与学算法之间的抉择 -- 明早写文预告。\n\n**坚持**\n坚持23:30之前睡觉\n坚持规律洗漱\n坚持练习吉他\n坚持学习编程题目\n坚持预习课程\n坚持读有趣的书\n\n**改进**\n改进了这几天安排不好自己的事情的缺点，\n开始使用思维导图列出选项。\n\n改进老是熬夜的缺点：开22:00的闹钟\n\n**开始**\n开始体素建模，参考滚动的天空。\n\n![薯条](/img/Mar8th2.png)\n\n![冰激凌球投掷机](/img/Mar8th.png)\n\n## 三月九日 - 三月十日 遇到了一些有趣的人，做了一些有趣的事。\n\n![昨晚在干的事情，持续四次，每次一小时，睡不着。](/img/Mar10th.jpg)\n\n**坚持**\n坚持练习吉他\n坚持3D建模\n坚持学习课程\n坚持规律作息（除九日这一天）\n\n**改进**\n心态开始好起来，改进了原来害怕交往的态度。\n大胆起来，敢喝酒了。\n\n**结束**\n结束肝原神与星穹，开始怀旧。\n结束学C语言编程(调整心态ing)\n\n![参与了一个party, 昨晚的奥尔良鸡腿](/img/Mar9th.jpg)\n\n## 三月十日 A busy day with heavy heart\n\n在学习，暂时没图喽。\n\n**坚持**\n坚持练习吉他\n坚持学习课程\n坚持规律作息与喝牛奶\n\n**改进**\n改进心情，这几天因为想谈恋爱所以心里老是胡思乱想（你不会想知道我在想什么的。）\n心里想法一直影响我的心态，上课也上不安稳。\n上了教学楼的阳台开导自己，终于把心情回回来了。\n\n**开始**\n\n开始阅读《被讨厌的勇气》，\n《云边有个小卖部》还会看，但是有点刀，也快看完了，不太舍得看了。\n\n开始尝试22:30之前睡\n\n**结束**\n结束建模：做的事情是浮动的，这周课很多，好好安排。\n\n## 三月十一日 Things're getting harder and harder\n\n在学习，暂时没图喽。\n\n**坚持**\n坚持练习吉他\n坚持预习课程\n坚持规律作息与喝牛奶\n坚持读书与调整心态\n\n**改进**\n改进心情，在《被讨厌的勇气》中获得了很多的启发\n情绪是自己捏造出来的。\n愤怒是交流的一种工具，你可以使用也可以不用。\n避免幻想，想想怎么用好自己已经有的。\n摆脱竞争，避免权利之战，把所有人看成伙伴，就可能摆脱人际交往的烦恼。\n一切烦恼都来自人际交往。\n\n**开始**\n尝试玩魔方\n开始主动社交\n\n## 三月十二日 The last tiring day.\n\n**坚持**\n坚持预习课程\n坚持喝牛奶\n坚持读书以及调节心态\n\n**改进**\n改进上课状态：不再紧绷状态，减轻竞争压力。\n改进心态：共同体意识以及划分课题。\n\n**开始**\n开始主动交往\n开始学习编程题\n\n**结束**\n结束练习吉他。\n\n> 读书：\n\n1. 横向关系与向别人学习有关系吗？\n我向别人学习是我的课题，别人教我是他的课题。\n我们都有自己的选择，都有权利决定这个事件要不要发生。\n向他人学习不代表一种纵向。\n\n2. 如何做出贡献？\n3. 如何面对冲突？\n\n4. 如何面对主观孤独感\n\t1. 活出自我的代价 - 敢于被讨厌、被评价。\n\t2. 信赖、共同体意识与相处和睦之间没有关系。\n\t3. 重要的是，你怎么看待与解释自己现在的状态。\n\n5. 认为不喜欢一个人，你觉得这个人是错的吗？\n\t一个人首先做事没有纯粹做坏事的。\n\t不喜欢的理由 - 对方目的。\n\t\t不开心是因为这个人 - 这个想法是在推脱责任。\n\t\t没有人需要按照你的期待生活。\n\t这种想法不是在挑起权力之争，你与他都是平等的横向关系。\n\n\t讨厌的感觉是一种借口。\n\t认为某些东西没有了、消失了、改变了，事情就会全盘转变。\n\t没有活在当下，想想要达到事情转变的效果需要怎么办。\n\n6. 如何谈论平等？\n平等的选择权利，平等地看待自己现在状态，平等地按照自己的想法生活。\n\n## 三月十二日 得到启发，开始应用与实践。\n\n**坚持**\n坚持学习课程\n坚持阅读\n\n**改进**\n改进了自己看待事物的方式，注重当下而不是其他时候，注重当下的动作而不是以后、过去怎么样。\n\n**开始**\n开始玩Terraria灾厄模组。\n\n## 三月十七日 Happily doing myself\n\n![在一首歌的歌词里看到的，很有感慨](/img/Mar172.png)\n\n**坚持**\n坚持规律作息与洗漱\n坚持练习吉他\n坚持学习编程\n坚持预习课程\n坚持读书与调整心态\n\n**改进**\n主动社交\n强化了自己梦想的决心\n\n**开始**\n开始学习PS\n\n![做的霓虹灯，但是没到想的效果](/img/Mar17th.png)\n\n开始早睡早起\n\n## 三月十八日 有点小失落，仍然胡思乱想\n\n![感冒喽，999](/img/Mar18th.jpg)\n\n**坚持**\n坚持早睡规律作息\n坚持学习课程\n坚持预习\n坚持读书与调整心态\n\n**结束**\n结束学习编程\n结束练习吉他\n结束学习PS\n\n## 三月十九日 进大学以来第一次发烧\n\n![处方全是没见过的药](/img/Mar19th.jpg)\n\n**坚持**\n坚持早睡早起\n坚持课后复盘\n坚持读书与调整心态\n\n**结束**\n结束上形势与政策课\n结束预习课程：今晚的感冒症状严重，很难受。\n\n## 三月二十日 总归过去了这一天，以后就好多了\n\n**坚持**\n坚持实践阿德勒理论与调整心态\n坚持课后复盘\n坚持预习课程\n坚持读书\n\n**改进**\n改变了对世界的看法：\n世界对我是安全的，我要无条件地信赖他人，无论他人配不配合\n\n## 三月二十一日 尝试活出自我的一天\n\n**坚持**\n坚持读书与调整心态\n坚持学习课程\n\n**开始**\n开始早晨听写英语\n开始练习吉他\n开始学习编程算法\n\n**结束**\n结束读《获得幸福的勇气》\n\n## 三月二十二日 事多，但总体放松，能活出自己，能放开\n\n![今日偶然想到，特别好听](/img/Mar21st.jpg)\n\n**坚持**\n坚持读书与调整心态\n坚持预习与学习课程\n\n**改进**\n意识到自己很多动作是应激反应，开始调整提醒。\n\n**开始**\n开始读《你要像鸟飞往你的山》\n\n**结束**\n结束学习算法\n结束练习吉他\n\n## 三月二十六日 生日快乐，亲爱的我\n\n> 手机停机了，图片传不过来，没拍蛋糕的照片\n\n**坚持**\n坚持读书与调整心态\n坚持练习吉他\n坚持学习课程\n坚持复盘\n\n**改进**\n调节自己对于应激反应的认识，\n开始从自己身体的微反应来认识自己\n\n**开始**\n开始尽力按照自己意愿生活\n开始理解自己，开始接受自己，开始解决问题。","source":"_posts/Kis.md","raw":"---\ntitle: Kiss记录(From 2024.2.19)\ndate: 2023-11-20 09:50:34\ntags: 学习资源\n---\n# 总体网站集合\n>1.菜鸟教程 www.runoob.com\n>2.空梦博客 www.kmar.top\n>3.昨日学长的B站号 [@zyoobn]\n>\t学长的CSDN [@郑轻大不知名]\n>4.编程爱好者协会 www.godyu.com\n>\tB站直播号 [@郑轻编程爱好者协会]\n\n看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了\n那网站上没法发帖子，所以我还是自己想办法建个博客吧。\n<!--more-->\n\n--------------分割线-------------------\n\n> 发现这个记录的你算是获得了我每天生活的窥视权，\n> 可以借鉴，当然不建议你抄，每个人都有自己的生活。\n> 下面的记录来自于A是传奇老师的Kiss模型。\n> 也就是Keep、Improve、Start、Stop这四个方面，\n> 用来记录并评估我日常的生活状态，找到我们生活中所展现的能力。\n> 记录开始时间为2.19日，是打卡，\n> 但是不希望因为外面人能看到所以给到自己压力，打卡不下去。\n> 另外我的目标是游戏行业，我深思熟虑过，调研了很多东西。\n> 另外需要通过考研路径来更换城市到上海（Mihoyo！）\n> 要是想聊一聊来找我也好 :)\n\n## 二月十九日 大风、有雨、清爽\n\n![小茶杯到货咯](/img/Feb19th.jpg)\n\n**坚持**：\n+ 坚持学习C++。\n+ 坚持学习练习吉他。\n+ 坚持今日一个主线的游戏时间。\n**改进**：\n+ 改进只有编程与游戏的生活。\n+ 改进每天晚睡的生活。 - 23：00之前必须睡。\n**开始**：\n+ 开始投入额外精力在执行学习路径上。\n**停止**：\n+ 停止意淫\n\n另附前一天的调整：\n尽快推进C++学习进度到STL，\n尽快应用其中的数据结构。\n\n## 二月二十日 早阴天，晚冰雹，寒风吹。\n\n![外边还是挺冷的。](/img/Feb20th.jpg)\n\n**坚持**\n坚持学习C++语言\n坚持练习吉他弹唱《童年》\n\n**改进**\n改进了之前的学习方式，\n加入回顾与总结知识点。\n\n**开始**\n开始总结之前的编程知识点\n开始6点之内起床。\n开始玩崩坏三\n\n**结束**\n结束肝原神，会有很长一段时间\n\n## 二月二十一日 大雪覆地，美不胜收。\n\n![大雪，想必郑州也是这样吧，快开学了。](/img/Feb21st.jpg)\n\n**坚持**\n坚持学习C++\n坚持练习吉他\n\n**改进**\n有走出去感受天气，不再困在家里\n\n**开始**\n开始原神与崩三一起玩，原神完任务，崩三攒钻石\n开始加快学习C++的脚步。\n\n**停止**\n停止23点之前睡：为了改娜维娅PPT\n![受凹凸世界动画启发搞的](/img/nvyppt.png)\n\n## 二月二十二日 雪冰交加，寸步难行\n\n![my studio](/img/Feb22nd.jpg)\n\n**坚持**\n坚持晚上23点之前睡觉\n坚持学习C++\n坚持练习吉他\n\n**改进**\n改进玩游戏缺乏目标 \n+游戏时间，-空白时间\n+ 原神: 角色突破养成\n+ 崩3: 多赚钻石抽角色\n\n改进学习C++没有针对于原初目的：\n学习STL。\n\n**开始**\n开始以准确的方式记录KISS。\n以平面直角坐标系来，x轴好与不好，y轴持续与非持续\n1-4象限 keep improve stop start\n\n开始参照网课自我学习吉他。\n\n开始问学长问题，对自己学的知识反思，加深理解。\n\n## 二月二十三日 比较开心的一天?\n\n![Fireworks!](/img/Feb23rd.jpg)\n\n**坚持**\n坚持晚上23点之前睡觉\n坚持晚上规律洗漱\n坚持学习C++\n坚持练习吉他\n\n**改进**\n改进只学习少实践的学习风格:学完STL去做了题。\n\n**开始**\n开始接触并学习STL模板库\n开始做编程题\n开始用笔记笔记，记忆效果要好于打字\n\n开始从外界回应中找到内心的平衡：\n别人对你的表现或者问题严格或者冷漠，是因为他们期望你做得更好，\n但不要反过来认为自己不好。\n\n## 二月二十四日 元宵，但在家的最后一天\n\n![* 温暖的感觉](/img/Feb24th.jpg)\n\n**坚持**\n坚持晚上23点睡觉\n坚持晚上规律洗漱\n坚持学习C++(STL)\n坚持练习吉他\n\n**开始**\n开始深度学习STL\n开始晚上22:30之前学习\n开始准备以后的学习生活\n\n**结束**\n结束寒假在家。\n\n## 二月二十五日 挺自律的一天\n\n![收拾好的小桌子](/img/Feb25th.jpg)\n\n**坚持**\n坚持晚上23点之前睡觉\n坚持晚上规律洗漱\n坚持练习吉他\n坚持学习C++(STL)\n\n**改进**\n改进莫名感到自卑的内心想法: \n> 想要放松下就放松下\n> 方向明确，在做该做的事情，就没有啥好自卑的\n> 各个人的方向不一样。\n> 坚持做自己要做的事情，慢慢地改进生活。\n\n优化了找人提问的步骤：优先使用AI找寻问题的答案。\t\n\n**开始**\n开始即时查看微Q信息\n开始筹备预习明天课程\n开始积极社交\n开始学习PS\n\n**结束**\n结束在家模式\n结束即时的不开心\n\n## 二月二十六日 Well-Assembled Day\n\n![温暖的茶水](/img/Feb26th.jpg)\n\n**坚持**\n坚持预习课程\n坚持练习吉他\n坚持规律洗漱\n坚持学习Ps\n\n**改进**\n根据老师的上课建议改进了英语学习方案：\n加入听写，写作方式。\n\n**开始**\n开始以中国大学MOOC为平台学习电子技术\n开始听写单词并预习英语。\n开始规划当下课程预习方案。\n\n**结束**\n结束23点睡觉: 玩原神与讨论游戏，明日改回来\n\n## 二月二十七日 忙碌的一天\n\n![体育课随手拍](/img/Feb27th.jpg)\n\n**坚持**\n坚持学习Ps\n坚持练习吉他\n坚持预习课程\n坚持规律洗漱\n坚持23点睡觉\n坚持每日早晨英语学习\n\n**开始**\n开始跑步:今日约2.4Km，13000步数，很棒。\n开始规划决策树。\n\n**结束**\n结束编程学习\n\n## 二月二十八日 差点就输过了情绪\n\n![早晨三个闹钟没给我叫起来，也可能是没响](/img/Feb28th.jpg)\n\n**坚持**\n坚持23点之前睡觉，并规律洗漱。\n坚持练习吉他：目前想要尝试新曲子。\n坚持预习明日课程，复习知识，画思维导图。\n坚持学习PS\n\n**改进**\n改进之前对于安全边际给予太少的缺点：\n今天因为晚起很多事没有很早做，一些事没做，导致情绪有波动，很多事心态上有阻碍。\n无需绷紧脑弦，只是最近确实事情有点多，做自己能做的就好。\n\n**开始**\n开始写入党申请书\n开始有意向去主动社交\n开始感到焦虑：竞争与对比焦虑、\n\n## 二月二十九日 写了一天入党申请书\n\n![累。](/img/Feb29th.png)\n\n**坚持**\n坚持练习吉他\n坚持23点之前睡觉，规律洗漱\n\n**改进**\n改进了最近的比较想法:\n脑子里不需要想那么多，我们的方向真的不一样。\n\n**开始**\n开始主动社交\n\n**结束**\n结束写入党申请书\n结束预习课程\n结束PS学习\n（事情多尽量周末或者明天开始拾起来）\n\n\n## 三月一日 调整好了心态，一身轻松\n\n![为\"挑战杯\"做的游戏场景](/img/Mar2nd.png)\n\n**坚持**\n坚持进行课程预习复习\n坚持规律洗漱\n坚持练习吉他\n\n**改进**\n再次改进最近的心态问题：\n从自己的想法后面推演心理，\n然后使用事实与观点的观点来判断这件事该不该这样想\n\n**开始**\n开始主动社交\n开始尝试新曲子\n开始准备“挑战杯”比赛\n\n**结束**\n结束23点睡觉：\n原因今晚准备挑战杯累 - 玩星穹 - 整理物理课程内容\n明日改进一下。\n\n## 三月二日 做了不少事情，很累也很充实\n\n![挑战杯PPT的封面](/img/Mar2nd1.png)\n\n**坚持**\n坚持规律洗漱\n坚持练习吉他\n坚持推进挑战杯的进程\n\n**开始**\n开始去澡堂洗澡\n开始体会协作的乐趣\n开始画像素画\n\n![可莉可爱捏](/img/Mar2nd2.png)\n\n开始设计PPT封面\n开始P图\n\n**结束**\n结束对于英语的早晨学习：明天的重点要移到作业以及学习上\n\n## 三月三日 化急为友\n\n今天没有配图，因为是非常充实与繁忙的一天。\n\n**坚持**\n坚持练习吉他\n坚持规律洗漱\n坚持23:30之前睡觉\n坚持推进挑战杯：PPT设计、文本写作\n\n**改进**\n改进了自己对于C++做题的态度：\n因为以后的就业需要使用相关算法\n以及对C++的理解也能够帮助对于C#的学习\n最后，这是第一次突破一件事情，可以作为未来自学的参考\n\n**开始**\n开始做C语言题\n开始预习单词以及做U校园题目\n\n**结束**\n制定完毕了“闲时学习指南”的参考框架。\n\n## 三月四日 有情绪波动，有点大，但用学习度过了。\n\n![小游戏快做完了](/img/Mar4th.png)\n\n**坚持**\n坚持规律洗漱\n坚持推进挑战杯\n坚持复习与预习课程\n\n**结束**\n结束练习吉他\n结束学习C语言\n结束23:30之前睡觉\n\n## 三月五日 彻底摆脱负担。\n\n![Mile Stone.](/img/Mar5th.png)\n\n**坚持**\n坚持规律洗漱\n坚持尽早睡觉\n坚持推进挑战杯课程\n坚持预习课程\n\n**改进**\n改进过去会因为一些原因心态不平稳的情况：\n别人的看法咋样我不管，我要过好自己的生活。\n\n**开始**\n开始跑步 - 步数12000步\n\n\n## 三月六日 挺愉快的一天\n\n![在微信读书上发现了这本书，真的好有意思](/img/Mar6th.jpg)\n\n**坚持**\n坚持尽早睡觉\n坚持规律洗漱\n坚持预习课程\n\n**改进**\n学会维持专注状态，不会因为自我觉察而打破。\n\n**开始**\n开始阅读书籍\n开始练习编程题\n开始练习吉他\n\n## 三月七日 有时不知道做啥，有时就突然知道了\n\n![折花，一个小时，没折出来](/img/Mar7th.jpg)\n\n**坚持**\n坚持23:30之前睡觉\n坚持练习吉他\n坚持学习编程\n坚持学习课程\n\n**改进**\n改进了最近无所事事的心态，开始做自己方向上的事情。\n\n**开始**\n开始玩折纸。\n开始学习算法\n\n**结束**\n结束意淫\n\n## 三月八日 - 有点难受，做着自己喜欢的事情，总体称之为幸福。\n\n![与周围格格不入的白玫瑰花。](/img/Mar8th.jpg)\n\nC++与学算法之间的抉择 -- 明早写文预告。\n\n**坚持**\n坚持23:30之前睡觉\n坚持规律洗漱\n坚持练习吉他\n坚持学习编程题目\n坚持预习课程\n坚持读有趣的书\n\n**改进**\n改进了这几天安排不好自己的事情的缺点，\n开始使用思维导图列出选项。\n\n改进老是熬夜的缺点：开22:00的闹钟\n\n**开始**\n开始体素建模，参考滚动的天空。\n\n![薯条](/img/Mar8th2.png)\n\n![冰激凌球投掷机](/img/Mar8th.png)\n\n## 三月九日 - 三月十日 遇到了一些有趣的人，做了一些有趣的事。\n\n![昨晚在干的事情，持续四次，每次一小时，睡不着。](/img/Mar10th.jpg)\n\n**坚持**\n坚持练习吉他\n坚持3D建模\n坚持学习课程\n坚持规律作息（除九日这一天）\n\n**改进**\n心态开始好起来，改进了原来害怕交往的态度。\n大胆起来，敢喝酒了。\n\n**结束**\n结束肝原神与星穹，开始怀旧。\n结束学C语言编程(调整心态ing)\n\n![参与了一个party, 昨晚的奥尔良鸡腿](/img/Mar9th.jpg)\n\n## 三月十日 A busy day with heavy heart\n\n在学习，暂时没图喽。\n\n**坚持**\n坚持练习吉他\n坚持学习课程\n坚持规律作息与喝牛奶\n\n**改进**\n改进心情，这几天因为想谈恋爱所以心里老是胡思乱想（你不会想知道我在想什么的。）\n心里想法一直影响我的心态，上课也上不安稳。\n上了教学楼的阳台开导自己，终于把心情回回来了。\n\n**开始**\n\n开始阅读《被讨厌的勇气》，\n《云边有个小卖部》还会看，但是有点刀，也快看完了，不太舍得看了。\n\n开始尝试22:30之前睡\n\n**结束**\n结束建模：做的事情是浮动的，这周课很多，好好安排。\n\n## 三月十一日 Things're getting harder and harder\n\n在学习，暂时没图喽。\n\n**坚持**\n坚持练习吉他\n坚持预习课程\n坚持规律作息与喝牛奶\n坚持读书与调整心态\n\n**改进**\n改进心情，在《被讨厌的勇气》中获得了很多的启发\n情绪是自己捏造出来的。\n愤怒是交流的一种工具，你可以使用也可以不用。\n避免幻想，想想怎么用好自己已经有的。\n摆脱竞争，避免权利之战，把所有人看成伙伴，就可能摆脱人际交往的烦恼。\n一切烦恼都来自人际交往。\n\n**开始**\n尝试玩魔方\n开始主动社交\n\n## 三月十二日 The last tiring day.\n\n**坚持**\n坚持预习课程\n坚持喝牛奶\n坚持读书以及调节心态\n\n**改进**\n改进上课状态：不再紧绷状态，减轻竞争压力。\n改进心态：共同体意识以及划分课题。\n\n**开始**\n开始主动交往\n开始学习编程题\n\n**结束**\n结束练习吉他。\n\n> 读书：\n\n1. 横向关系与向别人学习有关系吗？\n我向别人学习是我的课题，别人教我是他的课题。\n我们都有自己的选择，都有权利决定这个事件要不要发生。\n向他人学习不代表一种纵向。\n\n2. 如何做出贡献？\n3. 如何面对冲突？\n\n4. 如何面对主观孤独感\n\t1. 活出自我的代价 - 敢于被讨厌、被评价。\n\t2. 信赖、共同体意识与相处和睦之间没有关系。\n\t3. 重要的是，你怎么看待与解释自己现在的状态。\n\n5. 认为不喜欢一个人，你觉得这个人是错的吗？\n\t一个人首先做事没有纯粹做坏事的。\n\t不喜欢的理由 - 对方目的。\n\t\t不开心是因为这个人 - 这个想法是在推脱责任。\n\t\t没有人需要按照你的期待生活。\n\t这种想法不是在挑起权力之争，你与他都是平等的横向关系。\n\n\t讨厌的感觉是一种借口。\n\t认为某些东西没有了、消失了、改变了，事情就会全盘转变。\n\t没有活在当下，想想要达到事情转变的效果需要怎么办。\n\n6. 如何谈论平等？\n平等的选择权利，平等地看待自己现在状态，平等地按照自己的想法生活。\n\n## 三月十二日 得到启发，开始应用与实践。\n\n**坚持**\n坚持学习课程\n坚持阅读\n\n**改进**\n改进了自己看待事物的方式，注重当下而不是其他时候，注重当下的动作而不是以后、过去怎么样。\n\n**开始**\n开始玩Terraria灾厄模组。\n\n## 三月十七日 Happily doing myself\n\n![在一首歌的歌词里看到的，很有感慨](/img/Mar172.png)\n\n**坚持**\n坚持规律作息与洗漱\n坚持练习吉他\n坚持学习编程\n坚持预习课程\n坚持读书与调整心态\n\n**改进**\n主动社交\n强化了自己梦想的决心\n\n**开始**\n开始学习PS\n\n![做的霓虹灯，但是没到想的效果](/img/Mar17th.png)\n\n开始早睡早起\n\n## 三月十八日 有点小失落，仍然胡思乱想\n\n![感冒喽，999](/img/Mar18th.jpg)\n\n**坚持**\n坚持早睡规律作息\n坚持学习课程\n坚持预习\n坚持读书与调整心态\n\n**结束**\n结束学习编程\n结束练习吉他\n结束学习PS\n\n## 三月十九日 进大学以来第一次发烧\n\n![处方全是没见过的药](/img/Mar19th.jpg)\n\n**坚持**\n坚持早睡早起\n坚持课后复盘\n坚持读书与调整心态\n\n**结束**\n结束上形势与政策课\n结束预习课程：今晚的感冒症状严重，很难受。\n\n## 三月二十日 总归过去了这一天，以后就好多了\n\n**坚持**\n坚持实践阿德勒理论与调整心态\n坚持课后复盘\n坚持预习课程\n坚持读书\n\n**改进**\n改变了对世界的看法：\n世界对我是安全的，我要无条件地信赖他人，无论他人配不配合\n\n## 三月二十一日 尝试活出自我的一天\n\n**坚持**\n坚持读书与调整心态\n坚持学习课程\n\n**开始**\n开始早晨听写英语\n开始练习吉他\n开始学习编程算法\n\n**结束**\n结束读《获得幸福的勇气》\n\n## 三月二十二日 事多，但总体放松，能活出自己，能放开\n\n![今日偶然想到，特别好听](/img/Mar21st.jpg)\n\n**坚持**\n坚持读书与调整心态\n坚持预习与学习课程\n\n**改进**\n意识到自己很多动作是应激反应，开始调整提醒。\n\n**开始**\n开始读《你要像鸟飞往你的山》\n\n**结束**\n结束学习算法\n结束练习吉他\n\n## 三月二十六日 生日快乐，亲爱的我\n\n> 手机停机了，图片传不过来，没拍蛋糕的照片\n\n**坚持**\n坚持读书与调整心态\n坚持练习吉他\n坚持学习课程\n坚持复盘\n\n**改进**\n调节自己对于应激反应的认识，\n开始从自己身体的微反应来认识自己\n\n**开始**\n开始尽力按照自己意愿生活\n开始理解自己，开始接受自己，开始解决问题。","slug":"Kis","published":1,"updated":"2024-03-26T13:44:04.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nxv000gzkue10xe5546","content":"<h1 id=\"总体网站集合\"><a href=\"#总体网站集合\" class=\"headerlink\" title=\"总体网站集合\"></a>总体网站集合</h1><blockquote>\n<p>1.菜鸟教程 <a href=\"http://www.runoob.com/\">www.runoob.com</a><br>2.空梦博客 <a href=\"http://www.kmar.top/\">www.kmar.top</a><br>3.昨日学长的B站号 [@zyoobn]<br>学长的CSDN [@郑轻大不知名]<br>4.编程爱好者协会 <a href=\"http://www.godyu.com/\">www.godyu.com</a><br>B站直播号 [@郑轻编程爱好者协会]</p>\n</blockquote>\n<p>看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了<br>那网站上没法发帖子，所以我还是自己想办法建个博客吧。</p>\n<span id=\"more\"></span>\n\n<p>————–分割线——————-</p>\n<blockquote>\n<p>发现这个记录的你算是获得了我每天生活的窥视权，<br>可以借鉴，当然不建议你抄，每个人都有自己的生活。<br>下面的记录来自于A是传奇老师的Kiss模型。<br>也就是Keep、Improve、Start、Stop这四个方面，<br>用来记录并评估我日常的生活状态，找到我们生活中所展现的能力。<br>记录开始时间为2.19日，是打卡，<br>但是不希望因为外面人能看到所以给到自己压力，打卡不下去。<br>另外我的目标是游戏行业，我深思熟虑过，调研了很多东西。<br>另外需要通过考研路径来更换城市到上海（Mihoyo！）<br>要是想聊一聊来找我也好 :)</p>\n</blockquote>\n<h2 id=\"二月十九日-大风、有雨、清爽\"><a href=\"#二月十九日-大风、有雨、清爽\" class=\"headerlink\" title=\"二月十九日 大风、有雨、清爽\"></a>二月十九日 大风、有雨、清爽</h2><p><img src=\"/img/Feb19th.jpg\" alt=\"小茶杯到货咯\"></p>\n<p><strong>坚持</strong>：</p>\n<ul>\n<li>坚持学习C++。</li>\n<li>坚持学习练习吉他。</li>\n<li>坚持今日一个主线的游戏时间。<br><strong>改进</strong>：</li>\n<li>改进只有编程与游戏的生活。</li>\n<li>改进每天晚睡的生活。 - 23：00之前必须睡。<br><strong>开始</strong>：</li>\n<li>开始投入额外精力在执行学习路径上。<br><strong>停止</strong>：</li>\n<li>停止意淫</li>\n</ul>\n<p>另附前一天的调整：<br>尽快推进C++学习进度到STL，<br>尽快应用其中的数据结构。</p>\n<h2 id=\"二月二十日-早阴天，晚冰雹，寒风吹。\"><a href=\"#二月二十日-早阴天，晚冰雹，寒风吹。\" class=\"headerlink\" title=\"二月二十日 早阴天，晚冰雹，寒风吹。\"></a>二月二十日 早阴天，晚冰雹，寒风吹。</h2><p><img src=\"/img/Feb20th.jpg\" alt=\"外边还是挺冷的。\"></p>\n<p><strong>坚持</strong><br>坚持学习C++语言<br>坚持练习吉他弹唱《童年》</p>\n<p><strong>改进</strong><br>改进了之前的学习方式，<br>加入回顾与总结知识点。</p>\n<p><strong>开始</strong><br>开始总结之前的编程知识点<br>开始6点之内起床。<br>开始玩崩坏三</p>\n<p><strong>结束</strong><br>结束肝原神，会有很长一段时间</p>\n<h2 id=\"二月二十一日-大雪覆地，美不胜收。\"><a href=\"#二月二十一日-大雪覆地，美不胜收。\" class=\"headerlink\" title=\"二月二十一日 大雪覆地，美不胜收。\"></a>二月二十一日 大雪覆地，美不胜收。</h2><p><img src=\"/img/Feb21st.jpg\" alt=\"大雪，想必郑州也是这样吧，快开学了。\"></p>\n<p><strong>坚持</strong><br>坚持学习C++<br>坚持练习吉他</p>\n<p><strong>改进</strong><br>有走出去感受天气，不再困在家里</p>\n<p><strong>开始</strong><br>开始原神与崩三一起玩，原神完任务，崩三攒钻石<br>开始加快学习C++的脚步。</p>\n<p><strong>停止</strong><br>停止23点之前睡：为了改娜维娅PPT<br><img src=\"/img/nvyppt.png\" alt=\"受凹凸世界动画启发搞的\"></p>\n<h2 id=\"二月二十二日-雪冰交加，寸步难行\"><a href=\"#二月二十二日-雪冰交加，寸步难行\" class=\"headerlink\" title=\"二月二十二日 雪冰交加，寸步难行\"></a>二月二十二日 雪冰交加，寸步难行</h2><p><img src=\"/img/Feb22nd.jpg\" alt=\"my studio\"></p>\n<p><strong>坚持</strong><br>坚持晚上23点之前睡觉<br>坚持学习C++<br>坚持练习吉他</p>\n<p><strong>改进</strong><br>改进玩游戏缺乏目标<br>+游戏时间，-空白时间</p>\n<ul>\n<li>原神: 角色突破养成</li>\n<li>崩3: 多赚钻石抽角色</li>\n</ul>\n<p>改进学习C++没有针对于原初目的：<br>学习STL。</p>\n<p><strong>开始</strong><br>开始以准确的方式记录KISS。<br>以平面直角坐标系来，x轴好与不好，y轴持续与非持续<br>1-4象限 keep improve stop start</p>\n<p>开始参照网课自我学习吉他。</p>\n<p>开始问学长问题，对自己学的知识反思，加深理解。</p>\n<h2 id=\"二月二十三日-比较开心的一天\"><a href=\"#二月二十三日-比较开心的一天\" class=\"headerlink\" title=\"二月二十三日 比较开心的一天?\"></a>二月二十三日 比较开心的一天?</h2><p><img src=\"/img/Feb23rd.jpg\" alt=\"Fireworks!\"></p>\n<p><strong>坚持</strong><br>坚持晚上23点之前睡觉<br>坚持晚上规律洗漱<br>坚持学习C++<br>坚持练习吉他</p>\n<p><strong>改进</strong><br>改进只学习少实践的学习风格:学完STL去做了题。</p>\n<p><strong>开始</strong><br>开始接触并学习STL模板库<br>开始做编程题<br>开始用笔记笔记，记忆效果要好于打字</p>\n<p>开始从外界回应中找到内心的平衡：<br>别人对你的表现或者问题严格或者冷漠，是因为他们期望你做得更好，<br>但不要反过来认为自己不好。</p>\n<h2 id=\"二月二十四日-元宵，但在家的最后一天\"><a href=\"#二月二十四日-元宵，但在家的最后一天\" class=\"headerlink\" title=\"二月二十四日 元宵，但在家的最后一天\"></a>二月二十四日 元宵，但在家的最后一天</h2><p><img src=\"/img/Feb24th.jpg\" alt=\"* 温暖的感觉\"></p>\n<p><strong>坚持</strong><br>坚持晚上23点睡觉<br>坚持晚上规律洗漱<br>坚持学习C++(STL)<br>坚持练习吉他</p>\n<p><strong>开始</strong><br>开始深度学习STL<br>开始晚上22:30之前学习<br>开始准备以后的学习生活</p>\n<p><strong>结束</strong><br>结束寒假在家。</p>\n<h2 id=\"二月二十五日-挺自律的一天\"><a href=\"#二月二十五日-挺自律的一天\" class=\"headerlink\" title=\"二月二十五日 挺自律的一天\"></a>二月二十五日 挺自律的一天</h2><p><img src=\"/img/Feb25th.jpg\" alt=\"收拾好的小桌子\"></p>\n<p><strong>坚持</strong><br>坚持晚上23点之前睡觉<br>坚持晚上规律洗漱<br>坚持练习吉他<br>坚持学习C++(STL)</p>\n<p><strong>改进</strong><br>改进莫名感到自卑的内心想法: </p>\n<blockquote>\n<p>想要放松下就放松下<br>方向明确，在做该做的事情，就没有啥好自卑的<br>各个人的方向不一样。<br>坚持做自己要做的事情，慢慢地改进生活。</p>\n</blockquote>\n<p>优化了找人提问的步骤：优先使用AI找寻问题的答案。\t</p>\n<p><strong>开始</strong><br>开始即时查看微Q信息<br>开始筹备预习明天课程<br>开始积极社交<br>开始学习PS</p>\n<p><strong>结束</strong><br>结束在家模式<br>结束即时的不开心</p>\n<h2 id=\"二月二十六日-Well-Assembled-Day\"><a href=\"#二月二十六日-Well-Assembled-Day\" class=\"headerlink\" title=\"二月二十六日 Well-Assembled Day\"></a>二月二十六日 Well-Assembled Day</h2><p><img src=\"/img/Feb26th.jpg\" alt=\"温暖的茶水\"></p>\n<p><strong>坚持</strong><br>坚持预习课程<br>坚持练习吉他<br>坚持规律洗漱<br>坚持学习Ps</p>\n<p><strong>改进</strong><br>根据老师的上课建议改进了英语学习方案：<br>加入听写，写作方式。</p>\n<p><strong>开始</strong><br>开始以中国大学MOOC为平台学习电子技术<br>开始听写单词并预习英语。<br>开始规划当下课程预习方案。</p>\n<p><strong>结束</strong><br>结束23点睡觉: 玩原神与讨论游戏，明日改回来</p>\n<h2 id=\"二月二十七日-忙碌的一天\"><a href=\"#二月二十七日-忙碌的一天\" class=\"headerlink\" title=\"二月二十七日 忙碌的一天\"></a>二月二十七日 忙碌的一天</h2><p><img src=\"/img/Feb27th.jpg\" alt=\"体育课随手拍\"></p>\n<p><strong>坚持</strong><br>坚持学习Ps<br>坚持练习吉他<br>坚持预习课程<br>坚持规律洗漱<br>坚持23点睡觉<br>坚持每日早晨英语学习</p>\n<p><strong>开始</strong><br>开始跑步:今日约2.4Km，13000步数，很棒。<br>开始规划决策树。</p>\n<p><strong>结束</strong><br>结束编程学习</p>\n<h2 id=\"二月二十八日-差点就输过了情绪\"><a href=\"#二月二十八日-差点就输过了情绪\" class=\"headerlink\" title=\"二月二十八日 差点就输过了情绪\"></a>二月二十八日 差点就输过了情绪</h2><p><img src=\"/img/Feb28th.jpg\" alt=\"早晨三个闹钟没给我叫起来，也可能是没响\"></p>\n<p><strong>坚持</strong><br>坚持23点之前睡觉，并规律洗漱。<br>坚持练习吉他：目前想要尝试新曲子。<br>坚持预习明日课程，复习知识，画思维导图。<br>坚持学习PS</p>\n<p><strong>改进</strong><br>改进之前对于安全边际给予太少的缺点：<br>今天因为晚起很多事没有很早做，一些事没做，导致情绪有波动，很多事心态上有阻碍。<br>无需绷紧脑弦，只是最近确实事情有点多，做自己能做的就好。</p>\n<p><strong>开始</strong><br>开始写入党申请书<br>开始有意向去主动社交<br>开始感到焦虑：竞争与对比焦虑、</p>\n<h2 id=\"二月二十九日-写了一天入党申请书\"><a href=\"#二月二十九日-写了一天入党申请书\" class=\"headerlink\" title=\"二月二十九日 写了一天入党申请书\"></a>二月二十九日 写了一天入党申请书</h2><p><img src=\"/img/Feb29th.png\" alt=\"累。\"></p>\n<p><strong>坚持</strong><br>坚持练习吉他<br>坚持23点之前睡觉，规律洗漱</p>\n<p><strong>改进</strong><br>改进了最近的比较想法:<br>脑子里不需要想那么多，我们的方向真的不一样。</p>\n<p><strong>开始</strong><br>开始主动社交</p>\n<p><strong>结束</strong><br>结束写入党申请书<br>结束预习课程<br>结束PS学习<br>（事情多尽量周末或者明天开始拾起来）</p>\n<h2 id=\"三月一日-调整好了心态，一身轻松\"><a href=\"#三月一日-调整好了心态，一身轻松\" class=\"headerlink\" title=\"三月一日 调整好了心态，一身轻松\"></a>三月一日 调整好了心态，一身轻松</h2><p><img src=\"/img/Mar2nd.png\" alt=\"为&quot;挑战杯&quot;做的游戏场景\"></p>\n<p><strong>坚持</strong><br>坚持进行课程预习复习<br>坚持规律洗漱<br>坚持练习吉他</p>\n<p><strong>改进</strong><br>再次改进最近的心态问题：<br>从自己的想法后面推演心理，<br>然后使用事实与观点的观点来判断这件事该不该这样想</p>\n<p><strong>开始</strong><br>开始主动社交<br>开始尝试新曲子<br>开始准备“挑战杯”比赛</p>\n<p><strong>结束</strong><br>结束23点睡觉：<br>原因今晚准备挑战杯累 - 玩星穹 - 整理物理课程内容<br>明日改进一下。</p>\n<h2 id=\"三月二日-做了不少事情，很累也很充实\"><a href=\"#三月二日-做了不少事情，很累也很充实\" class=\"headerlink\" title=\"三月二日 做了不少事情，很累也很充实\"></a>三月二日 做了不少事情，很累也很充实</h2><p><img src=\"/img/Mar2nd1.png\" alt=\"挑战杯PPT的封面\"></p>\n<p><strong>坚持</strong><br>坚持规律洗漱<br>坚持练习吉他<br>坚持推进挑战杯的进程</p>\n<p><strong>开始</strong><br>开始去澡堂洗澡<br>开始体会协作的乐趣<br>开始画像素画</p>\n<p><img src=\"/img/Mar2nd2.png\" alt=\"可莉可爱捏\"></p>\n<p>开始设计PPT封面<br>开始P图</p>\n<p><strong>结束</strong><br>结束对于英语的早晨学习：明天的重点要移到作业以及学习上</p>\n<h2 id=\"三月三日-化急为友\"><a href=\"#三月三日-化急为友\" class=\"headerlink\" title=\"三月三日 化急为友\"></a>三月三日 化急为友</h2><p>今天没有配图，因为是非常充实与繁忙的一天。</p>\n<p><strong>坚持</strong><br>坚持练习吉他<br>坚持规律洗漱<br>坚持23:30之前睡觉<br>坚持推进挑战杯：PPT设计、文本写作</p>\n<p><strong>改进</strong><br>改进了自己对于C++做题的态度：<br>因为以后的就业需要使用相关算法<br>以及对C++的理解也能够帮助对于C#的学习<br>最后，这是第一次突破一件事情，可以作为未来自学的参考</p>\n<p><strong>开始</strong><br>开始做C语言题<br>开始预习单词以及做U校园题目</p>\n<p><strong>结束</strong><br>制定完毕了“闲时学习指南”的参考框架。</p>\n<h2 id=\"三月四日-有情绪波动，有点大，但用学习度过了。\"><a href=\"#三月四日-有情绪波动，有点大，但用学习度过了。\" class=\"headerlink\" title=\"三月四日 有情绪波动，有点大，但用学习度过了。\"></a>三月四日 有情绪波动，有点大，但用学习度过了。</h2><p><img src=\"/img/Mar4th.png\" alt=\"小游戏快做完了\"></p>\n<p><strong>坚持</strong><br>坚持规律洗漱<br>坚持推进挑战杯<br>坚持复习与预习课程</p>\n<p><strong>结束</strong><br>结束练习吉他<br>结束学习C语言<br>结束23:30之前睡觉</p>\n<h2 id=\"三月五日-彻底摆脱负担。\"><a href=\"#三月五日-彻底摆脱负担。\" class=\"headerlink\" title=\"三月五日 彻底摆脱负担。\"></a>三月五日 彻底摆脱负担。</h2><p><img src=\"/img/Mar5th.png\" alt=\"Mile Stone.\"></p>\n<p><strong>坚持</strong><br>坚持规律洗漱<br>坚持尽早睡觉<br>坚持推进挑战杯课程<br>坚持预习课程</p>\n<p><strong>改进</strong><br>改进过去会因为一些原因心态不平稳的情况：<br>别人的看法咋样我不管，我要过好自己的生活。</p>\n<p><strong>开始</strong><br>开始跑步 - 步数12000步</p>\n<h2 id=\"三月六日-挺愉快的一天\"><a href=\"#三月六日-挺愉快的一天\" class=\"headerlink\" title=\"三月六日 挺愉快的一天\"></a>三月六日 挺愉快的一天</h2><p><img src=\"/img/Mar6th.jpg\" alt=\"在微信读书上发现了这本书，真的好有意思\"></p>\n<p><strong>坚持</strong><br>坚持尽早睡觉<br>坚持规律洗漱<br>坚持预习课程</p>\n<p><strong>改进</strong><br>学会维持专注状态，不会因为自我觉察而打破。</p>\n<p><strong>开始</strong><br>开始阅读书籍<br>开始练习编程题<br>开始练习吉他</p>\n<h2 id=\"三月七日-有时不知道做啥，有时就突然知道了\"><a href=\"#三月七日-有时不知道做啥，有时就突然知道了\" class=\"headerlink\" title=\"三月七日 有时不知道做啥，有时就突然知道了\"></a>三月七日 有时不知道做啥，有时就突然知道了</h2><p><img src=\"/img/Mar7th.jpg\" alt=\"折花，一个小时，没折出来\"></p>\n<p><strong>坚持</strong><br>坚持23:30之前睡觉<br>坚持练习吉他<br>坚持学习编程<br>坚持学习课程</p>\n<p><strong>改进</strong><br>改进了最近无所事事的心态，开始做自己方向上的事情。</p>\n<p><strong>开始</strong><br>开始玩折纸。<br>开始学习算法</p>\n<p><strong>结束</strong><br>结束意淫</p>\n<h2 id=\"三月八日-有点难受，做着自己喜欢的事情，总体称之为幸福。\"><a href=\"#三月八日-有点难受，做着自己喜欢的事情，总体称之为幸福。\" class=\"headerlink\" title=\"三月八日 - 有点难受，做着自己喜欢的事情，总体称之为幸福。\"></a>三月八日 - 有点难受，做着自己喜欢的事情，总体称之为幸福。</h2><p><img src=\"/img/Mar8th.jpg\" alt=\"与周围格格不入的白玫瑰花。\"></p>\n<p>C++与学算法之间的抉择 – 明早写文预告。</p>\n<p><strong>坚持</strong><br>坚持23:30之前睡觉<br>坚持规律洗漱<br>坚持练习吉他<br>坚持学习编程题目<br>坚持预习课程<br>坚持读有趣的书</p>\n<p><strong>改进</strong><br>改进了这几天安排不好自己的事情的缺点，<br>开始使用思维导图列出选项。</p>\n<p>改进老是熬夜的缺点：开22:00的闹钟</p>\n<p><strong>开始</strong><br>开始体素建模，参考滚动的天空。</p>\n<p><img src=\"/img/Mar8th2.png\" alt=\"薯条\"></p>\n<p><img src=\"/img/Mar8th.png\" alt=\"冰激凌球投掷机\"></p>\n<h2 id=\"三月九日-三月十日-遇到了一些有趣的人，做了一些有趣的事。\"><a href=\"#三月九日-三月十日-遇到了一些有趣的人，做了一些有趣的事。\" class=\"headerlink\" title=\"三月九日 - 三月十日 遇到了一些有趣的人，做了一些有趣的事。\"></a>三月九日 - 三月十日 遇到了一些有趣的人，做了一些有趣的事。</h2><p><img src=\"/img/Mar10th.jpg\" alt=\"昨晚在干的事情，持续四次，每次一小时，睡不着。\"></p>\n<p><strong>坚持</strong><br>坚持练习吉他<br>坚持3D建模<br>坚持学习课程<br>坚持规律作息（除九日这一天）</p>\n<p><strong>改进</strong><br>心态开始好起来，改进了原来害怕交往的态度。<br>大胆起来，敢喝酒了。</p>\n<p><strong>结束</strong><br>结束肝原神与星穹，开始怀旧。<br>结束学C语言编程(调整心态ing)</p>\n<p><img src=\"/img/Mar9th.jpg\" alt=\"参与了一个party, 昨晚的奥尔良鸡腿\"></p>\n<h2 id=\"三月十日-A-busy-day-with-heavy-heart\"><a href=\"#三月十日-A-busy-day-with-heavy-heart\" class=\"headerlink\" title=\"三月十日 A busy day with heavy heart\"></a>三月十日 A busy day with heavy heart</h2><p>在学习，暂时没图喽。</p>\n<p><strong>坚持</strong><br>坚持练习吉他<br>坚持学习课程<br>坚持规律作息与喝牛奶</p>\n<p><strong>改进</strong><br>改进心情，这几天因为想谈恋爱所以心里老是胡思乱想（你不会想知道我在想什么的。）<br>心里想法一直影响我的心态，上课也上不安稳。<br>上了教学楼的阳台开导自己，终于把心情回回来了。</p>\n<p><strong>开始</strong></p>\n<p>开始阅读《被讨厌的勇气》，<br>《云边有个小卖部》还会看，但是有点刀，也快看完了，不太舍得看了。</p>\n<p>开始尝试22:30之前睡</p>\n<p><strong>结束</strong><br>结束建模：做的事情是浮动的，这周课很多，好好安排。</p>\n<h2 id=\"三月十一日-Things’re-getting-harder-and-harder\"><a href=\"#三月十一日-Things’re-getting-harder-and-harder\" class=\"headerlink\" title=\"三月十一日 Things’re getting harder and harder\"></a>三月十一日 Things’re getting harder and harder</h2><p>在学习，暂时没图喽。</p>\n<p><strong>坚持</strong><br>坚持练习吉他<br>坚持预习课程<br>坚持规律作息与喝牛奶<br>坚持读书与调整心态</p>\n<p><strong>改进</strong><br>改进心情，在《被讨厌的勇气》中获得了很多的启发<br>情绪是自己捏造出来的。<br>愤怒是交流的一种工具，你可以使用也可以不用。<br>避免幻想，想想怎么用好自己已经有的。<br>摆脱竞争，避免权利之战，把所有人看成伙伴，就可能摆脱人际交往的烦恼。<br>一切烦恼都来自人际交往。</p>\n<p><strong>开始</strong><br>尝试玩魔方<br>开始主动社交</p>\n<h2 id=\"三月十二日-The-last-tiring-day\"><a href=\"#三月十二日-The-last-tiring-day\" class=\"headerlink\" title=\"三月十二日 The last tiring day.\"></a>三月十二日 The last tiring day.</h2><p><strong>坚持</strong><br>坚持预习课程<br>坚持喝牛奶<br>坚持读书以及调节心态</p>\n<p><strong>改进</strong><br>改进上课状态：不再紧绷状态，减轻竞争压力。<br>改进心态：共同体意识以及划分课题。</p>\n<p><strong>开始</strong><br>开始主动交往<br>开始学习编程题</p>\n<p><strong>结束</strong><br>结束练习吉他。</p>\n<blockquote>\n<p>读书：</p>\n</blockquote>\n<ol>\n<li><p>横向关系与向别人学习有关系吗？<br>我向别人学习是我的课题，别人教我是他的课题。<br>我们都有自己的选择，都有权利决定这个事件要不要发生。<br>向他人学习不代表一种纵向。</p>\n</li>\n<li><p>如何做出贡献？</p>\n</li>\n<li><p>如何面对冲突？</p>\n</li>\n<li><p>如何面对主观孤独感</p>\n<ol>\n<li>活出自我的代价 - 敢于被讨厌、被评价。</li>\n<li>信赖、共同体意识与相处和睦之间没有关系。</li>\n<li>重要的是，你怎么看待与解释自己现在的状态。</li>\n</ol>\n</li>\n<li><p>认为不喜欢一个人，你觉得这个人是错的吗？<br> 一个人首先做事没有纯粹做坏事的。<br> 不喜欢的理由 - 对方目的。<br> 不开心是因为这个人 - 这个想法是在推脱责任。<br> 没有人需要按照你的期待生活。<br> 这种想法不是在挑起权力之争，你与他都是平等的横向关系。</p>\n<p> 讨厌的感觉是一种借口。<br> 认为某些东西没有了、消失了、改变了，事情就会全盘转变。<br> 没有活在当下，想想要达到事情转变的效果需要怎么办。</p>\n</li>\n<li><p>如何谈论平等？<br>平等的选择权利，平等地看待自己现在状态，平等地按照自己的想法生活。</p>\n</li>\n</ol>\n<h2 id=\"三月十二日-得到启发，开始应用与实践。\"><a href=\"#三月十二日-得到启发，开始应用与实践。\" class=\"headerlink\" title=\"三月十二日 得到启发，开始应用与实践。\"></a>三月十二日 得到启发，开始应用与实践。</h2><p><strong>坚持</strong><br>坚持学习课程<br>坚持阅读</p>\n<p><strong>改进</strong><br>改进了自己看待事物的方式，注重当下而不是其他时候，注重当下的动作而不是以后、过去怎么样。</p>\n<p><strong>开始</strong><br>开始玩Terraria灾厄模组。</p>\n<h2 id=\"三月十七日-Happily-doing-myself\"><a href=\"#三月十七日-Happily-doing-myself\" class=\"headerlink\" title=\"三月十七日 Happily doing myself\"></a>三月十七日 Happily doing myself</h2><p><img src=\"/img/Mar172.png\" alt=\"在一首歌的歌词里看到的，很有感慨\"></p>\n<p><strong>坚持</strong><br>坚持规律作息与洗漱<br>坚持练习吉他<br>坚持学习编程<br>坚持预习课程<br>坚持读书与调整心态</p>\n<p><strong>改进</strong><br>主动社交<br>强化了自己梦想的决心</p>\n<p><strong>开始</strong><br>开始学习PS</p>\n<p><img src=\"/img/Mar17th.png\" alt=\"做的霓虹灯，但是没到想的效果\"></p>\n<p>开始早睡早起</p>\n<h2 id=\"三月十八日-有点小失落，仍然胡思乱想\"><a href=\"#三月十八日-有点小失落，仍然胡思乱想\" class=\"headerlink\" title=\"三月十八日 有点小失落，仍然胡思乱想\"></a>三月十八日 有点小失落，仍然胡思乱想</h2><p><img src=\"/img/Mar18th.jpg\" alt=\"感冒喽，999\"></p>\n<p><strong>坚持</strong><br>坚持早睡规律作息<br>坚持学习课程<br>坚持预习<br>坚持读书与调整心态</p>\n<p><strong>结束</strong><br>结束学习编程<br>结束练习吉他<br>结束学习PS</p>\n<h2 id=\"三月十九日-进大学以来第一次发烧\"><a href=\"#三月十九日-进大学以来第一次发烧\" class=\"headerlink\" title=\"三月十九日 进大学以来第一次发烧\"></a>三月十九日 进大学以来第一次发烧</h2><p><img src=\"/img/Mar19th.jpg\" alt=\"处方全是没见过的药\"></p>\n<p><strong>坚持</strong><br>坚持早睡早起<br>坚持课后复盘<br>坚持读书与调整心态</p>\n<p><strong>结束</strong><br>结束上形势与政策课<br>结束预习课程：今晚的感冒症状严重，很难受。</p>\n<h2 id=\"三月二十日-总归过去了这一天，以后就好多了\"><a href=\"#三月二十日-总归过去了这一天，以后就好多了\" class=\"headerlink\" title=\"三月二十日 总归过去了这一天，以后就好多了\"></a>三月二十日 总归过去了这一天，以后就好多了</h2><p><strong>坚持</strong><br>坚持实践阿德勒理论与调整心态<br>坚持课后复盘<br>坚持预习课程<br>坚持读书</p>\n<p><strong>改进</strong><br>改变了对世界的看法：<br>世界对我是安全的，我要无条件地信赖他人，无论他人配不配合</p>\n<h2 id=\"三月二十一日-尝试活出自我的一天\"><a href=\"#三月二十一日-尝试活出自我的一天\" class=\"headerlink\" title=\"三月二十一日 尝试活出自我的一天\"></a>三月二十一日 尝试活出自我的一天</h2><p><strong>坚持</strong><br>坚持读书与调整心态<br>坚持学习课程</p>\n<p><strong>开始</strong><br>开始早晨听写英语<br>开始练习吉他<br>开始学习编程算法</p>\n<p><strong>结束</strong><br>结束读《获得幸福的勇气》</p>\n<h2 id=\"三月二十二日-事多，但总体放松，能活出自己，能放开\"><a href=\"#三月二十二日-事多，但总体放松，能活出自己，能放开\" class=\"headerlink\" title=\"三月二十二日 事多，但总体放松，能活出自己，能放开\"></a>三月二十二日 事多，但总体放松，能活出自己，能放开</h2><p><img src=\"/img/Mar21st.jpg\" alt=\"今日偶然想到，特别好听\"></p>\n<p><strong>坚持</strong><br>坚持读书与调整心态<br>坚持预习与学习课程</p>\n<p><strong>改进</strong><br>意识到自己很多动作是应激反应，开始调整提醒。</p>\n<p><strong>开始</strong><br>开始读《你要像鸟飞往你的山》</p>\n<p><strong>结束</strong><br>结束学习算法<br>结束练习吉他</p>\n<h2 id=\"三月二十六日-生日快乐，亲爱的我\"><a href=\"#三月二十六日-生日快乐，亲爱的我\" class=\"headerlink\" title=\"三月二十六日 生日快乐，亲爱的我\"></a>三月二十六日 生日快乐，亲爱的我</h2><blockquote>\n<p>手机停机了，图片传不过来，没拍蛋糕的照片</p>\n</blockquote>\n<p><strong>坚持</strong><br>坚持读书与调整心态<br>坚持练习吉他<br>坚持学习课程<br>坚持复盘</p>\n<p><strong>改进</strong><br>调节自己对于应激反应的认识，<br>开始从自己身体的微反应来认识自己</p>\n<p><strong>开始</strong><br>开始尽力按照自己意愿生活<br>开始理解自己，开始接受自己，开始解决问题。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"总体网站集合\"><a href=\"#总体网站集合\" class=\"headerlink\" title=\"总体网站集合\"></a>总体网站集合</h1><blockquote>\n<p>1.菜鸟教程 <a href=\"http://www.runoob.com/\">www.runoob.com</a><br>2.空梦博客 <a href=\"http://www.kmar.top/\">www.kmar.top</a><br>3.昨日学长的B站号 [@zyoobn]<br>学长的CSDN [@郑轻大不知名]<br>4.编程爱好者协会 <a href=\"http://www.godyu.com/\">www.godyu.com</a><br>B站直播号 [@郑轻编程爱好者协会]</p>\n</blockquote>\n<p>看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了<br>那网站上没法发帖子，所以我还是自己想办法建个博客吧。</p>","more":"<p>————–分割线——————-</p>\n<blockquote>\n<p>发现这个记录的你算是获得了我每天生活的窥视权，<br>可以借鉴，当然不建议你抄，每个人都有自己的生活。<br>下面的记录来自于A是传奇老师的Kiss模型。<br>也就是Keep、Improve、Start、Stop这四个方面，<br>用来记录并评估我日常的生活状态，找到我们生活中所展现的能力。<br>记录开始时间为2.19日，是打卡，<br>但是不希望因为外面人能看到所以给到自己压力，打卡不下去。<br>另外我的目标是游戏行业，我深思熟虑过，调研了很多东西。<br>另外需要通过考研路径来更换城市到上海（Mihoyo！）<br>要是想聊一聊来找我也好 :)</p>\n</blockquote>\n<h2 id=\"二月十九日-大风、有雨、清爽\"><a href=\"#二月十九日-大风、有雨、清爽\" class=\"headerlink\" title=\"二月十九日 大风、有雨、清爽\"></a>二月十九日 大风、有雨、清爽</h2><p><img src=\"/img/Feb19th.jpg\" alt=\"小茶杯到货咯\"></p>\n<p><strong>坚持</strong>：</p>\n<ul>\n<li>坚持学习C++。</li>\n<li>坚持学习练习吉他。</li>\n<li>坚持今日一个主线的游戏时间。<br><strong>改进</strong>：</li>\n<li>改进只有编程与游戏的生活。</li>\n<li>改进每天晚睡的生活。 - 23：00之前必须睡。<br><strong>开始</strong>：</li>\n<li>开始投入额外精力在执行学习路径上。<br><strong>停止</strong>：</li>\n<li>停止意淫</li>\n</ul>\n<p>另附前一天的调整：<br>尽快推进C++学习进度到STL，<br>尽快应用其中的数据结构。</p>\n<h2 id=\"二月二十日-早阴天，晚冰雹，寒风吹。\"><a href=\"#二月二十日-早阴天，晚冰雹，寒风吹。\" class=\"headerlink\" title=\"二月二十日 早阴天，晚冰雹，寒风吹。\"></a>二月二十日 早阴天，晚冰雹，寒风吹。</h2><p><img src=\"/img/Feb20th.jpg\" alt=\"外边还是挺冷的。\"></p>\n<p><strong>坚持</strong><br>坚持学习C++语言<br>坚持练习吉他弹唱《童年》</p>\n<p><strong>改进</strong><br>改进了之前的学习方式，<br>加入回顾与总结知识点。</p>\n<p><strong>开始</strong><br>开始总结之前的编程知识点<br>开始6点之内起床。<br>开始玩崩坏三</p>\n<p><strong>结束</strong><br>结束肝原神，会有很长一段时间</p>\n<h2 id=\"二月二十一日-大雪覆地，美不胜收。\"><a href=\"#二月二十一日-大雪覆地，美不胜收。\" class=\"headerlink\" title=\"二月二十一日 大雪覆地，美不胜收。\"></a>二月二十一日 大雪覆地，美不胜收。</h2><p><img src=\"/img/Feb21st.jpg\" alt=\"大雪，想必郑州也是这样吧，快开学了。\"></p>\n<p><strong>坚持</strong><br>坚持学习C++<br>坚持练习吉他</p>\n<p><strong>改进</strong><br>有走出去感受天气，不再困在家里</p>\n<p><strong>开始</strong><br>开始原神与崩三一起玩，原神完任务，崩三攒钻石<br>开始加快学习C++的脚步。</p>\n<p><strong>停止</strong><br>停止23点之前睡：为了改娜维娅PPT<br><img src=\"/img/nvyppt.png\" alt=\"受凹凸世界动画启发搞的\"></p>\n<h2 id=\"二月二十二日-雪冰交加，寸步难行\"><a href=\"#二月二十二日-雪冰交加，寸步难行\" class=\"headerlink\" title=\"二月二十二日 雪冰交加，寸步难行\"></a>二月二十二日 雪冰交加，寸步难行</h2><p><img src=\"/img/Feb22nd.jpg\" alt=\"my studio\"></p>\n<p><strong>坚持</strong><br>坚持晚上23点之前睡觉<br>坚持学习C++<br>坚持练习吉他</p>\n<p><strong>改进</strong><br>改进玩游戏缺乏目标<br>+游戏时间，-空白时间</p>\n<ul>\n<li>原神: 角色突破养成</li>\n<li>崩3: 多赚钻石抽角色</li>\n</ul>\n<p>改进学习C++没有针对于原初目的：<br>学习STL。</p>\n<p><strong>开始</strong><br>开始以准确的方式记录KISS。<br>以平面直角坐标系来，x轴好与不好，y轴持续与非持续<br>1-4象限 keep improve stop start</p>\n<p>开始参照网课自我学习吉他。</p>\n<p>开始问学长问题，对自己学的知识反思，加深理解。</p>\n<h2 id=\"二月二十三日-比较开心的一天\"><a href=\"#二月二十三日-比较开心的一天\" class=\"headerlink\" title=\"二月二十三日 比较开心的一天?\"></a>二月二十三日 比较开心的一天?</h2><p><img src=\"/img/Feb23rd.jpg\" alt=\"Fireworks!\"></p>\n<p><strong>坚持</strong><br>坚持晚上23点之前睡觉<br>坚持晚上规律洗漱<br>坚持学习C++<br>坚持练习吉他</p>\n<p><strong>改进</strong><br>改进只学习少实践的学习风格:学完STL去做了题。</p>\n<p><strong>开始</strong><br>开始接触并学习STL模板库<br>开始做编程题<br>开始用笔记笔记，记忆效果要好于打字</p>\n<p>开始从外界回应中找到内心的平衡：<br>别人对你的表现或者问题严格或者冷漠，是因为他们期望你做得更好，<br>但不要反过来认为自己不好。</p>\n<h2 id=\"二月二十四日-元宵，但在家的最后一天\"><a href=\"#二月二十四日-元宵，但在家的最后一天\" class=\"headerlink\" title=\"二月二十四日 元宵，但在家的最后一天\"></a>二月二十四日 元宵，但在家的最后一天</h2><p><img src=\"/img/Feb24th.jpg\" alt=\"* 温暖的感觉\"></p>\n<p><strong>坚持</strong><br>坚持晚上23点睡觉<br>坚持晚上规律洗漱<br>坚持学习C++(STL)<br>坚持练习吉他</p>\n<p><strong>开始</strong><br>开始深度学习STL<br>开始晚上22:30之前学习<br>开始准备以后的学习生活</p>\n<p><strong>结束</strong><br>结束寒假在家。</p>\n<h2 id=\"二月二十五日-挺自律的一天\"><a href=\"#二月二十五日-挺自律的一天\" class=\"headerlink\" title=\"二月二十五日 挺自律的一天\"></a>二月二十五日 挺自律的一天</h2><p><img src=\"/img/Feb25th.jpg\" alt=\"收拾好的小桌子\"></p>\n<p><strong>坚持</strong><br>坚持晚上23点之前睡觉<br>坚持晚上规律洗漱<br>坚持练习吉他<br>坚持学习C++(STL)</p>\n<p><strong>改进</strong><br>改进莫名感到自卑的内心想法: </p>\n<blockquote>\n<p>想要放松下就放松下<br>方向明确，在做该做的事情，就没有啥好自卑的<br>各个人的方向不一样。<br>坚持做自己要做的事情，慢慢地改进生活。</p>\n</blockquote>\n<p>优化了找人提问的步骤：优先使用AI找寻问题的答案。\t</p>\n<p><strong>开始</strong><br>开始即时查看微Q信息<br>开始筹备预习明天课程<br>开始积极社交<br>开始学习PS</p>\n<p><strong>结束</strong><br>结束在家模式<br>结束即时的不开心</p>\n<h2 id=\"二月二十六日-Well-Assembled-Day\"><a href=\"#二月二十六日-Well-Assembled-Day\" class=\"headerlink\" title=\"二月二十六日 Well-Assembled Day\"></a>二月二十六日 Well-Assembled Day</h2><p><img src=\"/img/Feb26th.jpg\" alt=\"温暖的茶水\"></p>\n<p><strong>坚持</strong><br>坚持预习课程<br>坚持练习吉他<br>坚持规律洗漱<br>坚持学习Ps</p>\n<p><strong>改进</strong><br>根据老师的上课建议改进了英语学习方案：<br>加入听写，写作方式。</p>\n<p><strong>开始</strong><br>开始以中国大学MOOC为平台学习电子技术<br>开始听写单词并预习英语。<br>开始规划当下课程预习方案。</p>\n<p><strong>结束</strong><br>结束23点睡觉: 玩原神与讨论游戏，明日改回来</p>\n<h2 id=\"二月二十七日-忙碌的一天\"><a href=\"#二月二十七日-忙碌的一天\" class=\"headerlink\" title=\"二月二十七日 忙碌的一天\"></a>二月二十七日 忙碌的一天</h2><p><img src=\"/img/Feb27th.jpg\" alt=\"体育课随手拍\"></p>\n<p><strong>坚持</strong><br>坚持学习Ps<br>坚持练习吉他<br>坚持预习课程<br>坚持规律洗漱<br>坚持23点睡觉<br>坚持每日早晨英语学习</p>\n<p><strong>开始</strong><br>开始跑步:今日约2.4Km，13000步数，很棒。<br>开始规划决策树。</p>\n<p><strong>结束</strong><br>结束编程学习</p>\n<h2 id=\"二月二十八日-差点就输过了情绪\"><a href=\"#二月二十八日-差点就输过了情绪\" class=\"headerlink\" title=\"二月二十八日 差点就输过了情绪\"></a>二月二十八日 差点就输过了情绪</h2><p><img src=\"/img/Feb28th.jpg\" alt=\"早晨三个闹钟没给我叫起来，也可能是没响\"></p>\n<p><strong>坚持</strong><br>坚持23点之前睡觉，并规律洗漱。<br>坚持练习吉他：目前想要尝试新曲子。<br>坚持预习明日课程，复习知识，画思维导图。<br>坚持学习PS</p>\n<p><strong>改进</strong><br>改进之前对于安全边际给予太少的缺点：<br>今天因为晚起很多事没有很早做，一些事没做，导致情绪有波动，很多事心态上有阻碍。<br>无需绷紧脑弦，只是最近确实事情有点多，做自己能做的就好。</p>\n<p><strong>开始</strong><br>开始写入党申请书<br>开始有意向去主动社交<br>开始感到焦虑：竞争与对比焦虑、</p>\n<h2 id=\"二月二十九日-写了一天入党申请书\"><a href=\"#二月二十九日-写了一天入党申请书\" class=\"headerlink\" title=\"二月二十九日 写了一天入党申请书\"></a>二月二十九日 写了一天入党申请书</h2><p><img src=\"/img/Feb29th.png\" alt=\"累。\"></p>\n<p><strong>坚持</strong><br>坚持练习吉他<br>坚持23点之前睡觉，规律洗漱</p>\n<p><strong>改进</strong><br>改进了最近的比较想法:<br>脑子里不需要想那么多，我们的方向真的不一样。</p>\n<p><strong>开始</strong><br>开始主动社交</p>\n<p><strong>结束</strong><br>结束写入党申请书<br>结束预习课程<br>结束PS学习<br>（事情多尽量周末或者明天开始拾起来）</p>\n<h2 id=\"三月一日-调整好了心态，一身轻松\"><a href=\"#三月一日-调整好了心态，一身轻松\" class=\"headerlink\" title=\"三月一日 调整好了心态，一身轻松\"></a>三月一日 调整好了心态，一身轻松</h2><p><img src=\"/img/Mar2nd.png\" alt=\"为&quot;挑战杯&quot;做的游戏场景\"></p>\n<p><strong>坚持</strong><br>坚持进行课程预习复习<br>坚持规律洗漱<br>坚持练习吉他</p>\n<p><strong>改进</strong><br>再次改进最近的心态问题：<br>从自己的想法后面推演心理，<br>然后使用事实与观点的观点来判断这件事该不该这样想</p>\n<p><strong>开始</strong><br>开始主动社交<br>开始尝试新曲子<br>开始准备“挑战杯”比赛</p>\n<p><strong>结束</strong><br>结束23点睡觉：<br>原因今晚准备挑战杯累 - 玩星穹 - 整理物理课程内容<br>明日改进一下。</p>\n<h2 id=\"三月二日-做了不少事情，很累也很充实\"><a href=\"#三月二日-做了不少事情，很累也很充实\" class=\"headerlink\" title=\"三月二日 做了不少事情，很累也很充实\"></a>三月二日 做了不少事情，很累也很充实</h2><p><img src=\"/img/Mar2nd1.png\" alt=\"挑战杯PPT的封面\"></p>\n<p><strong>坚持</strong><br>坚持规律洗漱<br>坚持练习吉他<br>坚持推进挑战杯的进程</p>\n<p><strong>开始</strong><br>开始去澡堂洗澡<br>开始体会协作的乐趣<br>开始画像素画</p>\n<p><img src=\"/img/Mar2nd2.png\" alt=\"可莉可爱捏\"></p>\n<p>开始设计PPT封面<br>开始P图</p>\n<p><strong>结束</strong><br>结束对于英语的早晨学习：明天的重点要移到作业以及学习上</p>\n<h2 id=\"三月三日-化急为友\"><a href=\"#三月三日-化急为友\" class=\"headerlink\" title=\"三月三日 化急为友\"></a>三月三日 化急为友</h2><p>今天没有配图，因为是非常充实与繁忙的一天。</p>\n<p><strong>坚持</strong><br>坚持练习吉他<br>坚持规律洗漱<br>坚持23:30之前睡觉<br>坚持推进挑战杯：PPT设计、文本写作</p>\n<p><strong>改进</strong><br>改进了自己对于C++做题的态度：<br>因为以后的就业需要使用相关算法<br>以及对C++的理解也能够帮助对于C#的学习<br>最后，这是第一次突破一件事情，可以作为未来自学的参考</p>\n<p><strong>开始</strong><br>开始做C语言题<br>开始预习单词以及做U校园题目</p>\n<p><strong>结束</strong><br>制定完毕了“闲时学习指南”的参考框架。</p>\n<h2 id=\"三月四日-有情绪波动，有点大，但用学习度过了。\"><a href=\"#三月四日-有情绪波动，有点大，但用学习度过了。\" class=\"headerlink\" title=\"三月四日 有情绪波动，有点大，但用学习度过了。\"></a>三月四日 有情绪波动，有点大，但用学习度过了。</h2><p><img src=\"/img/Mar4th.png\" alt=\"小游戏快做完了\"></p>\n<p><strong>坚持</strong><br>坚持规律洗漱<br>坚持推进挑战杯<br>坚持复习与预习课程</p>\n<p><strong>结束</strong><br>结束练习吉他<br>结束学习C语言<br>结束23:30之前睡觉</p>\n<h2 id=\"三月五日-彻底摆脱负担。\"><a href=\"#三月五日-彻底摆脱负担。\" class=\"headerlink\" title=\"三月五日 彻底摆脱负担。\"></a>三月五日 彻底摆脱负担。</h2><p><img src=\"/img/Mar5th.png\" alt=\"Mile Stone.\"></p>\n<p><strong>坚持</strong><br>坚持规律洗漱<br>坚持尽早睡觉<br>坚持推进挑战杯课程<br>坚持预习课程</p>\n<p><strong>改进</strong><br>改进过去会因为一些原因心态不平稳的情况：<br>别人的看法咋样我不管，我要过好自己的生活。</p>\n<p><strong>开始</strong><br>开始跑步 - 步数12000步</p>\n<h2 id=\"三月六日-挺愉快的一天\"><a href=\"#三月六日-挺愉快的一天\" class=\"headerlink\" title=\"三月六日 挺愉快的一天\"></a>三月六日 挺愉快的一天</h2><p><img src=\"/img/Mar6th.jpg\" alt=\"在微信读书上发现了这本书，真的好有意思\"></p>\n<p><strong>坚持</strong><br>坚持尽早睡觉<br>坚持规律洗漱<br>坚持预习课程</p>\n<p><strong>改进</strong><br>学会维持专注状态，不会因为自我觉察而打破。</p>\n<p><strong>开始</strong><br>开始阅读书籍<br>开始练习编程题<br>开始练习吉他</p>\n<h2 id=\"三月七日-有时不知道做啥，有时就突然知道了\"><a href=\"#三月七日-有时不知道做啥，有时就突然知道了\" class=\"headerlink\" title=\"三月七日 有时不知道做啥，有时就突然知道了\"></a>三月七日 有时不知道做啥，有时就突然知道了</h2><p><img src=\"/img/Mar7th.jpg\" alt=\"折花，一个小时，没折出来\"></p>\n<p><strong>坚持</strong><br>坚持23:30之前睡觉<br>坚持练习吉他<br>坚持学习编程<br>坚持学习课程</p>\n<p><strong>改进</strong><br>改进了最近无所事事的心态，开始做自己方向上的事情。</p>\n<p><strong>开始</strong><br>开始玩折纸。<br>开始学习算法</p>\n<p><strong>结束</strong><br>结束意淫</p>\n<h2 id=\"三月八日-有点难受，做着自己喜欢的事情，总体称之为幸福。\"><a href=\"#三月八日-有点难受，做着自己喜欢的事情，总体称之为幸福。\" class=\"headerlink\" title=\"三月八日 - 有点难受，做着自己喜欢的事情，总体称之为幸福。\"></a>三月八日 - 有点难受，做着自己喜欢的事情，总体称之为幸福。</h2><p><img src=\"/img/Mar8th.jpg\" alt=\"与周围格格不入的白玫瑰花。\"></p>\n<p>C++与学算法之间的抉择 – 明早写文预告。</p>\n<p><strong>坚持</strong><br>坚持23:30之前睡觉<br>坚持规律洗漱<br>坚持练习吉他<br>坚持学习编程题目<br>坚持预习课程<br>坚持读有趣的书</p>\n<p><strong>改进</strong><br>改进了这几天安排不好自己的事情的缺点，<br>开始使用思维导图列出选项。</p>\n<p>改进老是熬夜的缺点：开22:00的闹钟</p>\n<p><strong>开始</strong><br>开始体素建模，参考滚动的天空。</p>\n<p><img src=\"/img/Mar8th2.png\" alt=\"薯条\"></p>\n<p><img src=\"/img/Mar8th.png\" alt=\"冰激凌球投掷机\"></p>\n<h2 id=\"三月九日-三月十日-遇到了一些有趣的人，做了一些有趣的事。\"><a href=\"#三月九日-三月十日-遇到了一些有趣的人，做了一些有趣的事。\" class=\"headerlink\" title=\"三月九日 - 三月十日 遇到了一些有趣的人，做了一些有趣的事。\"></a>三月九日 - 三月十日 遇到了一些有趣的人，做了一些有趣的事。</h2><p><img src=\"/img/Mar10th.jpg\" alt=\"昨晚在干的事情，持续四次，每次一小时，睡不着。\"></p>\n<p><strong>坚持</strong><br>坚持练习吉他<br>坚持3D建模<br>坚持学习课程<br>坚持规律作息（除九日这一天）</p>\n<p><strong>改进</strong><br>心态开始好起来，改进了原来害怕交往的态度。<br>大胆起来，敢喝酒了。</p>\n<p><strong>结束</strong><br>结束肝原神与星穹，开始怀旧。<br>结束学C语言编程(调整心态ing)</p>\n<p><img src=\"/img/Mar9th.jpg\" alt=\"参与了一个party, 昨晚的奥尔良鸡腿\"></p>\n<h2 id=\"三月十日-A-busy-day-with-heavy-heart\"><a href=\"#三月十日-A-busy-day-with-heavy-heart\" class=\"headerlink\" title=\"三月十日 A busy day with heavy heart\"></a>三月十日 A busy day with heavy heart</h2><p>在学习，暂时没图喽。</p>\n<p><strong>坚持</strong><br>坚持练习吉他<br>坚持学习课程<br>坚持规律作息与喝牛奶</p>\n<p><strong>改进</strong><br>改进心情，这几天因为想谈恋爱所以心里老是胡思乱想（你不会想知道我在想什么的。）<br>心里想法一直影响我的心态，上课也上不安稳。<br>上了教学楼的阳台开导自己，终于把心情回回来了。</p>\n<p><strong>开始</strong></p>\n<p>开始阅读《被讨厌的勇气》，<br>《云边有个小卖部》还会看，但是有点刀，也快看完了，不太舍得看了。</p>\n<p>开始尝试22:30之前睡</p>\n<p><strong>结束</strong><br>结束建模：做的事情是浮动的，这周课很多，好好安排。</p>\n<h2 id=\"三月十一日-Things’re-getting-harder-and-harder\"><a href=\"#三月十一日-Things’re-getting-harder-and-harder\" class=\"headerlink\" title=\"三月十一日 Things’re getting harder and harder\"></a>三月十一日 Things’re getting harder and harder</h2><p>在学习，暂时没图喽。</p>\n<p><strong>坚持</strong><br>坚持练习吉他<br>坚持预习课程<br>坚持规律作息与喝牛奶<br>坚持读书与调整心态</p>\n<p><strong>改进</strong><br>改进心情，在《被讨厌的勇气》中获得了很多的启发<br>情绪是自己捏造出来的。<br>愤怒是交流的一种工具，你可以使用也可以不用。<br>避免幻想，想想怎么用好自己已经有的。<br>摆脱竞争，避免权利之战，把所有人看成伙伴，就可能摆脱人际交往的烦恼。<br>一切烦恼都来自人际交往。</p>\n<p><strong>开始</strong><br>尝试玩魔方<br>开始主动社交</p>\n<h2 id=\"三月十二日-The-last-tiring-day\"><a href=\"#三月十二日-The-last-tiring-day\" class=\"headerlink\" title=\"三月十二日 The last tiring day.\"></a>三月十二日 The last tiring day.</h2><p><strong>坚持</strong><br>坚持预习课程<br>坚持喝牛奶<br>坚持读书以及调节心态</p>\n<p><strong>改进</strong><br>改进上课状态：不再紧绷状态，减轻竞争压力。<br>改进心态：共同体意识以及划分课题。</p>\n<p><strong>开始</strong><br>开始主动交往<br>开始学习编程题</p>\n<p><strong>结束</strong><br>结束练习吉他。</p>\n<blockquote>\n<p>读书：</p>\n</blockquote>\n<ol>\n<li><p>横向关系与向别人学习有关系吗？<br>我向别人学习是我的课题，别人教我是他的课题。<br>我们都有自己的选择，都有权利决定这个事件要不要发生。<br>向他人学习不代表一种纵向。</p>\n</li>\n<li><p>如何做出贡献？</p>\n</li>\n<li><p>如何面对冲突？</p>\n</li>\n<li><p>如何面对主观孤独感</p>\n<ol>\n<li>活出自我的代价 - 敢于被讨厌、被评价。</li>\n<li>信赖、共同体意识与相处和睦之间没有关系。</li>\n<li>重要的是，你怎么看待与解释自己现在的状态。</li>\n</ol>\n</li>\n<li><p>认为不喜欢一个人，你觉得这个人是错的吗？<br> 一个人首先做事没有纯粹做坏事的。<br> 不喜欢的理由 - 对方目的。<br> 不开心是因为这个人 - 这个想法是在推脱责任。<br> 没有人需要按照你的期待生活。<br> 这种想法不是在挑起权力之争，你与他都是平等的横向关系。</p>\n<p> 讨厌的感觉是一种借口。<br> 认为某些东西没有了、消失了、改变了，事情就会全盘转变。<br> 没有活在当下，想想要达到事情转变的效果需要怎么办。</p>\n</li>\n<li><p>如何谈论平等？<br>平等的选择权利，平等地看待自己现在状态，平等地按照自己的想法生活。</p>\n</li>\n</ol>\n<h2 id=\"三月十二日-得到启发，开始应用与实践。\"><a href=\"#三月十二日-得到启发，开始应用与实践。\" class=\"headerlink\" title=\"三月十二日 得到启发，开始应用与实践。\"></a>三月十二日 得到启发，开始应用与实践。</h2><p><strong>坚持</strong><br>坚持学习课程<br>坚持阅读</p>\n<p><strong>改进</strong><br>改进了自己看待事物的方式，注重当下而不是其他时候，注重当下的动作而不是以后、过去怎么样。</p>\n<p><strong>开始</strong><br>开始玩Terraria灾厄模组。</p>\n<h2 id=\"三月十七日-Happily-doing-myself\"><a href=\"#三月十七日-Happily-doing-myself\" class=\"headerlink\" title=\"三月十七日 Happily doing myself\"></a>三月十七日 Happily doing myself</h2><p><img src=\"/img/Mar172.png\" alt=\"在一首歌的歌词里看到的，很有感慨\"></p>\n<p><strong>坚持</strong><br>坚持规律作息与洗漱<br>坚持练习吉他<br>坚持学习编程<br>坚持预习课程<br>坚持读书与调整心态</p>\n<p><strong>改进</strong><br>主动社交<br>强化了自己梦想的决心</p>\n<p><strong>开始</strong><br>开始学习PS</p>\n<p><img src=\"/img/Mar17th.png\" alt=\"做的霓虹灯，但是没到想的效果\"></p>\n<p>开始早睡早起</p>\n<h2 id=\"三月十八日-有点小失落，仍然胡思乱想\"><a href=\"#三月十八日-有点小失落，仍然胡思乱想\" class=\"headerlink\" title=\"三月十八日 有点小失落，仍然胡思乱想\"></a>三月十八日 有点小失落，仍然胡思乱想</h2><p><img src=\"/img/Mar18th.jpg\" alt=\"感冒喽，999\"></p>\n<p><strong>坚持</strong><br>坚持早睡规律作息<br>坚持学习课程<br>坚持预习<br>坚持读书与调整心态</p>\n<p><strong>结束</strong><br>结束学习编程<br>结束练习吉他<br>结束学习PS</p>\n<h2 id=\"三月十九日-进大学以来第一次发烧\"><a href=\"#三月十九日-进大学以来第一次发烧\" class=\"headerlink\" title=\"三月十九日 进大学以来第一次发烧\"></a>三月十九日 进大学以来第一次发烧</h2><p><img src=\"/img/Mar19th.jpg\" alt=\"处方全是没见过的药\"></p>\n<p><strong>坚持</strong><br>坚持早睡早起<br>坚持课后复盘<br>坚持读书与调整心态</p>\n<p><strong>结束</strong><br>结束上形势与政策课<br>结束预习课程：今晚的感冒症状严重，很难受。</p>\n<h2 id=\"三月二十日-总归过去了这一天，以后就好多了\"><a href=\"#三月二十日-总归过去了这一天，以后就好多了\" class=\"headerlink\" title=\"三月二十日 总归过去了这一天，以后就好多了\"></a>三月二十日 总归过去了这一天，以后就好多了</h2><p><strong>坚持</strong><br>坚持实践阿德勒理论与调整心态<br>坚持课后复盘<br>坚持预习课程<br>坚持读书</p>\n<p><strong>改进</strong><br>改变了对世界的看法：<br>世界对我是安全的，我要无条件地信赖他人，无论他人配不配合</p>\n<h2 id=\"三月二十一日-尝试活出自我的一天\"><a href=\"#三月二十一日-尝试活出自我的一天\" class=\"headerlink\" title=\"三月二十一日 尝试活出自我的一天\"></a>三月二十一日 尝试活出自我的一天</h2><p><strong>坚持</strong><br>坚持读书与调整心态<br>坚持学习课程</p>\n<p><strong>开始</strong><br>开始早晨听写英语<br>开始练习吉他<br>开始学习编程算法</p>\n<p><strong>结束</strong><br>结束读《获得幸福的勇气》</p>\n<h2 id=\"三月二十二日-事多，但总体放松，能活出自己，能放开\"><a href=\"#三月二十二日-事多，但总体放松，能活出自己，能放开\" class=\"headerlink\" title=\"三月二十二日 事多，但总体放松，能活出自己，能放开\"></a>三月二十二日 事多，但总体放松，能活出自己，能放开</h2><p><img src=\"/img/Mar21st.jpg\" alt=\"今日偶然想到，特别好听\"></p>\n<p><strong>坚持</strong><br>坚持读书与调整心态<br>坚持预习与学习课程</p>\n<p><strong>改进</strong><br>意识到自己很多动作是应激反应，开始调整提醒。</p>\n<p><strong>开始</strong><br>开始读《你要像鸟飞往你的山》</p>\n<p><strong>结束</strong><br>结束学习算法<br>结束练习吉他</p>\n<h2 id=\"三月二十六日-生日快乐，亲爱的我\"><a href=\"#三月二十六日-生日快乐，亲爱的我\" class=\"headerlink\" title=\"三月二十六日 生日快乐，亲爱的我\"></a>三月二十六日 生日快乐，亲爱的我</h2><blockquote>\n<p>手机停机了，图片传不过来，没拍蛋糕的照片</p>\n</blockquote>\n<p><strong>坚持</strong><br>坚持读书与调整心态<br>坚持练习吉他<br>坚持学习课程<br>坚持复盘</p>\n<p><strong>改进</strong><br>调节自己对于应激反应的认识，<br>开始从自己身体的微反应来认识自己</p>\n<p><strong>开始</strong><br>开始尽力按照自己意愿生活<br>开始理解自己，开始接受自己，开始解决问题。</p>"},{"title":"关于我的抉择：C++与算法或者数据结构","date":"2024-03-09T00:54:10.000Z","_content":"\n看过之前这个寒假的博客的应该知道了，\n我在这个寒假里学了点算法，到现在已经快忘完了（只有插入排序还能想起来一点）。\n我十分不建议先进行算法的学习，当然对于不同的人有不同的看法，这是我的视角，通过实践的视角。\n<!--more-->\n\n## 算法与数据结构为你提供了什么？\n\n我们学习计算机的可能自大一就已经知道了算法与数据结构对于解题以及之后的工作应用都挺重要的。\n\n算法，也就是通常意义上人们对于一个问题的解法，因为一种方法能够解决通常来说难以想出思路的问题，或者它的效率特别的高，所以我们使用算法——我们为的是解决实际问题。实际上，我们平时解决问题的时候，也是在设计算法。我想要输出一行“Hello World”，我知道printf（cin）之后我就使用这个函数来达到了要求，这就是一种算法。数据结构，就是存放数据的结构。它与算法相辅相成，有时算法需要特定的数据结构来实现，有时特定的数据结构便于问题的解决，最终的优势就是能够便利地解决问题。并且，很多平台都针对不同的算法给出了题目的分类，如果你学习了某一个算法，你可能当天就可以将它运用到实操之中，加深印象，而且学习算法能够让你的学习有针对性，还时不时能够让你解出高难度的题，这种学习还是有成就感的。\n\n## 为啥我不建议？\n\n说实话，学习算法的这些日子里，尽管有上文所说的那些优点，做编程题做得仍然是挺憋屈的，为啥呢？\n\n>首先，你学一种算法，只能解决一种问题，你没有办法在洛谷上随机一道题目。\n>\n>第二，如果你理解不深刻，运用的就十分拙劣。依靠固有的算法写法，到头来也就只是记下来了写法而已，而且十分容易忘记。\n>然后是理解，深刻的算法有如分治法，涉及到了渐进数学中的知识，描述递归方程的式子也挺复杂的，我们没接触过，理解起来也有困难。\n>而且所谓的分治法只是一种思维结构，你靠着这个还得自己进行二次设计，最后的算法还得自己想。\n>\n>第三，并不是所有算法都可以当天实现，除非你的学习资料为你写好了，一些算法甚至无法用程序语言写，一些算法需要你去学习数据结构才能写。\n\n归根到底，算法是死的，实际问题是活泛的，算法是很多零碎的知识，像是可以适用于哪些题目，像是实现方法，都是拼记忆力。\n\n## 为啥要学习C++\n\n说实话，我刚开始学习C++的时候，也没觉出来C++与C有啥不同，除了面向对象之外也就是把C语言的那些东西用其他的方式又写了一遍嘛。\n而且专业名词还要多，啥内联函数，啥引用类型，感觉不太好学的样子。\n\n但是抱着两条路一定得走一条的想法，我就看着网上的C语言教程，一啃就是半个月。\n到头来，我基本学习完了C++中的基础概念，然后按照学长的建议，开始学习C++ STL，其实建议很大一部分也是因为这个。\n就是因为这半个月以来的努力，我得以开始学习STL，而这已经为我现在的编程学习提供了十足的便利。\n\nSTL为我提供了什么呢？\n\n>第一，数据结构，你可能知道一道题需要啥数据结构。比如说去重，你可以使用集合，但是自己实现确实不太容易。这时直接使用set即可。\n（很多数据结构确实不好实现，如树、映射，表示也挺繁琐）\n>第二，简便操作，一些数据结构可能原来就有，比如数组、比如字符串，但是STL中的平替物比原来的好用太多，而且用来操作的函数（sort排序、reverse倒序、find查找、count数元素出现几次）不需要自己实现，十分便利，省去了解题时间，而且也减少了错误率，另外遍历在C++14中有很简便的写法（如下）。\n\n```C++\n\t//设想你有一个数组，或者字符串等等，名字叫做a\n\tfor(auto &ele : a)\n\t\tcout << ele << endl;\n\t//ele是你对输出元素的命名，不重要\n```\n\n另外，C++中新增的数学函数以及语言特性（比如说cin不必管缓冲区的事情，cout不需要有格式化符）都提供了很大的便利，\n使用这种语言我认为是更适合于现在即将参加蓝桥杯的局势的。\n\n最后，选择这件事是看自己的感受的，不是盲从其他人，希望看过这篇文章的你能够根据自己的情况选择。\n提醒你一下，C++虽然明面上和C差不多，但是还是有很大的区别的，学完类、学完重载你就知道了。\n\n> End...\n\n\n\n\n\n","source":"_posts/关于我的抉择：C-与算法或者数据结构.md","raw":"---\ntitle: 关于我的抉择：C++与算法或者数据结构\ndate: 2024-03-09 08:54:10\ntags: C++学习\n---\n\n看过之前这个寒假的博客的应该知道了，\n我在这个寒假里学了点算法，到现在已经快忘完了（只有插入排序还能想起来一点）。\n我十分不建议先进行算法的学习，当然对于不同的人有不同的看法，这是我的视角，通过实践的视角。\n<!--more-->\n\n## 算法与数据结构为你提供了什么？\n\n我们学习计算机的可能自大一就已经知道了算法与数据结构对于解题以及之后的工作应用都挺重要的。\n\n算法，也就是通常意义上人们对于一个问题的解法，因为一种方法能够解决通常来说难以想出思路的问题，或者它的效率特别的高，所以我们使用算法——我们为的是解决实际问题。实际上，我们平时解决问题的时候，也是在设计算法。我想要输出一行“Hello World”，我知道printf（cin）之后我就使用这个函数来达到了要求，这就是一种算法。数据结构，就是存放数据的结构。它与算法相辅相成，有时算法需要特定的数据结构来实现，有时特定的数据结构便于问题的解决，最终的优势就是能够便利地解决问题。并且，很多平台都针对不同的算法给出了题目的分类，如果你学习了某一个算法，你可能当天就可以将它运用到实操之中，加深印象，而且学习算法能够让你的学习有针对性，还时不时能够让你解出高难度的题，这种学习还是有成就感的。\n\n## 为啥我不建议？\n\n说实话，学习算法的这些日子里，尽管有上文所说的那些优点，做编程题做得仍然是挺憋屈的，为啥呢？\n\n>首先，你学一种算法，只能解决一种问题，你没有办法在洛谷上随机一道题目。\n>\n>第二，如果你理解不深刻，运用的就十分拙劣。依靠固有的算法写法，到头来也就只是记下来了写法而已，而且十分容易忘记。\n>然后是理解，深刻的算法有如分治法，涉及到了渐进数学中的知识，描述递归方程的式子也挺复杂的，我们没接触过，理解起来也有困难。\n>而且所谓的分治法只是一种思维结构，你靠着这个还得自己进行二次设计，最后的算法还得自己想。\n>\n>第三，并不是所有算法都可以当天实现，除非你的学习资料为你写好了，一些算法甚至无法用程序语言写，一些算法需要你去学习数据结构才能写。\n\n归根到底，算法是死的，实际问题是活泛的，算法是很多零碎的知识，像是可以适用于哪些题目，像是实现方法，都是拼记忆力。\n\n## 为啥要学习C++\n\n说实话，我刚开始学习C++的时候，也没觉出来C++与C有啥不同，除了面向对象之外也就是把C语言的那些东西用其他的方式又写了一遍嘛。\n而且专业名词还要多，啥内联函数，啥引用类型，感觉不太好学的样子。\n\n但是抱着两条路一定得走一条的想法，我就看着网上的C语言教程，一啃就是半个月。\n到头来，我基本学习完了C++中的基础概念，然后按照学长的建议，开始学习C++ STL，其实建议很大一部分也是因为这个。\n就是因为这半个月以来的努力，我得以开始学习STL，而这已经为我现在的编程学习提供了十足的便利。\n\nSTL为我提供了什么呢？\n\n>第一，数据结构，你可能知道一道题需要啥数据结构。比如说去重，你可以使用集合，但是自己实现确实不太容易。这时直接使用set即可。\n（很多数据结构确实不好实现，如树、映射，表示也挺繁琐）\n>第二，简便操作，一些数据结构可能原来就有，比如数组、比如字符串，但是STL中的平替物比原来的好用太多，而且用来操作的函数（sort排序、reverse倒序、find查找、count数元素出现几次）不需要自己实现，十分便利，省去了解题时间，而且也减少了错误率，另外遍历在C++14中有很简便的写法（如下）。\n\n```C++\n\t//设想你有一个数组，或者字符串等等，名字叫做a\n\tfor(auto &ele : a)\n\t\tcout << ele << endl;\n\t//ele是你对输出元素的命名，不重要\n```\n\n另外，C++中新增的数学函数以及语言特性（比如说cin不必管缓冲区的事情，cout不需要有格式化符）都提供了很大的便利，\n使用这种语言我认为是更适合于现在即将参加蓝桥杯的局势的。\n\n最后，选择这件事是看自己的感受的，不是盲从其他人，希望看过这篇文章的你能够根据自己的情况选择。\n提醒你一下，C++虽然明面上和C差不多，但是还是有很大的区别的，学完类、学完重载你就知道了。\n\n> End...\n\n\n\n\n\n","slug":"关于我的抉择：C-与算法或者数据结构","published":1,"updated":"2024-03-09T00:57:27.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nxx000kzkuehiexfpso","content":"<p>看过之前这个寒假的博客的应该知道了，<br>我在这个寒假里学了点算法，到现在已经快忘完了（只有插入排序还能想起来一点）。<br>我十分不建议先进行算法的学习，当然对于不同的人有不同的看法，这是我的视角，通过实践的视角。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"算法与数据结构为你提供了什么？\"><a href=\"#算法与数据结构为你提供了什么？\" class=\"headerlink\" title=\"算法与数据结构为你提供了什么？\"></a>算法与数据结构为你提供了什么？</h2><p>我们学习计算机的可能自大一就已经知道了算法与数据结构对于解题以及之后的工作应用都挺重要的。</p>\n<p>算法，也就是通常意义上人们对于一个问题的解法，因为一种方法能够解决通常来说难以想出思路的问题，或者它的效率特别的高，所以我们使用算法——我们为的是解决实际问题。实际上，我们平时解决问题的时候，也是在设计算法。我想要输出一行“Hello World”，我知道printf（cin）之后我就使用这个函数来达到了要求，这就是一种算法。数据结构，就是存放数据的结构。它与算法相辅相成，有时算法需要特定的数据结构来实现，有时特定的数据结构便于问题的解决，最终的优势就是能够便利地解决问题。并且，很多平台都针对不同的算法给出了题目的分类，如果你学习了某一个算法，你可能当天就可以将它运用到实操之中，加深印象，而且学习算法能够让你的学习有针对性，还时不时能够让你解出高难度的题，这种学习还是有成就感的。</p>\n<h2 id=\"为啥我不建议？\"><a href=\"#为啥我不建议？\" class=\"headerlink\" title=\"为啥我不建议？\"></a>为啥我不建议？</h2><p>说实话，学习算法的这些日子里，尽管有上文所说的那些优点，做编程题做得仍然是挺憋屈的，为啥呢？</p>\n<blockquote>\n<p>首先，你学一种算法，只能解决一种问题，你没有办法在洛谷上随机一道题目。</p>\n<p>第二，如果你理解不深刻，运用的就十分拙劣。依靠固有的算法写法，到头来也就只是记下来了写法而已，而且十分容易忘记。<br>然后是理解，深刻的算法有如分治法，涉及到了渐进数学中的知识，描述递归方程的式子也挺复杂的，我们没接触过，理解起来也有困难。<br>而且所谓的分治法只是一种思维结构，你靠着这个还得自己进行二次设计，最后的算法还得自己想。</p>\n<p>第三，并不是所有算法都可以当天实现，除非你的学习资料为你写好了，一些算法甚至无法用程序语言写，一些算法需要你去学习数据结构才能写。</p>\n</blockquote>\n<p>归根到底，算法是死的，实际问题是活泛的，算法是很多零碎的知识，像是可以适用于哪些题目，像是实现方法，都是拼记忆力。</p>\n<h2 id=\"为啥要学习C\"><a href=\"#为啥要学习C\" class=\"headerlink\" title=\"为啥要学习C++\"></a>为啥要学习C++</h2><p>说实话，我刚开始学习C++的时候，也没觉出来C++与C有啥不同，除了面向对象之外也就是把C语言的那些东西用其他的方式又写了一遍嘛。<br>而且专业名词还要多，啥内联函数，啥引用类型，感觉不太好学的样子。</p>\n<p>但是抱着两条路一定得走一条的想法，我就看着网上的C语言教程，一啃就是半个月。<br>到头来，我基本学习完了C++中的基础概念，然后按照学长的建议，开始学习C++ STL，其实建议很大一部分也是因为这个。<br>就是因为这半个月以来的努力，我得以开始学习STL，而这已经为我现在的编程学习提供了十足的便利。</p>\n<p>STL为我提供了什么呢？</p>\n<blockquote>\n<p>第一，数据结构，你可能知道一道题需要啥数据结构。比如说去重，你可以使用集合，但是自己实现确实不太容易。这时直接使用set即可。<br>（很多数据结构确实不好实现，如树、映射，表示也挺繁琐）<br>第二，简便操作，一些数据结构可能原来就有，比如数组、比如字符串，但是STL中的平替物比原来的好用太多，而且用来操作的函数（sort排序、reverse倒序、find查找、count数元素出现几次）不需要自己实现，十分便利，省去了解题时间，而且也减少了错误率，另外遍历在C++14中有很简便的写法（如下）。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设想你有一个数组，或者字符串等等，名字叫做a</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;ele : a)</span><br><span class=\"line\">\tcout &lt;&lt; ele &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//ele是你对输出元素的命名，不重要</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，C++中新增的数学函数以及语言特性（比如说cin不必管缓冲区的事情，cout不需要有格式化符）都提供了很大的便利，<br>使用这种语言我认为是更适合于现在即将参加蓝桥杯的局势的。</p>\n<p>最后，选择这件事是看自己的感受的，不是盲从其他人，希望看过这篇文章的你能够根据自己的情况选择。<br>提醒你一下，C++虽然明面上和C差不多，但是还是有很大的区别的，学完类、学完重载你就知道了。</p>\n<blockquote>\n<p>End…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>看过之前这个寒假的博客的应该知道了，<br>我在这个寒假里学了点算法，到现在已经快忘完了（只有插入排序还能想起来一点）。<br>我十分不建议先进行算法的学习，当然对于不同的人有不同的看法，这是我的视角，通过实践的视角。</p>","more":"<h2 id=\"算法与数据结构为你提供了什么？\"><a href=\"#算法与数据结构为你提供了什么？\" class=\"headerlink\" title=\"算法与数据结构为你提供了什么？\"></a>算法与数据结构为你提供了什么？</h2><p>我们学习计算机的可能自大一就已经知道了算法与数据结构对于解题以及之后的工作应用都挺重要的。</p>\n<p>算法，也就是通常意义上人们对于一个问题的解法，因为一种方法能够解决通常来说难以想出思路的问题，或者它的效率特别的高，所以我们使用算法——我们为的是解决实际问题。实际上，我们平时解决问题的时候，也是在设计算法。我想要输出一行“Hello World”，我知道printf（cin）之后我就使用这个函数来达到了要求，这就是一种算法。数据结构，就是存放数据的结构。它与算法相辅相成，有时算法需要特定的数据结构来实现，有时特定的数据结构便于问题的解决，最终的优势就是能够便利地解决问题。并且，很多平台都针对不同的算法给出了题目的分类，如果你学习了某一个算法，你可能当天就可以将它运用到实操之中，加深印象，而且学习算法能够让你的学习有针对性，还时不时能够让你解出高难度的题，这种学习还是有成就感的。</p>\n<h2 id=\"为啥我不建议？\"><a href=\"#为啥我不建议？\" class=\"headerlink\" title=\"为啥我不建议？\"></a>为啥我不建议？</h2><p>说实话，学习算法的这些日子里，尽管有上文所说的那些优点，做编程题做得仍然是挺憋屈的，为啥呢？</p>\n<blockquote>\n<p>首先，你学一种算法，只能解决一种问题，你没有办法在洛谷上随机一道题目。</p>\n<p>第二，如果你理解不深刻，运用的就十分拙劣。依靠固有的算法写法，到头来也就只是记下来了写法而已，而且十分容易忘记。<br>然后是理解，深刻的算法有如分治法，涉及到了渐进数学中的知识，描述递归方程的式子也挺复杂的，我们没接触过，理解起来也有困难。<br>而且所谓的分治法只是一种思维结构，你靠着这个还得自己进行二次设计，最后的算法还得自己想。</p>\n<p>第三，并不是所有算法都可以当天实现，除非你的学习资料为你写好了，一些算法甚至无法用程序语言写，一些算法需要你去学习数据结构才能写。</p>\n</blockquote>\n<p>归根到底，算法是死的，实际问题是活泛的，算法是很多零碎的知识，像是可以适用于哪些题目，像是实现方法，都是拼记忆力。</p>\n<h2 id=\"为啥要学习C\"><a href=\"#为啥要学习C\" class=\"headerlink\" title=\"为啥要学习C++\"></a>为啥要学习C++</h2><p>说实话，我刚开始学习C++的时候，也没觉出来C++与C有啥不同，除了面向对象之外也就是把C语言的那些东西用其他的方式又写了一遍嘛。<br>而且专业名词还要多，啥内联函数，啥引用类型，感觉不太好学的样子。</p>\n<p>但是抱着两条路一定得走一条的想法，我就看着网上的C语言教程，一啃就是半个月。<br>到头来，我基本学习完了C++中的基础概念，然后按照学长的建议，开始学习C++ STL，其实建议很大一部分也是因为这个。<br>就是因为这半个月以来的努力，我得以开始学习STL，而这已经为我现在的编程学习提供了十足的便利。</p>\n<p>STL为我提供了什么呢？</p>\n<blockquote>\n<p>第一，数据结构，你可能知道一道题需要啥数据结构。比如说去重，你可以使用集合，但是自己实现确实不太容易。这时直接使用set即可。<br>（很多数据结构确实不好实现，如树、映射，表示也挺繁琐）<br>第二，简便操作，一些数据结构可能原来就有，比如数组、比如字符串，但是STL中的平替物比原来的好用太多，而且用来操作的函数（sort排序、reverse倒序、find查找、count数元素出现几次）不需要自己实现，十分便利，省去了解题时间，而且也减少了错误率，另外遍历在C++14中有很简便的写法（如下）。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设想你有一个数组，或者字符串等等，名字叫做a</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;ele : a)</span><br><span class=\"line\">\tcout &lt;&lt; ele &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//ele是你对输出元素的命名，不重要</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，C++中新增的数学函数以及语言特性（比如说cin不必管缓冲区的事情，cout不需要有格式化符）都提供了很大的便利，<br>使用这种语言我认为是更适合于现在即将参加蓝桥杯的局势的。</p>\n<p>最后，选择这件事是看自己的感受的，不是盲从其他人，希望看过这篇文章的你能够根据自己的情况选择。<br>提醒你一下，C++虽然明面上和C差不多，但是还是有很大的区别的，学完类、学完重载你就知道了。</p>\n<blockquote>\n<p>End…</p>\n</blockquote>"},{"title":"千奇百怪的字符串处理函数","date":"2023-11-20T01:46:11.000Z","_content":"最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题\n今天学习了一些关于字符串、输入输出函数的知识，\n以及整理了一下昨天晚上直播的重点内容 @21级学长zyb\n希望能够帮到大家\n<!--more-->\n\n## 千奇百怪的字符串处理函数\n\n>首先声明，此处使用的函数（如图），需要加入**string.h**标准库\n>加入方式如下\n\n```C\n#include <string.h>\n```\n\n![图片](/img/1.png)\n\n\t 参考来自菜鸟教程\n\t(https://www.runoob.com/cprogramming/c-strings.html)\n\n这是我们在平时做题时常用的几个函数，比较易懂。\n除此之外我还在string.h中为大家多找了几个关于**搜索匹配字符**的。\n是下面这两个\n\n![图片1](/img/2.png)\n![图片2](/img/3.png)\n（看起来可能参数与返回值都有点吓人，但也就那样。）\n\n\t 参考来自菜鸟教程\n\t (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n\n相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了\n要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：\n\n```C\n\t//定义方式\n\tchar 标识符[字符串长度];\n\t//标识符即为名字，字符串长度可以省略。\n\n\t//为字符串赋值的方式\n\tchar string[] = \"I'm a string!\";   //第一种方法\n\tchar string2[6] = \"Hello!\";        //第二种方法\n\t\n\tchar string3[10];                  //第三种方法\n\tgets(string3);\n\n\tint n;\n\tscanf(\"%d\",&n);                    //第四种，应该是最常用的一种方法\n\tchar string[1000];\n\tfor(int i = 0;i < n;i++)\n\t\tscanf(\"%c\",&string[i]);\n\n\t//sprintf(被写入字符串,\"写入字符串\"，格式化符列表)\n\t//括号的后半部分与printf类似，但是它不是为了输出的。\n\tint n;\n\tscanf(\"%d\",&n);\n\tsprintf(string1,\"%d\",n);\n\n\t//字符串输出的方式\n\tputs(string);\n\n\tfor(int i = 0;i < n;i++)\n\t\tputchar(string[i]);\n\t\t//此处n也可以不定义，在使用第一或者第二种方式时\n\t\t//可以使用strlen函数或者sizeof运算符 - 1来代替\n\t\t//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不\n\n\t\n```\n\n所谓的**字符串**，其实就是[由字符组成，以’ \\\\0‘为结束的一维数组]。\n’\\\\0'标志着字符串输出的结束，\\是**转义符号**，为了提示它不是数字0\n\n>注意，对于字符串的scanf都不需要加取地址符&。\n>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。\n>和字符串本身无关。\n\n上面的函数给出了几种给字符串赋值的方式，\n我觉得你们可能不太好理解的是以下内容：\n+ gets()与puts()函数的用法\n+ 1000是可以随机的吗\n+ strlen函数以及sizeof的用法\n\n这里简单一说\n1. gets()就是获取一段字符串，在括号中需要加入参数，\n\t参数为字符串（字符数组）\n\tputs是把字符串打印出来\n\t其实这两个相似于字符的getchar与putchar\n2. 1000看题目要求，看字符串的最大容量。\n3. strlen是返回字符串的长度，不包含结尾的\\\\0符号，\n\tsizeof运算符对于字符串来说，是返回包括\\\\0的长度。\n\t所以sizeof要减一。\n\n下面再说一下这些函数的效果。（看图也可。）\n\n> 1.strcpy(s1,s2);\n\ns1与s2是形式参数，代表两个字符串，\n通过这个函数我们能够覆盖式地把s2复制粘贴到s1上\n甚至长度不允许也没关系。\n\n关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。\n对于很多的函数是可以通过这种方式记忆的\n其实用多了就自然记住了。\n\n> 2.strcat(s1,s2);\n\ns1,s2作用不再赘述。\n把s2连接到s1的末尾，改变s1。\n可以通过输出看s1的变化，\n\n> 3.strlen(s1)\n> 返回s1的去掉结尾符号的长度，已经讲过。\n\n> 4.strcmp(s1,s2);\n> 从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。\n> 昨晚在直播中学长讲过了。\n> 大小与返回值的关系请见图。\n\n> 5.strpbrk(const char* str1, const char* str2);\n\n\t关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n\n分析第一个字符串的字符，与第二个字符串内的字符比对\n只要找出两个字符串都包含的字符就返回那个字符。\n\n\t很好理解。\n\t比如，\"AABB\"与\"BCDE\"，就会返回B。\n\n> 6.strspn(const char* str1, const char* str2);\n\n也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。\n返回那个字符的下标，注意不是字符。\n\n想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，\n比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。\n这在我刚开始学习C语言的时候就感觉到了。\nPython中的字符串处理有很多的内建函数，处理起来很方便。\n但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。\n所以学好字符串还是很有必要的。\n\n还有一个是 @空梦Kmar 的建议\n尽量使用C标准库函数，这样能够极大地优化程序的效率。\n详细的建议在他的博客里，第一条就是优先使用库函数。\n[关于C语言编码的一些建议 | 山岳库博 (kmar.top)](https://kmar.top/posts/51979312/)\n包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题\n还有用于交换数组排序的swap函数。\n所以学习C语言标准库而不是自己写还是很好的，而且很省事。\n\n\n","source":"_posts/千奇百怪的字符串处理函数.md","raw":"---\ntitle: 千奇百怪的字符串处理函数\ndate: 2023-11-20 09:46:11\ntags: C语言学习\n---\n最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题\n今天学习了一些关于字符串、输入输出函数的知识，\n以及整理了一下昨天晚上直播的重点内容 @21级学长zyb\n希望能够帮到大家\n<!--more-->\n\n## 千奇百怪的字符串处理函数\n\n>首先声明，此处使用的函数（如图），需要加入**string.h**标准库\n>加入方式如下\n\n```C\n#include <string.h>\n```\n\n![图片](/img/1.png)\n\n\t 参考来自菜鸟教程\n\t(https://www.runoob.com/cprogramming/c-strings.html)\n\n这是我们在平时做题时常用的几个函数，比较易懂。\n除此之外我还在string.h中为大家多找了几个关于**搜索匹配字符**的。\n是下面这两个\n\n![图片1](/img/2.png)\n![图片2](/img/3.png)\n（看起来可能参数与返回值都有点吓人，但也就那样。）\n\n\t 参考来自菜鸟教程\n\t (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n\n相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了\n要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：\n\n```C\n\t//定义方式\n\tchar 标识符[字符串长度];\n\t//标识符即为名字，字符串长度可以省略。\n\n\t//为字符串赋值的方式\n\tchar string[] = \"I'm a string!\";   //第一种方法\n\tchar string2[6] = \"Hello!\";        //第二种方法\n\t\n\tchar string3[10];                  //第三种方法\n\tgets(string3);\n\n\tint n;\n\tscanf(\"%d\",&n);                    //第四种，应该是最常用的一种方法\n\tchar string[1000];\n\tfor(int i = 0;i < n;i++)\n\t\tscanf(\"%c\",&string[i]);\n\n\t//sprintf(被写入字符串,\"写入字符串\"，格式化符列表)\n\t//括号的后半部分与printf类似，但是它不是为了输出的。\n\tint n;\n\tscanf(\"%d\",&n);\n\tsprintf(string1,\"%d\",n);\n\n\t//字符串输出的方式\n\tputs(string);\n\n\tfor(int i = 0;i < n;i++)\n\t\tputchar(string[i]);\n\t\t//此处n也可以不定义，在使用第一或者第二种方式时\n\t\t//可以使用strlen函数或者sizeof运算符 - 1来代替\n\t\t//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不\n\n\t\n```\n\n所谓的**字符串**，其实就是[由字符组成，以’ \\\\0‘为结束的一维数组]。\n’\\\\0'标志着字符串输出的结束，\\是**转义符号**，为了提示它不是数字0\n\n>注意，对于字符串的scanf都不需要加取地址符&。\n>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。\n>和字符串本身无关。\n\n上面的函数给出了几种给字符串赋值的方式，\n我觉得你们可能不太好理解的是以下内容：\n+ gets()与puts()函数的用法\n+ 1000是可以随机的吗\n+ strlen函数以及sizeof的用法\n\n这里简单一说\n1. gets()就是获取一段字符串，在括号中需要加入参数，\n\t参数为字符串（字符数组）\n\tputs是把字符串打印出来\n\t其实这两个相似于字符的getchar与putchar\n2. 1000看题目要求，看字符串的最大容量。\n3. strlen是返回字符串的长度，不包含结尾的\\\\0符号，\n\tsizeof运算符对于字符串来说，是返回包括\\\\0的长度。\n\t所以sizeof要减一。\n\n下面再说一下这些函数的效果。（看图也可。）\n\n> 1.strcpy(s1,s2);\n\ns1与s2是形式参数，代表两个字符串，\n通过这个函数我们能够覆盖式地把s2复制粘贴到s1上\n甚至长度不允许也没关系。\n\n关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。\n对于很多的函数是可以通过这种方式记忆的\n其实用多了就自然记住了。\n\n> 2.strcat(s1,s2);\n\ns1,s2作用不再赘述。\n把s2连接到s1的末尾，改变s1。\n可以通过输出看s1的变化，\n\n> 3.strlen(s1)\n> 返回s1的去掉结尾符号的长度，已经讲过。\n\n> 4.strcmp(s1,s2);\n> 从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。\n> 昨晚在直播中学长讲过了。\n> 大小与返回值的关系请见图。\n\n> 5.strpbrk(const char* str1, const char* str2);\n\n\t关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n\n分析第一个字符串的字符，与第二个字符串内的字符比对\n只要找出两个字符串都包含的字符就返回那个字符。\n\n\t很好理解。\n\t比如，\"AABB\"与\"BCDE\"，就会返回B。\n\n> 6.strspn(const char* str1, const char* str2);\n\n也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。\n返回那个字符的下标，注意不是字符。\n\n想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，\n比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。\n这在我刚开始学习C语言的时候就感觉到了。\nPython中的字符串处理有很多的内建函数，处理起来很方便。\n但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。\n所以学好字符串还是很有必要的。\n\n还有一个是 @空梦Kmar 的建议\n尽量使用C标准库函数，这样能够极大地优化程序的效率。\n详细的建议在他的博客里，第一条就是优先使用库函数。\n[关于C语言编码的一些建议 | 山岳库博 (kmar.top)](https://kmar.top/posts/51979312/)\n包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题\n还有用于交换数组排序的swap函数。\n所以学习C语言标准库而不是自己写还是很好的，而且很省事。\n\n\n","slug":"千奇百怪的字符串处理函数","published":1,"updated":"2023-11-21T00:49:22.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nxy000mzkue9dzzhlpf","content":"<p>最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题<br>今天学习了一些关于字符串、输入输出函数的知识，<br>以及整理了一下昨天晚上直播的重点内容 @21级学长zyb<br>希望能够帮到大家</p>\n<span id=\"more\"></span>\n\n<h2 id=\"千奇百怪的字符串处理函数\"><a href=\"#千奇百怪的字符串处理函数\" class=\"headerlink\" title=\"千奇百怪的字符串处理函数\"></a>千奇百怪的字符串处理函数</h2><blockquote>\n<p>首先声明，此处使用的函数（如图），需要加入<strong>string.h</strong>标准库<br>加入方式如下</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.png\" alt=\"图片\"></p>\n<pre><code> 参考来自菜鸟教程\n(https://www.runoob.com/cprogramming/c-strings.html)\n</code></pre>\n<p>这是我们在平时做题时常用的几个函数，比较易懂。<br>除此之外我还在string.h中为大家多找了几个关于<strong>搜索匹配字符</strong>的。<br>是下面这两个</p>\n<p><img src=\"/img/2.png\" alt=\"图片1\"><br><img src=\"/img/3.png\" alt=\"图片2\"><br>（看起来可能参数与返回值都有点吓人，但也就那样。）</p>\n<pre><code> 参考来自菜鸟教程\n (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n</code></pre>\n<p>相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了<br>要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> 标识符[字符串长度];</span><br><span class=\"line\"><span class=\"comment\">//标识符即为名字，字符串长度可以省略。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为字符串赋值的方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[] = <span class=\"string\">&quot;I&#x27;m a string!&quot;</span>;   <span class=\"comment\">//第一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> string2[<span class=\"number\">6</span>] = <span class=\"string\">&quot;Hello!&quot;</span>;        <span class=\"comment\">//第二种方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> string3[<span class=\"number\">10</span>];                  <span class=\"comment\">//第三种方法</span></span><br><span class=\"line\">gets(string3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);                    <span class=\"comment\">//第四种，应该是最常用的一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sprintf(被写入字符串,&quot;写入字符串&quot;，格式化符列表)</span></span><br><span class=\"line\"><span class=\"comment\">//括号的后半部分与printf类似，但是它不是为了输出的。</span></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(string1,<span class=\"string\">&quot;%d&quot;</span>,n);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串输出的方式</span></span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"built_in\">string</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\">\t<span class=\"comment\">//此处n也可以不定义，在使用第一或者第二种方式时</span></span><br><span class=\"line\">\t<span class=\"comment\">//可以使用strlen函数或者sizeof运算符 - 1来代替</span></span><br><span class=\"line\">\t<span class=\"comment\">//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所谓的<strong>字符串</strong>，其实就是[由字符组成，以’ \\0‘为结束的一维数组]。<br>’\\0’标志着字符串输出的结束，\\是<strong>转义符号</strong>，为了提示它不是数字0</p>\n<blockquote>\n<p>注意，对于字符串的scanf都不需要加取地址符&amp;。<br>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。<br>和字符串本身无关。</p>\n</blockquote>\n<p>上面的函数给出了几种给字符串赋值的方式，<br>我觉得你们可能不太好理解的是以下内容：</p>\n<ul>\n<li>gets()与puts()函数的用法</li>\n<li>1000是可以随机的吗</li>\n<li>strlen函数以及sizeof的用法</li>\n</ul>\n<p>这里简单一说</p>\n<ol>\n<li>gets()就是获取一段字符串，在括号中需要加入参数，<br> 参数为字符串（字符数组）<br> puts是把字符串打印出来<br> 其实这两个相似于字符的getchar与putchar</li>\n<li>1000看题目要求，看字符串的最大容量。</li>\n<li>strlen是返回字符串的长度，不包含结尾的\\0符号，<br> sizeof运算符对于字符串来说，是返回包括\\0的长度。<br> 所以sizeof要减一。</li>\n</ol>\n<p>下面再说一下这些函数的效果。（看图也可。）</p>\n<blockquote>\n<p>1.strcpy(s1,s2);</p>\n</blockquote>\n<p>s1与s2是形式参数，代表两个字符串，<br>通过这个函数我们能够覆盖式地把s2复制粘贴到s1上<br>甚至长度不允许也没关系。</p>\n<p>关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。<br>对于很多的函数是可以通过这种方式记忆的<br>其实用多了就自然记住了。</p>\n<blockquote>\n<p>2.strcat(s1,s2);</p>\n</blockquote>\n<p>s1,s2作用不再赘述。<br>把s2连接到s1的末尾，改变s1。<br>可以通过输出看s1的变化，</p>\n<blockquote>\n<p>3.strlen(s1)<br>返回s1的去掉结尾符号的长度，已经讲过。</p>\n</blockquote>\n<blockquote>\n<p>4.strcmp(s1,s2);<br>从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。<br>昨晚在直播中学长讲过了。<br>大小与返回值的关系请见图。</p>\n</blockquote>\n<blockquote>\n<p>5.strpbrk(const char* str1, const char* str2);</p>\n</blockquote>\n<pre><code>关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n</code></pre>\n<p>分析第一个字符串的字符，与第二个字符串内的字符比对<br>只要找出两个字符串都包含的字符就返回那个字符。</p>\n<pre><code>很好理解。\n比如，&quot;AABB&quot;与&quot;BCDE&quot;，就会返回B。\n</code></pre>\n<blockquote>\n<p>6.strspn(const char* str1, const char* str2);</p>\n</blockquote>\n<p>也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。<br>返回那个字符的下标，注意不是字符。</p>\n<p>想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，<br>比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。<br>这在我刚开始学习C语言的时候就感觉到了。<br>Python中的字符串处理有很多的内建函数，处理起来很方便。<br>但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。<br>所以学好字符串还是很有必要的。</p>\n<p>还有一个是 @空梦Kmar 的建议<br>尽量使用C标准库函数，这样能够极大地优化程序的效率。<br>详细的建议在他的博客里，第一条就是优先使用库函数。<br><a href=\"https://kmar.top/posts/51979312/\">关于C语言编码的一些建议 | 山岳库博 (kmar.top)</a><br>包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题<br>还有用于交换数组排序的swap函数。<br>所以学习C语言标准库而不是自己写还是很好的，而且很省事。</p>\n","site":{"data":{}},"excerpt":"<p>最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题<br>今天学习了一些关于字符串、输入输出函数的知识，<br>以及整理了一下昨天晚上直播的重点内容 @21级学长zyb<br>希望能够帮到大家</p>","more":"<h2 id=\"千奇百怪的字符串处理函数\"><a href=\"#千奇百怪的字符串处理函数\" class=\"headerlink\" title=\"千奇百怪的字符串处理函数\"></a>千奇百怪的字符串处理函数</h2><blockquote>\n<p>首先声明，此处使用的函数（如图），需要加入<strong>string.h</strong>标准库<br>加入方式如下</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.png\" alt=\"图片\"></p>\n<pre><code> 参考来自菜鸟教程\n(https://www.runoob.com/cprogramming/c-strings.html)\n</code></pre>\n<p>这是我们在平时做题时常用的几个函数，比较易懂。<br>除此之外我还在string.h中为大家多找了几个关于<strong>搜索匹配字符</strong>的。<br>是下面这两个</p>\n<p><img src=\"/img/2.png\" alt=\"图片1\"><br><img src=\"/img/3.png\" alt=\"图片2\"><br>（看起来可能参数与返回值都有点吓人，但也就那样。）</p>\n<pre><code> 参考来自菜鸟教程\n (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n</code></pre>\n<p>相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了<br>要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> 标识符[字符串长度];</span><br><span class=\"line\"><span class=\"comment\">//标识符即为名字，字符串长度可以省略。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为字符串赋值的方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[] = <span class=\"string\">&quot;I&#x27;m a string!&quot;</span>;   <span class=\"comment\">//第一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> string2[<span class=\"number\">6</span>] = <span class=\"string\">&quot;Hello!&quot;</span>;        <span class=\"comment\">//第二种方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> string3[<span class=\"number\">10</span>];                  <span class=\"comment\">//第三种方法</span></span><br><span class=\"line\">gets(string3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);                    <span class=\"comment\">//第四种，应该是最常用的一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sprintf(被写入字符串,&quot;写入字符串&quot;，格式化符列表)</span></span><br><span class=\"line\"><span class=\"comment\">//括号的后半部分与printf类似，但是它不是为了输出的。</span></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(string1,<span class=\"string\">&quot;%d&quot;</span>,n);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串输出的方式</span></span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"built_in\">string</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\">\t<span class=\"comment\">//此处n也可以不定义，在使用第一或者第二种方式时</span></span><br><span class=\"line\">\t<span class=\"comment\">//可以使用strlen函数或者sizeof运算符 - 1来代替</span></span><br><span class=\"line\">\t<span class=\"comment\">//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所谓的<strong>字符串</strong>，其实就是[由字符组成，以’ \\0‘为结束的一维数组]。<br>’\\0’标志着字符串输出的结束，\\是<strong>转义符号</strong>，为了提示它不是数字0</p>\n<blockquote>\n<p>注意，对于字符串的scanf都不需要加取地址符&amp;。<br>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。<br>和字符串本身无关。</p>\n</blockquote>\n<p>上面的函数给出了几种给字符串赋值的方式，<br>我觉得你们可能不太好理解的是以下内容：</p>\n<ul>\n<li>gets()与puts()函数的用法</li>\n<li>1000是可以随机的吗</li>\n<li>strlen函数以及sizeof的用法</li>\n</ul>\n<p>这里简单一说</p>\n<ol>\n<li>gets()就是获取一段字符串，在括号中需要加入参数，<br> 参数为字符串（字符数组）<br> puts是把字符串打印出来<br> 其实这两个相似于字符的getchar与putchar</li>\n<li>1000看题目要求，看字符串的最大容量。</li>\n<li>strlen是返回字符串的长度，不包含结尾的\\0符号，<br> sizeof运算符对于字符串来说，是返回包括\\0的长度。<br> 所以sizeof要减一。</li>\n</ol>\n<p>下面再说一下这些函数的效果。（看图也可。）</p>\n<blockquote>\n<p>1.strcpy(s1,s2);</p>\n</blockquote>\n<p>s1与s2是形式参数，代表两个字符串，<br>通过这个函数我们能够覆盖式地把s2复制粘贴到s1上<br>甚至长度不允许也没关系。</p>\n<p>关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。<br>对于很多的函数是可以通过这种方式记忆的<br>其实用多了就自然记住了。</p>\n<blockquote>\n<p>2.strcat(s1,s2);</p>\n</blockquote>\n<p>s1,s2作用不再赘述。<br>把s2连接到s1的末尾，改变s1。<br>可以通过输出看s1的变化，</p>\n<blockquote>\n<p>3.strlen(s1)<br>返回s1的去掉结尾符号的长度，已经讲过。</p>\n</blockquote>\n<blockquote>\n<p>4.strcmp(s1,s2);<br>从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。<br>昨晚在直播中学长讲过了。<br>大小与返回值的关系请见图。</p>\n</blockquote>\n<blockquote>\n<p>5.strpbrk(const char* str1, const char* str2);</p>\n</blockquote>\n<pre><code>关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n</code></pre>\n<p>分析第一个字符串的字符，与第二个字符串内的字符比对<br>只要找出两个字符串都包含的字符就返回那个字符。</p>\n<pre><code>很好理解。\n比如，&quot;AABB&quot;与&quot;BCDE&quot;，就会返回B。\n</code></pre>\n<blockquote>\n<p>6.strspn(const char* str1, const char* str2);</p>\n</blockquote>\n<p>也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。<br>返回那个字符的下标，注意不是字符。</p>\n<p>想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，<br>比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。<br>这在我刚开始学习C语言的时候就感觉到了。<br>Python中的字符串处理有很多的内建函数，处理起来很方便。<br>但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。<br>所以学好字符串还是很有必要的。</p>\n<p>还有一个是 @空梦Kmar 的建议<br>尽量使用C标准库函数，这样能够极大地优化程序的效率。<br>详细的建议在他的博客里，第一条就是优先使用库函数。<br><a href=\"https://kmar.top/posts/51979312/\">关于C语言编码的一些建议 | 山岳库博 (kmar.top)</a><br>包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题<br>还有用于交换数组排序的swap函数。<br>所以学习C语言标准库而不是自己写还是很好的，而且很省事。</p>"},{"title":"C-premier-plus-Chapter-3","date":"2023-12-22T04:11:38.000Z","_content":"# 第三章 数据处理\n\n>你会在这一章学到下面的东西：\n>1. 关键字\n>\t`int,short,long,unsigned,char,float,double,_Bool,_Complex\n>2. 运算符\n>\t`sizeof`\n>3. 函数\n>\t`scanf()`\n>4. 整型与浮点型的区别\n>5. 书写常量与声明这些类型的变量\n>6. 如何使用`printf()`与`scanf()`函数来读写不同类型的值\n\n程序依靠数据来工作。你会向电脑输入数字、字母或者单词，然后期望它能够利用这些数据做些事情。例如，你可能想要电脑去计算支付利润或者展示一个排过序的酒商列表。在这一章，你将会不只阅读数据，而且练习着去操纵数据，那是挺有趣的一件事。\n\n这一章还会让你了解到两大类数据类型：整数与浮点数。C语言提供了这些类型的几种变体。这一章会告诉你类型是什么，如何声明它们并且如何利用它们。而且，你会发现变量与常量之间的区别，作为额外奖励，你的第一个交互式的小程序就要诞生了！\n<!--more-->\n\n## 3.1 一个例子\n\n再一次，我们还是从一个样例程序来开始，像以往一样，你会发现一些不熟悉的东西，我们待会就会为你解释。程序的总体目的应该清晰，那么就尝试把图3.1中的源码编译运行下吧。\n为了节省时间，你可以省略注释。\n\n![图3.1](/img/Listing3.1.png)\n\n![错误与警告](/img/ErrandWarn.png)\n【错误与警告】\n如果你把程序的某些部分打错了，还有，比如说，遗漏了一个分号，编译器就会给予你一条语法错误信息。即使你没打错，编译器也有可能给予你一条警告信息，“Warning-conversion from ‘double’ to ‘float’ , possible loss of data.” 错误信息指的是你有可能把某些事做错了，它阻止程序的编译。警告，意思是你写的代码是合法的但是有可能做的并不是你想的那样。警告并不会阻止编译过程。上文中的这条信息就会在C语言在处理像770.0这样的数时出现，但并不是这个例子的问题，这一章过会会解释这条警告。\n\n当你在打字写这个程序的时候，你有可能会把`770.0`改成这种珍贵金属的当前价格。但是不要改变14.5833，那代表着一磅对应的盎司数。（盎司金衡制，是对于贵重金属使用的，常规衡制是给人们使用的，不论是珍贵的物品或是其他的东西。）\n\n需要注意的是“输入”你的体重意味着把你的体重打字写入电脑，并且敲下Enter或者Return键（不要输入完了你的体重就等着。）按下Enter键这个动作告诉了电脑你已经完成了你的应答。这个程序想要你输入一个数字，如`150`而不是单词，比如`too much`，如果你写的是字母而不是数字，那是会导致问题的，而这个问题需要之后学习的`if`语句来解决。（第七章，“C语言控制语句：分支结构与跳跃结构”会讲到），所以请先平静一些，输入一个数字，这里就是一个简单的输出示例。\n\n![输出](/img/Olist3.1.png)\n\n### 3.1.1 例子中的新知识\n\n在这个C语言程序中有这么几个新接触的要素。\n+ 可以注意到的是，代码在变量声明中使用了新的数据类型，前面提到的例子只使用了十进制整数类型(`int`)，但是现在的这个例子使用了一个浮点类型的变量类型，这样的话你就可以处理更大范围的数据了。`float`类型就可以保存含有十进制小数点的数字。\n+ 这个程序给出了书写常量的一些更新的方式，你现在可以书写浮点型的常量了。\n+ 为了对程序提供输入信息，你需要使用`scanf()`函数，`%f`命令`scanf()`从键盘输入中读入一个浮点数，`&weight`告知了`scanf()`函数把输入的值赋给名字叫做`weight`的变量，`scanf()`函数会用`&`符号来寻找在哪里可以找到叫做`weight`的变量，下一章我们会进一步地阐述`&`符号，现在，只需要相信我们你需要在这里添加一个`&`符号。\n+ 可能最突出的新特性就是程序变为交互性的了。电脑会要求你输入信息，并使用你输入的数值。一个交互性的程序是比不能交互的更有趣的。更重要的是，交互的方法让程序更加的灵活。举个例子，样例程序就可以用于所有合理的体重了，而不只是150磅，你不需要换一个人就再把程序重写一遍。`scanf()`函数会从键盘中获取数据，并把数据传递到你的程序，`printf()`函数会从程序中获取数据，然后把数据传递到你的屏幕上。这两个函数在一起就可以让你建立电脑与你的双向联系（见图3,1），这就让电脑使用更加有趣了。\n\n我们会在这一章讲述这些新特点中的前两条，后面的三条内容会在第四章-字符串与格式化输入输出完整地讲到，但是这一章还是会少量地使用`print()`与`scanf()`函数。\n\n![输入输出函数的工作](/img/Figure3.1.png)\n\n## 3.2 变常类型\n\n一台电脑，在程序的指导之下，可以做到很多的事情。可以做加法，可以给名称排序，可以指示讲话者或者屏幕的演出顺序，可以计算彗星的轨道，可以编排你的邮寄列表，拨叫电话号码、画出由小棒组成的人物，得出结论或者其他你可以想象到的可以被创造的东西。为了完成这些任务，程序需要处理***数据***，也就是你使用的保存在程序中的所有数字与字符信息。一些数据类型需要在程序使用之前进行预设，而且保证它们的值是不变的，这些就是***常量***。其他的数据类型的值或许会随着程序运行改变或者被赋给，这些就是***变量***。在这个样例程序中，`weight`就是一个变量，而`14.5833`就是一个常量。那么`770.0`呢？虽然铑金属在真实生活中的价格并不是个常量，但是这个程序把它作为一个常量来处理。变量与常量的区别就在值可不可以随着程序运行发生改变上。\n\n## 3.3 数据类型关键字\n\n讲完了变量与常量的区别之后，我们需要了解一下不同数据***类型***之间的区别。一些数据是数字形式，一些是字母，或者更加普遍的，它们是字符。电脑需要一种方式来确定与使用这些不同的类型。C语言通过对于基本的数据类型的定义完成了这个工作。如果数据是一个常量，编译器通常是可以通过它看起来的样子来区分它的。`42`是一个十进制整数，`42.100`是一个浮点数，在另一面，变量就需要声明语句来声明它的类型。随着学习进行下去，你会了解到关于声明变量的更多细节。但是还是让我们首先先研究一下C语言可以识别的基本类型，K&R C确立了有关于类型的七个关键字，C90标准增加了两个，C99标准又增加了三个。（见表3.1）\n![表3.1](/img/Table3.1.png)\n\n`int`关键字提供了C语言中基本的十进制整数类型，下面的三个关键字(`long, short, unsigned`)还有ANSI添加的`signed`提供了基本类型的变体。接着，`char`关键字指明了用于字母与其他字符的类型，如`%, $, #`等，`char`类型还可以被用来代表大于0与小于10的十进制整数。然后是`float`与`double`，还有两者的混合`long double`是用来代表带有十进制小数点的数字的。`_Bool`类型是为布尔类型提供的(`true`和`false`)，最后是分别代表着复数与虚数的``_Complex``与`_Imaginary`.\n\n由这些关键字创造的类型又可以基于在电脑中的储存类型分为两种，***十进制整数类型***与***浮点数类型***。\n\n![Bits, Bytes and Words](/img/storingtypes.png)\n【Bit（位）、字节与字】\n\n*bit*、*字节*与*字*可以被用来描述电脑的数据单元或者内存单元。我们会集中于第二种用法。\n\n内存的最小单元叫做***bit***，它可以保存`0`与`1`之间的其中一种数值（或者你可以说，这个字节被设为“关”或者“开”）你并不能在一个bit中储存太多的信息，但是电脑可以储存很多的字节，bit就是电脑内存的基础组成模块。\n\n*字节*是电脑内存的一般单元。对于大多数的机器来说，一个字节是8个bi，那是标准的定义，至少当测量内存的时候（C语言有不同的定义，我们会在“使用字符：`char`类型”这一节讲到）因为一个bit不是0就是1，那么在8位的字节中，就可以有256种可能（2的8次方），这些可能的模式就可以被用作比如代表0到255的数字或者代表一系列的字符。在二进制代码下，这种一对一的映射是可以被建立的，而且使用0与1来代表数字也使机器便利的。（在第15章-位运算，会讲述二进制代码，但是如果你想的话现在就可以去读一下）。\n\n*字*是电脑固定设计下的内存自然单元，对于8位的微型计算机，比如原来的苹果电脑来说，一个字就只是8个bit。早期的IBM兼容器使用的80286处理器是16位的机器，这也就是说他们把字长增加到了16bit。还有例如以Pentinum为基础的计算机，还有Mactonish PowerPC的字长是32bit。还有更强大的电脑的字长是64位的或者更大。\n\n### 3.3.1 整型与浮点型\n整型？浮点型？如果你感觉这些词非常不熟悉以至于干扰了你的阅读进度，我们这就要简要描述它们的意义了。如果你对位、字节还有字还是不熟悉的话，你可能需要阅读一下最近描述过的附加栏。你真的需要了解所有的细节吗？并不是，不只了解内燃机驱动车子的工作原理，而多了解一些电脑或者引擎内部发生的事情有时候可以帮到你。\n\n对于一个人来说，整型与浮点型的区别体现在它们是怎么被写下的。对于电脑来说，那就体现在它们是怎么被储存的。让我们依次来研究一下这两种类型。\n\n### 3.3.2 整数类型\n\n***整型***是没有小数部分的数字。在C语言中，整型是没有小数点的数字。比如说-2、-23还有2456。像3.14, 0.22, 还有2.00这些数就不是整型。整型是以二进制数字的形式被储存起来的。比如7就是被储存为二进制数111的。因此，为了在8位字节中储存这个数字，会把前五个位设置为0，然后把后三个位设置为1。    \n\n![用二进制码储存7](/img/Figure3.2.png)\n\n### 3.3.3 浮点数类型\n\n***浮点***数多多少少是对应着数学概念中的***实数***，实数包含着整数之间的这些数字，浮点数基本是这些样子：2.75、3.16E7、7.00、2e-8，需要注意的是，只要有小数点就会把整型数字转换为浮点数，比如7.00是一个浮点数，而7就是一个十进制整数。很明显，书写浮点数的方式不止一种，我们会在之后更充分地讨论用e符号表示的形式。但是简单来说，3.16E7的表示方式意思就是3.16乘10的7次方，也就是1后面添7个0，7也就是10的***指数***。\n\n关键就是储存浮点数的方式与整数不一样。浮点数的表示涉及到把一个数字分开为小数部分与整数部分，然后分别储存。因此，7.00这个数字不会与整数7同样储存，即使它们的值都是一样的。十进制类比起来也就是把7.0写为0.7E1。这里，0.7就是小数部分，1就是指数部分，图3.3展示了浮点数储存的另一个例子。一台电脑当然会使用二进制数与二进制而不是十进制来储存。你会在第十五章了解关于这个话题的更多信息。现在我们先集中精力于在实用上区别吧。\n\n+ 整型没有小数部分，浮点数可以有小数部分。\n+ 浮点数比整数代表的数字更多，可以看一下这一篇结尾的图表3.3。\n+ 对于一些算术运算符，比如一个数减去另一个数，浮点类型的精确度会有更大可能下降。\n+ 因为在任何一个范围之间都有着无数的浮点数，比如在1.0与2.0之间，电脑就不能完全地代替这些值，它用实数的大概值来估计浮点数的值。比如7.0有可能被储存为6.99999的`float`值，过会会讲到更多有关于精确度的知识。\n+ 浮点运算符的优先级通常是比整型运算符要低的，然而用来处理浮点运算的特殊微型处理器已经可用了，这个问题也就得到了解决。\n\n![十进制浮点储存方式](/img/Figure3.3.png)\n\n现在就让我们研究一下C语言中各种数据类型的特点吧。对于每一种类型，我们会描述如何声明一个变量，如何用变量代表一个常量，还有一些特殊的用法。一些年代较早的C语言编译器可能不能支持下文全部的类型，所以你可以查看一下你的编译器的说明书，看一看哪些数据类型是可用的。\n\n## 基本数据类型\n\n### 3.4.1 `int`类型\n\nC语言提供了很多的整数类型，你可能想知道为什么只有一种还不够，答案就是这样C语言就可以让你将特定的变量用在特定的地方。具体来说，C语言的各个整数类型不同在值域的大小与是否含有负数上。`int`是最基本的整数类型，但是你要是为了满足机器任务的特定需求的话，其他的类型也都是可用的。\n\n`int`类型是一种有符号的整数类型，有符号意味着`int`类型的整数可以是正数、也可以是负数，或者是0。`int`类型的值域是取决于计算机系统的，通常一个`int`类型的整数的大小就是内存的一个字长。因此，旧版的16位IBMPC适配器，就可以使用16个位来储存整数，也就是从-**32768**到**32767**。现在的个人电脑一般是使用32位的整数大小，在这张结尾的表3.3可以看到一些个例子。现在个人电脑产业也正在向64位处理器发展，那样也就可以使用更大的整数了。ISO/ANSI C语言特别指出`int`的最小范围应该是-**32767**到**32767**，通常系统会专门拿出一个位来保存符号，第十五章描述这种了一般的方法。\n\n#### 3.4.1.1 声明`int`类型\n\n正像你在第二章看到的，关键字`int`可以用来声明一个基本的整型变量。声明，首先是`int`，然后是变量的名称，最后是一个分号。要是声明多个变量的话，可以分别声明，也可以用逗号分隔，把一系列的变量名列出来，下面的声明方法都是合法的。\n\n![](/img/valid_declaration.png)\n\n你可能已经使用过分别声明变量的方法了，或者你已经尝试在一行中声明全部的变量了。效果都是一样的：就是对四个`int`大小的变量分配空间并与变量名相联系。\n\n这些声明语句创造了变量，但并没有给它们赋值，变量要如何得到值呢？你已经见过两种方法了，第一种是赋值语句\n\n![](/img/assignments.png)\n\n第二，变量也可以使用函数来赋值，比如说`scanf`函数。\n现在我们来了解一下第三种方法吧。\n\n#### 3.4.1.2 变量初始化\n\n对变量进行***初始化***也就是给变量赋起始值，或者初值。在C语言中，这可以作为声明的一部分，只需要在变量名后加上赋值运算符还有你想要赋给这个变量的值就可以了。下面是一些例子。\n\n![](/img/initialization.png)\n\n在最后一行，只有`cats`被初始化了，速读一遍，你有可能觉得dogs也会被赋值为94，所以还是最好避免把未赋值与已赋值的变量放在一行之中吧。\n\n简单来说，这些声明会为变量创造空间，并为它们贴上变量类型的标签，而且还可以给赋变量起始值。（见图3.4）\n\n![图3.4](/img/DefinenInitial.png)\n\n#### 3.4.1.3 `int`型常量\n\n在上一个例子中各种各样的整数（21、32、14、94等），就是整型常量。当你书写一个没有十进制小数点并且没有指数的数时，C就会将这个数认作整型常量。因此，22与-44都是十进制整型常量，但是`22.0`与`2.2E1`就不是。C语言会把大多数整型认作`int`类型常量。但很大的数会有区别。看最后对于long常量与long long常量的描述就知道了。\n\n#### 3.4.1.4 打印`int`值\n\n你可以使用`printf()`函数来打印`int`类型的值，正像你在第二章看到的，%d符号可以在十进制整数被打印出来的地方作为占位符。%d的名称叫格式化符，因为它声明了`printf()`打印值的类型每一个在格式化字符串中的每一个`%d`都代表着一个`int`类型的值，它就在字符串后面的列表中。那个值可以是一个`int`类型变量代表的，也可以是一个`int`类型常量代表的，或者任何有`int`值的表达式。这样，你就有责任让格式化符与之后的列表中的值一致了，编译器并不会报出这种错误。图3.2就表示了一个初始化并且打印变量值，常量的值，还有简单表达式的值的程序，它也提示了你如果你不小心的话会发生什么。\n\n![图3.2](/img/Listing3.2.png)\n\n编译完运行这个程序的结果是这样的。\n\n![](/img/result1.png)\n\n第一行输出，第一个`%d`代表着一个`int`类型变量`ten`第二个代表着常量2，第三个呈现的是`ten` - `two`的值。但第二行，使用的是`ten`这个变量代替了第一个`%d`但是之后的值全都是随机的，是从最近的两个内存空间中获取的值！（你回去的值有可能与这里显示的值相差很多，不仅内容不一样，而且不同的编译器对于这些内存区的管理方法也不一样。）\n\n你有可能对编译器为啥并不会捕捉到这个很明显的错误，还是怪`printf()`函数的原始设计吧。大多数函数都会获取一个值作为参数，编译器可以检查出来你使用的值是不是恰当，但是`printf()`可以获取一个、两个、三个或者更多的参数，那就让编译器无法使用常用的错误检测方法了。记住，一定要检查格式化符是不是与被显示的值匹配。\n\n#### 3.4.1.5 八进制与十六进制\n\n通常来说，C语言会认为整型常量是十进制数。但是八进制与十六进制也受到许多编程人员的欢迎。因为8与16都是2的幂，但10并不是，这些进制系统有时会为与计算机相关的值的表达提供便利。例如，数字65536经常会出现在16位的机器中，它只是10000的十六进制数，十六进制数中的每一位数都对应着实际的四个位。例如，十六进制数3就对应着0011，5就对应着0101，所以35就对应着0011 0101，53就对应着0101 0011。这种对应就会使十六进制与二进制的转换非常简单。但是电脑是怎么判断10000是什么进制的数字的呢？在C语言中，数字不同的前缀就显示了不同的进制，0x（0X）就意味着你正在使用十六进制值，所以16在十六进制下会被写作0x10或0X10。相似地，前缀0就表示你正在使用的是八进制值。例如，十进制数16在八进制数中就写为020，在15章我们会更加充分地讨论不同的数制。\n\n要知道的是不同的数制系统是为你提供便利的，它并不会影响数值的储存方式，也就是说，你可以写16、020或者0x10，这个数还是会以二进制的方式储存起来。\n\n#### 3.4.1.6 展示八进制与十六进制数\n\n正像C语言能够让你以三种方式书写数字一样，它也可以让你以三种方式的任意一种展示数字。展示一个八进制整数可以使用%o，十六进制使用%x，如果你想显示前缀，你可以使用修饰符#，比如`%#o`，`%#x`，`%#X`，有了它们你就可以在数字前面显示0，0x，0X前缀。图3.3给出了一个小小的例子（想到你有可能必须加上一个`getchar()`，它会在一些IDE中防止程序立即关闭）。\n\n![图3.3](/img/Listing3.3.png)\n\n编译运行过后结果是这样的。\n\n![](/img/result2.png)\n\n你可以看到相同的数字被以三种不同的数制打印出来了，`printf()`函数可以实现这种转化。\n注意前缀只有加上#时才会出现。\n\n### 3.4.2 其他整型\n\n当你正在学习C语言时，`int`类型有可能已经满足了你大部分的整型需求了。但为了内容的完整，我们会研究其他的类型。如果你喜欢的话，你可以只大体浏览一下这一部分，然后跳到对于`char`类型那一部分，然后如果有啥需要的可以再回来复习。\n\nC语言使用三个形容词关键字来修饰基本整型：`short, long, unsigned`下面是需要记住的一些点。\n\n+ `short int`类型，或者直接`short`，会比`int`使用的内存更少，由此也就可以在只使用小的数字的时候节省一些空间。像`int`一样，`short`为有符号类型。\n+ `long int`类型，或者直接写`long`，占用的内存会比`int`更多，因此可以让你表示更大范围的数字，像`int`一样，`long`为有符号类型。\n+ `long long int`类型，或者`long long`（都是在C99标准下被引入的），会比`long`类型占用的内存更多，也就让你可以使用比`long`范围更大的数字。像`int`一样，`long long`是一个有符号的类型。\n+ `unsigned`类型，或者写成`unsigned`，是为非负的变量而设置的，这种类型改变了可储存数字的范围，例如，16位的`unsigned int`可以表示0-65535的数字，就不是-32768-32767了，用来表示符号的那一位在无符号类型这变成了另一个可以表示数字的位，也就让数字的表示范围扩大了。\n+ `unsigned long int`类型，或者`unsigned long`还有`unsigned short int`，或者`unsigned short`，在C90标准下都是可以被识别的，在C99标准下又添加了`unsigned long long int`类型，或者`unsigned long long`。\n+ 为了让你的意图明显，关键字`signed`可以被用在任何有符号类型上，例如`short`, `short int`, `signed short`,`signed short int`都是一种类型。\n\n#### 3.4.2.1 声明其他整型\n\n其他整型与`int`类型的声明方式是相似的，\n下面就展示了一些例子。\n并不是所有的编译器都能识别最后三种类型，最后一个例子是C99标准新加进去的。\n\n![其他整型](/img/othertypes.png)\n\n#### 3.4.2.2 为什么要用多种整型？\n\n为什么说`long`与`short`与`int`相比会使用不同的内存呢？因为C语言会确保`short`不会长过`int`，`int`也不会长过`long`，主要的目的就是为了适应不同类型的机器。例如在运行着Windows 3.1的IBM PC上，`int`与`short`都是16位的，而`long`是32位的，而在Mactonish Power PC上，`short`类型是16位的，而`int`和`long`类型是32位的。PowerPC G3/G4中的Pentium芯片的字长是32位，因为这就可以让整型超过20亿（见表3.3），C语言在处理器/操作系统的实现没有必要超出这个数值。因此，`long`与`int`大小是一样的。对于许多的使用过程，那个大小的整数是不需要的，所以节省内存的`short`就被创造了。但另一方面，原本的IBM PC只有16位的字长，那就意味着需要更长的`long`类型。\n\n现在64位的处理器都变得很常见了，比如IBM Itantium，AMD Opteron，还有PowerPC G5。因为64位整型的需要，`long long`类型也就应运而生。\n\n现在最常见的实践是把`long long`设置为64位，把`long`设置为32位，把`short`设置为16位，把`int`设置为16位或者32位，它的大小取决于电脑的自然字长。原则上，这四种类型可以代表四种不同的大小。\n\nC语言标准为确定每一种基本数据类型的最小尺寸提供了指引。`short`与`int`的最小范围是从-32,767到32,767，对应着16位的单元，而`long`类型的最小范围是-2,147,483,647到2,147,483,647，对应着32位的单元。（注意，为了易读，我们使用了逗号分开，但是C语言代码是不能写成这样的）。对于`unsigned short`与`unsigned int`，最小的范围是0到65535，而`unsigned long`的最小范围是0-4,294,967,295/,`long long`类型为了迎合64位的需求，它的最小范围很大，是-9,223,372,036,854,775,807到9,223,372,036,854,775,807，而`unsigned long long`就是0到18,446,744,073,709,551,615.（对于那些检查写的对不对的人，下面是它的英文表示，但是谁要计数呢？）\n\n![(一脸认真)](/img/nonsense.png)\n\n你会在什么时候使用这些不同的`int`类型呢？第一，考虑`unsigned`类型，使用它们计数是很好的，因为你不需要负数，而且`unsigned`类型比`signed`类型的范围更大，可以得到更大的整数范围。\n\n如果你需要处理超过了`int`类型的范围的数字，使用`long`类型，但是在`long`比`int`长的系统中，使用`long`会让计算变慢，所以没必要的话就不要用`long`，进一步说，如果你正在一个`int`与`long`类型长度一样的系统上写代码，而你又需要32位的整数，你就需要使用`long`而不是`int`了，那样程序才可以在转到16位机的时候正常运转。\n\n相似地，如果你需要64位整型数的时候就使用`long long`吧，一些电脑已经使用着64位的处理器，而且并且正在服务器、工作站甚至桌面的64位处理也正在变得越来越普遍。\n\n如果你需要节省内存空间的话，使用`short`来节省内存空间，比如如果你在一台`int`类型是32位的机器上，需要16位的值这种情况。通常只有当你的程序使用整型数组这种与系统的可用内存极其相关的情况下节省内存才是必须的。另一个使用`short`的原因是它有可能与被电脑的特定部分使用的硬件寄存器的大小相同。\n\n> ![](/img/overflow.png)\n> 整型溢出。\n> 当一个整型相对于它的类型太大了会怎么样呢？让我们把一个整型变量设置到它可能的最大值，并用它加一些数，看看会发生什么。`unsigned`与`\tsigned`类型都可以试试（`unsigned int`的格式化符是`%u`）\n> 这就是系统给出的结果\n> ![](/img/flowresult.png)\n> `unsigned`类型好像汽车的里程计一样，当它到达了最大值，它就会返回到它的最小值，变量i也很相似，主要的区别是`unsigned`类型的`j`\t是以0开始的，但是`int`类型的`i`是以-2147483647开始的。\n> 注意的是，你如果没有被告诉这个数据已经溢出了，你还是会不断地在这个问题上打转。\n> 这里描述的行为是由C语言`unsigned`类型的规范控制的，标准并不规定`signed`应该行为如何，这里展示的行为也是通常会发生的，但是你以后会找到不一样的东西的。\n\n#### 3.4.2.3 `long`常量与`long long`常量\n\n一般地，当你在代码中使用2345这样的数字时，它会被储存为一个`int`类型的常量。那么如果你使用1000000这样不能被`int`储存下来的数字呢？编译器就会将它识别为`long int`，如果认为这个类型已经足够大了的话。如果比`long`类型的最大值还要大的话，C语言会将它当做`unsigned long`类型，如果那还不够的话，它就会把它当做`long long`类型或者`unsigned long long`，如果这些类型可以满足要求的话。\n\n八进制与十六进制的常量会被认作`int`类型，除非这个值太大，然后还是以上文的顺序依次递加。\n\n有些时候你有可能想让编译器把一个小点的数储存为`long`类型。如果你在编程的过程中需要外显地使用内存地址，例如在IBM PC上，就有可能有这样的问题。而且，一些基本的C语言函数是需要`long`类型的值的，你可以在数值加上后缀`l`或者`L`，第二种方式更好，因为看起来不像数字`1`。因此，一个有着16位大小的`int`与32位大小的`long`，会将`7`这个数储存在16位中，而将`7L`储存为32位中，而且这两个后缀对于八进制与十六进制都是适用的，像是020L与0x10L。\n\n相似地，在那些有`long long`类型的系统中，你就可以使用`ll`或者`LL`后缀，比如`3LL`，而且还可以使用`u`或者`U`来表示`unsigned long long`类型，就像`5ull`或者`10LLU`或者`9Ull`。\n\n#### 3.4.2.4 打印`short, long, long long`与`unsigned`类型\n\n要打印一个`unsigned int`类型的数字，只需使用`%u`符号，`long`类型可以使用`%ld`，但如果你的机器中`int`与`long`是大小一致的，那`%d`就可以了，但是代码有可能在别的系统中就不能正常运作了，所以对`long`来说最好还是使用`%ld`吧，对于`x`与`o`都可以在前面加上`l`。因此对于十六进制的`long`类型数你会使用`%lx`，类似在八进制会使用`%lo`，需要注意的是即时C语言提供了大写的`L`后缀，但是在格式化符中，只能使用小写。\n\nC语言有几种额外的`printf()`格式，首先，你可以在使用`short`类型时在`%d`的`d`前加`h`来表示十进制的`short`整型，同理`%ho`也是可以的，而且`h`与`l`是可以再加上`u`表示无符号的。例如，你会使用`%lu`符号表示`unsigned long`类型，图3.4就提供了一个例子。支持`long long`的系统也可以使用`%lld`或者`%llu`分别表示有符号与无符号的`long long`整型，第四章会对格式化符进行更充分的阐述。\n\n![图3.4](/img/Listing3.4.png)\n\n这是系统的输出：\n\n![](/img/result3.png)\n\n这个例子就显示出了使用错误的格式化符会有意想不到的后果。第一，注意到对于变量`un`使用的`%d`格式化符结果输出了一个负值，原因就是无符号与有符号数实际上是以相同的二进制排列被储存起来的（第15张会更详细地谈论这种属性），所以如果你告诉`printf()`函数这个数是没有符号的，与告诉它这个数是有符号的输出结果是不一样的。这种行为常会在你输入一个超限的数值时出现。小的整数，在两种格式化符之下都是一样的。\n\n第二，注意到无论你告诉`printf()`是`short`还是`int`类型，`short`变量`end`都是可以打印出正常值的。这就是因为当向函数输入一个参数的时候会自动将它转化为`int`类型，那么你就会问了:1.为什么这种转化会发生？2.`h`修饰符的用处在哪里？第一个问题的答案是`int`类型可以被电脑更加高效地处理。所以在`short`与`int`类型大小不同的机器上，有可能传递一个`int`值会更快。第二个问题的答案是你可以看看一个更加长的整型数如果被缩短为`short`类型了会看起来怎样。第三行的输出也为这一点提供了例证，当65537被写为32位二进制数时，它看起来是`00000000000000010000000000000001`这样子的，使用`%hd`格式化符会迫使`printf()`只看向最后的16个位，因此它会只打印`1`，相似的，最后一行的`verybig`使用`%ld`就会只看向最后的32位，而不是完全的位数。\n\n早些时候你已经了解标识符的数量与显示数字的数量匹配的重要性了，现下你也知晓了标识符的种类也要匹配。\n\n![](/img/matchup.png)\n\n匹配`printf()`函数的格式化符\n记着要去检查一下你是不是对于每一个要在`printf()`中打印的值都给予了一个格式化符，并检查是不是每一个的格式化符都与显示的值的类型相互对应。\n\n### 3.4.3 字符 char\n\n`char`类型是用来储存像字母、标点符号这样的字符的，但是严格来讲它其实是一个整数类型。为什么？`char`这个类型实际上储存的是整数而不是字符，为了处理字符，电脑会使用数字编码来让某一个整数代表某一个字符。在美国最常用的字符编码表是ASCII编码表，它已经在书的前封的背面给出来了，是这本书使用的编码表。举些例子，`65`在ASCII码表中代表的是大写的`A`，所以如果需要储存字母`A`，只需要储存数字`65`即可，（许多IBM主机用的是不一样的编码系统，它叫做EBCDIC，但是准则都是一样的。但在美国以外的计算机系统使用的编码表有可能是完全不同的。）\n\n基础的ASCII码是从0到127的，这个范围小到一个字节就可以保存下来，`char`类型通常会被定义成8位的内存单元，所以它不仅仅可以储存下来基础的ASCII码。许多系统，如IBM PC与苹果公司的Macintosh，可以提供更大的ASCII码表（这两个系统是不一样的），但是还是在8位范围之内。更加普遍的，C语言会确保`char`类型的大小是足够储存系统中C语言实现的需要的基础字符的。\n\n许多的字符集会有不只127而是255分值，例如日本的kanji字符集，商业的Unicode协议为代表全世界的各种字符创造了一个系统，现在已经有96000个字符了。ISO（国际标准组织）与IEC（国际电子委员会）为字符集创造了ISO/IEC10646标准。幸运的是，Unicode标准与ISO/IEC10646标准是始终协调的。\n\n使用这些字符集的平台有可能会使用16位或者32位的`char`类型代表，C语言定义下`char`的长度是1个字节，现在在C语言的记录中，一个字节会是16位或者32位，而不是那些系统上的8位。\n\n#### 3.4.3.1 定义`char`类型变量\n\n正像你会期望的，`char`类型变量与其他变量的定义方式相同，这里就是一些例子。\n\n![](/img/chardef.png)\n\n这几行代码创造了三个`char`类型的变量：`response`，`itable`与`latan`。\n\n#### 3.4.3.2 字符常量及其初始化\n\n假定你想要初始化一个字符常量为大写字母A，电脑语言是要让事情变得简单起来的，你不需要记忆ASCII码，你也不会，你可以直接以下面的方式给`grade`变量赋值`'A'`\n\n![](/img/charassign.png)\n\n被双单引号框定的单一字符就是C语言中的***字符常量***，当编译器看到了`'A'`，它会将A字符转化成相应的字符编码值，单引号是必须的，下面就是例子。\n\n![](/img/chardeclare.png)\n\n如果你遗漏了引号，那么编译器就会认为`T`是一个变量名，如果你使用双引号的话，它会认为你正在使用字符串，我们会在第四章讲解字符串。\n\n因为字符确实是以数字的形式被储存起来的，你还是可以使用数字编码为`char`类型变量赋值。\n\n![](/img/numassign.png)\n\n在这个例子中`65`是一个`int`类型的，但是因为这个值是小于最大的`char`类型值的，所以可以无误地赋给`grade`变量，因为65对应着ASCII码中的字母`A`，所以`A`就被赋给了`grade`变量。但注意，这个例子只是为了表示系统用的是ASCII码系统，但用`65`与`'A'`都是一样的，因此，使用字符常量要比使用数字编码是要好的。\n\n有点奇怪的是，C语言会将字符常量当做`int`类型常量而不是`char`来看待。例如，在32位使用ASCII字符编码，`char`类型为8位的系统中，这一行代码：\n\n![](/img/gradeb.png)\n\n就会将`'B'`呈现为66这个值储存起来，但是`grade`是以8位单元储存的66，这种特点就会使字符常量不能存放多个字符，像`'FATE'`这样，因为4个单独的ASCII码被储存在32位的单元中，但是试图将这样一个字符常量赋给`char`类型变量会导致只有最后的8位被使用，也就是变量被赋给的是`'E'`。\n\n#### 3.4.3.3 不会被打印出来的字符\n\n单引号对符号、数字还有标点符号都是适用的，但是如果你浏览过这本书前封里的那张表，你会看到一些ASCII字符是打印不出来的。例如，一些代表着回车或者跳到下一行，又或是会让终止铃响的符号，这些符号是怎么被表示的呢？C语言提供了三种方法：\n\n第一种方法就是我们已经提到过的，使用ASCII表编码的方法。例如，蜂鸣符对应的值就是7，所以你可以这样写。\n\n```C\n\tchar beep = 7;\n```\n\n表示这些字符的第二种方法是使用特殊的符号序列，它们叫做***转义序列***，表3.2给出了转义序列与它们的含义。\n\n![表3.2](/img/Table3.2)\n\n在赋值给字符常量的时候，转义序列必须要由单引号框定，例如，你可以这样赋值：\n\n```C\n\tchar nerf = '\\n';\n```\n\n然后打印变量`nerf`，打印器或者屏幕上的行就会往前一行（回车）。\n\n现在我们可以看看每一个转义序列是做什么的，警告符`\\a`是在C90标准中添加的，它会生成一条有声有色的警告，警告的类型因硬件而定，一般蜂鸣声是最常见的（在有些系统中，警告符是没有用的。）ANSI标准规定了警告符是不能改变活跃位置的。活跃位置这个概念指的是在显示设备（如屏幕、电报机、打印机等等）上下一个字符会出现的地方。简单来说，它就是屏幕上你已经用惯了的光标的总称。在程序中使用警告符最终只会发出蜂鸣声，但并不会移动屏幕上的光标。\n\n然后，是`\\b, \\f, \\n, \\r, \\t`还有`\\v`这些转义序列，它们都是常见的输出设备的控制符，它们在影响活跃位置上很出色，回车(`\\b`)，会将活跃位置往前挪一个空格。换页符(`\\f`)会将活跃位置转移到下一页的开头。换行符(`\\n`)会将活跃位置切换到下一行的开始，(`\\r`)，回车符(`\\r`)会让活跃位置回到一行的开头位置，水平制表符(`\\t`)会将活跃位置向右移动一个`Tab`键的位置（通常，这些是以字符位置1、9、17、25这样的格式），垂直制表符(`\\v`)，会让活跃位置移动到下一个垂向的`tab`位置。\n\n这些转义序列并不一定在所有的显示设备中起作用。例如，换页符与垂直制表符在电脑屏幕上只会打印出来一个奇怪的字符，并没有任何光标的移动。但是如果在打印机上使用就可以按照描述工作了。\n\n最后的三个转义序列（`\\\\, \\', \\\"`），能够以字符常量的形式让你使用`\\, ', \"`（因为这些符号是作为`printf()`函数的一部分用来定义字符常量的，如果你要把它们字面上打印出来，那将会非常令编译器困惑。）假设你想要打印下来下面的这一行字。\n\n```Bash\nGramps sez, \"a \\ is a backslash.\"\n```\n\n就需要用下面代码的形式来写。\n\n```C\nprintf(\"Gramps sez, \\\" a \\\\ is a backslash.\\\"\\n\");\n```\n\n最后的两种形式（`\\0oo, \\xhh`）是ASCII码的特殊标识，是要以八进制ASCII码的形式来代表字符，在前面需要加上`\\`然后用单引号来框定整个字符，例如，如果你的编译器不能识别警告符，你就可以使用下面的ASCII码：\n\n```C\n\tbeep = '\\007';\n```\n\n你也可以省略前面的0，所以`'\\07'`与`'\\7'`都是可以的。这个符号会让数字被理解成八进制，尽管前面没有0。\n\n从C90开始，C语言提供了第三种选择，使用十六进制的字符常量，这样说来，斜杠后面是`x`或者`X`与1到3位的十六进制数。例如，Ctrl+P符号在ASCII十六进制符码里就是10（十进制下就是16），所以它是可以被表达为`'\\x10'`或者`\\'x010'`的，图3.5展示了一些整型的代表。\n\n![图3.5](/img/Figure3.5.png)\n\n当你使用ASCII码的时候，要注意数字与字符之间的差异。例如，字符4在ASCII中的值是52,`'4'`是一个符号而不是一个数字。\n\n现下，你可能有这几个问题：\n+ ***为什么转义序列在最后一个例子中没有用单引号括起来？***\n（***最后一个例子`printf(\"Gramps sez, \\\" a \\\\ is a backslash.\\\"\\n\");`***）。\n\t只要是一个字符，不管它是不是转义字符，当它是字符串的一部分的时候，都是需要用双引号框起来的，而不是单引号，但单个字符是无一例外由单引号括起来的。由双引号括起来的是***字符串***。（第四章会讲到）相似地，不属于转义字符的数字会被当做一般字符打印出来（如`printf(\"Hello!7\\n\");`打印出来的是`Hello7`，但`printf(\"Hello!\\007\");`输出的是一行`Hello！`加上一声警告）。\n+ ***我应该什么时候使用转义序列？什么时候使用对应的ASCII码？***\n\t如果你需要使用其中一个转义序列，比如说`'\\f'`，或者作为替代的`'\\014'`，最好使用前者。首先，这种表示方法更容易记忆：其次，它更容易在机器之间转移，如果其他系统不适用ASCII码，`'\\f'`还是可以使用。\n+ 如果我需要使用数字变啊，为什么使用的是`'\\032'`而不是`032`？\n\t第一，使用转义字符的方式会让阅读你代码的人轻松地知道这是一个字符编码。第二，如`\\037`这样的转义序列是可以内嵌于C语言字符串的（？[就像`\\007`一样])。\n\n#### 3.4.3.4 打印字符\n\n`printf()`函数可以使用格式化符`%c`表示一个字符将要在这个位置被打印。你想到字符常量是1位的整型值，因此你也可以用`%d`符号，那样的话你就会得到一个整数，`%c`格式化符会告诉`printf()`函数来打印那个编码值对应的字符，例3.5就以两种方式展示了`char`类型变量。\n\n![例3.5](/img/Listing3.5.png)\n\n尝试运行，输出是这样的。\n\n![](/img/C67.png)\n\n当你使用程序的时候，不要忘记在写完了字符之后按下回车键。`scanf`函数会接收你写下的字符，然后取地址符(`&`)会将字符赋给字符变量`ch`。接下来，`printf()`函数会打印两次`ch`这个变量，第一次是以字符的形式打印的（使用`%c`格式化符的效果），第二次是以十进制整数的形式（同理，`%d`的效果）。需要注意，`printf()`的标识符会决定数据被如何呈现，呈现方式与数据的储存方式没有关系。\n\n![数据储存与输出](/img/Figure3.6.png)\n\n#### 3.4.3.5 有符号还是无符号？\n\n有的C语言实现里会使`char`是一个有符号的类型，那也就意味着`char`可以接受从-128到127的值。其他的C语言实现会让`char`是一个无符号的类型，那么它的范围就变成了0到255，你的编译器的使用手册应该会告诉你`char`是什么类型，或者你可以看看`limits.h`头文件，下一章会讲述。\n\n在C90标准下，C语言允许你使用关键字`unsigned`与`signed`来修饰`char`，那样的话不管原本的`char`是有符号还是无符号。你都可以任意变化它们的类型。它们在处理小范围的十进制整数时是很有用的。要是只是为了使用字符，只使用`char`就可以了。\n\n### 3.4.4 `_Bool`类型\n\n`_Bool`类型是C99标准添加的，它们是被用来代表布尔值的，也就是逻辑上的`true`与`false`。因为C语言是使用0表示`false`，用1表示`true`的，所以布尔类型实际上只是一个整型，但是只需要一位的内存，因为要储存0与1一位就足够了。\n\n程序会使用布尔值来选择下一步运行哪个代码，代码执行会在第六章（C语言控制语句：循环）与第七章（C语言控制语句：分支结构与跳跃结构）更详细地讲到，所以我们到那个时候再讨论这个问题。\n\n### 3.4.5 可转移的类型：`inttypes.h`\n\n还有更多的整数类型吗？没有了，但是还有更多你可以使用与已经存在的类型的名字。你或许会认为你已经看到的整型名已经很多了，但是原本的名字确实存在问题。知晓一个变量是`int`并不会让你了解它会占用多少内存，除非你检查了系统的描述文件。为了解决这个问题，`int16_t`可以声明一个16位的有符号整型，`uint32_t`声明了一个32位的无符号类型。\n\n要让这些名字可用，你需要包含一个`inttypes.h`头文件（注意在这一版时候已经有了，但是一些编译器上还不支持这个功能），这个文件使用了`typedef`（第一次讲到是在第五章：运算符、表达式与语句），来创造新的类型名。例如，它会让`uint32_t`成为基本类型的一种别名或者同义替换，有可能是`unsigned int`也有可能是`unsigned long`。你的编译器会提供一个与你的计算机系统协调的头文件，这些新的设计被称为***精确长度类型***，例如，`int_least8_t`会是最小的类型，它可以承载8位的有符号整型值。如果某个系统上最小的类型是8位的。`int8_t`类型是不会被定义的，但`int_least8_int`是可以被定义的，或许会被实现为16位的整型。\n\n当然，一些编程人员会更关心速度而不是空间。对于它们，C99定义了允许快速计算的一系列类型，它们被称为***最快最小长度类型***，例如，`int_fast8_t`会被定义为你的系统上能够最快运算的8位有符号值。\n\n最后，对于其他的编程人员，只有系统上最大的一些整型才有用，`intmax_t`就代表了那种类型，它可以储存任何合法的有符号整型值，同样，`uintmax_t`会代表可用的最大的无符号类型。这些类型有时是比`long long`或者`unsigned long`还要长的，因为C语言实现是准许定义超过需要的类型的。\n\nC99不仅提供了这些新的而且可运输的类型名，它还有有利于输入输出的符号表示。比如说，`printf()`对于每一种类型都需要特别的修饰符，所以你要打印`int32`，你要使用的是`%d`还是`%ld`？不同的机器的标识符并不一样，但没问题，C99标准下是有字符串宏命令来打印这些值的，我们会在第四章详细讲述的。例如，`inttype.h`头文件会将字符中的`PRId16`作为对于不同对应的类型的合适的格式化符。（例如hd（`short`）或者d），例3.6是一个讲述了如何使用可运输类型与相对应的格式化符的简单的例子。\n\n![例3.6](/img/Listing3.6.png)\n\n在最后的`printf`语句中，`PRId16`被`inttypes.h`对`hd`的类型定义替换了，把这一行代码变成了这个样子。\n\n![](/img/turning1.png)\n\n但是C语言需要连贯的字符串，所以引号需要是连续的，然后这一行就变成了这个样子。\n\n![](/img/turning2.png)\n\n这就是输出，注意这个例子也使用了`\\\"`转义字符来打印双引号。\n\n![](/img/out3.png)\n\n参考单元VI“更多的整型”提供了`inttypes.h`头文件添加的内容的完整解释，也列举了所有的格式化宏。\n\n![](/img/C99sup.png)\n【C99支持】\n编译器供应商已经开始以不同的速度与顺序开始实现C99的新特性了，但在这本书出来的时候，一些编译器还没有实现`inttypes.h`的头文件与特征。\n\n### 3.4.6 `float, double`与`long double`类型\n对于大多数的软件开发项目来说，这些多种多样的整型已经能够很好地满足要求了。但是，对于财务或者面向数学的程序，我们通常会使用***浮点数值***，在C语言中，这些数字就对应着`float, double, long double`这几种类型，对应着FORTRAN与Pascal语言中的`real`类型。使用浮点数，正像上文所说，能够让你呈现更大范围的数字。包括十进制小数值。浮点数值的表示与***科学计数法***是很相似的，那是科学家用来表示非常大或者非常小的数字的一种体系。\n\n在科学计数法中，数字会被表示成十进制数乘10的整数幂，这里就是一些例子。\n\n![](/img/sciennotation.png)\n\n第一列是通常的表示方法，第二列是科学计数法的表示，第三列是质数的表示方法，或者说是***e - notation（e表示法）***，通常是给计算机或者计算机写的，在e的后面是10的指数，图3.7展示了更多的浮点表示法。\n\nC语言标准规定了`float`类型应该至少能够代表6位有效数字并且范围在10的-37次方到37次方。第一个要求的意思是，比如一个`float`必须要精确地表示至少前六位有效数字，就像33.333333。如果你喜欢使用较大或者较小数字（2.0e30（太阳质量）或1.6e-19（元电荷））的话，第二条要求会为你提供方便。通常，系统会使用32位类储存一个浮点类型的数字，8位用来给予指数值与符号，24位来表示非指数部分，叫尾数或者有效数字与它的符号。\n\n![一些浮点数表示](/img/Figure3.7.png)\n\nC语言也有一个`double`（双（double）精度）浮点型，`double`类型与`float`类型需要的最小值是一样的，但是它把最小值的有效数字位数拓展到了10位。通常的`double`表示会使用64位而不是32位，一些系统会使用32个位来表示非指数部分，这也就增加了数字有效的有效数字位数，减少了取整错误。其他的系统会使用一些位储存更大的指数，这也就增加了可以容纳数字的范围。每一张方法都至少有13位的有效数字，不只能满足最小标准的要求。\n\nC语言还允许你使用一种浮点类型：`long double`，目的就是进一步增加`double`类型的准确度。但是C语言只保证`long double`至少与`double`类型的精度是一样的。\n\n#### 3.4.6.1 声明浮点变量\n\n浮点变量与它们的整型兄弟的声明与定义的方式相似，这里是一些例子，\n\n![](/img/floatdeclare.png)\n\n#### 3.4.6.2 浮点常量\n\n当你书写一个浮点常量时，你会有很多的选择，形式是很多，有符号的一串数字。包括十进制的小数点，或是由e或者E跟着的10的指数。这里是两个合法的声明浮点类型的例子。。\n\n![](/img/twoexam.png)\n\n你可以遗漏正号，没有关系（2E5）或者可以遗漏指数部分（19.28），但是并不能同时存在。你可以遗漏小数部分或者整数部分，但也不能全都没有（那也不剩什么了。）下面是更多的合法的浮点常量。\n\n![](/img/morevalid.png)\n\n在使用浮点常量的时候，不要乱添加空格。\n\n![错的](/img/nospaces.png)\n\n一般来说，编译器会认为浮点常量都是`double`精度的，假设`some`是一个`float`类型的变量，并且你有下面的一行代码。\n\n![](/img/codeline.png)\n\n`4.0`与`2.0`都是以`double`类型储存起来的，一般每一个使用64位，结果是使用浮点运算获得的，而且只有结果转换成了正常的`float`大小范围内才可以使用`float`。这也就为运算提供了准确度，但是会让你的程序变慢。\n\nC语言还是你能够超越默认方法，你可以使用f或者F后缀来让编译器把一个浮点常量储存为`float`类型，比如`2.3f`与`9.11E9F`还有`l`或者`L`后缀，可以储存为`long double`类型，例如`54.3l`，`4.23e4L`。注意的是，比起`l`，`L`更不容易被看成`1`，如果浮点数没有后缀，它的类型就是`double`。\n\nC99添加了表示浮点数的另一种方式，它是使用十六进制来表达的（0x或者0X加上十六进制数）。那样指数就是`p`或者`P`而不是`e`或者`E`了，指数是2的，也不再是10的了。这就是数字看起来的样子。\n\n![](/img/lookslike.png)\n\n`a`是十进制的10，`.1f`是1/16加上15/256，然后`p10`是2的10次方，或者1024，用十进制表示这就是10364.0。\n\n并不是所有的编译器都已经支持C99的特性了。\n\n#### 3.4.6.3 打印浮点数值\n\n`printf()`函数会使用`%f`格式化符来打印`float`与`double`类型的数值，这个符号使用的是十进制小数符的表示方法，还可以使用`%e`来使用指数表示法来打印它们，如果你的系统支持C99中提供的小数的十六进制格式，你就可以使用`a`或者`A`代替`e`与`E`。`long double`类型是以`%Lf`或者`%Le`与`%La`标识符来分别使用这三种方式的。需要注意的是，`float`与`double`都可以使用`%f, %e, %a`标识符来输出。这是因为当一个`float`类型的变量作为语句传递到任何函数时，C语言会自动把它转化成`double`类型，而不是它本来的类型，比如说`printf()`函数就是一个例子。例3.7说明了这种行为。\n\n![例3.7](/img/Listing3.7)\n\n这里是输出：\n\n![](/img/out1.png)\n\n这个例子说给出了默认的输出，下一章会讨论如何通过设置输出域长度与十进制的位权数，控制输出的外形。\n\n#### 3.4.6.4 浮点上溢与下溢\n\n可能最大的`float`类型就是值大概是3.4E38，然后你执行了下面的代码。\n\n![](/img/toobig.png)\n\n输出（个人测试）\n\n![](/img/INF.png)\n\n发生了什么？这就是***溢出***的一个例子-运算得出的结果大到无法表示。对于这种情况，这种行为之前是没有被定义的，但是现在C语言指定`toobig`是一个几乎代表***无限***的数字，`printf()`就会显示`inf`（infinity）（或者那个样子的一些变体）\n\n那么如果是要分辨非常小的数字呢？这是会遇到更多的情况。你可以记起`float`是以指数部分与数字部分（或尾数）来储存的。如果会有一个数字有着最小的指数与最小的值，而且仍然可以使用所有可以使用的位来表达尾数，在`float`的精度范围内表示，这就是`float`类型下的最小值。现在我们把它除2，一般地，这会减少指数，但是指数也是能够表达的最小值了。所以就要到尾数的空余位那里减了，把第一位清空，然后丢掉最后的二进制值，类比一下就是，用四位有效数字的10进制值，比如`0.1234E-10`，除10，结果就是`0.01234E-10`，你就可以得到答案了，但是你会在这个过程中丢掉一个数字。这种情况就叫做下溢，C语言对于失去完全精度的浮点数值叫做***subnormal***（反常值）。所以把最小的正常浮点值除2就会有反常值。如果你除了一个太大的数字，你就会失去所有的精度，最后只剩下0，C语言库现在提供了函数来检查是否你的运算产生了反常数值。\n\n这里还有另一种特别的浮点值，`NaN`。例如你给予`asin()`函数一个名字它会返回所给数值的sin值，但是sin的数值并不能大于1，所以函数对于大于1的数值是未定义的，在这种情况下函数就会返回`NaN`值，那会被`printf`打印为`nan`、`NaN`或者相似的东西。\n\n![四舍五入问题](/img/drop4in5.png)\n拿一个数字，加1，然后减去原来的数，你会得到几？肯定是1是吧？像下面的浮点运算给予了你不同的答案。\n\n输出是这个样子的：\n\n![](/img/alldevices.png)\n\n这三种奇怪的结果的原因是电脑并不能够跟踪需要多少十进制空间来进行恰当的运算，2.0e20是2后面跟着20个0，通过加1的操作，你要改变这个数字的第21位数字，要正确地执行这个操作，程序需要能够储存21位数字的类型，`float`类型数通常只是六位或者七位数带着指数这个范围（最后的一位只能是0，不能改变）所以这种尝试在劫难逃。另一方面，如果你使用2.0e4的话你就可以得到正确的结果，因为你改变的是第5位数，`float`类型的精度允许你这样做。\n\n### 3.4.7 复数与虚数类型\n\n许多科学与工程运算会使用复数与虚数，C99为这些数提供了支持，（with some reservations），它是一个独立的实现，就像内置预处理命令一样，不需要其他类型的支持。（VCR芯片很可能并不需要复数来工作）。并且，更一般地。虚数类型是可选择的。简单来说，有三种复数类型，`float_Conplex，_Complex`与`long double _Complex`，举个例子，一个`float _Complex`变量，会包含两个`float`类型的值，一个代表复数的实部，另一个代表虚部。相思地，有三种虚数类型，它们叫做`float _Imaginary, double _Imaginary`与`long double _Imaginary`。\n\n包含`complex.h`头文件可以使你把`_Complex`与`_Imaginary`分别更换为`complex`与`imaginary`。而且还能够让你使用I来代表-1的平方根。\n\n### 3.4.8 超越基本类型\n\n这样我们已经讲完了一系列基本的数据类型了，对于你们其中一些人来说，数据类型可能很多，还有一些人可能会想着还需要其他的类型，比如说字符串类型。但C语言并没有。但是还是能够很好的处理字符串，你会在第四章第一次见到字符串。\n\nC语言确实有其他的类型，他们是从基本类型中衍生出来的。这些类型包括数组、指针、结构体、联合体。即使它们都是后面章节才要讲到的，我们已经在这一章的例子中已经偷摸添加了一些关于指针的东西了。（指针会指向变量或者其他数据对象的地址，`scanf()`中使用的`&`前缀就会创造一个指针，他会告诉`scanf()`在哪储存信息）\n\n![](/img/basicdata.png)\n**总结：基本数据类型**\n\t**关键字**：\n\t基本的数据类型是由11个关键字组成的：`int, long, short, unsigned, char, float, double, signed, _Bool, _Complex, _Imaginary`\n\t**有符号整型**：\n\t可以是整数值也可以是负值\n\t1. `int`- 系统给定的基本整型。C语言保证`int`至少有16位。\n\t2. `short`或`short int` - 最大的短整型不大于最大的`int`，并有可能更小，C语言保证`short`类型至少有16位。\n\t3. `long`或`long int` - 能够保存至少`int`的最大值大小的数，可以更大。C语言会确保`long long`类型至少有32位。\n\t4. `long long`或`long long int` - 这个类型至少能够保存`long`类型数的最大范围，可以更大，`long long`类型最小64位。\n\n通常，`long`类型是比`short`类型更短的，`int`会与他们之中的一个一样大。例如，以DOS系统为基础的PC系统，`short`是16位长的，而`int`是32位长的，以Windows 95为基础的系统会提供16位的\n`short`，而`long`与`int`类型是32位的。\n\n如果你喜欢的话，你可以在任何有符号类型前使用`signed`关键字，将它们有符号这个事实显露出来。\n**无符号整型：**\n\t这些类型只能从0到整数，因为去掉了符号位，这种类型的范围得到了扩大，使用关键字`unsigned`可以把你想要的类型变为无符号类型：比如`unsigned int, unsigned long, unisgned short.`单个的`unsigned`与`unisgned int`是一样的。\n**字符：**\n\t它们是像`A, &`这样的印刷字符。在定义上，字符类型会使用1个字节的内存来代表一个字符。在以往，字符字节大多数是8位，但现在它可以是16位或者更大，可以迎合使用的基准字符集的大小。\n\t\t**char** - 这种类型的关键字，一些实现中会使用有符号的`signed char`，但其他还是使用无符号字符。C语言允许你使用`signed`或者`unsigned`来划定你想要的类型。\n**布尔类型：**\n\t布尔值代表`true`与`false`，C语言会使用0与1代表这两个值。\n\t\t**_ Bool** - 是这种类型的关键字，它是一个无符号整型，只需要保存0与1这两个值的内存。\n**实数浮点型：**\n\t可以正数、负数或者零。\n\t\t[`float`] 是系统的基本浮点类型，可以至少呈现6位精确的有效数字。\n\t\t[`double`] 一种（可能是）更大的浮点储存单元，允许更大的有效数字位数（至少10位，通常会更多。）而且有可能比float也有更多的指数位数。\n\t\t[`long double`] 一种（可能是）更大的浮点储存单元，它可能允许更多的有效数字位数，也有可能有着比`double`类型更大的指数部分。\n**复数与虚数浮点型：**\n\t虚数类型是可以选择的，实部与虚部是基于实数类型的：\n\t\t`float _Complex`\n\t\t`double _Complex`\n\t\t`long double _Complex`\n\t\t`float _Imaginary`\n\t\t`double _Imaginary`\n\t\t`long double _Imaginary`\n\n![](/img/Summary.png)\n\n**总结：如何声明一个简单的变量**\n1. 选择你需要的类型\n2. 使用允许的字符为你的变量起个名字\n3. 使用以下形式的声明语句\n```C\n\t//type-specifier variable-name;\n\t//类型标识符 变量名;\n\tint Iint1;\n```\n4. 你可以通过用逗号把变量名隔开来声明多个变量，下面就是一个例子。\n```C\n\tchar ch, init, ans;\n```\n5. 你可以在声明语句中对变量进行初始化：\n```C\n\tfloat mass = 6.0E24;\n```\n\n### 3.4.9 类型大小\n\n表3.3与3.4展示了一些C语言环境下的类型大小（在一些环境中，你可以选择）你的系统是什么样子的？尝试运行例3.8中的程序，你会弄明白的。\n\n![表3.3与3.4](/img/Twotables.png)\n（分别是整型与浮点型的大小。）\n\n对于每一种类型，最上面的一行是有效数字的位数，第二行是指数的范围（十进制）。\n\n```C\n//(例 3.8)\n#include <stdio.h>\n\nint main(void)\n{\n\t/*C99为大小提供了%zd格式化符*/\n\tprintf(\"Type int has a size of %u bytes.\\n\", sizeof(int));\n\tprintf(\"Type char has a size of %u bytes.\\n\", sizeof(char));\n\tprintf(\"Type long has a size of %u bytes.\\n\", sizeof(long));\n\tprintf(\"Type double has a size of %u bytes.\\n\", sizeof(double));\n\treturn 0;\n}\n```\n\nC语言有一种内置的运算符，它叫`sizeof()`，它会给出以比特为单位的大小范围。（一些编译器需要`%lu`而不是`%u`来打印`sizeof`数值，这是因为C语言对于`sizeof`用来报告的真实的无符号整型是有多个范围的。C99对于这种类型给出了`%zd`标识符，如果编译器支持的话你应该使用这个。）例3.8的输出是这个样子的。\n\n![](/img/sizes.png)\n\n这个程序只发现了4种类型的范围，但是你可以简单修改一下这个程序来找寻你感兴趣的任何一种类型，要注意的是`char`类型的大小一定是1个字节，因为C语言对于`char`类型定义的就是一个字节。所以在有16位的`char`与64位的`double`的系统上，`sizeof`会报告`double`类型有4个字节的大小。你可以看看limits.h与float.h头文件来获取更多关于类型最大最小值的细节信息。（下一章会进一步阐述这两个文件。）\n\n顺便一说。看看最后一行`printf()`是如何延伸到两行的，只要不是在双引号部分或者在一个单词的中间断开，你可以这样做。\n### 3.4.10 可用数据类型\n\n当你正在开发一个程序时，需要注意你需要的变量与它们应该使用的类型。大多数情况，你可以使用`int`或者`float`来表示一个数，用`char`来表示字符，在使用它们的函数的开头先声明好它们。为变量取一个能够暗示它们的意义的名字。初始化一个变量时，也要让变量类型与赋给的常量类型匹配。这里就是两个例子。\n\n```C\n\tint apples = 3;\n\tint oranges = 3.0;\n```\n\nC语言对于类型不搭配比起Pascal是很宽容的，C语言的编译器允许你进行二次初始化，但是它们有可能会引起报错，尤其是当你触发了一个高级警告时。最好不要养成这种马马虎虎的习惯。\n\n当你使用其他类型的值给一个数字类型的值初始化时，C语言会将这个值进行转化，来让它与这个变量的类型相配。这也就意味着你有可能会失去一些数据，比如思考一下下面的初始化过程。\n\n```C\nint cost = 12.99;        /*使用double值来初始化int*/\nfloat pi = 3.1415926536; /*使用double值来初始化float*/\n```\n\n第一个声明语句会将12赋给`cost`变量，当把浮点数转换为整数值时，C语言简单地把小数部分丢掉（截断），而不是四舍五入。第二行的声明会失去精度，因为`float`类型是只能呈现小数点后6位精确数的。如果进行这样的初始化，编译器有可能会发出一个警告（但不是一定会发），你有可能在编译例3.1的时候遇到这个问题。\n\n许多的编程者与组织人员拥有设置变量名称的体系化传统方法，按照这种方式就可以显示出变量的类型。例如你可以使用`i_prefix`来表示这是个`int`类型变量，同理`us_`来表示`unsigned_short`，这样的话对于类型就好辨认一些。\n\n### 3.4.11 参数陷阱\n\n在这一章的前半部分，有一个关于`printf()`使用的警告还是很值得重复强调的。你可能还记得传递给函数的信息在术语上称为参数。例如，`printf(\"Hello, pal.\")`就有一个参数：`\"Hello, Pal.\"`。我们把在双引号中的一系列字符叫做***字符串***，我们会在第四章讨论。现在的重点是，一个字符串，即使包含着好几个单词与标点符号，也仍然被算作是一个参数。\n\n相似地，`scanf(\"%d\", weight)`有两个参数：`\"%d\"`与`&weight`。C语言会使用逗号来分开函数中的各个参数，`printf()`与`scanf()`函数还挺不寻常的，它的参数数量是不限的。例如，我们曾经在使用`printf()`时传递过一个、两个甚至是三个参数。对于一个恰当运行的程序，它需要知道参数的数量。`printf()`与`scanf()`函数会使用第一个参数来表达之后会有多少个其他的参数。这里的诀窍就是在最前的字符串中的每一个格式化符都代表着后面有一个参数，例如下面的语句就有两个格式化符：`%d`与`%d`：\n\n```C\nprintf(\"%d cats ate %d cans of tuna\\n\", cats, cans);\n```\n\n这也就告诉程序后面要接收两个额外的参数，而且后面确实有两个——`cats`与`cans`。\n\n作为一个编程人员，你的责任就是确保格式化符的数量与其他的参数的数量相同，类型相同。C语言现在已经有函数原型机制了，它能够检查一次函数调用是否使用了正确的数字与正确的参数类型，但是对于`printf()`与`scanf()`是不适用的，因为它们参数的数量是可变的。当你并没有接收程序员的负担会怎样呢？举个例子，假设你写了例3.9那样的程序。\n\n![例3.9](/img/Listing3.9.png)\n\n下面是从微软VisualC++ 7.1（WinXP系统）上运行的结果\n\n```Bash\n4\n4 34603777\n0 0.000000\n```\n\n这是在Digital Mars（WinXP系统）上运行的结果\n\n```Bash\n4\n4 4239476\n0 0.000000\n```\n\n这是在Metrowerks Codewarrior Development Studio 9（MacOSX系统）\n\n```Bash\n4\n4 3327456\n1075052544 0.000000\n```\n\n你可以看到，使用`%d`来表示一个`float`类型的值并不会将它变成最近的`int`类型值，而是直接输出垃圾值。相似地，使用`%f`来表示一个`int`类型的值也并不会将整数转化为浮点数值。参数太少或者类型不对得到的结果不同的平台也不一样。\n\n没有一个编译器对于这个代码有报错或者警告，在运行时也没有。一些编译器确实会捕捉到这种错误，但是C语言标准并没有要求它们这样做。因此，电脑就不一定能够补货到这种类型的错误，因为程序反而还能够正常地运行，你也不一定能够注意到这种错误。如果程序并没有打印正确的数值数量或者是数值，那就回去看看`printf()`的参数数量与类型是否使用正确。（顺便一说，Unix语法检测程序lint，它比Unix编译器检查得更加细致，能够对于`printf()`的参数错误进行报错）。\n\n## 3.5 又一个例子：转义序列。\n\n让我们在程序中打印更多东西吧，这一次我们会使用C语言中的一些针对于字符的特殊转义序列。尤其地，例3.10中的程序显示了回车符(`\\b`)，水平制表符(`\\t`)以及回行符（`\\r`）是怎么工作的。这些概念要追溯到电脑还在使用电传打字机的时代，它们并不总是会在现代的图形界面上正确地翻译。例如，例3.10在一些Mac系统的实现上就不能够按照想要的方式来运行。\n\n![例3.10](/img/Listing3.10.png)\n\n### 3.5.1 当程序运行的时候发生了什么？\n\n让我们一步步地浏览这个程序，好让它能够在ANSI实现下运行。第一个`printf()`函数语句（标`1`的那个）会发出警告信号（由`\\a`引起），然后会打印如下的句子：\n\n```Bash\nEnter your desired monthly salary:\n```\n因为在字符串最后没有`\\n`符号，所以光标还是在冒号后面。\n\n第二个`printf()`语句会接着第一句结束的地方开始，所以当它执行完毕时，屏幕上看起来是这个样子的。\n\n```Bash\nEnter your desired monthly salary: $______\n```\n\n在冒号与美元符号之间有一个空格，因为第二个`printf()`的字符串是以空格开始的，7个退格符的作用是把光标向左移动7个单位。这就会将光标移到下划线字符前面，正好放在美元符号后面。通常地，退格符并不会移除前面的字符，但是有一些实现是有可能移除的，那样这个小练习就没有用了。\n\n现在，你会输入你的回答，比如说你输入了`2000.00`，那么这一行看起来就会是这个样子。\n\n```Bash\nEnter your desired monthly salary: $2000.00\n```\n\n你输入的字符将会覆盖换行符，而且当你点`Enter`键（或者`Return`）来输入你的回答时，光标就会跳转到下一行。\n\n第三个`printf()`语句是以`\\n\\t`开始的，换行符将会将光标移动到下一行的最开始，而tab键通常会将光标移动到那一行的下一个制表位（但并不是一定），也就是第9列。然后字符串的剩余部分就会被打印下来。在这个语句执行之后，屏幕上看起来就会变成这样。\n\n```Bash\nEnter your desired monthly salary: $2000.00\n\t$2000.00 a month is $24000.00 a year.\n```\n因为这个`printf()`语句并没有使用换行符，光标还是在这一句的最后位置。\n\n第四个`printf()`使用了`\\r`符号，它会将光标移动到一行的开头位置，这个语句执行之后屏幕上就成了这样。\n\n```Bash\nEnter your desired monthly salary $2000.00\nGee!    $2000.00 a month is $24000.00 a year.\n```\n\n### 3.5.2 输出清理\n\n`printf()`函数什么时候才会将输出发送到屏幕上呢？首先，`printf()`语句会将输出发送到***缓冲区***，时不时地，在缓冲区的内容就会被发送到屏幕上。对于输出什么时候从缓冲区发送到屏幕上，基础的C语言规则已经很清晰了：当缓冲区被充满时，当遇到一个换行符的时候，以及当有即将发生的输出行为时。（从缓冲区发送输出信息到屏幕或者是文件上叫做***刷新缓冲区***），例如，最先的两个`printf()`函数语句并不会填充缓冲区，也并没有包含换行符。在那种情况下，你可以使用一个换行符来刷新缓冲区，那样的话代码就可以写成这个样子：\n\n```C\nprintf(\"Enter your desired monthly salary: \\n\");\nscanf(\"%f\", &salary);\n```\n\n 不管即将到来的输入信息是不是会刷新缓冲区，这几行代码都是可以正常工作的。但是，它也会将光标移到下一行，防止你把数据与提示字符串写到一行。另一种方式是使用`fflush()`函数，它会在第13章，文件输入与输出中讲到。\n\n# 关键概念\n\nC语言有着许多种数字类型，这也反映了C语言避免让编程人员陷入障碍的目的。比起用一种类型包管全部数字类型，C语言尽力给予编程人员对于数字的特定种类（比如说有符号与无符号），以及最能够适合特定程序的数字范围大小的选择。\n\n在一台电脑上，浮点数与整型的基础是不一样的。它们会被以不同的形式储存于处理。两个32位的内存单元能够保存相同的位形式（二进制数表示是一样的。）但是如果其中一个被理解为`float`而另一个被理解为`long`，这两个内存单元就会代表完全不同也不相关的两个数，例如在个人电脑上，如果你使用代表256.0的浮点储存单元，但是让它被理解为long，你就会得到113246208这个数。C语言确实允许你使用多种数据类型来书写表达式，但是它会自动进行类型转换，所以真正的运算只有一种数据类型。\n\n在电脑内存中，字符是以数字编码的形式呈现的，ASCII码是美国最常用的数字代码标准，但是C语言也支持其他代码集。字符常量是电脑上数字编码的符号表示-它是由单引号框定的单字符，比如`'A'`。\n\n# 总结\n\nC语言有各种各样的数据类型，基本的数据类型可以分为两类：整型与浮点型，对于整型，两个最鲜明的区分就是分配给不同类型的储存空间，还有是否有符号。最小的整型是`char`，它可以有符号，也可以没有，这取决于不同的C语言实现，你可以根据自己的需求来选择`signed char`与`unsigned char`，但是那通常是在你使用范围比较小的数字的情况下，而不是使用字符编码时。其他的整型还有`short, int, long, long long`等。C语言确保了所有的类型都至少会与它前面的类型一样大，它们都是有符号类型，但你还是可以加上`unsigned`修饰符来创造相应的无符号类型：`unsigned short, unsigned int, unsigned long, unsigned long long`或者你也可以使用`signed`修饰符来明显地写出它是有符号的。最后，还有`_Bool`类型，一种无符号类型，它只能保存0与1，分别代表着`false`与`true`。\n\n浮点类型有三种，分别是`float, double`与在ANSI C中的`long double`，每一个类型也是至少比它前面的那个类型一样大的。要是想的话，你也可以用`_Complex`与`_Imaginary`与浮点类型关键字连用，来使用虚数与复数类型。例如，有`double _Complex`与`float _Imaginary`类型。\n\n整型可以被以十进制、八进制与十六进制的形式被输出，开头写0可以使一个数变为八进制数，写0x或者0X可以变为十六进制数。例如`32, 040`还有`0x20`就分别是十进制、八进制与十六进制的数字，但是它们代表的都是同一个值。另外使用`l`或者`L`符号可以声明一个`long`类型的常量值，`ll`或者`LL`可以声明一个`long long`类型的值。\n\n字符常量是由单引号及其中的字符代表的：比如`'Q', '8'`。字符还包括转义序列，比如`\\n`，它们代表着不会被打印出来的特定字符，你可以使用类似`\\007`的形式来使用ASCII码的形式来代表字符。\n\n浮点数可以以十进制小数点的形式来表示，也可以以指数符号的形式来表示，例如`7.38E10`。\n\n`printf()`函数能够让你利用格式化转换符，以最简洁的方式打印各种各样的数值，它由一个百分号符`%`与一个表示类型的字符组成，比如`%d`或者`%f`。\n\n# 回顾问题\n\n你会在附录A中找到这些问题的答案。\n1.你对于这几种数据你会使用哪种数据类型？\n\n>1.东斯普尔顿的人数 -- int类型（16位即可）\n>2.在DVD上电影的价格--float类型\n>3.这一章最常见的字母--char类型\n>4.一个字母在这一章中出现的次数。-- int类型（。）\n\n2.为什么有时候你会使用`long`而不是`int`。\n\n>有些时候表示的范围会更大，但是并没有超过`long`，使用`long`类型可以保证数据因为存放不下而溢出，从而导致不同机型显示不一而且不会报错的问题。\n\n3.如果你想要得到一个32位有符号的整型，你会使用哪种可转移的类型，请写出所有类型，并说说每一种的合理性。\n\n>1.在`<inttypes.h>`中的`int32_t`类型\n>2.基本类型中的`long`或者`int`类型（对于`int`来说不一定）\n\n`long`合理，因为关键字更简洁容易记，格式化符也不容易弄错\n（`int32_t`为`PRId32`,`long`为`%ld`）\n`int32_t`能够让编程人员选择适合的大小范围来进行编程，便于大小的记忆。\n\n4.确认每种类型与它的含义。\n\n>1.`'\\b'`回车符（转义序列）\n>2.`1066`一个整数，一千零六十六\n>3.`99.44` 一个两位小数，九十九点四四\n>4.`0XAA`，十六进制数，10 * 16 + 10 = 170.\n>5.`2.0e30`，指数形式的小数，2 * 10^30(10的30次方)\n\n5.Dottie Cawm 编造了这个满是错误的程序，请找到这个程序中问题。\n\n```C\ninclude <stdio.h>\n\nmain\n{\n\tfloat g; h;\n\tfloat tax, rate;\n\n\tg = e21;\n\ttax = rate * g;\n}\n```\n\n（实在是太明显了啊。。）\n1.include前面忘了#\n2.main。。。（int main(void)，或者void main()）\n3.g后面用了分号来分隔，相当于h未规定类型。\n4.应该是1e21，e21啥也不是。\n5.tax类型与g的类型大小都太小了，应该用double，float表示不了精确的21位数，或者直接使用long long也可以，反正是整型。\n6.忘了写`return 0;`\n\n6.确定下面几种常量数据的类型，与打印他们所使用的格式化标识符。\n![](/img/Identifytypes1.png)\n\n>·····12为整型，（int（作为常量，默认为int）），输出可以使用`%d`,`%hd`,`%u`,`%LLu`,`%lu`。\n>·····`0X3`，十六进制数，`%X`\n>·····`'C'`，字符常量，`%c`\n>·····`2.34E07`,后面看成八进制，但仍然是7，小数的指数形式，用`%f`或者`%lf`都可以。\n>·····`\\040`,十进制的040为32，此即`32`,即`' '`（空格字符）\n>·····`7.0`，一位小数，可以使用`%f`或者`%lf`\n>·····`6L`,为`long`形式整型，可以使用`%ld`输出。\n>·····`6.0f`,为`float`形式小数，可以使用`%f`。\n\n7.同上\n![](/img/Identifytypes2.png)\n>·····012，八进制数，十进制下为10，可以用`%o`输出。\n>·····2.9e05L，`long double`，2.9 * 10^5.\n>·····`'s'`,字符常量，用`%c`.\n>·····`100000`,`32`位的`int`，`%ld`，或者`%lu`或者更大的类型`long long`。\n>·····`'\\n'`,转义序列换行符，直接打印即可。\n>·····20.0f，`float`类型，`%f`。\n>·····0x44，十六进制数，68.用`%x`输出。\n\n8.假设你的程序是以这几行声明语句开头的。\n```C\nint imate = 2;\nlong shot = 53456;\nchar grade = 'A';\nfloat log = 2.71828;\n```\n\n在下面的`printf()`函数语句中填入适当的格式化符。\n```C\nprintf(\"The odds against the %__ were %__ to 1.\\n\",imate, shot);\nprintf(\"A score of %__ is not an %__ grade.\\n\", log, grade);\n```\n\n```C\nprintf(\"The odds against the %d were %ld to 1.\\n\",imate, shot);\nprintf(\"A score of %f is not an %c grade.\\n\", log, grade);\n```\n\n9.假设`ch`是一个字符变量，展示一下如何将回行符通过转义序列、十进制数值与八进制及十六进制字符常量的形式赋给ch的。\n\n```C\nchar ch;\n\nch = '\\r';\nch = 13;\nch = '\\0x0D';\nch = '\\015';\n```\n\n10.纠正这个愚蠢的程序。\n![\"Perfect...\"](/img/Perfect.png)\n（在C语言中`\\`表示除）\n\n1.未指定形式参数的变量名。（main(int a)）\n2.注释符号没用对（要么`//`,要么`/**/`.)\n3.声明变量使用关键字。（`int cows, legs;`）\n4.`printf()`字符串缺少了右边的引号。\n5.`scanf()`少了取地址符`&`，而且legs的输入形式写错了，为`'%d'`\n6.`printf()`格式化符为`%d`。\n\n11.说说下面的转义序列代表啥意思？\n\n1. `\\n`,换行符，10.\n2. `\\\\`,相当于`\\`.\n3. `\\\"`,相当于`\"`.\n4. `\\t`,相当于tab键。\n\n# 编程训练\n\n1.通过实验方式，弄清你的电脑是如何处理整型上溢、浮点数上溢以及浮点下溢的，也就是写一个拥有数据溢出问题的程序。\n\n![](/img/overnunder.png)\n\n这个肯定会溢出，可以修改程序看看会发生什么。\n我观察到的是：整型溢出会直接跳到它的最小范围开始加\n比如2146483650 = - 2147483646 \n\n浮点上溢，会失去精度，但是只要未超过位数仍然可以表示，如果把指数调到40就会出INF（infinity），具体可以看上文对于浮点溢出的讲解。。\n\n浮点下溢，会直接被看成0。\n\n2.写一个能够根据你输入的ASCII码值返回对应字符的程序。\n\n![](/img/ASCIIout.png)\n\n包含了转义序列，使用了`switch`与`if`嵌套的结构。\n\n3.写一个能够发出警报声，并且能够打印以下句子的程序。\n\n```Bash\nStartled by the sudden sound, Sally shouted, \"By the Great Pumpkin,\nwhat was that!\"\n```\n\n重点有两个，一个是掌握好换行，可以用一个printf加上一个换行符实现，也可以用两个。\n另一个是如何在字符串内输出\"，这也是我们周赛第一道题的考点\n\n![](/img/alarming.png)\n\n4.书写一个能够读入浮点数据，然后将它先以十进制小数的形式输出，再以指数形式输出。输出类似下方，但指数形式的实数部分是视系统而变的。\n\n![](/img/decimalandexp.png)\n\n5.一年大概有3.156 * 10^7秒，写一个要求你输入以年计数的年龄并将它转化为秒数的程序。\n\n![My life...](/img/lifesecond.png)\n\n6.一分子水大概是3.0 * 10^23克， 一夸脱水是950克。写一个要求你输入夸脱单位的水量，返回水的分子数的程序。\n\n![Too much...](/img/quartmol.png)\n\n7.一英寸是2.54厘米， 写一个要求你输入英寸高度，返回厘米高度的程序。你要是想的话也可以反过来转换。\n\n1.inch to cm\n![](/img/inchtocm.png)\n\n2.cm to inch\n![](/img/cmtoinch.png)\n\n\tEnd...\n\n\n\n\n\n","source":"_posts/C-premier-plus-Chapter-3.md","raw":"---\ntitle: C-premier-plus-Chapter-3\ndate: 2023-12-22 12:11:38\ntags: C_premier_plus\n---\n# 第三章 数据处理\n\n>你会在这一章学到下面的东西：\n>1. 关键字\n>\t`int,short,long,unsigned,char,float,double,_Bool,_Complex\n>2. 运算符\n>\t`sizeof`\n>3. 函数\n>\t`scanf()`\n>4. 整型与浮点型的区别\n>5. 书写常量与声明这些类型的变量\n>6. 如何使用`printf()`与`scanf()`函数来读写不同类型的值\n\n程序依靠数据来工作。你会向电脑输入数字、字母或者单词，然后期望它能够利用这些数据做些事情。例如，你可能想要电脑去计算支付利润或者展示一个排过序的酒商列表。在这一章，你将会不只阅读数据，而且练习着去操纵数据，那是挺有趣的一件事。\n\n这一章还会让你了解到两大类数据类型：整数与浮点数。C语言提供了这些类型的几种变体。这一章会告诉你类型是什么，如何声明它们并且如何利用它们。而且，你会发现变量与常量之间的区别，作为额外奖励，你的第一个交互式的小程序就要诞生了！\n<!--more-->\n\n## 3.1 一个例子\n\n再一次，我们还是从一个样例程序来开始，像以往一样，你会发现一些不熟悉的东西，我们待会就会为你解释。程序的总体目的应该清晰，那么就尝试把图3.1中的源码编译运行下吧。\n为了节省时间，你可以省略注释。\n\n![图3.1](/img/Listing3.1.png)\n\n![错误与警告](/img/ErrandWarn.png)\n【错误与警告】\n如果你把程序的某些部分打错了，还有，比如说，遗漏了一个分号，编译器就会给予你一条语法错误信息。即使你没打错，编译器也有可能给予你一条警告信息，“Warning-conversion from ‘double’ to ‘float’ , possible loss of data.” 错误信息指的是你有可能把某些事做错了，它阻止程序的编译。警告，意思是你写的代码是合法的但是有可能做的并不是你想的那样。警告并不会阻止编译过程。上文中的这条信息就会在C语言在处理像770.0这样的数时出现，但并不是这个例子的问题，这一章过会会解释这条警告。\n\n当你在打字写这个程序的时候，你有可能会把`770.0`改成这种珍贵金属的当前价格。但是不要改变14.5833，那代表着一磅对应的盎司数。（盎司金衡制，是对于贵重金属使用的，常规衡制是给人们使用的，不论是珍贵的物品或是其他的东西。）\n\n需要注意的是“输入”你的体重意味着把你的体重打字写入电脑，并且敲下Enter或者Return键（不要输入完了你的体重就等着。）按下Enter键这个动作告诉了电脑你已经完成了你的应答。这个程序想要你输入一个数字，如`150`而不是单词，比如`too much`，如果你写的是字母而不是数字，那是会导致问题的，而这个问题需要之后学习的`if`语句来解决。（第七章，“C语言控制语句：分支结构与跳跃结构”会讲到），所以请先平静一些，输入一个数字，这里就是一个简单的输出示例。\n\n![输出](/img/Olist3.1.png)\n\n### 3.1.1 例子中的新知识\n\n在这个C语言程序中有这么几个新接触的要素。\n+ 可以注意到的是，代码在变量声明中使用了新的数据类型，前面提到的例子只使用了十进制整数类型(`int`)，但是现在的这个例子使用了一个浮点类型的变量类型，这样的话你就可以处理更大范围的数据了。`float`类型就可以保存含有十进制小数点的数字。\n+ 这个程序给出了书写常量的一些更新的方式，你现在可以书写浮点型的常量了。\n+ 为了对程序提供输入信息，你需要使用`scanf()`函数，`%f`命令`scanf()`从键盘输入中读入一个浮点数，`&weight`告知了`scanf()`函数把输入的值赋给名字叫做`weight`的变量，`scanf()`函数会用`&`符号来寻找在哪里可以找到叫做`weight`的变量，下一章我们会进一步地阐述`&`符号，现在，只需要相信我们你需要在这里添加一个`&`符号。\n+ 可能最突出的新特性就是程序变为交互性的了。电脑会要求你输入信息，并使用你输入的数值。一个交互性的程序是比不能交互的更有趣的。更重要的是，交互的方法让程序更加的灵活。举个例子，样例程序就可以用于所有合理的体重了，而不只是150磅，你不需要换一个人就再把程序重写一遍。`scanf()`函数会从键盘中获取数据，并把数据传递到你的程序，`printf()`函数会从程序中获取数据，然后把数据传递到你的屏幕上。这两个函数在一起就可以让你建立电脑与你的双向联系（见图3,1），这就让电脑使用更加有趣了。\n\n我们会在这一章讲述这些新特点中的前两条，后面的三条内容会在第四章-字符串与格式化输入输出完整地讲到，但是这一章还是会少量地使用`print()`与`scanf()`函数。\n\n![输入输出函数的工作](/img/Figure3.1.png)\n\n## 3.2 变常类型\n\n一台电脑，在程序的指导之下，可以做到很多的事情。可以做加法，可以给名称排序，可以指示讲话者或者屏幕的演出顺序，可以计算彗星的轨道，可以编排你的邮寄列表，拨叫电话号码、画出由小棒组成的人物，得出结论或者其他你可以想象到的可以被创造的东西。为了完成这些任务，程序需要处理***数据***，也就是你使用的保存在程序中的所有数字与字符信息。一些数据类型需要在程序使用之前进行预设，而且保证它们的值是不变的，这些就是***常量***。其他的数据类型的值或许会随着程序运行改变或者被赋给，这些就是***变量***。在这个样例程序中，`weight`就是一个变量，而`14.5833`就是一个常量。那么`770.0`呢？虽然铑金属在真实生活中的价格并不是个常量，但是这个程序把它作为一个常量来处理。变量与常量的区别就在值可不可以随着程序运行发生改变上。\n\n## 3.3 数据类型关键字\n\n讲完了变量与常量的区别之后，我们需要了解一下不同数据***类型***之间的区别。一些数据是数字形式，一些是字母，或者更加普遍的，它们是字符。电脑需要一种方式来确定与使用这些不同的类型。C语言通过对于基本的数据类型的定义完成了这个工作。如果数据是一个常量，编译器通常是可以通过它看起来的样子来区分它的。`42`是一个十进制整数，`42.100`是一个浮点数，在另一面，变量就需要声明语句来声明它的类型。随着学习进行下去，你会了解到关于声明变量的更多细节。但是还是让我们首先先研究一下C语言可以识别的基本类型，K&R C确立了有关于类型的七个关键字，C90标准增加了两个，C99标准又增加了三个。（见表3.1）\n![表3.1](/img/Table3.1.png)\n\n`int`关键字提供了C语言中基本的十进制整数类型，下面的三个关键字(`long, short, unsigned`)还有ANSI添加的`signed`提供了基本类型的变体。接着，`char`关键字指明了用于字母与其他字符的类型，如`%, $, #`等，`char`类型还可以被用来代表大于0与小于10的十进制整数。然后是`float`与`double`，还有两者的混合`long double`是用来代表带有十进制小数点的数字的。`_Bool`类型是为布尔类型提供的(`true`和`false`)，最后是分别代表着复数与虚数的``_Complex``与`_Imaginary`.\n\n由这些关键字创造的类型又可以基于在电脑中的储存类型分为两种，***十进制整数类型***与***浮点数类型***。\n\n![Bits, Bytes and Words](/img/storingtypes.png)\n【Bit（位）、字节与字】\n\n*bit*、*字节*与*字*可以被用来描述电脑的数据单元或者内存单元。我们会集中于第二种用法。\n\n内存的最小单元叫做***bit***，它可以保存`0`与`1`之间的其中一种数值（或者你可以说，这个字节被设为“关”或者“开”）你并不能在一个bit中储存太多的信息，但是电脑可以储存很多的字节，bit就是电脑内存的基础组成模块。\n\n*字节*是电脑内存的一般单元。对于大多数的机器来说，一个字节是8个bi，那是标准的定义，至少当测量内存的时候（C语言有不同的定义，我们会在“使用字符：`char`类型”这一节讲到）因为一个bit不是0就是1，那么在8位的字节中，就可以有256种可能（2的8次方），这些可能的模式就可以被用作比如代表0到255的数字或者代表一系列的字符。在二进制代码下，这种一对一的映射是可以被建立的，而且使用0与1来代表数字也使机器便利的。（在第15章-位运算，会讲述二进制代码，但是如果你想的话现在就可以去读一下）。\n\n*字*是电脑固定设计下的内存自然单元，对于8位的微型计算机，比如原来的苹果电脑来说，一个字就只是8个bit。早期的IBM兼容器使用的80286处理器是16位的机器，这也就是说他们把字长增加到了16bit。还有例如以Pentinum为基础的计算机，还有Mactonish PowerPC的字长是32bit。还有更强大的电脑的字长是64位的或者更大。\n\n### 3.3.1 整型与浮点型\n整型？浮点型？如果你感觉这些词非常不熟悉以至于干扰了你的阅读进度，我们这就要简要描述它们的意义了。如果你对位、字节还有字还是不熟悉的话，你可能需要阅读一下最近描述过的附加栏。你真的需要了解所有的细节吗？并不是，不只了解内燃机驱动车子的工作原理，而多了解一些电脑或者引擎内部发生的事情有时候可以帮到你。\n\n对于一个人来说，整型与浮点型的区别体现在它们是怎么被写下的。对于电脑来说，那就体现在它们是怎么被储存的。让我们依次来研究一下这两种类型。\n\n### 3.3.2 整数类型\n\n***整型***是没有小数部分的数字。在C语言中，整型是没有小数点的数字。比如说-2、-23还有2456。像3.14, 0.22, 还有2.00这些数就不是整型。整型是以二进制数字的形式被储存起来的。比如7就是被储存为二进制数111的。因此，为了在8位字节中储存这个数字，会把前五个位设置为0，然后把后三个位设置为1。    \n\n![用二进制码储存7](/img/Figure3.2.png)\n\n### 3.3.3 浮点数类型\n\n***浮点***数多多少少是对应着数学概念中的***实数***，实数包含着整数之间的这些数字，浮点数基本是这些样子：2.75、3.16E7、7.00、2e-8，需要注意的是，只要有小数点就会把整型数字转换为浮点数，比如7.00是一个浮点数，而7就是一个十进制整数。很明显，书写浮点数的方式不止一种，我们会在之后更充分地讨论用e符号表示的形式。但是简单来说，3.16E7的表示方式意思就是3.16乘10的7次方，也就是1后面添7个0，7也就是10的***指数***。\n\n关键就是储存浮点数的方式与整数不一样。浮点数的表示涉及到把一个数字分开为小数部分与整数部分，然后分别储存。因此，7.00这个数字不会与整数7同样储存，即使它们的值都是一样的。十进制类比起来也就是把7.0写为0.7E1。这里，0.7就是小数部分，1就是指数部分，图3.3展示了浮点数储存的另一个例子。一台电脑当然会使用二进制数与二进制而不是十进制来储存。你会在第十五章了解关于这个话题的更多信息。现在我们先集中精力于在实用上区别吧。\n\n+ 整型没有小数部分，浮点数可以有小数部分。\n+ 浮点数比整数代表的数字更多，可以看一下这一篇结尾的图表3.3。\n+ 对于一些算术运算符，比如一个数减去另一个数，浮点类型的精确度会有更大可能下降。\n+ 因为在任何一个范围之间都有着无数的浮点数，比如在1.0与2.0之间，电脑就不能完全地代替这些值，它用实数的大概值来估计浮点数的值。比如7.0有可能被储存为6.99999的`float`值，过会会讲到更多有关于精确度的知识。\n+ 浮点运算符的优先级通常是比整型运算符要低的，然而用来处理浮点运算的特殊微型处理器已经可用了，这个问题也就得到了解决。\n\n![十进制浮点储存方式](/img/Figure3.3.png)\n\n现在就让我们研究一下C语言中各种数据类型的特点吧。对于每一种类型，我们会描述如何声明一个变量，如何用变量代表一个常量，还有一些特殊的用法。一些年代较早的C语言编译器可能不能支持下文全部的类型，所以你可以查看一下你的编译器的说明书，看一看哪些数据类型是可用的。\n\n## 基本数据类型\n\n### 3.4.1 `int`类型\n\nC语言提供了很多的整数类型，你可能想知道为什么只有一种还不够，答案就是这样C语言就可以让你将特定的变量用在特定的地方。具体来说，C语言的各个整数类型不同在值域的大小与是否含有负数上。`int`是最基本的整数类型，但是你要是为了满足机器任务的特定需求的话，其他的类型也都是可用的。\n\n`int`类型是一种有符号的整数类型，有符号意味着`int`类型的整数可以是正数、也可以是负数，或者是0。`int`类型的值域是取决于计算机系统的，通常一个`int`类型的整数的大小就是内存的一个字长。因此，旧版的16位IBMPC适配器，就可以使用16个位来储存整数，也就是从-**32768**到**32767**。现在的个人电脑一般是使用32位的整数大小，在这张结尾的表3.3可以看到一些个例子。现在个人电脑产业也正在向64位处理器发展，那样也就可以使用更大的整数了。ISO/ANSI C语言特别指出`int`的最小范围应该是-**32767**到**32767**，通常系统会专门拿出一个位来保存符号，第十五章描述这种了一般的方法。\n\n#### 3.4.1.1 声明`int`类型\n\n正像你在第二章看到的，关键字`int`可以用来声明一个基本的整型变量。声明，首先是`int`，然后是变量的名称，最后是一个分号。要是声明多个变量的话，可以分别声明，也可以用逗号分隔，把一系列的变量名列出来，下面的声明方法都是合法的。\n\n![](/img/valid_declaration.png)\n\n你可能已经使用过分别声明变量的方法了，或者你已经尝试在一行中声明全部的变量了。效果都是一样的：就是对四个`int`大小的变量分配空间并与变量名相联系。\n\n这些声明语句创造了变量，但并没有给它们赋值，变量要如何得到值呢？你已经见过两种方法了，第一种是赋值语句\n\n![](/img/assignments.png)\n\n第二，变量也可以使用函数来赋值，比如说`scanf`函数。\n现在我们来了解一下第三种方法吧。\n\n#### 3.4.1.2 变量初始化\n\n对变量进行***初始化***也就是给变量赋起始值，或者初值。在C语言中，这可以作为声明的一部分，只需要在变量名后加上赋值运算符还有你想要赋给这个变量的值就可以了。下面是一些例子。\n\n![](/img/initialization.png)\n\n在最后一行，只有`cats`被初始化了，速读一遍，你有可能觉得dogs也会被赋值为94，所以还是最好避免把未赋值与已赋值的变量放在一行之中吧。\n\n简单来说，这些声明会为变量创造空间，并为它们贴上变量类型的标签，而且还可以给赋变量起始值。（见图3.4）\n\n![图3.4](/img/DefinenInitial.png)\n\n#### 3.4.1.3 `int`型常量\n\n在上一个例子中各种各样的整数（21、32、14、94等），就是整型常量。当你书写一个没有十进制小数点并且没有指数的数时，C就会将这个数认作整型常量。因此，22与-44都是十进制整型常量，但是`22.0`与`2.2E1`就不是。C语言会把大多数整型认作`int`类型常量。但很大的数会有区别。看最后对于long常量与long long常量的描述就知道了。\n\n#### 3.4.1.4 打印`int`值\n\n你可以使用`printf()`函数来打印`int`类型的值，正像你在第二章看到的，%d符号可以在十进制整数被打印出来的地方作为占位符。%d的名称叫格式化符，因为它声明了`printf()`打印值的类型每一个在格式化字符串中的每一个`%d`都代表着一个`int`类型的值，它就在字符串后面的列表中。那个值可以是一个`int`类型变量代表的，也可以是一个`int`类型常量代表的，或者任何有`int`值的表达式。这样，你就有责任让格式化符与之后的列表中的值一致了，编译器并不会报出这种错误。图3.2就表示了一个初始化并且打印变量值，常量的值，还有简单表达式的值的程序，它也提示了你如果你不小心的话会发生什么。\n\n![图3.2](/img/Listing3.2.png)\n\n编译完运行这个程序的结果是这样的。\n\n![](/img/result1.png)\n\n第一行输出，第一个`%d`代表着一个`int`类型变量`ten`第二个代表着常量2，第三个呈现的是`ten` - `two`的值。但第二行，使用的是`ten`这个变量代替了第一个`%d`但是之后的值全都是随机的，是从最近的两个内存空间中获取的值！（你回去的值有可能与这里显示的值相差很多，不仅内容不一样，而且不同的编译器对于这些内存区的管理方法也不一样。）\n\n你有可能对编译器为啥并不会捕捉到这个很明显的错误，还是怪`printf()`函数的原始设计吧。大多数函数都会获取一个值作为参数，编译器可以检查出来你使用的值是不是恰当，但是`printf()`可以获取一个、两个、三个或者更多的参数，那就让编译器无法使用常用的错误检测方法了。记住，一定要检查格式化符是不是与被显示的值匹配。\n\n#### 3.4.1.5 八进制与十六进制\n\n通常来说，C语言会认为整型常量是十进制数。但是八进制与十六进制也受到许多编程人员的欢迎。因为8与16都是2的幂，但10并不是，这些进制系统有时会为与计算机相关的值的表达提供便利。例如，数字65536经常会出现在16位的机器中，它只是10000的十六进制数，十六进制数中的每一位数都对应着实际的四个位。例如，十六进制数3就对应着0011，5就对应着0101，所以35就对应着0011 0101，53就对应着0101 0011。这种对应就会使十六进制与二进制的转换非常简单。但是电脑是怎么判断10000是什么进制的数字的呢？在C语言中，数字不同的前缀就显示了不同的进制，0x（0X）就意味着你正在使用十六进制值，所以16在十六进制下会被写作0x10或0X10。相似地，前缀0就表示你正在使用的是八进制值。例如，十进制数16在八进制数中就写为020，在15章我们会更加充分地讨论不同的数制。\n\n要知道的是不同的数制系统是为你提供便利的，它并不会影响数值的储存方式，也就是说，你可以写16、020或者0x10，这个数还是会以二进制的方式储存起来。\n\n#### 3.4.1.6 展示八进制与十六进制数\n\n正像C语言能够让你以三种方式书写数字一样，它也可以让你以三种方式的任意一种展示数字。展示一个八进制整数可以使用%o，十六进制使用%x，如果你想显示前缀，你可以使用修饰符#，比如`%#o`，`%#x`，`%#X`，有了它们你就可以在数字前面显示0，0x，0X前缀。图3.3给出了一个小小的例子（想到你有可能必须加上一个`getchar()`，它会在一些IDE中防止程序立即关闭）。\n\n![图3.3](/img/Listing3.3.png)\n\n编译运行过后结果是这样的。\n\n![](/img/result2.png)\n\n你可以看到相同的数字被以三种不同的数制打印出来了，`printf()`函数可以实现这种转化。\n注意前缀只有加上#时才会出现。\n\n### 3.4.2 其他整型\n\n当你正在学习C语言时，`int`类型有可能已经满足了你大部分的整型需求了。但为了内容的完整，我们会研究其他的类型。如果你喜欢的话，你可以只大体浏览一下这一部分，然后跳到对于`char`类型那一部分，然后如果有啥需要的可以再回来复习。\n\nC语言使用三个形容词关键字来修饰基本整型：`short, long, unsigned`下面是需要记住的一些点。\n\n+ `short int`类型，或者直接`short`，会比`int`使用的内存更少，由此也就可以在只使用小的数字的时候节省一些空间。像`int`一样，`short`为有符号类型。\n+ `long int`类型，或者直接写`long`，占用的内存会比`int`更多，因此可以让你表示更大范围的数字，像`int`一样，`long`为有符号类型。\n+ `long long int`类型，或者`long long`（都是在C99标准下被引入的），会比`long`类型占用的内存更多，也就让你可以使用比`long`范围更大的数字。像`int`一样，`long long`是一个有符号的类型。\n+ `unsigned`类型，或者写成`unsigned`，是为非负的变量而设置的，这种类型改变了可储存数字的范围，例如，16位的`unsigned int`可以表示0-65535的数字，就不是-32768-32767了，用来表示符号的那一位在无符号类型这变成了另一个可以表示数字的位，也就让数字的表示范围扩大了。\n+ `unsigned long int`类型，或者`unsigned long`还有`unsigned short int`，或者`unsigned short`，在C90标准下都是可以被识别的，在C99标准下又添加了`unsigned long long int`类型，或者`unsigned long long`。\n+ 为了让你的意图明显，关键字`signed`可以被用在任何有符号类型上，例如`short`, `short int`, `signed short`,`signed short int`都是一种类型。\n\n#### 3.4.2.1 声明其他整型\n\n其他整型与`int`类型的声明方式是相似的，\n下面就展示了一些例子。\n并不是所有的编译器都能识别最后三种类型，最后一个例子是C99标准新加进去的。\n\n![其他整型](/img/othertypes.png)\n\n#### 3.4.2.2 为什么要用多种整型？\n\n为什么说`long`与`short`与`int`相比会使用不同的内存呢？因为C语言会确保`short`不会长过`int`，`int`也不会长过`long`，主要的目的就是为了适应不同类型的机器。例如在运行着Windows 3.1的IBM PC上，`int`与`short`都是16位的，而`long`是32位的，而在Mactonish Power PC上，`short`类型是16位的，而`int`和`long`类型是32位的。PowerPC G3/G4中的Pentium芯片的字长是32位，因为这就可以让整型超过20亿（见表3.3），C语言在处理器/操作系统的实现没有必要超出这个数值。因此，`long`与`int`大小是一样的。对于许多的使用过程，那个大小的整数是不需要的，所以节省内存的`short`就被创造了。但另一方面，原本的IBM PC只有16位的字长，那就意味着需要更长的`long`类型。\n\n现在64位的处理器都变得很常见了，比如IBM Itantium，AMD Opteron，还有PowerPC G5。因为64位整型的需要，`long long`类型也就应运而生。\n\n现在最常见的实践是把`long long`设置为64位，把`long`设置为32位，把`short`设置为16位，把`int`设置为16位或者32位，它的大小取决于电脑的自然字长。原则上，这四种类型可以代表四种不同的大小。\n\nC语言标准为确定每一种基本数据类型的最小尺寸提供了指引。`short`与`int`的最小范围是从-32,767到32,767，对应着16位的单元，而`long`类型的最小范围是-2,147,483,647到2,147,483,647，对应着32位的单元。（注意，为了易读，我们使用了逗号分开，但是C语言代码是不能写成这样的）。对于`unsigned short`与`unsigned int`，最小的范围是0到65535，而`unsigned long`的最小范围是0-4,294,967,295/,`long long`类型为了迎合64位的需求，它的最小范围很大，是-9,223,372,036,854,775,807到9,223,372,036,854,775,807，而`unsigned long long`就是0到18,446,744,073,709,551,615.（对于那些检查写的对不对的人，下面是它的英文表示，但是谁要计数呢？）\n\n![(一脸认真)](/img/nonsense.png)\n\n你会在什么时候使用这些不同的`int`类型呢？第一，考虑`unsigned`类型，使用它们计数是很好的，因为你不需要负数，而且`unsigned`类型比`signed`类型的范围更大，可以得到更大的整数范围。\n\n如果你需要处理超过了`int`类型的范围的数字，使用`long`类型，但是在`long`比`int`长的系统中，使用`long`会让计算变慢，所以没必要的话就不要用`long`，进一步说，如果你正在一个`int`与`long`类型长度一样的系统上写代码，而你又需要32位的整数，你就需要使用`long`而不是`int`了，那样程序才可以在转到16位机的时候正常运转。\n\n相似地，如果你需要64位整型数的时候就使用`long long`吧，一些电脑已经使用着64位的处理器，而且并且正在服务器、工作站甚至桌面的64位处理也正在变得越来越普遍。\n\n如果你需要节省内存空间的话，使用`short`来节省内存空间，比如如果你在一台`int`类型是32位的机器上，需要16位的值这种情况。通常只有当你的程序使用整型数组这种与系统的可用内存极其相关的情况下节省内存才是必须的。另一个使用`short`的原因是它有可能与被电脑的特定部分使用的硬件寄存器的大小相同。\n\n> ![](/img/overflow.png)\n> 整型溢出。\n> 当一个整型相对于它的类型太大了会怎么样呢？让我们把一个整型变量设置到它可能的最大值，并用它加一些数，看看会发生什么。`unsigned`与`\tsigned`类型都可以试试（`unsigned int`的格式化符是`%u`）\n> 这就是系统给出的结果\n> ![](/img/flowresult.png)\n> `unsigned`类型好像汽车的里程计一样，当它到达了最大值，它就会返回到它的最小值，变量i也很相似，主要的区别是`unsigned`类型的`j`\t是以0开始的，但是`int`类型的`i`是以-2147483647开始的。\n> 注意的是，你如果没有被告诉这个数据已经溢出了，你还是会不断地在这个问题上打转。\n> 这里描述的行为是由C语言`unsigned`类型的规范控制的，标准并不规定`signed`应该行为如何，这里展示的行为也是通常会发生的，但是你以后会找到不一样的东西的。\n\n#### 3.4.2.3 `long`常量与`long long`常量\n\n一般地，当你在代码中使用2345这样的数字时，它会被储存为一个`int`类型的常量。那么如果你使用1000000这样不能被`int`储存下来的数字呢？编译器就会将它识别为`long int`，如果认为这个类型已经足够大了的话。如果比`long`类型的最大值还要大的话，C语言会将它当做`unsigned long`类型，如果那还不够的话，它就会把它当做`long long`类型或者`unsigned long long`，如果这些类型可以满足要求的话。\n\n八进制与十六进制的常量会被认作`int`类型，除非这个值太大，然后还是以上文的顺序依次递加。\n\n有些时候你有可能想让编译器把一个小点的数储存为`long`类型。如果你在编程的过程中需要外显地使用内存地址，例如在IBM PC上，就有可能有这样的问题。而且，一些基本的C语言函数是需要`long`类型的值的，你可以在数值加上后缀`l`或者`L`，第二种方式更好，因为看起来不像数字`1`。因此，一个有着16位大小的`int`与32位大小的`long`，会将`7`这个数储存在16位中，而将`7L`储存为32位中，而且这两个后缀对于八进制与十六进制都是适用的，像是020L与0x10L。\n\n相似地，在那些有`long long`类型的系统中，你就可以使用`ll`或者`LL`后缀，比如`3LL`，而且还可以使用`u`或者`U`来表示`unsigned long long`类型，就像`5ull`或者`10LLU`或者`9Ull`。\n\n#### 3.4.2.4 打印`short, long, long long`与`unsigned`类型\n\n要打印一个`unsigned int`类型的数字，只需使用`%u`符号，`long`类型可以使用`%ld`，但如果你的机器中`int`与`long`是大小一致的，那`%d`就可以了，但是代码有可能在别的系统中就不能正常运作了，所以对`long`来说最好还是使用`%ld`吧，对于`x`与`o`都可以在前面加上`l`。因此对于十六进制的`long`类型数你会使用`%lx`，类似在八进制会使用`%lo`，需要注意的是即时C语言提供了大写的`L`后缀，但是在格式化符中，只能使用小写。\n\nC语言有几种额外的`printf()`格式，首先，你可以在使用`short`类型时在`%d`的`d`前加`h`来表示十进制的`short`整型，同理`%ho`也是可以的，而且`h`与`l`是可以再加上`u`表示无符号的。例如，你会使用`%lu`符号表示`unsigned long`类型，图3.4就提供了一个例子。支持`long long`的系统也可以使用`%lld`或者`%llu`分别表示有符号与无符号的`long long`整型，第四章会对格式化符进行更充分的阐述。\n\n![图3.4](/img/Listing3.4.png)\n\n这是系统的输出：\n\n![](/img/result3.png)\n\n这个例子就显示出了使用错误的格式化符会有意想不到的后果。第一，注意到对于变量`un`使用的`%d`格式化符结果输出了一个负值，原因就是无符号与有符号数实际上是以相同的二进制排列被储存起来的（第15张会更详细地谈论这种属性），所以如果你告诉`printf()`函数这个数是没有符号的，与告诉它这个数是有符号的输出结果是不一样的。这种行为常会在你输入一个超限的数值时出现。小的整数，在两种格式化符之下都是一样的。\n\n第二，注意到无论你告诉`printf()`是`short`还是`int`类型，`short`变量`end`都是可以打印出正常值的。这就是因为当向函数输入一个参数的时候会自动将它转化为`int`类型，那么你就会问了:1.为什么这种转化会发生？2.`h`修饰符的用处在哪里？第一个问题的答案是`int`类型可以被电脑更加高效地处理。所以在`short`与`int`类型大小不同的机器上，有可能传递一个`int`值会更快。第二个问题的答案是你可以看看一个更加长的整型数如果被缩短为`short`类型了会看起来怎样。第三行的输出也为这一点提供了例证，当65537被写为32位二进制数时，它看起来是`00000000000000010000000000000001`这样子的，使用`%hd`格式化符会迫使`printf()`只看向最后的16个位，因此它会只打印`1`，相似的，最后一行的`verybig`使用`%ld`就会只看向最后的32位，而不是完全的位数。\n\n早些时候你已经了解标识符的数量与显示数字的数量匹配的重要性了，现下你也知晓了标识符的种类也要匹配。\n\n![](/img/matchup.png)\n\n匹配`printf()`函数的格式化符\n记着要去检查一下你是不是对于每一个要在`printf()`中打印的值都给予了一个格式化符，并检查是不是每一个的格式化符都与显示的值的类型相互对应。\n\n### 3.4.3 字符 char\n\n`char`类型是用来储存像字母、标点符号这样的字符的，但是严格来讲它其实是一个整数类型。为什么？`char`这个类型实际上储存的是整数而不是字符，为了处理字符，电脑会使用数字编码来让某一个整数代表某一个字符。在美国最常用的字符编码表是ASCII编码表，它已经在书的前封的背面给出来了，是这本书使用的编码表。举些例子，`65`在ASCII码表中代表的是大写的`A`，所以如果需要储存字母`A`，只需要储存数字`65`即可，（许多IBM主机用的是不一样的编码系统，它叫做EBCDIC，但是准则都是一样的。但在美国以外的计算机系统使用的编码表有可能是完全不同的。）\n\n基础的ASCII码是从0到127的，这个范围小到一个字节就可以保存下来，`char`类型通常会被定义成8位的内存单元，所以它不仅仅可以储存下来基础的ASCII码。许多系统，如IBM PC与苹果公司的Macintosh，可以提供更大的ASCII码表（这两个系统是不一样的），但是还是在8位范围之内。更加普遍的，C语言会确保`char`类型的大小是足够储存系统中C语言实现的需要的基础字符的。\n\n许多的字符集会有不只127而是255分值，例如日本的kanji字符集，商业的Unicode协议为代表全世界的各种字符创造了一个系统，现在已经有96000个字符了。ISO（国际标准组织）与IEC（国际电子委员会）为字符集创造了ISO/IEC10646标准。幸运的是，Unicode标准与ISO/IEC10646标准是始终协调的。\n\n使用这些字符集的平台有可能会使用16位或者32位的`char`类型代表，C语言定义下`char`的长度是1个字节，现在在C语言的记录中，一个字节会是16位或者32位，而不是那些系统上的8位。\n\n#### 3.4.3.1 定义`char`类型变量\n\n正像你会期望的，`char`类型变量与其他变量的定义方式相同，这里就是一些例子。\n\n![](/img/chardef.png)\n\n这几行代码创造了三个`char`类型的变量：`response`，`itable`与`latan`。\n\n#### 3.4.3.2 字符常量及其初始化\n\n假定你想要初始化一个字符常量为大写字母A，电脑语言是要让事情变得简单起来的，你不需要记忆ASCII码，你也不会，你可以直接以下面的方式给`grade`变量赋值`'A'`\n\n![](/img/charassign.png)\n\n被双单引号框定的单一字符就是C语言中的***字符常量***，当编译器看到了`'A'`，它会将A字符转化成相应的字符编码值，单引号是必须的，下面就是例子。\n\n![](/img/chardeclare.png)\n\n如果你遗漏了引号，那么编译器就会认为`T`是一个变量名，如果你使用双引号的话，它会认为你正在使用字符串，我们会在第四章讲解字符串。\n\n因为字符确实是以数字的形式被储存起来的，你还是可以使用数字编码为`char`类型变量赋值。\n\n![](/img/numassign.png)\n\n在这个例子中`65`是一个`int`类型的，但是因为这个值是小于最大的`char`类型值的，所以可以无误地赋给`grade`变量，因为65对应着ASCII码中的字母`A`，所以`A`就被赋给了`grade`变量。但注意，这个例子只是为了表示系统用的是ASCII码系统，但用`65`与`'A'`都是一样的，因此，使用字符常量要比使用数字编码是要好的。\n\n有点奇怪的是，C语言会将字符常量当做`int`类型常量而不是`char`来看待。例如，在32位使用ASCII字符编码，`char`类型为8位的系统中，这一行代码：\n\n![](/img/gradeb.png)\n\n就会将`'B'`呈现为66这个值储存起来，但是`grade`是以8位单元储存的66，这种特点就会使字符常量不能存放多个字符，像`'FATE'`这样，因为4个单独的ASCII码被储存在32位的单元中，但是试图将这样一个字符常量赋给`char`类型变量会导致只有最后的8位被使用，也就是变量被赋给的是`'E'`。\n\n#### 3.4.3.3 不会被打印出来的字符\n\n单引号对符号、数字还有标点符号都是适用的，但是如果你浏览过这本书前封里的那张表，你会看到一些ASCII字符是打印不出来的。例如，一些代表着回车或者跳到下一行，又或是会让终止铃响的符号，这些符号是怎么被表示的呢？C语言提供了三种方法：\n\n第一种方法就是我们已经提到过的，使用ASCII表编码的方法。例如，蜂鸣符对应的值就是7，所以你可以这样写。\n\n```C\n\tchar beep = 7;\n```\n\n表示这些字符的第二种方法是使用特殊的符号序列，它们叫做***转义序列***，表3.2给出了转义序列与它们的含义。\n\n![表3.2](/img/Table3.2)\n\n在赋值给字符常量的时候，转义序列必须要由单引号框定，例如，你可以这样赋值：\n\n```C\n\tchar nerf = '\\n';\n```\n\n然后打印变量`nerf`，打印器或者屏幕上的行就会往前一行（回车）。\n\n现在我们可以看看每一个转义序列是做什么的，警告符`\\a`是在C90标准中添加的，它会生成一条有声有色的警告，警告的类型因硬件而定，一般蜂鸣声是最常见的（在有些系统中，警告符是没有用的。）ANSI标准规定了警告符是不能改变活跃位置的。活跃位置这个概念指的是在显示设备（如屏幕、电报机、打印机等等）上下一个字符会出现的地方。简单来说，它就是屏幕上你已经用惯了的光标的总称。在程序中使用警告符最终只会发出蜂鸣声，但并不会移动屏幕上的光标。\n\n然后，是`\\b, \\f, \\n, \\r, \\t`还有`\\v`这些转义序列，它们都是常见的输出设备的控制符，它们在影响活跃位置上很出色，回车(`\\b`)，会将活跃位置往前挪一个空格。换页符(`\\f`)会将活跃位置转移到下一页的开头。换行符(`\\n`)会将活跃位置切换到下一行的开始，(`\\r`)，回车符(`\\r`)会让活跃位置回到一行的开头位置，水平制表符(`\\t`)会将活跃位置向右移动一个`Tab`键的位置（通常，这些是以字符位置1、9、17、25这样的格式），垂直制表符(`\\v`)，会让活跃位置移动到下一个垂向的`tab`位置。\n\n这些转义序列并不一定在所有的显示设备中起作用。例如，换页符与垂直制表符在电脑屏幕上只会打印出来一个奇怪的字符，并没有任何光标的移动。但是如果在打印机上使用就可以按照描述工作了。\n\n最后的三个转义序列（`\\\\, \\', \\\"`），能够以字符常量的形式让你使用`\\, ', \"`（因为这些符号是作为`printf()`函数的一部分用来定义字符常量的，如果你要把它们字面上打印出来，那将会非常令编译器困惑。）假设你想要打印下来下面的这一行字。\n\n```Bash\nGramps sez, \"a \\ is a backslash.\"\n```\n\n就需要用下面代码的形式来写。\n\n```C\nprintf(\"Gramps sez, \\\" a \\\\ is a backslash.\\\"\\n\");\n```\n\n最后的两种形式（`\\0oo, \\xhh`）是ASCII码的特殊标识，是要以八进制ASCII码的形式来代表字符，在前面需要加上`\\`然后用单引号来框定整个字符，例如，如果你的编译器不能识别警告符，你就可以使用下面的ASCII码：\n\n```C\n\tbeep = '\\007';\n```\n\n你也可以省略前面的0，所以`'\\07'`与`'\\7'`都是可以的。这个符号会让数字被理解成八进制，尽管前面没有0。\n\n从C90开始，C语言提供了第三种选择，使用十六进制的字符常量，这样说来，斜杠后面是`x`或者`X`与1到3位的十六进制数。例如，Ctrl+P符号在ASCII十六进制符码里就是10（十进制下就是16），所以它是可以被表达为`'\\x10'`或者`\\'x010'`的，图3.5展示了一些整型的代表。\n\n![图3.5](/img/Figure3.5.png)\n\n当你使用ASCII码的时候，要注意数字与字符之间的差异。例如，字符4在ASCII中的值是52,`'4'`是一个符号而不是一个数字。\n\n现下，你可能有这几个问题：\n+ ***为什么转义序列在最后一个例子中没有用单引号括起来？***\n（***最后一个例子`printf(\"Gramps sez, \\\" a \\\\ is a backslash.\\\"\\n\");`***）。\n\t只要是一个字符，不管它是不是转义字符，当它是字符串的一部分的时候，都是需要用双引号框起来的，而不是单引号，但单个字符是无一例外由单引号括起来的。由双引号括起来的是***字符串***。（第四章会讲到）相似地，不属于转义字符的数字会被当做一般字符打印出来（如`printf(\"Hello!7\\n\");`打印出来的是`Hello7`，但`printf(\"Hello!\\007\");`输出的是一行`Hello！`加上一声警告）。\n+ ***我应该什么时候使用转义序列？什么时候使用对应的ASCII码？***\n\t如果你需要使用其中一个转义序列，比如说`'\\f'`，或者作为替代的`'\\014'`，最好使用前者。首先，这种表示方法更容易记忆：其次，它更容易在机器之间转移，如果其他系统不适用ASCII码，`'\\f'`还是可以使用。\n+ 如果我需要使用数字变啊，为什么使用的是`'\\032'`而不是`032`？\n\t第一，使用转义字符的方式会让阅读你代码的人轻松地知道这是一个字符编码。第二，如`\\037`这样的转义序列是可以内嵌于C语言字符串的（？[就像`\\007`一样])。\n\n#### 3.4.3.4 打印字符\n\n`printf()`函数可以使用格式化符`%c`表示一个字符将要在这个位置被打印。你想到字符常量是1位的整型值，因此你也可以用`%d`符号，那样的话你就会得到一个整数，`%c`格式化符会告诉`printf()`函数来打印那个编码值对应的字符，例3.5就以两种方式展示了`char`类型变量。\n\n![例3.5](/img/Listing3.5.png)\n\n尝试运行，输出是这样的。\n\n![](/img/C67.png)\n\n当你使用程序的时候，不要忘记在写完了字符之后按下回车键。`scanf`函数会接收你写下的字符，然后取地址符(`&`)会将字符赋给字符变量`ch`。接下来，`printf()`函数会打印两次`ch`这个变量，第一次是以字符的形式打印的（使用`%c`格式化符的效果），第二次是以十进制整数的形式（同理，`%d`的效果）。需要注意，`printf()`的标识符会决定数据被如何呈现，呈现方式与数据的储存方式没有关系。\n\n![数据储存与输出](/img/Figure3.6.png)\n\n#### 3.4.3.5 有符号还是无符号？\n\n有的C语言实现里会使`char`是一个有符号的类型，那也就意味着`char`可以接受从-128到127的值。其他的C语言实现会让`char`是一个无符号的类型，那么它的范围就变成了0到255，你的编译器的使用手册应该会告诉你`char`是什么类型，或者你可以看看`limits.h`头文件，下一章会讲述。\n\n在C90标准下，C语言允许你使用关键字`unsigned`与`signed`来修饰`char`，那样的话不管原本的`char`是有符号还是无符号。你都可以任意变化它们的类型。它们在处理小范围的十进制整数时是很有用的。要是只是为了使用字符，只使用`char`就可以了。\n\n### 3.4.4 `_Bool`类型\n\n`_Bool`类型是C99标准添加的，它们是被用来代表布尔值的，也就是逻辑上的`true`与`false`。因为C语言是使用0表示`false`，用1表示`true`的，所以布尔类型实际上只是一个整型，但是只需要一位的内存，因为要储存0与1一位就足够了。\n\n程序会使用布尔值来选择下一步运行哪个代码，代码执行会在第六章（C语言控制语句：循环）与第七章（C语言控制语句：分支结构与跳跃结构）更详细地讲到，所以我们到那个时候再讨论这个问题。\n\n### 3.4.5 可转移的类型：`inttypes.h`\n\n还有更多的整数类型吗？没有了，但是还有更多你可以使用与已经存在的类型的名字。你或许会认为你已经看到的整型名已经很多了，但是原本的名字确实存在问题。知晓一个变量是`int`并不会让你了解它会占用多少内存，除非你检查了系统的描述文件。为了解决这个问题，`int16_t`可以声明一个16位的有符号整型，`uint32_t`声明了一个32位的无符号类型。\n\n要让这些名字可用，你需要包含一个`inttypes.h`头文件（注意在这一版时候已经有了，但是一些编译器上还不支持这个功能），这个文件使用了`typedef`（第一次讲到是在第五章：运算符、表达式与语句），来创造新的类型名。例如，它会让`uint32_t`成为基本类型的一种别名或者同义替换，有可能是`unsigned int`也有可能是`unsigned long`。你的编译器会提供一个与你的计算机系统协调的头文件，这些新的设计被称为***精确长度类型***，例如，`int_least8_t`会是最小的类型，它可以承载8位的有符号整型值。如果某个系统上最小的类型是8位的。`int8_t`类型是不会被定义的，但`int_least8_int`是可以被定义的，或许会被实现为16位的整型。\n\n当然，一些编程人员会更关心速度而不是空间。对于它们，C99定义了允许快速计算的一系列类型，它们被称为***最快最小长度类型***，例如，`int_fast8_t`会被定义为你的系统上能够最快运算的8位有符号值。\n\n最后，对于其他的编程人员，只有系统上最大的一些整型才有用，`intmax_t`就代表了那种类型，它可以储存任何合法的有符号整型值，同样，`uintmax_t`会代表可用的最大的无符号类型。这些类型有时是比`long long`或者`unsigned long`还要长的，因为C语言实现是准许定义超过需要的类型的。\n\nC99不仅提供了这些新的而且可运输的类型名，它还有有利于输入输出的符号表示。比如说，`printf()`对于每一种类型都需要特别的修饰符，所以你要打印`int32`，你要使用的是`%d`还是`%ld`？不同的机器的标识符并不一样，但没问题，C99标准下是有字符串宏命令来打印这些值的，我们会在第四章详细讲述的。例如，`inttype.h`头文件会将字符中的`PRId16`作为对于不同对应的类型的合适的格式化符。（例如hd（`short`）或者d），例3.6是一个讲述了如何使用可运输类型与相对应的格式化符的简单的例子。\n\n![例3.6](/img/Listing3.6.png)\n\n在最后的`printf`语句中，`PRId16`被`inttypes.h`对`hd`的类型定义替换了，把这一行代码变成了这个样子。\n\n![](/img/turning1.png)\n\n但是C语言需要连贯的字符串，所以引号需要是连续的，然后这一行就变成了这个样子。\n\n![](/img/turning2.png)\n\n这就是输出，注意这个例子也使用了`\\\"`转义字符来打印双引号。\n\n![](/img/out3.png)\n\n参考单元VI“更多的整型”提供了`inttypes.h`头文件添加的内容的完整解释，也列举了所有的格式化宏。\n\n![](/img/C99sup.png)\n【C99支持】\n编译器供应商已经开始以不同的速度与顺序开始实现C99的新特性了，但在这本书出来的时候，一些编译器还没有实现`inttypes.h`的头文件与特征。\n\n### 3.4.6 `float, double`与`long double`类型\n对于大多数的软件开发项目来说，这些多种多样的整型已经能够很好地满足要求了。但是，对于财务或者面向数学的程序，我们通常会使用***浮点数值***，在C语言中，这些数字就对应着`float, double, long double`这几种类型，对应着FORTRAN与Pascal语言中的`real`类型。使用浮点数，正像上文所说，能够让你呈现更大范围的数字。包括十进制小数值。浮点数值的表示与***科学计数法***是很相似的，那是科学家用来表示非常大或者非常小的数字的一种体系。\n\n在科学计数法中，数字会被表示成十进制数乘10的整数幂，这里就是一些例子。\n\n![](/img/sciennotation.png)\n\n第一列是通常的表示方法，第二列是科学计数法的表示，第三列是质数的表示方法，或者说是***e - notation（e表示法）***，通常是给计算机或者计算机写的，在e的后面是10的指数，图3.7展示了更多的浮点表示法。\n\nC语言标准规定了`float`类型应该至少能够代表6位有效数字并且范围在10的-37次方到37次方。第一个要求的意思是，比如一个`float`必须要精确地表示至少前六位有效数字，就像33.333333。如果你喜欢使用较大或者较小数字（2.0e30（太阳质量）或1.6e-19（元电荷））的话，第二条要求会为你提供方便。通常，系统会使用32位类储存一个浮点类型的数字，8位用来给予指数值与符号，24位来表示非指数部分，叫尾数或者有效数字与它的符号。\n\n![一些浮点数表示](/img/Figure3.7.png)\n\nC语言也有一个`double`（双（double）精度）浮点型，`double`类型与`float`类型需要的最小值是一样的，但是它把最小值的有效数字位数拓展到了10位。通常的`double`表示会使用64位而不是32位，一些系统会使用32个位来表示非指数部分，这也就增加了数字有效的有效数字位数，减少了取整错误。其他的系统会使用一些位储存更大的指数，这也就增加了可以容纳数字的范围。每一张方法都至少有13位的有效数字，不只能满足最小标准的要求。\n\nC语言还允许你使用一种浮点类型：`long double`，目的就是进一步增加`double`类型的准确度。但是C语言只保证`long double`至少与`double`类型的精度是一样的。\n\n#### 3.4.6.1 声明浮点变量\n\n浮点变量与它们的整型兄弟的声明与定义的方式相似，这里是一些例子，\n\n![](/img/floatdeclare.png)\n\n#### 3.4.6.2 浮点常量\n\n当你书写一个浮点常量时，你会有很多的选择，形式是很多，有符号的一串数字。包括十进制的小数点，或是由e或者E跟着的10的指数。这里是两个合法的声明浮点类型的例子。。\n\n![](/img/twoexam.png)\n\n你可以遗漏正号，没有关系（2E5）或者可以遗漏指数部分（19.28），但是并不能同时存在。你可以遗漏小数部分或者整数部分，但也不能全都没有（那也不剩什么了。）下面是更多的合法的浮点常量。\n\n![](/img/morevalid.png)\n\n在使用浮点常量的时候，不要乱添加空格。\n\n![错的](/img/nospaces.png)\n\n一般来说，编译器会认为浮点常量都是`double`精度的，假设`some`是一个`float`类型的变量，并且你有下面的一行代码。\n\n![](/img/codeline.png)\n\n`4.0`与`2.0`都是以`double`类型储存起来的，一般每一个使用64位，结果是使用浮点运算获得的，而且只有结果转换成了正常的`float`大小范围内才可以使用`float`。这也就为运算提供了准确度，但是会让你的程序变慢。\n\nC语言还是你能够超越默认方法，你可以使用f或者F后缀来让编译器把一个浮点常量储存为`float`类型，比如`2.3f`与`9.11E9F`还有`l`或者`L`后缀，可以储存为`long double`类型，例如`54.3l`，`4.23e4L`。注意的是，比起`l`，`L`更不容易被看成`1`，如果浮点数没有后缀，它的类型就是`double`。\n\nC99添加了表示浮点数的另一种方式，它是使用十六进制来表达的（0x或者0X加上十六进制数）。那样指数就是`p`或者`P`而不是`e`或者`E`了，指数是2的，也不再是10的了。这就是数字看起来的样子。\n\n![](/img/lookslike.png)\n\n`a`是十进制的10，`.1f`是1/16加上15/256，然后`p10`是2的10次方，或者1024，用十进制表示这就是10364.0。\n\n并不是所有的编译器都已经支持C99的特性了。\n\n#### 3.4.6.3 打印浮点数值\n\n`printf()`函数会使用`%f`格式化符来打印`float`与`double`类型的数值，这个符号使用的是十进制小数符的表示方法，还可以使用`%e`来使用指数表示法来打印它们，如果你的系统支持C99中提供的小数的十六进制格式，你就可以使用`a`或者`A`代替`e`与`E`。`long double`类型是以`%Lf`或者`%Le`与`%La`标识符来分别使用这三种方式的。需要注意的是，`float`与`double`都可以使用`%f, %e, %a`标识符来输出。这是因为当一个`float`类型的变量作为语句传递到任何函数时，C语言会自动把它转化成`double`类型，而不是它本来的类型，比如说`printf()`函数就是一个例子。例3.7说明了这种行为。\n\n![例3.7](/img/Listing3.7)\n\n这里是输出：\n\n![](/img/out1.png)\n\n这个例子说给出了默认的输出，下一章会讨论如何通过设置输出域长度与十进制的位权数，控制输出的外形。\n\n#### 3.4.6.4 浮点上溢与下溢\n\n可能最大的`float`类型就是值大概是3.4E38，然后你执行了下面的代码。\n\n![](/img/toobig.png)\n\n输出（个人测试）\n\n![](/img/INF.png)\n\n发生了什么？这就是***溢出***的一个例子-运算得出的结果大到无法表示。对于这种情况，这种行为之前是没有被定义的，但是现在C语言指定`toobig`是一个几乎代表***无限***的数字，`printf()`就会显示`inf`（infinity）（或者那个样子的一些变体）\n\n那么如果是要分辨非常小的数字呢？这是会遇到更多的情况。你可以记起`float`是以指数部分与数字部分（或尾数）来储存的。如果会有一个数字有着最小的指数与最小的值，而且仍然可以使用所有可以使用的位来表达尾数，在`float`的精度范围内表示，这就是`float`类型下的最小值。现在我们把它除2，一般地，这会减少指数，但是指数也是能够表达的最小值了。所以就要到尾数的空余位那里减了，把第一位清空，然后丢掉最后的二进制值，类比一下就是，用四位有效数字的10进制值，比如`0.1234E-10`，除10，结果就是`0.01234E-10`，你就可以得到答案了，但是你会在这个过程中丢掉一个数字。这种情况就叫做下溢，C语言对于失去完全精度的浮点数值叫做***subnormal***（反常值）。所以把最小的正常浮点值除2就会有反常值。如果你除了一个太大的数字，你就会失去所有的精度，最后只剩下0，C语言库现在提供了函数来检查是否你的运算产生了反常数值。\n\n这里还有另一种特别的浮点值，`NaN`。例如你给予`asin()`函数一个名字它会返回所给数值的sin值，但是sin的数值并不能大于1，所以函数对于大于1的数值是未定义的，在这种情况下函数就会返回`NaN`值，那会被`printf`打印为`nan`、`NaN`或者相似的东西。\n\n![四舍五入问题](/img/drop4in5.png)\n拿一个数字，加1，然后减去原来的数，你会得到几？肯定是1是吧？像下面的浮点运算给予了你不同的答案。\n\n输出是这个样子的：\n\n![](/img/alldevices.png)\n\n这三种奇怪的结果的原因是电脑并不能够跟踪需要多少十进制空间来进行恰当的运算，2.0e20是2后面跟着20个0，通过加1的操作，你要改变这个数字的第21位数字，要正确地执行这个操作，程序需要能够储存21位数字的类型，`float`类型数通常只是六位或者七位数带着指数这个范围（最后的一位只能是0，不能改变）所以这种尝试在劫难逃。另一方面，如果你使用2.0e4的话你就可以得到正确的结果，因为你改变的是第5位数，`float`类型的精度允许你这样做。\n\n### 3.4.7 复数与虚数类型\n\n许多科学与工程运算会使用复数与虚数，C99为这些数提供了支持，（with some reservations），它是一个独立的实现，就像内置预处理命令一样，不需要其他类型的支持。（VCR芯片很可能并不需要复数来工作）。并且，更一般地。虚数类型是可选择的。简单来说，有三种复数类型，`float_Conplex，_Complex`与`long double _Complex`，举个例子，一个`float _Complex`变量，会包含两个`float`类型的值，一个代表复数的实部，另一个代表虚部。相思地，有三种虚数类型，它们叫做`float _Imaginary, double _Imaginary`与`long double _Imaginary`。\n\n包含`complex.h`头文件可以使你把`_Complex`与`_Imaginary`分别更换为`complex`与`imaginary`。而且还能够让你使用I来代表-1的平方根。\n\n### 3.4.8 超越基本类型\n\n这样我们已经讲完了一系列基本的数据类型了，对于你们其中一些人来说，数据类型可能很多，还有一些人可能会想着还需要其他的类型，比如说字符串类型。但C语言并没有。但是还是能够很好的处理字符串，你会在第四章第一次见到字符串。\n\nC语言确实有其他的类型，他们是从基本类型中衍生出来的。这些类型包括数组、指针、结构体、联合体。即使它们都是后面章节才要讲到的，我们已经在这一章的例子中已经偷摸添加了一些关于指针的东西了。（指针会指向变量或者其他数据对象的地址，`scanf()`中使用的`&`前缀就会创造一个指针，他会告诉`scanf()`在哪储存信息）\n\n![](/img/basicdata.png)\n**总结：基本数据类型**\n\t**关键字**：\n\t基本的数据类型是由11个关键字组成的：`int, long, short, unsigned, char, float, double, signed, _Bool, _Complex, _Imaginary`\n\t**有符号整型**：\n\t可以是整数值也可以是负值\n\t1. `int`- 系统给定的基本整型。C语言保证`int`至少有16位。\n\t2. `short`或`short int` - 最大的短整型不大于最大的`int`，并有可能更小，C语言保证`short`类型至少有16位。\n\t3. `long`或`long int` - 能够保存至少`int`的最大值大小的数，可以更大。C语言会确保`long long`类型至少有32位。\n\t4. `long long`或`long long int` - 这个类型至少能够保存`long`类型数的最大范围，可以更大，`long long`类型最小64位。\n\n通常，`long`类型是比`short`类型更短的，`int`会与他们之中的一个一样大。例如，以DOS系统为基础的PC系统，`short`是16位长的，而`int`是32位长的，以Windows 95为基础的系统会提供16位的\n`short`，而`long`与`int`类型是32位的。\n\n如果你喜欢的话，你可以在任何有符号类型前使用`signed`关键字，将它们有符号这个事实显露出来。\n**无符号整型：**\n\t这些类型只能从0到整数，因为去掉了符号位，这种类型的范围得到了扩大，使用关键字`unsigned`可以把你想要的类型变为无符号类型：比如`unsigned int, unsigned long, unisgned short.`单个的`unsigned`与`unisgned int`是一样的。\n**字符：**\n\t它们是像`A, &`这样的印刷字符。在定义上，字符类型会使用1个字节的内存来代表一个字符。在以往，字符字节大多数是8位，但现在它可以是16位或者更大，可以迎合使用的基准字符集的大小。\n\t\t**char** - 这种类型的关键字，一些实现中会使用有符号的`signed char`，但其他还是使用无符号字符。C语言允许你使用`signed`或者`unsigned`来划定你想要的类型。\n**布尔类型：**\n\t布尔值代表`true`与`false`，C语言会使用0与1代表这两个值。\n\t\t**_ Bool** - 是这种类型的关键字，它是一个无符号整型，只需要保存0与1这两个值的内存。\n**实数浮点型：**\n\t可以正数、负数或者零。\n\t\t[`float`] 是系统的基本浮点类型，可以至少呈现6位精确的有效数字。\n\t\t[`double`] 一种（可能是）更大的浮点储存单元，允许更大的有效数字位数（至少10位，通常会更多。）而且有可能比float也有更多的指数位数。\n\t\t[`long double`] 一种（可能是）更大的浮点储存单元，它可能允许更多的有效数字位数，也有可能有着比`double`类型更大的指数部分。\n**复数与虚数浮点型：**\n\t虚数类型是可以选择的，实部与虚部是基于实数类型的：\n\t\t`float _Complex`\n\t\t`double _Complex`\n\t\t`long double _Complex`\n\t\t`float _Imaginary`\n\t\t`double _Imaginary`\n\t\t`long double _Imaginary`\n\n![](/img/Summary.png)\n\n**总结：如何声明一个简单的变量**\n1. 选择你需要的类型\n2. 使用允许的字符为你的变量起个名字\n3. 使用以下形式的声明语句\n```C\n\t//type-specifier variable-name;\n\t//类型标识符 变量名;\n\tint Iint1;\n```\n4. 你可以通过用逗号把变量名隔开来声明多个变量，下面就是一个例子。\n```C\n\tchar ch, init, ans;\n```\n5. 你可以在声明语句中对变量进行初始化：\n```C\n\tfloat mass = 6.0E24;\n```\n\n### 3.4.9 类型大小\n\n表3.3与3.4展示了一些C语言环境下的类型大小（在一些环境中，你可以选择）你的系统是什么样子的？尝试运行例3.8中的程序，你会弄明白的。\n\n![表3.3与3.4](/img/Twotables.png)\n（分别是整型与浮点型的大小。）\n\n对于每一种类型，最上面的一行是有效数字的位数，第二行是指数的范围（十进制）。\n\n```C\n//(例 3.8)\n#include <stdio.h>\n\nint main(void)\n{\n\t/*C99为大小提供了%zd格式化符*/\n\tprintf(\"Type int has a size of %u bytes.\\n\", sizeof(int));\n\tprintf(\"Type char has a size of %u bytes.\\n\", sizeof(char));\n\tprintf(\"Type long has a size of %u bytes.\\n\", sizeof(long));\n\tprintf(\"Type double has a size of %u bytes.\\n\", sizeof(double));\n\treturn 0;\n}\n```\n\nC语言有一种内置的运算符，它叫`sizeof()`，它会给出以比特为单位的大小范围。（一些编译器需要`%lu`而不是`%u`来打印`sizeof`数值，这是因为C语言对于`sizeof`用来报告的真实的无符号整型是有多个范围的。C99对于这种类型给出了`%zd`标识符，如果编译器支持的话你应该使用这个。）例3.8的输出是这个样子的。\n\n![](/img/sizes.png)\n\n这个程序只发现了4种类型的范围，但是你可以简单修改一下这个程序来找寻你感兴趣的任何一种类型，要注意的是`char`类型的大小一定是1个字节，因为C语言对于`char`类型定义的就是一个字节。所以在有16位的`char`与64位的`double`的系统上，`sizeof`会报告`double`类型有4个字节的大小。你可以看看limits.h与float.h头文件来获取更多关于类型最大最小值的细节信息。（下一章会进一步阐述这两个文件。）\n\n顺便一说。看看最后一行`printf()`是如何延伸到两行的，只要不是在双引号部分或者在一个单词的中间断开，你可以这样做。\n### 3.4.10 可用数据类型\n\n当你正在开发一个程序时，需要注意你需要的变量与它们应该使用的类型。大多数情况，你可以使用`int`或者`float`来表示一个数，用`char`来表示字符，在使用它们的函数的开头先声明好它们。为变量取一个能够暗示它们的意义的名字。初始化一个变量时，也要让变量类型与赋给的常量类型匹配。这里就是两个例子。\n\n```C\n\tint apples = 3;\n\tint oranges = 3.0;\n```\n\nC语言对于类型不搭配比起Pascal是很宽容的，C语言的编译器允许你进行二次初始化，但是它们有可能会引起报错，尤其是当你触发了一个高级警告时。最好不要养成这种马马虎虎的习惯。\n\n当你使用其他类型的值给一个数字类型的值初始化时，C语言会将这个值进行转化，来让它与这个变量的类型相配。这也就意味着你有可能会失去一些数据，比如思考一下下面的初始化过程。\n\n```C\nint cost = 12.99;        /*使用double值来初始化int*/\nfloat pi = 3.1415926536; /*使用double值来初始化float*/\n```\n\n第一个声明语句会将12赋给`cost`变量，当把浮点数转换为整数值时，C语言简单地把小数部分丢掉（截断），而不是四舍五入。第二行的声明会失去精度，因为`float`类型是只能呈现小数点后6位精确数的。如果进行这样的初始化，编译器有可能会发出一个警告（但不是一定会发），你有可能在编译例3.1的时候遇到这个问题。\n\n许多的编程者与组织人员拥有设置变量名称的体系化传统方法，按照这种方式就可以显示出变量的类型。例如你可以使用`i_prefix`来表示这是个`int`类型变量，同理`us_`来表示`unsigned_short`，这样的话对于类型就好辨认一些。\n\n### 3.4.11 参数陷阱\n\n在这一章的前半部分，有一个关于`printf()`使用的警告还是很值得重复强调的。你可能还记得传递给函数的信息在术语上称为参数。例如，`printf(\"Hello, pal.\")`就有一个参数：`\"Hello, Pal.\"`。我们把在双引号中的一系列字符叫做***字符串***，我们会在第四章讨论。现在的重点是，一个字符串，即使包含着好几个单词与标点符号，也仍然被算作是一个参数。\n\n相似地，`scanf(\"%d\", weight)`有两个参数：`\"%d\"`与`&weight`。C语言会使用逗号来分开函数中的各个参数，`printf()`与`scanf()`函数还挺不寻常的，它的参数数量是不限的。例如，我们曾经在使用`printf()`时传递过一个、两个甚至是三个参数。对于一个恰当运行的程序，它需要知道参数的数量。`printf()`与`scanf()`函数会使用第一个参数来表达之后会有多少个其他的参数。这里的诀窍就是在最前的字符串中的每一个格式化符都代表着后面有一个参数，例如下面的语句就有两个格式化符：`%d`与`%d`：\n\n```C\nprintf(\"%d cats ate %d cans of tuna\\n\", cats, cans);\n```\n\n这也就告诉程序后面要接收两个额外的参数，而且后面确实有两个——`cats`与`cans`。\n\n作为一个编程人员，你的责任就是确保格式化符的数量与其他的参数的数量相同，类型相同。C语言现在已经有函数原型机制了，它能够检查一次函数调用是否使用了正确的数字与正确的参数类型，但是对于`printf()`与`scanf()`是不适用的，因为它们参数的数量是可变的。当你并没有接收程序员的负担会怎样呢？举个例子，假设你写了例3.9那样的程序。\n\n![例3.9](/img/Listing3.9.png)\n\n下面是从微软VisualC++ 7.1（WinXP系统）上运行的结果\n\n```Bash\n4\n4 34603777\n0 0.000000\n```\n\n这是在Digital Mars（WinXP系统）上运行的结果\n\n```Bash\n4\n4 4239476\n0 0.000000\n```\n\n这是在Metrowerks Codewarrior Development Studio 9（MacOSX系统）\n\n```Bash\n4\n4 3327456\n1075052544 0.000000\n```\n\n你可以看到，使用`%d`来表示一个`float`类型的值并不会将它变成最近的`int`类型值，而是直接输出垃圾值。相似地，使用`%f`来表示一个`int`类型的值也并不会将整数转化为浮点数值。参数太少或者类型不对得到的结果不同的平台也不一样。\n\n没有一个编译器对于这个代码有报错或者警告，在运行时也没有。一些编译器确实会捕捉到这种错误，但是C语言标准并没有要求它们这样做。因此，电脑就不一定能够补货到这种类型的错误，因为程序反而还能够正常地运行，你也不一定能够注意到这种错误。如果程序并没有打印正确的数值数量或者是数值，那就回去看看`printf()`的参数数量与类型是否使用正确。（顺便一说，Unix语法检测程序lint，它比Unix编译器检查得更加细致，能够对于`printf()`的参数错误进行报错）。\n\n## 3.5 又一个例子：转义序列。\n\n让我们在程序中打印更多东西吧，这一次我们会使用C语言中的一些针对于字符的特殊转义序列。尤其地，例3.10中的程序显示了回车符(`\\b`)，水平制表符(`\\t`)以及回行符（`\\r`）是怎么工作的。这些概念要追溯到电脑还在使用电传打字机的时代，它们并不总是会在现代的图形界面上正确地翻译。例如，例3.10在一些Mac系统的实现上就不能够按照想要的方式来运行。\n\n![例3.10](/img/Listing3.10.png)\n\n### 3.5.1 当程序运行的时候发生了什么？\n\n让我们一步步地浏览这个程序，好让它能够在ANSI实现下运行。第一个`printf()`函数语句（标`1`的那个）会发出警告信号（由`\\a`引起），然后会打印如下的句子：\n\n```Bash\nEnter your desired monthly salary:\n```\n因为在字符串最后没有`\\n`符号，所以光标还是在冒号后面。\n\n第二个`printf()`语句会接着第一句结束的地方开始，所以当它执行完毕时，屏幕上看起来是这个样子的。\n\n```Bash\nEnter your desired monthly salary: $______\n```\n\n在冒号与美元符号之间有一个空格，因为第二个`printf()`的字符串是以空格开始的，7个退格符的作用是把光标向左移动7个单位。这就会将光标移到下划线字符前面，正好放在美元符号后面。通常地，退格符并不会移除前面的字符，但是有一些实现是有可能移除的，那样这个小练习就没有用了。\n\n现在，你会输入你的回答，比如说你输入了`2000.00`，那么这一行看起来就会是这个样子。\n\n```Bash\nEnter your desired monthly salary: $2000.00\n```\n\n你输入的字符将会覆盖换行符，而且当你点`Enter`键（或者`Return`）来输入你的回答时，光标就会跳转到下一行。\n\n第三个`printf()`语句是以`\\n\\t`开始的，换行符将会将光标移动到下一行的最开始，而tab键通常会将光标移动到那一行的下一个制表位（但并不是一定），也就是第9列。然后字符串的剩余部分就会被打印下来。在这个语句执行之后，屏幕上看起来就会变成这样。\n\n```Bash\nEnter your desired monthly salary: $2000.00\n\t$2000.00 a month is $24000.00 a year.\n```\n因为这个`printf()`语句并没有使用换行符，光标还是在这一句的最后位置。\n\n第四个`printf()`使用了`\\r`符号，它会将光标移动到一行的开头位置，这个语句执行之后屏幕上就成了这样。\n\n```Bash\nEnter your desired monthly salary $2000.00\nGee!    $2000.00 a month is $24000.00 a year.\n```\n\n### 3.5.2 输出清理\n\n`printf()`函数什么时候才会将输出发送到屏幕上呢？首先，`printf()`语句会将输出发送到***缓冲区***，时不时地，在缓冲区的内容就会被发送到屏幕上。对于输出什么时候从缓冲区发送到屏幕上，基础的C语言规则已经很清晰了：当缓冲区被充满时，当遇到一个换行符的时候，以及当有即将发生的输出行为时。（从缓冲区发送输出信息到屏幕或者是文件上叫做***刷新缓冲区***），例如，最先的两个`printf()`函数语句并不会填充缓冲区，也并没有包含换行符。在那种情况下，你可以使用一个换行符来刷新缓冲区，那样的话代码就可以写成这个样子：\n\n```C\nprintf(\"Enter your desired monthly salary: \\n\");\nscanf(\"%f\", &salary);\n```\n\n 不管即将到来的输入信息是不是会刷新缓冲区，这几行代码都是可以正常工作的。但是，它也会将光标移到下一行，防止你把数据与提示字符串写到一行。另一种方式是使用`fflush()`函数，它会在第13章，文件输入与输出中讲到。\n\n# 关键概念\n\nC语言有着许多种数字类型，这也反映了C语言避免让编程人员陷入障碍的目的。比起用一种类型包管全部数字类型，C语言尽力给予编程人员对于数字的特定种类（比如说有符号与无符号），以及最能够适合特定程序的数字范围大小的选择。\n\n在一台电脑上，浮点数与整型的基础是不一样的。它们会被以不同的形式储存于处理。两个32位的内存单元能够保存相同的位形式（二进制数表示是一样的。）但是如果其中一个被理解为`float`而另一个被理解为`long`，这两个内存单元就会代表完全不同也不相关的两个数，例如在个人电脑上，如果你使用代表256.0的浮点储存单元，但是让它被理解为long，你就会得到113246208这个数。C语言确实允许你使用多种数据类型来书写表达式，但是它会自动进行类型转换，所以真正的运算只有一种数据类型。\n\n在电脑内存中，字符是以数字编码的形式呈现的，ASCII码是美国最常用的数字代码标准，但是C语言也支持其他代码集。字符常量是电脑上数字编码的符号表示-它是由单引号框定的单字符，比如`'A'`。\n\n# 总结\n\nC语言有各种各样的数据类型，基本的数据类型可以分为两类：整型与浮点型，对于整型，两个最鲜明的区分就是分配给不同类型的储存空间，还有是否有符号。最小的整型是`char`，它可以有符号，也可以没有，这取决于不同的C语言实现，你可以根据自己的需求来选择`signed char`与`unsigned char`，但是那通常是在你使用范围比较小的数字的情况下，而不是使用字符编码时。其他的整型还有`short, int, long, long long`等。C语言确保了所有的类型都至少会与它前面的类型一样大，它们都是有符号类型，但你还是可以加上`unsigned`修饰符来创造相应的无符号类型：`unsigned short, unsigned int, unsigned long, unsigned long long`或者你也可以使用`signed`修饰符来明显地写出它是有符号的。最后，还有`_Bool`类型，一种无符号类型，它只能保存0与1，分别代表着`false`与`true`。\n\n浮点类型有三种，分别是`float, double`与在ANSI C中的`long double`，每一个类型也是至少比它前面的那个类型一样大的。要是想的话，你也可以用`_Complex`与`_Imaginary`与浮点类型关键字连用，来使用虚数与复数类型。例如，有`double _Complex`与`float _Imaginary`类型。\n\n整型可以被以十进制、八进制与十六进制的形式被输出，开头写0可以使一个数变为八进制数，写0x或者0X可以变为十六进制数。例如`32, 040`还有`0x20`就分别是十进制、八进制与十六进制的数字，但是它们代表的都是同一个值。另外使用`l`或者`L`符号可以声明一个`long`类型的常量值，`ll`或者`LL`可以声明一个`long long`类型的值。\n\n字符常量是由单引号及其中的字符代表的：比如`'Q', '8'`。字符还包括转义序列，比如`\\n`，它们代表着不会被打印出来的特定字符，你可以使用类似`\\007`的形式来使用ASCII码的形式来代表字符。\n\n浮点数可以以十进制小数点的形式来表示，也可以以指数符号的形式来表示，例如`7.38E10`。\n\n`printf()`函数能够让你利用格式化转换符，以最简洁的方式打印各种各样的数值，它由一个百分号符`%`与一个表示类型的字符组成，比如`%d`或者`%f`。\n\n# 回顾问题\n\n你会在附录A中找到这些问题的答案。\n1.你对于这几种数据你会使用哪种数据类型？\n\n>1.东斯普尔顿的人数 -- int类型（16位即可）\n>2.在DVD上电影的价格--float类型\n>3.这一章最常见的字母--char类型\n>4.一个字母在这一章中出现的次数。-- int类型（。）\n\n2.为什么有时候你会使用`long`而不是`int`。\n\n>有些时候表示的范围会更大，但是并没有超过`long`，使用`long`类型可以保证数据因为存放不下而溢出，从而导致不同机型显示不一而且不会报错的问题。\n\n3.如果你想要得到一个32位有符号的整型，你会使用哪种可转移的类型，请写出所有类型，并说说每一种的合理性。\n\n>1.在`<inttypes.h>`中的`int32_t`类型\n>2.基本类型中的`long`或者`int`类型（对于`int`来说不一定）\n\n`long`合理，因为关键字更简洁容易记，格式化符也不容易弄错\n（`int32_t`为`PRId32`,`long`为`%ld`）\n`int32_t`能够让编程人员选择适合的大小范围来进行编程，便于大小的记忆。\n\n4.确认每种类型与它的含义。\n\n>1.`'\\b'`回车符（转义序列）\n>2.`1066`一个整数，一千零六十六\n>3.`99.44` 一个两位小数，九十九点四四\n>4.`0XAA`，十六进制数，10 * 16 + 10 = 170.\n>5.`2.0e30`，指数形式的小数，2 * 10^30(10的30次方)\n\n5.Dottie Cawm 编造了这个满是错误的程序，请找到这个程序中问题。\n\n```C\ninclude <stdio.h>\n\nmain\n{\n\tfloat g; h;\n\tfloat tax, rate;\n\n\tg = e21;\n\ttax = rate * g;\n}\n```\n\n（实在是太明显了啊。。）\n1.include前面忘了#\n2.main。。。（int main(void)，或者void main()）\n3.g后面用了分号来分隔，相当于h未规定类型。\n4.应该是1e21，e21啥也不是。\n5.tax类型与g的类型大小都太小了，应该用double，float表示不了精确的21位数，或者直接使用long long也可以，反正是整型。\n6.忘了写`return 0;`\n\n6.确定下面几种常量数据的类型，与打印他们所使用的格式化标识符。\n![](/img/Identifytypes1.png)\n\n>·····12为整型，（int（作为常量，默认为int）），输出可以使用`%d`,`%hd`,`%u`,`%LLu`,`%lu`。\n>·····`0X3`，十六进制数，`%X`\n>·····`'C'`，字符常量，`%c`\n>·····`2.34E07`,后面看成八进制，但仍然是7，小数的指数形式，用`%f`或者`%lf`都可以。\n>·····`\\040`,十进制的040为32，此即`32`,即`' '`（空格字符）\n>·····`7.0`，一位小数，可以使用`%f`或者`%lf`\n>·····`6L`,为`long`形式整型，可以使用`%ld`输出。\n>·····`6.0f`,为`float`形式小数，可以使用`%f`。\n\n7.同上\n![](/img/Identifytypes2.png)\n>·····012，八进制数，十进制下为10，可以用`%o`输出。\n>·····2.9e05L，`long double`，2.9 * 10^5.\n>·····`'s'`,字符常量，用`%c`.\n>·····`100000`,`32`位的`int`，`%ld`，或者`%lu`或者更大的类型`long long`。\n>·····`'\\n'`,转义序列换行符，直接打印即可。\n>·····20.0f，`float`类型，`%f`。\n>·····0x44，十六进制数，68.用`%x`输出。\n\n8.假设你的程序是以这几行声明语句开头的。\n```C\nint imate = 2;\nlong shot = 53456;\nchar grade = 'A';\nfloat log = 2.71828;\n```\n\n在下面的`printf()`函数语句中填入适当的格式化符。\n```C\nprintf(\"The odds against the %__ were %__ to 1.\\n\",imate, shot);\nprintf(\"A score of %__ is not an %__ grade.\\n\", log, grade);\n```\n\n```C\nprintf(\"The odds against the %d were %ld to 1.\\n\",imate, shot);\nprintf(\"A score of %f is not an %c grade.\\n\", log, grade);\n```\n\n9.假设`ch`是一个字符变量，展示一下如何将回行符通过转义序列、十进制数值与八进制及十六进制字符常量的形式赋给ch的。\n\n```C\nchar ch;\n\nch = '\\r';\nch = 13;\nch = '\\0x0D';\nch = '\\015';\n```\n\n10.纠正这个愚蠢的程序。\n![\"Perfect...\"](/img/Perfect.png)\n（在C语言中`\\`表示除）\n\n1.未指定形式参数的变量名。（main(int a)）\n2.注释符号没用对（要么`//`,要么`/**/`.)\n3.声明变量使用关键字。（`int cows, legs;`）\n4.`printf()`字符串缺少了右边的引号。\n5.`scanf()`少了取地址符`&`，而且legs的输入形式写错了，为`'%d'`\n6.`printf()`格式化符为`%d`。\n\n11.说说下面的转义序列代表啥意思？\n\n1. `\\n`,换行符，10.\n2. `\\\\`,相当于`\\`.\n3. `\\\"`,相当于`\"`.\n4. `\\t`,相当于tab键。\n\n# 编程训练\n\n1.通过实验方式，弄清你的电脑是如何处理整型上溢、浮点数上溢以及浮点下溢的，也就是写一个拥有数据溢出问题的程序。\n\n![](/img/overnunder.png)\n\n这个肯定会溢出，可以修改程序看看会发生什么。\n我观察到的是：整型溢出会直接跳到它的最小范围开始加\n比如2146483650 = - 2147483646 \n\n浮点上溢，会失去精度，但是只要未超过位数仍然可以表示，如果把指数调到40就会出INF（infinity），具体可以看上文对于浮点溢出的讲解。。\n\n浮点下溢，会直接被看成0。\n\n2.写一个能够根据你输入的ASCII码值返回对应字符的程序。\n\n![](/img/ASCIIout.png)\n\n包含了转义序列，使用了`switch`与`if`嵌套的结构。\n\n3.写一个能够发出警报声，并且能够打印以下句子的程序。\n\n```Bash\nStartled by the sudden sound, Sally shouted, \"By the Great Pumpkin,\nwhat was that!\"\n```\n\n重点有两个，一个是掌握好换行，可以用一个printf加上一个换行符实现，也可以用两个。\n另一个是如何在字符串内输出\"，这也是我们周赛第一道题的考点\n\n![](/img/alarming.png)\n\n4.书写一个能够读入浮点数据，然后将它先以十进制小数的形式输出，再以指数形式输出。输出类似下方，但指数形式的实数部分是视系统而变的。\n\n![](/img/decimalandexp.png)\n\n5.一年大概有3.156 * 10^7秒，写一个要求你输入以年计数的年龄并将它转化为秒数的程序。\n\n![My life...](/img/lifesecond.png)\n\n6.一分子水大概是3.0 * 10^23克， 一夸脱水是950克。写一个要求你输入夸脱单位的水量，返回水的分子数的程序。\n\n![Too much...](/img/quartmol.png)\n\n7.一英寸是2.54厘米， 写一个要求你输入英寸高度，返回厘米高度的程序。你要是想的话也可以反过来转换。\n\n1.inch to cm\n![](/img/inchtocm.png)\n\n2.cm to inch\n![](/img/cmtoinch.png)\n\n\tEnd...\n\n\n\n\n\n","slug":"C-premier-plus-Chapter-3","published":1,"updated":"2023-12-22T06:56:26.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nxz000pzkue9mnw3xeo","content":"<h1 id=\"第三章-数据处理\"><a href=\"#第三章-数据处理\" class=\"headerlink\" title=\"第三章 数据处理\"></a>第三章 数据处理</h1><blockquote>\n<p>你会在这一章学到下面的东西：</p>\n<ol>\n<li>关键字<br>&#96;int,short,long,unsigned,char,float,double,_Bool,_Complex</li>\n<li>运算符<br><code>sizeof</code></li>\n<li>函数<br><code>scanf()</code></li>\n<li>整型与浮点型的区别</li>\n<li>书写常量与声明这些类型的变量</li>\n<li>如何使用<code>printf()</code>与<code>scanf()</code>函数来读写不同类型的值</li>\n</ol>\n</blockquote>\n<p>程序依靠数据来工作。你会向电脑输入数字、字母或者单词，然后期望它能够利用这些数据做些事情。例如，你可能想要电脑去计算支付利润或者展示一个排过序的酒商列表。在这一章，你将会不只阅读数据，而且练习着去操纵数据，那是挺有趣的一件事。</p>\n<p>这一章还会让你了解到两大类数据类型：整数与浮点数。C语言提供了这些类型的几种变体。这一章会告诉你类型是什么，如何声明它们并且如何利用它们。而且，你会发现变量与常量之间的区别，作为额外奖励，你的第一个交互式的小程序就要诞生了！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"3-1-一个例子\"><a href=\"#3-1-一个例子\" class=\"headerlink\" title=\"3.1 一个例子\"></a>3.1 一个例子</h2><p>再一次，我们还是从一个样例程序来开始，像以往一样，你会发现一些不熟悉的东西，我们待会就会为你解释。程序的总体目的应该清晰，那么就尝试把图3.1中的源码编译运行下吧。<br>为了节省时间，你可以省略注释。</p>\n<p><img src=\"/img/Listing3.1.png\" alt=\"图3.1\"></p>\n<p><img src=\"/img/ErrandWarn.png\" alt=\"错误与警告\"><br>【错误与警告】<br>如果你把程序的某些部分打错了，还有，比如说，遗漏了一个分号，编译器就会给予你一条语法错误信息。即使你没打错，编译器也有可能给予你一条警告信息，“Warning-conversion from ‘double’ to ‘float’ , possible loss of data.” 错误信息指的是你有可能把某些事做错了，它阻止程序的编译。警告，意思是你写的代码是合法的但是有可能做的并不是你想的那样。警告并不会阻止编译过程。上文中的这条信息就会在C语言在处理像770.0这样的数时出现，但并不是这个例子的问题，这一章过会会解释这条警告。</p>\n<p>当你在打字写这个程序的时候，你有可能会把<code>770.0</code>改成这种珍贵金属的当前价格。但是不要改变14.5833，那代表着一磅对应的盎司数。（盎司金衡制，是对于贵重金属使用的，常规衡制是给人们使用的，不论是珍贵的物品或是其他的东西。）</p>\n<p>需要注意的是“输入”你的体重意味着把你的体重打字写入电脑，并且敲下Enter或者Return键（不要输入完了你的体重就等着。）按下Enter键这个动作告诉了电脑你已经完成了你的应答。这个程序想要你输入一个数字，如<code>150</code>而不是单词，比如<code>too much</code>，如果你写的是字母而不是数字，那是会导致问题的，而这个问题需要之后学习的<code>if</code>语句来解决。（第七章，“C语言控制语句：分支结构与跳跃结构”会讲到），所以请先平静一些，输入一个数字，这里就是一个简单的输出示例。</p>\n<p><img src=\"/img/Olist3.1.png\" alt=\"输出\"></p>\n<h3 id=\"3-1-1-例子中的新知识\"><a href=\"#3-1-1-例子中的新知识\" class=\"headerlink\" title=\"3.1.1 例子中的新知识\"></a>3.1.1 例子中的新知识</h3><p>在这个C语言程序中有这么几个新接触的要素。</p>\n<ul>\n<li>可以注意到的是，代码在变量声明中使用了新的数据类型，前面提到的例子只使用了十进制整数类型(<code>int</code>)，但是现在的这个例子使用了一个浮点类型的变量类型，这样的话你就可以处理更大范围的数据了。<code>float</code>类型就可以保存含有十进制小数点的数字。</li>\n<li>这个程序给出了书写常量的一些更新的方式，你现在可以书写浮点型的常量了。</li>\n<li>为了对程序提供输入信息，你需要使用<code>scanf()</code>函数，<code>%f</code>命令<code>scanf()</code>从键盘输入中读入一个浮点数，<code>&amp;weight</code>告知了<code>scanf()</code>函数把输入的值赋给名字叫做<code>weight</code>的变量，<code>scanf()</code>函数会用<code>&amp;</code>符号来寻找在哪里可以找到叫做<code>weight</code>的变量，下一章我们会进一步地阐述<code>&amp;</code>符号，现在，只需要相信我们你需要在这里添加一个<code>&amp;</code>符号。</li>\n<li>可能最突出的新特性就是程序变为交互性的了。电脑会要求你输入信息，并使用你输入的数值。一个交互性的程序是比不能交互的更有趣的。更重要的是，交互的方法让程序更加的灵活。举个例子，样例程序就可以用于所有合理的体重了，而不只是150磅，你不需要换一个人就再把程序重写一遍。<code>scanf()</code>函数会从键盘中获取数据，并把数据传递到你的程序，<code>printf()</code>函数会从程序中获取数据，然后把数据传递到你的屏幕上。这两个函数在一起就可以让你建立电脑与你的双向联系（见图3,1），这就让电脑使用更加有趣了。</li>\n</ul>\n<p>我们会在这一章讲述这些新特点中的前两条，后面的三条内容会在第四章-字符串与格式化输入输出完整地讲到，但是这一章还是会少量地使用<code>print()</code>与<code>scanf()</code>函数。</p>\n<p><img src=\"/img/Figure3.1.png\" alt=\"输入输出函数的工作\"></p>\n<h2 id=\"3-2-变常类型\"><a href=\"#3-2-变常类型\" class=\"headerlink\" title=\"3.2 变常类型\"></a>3.2 变常类型</h2><p>一台电脑，在程序的指导之下，可以做到很多的事情。可以做加法，可以给名称排序，可以指示讲话者或者屏幕的演出顺序，可以计算彗星的轨道，可以编排你的邮寄列表，拨叫电话号码、画出由小棒组成的人物，得出结论或者其他你可以想象到的可以被创造的东西。为了完成这些任务，程序需要处理<em><strong>数据</strong></em>，也就是你使用的保存在程序中的所有数字与字符信息。一些数据类型需要在程序使用之前进行预设，而且保证它们的值是不变的，这些就是<em><strong>常量</strong></em>。其他的数据类型的值或许会随着程序运行改变或者被赋给，这些就是<em><strong>变量</strong></em>。在这个样例程序中，<code>weight</code>就是一个变量，而<code>14.5833</code>就是一个常量。那么<code>770.0</code>呢？虽然铑金属在真实生活中的价格并不是个常量，但是这个程序把它作为一个常量来处理。变量与常量的区别就在值可不可以随着程序运行发生改变上。</p>\n<h2 id=\"3-3-数据类型关键字\"><a href=\"#3-3-数据类型关键字\" class=\"headerlink\" title=\"3.3 数据类型关键字\"></a>3.3 数据类型关键字</h2><p>讲完了变量与常量的区别之后，我们需要了解一下不同数据<em><strong>类型</strong></em>之间的区别。一些数据是数字形式，一些是字母，或者更加普遍的，它们是字符。电脑需要一种方式来确定与使用这些不同的类型。C语言通过对于基本的数据类型的定义完成了这个工作。如果数据是一个常量，编译器通常是可以通过它看起来的样子来区分它的。<code>42</code>是一个十进制整数，<code>42.100</code>是一个浮点数，在另一面，变量就需要声明语句来声明它的类型。随着学习进行下去，你会了解到关于声明变量的更多细节。但是还是让我们首先先研究一下C语言可以识别的基本类型，K&amp;R C确立了有关于类型的七个关键字，C90标准增加了两个，C99标准又增加了三个。（见表3.1）<br><img src=\"/img/Table3.1.png\" alt=\"表3.1\"></p>\n<p><code>int</code>关键字提供了C语言中基本的十进制整数类型，下面的三个关键字(<code>long, short, unsigned</code>)还有ANSI添加的<code>signed</code>提供了基本类型的变体。接着，<code>char</code>关键字指明了用于字母与其他字符的类型，如<code>%, $, #</code>等，<code>char</code>类型还可以被用来代表大于0与小于10的十进制整数。然后是<code>float</code>与<code>double</code>，还有两者的混合<code>long double</code>是用来代表带有十进制小数点的数字的。<code>_Bool</code>类型是为布尔类型提供的(<code>true</code>和<code>false</code>)，最后是分别代表着复数与虚数的<code>_Complex</code>与<code>_Imaginary</code>.</p>\n<p>由这些关键字创造的类型又可以基于在电脑中的储存类型分为两种，<em><strong>十进制整数类型</strong></em>与<em><strong>浮点数类型</strong></em>。</p>\n<p><img src=\"/img/storingtypes.png\" alt=\"Bits, Bytes and Words\"><br>【Bit（位）、字节与字】</p>\n<p><em>bit</em>、<em>字节</em>与<em>字</em>可以被用来描述电脑的数据单元或者内存单元。我们会集中于第二种用法。</p>\n<p>内存的最小单元叫做<em><strong>bit</strong></em>，它可以保存<code>0</code>与<code>1</code>之间的其中一种数值（或者你可以说，这个字节被设为“关”或者“开”）你并不能在一个bit中储存太多的信息，但是电脑可以储存很多的字节，bit就是电脑内存的基础组成模块。</p>\n<p><em>字节</em>是电脑内存的一般单元。对于大多数的机器来说，一个字节是8个bi，那是标准的定义，至少当测量内存的时候（C语言有不同的定义，我们会在“使用字符：<code>char</code>类型”这一节讲到）因为一个bit不是0就是1，那么在8位的字节中，就可以有256种可能（2的8次方），这些可能的模式就可以被用作比如代表0到255的数字或者代表一系列的字符。在二进制代码下，这种一对一的映射是可以被建立的，而且使用0与1来代表数字也使机器便利的。（在第15章-位运算，会讲述二进制代码，但是如果你想的话现在就可以去读一下）。</p>\n<p><em>字</em>是电脑固定设计下的内存自然单元，对于8位的微型计算机，比如原来的苹果电脑来说，一个字就只是8个bit。早期的IBM兼容器使用的80286处理器是16位的机器，这也就是说他们把字长增加到了16bit。还有例如以Pentinum为基础的计算机，还有Mactonish PowerPC的字长是32bit。还有更强大的电脑的字长是64位的或者更大。</p>\n<h3 id=\"3-3-1-整型与浮点型\"><a href=\"#3-3-1-整型与浮点型\" class=\"headerlink\" title=\"3.3.1 整型与浮点型\"></a>3.3.1 整型与浮点型</h3><p>整型？浮点型？如果你感觉这些词非常不熟悉以至于干扰了你的阅读进度，我们这就要简要描述它们的意义了。如果你对位、字节还有字还是不熟悉的话，你可能需要阅读一下最近描述过的附加栏。你真的需要了解所有的细节吗？并不是，不只了解内燃机驱动车子的工作原理，而多了解一些电脑或者引擎内部发生的事情有时候可以帮到你。</p>\n<p>对于一个人来说，整型与浮点型的区别体现在它们是怎么被写下的。对于电脑来说，那就体现在它们是怎么被储存的。让我们依次来研究一下这两种类型。</p>\n<h3 id=\"3-3-2-整数类型\"><a href=\"#3-3-2-整数类型\" class=\"headerlink\" title=\"3.3.2 整数类型\"></a>3.3.2 整数类型</h3><p><em><strong>整型</strong></em>是没有小数部分的数字。在C语言中，整型是没有小数点的数字。比如说-2、-23还有2456。像3.14, 0.22, 还有2.00这些数就不是整型。整型是以二进制数字的形式被储存起来的。比如7就是被储存为二进制数111的。因此，为了在8位字节中储存这个数字，会把前五个位设置为0，然后把后三个位设置为1。    </p>\n<p><img src=\"/img/Figure3.2.png\" alt=\"用二进制码储存7\"></p>\n<h3 id=\"3-3-3-浮点数类型\"><a href=\"#3-3-3-浮点数类型\" class=\"headerlink\" title=\"3.3.3 浮点数类型\"></a>3.3.3 浮点数类型</h3><p><em><strong>浮点</strong></em>数多多少少是对应着数学概念中的<em><strong>实数</strong></em>，实数包含着整数之间的这些数字，浮点数基本是这些样子：2.75、3.16E7、7.00、2e-8，需要注意的是，只要有小数点就会把整型数字转换为浮点数，比如7.00是一个浮点数，而7就是一个十进制整数。很明显，书写浮点数的方式不止一种，我们会在之后更充分地讨论用e符号表示的形式。但是简单来说，3.16E7的表示方式意思就是3.16乘10的7次方，也就是1后面添7个0，7也就是10的<em><strong>指数</strong></em>。</p>\n<p>关键就是储存浮点数的方式与整数不一样。浮点数的表示涉及到把一个数字分开为小数部分与整数部分，然后分别储存。因此，7.00这个数字不会与整数7同样储存，即使它们的值都是一样的。十进制类比起来也就是把7.0写为0.7E1。这里，0.7就是小数部分，1就是指数部分，图3.3展示了浮点数储存的另一个例子。一台电脑当然会使用二进制数与二进制而不是十进制来储存。你会在第十五章了解关于这个话题的更多信息。现在我们先集中精力于在实用上区别吧。</p>\n<ul>\n<li>整型没有小数部分，浮点数可以有小数部分。</li>\n<li>浮点数比整数代表的数字更多，可以看一下这一篇结尾的图表3.3。</li>\n<li>对于一些算术运算符，比如一个数减去另一个数，浮点类型的精确度会有更大可能下降。</li>\n<li>因为在任何一个范围之间都有着无数的浮点数，比如在1.0与2.0之间，电脑就不能完全地代替这些值，它用实数的大概值来估计浮点数的值。比如7.0有可能被储存为6.99999的<code>float</code>值，过会会讲到更多有关于精确度的知识。</li>\n<li>浮点运算符的优先级通常是比整型运算符要低的，然而用来处理浮点运算的特殊微型处理器已经可用了，这个问题也就得到了解决。</li>\n</ul>\n<p><img src=\"/img/Figure3.3.png\" alt=\"十进制浮点储存方式\"></p>\n<p>现在就让我们研究一下C语言中各种数据类型的特点吧。对于每一种类型，我们会描述如何声明一个变量，如何用变量代表一个常量，还有一些特殊的用法。一些年代较早的C语言编译器可能不能支持下文全部的类型，所以你可以查看一下你的编译器的说明书，看一看哪些数据类型是可用的。</p>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"3-4-1-int类型\"><a href=\"#3-4-1-int类型\" class=\"headerlink\" title=\"3.4.1 int类型\"></a>3.4.1 <code>int</code>类型</h3><p>C语言提供了很多的整数类型，你可能想知道为什么只有一种还不够，答案就是这样C语言就可以让你将特定的变量用在特定的地方。具体来说，C语言的各个整数类型不同在值域的大小与是否含有负数上。<code>int</code>是最基本的整数类型，但是你要是为了满足机器任务的特定需求的话，其他的类型也都是可用的。</p>\n<p><code>int</code>类型是一种有符号的整数类型，有符号意味着<code>int</code>类型的整数可以是正数、也可以是负数，或者是0。<code>int</code>类型的值域是取决于计算机系统的，通常一个<code>int</code>类型的整数的大小就是内存的一个字长。因此，旧版的16位IBMPC适配器，就可以使用16个位来储存整数，也就是从-<strong>32768</strong>到<strong>32767</strong>。现在的个人电脑一般是使用32位的整数大小，在这张结尾的表3.3可以看到一些个例子。现在个人电脑产业也正在向64位处理器发展，那样也就可以使用更大的整数了。ISO&#x2F;ANSI C语言特别指出<code>int</code>的最小范围应该是-<strong>32767</strong>到<strong>32767</strong>，通常系统会专门拿出一个位来保存符号，第十五章描述这种了一般的方法。</p>\n<h4 id=\"3-4-1-1-声明int类型\"><a href=\"#3-4-1-1-声明int类型\" class=\"headerlink\" title=\"3.4.1.1 声明int类型\"></a>3.4.1.1 声明<code>int</code>类型</h4><p>正像你在第二章看到的，关键字<code>int</code>可以用来声明一个基本的整型变量。声明，首先是<code>int</code>，然后是变量的名称，最后是一个分号。要是声明多个变量的话，可以分别声明，也可以用逗号分隔，把一系列的变量名列出来，下面的声明方法都是合法的。</p>\n<p><img src=\"/img/valid_declaration.png\"></p>\n<p>你可能已经使用过分别声明变量的方法了，或者你已经尝试在一行中声明全部的变量了。效果都是一样的：就是对四个<code>int</code>大小的变量分配空间并与变量名相联系。</p>\n<p>这些声明语句创造了变量，但并没有给它们赋值，变量要如何得到值呢？你已经见过两种方法了，第一种是赋值语句</p>\n<p><img src=\"/img/assignments.png\"></p>\n<p>第二，变量也可以使用函数来赋值，比如说<code>scanf</code>函数。<br>现在我们来了解一下第三种方法吧。</p>\n<h4 id=\"3-4-1-2-变量初始化\"><a href=\"#3-4-1-2-变量初始化\" class=\"headerlink\" title=\"3.4.1.2 变量初始化\"></a>3.4.1.2 变量初始化</h4><p>对变量进行<em><strong>初始化</strong></em>也就是给变量赋起始值，或者初值。在C语言中，这可以作为声明的一部分，只需要在变量名后加上赋值运算符还有你想要赋给这个变量的值就可以了。下面是一些例子。</p>\n<p><img src=\"/img/initialization.png\"></p>\n<p>在最后一行，只有<code>cats</code>被初始化了，速读一遍，你有可能觉得dogs也会被赋值为94，所以还是最好避免把未赋值与已赋值的变量放在一行之中吧。</p>\n<p>简单来说，这些声明会为变量创造空间，并为它们贴上变量类型的标签，而且还可以给赋变量起始值。（见图3.4）</p>\n<p><img src=\"/img/DefinenInitial.png\" alt=\"图3.4\"></p>\n<h4 id=\"3-4-1-3-int型常量\"><a href=\"#3-4-1-3-int型常量\" class=\"headerlink\" title=\"3.4.1.3 int型常量\"></a>3.4.1.3 <code>int</code>型常量</h4><p>在上一个例子中各种各样的整数（21、32、14、94等），就是整型常量。当你书写一个没有十进制小数点并且没有指数的数时，C就会将这个数认作整型常量。因此，22与-44都是十进制整型常量，但是<code>22.0</code>与<code>2.2E1</code>就不是。C语言会把大多数整型认作<code>int</code>类型常量。但很大的数会有区别。看最后对于long常量与long long常量的描述就知道了。</p>\n<h4 id=\"3-4-1-4-打印int值\"><a href=\"#3-4-1-4-打印int值\" class=\"headerlink\" title=\"3.4.1.4 打印int值\"></a>3.4.1.4 打印<code>int</code>值</h4><p>你可以使用<code>printf()</code>函数来打印<code>int</code>类型的值，正像你在第二章看到的，%d符号可以在十进制整数被打印出来的地方作为占位符。%d的名称叫格式化符，因为它声明了<code>printf()</code>打印值的类型每一个在格式化字符串中的每一个<code>%d</code>都代表着一个<code>int</code>类型的值，它就在字符串后面的列表中。那个值可以是一个<code>int</code>类型变量代表的，也可以是一个<code>int</code>类型常量代表的，或者任何有<code>int</code>值的表达式。这样，你就有责任让格式化符与之后的列表中的值一致了，编译器并不会报出这种错误。图3.2就表示了一个初始化并且打印变量值，常量的值，还有简单表达式的值的程序，它也提示了你如果你不小心的话会发生什么。</p>\n<p><img src=\"/img/Listing3.2.png\" alt=\"图3.2\"></p>\n<p>编译完运行这个程序的结果是这样的。</p>\n<p><img src=\"/img/result1.png\"></p>\n<p>第一行输出，第一个<code>%d</code>代表着一个<code>int</code>类型变量<code>ten</code>第二个代表着常量2，第三个呈现的是<code>ten</code> - <code>two</code>的值。但第二行，使用的是<code>ten</code>这个变量代替了第一个<code>%d</code>但是之后的值全都是随机的，是从最近的两个内存空间中获取的值！（你回去的值有可能与这里显示的值相差很多，不仅内容不一样，而且不同的编译器对于这些内存区的管理方法也不一样。）</p>\n<p>你有可能对编译器为啥并不会捕捉到这个很明显的错误，还是怪<code>printf()</code>函数的原始设计吧。大多数函数都会获取一个值作为参数，编译器可以检查出来你使用的值是不是恰当，但是<code>printf()</code>可以获取一个、两个、三个或者更多的参数，那就让编译器无法使用常用的错误检测方法了。记住，一定要检查格式化符是不是与被显示的值匹配。</p>\n<h4 id=\"3-4-1-5-八进制与十六进制\"><a href=\"#3-4-1-5-八进制与十六进制\" class=\"headerlink\" title=\"3.4.1.5 八进制与十六进制\"></a>3.4.1.5 八进制与十六进制</h4><p>通常来说，C语言会认为整型常量是十进制数。但是八进制与十六进制也受到许多编程人员的欢迎。因为8与16都是2的幂，但10并不是，这些进制系统有时会为与计算机相关的值的表达提供便利。例如，数字65536经常会出现在16位的机器中，它只是10000的十六进制数，十六进制数中的每一位数都对应着实际的四个位。例如，十六进制数3就对应着0011，5就对应着0101，所以35就对应着0011 0101，53就对应着0101 0011。这种对应就会使十六进制与二进制的转换非常简单。但是电脑是怎么判断10000是什么进制的数字的呢？在C语言中，数字不同的前缀就显示了不同的进制，0x（0X）就意味着你正在使用十六进制值，所以16在十六进制下会被写作0x10或0X10。相似地，前缀0就表示你正在使用的是八进制值。例如，十进制数16在八进制数中就写为020，在15章我们会更加充分地讨论不同的数制。</p>\n<p>要知道的是不同的数制系统是为你提供便利的，它并不会影响数值的储存方式，也就是说，你可以写16、020或者0x10，这个数还是会以二进制的方式储存起来。</p>\n<h4 id=\"3-4-1-6-展示八进制与十六进制数\"><a href=\"#3-4-1-6-展示八进制与十六进制数\" class=\"headerlink\" title=\"3.4.1.6 展示八进制与十六进制数\"></a>3.4.1.6 展示八进制与十六进制数</h4><p>正像C语言能够让你以三种方式书写数字一样，它也可以让你以三种方式的任意一种展示数字。展示一个八进制整数可以使用%o，十六进制使用%x，如果你想显示前缀，你可以使用修饰符#，比如<code>%#o</code>，<code>%#x</code>，<code>%#X</code>，有了它们你就可以在数字前面显示0，0x，0X前缀。图3.3给出了一个小小的例子（想到你有可能必须加上一个<code>getchar()</code>，它会在一些IDE中防止程序立即关闭）。</p>\n<p><img src=\"/img/Listing3.3.png\" alt=\"图3.3\"></p>\n<p>编译运行过后结果是这样的。</p>\n<p><img src=\"/img/result2.png\"></p>\n<p>你可以看到相同的数字被以三种不同的数制打印出来了，<code>printf()</code>函数可以实现这种转化。<br>注意前缀只有加上#时才会出现。</p>\n<h3 id=\"3-4-2-其他整型\"><a href=\"#3-4-2-其他整型\" class=\"headerlink\" title=\"3.4.2 其他整型\"></a>3.4.2 其他整型</h3><p>当你正在学习C语言时，<code>int</code>类型有可能已经满足了你大部分的整型需求了。但为了内容的完整，我们会研究其他的类型。如果你喜欢的话，你可以只大体浏览一下这一部分，然后跳到对于<code>char</code>类型那一部分，然后如果有啥需要的可以再回来复习。</p>\n<p>C语言使用三个形容词关键字来修饰基本整型：<code>short, long, unsigned</code>下面是需要记住的一些点。</p>\n<ul>\n<li><code>short int</code>类型，或者直接<code>short</code>，会比<code>int</code>使用的内存更少，由此也就可以在只使用小的数字的时候节省一些空间。像<code>int</code>一样，<code>short</code>为有符号类型。</li>\n<li><code>long int</code>类型，或者直接写<code>long</code>，占用的内存会比<code>int</code>更多，因此可以让你表示更大范围的数字，像<code>int</code>一样，<code>long</code>为有符号类型。</li>\n<li><code>long long int</code>类型，或者<code>long long</code>（都是在C99标准下被引入的），会比<code>long</code>类型占用的内存更多，也就让你可以使用比<code>long</code>范围更大的数字。像<code>int</code>一样，<code>long long</code>是一个有符号的类型。</li>\n<li><code>unsigned</code>类型，或者写成<code>unsigned</code>，是为非负的变量而设置的，这种类型改变了可储存数字的范围，例如，16位的<code>unsigned int</code>可以表示0-65535的数字，就不是-32768-32767了，用来表示符号的那一位在无符号类型这变成了另一个可以表示数字的位，也就让数字的表示范围扩大了。</li>\n<li><code>unsigned long int</code>类型，或者<code>unsigned long</code>还有<code>unsigned short int</code>，或者<code>unsigned short</code>，在C90标准下都是可以被识别的，在C99标准下又添加了<code>unsigned long long int</code>类型，或者<code>unsigned long long</code>。</li>\n<li>为了让你的意图明显，关键字<code>signed</code>可以被用在任何有符号类型上，例如<code>short</code>, <code>short int</code>, <code>signed short</code>,<code>signed short int</code>都是一种类型。</li>\n</ul>\n<h4 id=\"3-4-2-1-声明其他整型\"><a href=\"#3-4-2-1-声明其他整型\" class=\"headerlink\" title=\"3.4.2.1 声明其他整型\"></a>3.4.2.1 声明其他整型</h4><p>其他整型与<code>int</code>类型的声明方式是相似的，<br>下面就展示了一些例子。<br>并不是所有的编译器都能识别最后三种类型，最后一个例子是C99标准新加进去的。</p>\n<p><img src=\"/img/othertypes.png\" alt=\"其他整型\"></p>\n<h4 id=\"3-4-2-2-为什么要用多种整型？\"><a href=\"#3-4-2-2-为什么要用多种整型？\" class=\"headerlink\" title=\"3.4.2.2 为什么要用多种整型？\"></a>3.4.2.2 为什么要用多种整型？</h4><p>为什么说<code>long</code>与<code>short</code>与<code>int</code>相比会使用不同的内存呢？因为C语言会确保<code>short</code>不会长过<code>int</code>，<code>int</code>也不会长过<code>long</code>，主要的目的就是为了适应不同类型的机器。例如在运行着Windows 3.1的IBM PC上，<code>int</code>与<code>short</code>都是16位的，而<code>long</code>是32位的，而在Mactonish Power PC上，<code>short</code>类型是16位的，而<code>int</code>和<code>long</code>类型是32位的。PowerPC G3&#x2F;G4中的Pentium芯片的字长是32位，因为这就可以让整型超过20亿（见表3.3），C语言在处理器&#x2F;操作系统的实现没有必要超出这个数值。因此，<code>long</code>与<code>int</code>大小是一样的。对于许多的使用过程，那个大小的整数是不需要的，所以节省内存的<code>short</code>就被创造了。但另一方面，原本的IBM PC只有16位的字长，那就意味着需要更长的<code>long</code>类型。</p>\n<p>现在64位的处理器都变得很常见了，比如IBM Itantium，AMD Opteron，还有PowerPC G5。因为64位整型的需要，<code>long long</code>类型也就应运而生。</p>\n<p>现在最常见的实践是把<code>long long</code>设置为64位，把<code>long</code>设置为32位，把<code>short</code>设置为16位，把<code>int</code>设置为16位或者32位，它的大小取决于电脑的自然字长。原则上，这四种类型可以代表四种不同的大小。</p>\n<p>C语言标准为确定每一种基本数据类型的最小尺寸提供了指引。<code>short</code>与<code>int</code>的最小范围是从-32,767到32,767，对应着16位的单元，而<code>long</code>类型的最小范围是-2,147,483,647到2,147,483,647，对应着32位的单元。（注意，为了易读，我们使用了逗号分开，但是C语言代码是不能写成这样的）。对于<code>unsigned short</code>与<code>unsigned int</code>，最小的范围是0到65535，而<code>unsigned long</code>的最小范围是0-4,294,967,295&#x2F;,<code>long long</code>类型为了迎合64位的需求，它的最小范围很大，是-9,223,372,036,854,775,807到9,223,372,036,854,775,807，而<code>unsigned long long</code>就是0到18,446,744,073,709,551,615.（对于那些检查写的对不对的人，下面是它的英文表示，但是谁要计数呢？）</p>\n<p><img src=\"/img/nonsense.png\" alt=\"(一脸认真)\"></p>\n<p>你会在什么时候使用这些不同的<code>int</code>类型呢？第一，考虑<code>unsigned</code>类型，使用它们计数是很好的，因为你不需要负数，而且<code>unsigned</code>类型比<code>signed</code>类型的范围更大，可以得到更大的整数范围。</p>\n<p>如果你需要处理超过了<code>int</code>类型的范围的数字，使用<code>long</code>类型，但是在<code>long</code>比<code>int</code>长的系统中，使用<code>long</code>会让计算变慢，所以没必要的话就不要用<code>long</code>，进一步说，如果你正在一个<code>int</code>与<code>long</code>类型长度一样的系统上写代码，而你又需要32位的整数，你就需要使用<code>long</code>而不是<code>int</code>了，那样程序才可以在转到16位机的时候正常运转。</p>\n<p>相似地，如果你需要64位整型数的时候就使用<code>long long</code>吧，一些电脑已经使用着64位的处理器，而且并且正在服务器、工作站甚至桌面的64位处理也正在变得越来越普遍。</p>\n<p>如果你需要节省内存空间的话，使用<code>short</code>来节省内存空间，比如如果你在一台<code>int</code>类型是32位的机器上，需要16位的值这种情况。通常只有当你的程序使用整型数组这种与系统的可用内存极其相关的情况下节省内存才是必须的。另一个使用<code>short</code>的原因是它有可能与被电脑的特定部分使用的硬件寄存器的大小相同。</p>\n<blockquote>\n<p><img src=\"/img/overflow.png\"><br>整型溢出。<br>当一个整型相对于它的类型太大了会怎么样呢？让我们把一个整型变量设置到它可能的最大值，并用它加一些数，看看会发生什么。<code>unsigned</code>与<code>\tsigned</code>类型都可以试试（<code>unsigned int</code>的格式化符是<code>%u</code>）<br>这就是系统给出的结果<br><img src=\"/img/flowresult.png\"><br><code>unsigned</code>类型好像汽车的里程计一样，当它到达了最大值，它就会返回到它的最小值，变量i也很相似，主要的区别是<code>unsigned</code>类型的<code>j</code>\t是以0开始的，但是<code>int</code>类型的<code>i</code>是以-2147483647开始的。<br>注意的是，你如果没有被告诉这个数据已经溢出了，你还是会不断地在这个问题上打转。<br>这里描述的行为是由C语言<code>unsigned</code>类型的规范控制的，标准并不规定<code>signed</code>应该行为如何，这里展示的行为也是通常会发生的，但是你以后会找到不一样的东西的。</p>\n</blockquote>\n<h4 id=\"3-4-2-3-long常量与long-long常量\"><a href=\"#3-4-2-3-long常量与long-long常量\" class=\"headerlink\" title=\"3.4.2.3 long常量与long long常量\"></a>3.4.2.3 <code>long</code>常量与<code>long long</code>常量</h4><p>一般地，当你在代码中使用2345这样的数字时，它会被储存为一个<code>int</code>类型的常量。那么如果你使用1000000这样不能被<code>int</code>储存下来的数字呢？编译器就会将它识别为<code>long int</code>，如果认为这个类型已经足够大了的话。如果比<code>long</code>类型的最大值还要大的话，C语言会将它当做<code>unsigned long</code>类型，如果那还不够的话，它就会把它当做<code>long long</code>类型或者<code>unsigned long long</code>，如果这些类型可以满足要求的话。</p>\n<p>八进制与十六进制的常量会被认作<code>int</code>类型，除非这个值太大，然后还是以上文的顺序依次递加。</p>\n<p>有些时候你有可能想让编译器把一个小点的数储存为<code>long</code>类型。如果你在编程的过程中需要外显地使用内存地址，例如在IBM PC上，就有可能有这样的问题。而且，一些基本的C语言函数是需要<code>long</code>类型的值的，你可以在数值加上后缀<code>l</code>或者<code>L</code>，第二种方式更好，因为看起来不像数字<code>1</code>。因此，一个有着16位大小的<code>int</code>与32位大小的<code>long</code>，会将<code>7</code>这个数储存在16位中，而将<code>7L</code>储存为32位中，而且这两个后缀对于八进制与十六进制都是适用的，像是020L与0x10L。</p>\n<p>相似地，在那些有<code>long long</code>类型的系统中，你就可以使用<code>ll</code>或者<code>LL</code>后缀，比如<code>3LL</code>，而且还可以使用<code>u</code>或者<code>U</code>来表示<code>unsigned long long</code>类型，就像<code>5ull</code>或者<code>10LLU</code>或者<code>9Ull</code>。</p>\n<h4 id=\"3-4-2-4-打印short-long-long-long与unsigned类型\"><a href=\"#3-4-2-4-打印short-long-long-long与unsigned类型\" class=\"headerlink\" title=\"3.4.2.4 打印short, long, long long与unsigned类型\"></a>3.4.2.4 打印<code>short, long, long long</code>与<code>unsigned</code>类型</h4><p>要打印一个<code>unsigned int</code>类型的数字，只需使用<code>%u</code>符号，<code>long</code>类型可以使用<code>%ld</code>，但如果你的机器中<code>int</code>与<code>long</code>是大小一致的，那<code>%d</code>就可以了，但是代码有可能在别的系统中就不能正常运作了，所以对<code>long</code>来说最好还是使用<code>%ld</code>吧，对于<code>x</code>与<code>o</code>都可以在前面加上<code>l</code>。因此对于十六进制的<code>long</code>类型数你会使用<code>%lx</code>，类似在八进制会使用<code>%lo</code>，需要注意的是即时C语言提供了大写的<code>L</code>后缀，但是在格式化符中，只能使用小写。</p>\n<p>C语言有几种额外的<code>printf()</code>格式，首先，你可以在使用<code>short</code>类型时在<code>%d</code>的<code>d</code>前加<code>h</code>来表示十进制的<code>short</code>整型，同理<code>%ho</code>也是可以的，而且<code>h</code>与<code>l</code>是可以再加上<code>u</code>表示无符号的。例如，你会使用<code>%lu</code>符号表示<code>unsigned long</code>类型，图3.4就提供了一个例子。支持<code>long long</code>的系统也可以使用<code>%lld</code>或者<code>%llu</code>分别表示有符号与无符号的<code>long long</code>整型，第四章会对格式化符进行更充分的阐述。</p>\n<p><img src=\"/img/Listing3.4.png\" alt=\"图3.4\"></p>\n<p>这是系统的输出：</p>\n<p><img src=\"/img/result3.png\"></p>\n<p>这个例子就显示出了使用错误的格式化符会有意想不到的后果。第一，注意到对于变量<code>un</code>使用的<code>%d</code>格式化符结果输出了一个负值，原因就是无符号与有符号数实际上是以相同的二进制排列被储存起来的（第15张会更详细地谈论这种属性），所以如果你告诉<code>printf()</code>函数这个数是没有符号的，与告诉它这个数是有符号的输出结果是不一样的。这种行为常会在你输入一个超限的数值时出现。小的整数，在两种格式化符之下都是一样的。</p>\n<p>第二，注意到无论你告诉<code>printf()</code>是<code>short</code>还是<code>int</code>类型，<code>short</code>变量<code>end</code>都是可以打印出正常值的。这就是因为当向函数输入一个参数的时候会自动将它转化为<code>int</code>类型，那么你就会问了:1.为什么这种转化会发生？2.<code>h</code>修饰符的用处在哪里？第一个问题的答案是<code>int</code>类型可以被电脑更加高效地处理。所以在<code>short</code>与<code>int</code>类型大小不同的机器上，有可能传递一个<code>int</code>值会更快。第二个问题的答案是你可以看看一个更加长的整型数如果被缩短为<code>short</code>类型了会看起来怎样。第三行的输出也为这一点提供了例证，当65537被写为32位二进制数时，它看起来是<code>00000000000000010000000000000001</code>这样子的，使用<code>%hd</code>格式化符会迫使<code>printf()</code>只看向最后的16个位，因此它会只打印<code>1</code>，相似的，最后一行的<code>verybig</code>使用<code>%ld</code>就会只看向最后的32位，而不是完全的位数。</p>\n<p>早些时候你已经了解标识符的数量与显示数字的数量匹配的重要性了，现下你也知晓了标识符的种类也要匹配。</p>\n<p><img src=\"/img/matchup.png\"></p>\n<p>匹配<code>printf()</code>函数的格式化符<br>记着要去检查一下你是不是对于每一个要在<code>printf()</code>中打印的值都给予了一个格式化符，并检查是不是每一个的格式化符都与显示的值的类型相互对应。</p>\n<h3 id=\"3-4-3-字符-char\"><a href=\"#3-4-3-字符-char\" class=\"headerlink\" title=\"3.4.3 字符 char\"></a>3.4.3 字符 char</h3><p><code>char</code>类型是用来储存像字母、标点符号这样的字符的，但是严格来讲它其实是一个整数类型。为什么？<code>char</code>这个类型实际上储存的是整数而不是字符，为了处理字符，电脑会使用数字编码来让某一个整数代表某一个字符。在美国最常用的字符编码表是ASCII编码表，它已经在书的前封的背面给出来了，是这本书使用的编码表。举些例子，<code>65</code>在ASCII码表中代表的是大写的<code>A</code>，所以如果需要储存字母<code>A</code>，只需要储存数字<code>65</code>即可，（许多IBM主机用的是不一样的编码系统，它叫做EBCDIC，但是准则都是一样的。但在美国以外的计算机系统使用的编码表有可能是完全不同的。）</p>\n<p>基础的ASCII码是从0到127的，这个范围小到一个字节就可以保存下来，<code>char</code>类型通常会被定义成8位的内存单元，所以它不仅仅可以储存下来基础的ASCII码。许多系统，如IBM PC与苹果公司的Macintosh，可以提供更大的ASCII码表（这两个系统是不一样的），但是还是在8位范围之内。更加普遍的，C语言会确保<code>char</code>类型的大小是足够储存系统中C语言实现的需要的基础字符的。</p>\n<p>许多的字符集会有不只127而是255分值，例如日本的kanji字符集，商业的Unicode协议为代表全世界的各种字符创造了一个系统，现在已经有96000个字符了。ISO（国际标准组织）与IEC（国际电子委员会）为字符集创造了ISO&#x2F;IEC10646标准。幸运的是，Unicode标准与ISO&#x2F;IEC10646标准是始终协调的。</p>\n<p>使用这些字符集的平台有可能会使用16位或者32位的<code>char</code>类型代表，C语言定义下<code>char</code>的长度是1个字节，现在在C语言的记录中，一个字节会是16位或者32位，而不是那些系统上的8位。</p>\n<h4 id=\"3-4-3-1-定义char类型变量\"><a href=\"#3-4-3-1-定义char类型变量\" class=\"headerlink\" title=\"3.4.3.1 定义char类型变量\"></a>3.4.3.1 定义<code>char</code>类型变量</h4><p>正像你会期望的，<code>char</code>类型变量与其他变量的定义方式相同，这里就是一些例子。</p>\n<p><img src=\"/img/chardef.png\"></p>\n<p>这几行代码创造了三个<code>char</code>类型的变量：<code>response</code>，<code>itable</code>与<code>latan</code>。</p>\n<h4 id=\"3-4-3-2-字符常量及其初始化\"><a href=\"#3-4-3-2-字符常量及其初始化\" class=\"headerlink\" title=\"3.4.3.2 字符常量及其初始化\"></a>3.4.3.2 字符常量及其初始化</h4><p>假定你想要初始化一个字符常量为大写字母A，电脑语言是要让事情变得简单起来的，你不需要记忆ASCII码，你也不会，你可以直接以下面的方式给<code>grade</code>变量赋值<code>&#39;A&#39;</code></p>\n<p><img src=\"/img/charassign.png\"></p>\n<p>被双单引号框定的单一字符就是C语言中的<em><strong>字符常量</strong></em>，当编译器看到了<code>&#39;A&#39;</code>，它会将A字符转化成相应的字符编码值，单引号是必须的，下面就是例子。</p>\n<p><img src=\"/img/chardeclare.png\"></p>\n<p>如果你遗漏了引号，那么编译器就会认为<code>T</code>是一个变量名，如果你使用双引号的话，它会认为你正在使用字符串，我们会在第四章讲解字符串。</p>\n<p>因为字符确实是以数字的形式被储存起来的，你还是可以使用数字编码为<code>char</code>类型变量赋值。</p>\n<p><img src=\"/img/numassign.png\"></p>\n<p>在这个例子中<code>65</code>是一个<code>int</code>类型的，但是因为这个值是小于最大的<code>char</code>类型值的，所以可以无误地赋给<code>grade</code>变量，因为65对应着ASCII码中的字母<code>A</code>，所以<code>A</code>就被赋给了<code>grade</code>变量。但注意，这个例子只是为了表示系统用的是ASCII码系统，但用<code>65</code>与<code>&#39;A&#39;</code>都是一样的，因此，使用字符常量要比使用数字编码是要好的。</p>\n<p>有点奇怪的是，C语言会将字符常量当做<code>int</code>类型常量而不是<code>char</code>来看待。例如，在32位使用ASCII字符编码，<code>char</code>类型为8位的系统中，这一行代码：</p>\n<p><img src=\"/img/gradeb.png\"></p>\n<p>就会将<code>&#39;B&#39;</code>呈现为66这个值储存起来，但是<code>grade</code>是以8位单元储存的66，这种特点就会使字符常量不能存放多个字符，像<code>&#39;FATE&#39;</code>这样，因为4个单独的ASCII码被储存在32位的单元中，但是试图将这样一个字符常量赋给<code>char</code>类型变量会导致只有最后的8位被使用，也就是变量被赋给的是<code>&#39;E&#39;</code>。</p>\n<h4 id=\"3-4-3-3-不会被打印出来的字符\"><a href=\"#3-4-3-3-不会被打印出来的字符\" class=\"headerlink\" title=\"3.4.3.3 不会被打印出来的字符\"></a>3.4.3.3 不会被打印出来的字符</h4><p>单引号对符号、数字还有标点符号都是适用的，但是如果你浏览过这本书前封里的那张表，你会看到一些ASCII字符是打印不出来的。例如，一些代表着回车或者跳到下一行，又或是会让终止铃响的符号，这些符号是怎么被表示的呢？C语言提供了三种方法：</p>\n<p>第一种方法就是我们已经提到过的，使用ASCII表编码的方法。例如，蜂鸣符对应的值就是7，所以你可以这样写。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> beep = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n\n<p>表示这些字符的第二种方法是使用特殊的符号序列，它们叫做<em><strong>转义序列</strong></em>，表3.2给出了转义序列与它们的含义。</p>\n<p><img src=\"/img/Table3.2\" alt=\"表3.2\"></p>\n<p>在赋值给字符常量的时候，转义序列必须要由单引号框定，例如，你可以这样赋值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> nerf = <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后打印变量<code>nerf</code>，打印器或者屏幕上的行就会往前一行（回车）。</p>\n<p>现在我们可以看看每一个转义序列是做什么的，警告符<code>\\a</code>是在C90标准中添加的，它会生成一条有声有色的警告，警告的类型因硬件而定，一般蜂鸣声是最常见的（在有些系统中，警告符是没有用的。）ANSI标准规定了警告符是不能改变活跃位置的。活跃位置这个概念指的是在显示设备（如屏幕、电报机、打印机等等）上下一个字符会出现的地方。简单来说，它就是屏幕上你已经用惯了的光标的总称。在程序中使用警告符最终只会发出蜂鸣声，但并不会移动屏幕上的光标。</p>\n<p>然后，是<code>\\b, \\f, \\n, \\r, \\t</code>还有<code>\\v</code>这些转义序列，它们都是常见的输出设备的控制符，它们在影响活跃位置上很出色，回车(<code>\\b</code>)，会将活跃位置往前挪一个空格。换页符(<code>\\f</code>)会将活跃位置转移到下一页的开头。换行符(<code>\\n</code>)会将活跃位置切换到下一行的开始，(<code>\\r</code>)，回车符(<code>\\r</code>)会让活跃位置回到一行的开头位置，水平制表符(<code>\\t</code>)会将活跃位置向右移动一个<code>Tab</code>键的位置（通常，这些是以字符位置1、9、17、25这样的格式），垂直制表符(<code>\\v</code>)，会让活跃位置移动到下一个垂向的<code>tab</code>位置。</p>\n<p>这些转义序列并不一定在所有的显示设备中起作用。例如，换页符与垂直制表符在电脑屏幕上只会打印出来一个奇怪的字符，并没有任何光标的移动。但是如果在打印机上使用就可以按照描述工作了。</p>\n<p>最后的三个转义序列（<code>\\\\, \\&#39;, \\&quot;</code>），能够以字符常量的形式让你使用<code>\\, &#39;, &quot;</code>（因为这些符号是作为<code>printf()</code>函数的一部分用来定义字符常量的，如果你要把它们字面上打印出来，那将会非常令编译器困惑。）假设你想要打印下来下面的这一行字。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gramps sez, <span class=\"string\">&quot;a \\ is a backslash.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>就需要用下面代码的形式来写。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Gramps sez, \\&quot; a \\\\ is a backslash.\\&quot;\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>最后的两种形式（<code>\\0oo, \\xhh</code>）是ASCII码的特殊标识，是要以八进制ASCII码的形式来代表字符，在前面需要加上<code>\\</code>然后用单引号来框定整个字符，例如，如果你的编译器不能识别警告符，你就可以使用下面的ASCII码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beep = <span class=\"string\">&#x27;\\007&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以省略前面的0，所以<code>&#39;\\07&#39;</code>与<code>&#39;\\7&#39;</code>都是可以的。这个符号会让数字被理解成八进制，尽管前面没有0。</p>\n<p>从C90开始，C语言提供了第三种选择，使用十六进制的字符常量，这样说来，斜杠后面是<code>x</code>或者<code>X</code>与1到3位的十六进制数。例如，Ctrl+P符号在ASCII十六进制符码里就是10（十进制下就是16），所以它是可以被表达为<code>&#39;\\x10&#39;</code>或者<code>\\&#39;x010&#39;</code>的，图3.5展示了一些整型的代表。</p>\n<p><img src=\"/img/Figure3.5.png\" alt=\"图3.5\"></p>\n<p>当你使用ASCII码的时候，要注意数字与字符之间的差异。例如，字符4在ASCII中的值是52,<code>&#39;4&#39;</code>是一个符号而不是一个数字。</p>\n<p>现下，你可能有这几个问题：</p>\n<ul>\n<li><em><strong>为什么转义序列在最后一个例子中没有用单引号括起来？</strong></em><br>（<em><strong>最后一个例子<code>printf(&quot;Gramps sez, \\&quot; a \\\\ is a backslash.\\&quot;\\n&quot;);</code><em><strong>）。<br>  只要是一个字符，不管它是不是转义字符，当它是字符串的一部分的时候，都是需要用双引号框起来的，而不是单引号，但单个字符是无一例外由单引号括起来的。由双引号括起来的是</strong></em>字符串</strong></em>。（第四章会讲到）相似地，不属于转义字符的数字会被当做一般字符打印出来（如<code>printf(&quot;Hello!7\\n&quot;);</code>打印出来的是<code>Hello7</code>，但<code>printf(&quot;Hello!\\007&quot;);</code>输出的是一行<code>Hello！</code>加上一声警告）。</li>\n<li><em><strong>我应该什么时候使用转义序列？什么时候使用对应的ASCII码？</strong></em><br>  如果你需要使用其中一个转义序列，比如说<code>&#39;\\f&#39;</code>，或者作为替代的<code>&#39;\\014&#39;</code>，最好使用前者。首先，这种表示方法更容易记忆：其次，它更容易在机器之间转移，如果其他系统不适用ASCII码，<code>&#39;\\f&#39;</code>还是可以使用。</li>\n<li>如果我需要使用数字变啊，为什么使用的是<code>&#39;\\032&#39;</code>而不是<code>032</code>？<br>  第一，使用转义字符的方式会让阅读你代码的人轻松地知道这是一个字符编码。第二，如<code>\\037</code>这样的转义序列是可以内嵌于C语言字符串的（？[就像<code>\\007</code>一样])。</li>\n</ul>\n<h4 id=\"3-4-3-4-打印字符\"><a href=\"#3-4-3-4-打印字符\" class=\"headerlink\" title=\"3.4.3.4 打印字符\"></a>3.4.3.4 打印字符</h4><p><code>printf()</code>函数可以使用格式化符<code>%c</code>表示一个字符将要在这个位置被打印。你想到字符常量是1位的整型值，因此你也可以用<code>%d</code>符号，那样的话你就会得到一个整数，<code>%c</code>格式化符会告诉<code>printf()</code>函数来打印那个编码值对应的字符，例3.5就以两种方式展示了<code>char</code>类型变量。</p>\n<p><img src=\"/img/Listing3.5.png\" alt=\"例3.5\"></p>\n<p>尝试运行，输出是这样的。</p>\n<p><img src=\"/img/C67.png\"></p>\n<p>当你使用程序的时候，不要忘记在写完了字符之后按下回车键。<code>scanf</code>函数会接收你写下的字符，然后取地址符(<code>&amp;</code>)会将字符赋给字符变量<code>ch</code>。接下来，<code>printf()</code>函数会打印两次<code>ch</code>这个变量，第一次是以字符的形式打印的（使用<code>%c</code>格式化符的效果），第二次是以十进制整数的形式（同理，<code>%d</code>的效果）。需要注意，<code>printf()</code>的标识符会决定数据被如何呈现，呈现方式与数据的储存方式没有关系。</p>\n<p><img src=\"/img/Figure3.6.png\" alt=\"数据储存与输出\"></p>\n<h4 id=\"3-4-3-5-有符号还是无符号？\"><a href=\"#3-4-3-5-有符号还是无符号？\" class=\"headerlink\" title=\"3.4.3.5 有符号还是无符号？\"></a>3.4.3.5 有符号还是无符号？</h4><p>有的C语言实现里会使<code>char</code>是一个有符号的类型，那也就意味着<code>char</code>可以接受从-128到127的值。其他的C语言实现会让<code>char</code>是一个无符号的类型，那么它的范围就变成了0到255，你的编译器的使用手册应该会告诉你<code>char</code>是什么类型，或者你可以看看<code>limits.h</code>头文件，下一章会讲述。</p>\n<p>在C90标准下，C语言允许你使用关键字<code>unsigned</code>与<code>signed</code>来修饰<code>char</code>，那样的话不管原本的<code>char</code>是有符号还是无符号。你都可以任意变化它们的类型。它们在处理小范围的十进制整数时是很有用的。要是只是为了使用字符，只使用<code>char</code>就可以了。</p>\n<h3 id=\"3-4-4-Bool类型\"><a href=\"#3-4-4-Bool类型\" class=\"headerlink\" title=\"3.4.4 _Bool类型\"></a>3.4.4 <code>_Bool</code>类型</h3><p><code>_Bool</code>类型是C99标准添加的，它们是被用来代表布尔值的，也就是逻辑上的<code>true</code>与<code>false</code>。因为C语言是使用0表示<code>false</code>，用1表示<code>true</code>的，所以布尔类型实际上只是一个整型，但是只需要一位的内存，因为要储存0与1一位就足够了。</p>\n<p>程序会使用布尔值来选择下一步运行哪个代码，代码执行会在第六章（C语言控制语句：循环）与第七章（C语言控制语句：分支结构与跳跃结构）更详细地讲到，所以我们到那个时候再讨论这个问题。</p>\n<h3 id=\"3-4-5-可转移的类型：inttypes-h\"><a href=\"#3-4-5-可转移的类型：inttypes-h\" class=\"headerlink\" title=\"3.4.5 可转移的类型：inttypes.h\"></a>3.4.5 可转移的类型：<code>inttypes.h</code></h3><p>还有更多的整数类型吗？没有了，但是还有更多你可以使用与已经存在的类型的名字。你或许会认为你已经看到的整型名已经很多了，但是原本的名字确实存在问题。知晓一个变量是<code>int</code>并不会让你了解它会占用多少内存，除非你检查了系统的描述文件。为了解决这个问题，<code>int16_t</code>可以声明一个16位的有符号整型，<code>uint32_t</code>声明了一个32位的无符号类型。</p>\n<p>要让这些名字可用，你需要包含一个<code>inttypes.h</code>头文件（注意在这一版时候已经有了，但是一些编译器上还不支持这个功能），这个文件使用了<code>typedef</code>（第一次讲到是在第五章：运算符、表达式与语句），来创造新的类型名。例如，它会让<code>uint32_t</code>成为基本类型的一种别名或者同义替换，有可能是<code>unsigned int</code>也有可能是<code>unsigned long</code>。你的编译器会提供一个与你的计算机系统协调的头文件，这些新的设计被称为<em><strong>精确长度类型</strong></em>，例如，<code>int_least8_t</code>会是最小的类型，它可以承载8位的有符号整型值。如果某个系统上最小的类型是8位的。<code>int8_t</code>类型是不会被定义的，但<code>int_least8_int</code>是可以被定义的，或许会被实现为16位的整型。</p>\n<p>当然，一些编程人员会更关心速度而不是空间。对于它们，C99定义了允许快速计算的一系列类型，它们被称为<em><strong>最快最小长度类型</strong></em>，例如，<code>int_fast8_t</code>会被定义为你的系统上能够最快运算的8位有符号值。</p>\n<p>最后，对于其他的编程人员，只有系统上最大的一些整型才有用，<code>intmax_t</code>就代表了那种类型，它可以储存任何合法的有符号整型值，同样，<code>uintmax_t</code>会代表可用的最大的无符号类型。这些类型有时是比<code>long long</code>或者<code>unsigned long</code>还要长的，因为C语言实现是准许定义超过需要的类型的。</p>\n<p>C99不仅提供了这些新的而且可运输的类型名，它还有有利于输入输出的符号表示。比如说，<code>printf()</code>对于每一种类型都需要特别的修饰符，所以你要打印<code>int32</code>，你要使用的是<code>%d</code>还是<code>%ld</code>？不同的机器的标识符并不一样，但没问题，C99标准下是有字符串宏命令来打印这些值的，我们会在第四章详细讲述的。例如，<code>inttype.h</code>头文件会将字符中的<code>PRId16</code>作为对于不同对应的类型的合适的格式化符。（例如hd（<code>short</code>）或者d），例3.6是一个讲述了如何使用可运输类型与相对应的格式化符的简单的例子。</p>\n<p><img src=\"/img/Listing3.6.png\" alt=\"例3.6\"></p>\n<p>在最后的<code>printf</code>语句中，<code>PRId16</code>被<code>inttypes.h</code>对<code>hd</code>的类型定义替换了，把这一行代码变成了这个样子。</p>\n<p><img src=\"/img/turning1.png\"></p>\n<p>但是C语言需要连贯的字符串，所以引号需要是连续的，然后这一行就变成了这个样子。</p>\n<p><img src=\"/img/turning2.png\"></p>\n<p>这就是输出，注意这个例子也使用了<code>\\&quot;</code>转义字符来打印双引号。</p>\n<p><img src=\"/img/out3.png\"></p>\n<p>参考单元VI“更多的整型”提供了<code>inttypes.h</code>头文件添加的内容的完整解释，也列举了所有的格式化宏。</p>\n<p><img src=\"/img/C99sup.png\"><br>【C99支持】<br>编译器供应商已经开始以不同的速度与顺序开始实现C99的新特性了，但在这本书出来的时候，一些编译器还没有实现<code>inttypes.h</code>的头文件与特征。</p>\n<h3 id=\"3-4-6-float-double与long-double类型\"><a href=\"#3-4-6-float-double与long-double类型\" class=\"headerlink\" title=\"3.4.6 float, double与long double类型\"></a>3.4.6 <code>float, double</code>与<code>long double</code>类型</h3><p>对于大多数的软件开发项目来说，这些多种多样的整型已经能够很好地满足要求了。但是，对于财务或者面向数学的程序，我们通常会使用<em><strong>浮点数值</strong></em>，在C语言中，这些数字就对应着<code>float, double, long double</code>这几种类型，对应着FORTRAN与Pascal语言中的<code>real</code>类型。使用浮点数，正像上文所说，能够让你呈现更大范围的数字。包括十进制小数值。浮点数值的表示与<em><strong>科学计数法</strong></em>是很相似的，那是科学家用来表示非常大或者非常小的数字的一种体系。</p>\n<p>在科学计数法中，数字会被表示成十进制数乘10的整数幂，这里就是一些例子。</p>\n<p><img src=\"/img/sciennotation.png\"></p>\n<p>第一列是通常的表示方法，第二列是科学计数法的表示，第三列是质数的表示方法，或者说是<em><strong>e - notation（e表示法）</strong></em>，通常是给计算机或者计算机写的，在e的后面是10的指数，图3.7展示了更多的浮点表示法。</p>\n<p>C语言标准规定了<code>float</code>类型应该至少能够代表6位有效数字并且范围在10的-37次方到37次方。第一个要求的意思是，比如一个<code>float</code>必须要精确地表示至少前六位有效数字，就像33.333333。如果你喜欢使用较大或者较小数字（2.0e30（太阳质量）或1.6e-19（元电荷））的话，第二条要求会为你提供方便。通常，系统会使用32位类储存一个浮点类型的数字，8位用来给予指数值与符号，24位来表示非指数部分，叫尾数或者有效数字与它的符号。</p>\n<p><img src=\"/img/Figure3.7.png\" alt=\"一些浮点数表示\"></p>\n<p>C语言也有一个<code>double</code>（双（double）精度）浮点型，<code>double</code>类型与<code>float</code>类型需要的最小值是一样的，但是它把最小值的有效数字位数拓展到了10位。通常的<code>double</code>表示会使用64位而不是32位，一些系统会使用32个位来表示非指数部分，这也就增加了数字有效的有效数字位数，减少了取整错误。其他的系统会使用一些位储存更大的指数，这也就增加了可以容纳数字的范围。每一张方法都至少有13位的有效数字，不只能满足最小标准的要求。</p>\n<p>C语言还允许你使用一种浮点类型：<code>long double</code>，目的就是进一步增加<code>double</code>类型的准确度。但是C语言只保证<code>long double</code>至少与<code>double</code>类型的精度是一样的。</p>\n<h4 id=\"3-4-6-1-声明浮点变量\"><a href=\"#3-4-6-1-声明浮点变量\" class=\"headerlink\" title=\"3.4.6.1 声明浮点变量\"></a>3.4.6.1 声明浮点变量</h4><p>浮点变量与它们的整型兄弟的声明与定义的方式相似，这里是一些例子，</p>\n<p><img src=\"/img/floatdeclare.png\"></p>\n<h4 id=\"3-4-6-2-浮点常量\"><a href=\"#3-4-6-2-浮点常量\" class=\"headerlink\" title=\"3.4.6.2 浮点常量\"></a>3.4.6.2 浮点常量</h4><p>当你书写一个浮点常量时，你会有很多的选择，形式是很多，有符号的一串数字。包括十进制的小数点，或是由e或者E跟着的10的指数。这里是两个合法的声明浮点类型的例子。。</p>\n<p><img src=\"/img/twoexam.png\"></p>\n<p>你可以遗漏正号，没有关系（2E5）或者可以遗漏指数部分（19.28），但是并不能同时存在。你可以遗漏小数部分或者整数部分，但也不能全都没有（那也不剩什么了。）下面是更多的合法的浮点常量。</p>\n<p><img src=\"/img/morevalid.png\"></p>\n<p>在使用浮点常量的时候，不要乱添加空格。</p>\n<p><img src=\"/img/nospaces.png\" alt=\"错的\"></p>\n<p>一般来说，编译器会认为浮点常量都是<code>double</code>精度的，假设<code>some</code>是一个<code>float</code>类型的变量，并且你有下面的一行代码。</p>\n<p><img src=\"/img/codeline.png\"></p>\n<p><code>4.0</code>与<code>2.0</code>都是以<code>double</code>类型储存起来的，一般每一个使用64位，结果是使用浮点运算获得的，而且只有结果转换成了正常的<code>float</code>大小范围内才可以使用<code>float</code>。这也就为运算提供了准确度，但是会让你的程序变慢。</p>\n<p>C语言还是你能够超越默认方法，你可以使用f或者F后缀来让编译器把一个浮点常量储存为<code>float</code>类型，比如<code>2.3f</code>与<code>9.11E9F</code>还有<code>l</code>或者<code>L</code>后缀，可以储存为<code>long double</code>类型，例如<code>54.3l</code>，<code>4.23e4L</code>。注意的是，比起<code>l</code>，<code>L</code>更不容易被看成<code>1</code>，如果浮点数没有后缀，它的类型就是<code>double</code>。</p>\n<p>C99添加了表示浮点数的另一种方式，它是使用十六进制来表达的（0x或者0X加上十六进制数）。那样指数就是<code>p</code>或者<code>P</code>而不是<code>e</code>或者<code>E</code>了，指数是2的，也不再是10的了。这就是数字看起来的样子。</p>\n<p><img src=\"/img/lookslike.png\"></p>\n<p><code>a</code>是十进制的10，<code>.1f</code>是1&#x2F;16加上15&#x2F;256，然后<code>p10</code>是2的10次方，或者1024，用十进制表示这就是10364.0。</p>\n<p>并不是所有的编译器都已经支持C99的特性了。</p>\n<h4 id=\"3-4-6-3-打印浮点数值\"><a href=\"#3-4-6-3-打印浮点数值\" class=\"headerlink\" title=\"3.4.6.3 打印浮点数值\"></a>3.4.6.3 打印浮点数值</h4><p><code>printf()</code>函数会使用<code>%f</code>格式化符来打印<code>float</code>与<code>double</code>类型的数值，这个符号使用的是十进制小数符的表示方法，还可以使用<code>%e</code>来使用指数表示法来打印它们，如果你的系统支持C99中提供的小数的十六进制格式，你就可以使用<code>a</code>或者<code>A</code>代替<code>e</code>与<code>E</code>。<code>long double</code>类型是以<code>%Lf</code>或者<code>%Le</code>与<code>%La</code>标识符来分别使用这三种方式的。需要注意的是，<code>float</code>与<code>double</code>都可以使用<code>%f, %e, %a</code>标识符来输出。这是因为当一个<code>float</code>类型的变量作为语句传递到任何函数时，C语言会自动把它转化成<code>double</code>类型，而不是它本来的类型，比如说<code>printf()</code>函数就是一个例子。例3.7说明了这种行为。</p>\n<p><img src=\"/img/Listing3.7\" alt=\"例3.7\"></p>\n<p>这里是输出：</p>\n<p><img src=\"/img/out1.png\"></p>\n<p>这个例子说给出了默认的输出，下一章会讨论如何通过设置输出域长度与十进制的位权数，控制输出的外形。</p>\n<h4 id=\"3-4-6-4-浮点上溢与下溢\"><a href=\"#3-4-6-4-浮点上溢与下溢\" class=\"headerlink\" title=\"3.4.6.4 浮点上溢与下溢\"></a>3.4.6.4 浮点上溢与下溢</h4><p>可能最大的<code>float</code>类型就是值大概是3.4E38，然后你执行了下面的代码。</p>\n<p><img src=\"/img/toobig.png\"></p>\n<p>输出（个人测试）</p>\n<p><img src=\"/img/INF.png\"></p>\n<p>发生了什么？这就是<em><strong>溢出</strong></em>的一个例子-运算得出的结果大到无法表示。对于这种情况，这种行为之前是没有被定义的，但是现在C语言指定<code>toobig</code>是一个几乎代表<em><strong>无限</strong></em>的数字，<code>printf()</code>就会显示<code>inf</code>（infinity）（或者那个样子的一些变体）</p>\n<p>那么如果是要分辨非常小的数字呢？这是会遇到更多的情况。你可以记起<code>float</code>是以指数部分与数字部分（或尾数）来储存的。如果会有一个数字有着最小的指数与最小的值，而且仍然可以使用所有可以使用的位来表达尾数，在<code>float</code>的精度范围内表示，这就是<code>float</code>类型下的最小值。现在我们把它除2，一般地，这会减少指数，但是指数也是能够表达的最小值了。所以就要到尾数的空余位那里减了，把第一位清空，然后丢掉最后的二进制值，类比一下就是，用四位有效数字的10进制值，比如<code>0.1234E-10</code>，除10，结果就是<code>0.01234E-10</code>，你就可以得到答案了，但是你会在这个过程中丢掉一个数字。这种情况就叫做下溢，C语言对于失去完全精度的浮点数值叫做<em><strong>subnormal</strong></em>（反常值）。所以把最小的正常浮点值除2就会有反常值。如果你除了一个太大的数字，你就会失去所有的精度，最后只剩下0，C语言库现在提供了函数来检查是否你的运算产生了反常数值。</p>\n<p>这里还有另一种特别的浮点值，<code>NaN</code>。例如你给予<code>asin()</code>函数一个名字它会返回所给数值的sin值，但是sin的数值并不能大于1，所以函数对于大于1的数值是未定义的，在这种情况下函数就会返回<code>NaN</code>值，那会被<code>printf</code>打印为<code>nan</code>、<code>NaN</code>或者相似的东西。</p>\n<p><img src=\"/img/drop4in5.png\" alt=\"四舍五入问题\"><br>拿一个数字，加1，然后减去原来的数，你会得到几？肯定是1是吧？像下面的浮点运算给予了你不同的答案。</p>\n<p>输出是这个样子的：</p>\n<p><img src=\"/img/alldevices.png\"></p>\n<p>这三种奇怪的结果的原因是电脑并不能够跟踪需要多少十进制空间来进行恰当的运算，2.0e20是2后面跟着20个0，通过加1的操作，你要改变这个数字的第21位数字，要正确地执行这个操作，程序需要能够储存21位数字的类型，<code>float</code>类型数通常只是六位或者七位数带着指数这个范围（最后的一位只能是0，不能改变）所以这种尝试在劫难逃。另一方面，如果你使用2.0e4的话你就可以得到正确的结果，因为你改变的是第5位数，<code>float</code>类型的精度允许你这样做。</p>\n<h3 id=\"3-4-7-复数与虚数类型\"><a href=\"#3-4-7-复数与虚数类型\" class=\"headerlink\" title=\"3.4.7 复数与虚数类型\"></a>3.4.7 复数与虚数类型</h3><p>许多科学与工程运算会使用复数与虚数，C99为这些数提供了支持，（with some reservations），它是一个独立的实现，就像内置预处理命令一样，不需要其他类型的支持。（VCR芯片很可能并不需要复数来工作）。并且，更一般地。虚数类型是可选择的。简单来说，有三种复数类型，<code>float_Conplex，_Complex</code>与<code>long double _Complex</code>，举个例子，一个<code>float _Complex</code>变量，会包含两个<code>float</code>类型的值，一个代表复数的实部，另一个代表虚部。相思地，有三种虚数类型，它们叫做<code>float _Imaginary, double _Imaginary</code>与<code>long double _Imaginary</code>。</p>\n<p>包含<code>complex.h</code>头文件可以使你把<code>_Complex</code>与<code>_Imaginary</code>分别更换为<code>complex</code>与<code>imaginary</code>。而且还能够让你使用I来代表-1的平方根。</p>\n<h3 id=\"3-4-8-超越基本类型\"><a href=\"#3-4-8-超越基本类型\" class=\"headerlink\" title=\"3.4.8 超越基本类型\"></a>3.4.8 超越基本类型</h3><p>这样我们已经讲完了一系列基本的数据类型了，对于你们其中一些人来说，数据类型可能很多，还有一些人可能会想着还需要其他的类型，比如说字符串类型。但C语言并没有。但是还是能够很好的处理字符串，你会在第四章第一次见到字符串。</p>\n<p>C语言确实有其他的类型，他们是从基本类型中衍生出来的。这些类型包括数组、指针、结构体、联合体。即使它们都是后面章节才要讲到的，我们已经在这一章的例子中已经偷摸添加了一些关于指针的东西了。（指针会指向变量或者其他数据对象的地址，<code>scanf()</code>中使用的<code>&amp;</code>前缀就会创造一个指针，他会告诉<code>scanf()</code>在哪储存信息）</p>\n<p><img src=\"/img/basicdata.png\"><br><strong>总结：基本数据类型</strong><br>    <strong>关键字</strong>：<br>    基本的数据类型是由11个关键字组成的：<code>int, long, short, unsigned, char, float, double, signed, _Bool, _Complex, _Imaginary</code><br>    <strong>有符号整型</strong>：<br>    可以是整数值也可以是负值<br>    1. <code>int</code>- 系统给定的基本整型。C语言保证<code>int</code>至少有16位。<br>    2. <code>short</code>或<code>short int</code> - 最大的短整型不大于最大的<code>int</code>，并有可能更小，C语言保证<code>short</code>类型至少有16位。<br>    3. <code>long</code>或<code>long int</code> - 能够保存至少<code>int</code>的最大值大小的数，可以更大。C语言会确保<code>long long</code>类型至少有32位。<br>    4. <code>long long</code>或<code>long long int</code> - 这个类型至少能够保存<code>long</code>类型数的最大范围，可以更大，<code>long long</code>类型最小64位。</p>\n<p>通常，<code>long</code>类型是比<code>short</code>类型更短的，<code>int</code>会与他们之中的一个一样大。例如，以DOS系统为基础的PC系统，<code>short</code>是16位长的，而<code>int</code>是32位长的，以Windows 95为基础的系统会提供16位的<br><code>short</code>，而<code>long</code>与<code>int</code>类型是32位的。</p>\n<p>如果你喜欢的话，你可以在任何有符号类型前使用<code>signed</code>关键字，将它们有符号这个事实显露出来。<br><strong>无符号整型：</strong><br>    这些类型只能从0到整数，因为去掉了符号位，这种类型的范围得到了扩大，使用关键字<code>unsigned</code>可以把你想要的类型变为无符号类型：比如<code>unsigned int, unsigned long, unisgned short.</code>单个的<code>unsigned</code>与<code>unisgned int</code>是一样的。<br><strong>字符：</strong><br>    它们是像<code>A, &amp;</code>这样的印刷字符。在定义上，字符类型会使用1个字节的内存来代表一个字符。在以往，字符字节大多数是8位，但现在它可以是16位或者更大，可以迎合使用的基准字符集的大小。<br>        <strong>char</strong> - 这种类型的关键字，一些实现中会使用有符号的<code>signed char</code>，但其他还是使用无符号字符。C语言允许你使用<code>signed</code>或者<code>unsigned</code>来划定你想要的类型。<br><strong>布尔类型：</strong><br>    布尔值代表<code>true</code>与<code>false</code>，C语言会使用0与1代表这两个值。<br>        <strong>_ Bool</strong> - 是这种类型的关键字，它是一个无符号整型，只需要保存0与1这两个值的内存。<br><strong>实数浮点型：</strong><br>    可以正数、负数或者零。<br>        [<code>float</code>] 是系统的基本浮点类型，可以至少呈现6位精确的有效数字。<br>        [<code>double</code>] 一种（可能是）更大的浮点储存单元，允许更大的有效数字位数（至少10位，通常会更多。）而且有可能比float也有更多的指数位数。<br>        [<code>long double</code>] 一种（可能是）更大的浮点储存单元，它可能允许更多的有效数字位数，也有可能有着比<code>double</code>类型更大的指数部分。<br><strong>复数与虚数浮点型：</strong><br>    虚数类型是可以选择的，实部与虚部是基于实数类型的：<br>        <code>float _Complex</code><br>        <code>double _Complex</code><br>        <code>long double _Complex</code><br>        <code>float _Imaginary</code><br>        <code>double _Imaginary</code><br>        <code>long double _Imaginary</code></p>\n<p><img src=\"/img/Summary.png\"></p>\n<p><strong>总结：如何声明一个简单的变量</strong></p>\n<ol>\n<li>选择你需要的类型</li>\n<li>使用允许的字符为你的变量起个名字</li>\n<li>使用以下形式的声明语句<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//type-specifier variable-name;</span></span><br><span class=\"line\"><span class=\"comment\">//类型标识符 变量名;</span></span><br><span class=\"line\"><span class=\"type\">int</span> Iint1;</span><br></pre></td></tr></table></figure></li>\n<li>你可以通过用逗号把变量名隔开来声明多个变量，下面就是一个例子。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> ch, init, ans;</span><br></pre></td></tr></table></figure></li>\n<li>你可以在声明语句中对变量进行初始化：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> mass = <span class=\"number\">6.0E24</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-4-9-类型大小\"><a href=\"#3-4-9-类型大小\" class=\"headerlink\" title=\"3.4.9 类型大小\"></a>3.4.9 类型大小</h3><p>表3.3与3.4展示了一些C语言环境下的类型大小（在一些环境中，你可以选择）你的系统是什么样子的？尝试运行例3.8中的程序，你会弄明白的。</p>\n<p><img src=\"/img/Twotables.png\" alt=\"表3.3与3.4\"><br>（分别是整型与浮点型的大小。）</p>\n<p>对于每一种类型，最上面的一行是有效数字的位数，第二行是指数的范围（十进制）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//(例 3.8)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*C99为大小提供了%zd格式化符*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type int has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type char has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type long has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type double has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">double</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>C语言有一种内置的运算符，它叫<code>sizeof()</code>，它会给出以比特为单位的大小范围。（一些编译器需要<code>%lu</code>而不是<code>%u</code>来打印<code>sizeof</code>数值，这是因为C语言对于<code>sizeof</code>用来报告的真实的无符号整型是有多个范围的。C99对于这种类型给出了<code>%zd</code>标识符，如果编译器支持的话你应该使用这个。）例3.8的输出是这个样子的。</p>\n<p><img src=\"/img/sizes.png\"></p>\n<p>这个程序只发现了4种类型的范围，但是你可以简单修改一下这个程序来找寻你感兴趣的任何一种类型，要注意的是<code>char</code>类型的大小一定是1个字节，因为C语言对于<code>char</code>类型定义的就是一个字节。所以在有16位的<code>char</code>与64位的<code>double</code>的系统上，<code>sizeof</code>会报告<code>double</code>类型有4个字节的大小。你可以看看limits.h与float.h头文件来获取更多关于类型最大最小值的细节信息。（下一章会进一步阐述这两个文件。）</p>\n<p>顺便一说。看看最后一行<code>printf()</code>是如何延伸到两行的，只要不是在双引号部分或者在一个单词的中间断开，你可以这样做。</p>\n<h3 id=\"3-4-10-可用数据类型\"><a href=\"#3-4-10-可用数据类型\" class=\"headerlink\" title=\"3.4.10 可用数据类型\"></a>3.4.10 可用数据类型</h3><p>当你正在开发一个程序时，需要注意你需要的变量与它们应该使用的类型。大多数情况，你可以使用<code>int</code>或者<code>float</code>来表示一个数，用<code>char</code>来表示字符，在使用它们的函数的开头先声明好它们。为变量取一个能够暗示它们的意义的名字。初始化一个变量时，也要让变量类型与赋给的常量类型匹配。这里就是两个例子。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> apples = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> oranges = <span class=\"number\">3.0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>C语言对于类型不搭配比起Pascal是很宽容的，C语言的编译器允许你进行二次初始化，但是它们有可能会引起报错，尤其是当你触发了一个高级警告时。最好不要养成这种马马虎虎的习惯。</p>\n<p>当你使用其他类型的值给一个数字类型的值初始化时，C语言会将这个值进行转化，来让它与这个变量的类型相配。这也就意味着你有可能会失去一些数据，比如思考一下下面的初始化过程。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> cost = <span class=\"number\">12.99</span>;        <span class=\"comment\">/*使用double值来初始化int*/</span></span><br><span class=\"line\"><span class=\"type\">float</span> pi = <span class=\"number\">3.1415926536</span>; <span class=\"comment\">/*使用double值来初始化float*/</span></span><br></pre></td></tr></table></figure>\n\n<p>第一个声明语句会将12赋给<code>cost</code>变量，当把浮点数转换为整数值时，C语言简单地把小数部分丢掉（截断），而不是四舍五入。第二行的声明会失去精度，因为<code>float</code>类型是只能呈现小数点后6位精确数的。如果进行这样的初始化，编译器有可能会发出一个警告（但不是一定会发），你有可能在编译例3.1的时候遇到这个问题。</p>\n<p>许多的编程者与组织人员拥有设置变量名称的体系化传统方法，按照这种方式就可以显示出变量的类型。例如你可以使用<code>i_prefix</code>来表示这是个<code>int</code>类型变量，同理<code>us_</code>来表示<code>unsigned_short</code>，这样的话对于类型就好辨认一些。</p>\n<h3 id=\"3-4-11-参数陷阱\"><a href=\"#3-4-11-参数陷阱\" class=\"headerlink\" title=\"3.4.11 参数陷阱\"></a>3.4.11 参数陷阱</h3><p>在这一章的前半部分，有一个关于<code>printf()</code>使用的警告还是很值得重复强调的。你可能还记得传递给函数的信息在术语上称为参数。例如，<code>printf(&quot;Hello, pal.&quot;)</code>就有一个参数：<code>&quot;Hello, Pal.&quot;</code>。我们把在双引号中的一系列字符叫做<em><strong>字符串</strong></em>，我们会在第四章讨论。现在的重点是，一个字符串，即使包含着好几个单词与标点符号，也仍然被算作是一个参数。</p>\n<p>相似地，<code>scanf(&quot;%d&quot;, weight)</code>有两个参数：<code>&quot;%d&quot;</code>与<code>&amp;weight</code>。C语言会使用逗号来分开函数中的各个参数，<code>printf()</code>与<code>scanf()</code>函数还挺不寻常的，它的参数数量是不限的。例如，我们曾经在使用<code>printf()</code>时传递过一个、两个甚至是三个参数。对于一个恰当运行的程序，它需要知道参数的数量。<code>printf()</code>与<code>scanf()</code>函数会使用第一个参数来表达之后会有多少个其他的参数。这里的诀窍就是在最前的字符串中的每一个格式化符都代表着后面有一个参数，例如下面的语句就有两个格式化符：<code>%d</code>与<code>%d</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d cats ate %d cans of tuna\\n&quot;</span>, cats, cans);</span><br></pre></td></tr></table></figure>\n\n<p>这也就告诉程序后面要接收两个额外的参数，而且后面确实有两个——<code>cats</code>与<code>cans</code>。</p>\n<p>作为一个编程人员，你的责任就是确保格式化符的数量与其他的参数的数量相同，类型相同。C语言现在已经有函数原型机制了，它能够检查一次函数调用是否使用了正确的数字与正确的参数类型，但是对于<code>printf()</code>与<code>scanf()</code>是不适用的，因为它们参数的数量是可变的。当你并没有接收程序员的负担会怎样呢？举个例子，假设你写了例3.9那样的程序。</p>\n<p><img src=\"/img/Listing3.9.png\" alt=\"例3.9\"></p>\n<p>下面是从微软VisualC++ 7.1（WinXP系统）上运行的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 34603777</span><br><span class=\"line\">0 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>这是在Digital Mars（WinXP系统）上运行的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 4239476</span><br><span class=\"line\">0 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>这是在Metrowerks Codewarrior Development Studio 9（MacOSX系统）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 3327456</span><br><span class=\"line\">1075052544 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到，使用<code>%d</code>来表示一个<code>float</code>类型的值并不会将它变成最近的<code>int</code>类型值，而是直接输出垃圾值。相似地，使用<code>%f</code>来表示一个<code>int</code>类型的值也并不会将整数转化为浮点数值。参数太少或者类型不对得到的结果不同的平台也不一样。</p>\n<p>没有一个编译器对于这个代码有报错或者警告，在运行时也没有。一些编译器确实会捕捉到这种错误，但是C语言标准并没有要求它们这样做。因此，电脑就不一定能够补货到这种类型的错误，因为程序反而还能够正常地运行，你也不一定能够注意到这种错误。如果程序并没有打印正确的数值数量或者是数值，那就回去看看<code>printf()</code>的参数数量与类型是否使用正确。（顺便一说，Unix语法检测程序lint，它比Unix编译器检查得更加细致，能够对于<code>printf()</code>的参数错误进行报错）。</p>\n<h2 id=\"3-5-又一个例子：转义序列。\"><a href=\"#3-5-又一个例子：转义序列。\" class=\"headerlink\" title=\"3.5 又一个例子：转义序列。\"></a>3.5 又一个例子：转义序列。</h2><p>让我们在程序中打印更多东西吧，这一次我们会使用C语言中的一些针对于字符的特殊转义序列。尤其地，例3.10中的程序显示了回车符(<code>\\b</code>)，水平制表符(<code>\\t</code>)以及回行符（<code>\\r</code>）是怎么工作的。这些概念要追溯到电脑还在使用电传打字机的时代，它们并不总是会在现代的图形界面上正确地翻译。例如，例3.10在一些Mac系统的实现上就不能够按照想要的方式来运行。</p>\n<p><img src=\"/img/Listing3.10.png\" alt=\"例3.10\"></p>\n<h3 id=\"3-5-1-当程序运行的时候发生了什么？\"><a href=\"#3-5-1-当程序运行的时候发生了什么？\" class=\"headerlink\" title=\"3.5.1 当程序运行的时候发生了什么？\"></a>3.5.1 当程序运行的时候发生了什么？</h3><p>让我们一步步地浏览这个程序，好让它能够在ANSI实现下运行。第一个<code>printf()</code>函数语句（标<code>1</code>的那个）会发出警告信号（由<code>\\a</code>引起），然后会打印如下的句子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary:</span><br></pre></td></tr></table></figure>\n<p>因为在字符串最后没有<code>\\n</code>符号，所以光标还是在冒号后面。</p>\n<p>第二个<code>printf()</code>语句会接着第一句结束的地方开始，所以当它执行完毕时，屏幕上看起来是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$______</span></span><br></pre></td></tr></table></figure>\n\n<p>在冒号与美元符号之间有一个空格，因为第二个<code>printf()</code>的字符串是以空格开始的，7个退格符的作用是把光标向左移动7个单位。这就会将光标移到下划线字符前面，正好放在美元符号后面。通常地，退格符并不会移除前面的字符，但是有一些实现是有可能移除的，那样这个小练习就没有用了。</p>\n<p>现在，你会输入你的回答，比如说你输入了<code>2000.00</code>，那么这一行看起来就会是这个样子。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$2000</span>.00</span><br></pre></td></tr></table></figure>\n\n<p>你输入的字符将会覆盖换行符，而且当你点<code>Enter</code>键（或者<code>Return</code>）来输入你的回答时，光标就会跳转到下一行。</p>\n<p>第三个<code>printf()</code>语句是以<code>\\n\\t</code>开始的，换行符将会将光标移动到下一行的最开始，而tab键通常会将光标移动到那一行的下一个制表位（但并不是一定），也就是第9列。然后字符串的剩余部分就会被打印下来。在这个语句执行之后，屏幕上看起来就会变成这样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$2000</span>.00</span><br><span class=\"line\">\t<span class=\"variable\">$2000</span>.00 a month is <span class=\"variable\">$24000</span>.00 a year.</span><br></pre></td></tr></table></figure>\n<p>因为这个<code>printf()</code>语句并没有使用换行符，光标还是在这一句的最后位置。</p>\n<p>第四个<code>printf()</code>使用了<code>\\r</code>符号，它会将光标移动到一行的开头位置，这个语句执行之后屏幕上就成了这样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary <span class=\"variable\">$2000</span>.00</span><br><span class=\"line\">Gee!    <span class=\"variable\">$2000</span>.00 a month is <span class=\"variable\">$24000</span>.00 a year.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-2-输出清理\"><a href=\"#3-5-2-输出清理\" class=\"headerlink\" title=\"3.5.2 输出清理\"></a>3.5.2 输出清理</h3><p><code>printf()</code>函数什么时候才会将输出发送到屏幕上呢？首先，<code>printf()</code>语句会将输出发送到<em><strong>缓冲区</strong></em>，时不时地，在缓冲区的内容就会被发送到屏幕上。对于输出什么时候从缓冲区发送到屏幕上，基础的C语言规则已经很清晰了：当缓冲区被充满时，当遇到一个换行符的时候，以及当有即将发生的输出行为时。（从缓冲区发送输出信息到屏幕或者是文件上叫做<em><strong>刷新缓冲区</strong></em>），例如，最先的两个<code>printf()</code>函数语句并不会填充缓冲区，也并没有包含换行符。在那种情况下，你可以使用一个换行符来刷新缓冲区，那样的话代码就可以写成这个样子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter your desired monthly salary: \\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%f&quot;</span>, &amp;salary);</span><br></pre></td></tr></table></figure>\n\n<p> 不管即将到来的输入信息是不是会刷新缓冲区，这几行代码都是可以正常工作的。但是，它也会将光标移到下一行，防止你把数据与提示字符串写到一行。另一种方式是使用<code>fflush()</code>函数，它会在第13章，文件输入与输出中讲到。</p>\n<h1 id=\"关键概念\"><a href=\"#关键概念\" class=\"headerlink\" title=\"关键概念\"></a>关键概念</h1><p>C语言有着许多种数字类型，这也反映了C语言避免让编程人员陷入障碍的目的。比起用一种类型包管全部数字类型，C语言尽力给予编程人员对于数字的特定种类（比如说有符号与无符号），以及最能够适合特定程序的数字范围大小的选择。</p>\n<p>在一台电脑上，浮点数与整型的基础是不一样的。它们会被以不同的形式储存于处理。两个32位的内存单元能够保存相同的位形式（二进制数表示是一样的。）但是如果其中一个被理解为<code>float</code>而另一个被理解为<code>long</code>，这两个内存单元就会代表完全不同也不相关的两个数，例如在个人电脑上，如果你使用代表256.0的浮点储存单元，但是让它被理解为long，你就会得到113246208这个数。C语言确实允许你使用多种数据类型来书写表达式，但是它会自动进行类型转换，所以真正的运算只有一种数据类型。</p>\n<p>在电脑内存中，字符是以数字编码的形式呈现的，ASCII码是美国最常用的数字代码标准，但是C语言也支持其他代码集。字符常量是电脑上数字编码的符号表示-它是由单引号框定的单字符，比如<code>&#39;A&#39;</code>。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>C语言有各种各样的数据类型，基本的数据类型可以分为两类：整型与浮点型，对于整型，两个最鲜明的区分就是分配给不同类型的储存空间，还有是否有符号。最小的整型是<code>char</code>，它可以有符号，也可以没有，这取决于不同的C语言实现，你可以根据自己的需求来选择<code>signed char</code>与<code>unsigned char</code>，但是那通常是在你使用范围比较小的数字的情况下，而不是使用字符编码时。其他的整型还有<code>short, int, long, long long</code>等。C语言确保了所有的类型都至少会与它前面的类型一样大，它们都是有符号类型，但你还是可以加上<code>unsigned</code>修饰符来创造相应的无符号类型：<code>unsigned short, unsigned int, unsigned long, unsigned long long</code>或者你也可以使用<code>signed</code>修饰符来明显地写出它是有符号的。最后，还有<code>_Bool</code>类型，一种无符号类型，它只能保存0与1，分别代表着<code>false</code>与<code>true</code>。</p>\n<p>浮点类型有三种，分别是<code>float, double</code>与在ANSI C中的<code>long double</code>，每一个类型也是至少比它前面的那个类型一样大的。要是想的话，你也可以用<code>_Complex</code>与<code>_Imaginary</code>与浮点类型关键字连用，来使用虚数与复数类型。例如，有<code>double _Complex</code>与<code>float _Imaginary</code>类型。</p>\n<p>整型可以被以十进制、八进制与十六进制的形式被输出，开头写0可以使一个数变为八进制数，写0x或者0X可以变为十六进制数。例如<code>32, 040</code>还有<code>0x20</code>就分别是十进制、八进制与十六进制的数字，但是它们代表的都是同一个值。另外使用<code>l</code>或者<code>L</code>符号可以声明一个<code>long</code>类型的常量值，<code>ll</code>或者<code>LL</code>可以声明一个<code>long long</code>类型的值。</p>\n<p>字符常量是由单引号及其中的字符代表的：比如<code>&#39;Q&#39;, &#39;8&#39;</code>。字符还包括转义序列，比如<code>\\n</code>，它们代表着不会被打印出来的特定字符，你可以使用类似<code>\\007</code>的形式来使用ASCII码的形式来代表字符。</p>\n<p>浮点数可以以十进制小数点的形式来表示，也可以以指数符号的形式来表示，例如<code>7.38E10</code>。</p>\n<p><code>printf()</code>函数能够让你利用格式化转换符，以最简洁的方式打印各种各样的数值，它由一个百分号符<code>%</code>与一个表示类型的字符组成，比如<code>%d</code>或者<code>%f</code>。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><p>你会在附录A中找到这些问题的答案。<br>1.你对于这几种数据你会使用哪种数据类型？</p>\n<blockquote>\n<p>1.东斯普尔顿的人数 – int类型（16位即可）<br>2.在DVD上电影的价格–float类型<br>3.这一章最常见的字母–char类型<br>4.一个字母在这一章中出现的次数。– int类型（。）</p>\n</blockquote>\n<p>2.为什么有时候你会使用<code>long</code>而不是<code>int</code>。</p>\n<blockquote>\n<p>有些时候表示的范围会更大，但是并没有超过<code>long</code>，使用<code>long</code>类型可以保证数据因为存放不下而溢出，从而导致不同机型显示不一而且不会报错的问题。</p>\n</blockquote>\n<p>3.如果你想要得到一个32位有符号的整型，你会使用哪种可转移的类型，请写出所有类型，并说说每一种的合理性。</p>\n<blockquote>\n<p>1.在<code>&lt;inttypes.h&gt;</code>中的<code>int32_t</code>类型<br>2.基本类型中的<code>long</code>或者<code>int</code>类型（对于<code>int</code>来说不一定）</p>\n</blockquote>\n<p><code>long</code>合理，因为关键字更简洁容易记，格式化符也不容易弄错<br>（<code>int32_t</code>为<code>PRId32</code>,<code>long</code>为<code>%ld</code>）<br><code>int32_t</code>能够让编程人员选择适合的大小范围来进行编程，便于大小的记忆。</p>\n<p>4.确认每种类型与它的含义。</p>\n<blockquote>\n<p>1.<code>&#39;\\b&#39;</code>回车符（转义序列）<br>2.<code>1066</code>一个整数，一千零六十六<br>3.<code>99.44</code> 一个两位小数，九十九点四四<br>4.<code>0XAA</code>，十六进制数，10 * 16 + 10 &#x3D; 170.<br>5.<code>2.0e30</code>，指数形式的小数，2 * 10^30(10的30次方)</p>\n</blockquote>\n<p>5.Dottie Cawm 编造了这个满是错误的程序，请找到这个程序中问题。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">float</span> g; h;</span><br><span class=\"line\">\t<span class=\"type\">float</span> tax, rate;</span><br><span class=\"line\"></span><br><span class=\"line\">\tg = e21;</span><br><span class=\"line\">\ttax = rate * g;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（实在是太明显了啊。。）<br>1.include前面忘了#<br>2.main。。。（int main(void)，或者void main()）<br>3.g后面用了分号来分隔，相当于h未规定类型。<br>4.应该是1e21，e21啥也不是。<br>5.tax类型与g的类型大小都太小了，应该用double，float表示不了精确的21位数，或者直接使用long long也可以，反正是整型。<br>6.忘了写<code>return 0;</code></p>\n<p>6.确定下面几种常量数据的类型，与打印他们所使用的格式化标识符。<br><img src=\"/img/Identifytypes1.png\"></p>\n<blockquote>\n<p>·····12为整型，（int（作为常量，默认为int）），输出可以使用<code>%d</code>,<code>%hd</code>,<code>%u</code>,<code>%LLu</code>,<code>%lu</code>。<br>·····<code>0X3</code>，十六进制数，<code>%X</code><br>·····<code>&#39;C&#39;</code>，字符常量，<code>%c</code><br>·····<code>2.34E07</code>,后面看成八进制，但仍然是7，小数的指数形式，用<code>%f</code>或者<code>%lf</code>都可以。<br>·····<code>\\040</code>,十进制的040为32，此即<code>32</code>,即<code>&#39; &#39;</code>（空格字符）<br>·····<code>7.0</code>，一位小数，可以使用<code>%f</code>或者<code>%lf</code><br>·····<code>6L</code>,为<code>long</code>形式整型，可以使用<code>%ld</code>输出。<br>·····<code>6.0f</code>,为<code>float</code>形式小数，可以使用<code>%f</code>。</p>\n</blockquote>\n<p>7.同上<br><img src=\"/img/Identifytypes2.png\"></p>\n<blockquote>\n<p>·····012，八进制数，十进制下为10，可以用<code>%o</code>输出。<br>·····2.9e05L，<code>long double</code>，2.9 * 10^5.<br>·····<code>&#39;s&#39;</code>,字符常量，用<code>%c</code>.<br>·····<code>100000</code>,<code>32</code>位的<code>int</code>，<code>%ld</code>，或者<code>%lu</code>或者更大的类型<code>long long</code>。<br>·····<code>&#39;\\n&#39;</code>,转义序列换行符，直接打印即可。<br>·····20.0f，<code>float</code>类型，<code>%f</code>。<br>·····0x44，十六进制数，68.用<code>%x</code>输出。</p>\n</blockquote>\n<p>8.假设你的程序是以这几行声明语句开头的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> imate = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> shot = <span class=\"number\">53456</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> grade = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"built_in\">log</span> = <span class=\"number\">2.71828</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在下面的<code>printf()</code>函数语句中填入适当的格式化符。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The odds against the %__ were %__ to 1.\\n&quot;</span>,imate, shot);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A score of %__ is not an %__ grade.\\n&quot;</span>, <span class=\"built_in\">log</span>, grade);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The odds against the %d were %ld to 1.\\n&quot;</span>,imate, shot);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A score of %f is not an %c grade.\\n&quot;</span>, <span class=\"built_in\">log</span>, grade);</span><br></pre></td></tr></table></figure>\n\n<p>9.假设<code>ch</code>是一个字符变量，展示一下如何将回行符通过转义序列、十进制数值与八进制及十六进制字符常量的形式赋给ch的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> ch;</span><br><span class=\"line\"></span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\r&#x27;</span>;</span><br><span class=\"line\">ch = <span class=\"number\">13</span>;</span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\0x0D&#x27;</span>;</span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\015&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>10.纠正这个愚蠢的程序。<br><img src=\"/img/Perfect.png\" alt=\"&quot;Perfect...&quot;\"><br>（在C语言中<code>\\</code>表示除）</p>\n<p>1.未指定形式参数的变量名。（main(int a)）<br>2.注释符号没用对（要么<code>//</code>,要么<code>/**/</code>.)<br>3.声明变量使用关键字。（<code>int cows, legs;</code>）<br>4.<code>printf()</code>字符串缺少了右边的引号。<br>5.<code>scanf()</code>少了取地址符<code>&amp;</code>，而且legs的输入形式写错了，为<code>&#39;%d&#39;</code><br>6.<code>printf()</code>格式化符为<code>%d</code>。</p>\n<p>11.说说下面的转义序列代表啥意思？</p>\n<ol>\n<li><code>\\n</code>,换行符，10.</li>\n<li><code>\\\\</code>,相当于<code>\\</code>.</li>\n<li><code>\\&quot;</code>,相当于<code>&quot;</code>.</li>\n<li><code>\\t</code>,相当于tab键。</li>\n</ol>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>1.通过实验方式，弄清你的电脑是如何处理整型上溢、浮点数上溢以及浮点下溢的，也就是写一个拥有数据溢出问题的程序。</p>\n<p><img src=\"/img/overnunder.png\"></p>\n<p>这个肯定会溢出，可以修改程序看看会发生什么。<br>我观察到的是：整型溢出会直接跳到它的最小范围开始加<br>比如2146483650 &#x3D; - 2147483646 </p>\n<p>浮点上溢，会失去精度，但是只要未超过位数仍然可以表示，如果把指数调到40就会出INF（infinity），具体可以看上文对于浮点溢出的讲解。。</p>\n<p>浮点下溢，会直接被看成0。</p>\n<p>2.写一个能够根据你输入的ASCII码值返回对应字符的程序。</p>\n<p><img src=\"/img/ASCIIout.png\"></p>\n<p>包含了转义序列，使用了<code>switch</code>与<code>if</code>嵌套的结构。</p>\n<p>3.写一个能够发出警报声，并且能够打印以下句子的程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Startled by the sudden sound, Sally shouted, <span class=\"string\">&quot;By the Great Pumpkin,</span></span><br><span class=\"line\"><span class=\"string\">what was that!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重点有两个，一个是掌握好换行，可以用一个printf加上一个换行符实现，也可以用两个。<br>另一个是如何在字符串内输出”，这也是我们周赛第一道题的考点</p>\n<p><img src=\"/img/alarming.png\"></p>\n<p>4.书写一个能够读入浮点数据，然后将它先以十进制小数的形式输出，再以指数形式输出。输出类似下方，但指数形式的实数部分是视系统而变的。</p>\n<p><img src=\"/img/decimalandexp.png\"></p>\n<p>5.一年大概有3.156 * 10^7秒，写一个要求你输入以年计数的年龄并将它转化为秒数的程序。</p>\n<p><img src=\"/img/lifesecond.png\" alt=\"My life...\"></p>\n<p>6.一分子水大概是3.0 * 10^23克， 一夸脱水是950克。写一个要求你输入夸脱单位的水量，返回水的分子数的程序。</p>\n<p><img src=\"/img/quartmol.png\" alt=\"Too much...\"></p>\n<p>7.一英寸是2.54厘米， 写一个要求你输入英寸高度，返回厘米高度的程序。你要是想的话也可以反过来转换。</p>\n<p>1.inch to cm<br><img src=\"/img/inchtocm.png\"></p>\n<p>2.cm to inch<br><img src=\"/img/cmtoinch.png\"></p>\n<pre><code>End...\n</code></pre>\n","site":{"data":{}},"excerpt":"<h1 id=\"第三章-数据处理\"><a href=\"#第三章-数据处理\" class=\"headerlink\" title=\"第三章 数据处理\"></a>第三章 数据处理</h1><blockquote>\n<p>你会在这一章学到下面的东西：</p>\n<ol>\n<li>关键字<br>&#96;int,short,long,unsigned,char,float,double,_Bool,_Complex</li>\n<li>运算符<br><code>sizeof</code></li>\n<li>函数<br><code>scanf()</code></li>\n<li>整型与浮点型的区别</li>\n<li>书写常量与声明这些类型的变量</li>\n<li>如何使用<code>printf()</code>与<code>scanf()</code>函数来读写不同类型的值</li>\n</ol>\n</blockquote>\n<p>程序依靠数据来工作。你会向电脑输入数字、字母或者单词，然后期望它能够利用这些数据做些事情。例如，你可能想要电脑去计算支付利润或者展示一个排过序的酒商列表。在这一章，你将会不只阅读数据，而且练习着去操纵数据，那是挺有趣的一件事。</p>\n<p>这一章还会让你了解到两大类数据类型：整数与浮点数。C语言提供了这些类型的几种变体。这一章会告诉你类型是什么，如何声明它们并且如何利用它们。而且，你会发现变量与常量之间的区别，作为额外奖励，你的第一个交互式的小程序就要诞生了！</p>","more":"<h2 id=\"3-1-一个例子\"><a href=\"#3-1-一个例子\" class=\"headerlink\" title=\"3.1 一个例子\"></a>3.1 一个例子</h2><p>再一次，我们还是从一个样例程序来开始，像以往一样，你会发现一些不熟悉的东西，我们待会就会为你解释。程序的总体目的应该清晰，那么就尝试把图3.1中的源码编译运行下吧。<br>为了节省时间，你可以省略注释。</p>\n<p><img src=\"/img/Listing3.1.png\" alt=\"图3.1\"></p>\n<p><img src=\"/img/ErrandWarn.png\" alt=\"错误与警告\"><br>【错误与警告】<br>如果你把程序的某些部分打错了，还有，比如说，遗漏了一个分号，编译器就会给予你一条语法错误信息。即使你没打错，编译器也有可能给予你一条警告信息，“Warning-conversion from ‘double’ to ‘float’ , possible loss of data.” 错误信息指的是你有可能把某些事做错了，它阻止程序的编译。警告，意思是你写的代码是合法的但是有可能做的并不是你想的那样。警告并不会阻止编译过程。上文中的这条信息就会在C语言在处理像770.0这样的数时出现，但并不是这个例子的问题，这一章过会会解释这条警告。</p>\n<p>当你在打字写这个程序的时候，你有可能会把<code>770.0</code>改成这种珍贵金属的当前价格。但是不要改变14.5833，那代表着一磅对应的盎司数。（盎司金衡制，是对于贵重金属使用的，常规衡制是给人们使用的，不论是珍贵的物品或是其他的东西。）</p>\n<p>需要注意的是“输入”你的体重意味着把你的体重打字写入电脑，并且敲下Enter或者Return键（不要输入完了你的体重就等着。）按下Enter键这个动作告诉了电脑你已经完成了你的应答。这个程序想要你输入一个数字，如<code>150</code>而不是单词，比如<code>too much</code>，如果你写的是字母而不是数字，那是会导致问题的，而这个问题需要之后学习的<code>if</code>语句来解决。（第七章，“C语言控制语句：分支结构与跳跃结构”会讲到），所以请先平静一些，输入一个数字，这里就是一个简单的输出示例。</p>\n<p><img src=\"/img/Olist3.1.png\" alt=\"输出\"></p>\n<h3 id=\"3-1-1-例子中的新知识\"><a href=\"#3-1-1-例子中的新知识\" class=\"headerlink\" title=\"3.1.1 例子中的新知识\"></a>3.1.1 例子中的新知识</h3><p>在这个C语言程序中有这么几个新接触的要素。</p>\n<ul>\n<li>可以注意到的是，代码在变量声明中使用了新的数据类型，前面提到的例子只使用了十进制整数类型(<code>int</code>)，但是现在的这个例子使用了一个浮点类型的变量类型，这样的话你就可以处理更大范围的数据了。<code>float</code>类型就可以保存含有十进制小数点的数字。</li>\n<li>这个程序给出了书写常量的一些更新的方式，你现在可以书写浮点型的常量了。</li>\n<li>为了对程序提供输入信息，你需要使用<code>scanf()</code>函数，<code>%f</code>命令<code>scanf()</code>从键盘输入中读入一个浮点数，<code>&amp;weight</code>告知了<code>scanf()</code>函数把输入的值赋给名字叫做<code>weight</code>的变量，<code>scanf()</code>函数会用<code>&amp;</code>符号来寻找在哪里可以找到叫做<code>weight</code>的变量，下一章我们会进一步地阐述<code>&amp;</code>符号，现在，只需要相信我们你需要在这里添加一个<code>&amp;</code>符号。</li>\n<li>可能最突出的新特性就是程序变为交互性的了。电脑会要求你输入信息，并使用你输入的数值。一个交互性的程序是比不能交互的更有趣的。更重要的是，交互的方法让程序更加的灵活。举个例子，样例程序就可以用于所有合理的体重了，而不只是150磅，你不需要换一个人就再把程序重写一遍。<code>scanf()</code>函数会从键盘中获取数据，并把数据传递到你的程序，<code>printf()</code>函数会从程序中获取数据，然后把数据传递到你的屏幕上。这两个函数在一起就可以让你建立电脑与你的双向联系（见图3,1），这就让电脑使用更加有趣了。</li>\n</ul>\n<p>我们会在这一章讲述这些新特点中的前两条，后面的三条内容会在第四章-字符串与格式化输入输出完整地讲到，但是这一章还是会少量地使用<code>print()</code>与<code>scanf()</code>函数。</p>\n<p><img src=\"/img/Figure3.1.png\" alt=\"输入输出函数的工作\"></p>\n<h2 id=\"3-2-变常类型\"><a href=\"#3-2-变常类型\" class=\"headerlink\" title=\"3.2 变常类型\"></a>3.2 变常类型</h2><p>一台电脑，在程序的指导之下，可以做到很多的事情。可以做加法，可以给名称排序，可以指示讲话者或者屏幕的演出顺序，可以计算彗星的轨道，可以编排你的邮寄列表，拨叫电话号码、画出由小棒组成的人物，得出结论或者其他你可以想象到的可以被创造的东西。为了完成这些任务，程序需要处理<em><strong>数据</strong></em>，也就是你使用的保存在程序中的所有数字与字符信息。一些数据类型需要在程序使用之前进行预设，而且保证它们的值是不变的，这些就是<em><strong>常量</strong></em>。其他的数据类型的值或许会随着程序运行改变或者被赋给，这些就是<em><strong>变量</strong></em>。在这个样例程序中，<code>weight</code>就是一个变量，而<code>14.5833</code>就是一个常量。那么<code>770.0</code>呢？虽然铑金属在真实生活中的价格并不是个常量，但是这个程序把它作为一个常量来处理。变量与常量的区别就在值可不可以随着程序运行发生改变上。</p>\n<h2 id=\"3-3-数据类型关键字\"><a href=\"#3-3-数据类型关键字\" class=\"headerlink\" title=\"3.3 数据类型关键字\"></a>3.3 数据类型关键字</h2><p>讲完了变量与常量的区别之后，我们需要了解一下不同数据<em><strong>类型</strong></em>之间的区别。一些数据是数字形式，一些是字母，或者更加普遍的，它们是字符。电脑需要一种方式来确定与使用这些不同的类型。C语言通过对于基本的数据类型的定义完成了这个工作。如果数据是一个常量，编译器通常是可以通过它看起来的样子来区分它的。<code>42</code>是一个十进制整数，<code>42.100</code>是一个浮点数，在另一面，变量就需要声明语句来声明它的类型。随着学习进行下去，你会了解到关于声明变量的更多细节。但是还是让我们首先先研究一下C语言可以识别的基本类型，K&amp;R C确立了有关于类型的七个关键字，C90标准增加了两个，C99标准又增加了三个。（见表3.1）<br><img src=\"/img/Table3.1.png\" alt=\"表3.1\"></p>\n<p><code>int</code>关键字提供了C语言中基本的十进制整数类型，下面的三个关键字(<code>long, short, unsigned</code>)还有ANSI添加的<code>signed</code>提供了基本类型的变体。接着，<code>char</code>关键字指明了用于字母与其他字符的类型，如<code>%, $, #</code>等，<code>char</code>类型还可以被用来代表大于0与小于10的十进制整数。然后是<code>float</code>与<code>double</code>，还有两者的混合<code>long double</code>是用来代表带有十进制小数点的数字的。<code>_Bool</code>类型是为布尔类型提供的(<code>true</code>和<code>false</code>)，最后是分别代表着复数与虚数的<code>_Complex</code>与<code>_Imaginary</code>.</p>\n<p>由这些关键字创造的类型又可以基于在电脑中的储存类型分为两种，<em><strong>十进制整数类型</strong></em>与<em><strong>浮点数类型</strong></em>。</p>\n<p><img src=\"/img/storingtypes.png\" alt=\"Bits, Bytes and Words\"><br>【Bit（位）、字节与字】</p>\n<p><em>bit</em>、<em>字节</em>与<em>字</em>可以被用来描述电脑的数据单元或者内存单元。我们会集中于第二种用法。</p>\n<p>内存的最小单元叫做<em><strong>bit</strong></em>，它可以保存<code>0</code>与<code>1</code>之间的其中一种数值（或者你可以说，这个字节被设为“关”或者“开”）你并不能在一个bit中储存太多的信息，但是电脑可以储存很多的字节，bit就是电脑内存的基础组成模块。</p>\n<p><em>字节</em>是电脑内存的一般单元。对于大多数的机器来说，一个字节是8个bi，那是标准的定义，至少当测量内存的时候（C语言有不同的定义，我们会在“使用字符：<code>char</code>类型”这一节讲到）因为一个bit不是0就是1，那么在8位的字节中，就可以有256种可能（2的8次方），这些可能的模式就可以被用作比如代表0到255的数字或者代表一系列的字符。在二进制代码下，这种一对一的映射是可以被建立的，而且使用0与1来代表数字也使机器便利的。（在第15章-位运算，会讲述二进制代码，但是如果你想的话现在就可以去读一下）。</p>\n<p><em>字</em>是电脑固定设计下的内存自然单元，对于8位的微型计算机，比如原来的苹果电脑来说，一个字就只是8个bit。早期的IBM兼容器使用的80286处理器是16位的机器，这也就是说他们把字长增加到了16bit。还有例如以Pentinum为基础的计算机，还有Mactonish PowerPC的字长是32bit。还有更强大的电脑的字长是64位的或者更大。</p>\n<h3 id=\"3-3-1-整型与浮点型\"><a href=\"#3-3-1-整型与浮点型\" class=\"headerlink\" title=\"3.3.1 整型与浮点型\"></a>3.3.1 整型与浮点型</h3><p>整型？浮点型？如果你感觉这些词非常不熟悉以至于干扰了你的阅读进度，我们这就要简要描述它们的意义了。如果你对位、字节还有字还是不熟悉的话，你可能需要阅读一下最近描述过的附加栏。你真的需要了解所有的细节吗？并不是，不只了解内燃机驱动车子的工作原理，而多了解一些电脑或者引擎内部发生的事情有时候可以帮到你。</p>\n<p>对于一个人来说，整型与浮点型的区别体现在它们是怎么被写下的。对于电脑来说，那就体现在它们是怎么被储存的。让我们依次来研究一下这两种类型。</p>\n<h3 id=\"3-3-2-整数类型\"><a href=\"#3-3-2-整数类型\" class=\"headerlink\" title=\"3.3.2 整数类型\"></a>3.3.2 整数类型</h3><p><em><strong>整型</strong></em>是没有小数部分的数字。在C语言中，整型是没有小数点的数字。比如说-2、-23还有2456。像3.14, 0.22, 还有2.00这些数就不是整型。整型是以二进制数字的形式被储存起来的。比如7就是被储存为二进制数111的。因此，为了在8位字节中储存这个数字，会把前五个位设置为0，然后把后三个位设置为1。    </p>\n<p><img src=\"/img/Figure3.2.png\" alt=\"用二进制码储存7\"></p>\n<h3 id=\"3-3-3-浮点数类型\"><a href=\"#3-3-3-浮点数类型\" class=\"headerlink\" title=\"3.3.3 浮点数类型\"></a>3.3.3 浮点数类型</h3><p><em><strong>浮点</strong></em>数多多少少是对应着数学概念中的<em><strong>实数</strong></em>，实数包含着整数之间的这些数字，浮点数基本是这些样子：2.75、3.16E7、7.00、2e-8，需要注意的是，只要有小数点就会把整型数字转换为浮点数，比如7.00是一个浮点数，而7就是一个十进制整数。很明显，书写浮点数的方式不止一种，我们会在之后更充分地讨论用e符号表示的形式。但是简单来说，3.16E7的表示方式意思就是3.16乘10的7次方，也就是1后面添7个0，7也就是10的<em><strong>指数</strong></em>。</p>\n<p>关键就是储存浮点数的方式与整数不一样。浮点数的表示涉及到把一个数字分开为小数部分与整数部分，然后分别储存。因此，7.00这个数字不会与整数7同样储存，即使它们的值都是一样的。十进制类比起来也就是把7.0写为0.7E1。这里，0.7就是小数部分，1就是指数部分，图3.3展示了浮点数储存的另一个例子。一台电脑当然会使用二进制数与二进制而不是十进制来储存。你会在第十五章了解关于这个话题的更多信息。现在我们先集中精力于在实用上区别吧。</p>\n<ul>\n<li>整型没有小数部分，浮点数可以有小数部分。</li>\n<li>浮点数比整数代表的数字更多，可以看一下这一篇结尾的图表3.3。</li>\n<li>对于一些算术运算符，比如一个数减去另一个数，浮点类型的精确度会有更大可能下降。</li>\n<li>因为在任何一个范围之间都有着无数的浮点数，比如在1.0与2.0之间，电脑就不能完全地代替这些值，它用实数的大概值来估计浮点数的值。比如7.0有可能被储存为6.99999的<code>float</code>值，过会会讲到更多有关于精确度的知识。</li>\n<li>浮点运算符的优先级通常是比整型运算符要低的，然而用来处理浮点运算的特殊微型处理器已经可用了，这个问题也就得到了解决。</li>\n</ul>\n<p><img src=\"/img/Figure3.3.png\" alt=\"十进制浮点储存方式\"></p>\n<p>现在就让我们研究一下C语言中各种数据类型的特点吧。对于每一种类型，我们会描述如何声明一个变量，如何用变量代表一个常量，还有一些特殊的用法。一些年代较早的C语言编译器可能不能支持下文全部的类型，所以你可以查看一下你的编译器的说明书，看一看哪些数据类型是可用的。</p>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"3-4-1-int类型\"><a href=\"#3-4-1-int类型\" class=\"headerlink\" title=\"3.4.1 int类型\"></a>3.4.1 <code>int</code>类型</h3><p>C语言提供了很多的整数类型，你可能想知道为什么只有一种还不够，答案就是这样C语言就可以让你将特定的变量用在特定的地方。具体来说，C语言的各个整数类型不同在值域的大小与是否含有负数上。<code>int</code>是最基本的整数类型，但是你要是为了满足机器任务的特定需求的话，其他的类型也都是可用的。</p>\n<p><code>int</code>类型是一种有符号的整数类型，有符号意味着<code>int</code>类型的整数可以是正数、也可以是负数，或者是0。<code>int</code>类型的值域是取决于计算机系统的，通常一个<code>int</code>类型的整数的大小就是内存的一个字长。因此，旧版的16位IBMPC适配器，就可以使用16个位来储存整数，也就是从-<strong>32768</strong>到<strong>32767</strong>。现在的个人电脑一般是使用32位的整数大小，在这张结尾的表3.3可以看到一些个例子。现在个人电脑产业也正在向64位处理器发展，那样也就可以使用更大的整数了。ISO&#x2F;ANSI C语言特别指出<code>int</code>的最小范围应该是-<strong>32767</strong>到<strong>32767</strong>，通常系统会专门拿出一个位来保存符号，第十五章描述这种了一般的方法。</p>\n<h4 id=\"3-4-1-1-声明int类型\"><a href=\"#3-4-1-1-声明int类型\" class=\"headerlink\" title=\"3.4.1.1 声明int类型\"></a>3.4.1.1 声明<code>int</code>类型</h4><p>正像你在第二章看到的，关键字<code>int</code>可以用来声明一个基本的整型变量。声明，首先是<code>int</code>，然后是变量的名称，最后是一个分号。要是声明多个变量的话，可以分别声明，也可以用逗号分隔，把一系列的变量名列出来，下面的声明方法都是合法的。</p>\n<p><img src=\"/img/valid_declaration.png\"></p>\n<p>你可能已经使用过分别声明变量的方法了，或者你已经尝试在一行中声明全部的变量了。效果都是一样的：就是对四个<code>int</code>大小的变量分配空间并与变量名相联系。</p>\n<p>这些声明语句创造了变量，但并没有给它们赋值，变量要如何得到值呢？你已经见过两种方法了，第一种是赋值语句</p>\n<p><img src=\"/img/assignments.png\"></p>\n<p>第二，变量也可以使用函数来赋值，比如说<code>scanf</code>函数。<br>现在我们来了解一下第三种方法吧。</p>\n<h4 id=\"3-4-1-2-变量初始化\"><a href=\"#3-4-1-2-变量初始化\" class=\"headerlink\" title=\"3.4.1.2 变量初始化\"></a>3.4.1.2 变量初始化</h4><p>对变量进行<em><strong>初始化</strong></em>也就是给变量赋起始值，或者初值。在C语言中，这可以作为声明的一部分，只需要在变量名后加上赋值运算符还有你想要赋给这个变量的值就可以了。下面是一些例子。</p>\n<p><img src=\"/img/initialization.png\"></p>\n<p>在最后一行，只有<code>cats</code>被初始化了，速读一遍，你有可能觉得dogs也会被赋值为94，所以还是最好避免把未赋值与已赋值的变量放在一行之中吧。</p>\n<p>简单来说，这些声明会为变量创造空间，并为它们贴上变量类型的标签，而且还可以给赋变量起始值。（见图3.4）</p>\n<p><img src=\"/img/DefinenInitial.png\" alt=\"图3.4\"></p>\n<h4 id=\"3-4-1-3-int型常量\"><a href=\"#3-4-1-3-int型常量\" class=\"headerlink\" title=\"3.4.1.3 int型常量\"></a>3.4.1.3 <code>int</code>型常量</h4><p>在上一个例子中各种各样的整数（21、32、14、94等），就是整型常量。当你书写一个没有十进制小数点并且没有指数的数时，C就会将这个数认作整型常量。因此，22与-44都是十进制整型常量，但是<code>22.0</code>与<code>2.2E1</code>就不是。C语言会把大多数整型认作<code>int</code>类型常量。但很大的数会有区别。看最后对于long常量与long long常量的描述就知道了。</p>\n<h4 id=\"3-4-1-4-打印int值\"><a href=\"#3-4-1-4-打印int值\" class=\"headerlink\" title=\"3.4.1.4 打印int值\"></a>3.4.1.4 打印<code>int</code>值</h4><p>你可以使用<code>printf()</code>函数来打印<code>int</code>类型的值，正像你在第二章看到的，%d符号可以在十进制整数被打印出来的地方作为占位符。%d的名称叫格式化符，因为它声明了<code>printf()</code>打印值的类型每一个在格式化字符串中的每一个<code>%d</code>都代表着一个<code>int</code>类型的值，它就在字符串后面的列表中。那个值可以是一个<code>int</code>类型变量代表的，也可以是一个<code>int</code>类型常量代表的，或者任何有<code>int</code>值的表达式。这样，你就有责任让格式化符与之后的列表中的值一致了，编译器并不会报出这种错误。图3.2就表示了一个初始化并且打印变量值，常量的值，还有简单表达式的值的程序，它也提示了你如果你不小心的话会发生什么。</p>\n<p><img src=\"/img/Listing3.2.png\" alt=\"图3.2\"></p>\n<p>编译完运行这个程序的结果是这样的。</p>\n<p><img src=\"/img/result1.png\"></p>\n<p>第一行输出，第一个<code>%d</code>代表着一个<code>int</code>类型变量<code>ten</code>第二个代表着常量2，第三个呈现的是<code>ten</code> - <code>two</code>的值。但第二行，使用的是<code>ten</code>这个变量代替了第一个<code>%d</code>但是之后的值全都是随机的，是从最近的两个内存空间中获取的值！（你回去的值有可能与这里显示的值相差很多，不仅内容不一样，而且不同的编译器对于这些内存区的管理方法也不一样。）</p>\n<p>你有可能对编译器为啥并不会捕捉到这个很明显的错误，还是怪<code>printf()</code>函数的原始设计吧。大多数函数都会获取一个值作为参数，编译器可以检查出来你使用的值是不是恰当，但是<code>printf()</code>可以获取一个、两个、三个或者更多的参数，那就让编译器无法使用常用的错误检测方法了。记住，一定要检查格式化符是不是与被显示的值匹配。</p>\n<h4 id=\"3-4-1-5-八进制与十六进制\"><a href=\"#3-4-1-5-八进制与十六进制\" class=\"headerlink\" title=\"3.4.1.5 八进制与十六进制\"></a>3.4.1.5 八进制与十六进制</h4><p>通常来说，C语言会认为整型常量是十进制数。但是八进制与十六进制也受到许多编程人员的欢迎。因为8与16都是2的幂，但10并不是，这些进制系统有时会为与计算机相关的值的表达提供便利。例如，数字65536经常会出现在16位的机器中，它只是10000的十六进制数，十六进制数中的每一位数都对应着实际的四个位。例如，十六进制数3就对应着0011，5就对应着0101，所以35就对应着0011 0101，53就对应着0101 0011。这种对应就会使十六进制与二进制的转换非常简单。但是电脑是怎么判断10000是什么进制的数字的呢？在C语言中，数字不同的前缀就显示了不同的进制，0x（0X）就意味着你正在使用十六进制值，所以16在十六进制下会被写作0x10或0X10。相似地，前缀0就表示你正在使用的是八进制值。例如，十进制数16在八进制数中就写为020，在15章我们会更加充分地讨论不同的数制。</p>\n<p>要知道的是不同的数制系统是为你提供便利的，它并不会影响数值的储存方式，也就是说，你可以写16、020或者0x10，这个数还是会以二进制的方式储存起来。</p>\n<h4 id=\"3-4-1-6-展示八进制与十六进制数\"><a href=\"#3-4-1-6-展示八进制与十六进制数\" class=\"headerlink\" title=\"3.4.1.6 展示八进制与十六进制数\"></a>3.4.1.6 展示八进制与十六进制数</h4><p>正像C语言能够让你以三种方式书写数字一样，它也可以让你以三种方式的任意一种展示数字。展示一个八进制整数可以使用%o，十六进制使用%x，如果你想显示前缀，你可以使用修饰符#，比如<code>%#o</code>，<code>%#x</code>，<code>%#X</code>，有了它们你就可以在数字前面显示0，0x，0X前缀。图3.3给出了一个小小的例子（想到你有可能必须加上一个<code>getchar()</code>，它会在一些IDE中防止程序立即关闭）。</p>\n<p><img src=\"/img/Listing3.3.png\" alt=\"图3.3\"></p>\n<p>编译运行过后结果是这样的。</p>\n<p><img src=\"/img/result2.png\"></p>\n<p>你可以看到相同的数字被以三种不同的数制打印出来了，<code>printf()</code>函数可以实现这种转化。<br>注意前缀只有加上#时才会出现。</p>\n<h3 id=\"3-4-2-其他整型\"><a href=\"#3-4-2-其他整型\" class=\"headerlink\" title=\"3.4.2 其他整型\"></a>3.4.2 其他整型</h3><p>当你正在学习C语言时，<code>int</code>类型有可能已经满足了你大部分的整型需求了。但为了内容的完整，我们会研究其他的类型。如果你喜欢的话，你可以只大体浏览一下这一部分，然后跳到对于<code>char</code>类型那一部分，然后如果有啥需要的可以再回来复习。</p>\n<p>C语言使用三个形容词关键字来修饰基本整型：<code>short, long, unsigned</code>下面是需要记住的一些点。</p>\n<ul>\n<li><code>short int</code>类型，或者直接<code>short</code>，会比<code>int</code>使用的内存更少，由此也就可以在只使用小的数字的时候节省一些空间。像<code>int</code>一样，<code>short</code>为有符号类型。</li>\n<li><code>long int</code>类型，或者直接写<code>long</code>，占用的内存会比<code>int</code>更多，因此可以让你表示更大范围的数字，像<code>int</code>一样，<code>long</code>为有符号类型。</li>\n<li><code>long long int</code>类型，或者<code>long long</code>（都是在C99标准下被引入的），会比<code>long</code>类型占用的内存更多，也就让你可以使用比<code>long</code>范围更大的数字。像<code>int</code>一样，<code>long long</code>是一个有符号的类型。</li>\n<li><code>unsigned</code>类型，或者写成<code>unsigned</code>，是为非负的变量而设置的，这种类型改变了可储存数字的范围，例如，16位的<code>unsigned int</code>可以表示0-65535的数字，就不是-32768-32767了，用来表示符号的那一位在无符号类型这变成了另一个可以表示数字的位，也就让数字的表示范围扩大了。</li>\n<li><code>unsigned long int</code>类型，或者<code>unsigned long</code>还有<code>unsigned short int</code>，或者<code>unsigned short</code>，在C90标准下都是可以被识别的，在C99标准下又添加了<code>unsigned long long int</code>类型，或者<code>unsigned long long</code>。</li>\n<li>为了让你的意图明显，关键字<code>signed</code>可以被用在任何有符号类型上，例如<code>short</code>, <code>short int</code>, <code>signed short</code>,<code>signed short int</code>都是一种类型。</li>\n</ul>\n<h4 id=\"3-4-2-1-声明其他整型\"><a href=\"#3-4-2-1-声明其他整型\" class=\"headerlink\" title=\"3.4.2.1 声明其他整型\"></a>3.4.2.1 声明其他整型</h4><p>其他整型与<code>int</code>类型的声明方式是相似的，<br>下面就展示了一些例子。<br>并不是所有的编译器都能识别最后三种类型，最后一个例子是C99标准新加进去的。</p>\n<p><img src=\"/img/othertypes.png\" alt=\"其他整型\"></p>\n<h4 id=\"3-4-2-2-为什么要用多种整型？\"><a href=\"#3-4-2-2-为什么要用多种整型？\" class=\"headerlink\" title=\"3.4.2.2 为什么要用多种整型？\"></a>3.4.2.2 为什么要用多种整型？</h4><p>为什么说<code>long</code>与<code>short</code>与<code>int</code>相比会使用不同的内存呢？因为C语言会确保<code>short</code>不会长过<code>int</code>，<code>int</code>也不会长过<code>long</code>，主要的目的就是为了适应不同类型的机器。例如在运行着Windows 3.1的IBM PC上，<code>int</code>与<code>short</code>都是16位的，而<code>long</code>是32位的，而在Mactonish Power PC上，<code>short</code>类型是16位的，而<code>int</code>和<code>long</code>类型是32位的。PowerPC G3&#x2F;G4中的Pentium芯片的字长是32位，因为这就可以让整型超过20亿（见表3.3），C语言在处理器&#x2F;操作系统的实现没有必要超出这个数值。因此，<code>long</code>与<code>int</code>大小是一样的。对于许多的使用过程，那个大小的整数是不需要的，所以节省内存的<code>short</code>就被创造了。但另一方面，原本的IBM PC只有16位的字长，那就意味着需要更长的<code>long</code>类型。</p>\n<p>现在64位的处理器都变得很常见了，比如IBM Itantium，AMD Opteron，还有PowerPC G5。因为64位整型的需要，<code>long long</code>类型也就应运而生。</p>\n<p>现在最常见的实践是把<code>long long</code>设置为64位，把<code>long</code>设置为32位，把<code>short</code>设置为16位，把<code>int</code>设置为16位或者32位，它的大小取决于电脑的自然字长。原则上，这四种类型可以代表四种不同的大小。</p>\n<p>C语言标准为确定每一种基本数据类型的最小尺寸提供了指引。<code>short</code>与<code>int</code>的最小范围是从-32,767到32,767，对应着16位的单元，而<code>long</code>类型的最小范围是-2,147,483,647到2,147,483,647，对应着32位的单元。（注意，为了易读，我们使用了逗号分开，但是C语言代码是不能写成这样的）。对于<code>unsigned short</code>与<code>unsigned int</code>，最小的范围是0到65535，而<code>unsigned long</code>的最小范围是0-4,294,967,295&#x2F;,<code>long long</code>类型为了迎合64位的需求，它的最小范围很大，是-9,223,372,036,854,775,807到9,223,372,036,854,775,807，而<code>unsigned long long</code>就是0到18,446,744,073,709,551,615.（对于那些检查写的对不对的人，下面是它的英文表示，但是谁要计数呢？）</p>\n<p><img src=\"/img/nonsense.png\" alt=\"(一脸认真)\"></p>\n<p>你会在什么时候使用这些不同的<code>int</code>类型呢？第一，考虑<code>unsigned</code>类型，使用它们计数是很好的，因为你不需要负数，而且<code>unsigned</code>类型比<code>signed</code>类型的范围更大，可以得到更大的整数范围。</p>\n<p>如果你需要处理超过了<code>int</code>类型的范围的数字，使用<code>long</code>类型，但是在<code>long</code>比<code>int</code>长的系统中，使用<code>long</code>会让计算变慢，所以没必要的话就不要用<code>long</code>，进一步说，如果你正在一个<code>int</code>与<code>long</code>类型长度一样的系统上写代码，而你又需要32位的整数，你就需要使用<code>long</code>而不是<code>int</code>了，那样程序才可以在转到16位机的时候正常运转。</p>\n<p>相似地，如果你需要64位整型数的时候就使用<code>long long</code>吧，一些电脑已经使用着64位的处理器，而且并且正在服务器、工作站甚至桌面的64位处理也正在变得越来越普遍。</p>\n<p>如果你需要节省内存空间的话，使用<code>short</code>来节省内存空间，比如如果你在一台<code>int</code>类型是32位的机器上，需要16位的值这种情况。通常只有当你的程序使用整型数组这种与系统的可用内存极其相关的情况下节省内存才是必须的。另一个使用<code>short</code>的原因是它有可能与被电脑的特定部分使用的硬件寄存器的大小相同。</p>\n<blockquote>\n<p><img src=\"/img/overflow.png\"><br>整型溢出。<br>当一个整型相对于它的类型太大了会怎么样呢？让我们把一个整型变量设置到它可能的最大值，并用它加一些数，看看会发生什么。<code>unsigned</code>与<code>\tsigned</code>类型都可以试试（<code>unsigned int</code>的格式化符是<code>%u</code>）<br>这就是系统给出的结果<br><img src=\"/img/flowresult.png\"><br><code>unsigned</code>类型好像汽车的里程计一样，当它到达了最大值，它就会返回到它的最小值，变量i也很相似，主要的区别是<code>unsigned</code>类型的<code>j</code>\t是以0开始的，但是<code>int</code>类型的<code>i</code>是以-2147483647开始的。<br>注意的是，你如果没有被告诉这个数据已经溢出了，你还是会不断地在这个问题上打转。<br>这里描述的行为是由C语言<code>unsigned</code>类型的规范控制的，标准并不规定<code>signed</code>应该行为如何，这里展示的行为也是通常会发生的，但是你以后会找到不一样的东西的。</p>\n</blockquote>\n<h4 id=\"3-4-2-3-long常量与long-long常量\"><a href=\"#3-4-2-3-long常量与long-long常量\" class=\"headerlink\" title=\"3.4.2.3 long常量与long long常量\"></a>3.4.2.3 <code>long</code>常量与<code>long long</code>常量</h4><p>一般地，当你在代码中使用2345这样的数字时，它会被储存为一个<code>int</code>类型的常量。那么如果你使用1000000这样不能被<code>int</code>储存下来的数字呢？编译器就会将它识别为<code>long int</code>，如果认为这个类型已经足够大了的话。如果比<code>long</code>类型的最大值还要大的话，C语言会将它当做<code>unsigned long</code>类型，如果那还不够的话，它就会把它当做<code>long long</code>类型或者<code>unsigned long long</code>，如果这些类型可以满足要求的话。</p>\n<p>八进制与十六进制的常量会被认作<code>int</code>类型，除非这个值太大，然后还是以上文的顺序依次递加。</p>\n<p>有些时候你有可能想让编译器把一个小点的数储存为<code>long</code>类型。如果你在编程的过程中需要外显地使用内存地址，例如在IBM PC上，就有可能有这样的问题。而且，一些基本的C语言函数是需要<code>long</code>类型的值的，你可以在数值加上后缀<code>l</code>或者<code>L</code>，第二种方式更好，因为看起来不像数字<code>1</code>。因此，一个有着16位大小的<code>int</code>与32位大小的<code>long</code>，会将<code>7</code>这个数储存在16位中，而将<code>7L</code>储存为32位中，而且这两个后缀对于八进制与十六进制都是适用的，像是020L与0x10L。</p>\n<p>相似地，在那些有<code>long long</code>类型的系统中，你就可以使用<code>ll</code>或者<code>LL</code>后缀，比如<code>3LL</code>，而且还可以使用<code>u</code>或者<code>U</code>来表示<code>unsigned long long</code>类型，就像<code>5ull</code>或者<code>10LLU</code>或者<code>9Ull</code>。</p>\n<h4 id=\"3-4-2-4-打印short-long-long-long与unsigned类型\"><a href=\"#3-4-2-4-打印short-long-long-long与unsigned类型\" class=\"headerlink\" title=\"3.4.2.4 打印short, long, long long与unsigned类型\"></a>3.4.2.4 打印<code>short, long, long long</code>与<code>unsigned</code>类型</h4><p>要打印一个<code>unsigned int</code>类型的数字，只需使用<code>%u</code>符号，<code>long</code>类型可以使用<code>%ld</code>，但如果你的机器中<code>int</code>与<code>long</code>是大小一致的，那<code>%d</code>就可以了，但是代码有可能在别的系统中就不能正常运作了，所以对<code>long</code>来说最好还是使用<code>%ld</code>吧，对于<code>x</code>与<code>o</code>都可以在前面加上<code>l</code>。因此对于十六进制的<code>long</code>类型数你会使用<code>%lx</code>，类似在八进制会使用<code>%lo</code>，需要注意的是即时C语言提供了大写的<code>L</code>后缀，但是在格式化符中，只能使用小写。</p>\n<p>C语言有几种额外的<code>printf()</code>格式，首先，你可以在使用<code>short</code>类型时在<code>%d</code>的<code>d</code>前加<code>h</code>来表示十进制的<code>short</code>整型，同理<code>%ho</code>也是可以的，而且<code>h</code>与<code>l</code>是可以再加上<code>u</code>表示无符号的。例如，你会使用<code>%lu</code>符号表示<code>unsigned long</code>类型，图3.4就提供了一个例子。支持<code>long long</code>的系统也可以使用<code>%lld</code>或者<code>%llu</code>分别表示有符号与无符号的<code>long long</code>整型，第四章会对格式化符进行更充分的阐述。</p>\n<p><img src=\"/img/Listing3.4.png\" alt=\"图3.4\"></p>\n<p>这是系统的输出：</p>\n<p><img src=\"/img/result3.png\"></p>\n<p>这个例子就显示出了使用错误的格式化符会有意想不到的后果。第一，注意到对于变量<code>un</code>使用的<code>%d</code>格式化符结果输出了一个负值，原因就是无符号与有符号数实际上是以相同的二进制排列被储存起来的（第15张会更详细地谈论这种属性），所以如果你告诉<code>printf()</code>函数这个数是没有符号的，与告诉它这个数是有符号的输出结果是不一样的。这种行为常会在你输入一个超限的数值时出现。小的整数，在两种格式化符之下都是一样的。</p>\n<p>第二，注意到无论你告诉<code>printf()</code>是<code>short</code>还是<code>int</code>类型，<code>short</code>变量<code>end</code>都是可以打印出正常值的。这就是因为当向函数输入一个参数的时候会自动将它转化为<code>int</code>类型，那么你就会问了:1.为什么这种转化会发生？2.<code>h</code>修饰符的用处在哪里？第一个问题的答案是<code>int</code>类型可以被电脑更加高效地处理。所以在<code>short</code>与<code>int</code>类型大小不同的机器上，有可能传递一个<code>int</code>值会更快。第二个问题的答案是你可以看看一个更加长的整型数如果被缩短为<code>short</code>类型了会看起来怎样。第三行的输出也为这一点提供了例证，当65537被写为32位二进制数时，它看起来是<code>00000000000000010000000000000001</code>这样子的，使用<code>%hd</code>格式化符会迫使<code>printf()</code>只看向最后的16个位，因此它会只打印<code>1</code>，相似的，最后一行的<code>verybig</code>使用<code>%ld</code>就会只看向最后的32位，而不是完全的位数。</p>\n<p>早些时候你已经了解标识符的数量与显示数字的数量匹配的重要性了，现下你也知晓了标识符的种类也要匹配。</p>\n<p><img src=\"/img/matchup.png\"></p>\n<p>匹配<code>printf()</code>函数的格式化符<br>记着要去检查一下你是不是对于每一个要在<code>printf()</code>中打印的值都给予了一个格式化符，并检查是不是每一个的格式化符都与显示的值的类型相互对应。</p>\n<h3 id=\"3-4-3-字符-char\"><a href=\"#3-4-3-字符-char\" class=\"headerlink\" title=\"3.4.3 字符 char\"></a>3.4.3 字符 char</h3><p><code>char</code>类型是用来储存像字母、标点符号这样的字符的，但是严格来讲它其实是一个整数类型。为什么？<code>char</code>这个类型实际上储存的是整数而不是字符，为了处理字符，电脑会使用数字编码来让某一个整数代表某一个字符。在美国最常用的字符编码表是ASCII编码表，它已经在书的前封的背面给出来了，是这本书使用的编码表。举些例子，<code>65</code>在ASCII码表中代表的是大写的<code>A</code>，所以如果需要储存字母<code>A</code>，只需要储存数字<code>65</code>即可，（许多IBM主机用的是不一样的编码系统，它叫做EBCDIC，但是准则都是一样的。但在美国以外的计算机系统使用的编码表有可能是完全不同的。）</p>\n<p>基础的ASCII码是从0到127的，这个范围小到一个字节就可以保存下来，<code>char</code>类型通常会被定义成8位的内存单元，所以它不仅仅可以储存下来基础的ASCII码。许多系统，如IBM PC与苹果公司的Macintosh，可以提供更大的ASCII码表（这两个系统是不一样的），但是还是在8位范围之内。更加普遍的，C语言会确保<code>char</code>类型的大小是足够储存系统中C语言实现的需要的基础字符的。</p>\n<p>许多的字符集会有不只127而是255分值，例如日本的kanji字符集，商业的Unicode协议为代表全世界的各种字符创造了一个系统，现在已经有96000个字符了。ISO（国际标准组织）与IEC（国际电子委员会）为字符集创造了ISO&#x2F;IEC10646标准。幸运的是，Unicode标准与ISO&#x2F;IEC10646标准是始终协调的。</p>\n<p>使用这些字符集的平台有可能会使用16位或者32位的<code>char</code>类型代表，C语言定义下<code>char</code>的长度是1个字节，现在在C语言的记录中，一个字节会是16位或者32位，而不是那些系统上的8位。</p>\n<h4 id=\"3-4-3-1-定义char类型变量\"><a href=\"#3-4-3-1-定义char类型变量\" class=\"headerlink\" title=\"3.4.3.1 定义char类型变量\"></a>3.4.3.1 定义<code>char</code>类型变量</h4><p>正像你会期望的，<code>char</code>类型变量与其他变量的定义方式相同，这里就是一些例子。</p>\n<p><img src=\"/img/chardef.png\"></p>\n<p>这几行代码创造了三个<code>char</code>类型的变量：<code>response</code>，<code>itable</code>与<code>latan</code>。</p>\n<h4 id=\"3-4-3-2-字符常量及其初始化\"><a href=\"#3-4-3-2-字符常量及其初始化\" class=\"headerlink\" title=\"3.4.3.2 字符常量及其初始化\"></a>3.4.3.2 字符常量及其初始化</h4><p>假定你想要初始化一个字符常量为大写字母A，电脑语言是要让事情变得简单起来的，你不需要记忆ASCII码，你也不会，你可以直接以下面的方式给<code>grade</code>变量赋值<code>&#39;A&#39;</code></p>\n<p><img src=\"/img/charassign.png\"></p>\n<p>被双单引号框定的单一字符就是C语言中的<em><strong>字符常量</strong></em>，当编译器看到了<code>&#39;A&#39;</code>，它会将A字符转化成相应的字符编码值，单引号是必须的，下面就是例子。</p>\n<p><img src=\"/img/chardeclare.png\"></p>\n<p>如果你遗漏了引号，那么编译器就会认为<code>T</code>是一个变量名，如果你使用双引号的话，它会认为你正在使用字符串，我们会在第四章讲解字符串。</p>\n<p>因为字符确实是以数字的形式被储存起来的，你还是可以使用数字编码为<code>char</code>类型变量赋值。</p>\n<p><img src=\"/img/numassign.png\"></p>\n<p>在这个例子中<code>65</code>是一个<code>int</code>类型的，但是因为这个值是小于最大的<code>char</code>类型值的，所以可以无误地赋给<code>grade</code>变量，因为65对应着ASCII码中的字母<code>A</code>，所以<code>A</code>就被赋给了<code>grade</code>变量。但注意，这个例子只是为了表示系统用的是ASCII码系统，但用<code>65</code>与<code>&#39;A&#39;</code>都是一样的，因此，使用字符常量要比使用数字编码是要好的。</p>\n<p>有点奇怪的是，C语言会将字符常量当做<code>int</code>类型常量而不是<code>char</code>来看待。例如，在32位使用ASCII字符编码，<code>char</code>类型为8位的系统中，这一行代码：</p>\n<p><img src=\"/img/gradeb.png\"></p>\n<p>就会将<code>&#39;B&#39;</code>呈现为66这个值储存起来，但是<code>grade</code>是以8位单元储存的66，这种特点就会使字符常量不能存放多个字符，像<code>&#39;FATE&#39;</code>这样，因为4个单独的ASCII码被储存在32位的单元中，但是试图将这样一个字符常量赋给<code>char</code>类型变量会导致只有最后的8位被使用，也就是变量被赋给的是<code>&#39;E&#39;</code>。</p>\n<h4 id=\"3-4-3-3-不会被打印出来的字符\"><a href=\"#3-4-3-3-不会被打印出来的字符\" class=\"headerlink\" title=\"3.4.3.3 不会被打印出来的字符\"></a>3.4.3.3 不会被打印出来的字符</h4><p>单引号对符号、数字还有标点符号都是适用的，但是如果你浏览过这本书前封里的那张表，你会看到一些ASCII字符是打印不出来的。例如，一些代表着回车或者跳到下一行，又或是会让终止铃响的符号，这些符号是怎么被表示的呢？C语言提供了三种方法：</p>\n<p>第一种方法就是我们已经提到过的，使用ASCII表编码的方法。例如，蜂鸣符对应的值就是7，所以你可以这样写。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> beep = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n\n<p>表示这些字符的第二种方法是使用特殊的符号序列，它们叫做<em><strong>转义序列</strong></em>，表3.2给出了转义序列与它们的含义。</p>\n<p><img src=\"/img/Table3.2\" alt=\"表3.2\"></p>\n<p>在赋值给字符常量的时候，转义序列必须要由单引号框定，例如，你可以这样赋值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> nerf = <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后打印变量<code>nerf</code>，打印器或者屏幕上的行就会往前一行（回车）。</p>\n<p>现在我们可以看看每一个转义序列是做什么的，警告符<code>\\a</code>是在C90标准中添加的，它会生成一条有声有色的警告，警告的类型因硬件而定，一般蜂鸣声是最常见的（在有些系统中，警告符是没有用的。）ANSI标准规定了警告符是不能改变活跃位置的。活跃位置这个概念指的是在显示设备（如屏幕、电报机、打印机等等）上下一个字符会出现的地方。简单来说，它就是屏幕上你已经用惯了的光标的总称。在程序中使用警告符最终只会发出蜂鸣声，但并不会移动屏幕上的光标。</p>\n<p>然后，是<code>\\b, \\f, \\n, \\r, \\t</code>还有<code>\\v</code>这些转义序列，它们都是常见的输出设备的控制符，它们在影响活跃位置上很出色，回车(<code>\\b</code>)，会将活跃位置往前挪一个空格。换页符(<code>\\f</code>)会将活跃位置转移到下一页的开头。换行符(<code>\\n</code>)会将活跃位置切换到下一行的开始，(<code>\\r</code>)，回车符(<code>\\r</code>)会让活跃位置回到一行的开头位置，水平制表符(<code>\\t</code>)会将活跃位置向右移动一个<code>Tab</code>键的位置（通常，这些是以字符位置1、9、17、25这样的格式），垂直制表符(<code>\\v</code>)，会让活跃位置移动到下一个垂向的<code>tab</code>位置。</p>\n<p>这些转义序列并不一定在所有的显示设备中起作用。例如，换页符与垂直制表符在电脑屏幕上只会打印出来一个奇怪的字符，并没有任何光标的移动。但是如果在打印机上使用就可以按照描述工作了。</p>\n<p>最后的三个转义序列（<code>\\\\, \\&#39;, \\&quot;</code>），能够以字符常量的形式让你使用<code>\\, &#39;, &quot;</code>（因为这些符号是作为<code>printf()</code>函数的一部分用来定义字符常量的，如果你要把它们字面上打印出来，那将会非常令编译器困惑。）假设你想要打印下来下面的这一行字。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gramps sez, <span class=\"string\">&quot;a \\ is a backslash.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>就需要用下面代码的形式来写。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Gramps sez, \\&quot; a \\\\ is a backslash.\\&quot;\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>最后的两种形式（<code>\\0oo, \\xhh</code>）是ASCII码的特殊标识，是要以八进制ASCII码的形式来代表字符，在前面需要加上<code>\\</code>然后用单引号来框定整个字符，例如，如果你的编译器不能识别警告符，你就可以使用下面的ASCII码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beep = <span class=\"string\">&#x27;\\007&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以省略前面的0，所以<code>&#39;\\07&#39;</code>与<code>&#39;\\7&#39;</code>都是可以的。这个符号会让数字被理解成八进制，尽管前面没有0。</p>\n<p>从C90开始，C语言提供了第三种选择，使用十六进制的字符常量，这样说来，斜杠后面是<code>x</code>或者<code>X</code>与1到3位的十六进制数。例如，Ctrl+P符号在ASCII十六进制符码里就是10（十进制下就是16），所以它是可以被表达为<code>&#39;\\x10&#39;</code>或者<code>\\&#39;x010&#39;</code>的，图3.5展示了一些整型的代表。</p>\n<p><img src=\"/img/Figure3.5.png\" alt=\"图3.5\"></p>\n<p>当你使用ASCII码的时候，要注意数字与字符之间的差异。例如，字符4在ASCII中的值是52,<code>&#39;4&#39;</code>是一个符号而不是一个数字。</p>\n<p>现下，你可能有这几个问题：</p>\n<ul>\n<li><em><strong>为什么转义序列在最后一个例子中没有用单引号括起来？</strong></em><br>（<em><strong>最后一个例子<code>printf(&quot;Gramps sez, \\&quot; a \\\\ is a backslash.\\&quot;\\n&quot;);</code><em><strong>）。<br>  只要是一个字符，不管它是不是转义字符，当它是字符串的一部分的时候，都是需要用双引号框起来的，而不是单引号，但单个字符是无一例外由单引号括起来的。由双引号括起来的是</strong></em>字符串</strong></em>。（第四章会讲到）相似地，不属于转义字符的数字会被当做一般字符打印出来（如<code>printf(&quot;Hello!7\\n&quot;);</code>打印出来的是<code>Hello7</code>，但<code>printf(&quot;Hello!\\007&quot;);</code>输出的是一行<code>Hello！</code>加上一声警告）。</li>\n<li><em><strong>我应该什么时候使用转义序列？什么时候使用对应的ASCII码？</strong></em><br>  如果你需要使用其中一个转义序列，比如说<code>&#39;\\f&#39;</code>，或者作为替代的<code>&#39;\\014&#39;</code>，最好使用前者。首先，这种表示方法更容易记忆：其次，它更容易在机器之间转移，如果其他系统不适用ASCII码，<code>&#39;\\f&#39;</code>还是可以使用。</li>\n<li>如果我需要使用数字变啊，为什么使用的是<code>&#39;\\032&#39;</code>而不是<code>032</code>？<br>  第一，使用转义字符的方式会让阅读你代码的人轻松地知道这是一个字符编码。第二，如<code>\\037</code>这样的转义序列是可以内嵌于C语言字符串的（？[就像<code>\\007</code>一样])。</li>\n</ul>\n<h4 id=\"3-4-3-4-打印字符\"><a href=\"#3-4-3-4-打印字符\" class=\"headerlink\" title=\"3.4.3.4 打印字符\"></a>3.4.3.4 打印字符</h4><p><code>printf()</code>函数可以使用格式化符<code>%c</code>表示一个字符将要在这个位置被打印。你想到字符常量是1位的整型值，因此你也可以用<code>%d</code>符号，那样的话你就会得到一个整数，<code>%c</code>格式化符会告诉<code>printf()</code>函数来打印那个编码值对应的字符，例3.5就以两种方式展示了<code>char</code>类型变量。</p>\n<p><img src=\"/img/Listing3.5.png\" alt=\"例3.5\"></p>\n<p>尝试运行，输出是这样的。</p>\n<p><img src=\"/img/C67.png\"></p>\n<p>当你使用程序的时候，不要忘记在写完了字符之后按下回车键。<code>scanf</code>函数会接收你写下的字符，然后取地址符(<code>&amp;</code>)会将字符赋给字符变量<code>ch</code>。接下来，<code>printf()</code>函数会打印两次<code>ch</code>这个变量，第一次是以字符的形式打印的（使用<code>%c</code>格式化符的效果），第二次是以十进制整数的形式（同理，<code>%d</code>的效果）。需要注意，<code>printf()</code>的标识符会决定数据被如何呈现，呈现方式与数据的储存方式没有关系。</p>\n<p><img src=\"/img/Figure3.6.png\" alt=\"数据储存与输出\"></p>\n<h4 id=\"3-4-3-5-有符号还是无符号？\"><a href=\"#3-4-3-5-有符号还是无符号？\" class=\"headerlink\" title=\"3.4.3.5 有符号还是无符号？\"></a>3.4.3.5 有符号还是无符号？</h4><p>有的C语言实现里会使<code>char</code>是一个有符号的类型，那也就意味着<code>char</code>可以接受从-128到127的值。其他的C语言实现会让<code>char</code>是一个无符号的类型，那么它的范围就变成了0到255，你的编译器的使用手册应该会告诉你<code>char</code>是什么类型，或者你可以看看<code>limits.h</code>头文件，下一章会讲述。</p>\n<p>在C90标准下，C语言允许你使用关键字<code>unsigned</code>与<code>signed</code>来修饰<code>char</code>，那样的话不管原本的<code>char</code>是有符号还是无符号。你都可以任意变化它们的类型。它们在处理小范围的十进制整数时是很有用的。要是只是为了使用字符，只使用<code>char</code>就可以了。</p>\n<h3 id=\"3-4-4-Bool类型\"><a href=\"#3-4-4-Bool类型\" class=\"headerlink\" title=\"3.4.4 _Bool类型\"></a>3.4.4 <code>_Bool</code>类型</h3><p><code>_Bool</code>类型是C99标准添加的，它们是被用来代表布尔值的，也就是逻辑上的<code>true</code>与<code>false</code>。因为C语言是使用0表示<code>false</code>，用1表示<code>true</code>的，所以布尔类型实际上只是一个整型，但是只需要一位的内存，因为要储存0与1一位就足够了。</p>\n<p>程序会使用布尔值来选择下一步运行哪个代码，代码执行会在第六章（C语言控制语句：循环）与第七章（C语言控制语句：分支结构与跳跃结构）更详细地讲到，所以我们到那个时候再讨论这个问题。</p>\n<h3 id=\"3-4-5-可转移的类型：inttypes-h\"><a href=\"#3-4-5-可转移的类型：inttypes-h\" class=\"headerlink\" title=\"3.4.5 可转移的类型：inttypes.h\"></a>3.4.5 可转移的类型：<code>inttypes.h</code></h3><p>还有更多的整数类型吗？没有了，但是还有更多你可以使用与已经存在的类型的名字。你或许会认为你已经看到的整型名已经很多了，但是原本的名字确实存在问题。知晓一个变量是<code>int</code>并不会让你了解它会占用多少内存，除非你检查了系统的描述文件。为了解决这个问题，<code>int16_t</code>可以声明一个16位的有符号整型，<code>uint32_t</code>声明了一个32位的无符号类型。</p>\n<p>要让这些名字可用，你需要包含一个<code>inttypes.h</code>头文件（注意在这一版时候已经有了，但是一些编译器上还不支持这个功能），这个文件使用了<code>typedef</code>（第一次讲到是在第五章：运算符、表达式与语句），来创造新的类型名。例如，它会让<code>uint32_t</code>成为基本类型的一种别名或者同义替换，有可能是<code>unsigned int</code>也有可能是<code>unsigned long</code>。你的编译器会提供一个与你的计算机系统协调的头文件，这些新的设计被称为<em><strong>精确长度类型</strong></em>，例如，<code>int_least8_t</code>会是最小的类型，它可以承载8位的有符号整型值。如果某个系统上最小的类型是8位的。<code>int8_t</code>类型是不会被定义的，但<code>int_least8_int</code>是可以被定义的，或许会被实现为16位的整型。</p>\n<p>当然，一些编程人员会更关心速度而不是空间。对于它们，C99定义了允许快速计算的一系列类型，它们被称为<em><strong>最快最小长度类型</strong></em>，例如，<code>int_fast8_t</code>会被定义为你的系统上能够最快运算的8位有符号值。</p>\n<p>最后，对于其他的编程人员，只有系统上最大的一些整型才有用，<code>intmax_t</code>就代表了那种类型，它可以储存任何合法的有符号整型值，同样，<code>uintmax_t</code>会代表可用的最大的无符号类型。这些类型有时是比<code>long long</code>或者<code>unsigned long</code>还要长的，因为C语言实现是准许定义超过需要的类型的。</p>\n<p>C99不仅提供了这些新的而且可运输的类型名，它还有有利于输入输出的符号表示。比如说，<code>printf()</code>对于每一种类型都需要特别的修饰符，所以你要打印<code>int32</code>，你要使用的是<code>%d</code>还是<code>%ld</code>？不同的机器的标识符并不一样，但没问题，C99标准下是有字符串宏命令来打印这些值的，我们会在第四章详细讲述的。例如，<code>inttype.h</code>头文件会将字符中的<code>PRId16</code>作为对于不同对应的类型的合适的格式化符。（例如hd（<code>short</code>）或者d），例3.6是一个讲述了如何使用可运输类型与相对应的格式化符的简单的例子。</p>\n<p><img src=\"/img/Listing3.6.png\" alt=\"例3.6\"></p>\n<p>在最后的<code>printf</code>语句中，<code>PRId16</code>被<code>inttypes.h</code>对<code>hd</code>的类型定义替换了，把这一行代码变成了这个样子。</p>\n<p><img src=\"/img/turning1.png\"></p>\n<p>但是C语言需要连贯的字符串，所以引号需要是连续的，然后这一行就变成了这个样子。</p>\n<p><img src=\"/img/turning2.png\"></p>\n<p>这就是输出，注意这个例子也使用了<code>\\&quot;</code>转义字符来打印双引号。</p>\n<p><img src=\"/img/out3.png\"></p>\n<p>参考单元VI“更多的整型”提供了<code>inttypes.h</code>头文件添加的内容的完整解释，也列举了所有的格式化宏。</p>\n<p><img src=\"/img/C99sup.png\"><br>【C99支持】<br>编译器供应商已经开始以不同的速度与顺序开始实现C99的新特性了，但在这本书出来的时候，一些编译器还没有实现<code>inttypes.h</code>的头文件与特征。</p>\n<h3 id=\"3-4-6-float-double与long-double类型\"><a href=\"#3-4-6-float-double与long-double类型\" class=\"headerlink\" title=\"3.4.6 float, double与long double类型\"></a>3.4.6 <code>float, double</code>与<code>long double</code>类型</h3><p>对于大多数的软件开发项目来说，这些多种多样的整型已经能够很好地满足要求了。但是，对于财务或者面向数学的程序，我们通常会使用<em><strong>浮点数值</strong></em>，在C语言中，这些数字就对应着<code>float, double, long double</code>这几种类型，对应着FORTRAN与Pascal语言中的<code>real</code>类型。使用浮点数，正像上文所说，能够让你呈现更大范围的数字。包括十进制小数值。浮点数值的表示与<em><strong>科学计数法</strong></em>是很相似的，那是科学家用来表示非常大或者非常小的数字的一种体系。</p>\n<p>在科学计数法中，数字会被表示成十进制数乘10的整数幂，这里就是一些例子。</p>\n<p><img src=\"/img/sciennotation.png\"></p>\n<p>第一列是通常的表示方法，第二列是科学计数法的表示，第三列是质数的表示方法，或者说是<em><strong>e - notation（e表示法）</strong></em>，通常是给计算机或者计算机写的，在e的后面是10的指数，图3.7展示了更多的浮点表示法。</p>\n<p>C语言标准规定了<code>float</code>类型应该至少能够代表6位有效数字并且范围在10的-37次方到37次方。第一个要求的意思是，比如一个<code>float</code>必须要精确地表示至少前六位有效数字，就像33.333333。如果你喜欢使用较大或者较小数字（2.0e30（太阳质量）或1.6e-19（元电荷））的话，第二条要求会为你提供方便。通常，系统会使用32位类储存一个浮点类型的数字，8位用来给予指数值与符号，24位来表示非指数部分，叫尾数或者有效数字与它的符号。</p>\n<p><img src=\"/img/Figure3.7.png\" alt=\"一些浮点数表示\"></p>\n<p>C语言也有一个<code>double</code>（双（double）精度）浮点型，<code>double</code>类型与<code>float</code>类型需要的最小值是一样的，但是它把最小值的有效数字位数拓展到了10位。通常的<code>double</code>表示会使用64位而不是32位，一些系统会使用32个位来表示非指数部分，这也就增加了数字有效的有效数字位数，减少了取整错误。其他的系统会使用一些位储存更大的指数，这也就增加了可以容纳数字的范围。每一张方法都至少有13位的有效数字，不只能满足最小标准的要求。</p>\n<p>C语言还允许你使用一种浮点类型：<code>long double</code>，目的就是进一步增加<code>double</code>类型的准确度。但是C语言只保证<code>long double</code>至少与<code>double</code>类型的精度是一样的。</p>\n<h4 id=\"3-4-6-1-声明浮点变量\"><a href=\"#3-4-6-1-声明浮点变量\" class=\"headerlink\" title=\"3.4.6.1 声明浮点变量\"></a>3.4.6.1 声明浮点变量</h4><p>浮点变量与它们的整型兄弟的声明与定义的方式相似，这里是一些例子，</p>\n<p><img src=\"/img/floatdeclare.png\"></p>\n<h4 id=\"3-4-6-2-浮点常量\"><a href=\"#3-4-6-2-浮点常量\" class=\"headerlink\" title=\"3.4.6.2 浮点常量\"></a>3.4.6.2 浮点常量</h4><p>当你书写一个浮点常量时，你会有很多的选择，形式是很多，有符号的一串数字。包括十进制的小数点，或是由e或者E跟着的10的指数。这里是两个合法的声明浮点类型的例子。。</p>\n<p><img src=\"/img/twoexam.png\"></p>\n<p>你可以遗漏正号，没有关系（2E5）或者可以遗漏指数部分（19.28），但是并不能同时存在。你可以遗漏小数部分或者整数部分，但也不能全都没有（那也不剩什么了。）下面是更多的合法的浮点常量。</p>\n<p><img src=\"/img/morevalid.png\"></p>\n<p>在使用浮点常量的时候，不要乱添加空格。</p>\n<p><img src=\"/img/nospaces.png\" alt=\"错的\"></p>\n<p>一般来说，编译器会认为浮点常量都是<code>double</code>精度的，假设<code>some</code>是一个<code>float</code>类型的变量，并且你有下面的一行代码。</p>\n<p><img src=\"/img/codeline.png\"></p>\n<p><code>4.0</code>与<code>2.0</code>都是以<code>double</code>类型储存起来的，一般每一个使用64位，结果是使用浮点运算获得的，而且只有结果转换成了正常的<code>float</code>大小范围内才可以使用<code>float</code>。这也就为运算提供了准确度，但是会让你的程序变慢。</p>\n<p>C语言还是你能够超越默认方法，你可以使用f或者F后缀来让编译器把一个浮点常量储存为<code>float</code>类型，比如<code>2.3f</code>与<code>9.11E9F</code>还有<code>l</code>或者<code>L</code>后缀，可以储存为<code>long double</code>类型，例如<code>54.3l</code>，<code>4.23e4L</code>。注意的是，比起<code>l</code>，<code>L</code>更不容易被看成<code>1</code>，如果浮点数没有后缀，它的类型就是<code>double</code>。</p>\n<p>C99添加了表示浮点数的另一种方式，它是使用十六进制来表达的（0x或者0X加上十六进制数）。那样指数就是<code>p</code>或者<code>P</code>而不是<code>e</code>或者<code>E</code>了，指数是2的，也不再是10的了。这就是数字看起来的样子。</p>\n<p><img src=\"/img/lookslike.png\"></p>\n<p><code>a</code>是十进制的10，<code>.1f</code>是1&#x2F;16加上15&#x2F;256，然后<code>p10</code>是2的10次方，或者1024，用十进制表示这就是10364.0。</p>\n<p>并不是所有的编译器都已经支持C99的特性了。</p>\n<h4 id=\"3-4-6-3-打印浮点数值\"><a href=\"#3-4-6-3-打印浮点数值\" class=\"headerlink\" title=\"3.4.6.3 打印浮点数值\"></a>3.4.6.3 打印浮点数值</h4><p><code>printf()</code>函数会使用<code>%f</code>格式化符来打印<code>float</code>与<code>double</code>类型的数值，这个符号使用的是十进制小数符的表示方法，还可以使用<code>%e</code>来使用指数表示法来打印它们，如果你的系统支持C99中提供的小数的十六进制格式，你就可以使用<code>a</code>或者<code>A</code>代替<code>e</code>与<code>E</code>。<code>long double</code>类型是以<code>%Lf</code>或者<code>%Le</code>与<code>%La</code>标识符来分别使用这三种方式的。需要注意的是，<code>float</code>与<code>double</code>都可以使用<code>%f, %e, %a</code>标识符来输出。这是因为当一个<code>float</code>类型的变量作为语句传递到任何函数时，C语言会自动把它转化成<code>double</code>类型，而不是它本来的类型，比如说<code>printf()</code>函数就是一个例子。例3.7说明了这种行为。</p>\n<p><img src=\"/img/Listing3.7\" alt=\"例3.7\"></p>\n<p>这里是输出：</p>\n<p><img src=\"/img/out1.png\"></p>\n<p>这个例子说给出了默认的输出，下一章会讨论如何通过设置输出域长度与十进制的位权数，控制输出的外形。</p>\n<h4 id=\"3-4-6-4-浮点上溢与下溢\"><a href=\"#3-4-6-4-浮点上溢与下溢\" class=\"headerlink\" title=\"3.4.6.4 浮点上溢与下溢\"></a>3.4.6.4 浮点上溢与下溢</h4><p>可能最大的<code>float</code>类型就是值大概是3.4E38，然后你执行了下面的代码。</p>\n<p><img src=\"/img/toobig.png\"></p>\n<p>输出（个人测试）</p>\n<p><img src=\"/img/INF.png\"></p>\n<p>发生了什么？这就是<em><strong>溢出</strong></em>的一个例子-运算得出的结果大到无法表示。对于这种情况，这种行为之前是没有被定义的，但是现在C语言指定<code>toobig</code>是一个几乎代表<em><strong>无限</strong></em>的数字，<code>printf()</code>就会显示<code>inf</code>（infinity）（或者那个样子的一些变体）</p>\n<p>那么如果是要分辨非常小的数字呢？这是会遇到更多的情况。你可以记起<code>float</code>是以指数部分与数字部分（或尾数）来储存的。如果会有一个数字有着最小的指数与最小的值，而且仍然可以使用所有可以使用的位来表达尾数，在<code>float</code>的精度范围内表示，这就是<code>float</code>类型下的最小值。现在我们把它除2，一般地，这会减少指数，但是指数也是能够表达的最小值了。所以就要到尾数的空余位那里减了，把第一位清空，然后丢掉最后的二进制值，类比一下就是，用四位有效数字的10进制值，比如<code>0.1234E-10</code>，除10，结果就是<code>0.01234E-10</code>，你就可以得到答案了，但是你会在这个过程中丢掉一个数字。这种情况就叫做下溢，C语言对于失去完全精度的浮点数值叫做<em><strong>subnormal</strong></em>（反常值）。所以把最小的正常浮点值除2就会有反常值。如果你除了一个太大的数字，你就会失去所有的精度，最后只剩下0，C语言库现在提供了函数来检查是否你的运算产生了反常数值。</p>\n<p>这里还有另一种特别的浮点值，<code>NaN</code>。例如你给予<code>asin()</code>函数一个名字它会返回所给数值的sin值，但是sin的数值并不能大于1，所以函数对于大于1的数值是未定义的，在这种情况下函数就会返回<code>NaN</code>值，那会被<code>printf</code>打印为<code>nan</code>、<code>NaN</code>或者相似的东西。</p>\n<p><img src=\"/img/drop4in5.png\" alt=\"四舍五入问题\"><br>拿一个数字，加1，然后减去原来的数，你会得到几？肯定是1是吧？像下面的浮点运算给予了你不同的答案。</p>\n<p>输出是这个样子的：</p>\n<p><img src=\"/img/alldevices.png\"></p>\n<p>这三种奇怪的结果的原因是电脑并不能够跟踪需要多少十进制空间来进行恰当的运算，2.0e20是2后面跟着20个0，通过加1的操作，你要改变这个数字的第21位数字，要正确地执行这个操作，程序需要能够储存21位数字的类型，<code>float</code>类型数通常只是六位或者七位数带着指数这个范围（最后的一位只能是0，不能改变）所以这种尝试在劫难逃。另一方面，如果你使用2.0e4的话你就可以得到正确的结果，因为你改变的是第5位数，<code>float</code>类型的精度允许你这样做。</p>\n<h3 id=\"3-4-7-复数与虚数类型\"><a href=\"#3-4-7-复数与虚数类型\" class=\"headerlink\" title=\"3.4.7 复数与虚数类型\"></a>3.4.7 复数与虚数类型</h3><p>许多科学与工程运算会使用复数与虚数，C99为这些数提供了支持，（with some reservations），它是一个独立的实现，就像内置预处理命令一样，不需要其他类型的支持。（VCR芯片很可能并不需要复数来工作）。并且，更一般地。虚数类型是可选择的。简单来说，有三种复数类型，<code>float_Conplex，_Complex</code>与<code>long double _Complex</code>，举个例子，一个<code>float _Complex</code>变量，会包含两个<code>float</code>类型的值，一个代表复数的实部，另一个代表虚部。相思地，有三种虚数类型，它们叫做<code>float _Imaginary, double _Imaginary</code>与<code>long double _Imaginary</code>。</p>\n<p>包含<code>complex.h</code>头文件可以使你把<code>_Complex</code>与<code>_Imaginary</code>分别更换为<code>complex</code>与<code>imaginary</code>。而且还能够让你使用I来代表-1的平方根。</p>\n<h3 id=\"3-4-8-超越基本类型\"><a href=\"#3-4-8-超越基本类型\" class=\"headerlink\" title=\"3.4.8 超越基本类型\"></a>3.4.8 超越基本类型</h3><p>这样我们已经讲完了一系列基本的数据类型了，对于你们其中一些人来说，数据类型可能很多，还有一些人可能会想着还需要其他的类型，比如说字符串类型。但C语言并没有。但是还是能够很好的处理字符串，你会在第四章第一次见到字符串。</p>\n<p>C语言确实有其他的类型，他们是从基本类型中衍生出来的。这些类型包括数组、指针、结构体、联合体。即使它们都是后面章节才要讲到的，我们已经在这一章的例子中已经偷摸添加了一些关于指针的东西了。（指针会指向变量或者其他数据对象的地址，<code>scanf()</code>中使用的<code>&amp;</code>前缀就会创造一个指针，他会告诉<code>scanf()</code>在哪储存信息）</p>\n<p><img src=\"/img/basicdata.png\"><br><strong>总结：基本数据类型</strong><br>    <strong>关键字</strong>：<br>    基本的数据类型是由11个关键字组成的：<code>int, long, short, unsigned, char, float, double, signed, _Bool, _Complex, _Imaginary</code><br>    <strong>有符号整型</strong>：<br>    可以是整数值也可以是负值<br>    1. <code>int</code>- 系统给定的基本整型。C语言保证<code>int</code>至少有16位。<br>    2. <code>short</code>或<code>short int</code> - 最大的短整型不大于最大的<code>int</code>，并有可能更小，C语言保证<code>short</code>类型至少有16位。<br>    3. <code>long</code>或<code>long int</code> - 能够保存至少<code>int</code>的最大值大小的数，可以更大。C语言会确保<code>long long</code>类型至少有32位。<br>    4. <code>long long</code>或<code>long long int</code> - 这个类型至少能够保存<code>long</code>类型数的最大范围，可以更大，<code>long long</code>类型最小64位。</p>\n<p>通常，<code>long</code>类型是比<code>short</code>类型更短的，<code>int</code>会与他们之中的一个一样大。例如，以DOS系统为基础的PC系统，<code>short</code>是16位长的，而<code>int</code>是32位长的，以Windows 95为基础的系统会提供16位的<br><code>short</code>，而<code>long</code>与<code>int</code>类型是32位的。</p>\n<p>如果你喜欢的话，你可以在任何有符号类型前使用<code>signed</code>关键字，将它们有符号这个事实显露出来。<br><strong>无符号整型：</strong><br>    这些类型只能从0到整数，因为去掉了符号位，这种类型的范围得到了扩大，使用关键字<code>unsigned</code>可以把你想要的类型变为无符号类型：比如<code>unsigned int, unsigned long, unisgned short.</code>单个的<code>unsigned</code>与<code>unisgned int</code>是一样的。<br><strong>字符：</strong><br>    它们是像<code>A, &amp;</code>这样的印刷字符。在定义上，字符类型会使用1个字节的内存来代表一个字符。在以往，字符字节大多数是8位，但现在它可以是16位或者更大，可以迎合使用的基准字符集的大小。<br>        <strong>char</strong> - 这种类型的关键字，一些实现中会使用有符号的<code>signed char</code>，但其他还是使用无符号字符。C语言允许你使用<code>signed</code>或者<code>unsigned</code>来划定你想要的类型。<br><strong>布尔类型：</strong><br>    布尔值代表<code>true</code>与<code>false</code>，C语言会使用0与1代表这两个值。<br>        <strong>_ Bool</strong> - 是这种类型的关键字，它是一个无符号整型，只需要保存0与1这两个值的内存。<br><strong>实数浮点型：</strong><br>    可以正数、负数或者零。<br>        [<code>float</code>] 是系统的基本浮点类型，可以至少呈现6位精确的有效数字。<br>        [<code>double</code>] 一种（可能是）更大的浮点储存单元，允许更大的有效数字位数（至少10位，通常会更多。）而且有可能比float也有更多的指数位数。<br>        [<code>long double</code>] 一种（可能是）更大的浮点储存单元，它可能允许更多的有效数字位数，也有可能有着比<code>double</code>类型更大的指数部分。<br><strong>复数与虚数浮点型：</strong><br>    虚数类型是可以选择的，实部与虚部是基于实数类型的：<br>        <code>float _Complex</code><br>        <code>double _Complex</code><br>        <code>long double _Complex</code><br>        <code>float _Imaginary</code><br>        <code>double _Imaginary</code><br>        <code>long double _Imaginary</code></p>\n<p><img src=\"/img/Summary.png\"></p>\n<p><strong>总结：如何声明一个简单的变量</strong></p>\n<ol>\n<li>选择你需要的类型</li>\n<li>使用允许的字符为你的变量起个名字</li>\n<li>使用以下形式的声明语句<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//type-specifier variable-name;</span></span><br><span class=\"line\"><span class=\"comment\">//类型标识符 变量名;</span></span><br><span class=\"line\"><span class=\"type\">int</span> Iint1;</span><br></pre></td></tr></table></figure></li>\n<li>你可以通过用逗号把变量名隔开来声明多个变量，下面就是一个例子。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> ch, init, ans;</span><br></pre></td></tr></table></figure></li>\n<li>你可以在声明语句中对变量进行初始化：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> mass = <span class=\"number\">6.0E24</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-4-9-类型大小\"><a href=\"#3-4-9-类型大小\" class=\"headerlink\" title=\"3.4.9 类型大小\"></a>3.4.9 类型大小</h3><p>表3.3与3.4展示了一些C语言环境下的类型大小（在一些环境中，你可以选择）你的系统是什么样子的？尝试运行例3.8中的程序，你会弄明白的。</p>\n<p><img src=\"/img/Twotables.png\" alt=\"表3.3与3.4\"><br>（分别是整型与浮点型的大小。）</p>\n<p>对于每一种类型，最上面的一行是有效数字的位数，第二行是指数的范围（十进制）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//(例 3.8)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*C99为大小提供了%zd格式化符*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type int has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type char has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type long has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type double has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">double</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>C语言有一种内置的运算符，它叫<code>sizeof()</code>，它会给出以比特为单位的大小范围。（一些编译器需要<code>%lu</code>而不是<code>%u</code>来打印<code>sizeof</code>数值，这是因为C语言对于<code>sizeof</code>用来报告的真实的无符号整型是有多个范围的。C99对于这种类型给出了<code>%zd</code>标识符，如果编译器支持的话你应该使用这个。）例3.8的输出是这个样子的。</p>\n<p><img src=\"/img/sizes.png\"></p>\n<p>这个程序只发现了4种类型的范围，但是你可以简单修改一下这个程序来找寻你感兴趣的任何一种类型，要注意的是<code>char</code>类型的大小一定是1个字节，因为C语言对于<code>char</code>类型定义的就是一个字节。所以在有16位的<code>char</code>与64位的<code>double</code>的系统上，<code>sizeof</code>会报告<code>double</code>类型有4个字节的大小。你可以看看limits.h与float.h头文件来获取更多关于类型最大最小值的细节信息。（下一章会进一步阐述这两个文件。）</p>\n<p>顺便一说。看看最后一行<code>printf()</code>是如何延伸到两行的，只要不是在双引号部分或者在一个单词的中间断开，你可以这样做。</p>\n<h3 id=\"3-4-10-可用数据类型\"><a href=\"#3-4-10-可用数据类型\" class=\"headerlink\" title=\"3.4.10 可用数据类型\"></a>3.4.10 可用数据类型</h3><p>当你正在开发一个程序时，需要注意你需要的变量与它们应该使用的类型。大多数情况，你可以使用<code>int</code>或者<code>float</code>来表示一个数，用<code>char</code>来表示字符，在使用它们的函数的开头先声明好它们。为变量取一个能够暗示它们的意义的名字。初始化一个变量时，也要让变量类型与赋给的常量类型匹配。这里就是两个例子。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> apples = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> oranges = <span class=\"number\">3.0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>C语言对于类型不搭配比起Pascal是很宽容的，C语言的编译器允许你进行二次初始化，但是它们有可能会引起报错，尤其是当你触发了一个高级警告时。最好不要养成这种马马虎虎的习惯。</p>\n<p>当你使用其他类型的值给一个数字类型的值初始化时，C语言会将这个值进行转化，来让它与这个变量的类型相配。这也就意味着你有可能会失去一些数据，比如思考一下下面的初始化过程。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> cost = <span class=\"number\">12.99</span>;        <span class=\"comment\">/*使用double值来初始化int*/</span></span><br><span class=\"line\"><span class=\"type\">float</span> pi = <span class=\"number\">3.1415926536</span>; <span class=\"comment\">/*使用double值来初始化float*/</span></span><br></pre></td></tr></table></figure>\n\n<p>第一个声明语句会将12赋给<code>cost</code>变量，当把浮点数转换为整数值时，C语言简单地把小数部分丢掉（截断），而不是四舍五入。第二行的声明会失去精度，因为<code>float</code>类型是只能呈现小数点后6位精确数的。如果进行这样的初始化，编译器有可能会发出一个警告（但不是一定会发），你有可能在编译例3.1的时候遇到这个问题。</p>\n<p>许多的编程者与组织人员拥有设置变量名称的体系化传统方法，按照这种方式就可以显示出变量的类型。例如你可以使用<code>i_prefix</code>来表示这是个<code>int</code>类型变量，同理<code>us_</code>来表示<code>unsigned_short</code>，这样的话对于类型就好辨认一些。</p>\n<h3 id=\"3-4-11-参数陷阱\"><a href=\"#3-4-11-参数陷阱\" class=\"headerlink\" title=\"3.4.11 参数陷阱\"></a>3.4.11 参数陷阱</h3><p>在这一章的前半部分，有一个关于<code>printf()</code>使用的警告还是很值得重复强调的。你可能还记得传递给函数的信息在术语上称为参数。例如，<code>printf(&quot;Hello, pal.&quot;)</code>就有一个参数：<code>&quot;Hello, Pal.&quot;</code>。我们把在双引号中的一系列字符叫做<em><strong>字符串</strong></em>，我们会在第四章讨论。现在的重点是，一个字符串，即使包含着好几个单词与标点符号，也仍然被算作是一个参数。</p>\n<p>相似地，<code>scanf(&quot;%d&quot;, weight)</code>有两个参数：<code>&quot;%d&quot;</code>与<code>&amp;weight</code>。C语言会使用逗号来分开函数中的各个参数，<code>printf()</code>与<code>scanf()</code>函数还挺不寻常的，它的参数数量是不限的。例如，我们曾经在使用<code>printf()</code>时传递过一个、两个甚至是三个参数。对于一个恰当运行的程序，它需要知道参数的数量。<code>printf()</code>与<code>scanf()</code>函数会使用第一个参数来表达之后会有多少个其他的参数。这里的诀窍就是在最前的字符串中的每一个格式化符都代表着后面有一个参数，例如下面的语句就有两个格式化符：<code>%d</code>与<code>%d</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d cats ate %d cans of tuna\\n&quot;</span>, cats, cans);</span><br></pre></td></tr></table></figure>\n\n<p>这也就告诉程序后面要接收两个额外的参数，而且后面确实有两个——<code>cats</code>与<code>cans</code>。</p>\n<p>作为一个编程人员，你的责任就是确保格式化符的数量与其他的参数的数量相同，类型相同。C语言现在已经有函数原型机制了，它能够检查一次函数调用是否使用了正确的数字与正确的参数类型，但是对于<code>printf()</code>与<code>scanf()</code>是不适用的，因为它们参数的数量是可变的。当你并没有接收程序员的负担会怎样呢？举个例子，假设你写了例3.9那样的程序。</p>\n<p><img src=\"/img/Listing3.9.png\" alt=\"例3.9\"></p>\n<p>下面是从微软VisualC++ 7.1（WinXP系统）上运行的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 34603777</span><br><span class=\"line\">0 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>这是在Digital Mars（WinXP系统）上运行的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 4239476</span><br><span class=\"line\">0 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>这是在Metrowerks Codewarrior Development Studio 9（MacOSX系统）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 3327456</span><br><span class=\"line\">1075052544 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到，使用<code>%d</code>来表示一个<code>float</code>类型的值并不会将它变成最近的<code>int</code>类型值，而是直接输出垃圾值。相似地，使用<code>%f</code>来表示一个<code>int</code>类型的值也并不会将整数转化为浮点数值。参数太少或者类型不对得到的结果不同的平台也不一样。</p>\n<p>没有一个编译器对于这个代码有报错或者警告，在运行时也没有。一些编译器确实会捕捉到这种错误，但是C语言标准并没有要求它们这样做。因此，电脑就不一定能够补货到这种类型的错误，因为程序反而还能够正常地运行，你也不一定能够注意到这种错误。如果程序并没有打印正确的数值数量或者是数值，那就回去看看<code>printf()</code>的参数数量与类型是否使用正确。（顺便一说，Unix语法检测程序lint，它比Unix编译器检查得更加细致，能够对于<code>printf()</code>的参数错误进行报错）。</p>\n<h2 id=\"3-5-又一个例子：转义序列。\"><a href=\"#3-5-又一个例子：转义序列。\" class=\"headerlink\" title=\"3.5 又一个例子：转义序列。\"></a>3.5 又一个例子：转义序列。</h2><p>让我们在程序中打印更多东西吧，这一次我们会使用C语言中的一些针对于字符的特殊转义序列。尤其地，例3.10中的程序显示了回车符(<code>\\b</code>)，水平制表符(<code>\\t</code>)以及回行符（<code>\\r</code>）是怎么工作的。这些概念要追溯到电脑还在使用电传打字机的时代，它们并不总是会在现代的图形界面上正确地翻译。例如，例3.10在一些Mac系统的实现上就不能够按照想要的方式来运行。</p>\n<p><img src=\"/img/Listing3.10.png\" alt=\"例3.10\"></p>\n<h3 id=\"3-5-1-当程序运行的时候发生了什么？\"><a href=\"#3-5-1-当程序运行的时候发生了什么？\" class=\"headerlink\" title=\"3.5.1 当程序运行的时候发生了什么？\"></a>3.5.1 当程序运行的时候发生了什么？</h3><p>让我们一步步地浏览这个程序，好让它能够在ANSI实现下运行。第一个<code>printf()</code>函数语句（标<code>1</code>的那个）会发出警告信号（由<code>\\a</code>引起），然后会打印如下的句子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary:</span><br></pre></td></tr></table></figure>\n<p>因为在字符串最后没有<code>\\n</code>符号，所以光标还是在冒号后面。</p>\n<p>第二个<code>printf()</code>语句会接着第一句结束的地方开始，所以当它执行完毕时，屏幕上看起来是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$______</span></span><br></pre></td></tr></table></figure>\n\n<p>在冒号与美元符号之间有一个空格，因为第二个<code>printf()</code>的字符串是以空格开始的，7个退格符的作用是把光标向左移动7个单位。这就会将光标移到下划线字符前面，正好放在美元符号后面。通常地，退格符并不会移除前面的字符，但是有一些实现是有可能移除的，那样这个小练习就没有用了。</p>\n<p>现在，你会输入你的回答，比如说你输入了<code>2000.00</code>，那么这一行看起来就会是这个样子。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$2000</span>.00</span><br></pre></td></tr></table></figure>\n\n<p>你输入的字符将会覆盖换行符，而且当你点<code>Enter</code>键（或者<code>Return</code>）来输入你的回答时，光标就会跳转到下一行。</p>\n<p>第三个<code>printf()</code>语句是以<code>\\n\\t</code>开始的，换行符将会将光标移动到下一行的最开始，而tab键通常会将光标移动到那一行的下一个制表位（但并不是一定），也就是第9列。然后字符串的剩余部分就会被打印下来。在这个语句执行之后，屏幕上看起来就会变成这样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$2000</span>.00</span><br><span class=\"line\">\t<span class=\"variable\">$2000</span>.00 a month is <span class=\"variable\">$24000</span>.00 a year.</span><br></pre></td></tr></table></figure>\n<p>因为这个<code>printf()</code>语句并没有使用换行符，光标还是在这一句的最后位置。</p>\n<p>第四个<code>printf()</code>使用了<code>\\r</code>符号，它会将光标移动到一行的开头位置，这个语句执行之后屏幕上就成了这样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary <span class=\"variable\">$2000</span>.00</span><br><span class=\"line\">Gee!    <span class=\"variable\">$2000</span>.00 a month is <span class=\"variable\">$24000</span>.00 a year.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-2-输出清理\"><a href=\"#3-5-2-输出清理\" class=\"headerlink\" title=\"3.5.2 输出清理\"></a>3.5.2 输出清理</h3><p><code>printf()</code>函数什么时候才会将输出发送到屏幕上呢？首先，<code>printf()</code>语句会将输出发送到<em><strong>缓冲区</strong></em>，时不时地，在缓冲区的内容就会被发送到屏幕上。对于输出什么时候从缓冲区发送到屏幕上，基础的C语言规则已经很清晰了：当缓冲区被充满时，当遇到一个换行符的时候，以及当有即将发生的输出行为时。（从缓冲区发送输出信息到屏幕或者是文件上叫做<em><strong>刷新缓冲区</strong></em>），例如，最先的两个<code>printf()</code>函数语句并不会填充缓冲区，也并没有包含换行符。在那种情况下，你可以使用一个换行符来刷新缓冲区，那样的话代码就可以写成这个样子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter your desired monthly salary: \\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%f&quot;</span>, &amp;salary);</span><br></pre></td></tr></table></figure>\n\n<p> 不管即将到来的输入信息是不是会刷新缓冲区，这几行代码都是可以正常工作的。但是，它也会将光标移到下一行，防止你把数据与提示字符串写到一行。另一种方式是使用<code>fflush()</code>函数，它会在第13章，文件输入与输出中讲到。</p>\n<h1 id=\"关键概念\"><a href=\"#关键概念\" class=\"headerlink\" title=\"关键概念\"></a>关键概念</h1><p>C语言有着许多种数字类型，这也反映了C语言避免让编程人员陷入障碍的目的。比起用一种类型包管全部数字类型，C语言尽力给予编程人员对于数字的特定种类（比如说有符号与无符号），以及最能够适合特定程序的数字范围大小的选择。</p>\n<p>在一台电脑上，浮点数与整型的基础是不一样的。它们会被以不同的形式储存于处理。两个32位的内存单元能够保存相同的位形式（二进制数表示是一样的。）但是如果其中一个被理解为<code>float</code>而另一个被理解为<code>long</code>，这两个内存单元就会代表完全不同也不相关的两个数，例如在个人电脑上，如果你使用代表256.0的浮点储存单元，但是让它被理解为long，你就会得到113246208这个数。C语言确实允许你使用多种数据类型来书写表达式，但是它会自动进行类型转换，所以真正的运算只有一种数据类型。</p>\n<p>在电脑内存中，字符是以数字编码的形式呈现的，ASCII码是美国最常用的数字代码标准，但是C语言也支持其他代码集。字符常量是电脑上数字编码的符号表示-它是由单引号框定的单字符，比如<code>&#39;A&#39;</code>。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>C语言有各种各样的数据类型，基本的数据类型可以分为两类：整型与浮点型，对于整型，两个最鲜明的区分就是分配给不同类型的储存空间，还有是否有符号。最小的整型是<code>char</code>，它可以有符号，也可以没有，这取决于不同的C语言实现，你可以根据自己的需求来选择<code>signed char</code>与<code>unsigned char</code>，但是那通常是在你使用范围比较小的数字的情况下，而不是使用字符编码时。其他的整型还有<code>short, int, long, long long</code>等。C语言确保了所有的类型都至少会与它前面的类型一样大，它们都是有符号类型，但你还是可以加上<code>unsigned</code>修饰符来创造相应的无符号类型：<code>unsigned short, unsigned int, unsigned long, unsigned long long</code>或者你也可以使用<code>signed</code>修饰符来明显地写出它是有符号的。最后，还有<code>_Bool</code>类型，一种无符号类型，它只能保存0与1，分别代表着<code>false</code>与<code>true</code>。</p>\n<p>浮点类型有三种，分别是<code>float, double</code>与在ANSI C中的<code>long double</code>，每一个类型也是至少比它前面的那个类型一样大的。要是想的话，你也可以用<code>_Complex</code>与<code>_Imaginary</code>与浮点类型关键字连用，来使用虚数与复数类型。例如，有<code>double _Complex</code>与<code>float _Imaginary</code>类型。</p>\n<p>整型可以被以十进制、八进制与十六进制的形式被输出，开头写0可以使一个数变为八进制数，写0x或者0X可以变为十六进制数。例如<code>32, 040</code>还有<code>0x20</code>就分别是十进制、八进制与十六进制的数字，但是它们代表的都是同一个值。另外使用<code>l</code>或者<code>L</code>符号可以声明一个<code>long</code>类型的常量值，<code>ll</code>或者<code>LL</code>可以声明一个<code>long long</code>类型的值。</p>\n<p>字符常量是由单引号及其中的字符代表的：比如<code>&#39;Q&#39;, &#39;8&#39;</code>。字符还包括转义序列，比如<code>\\n</code>，它们代表着不会被打印出来的特定字符，你可以使用类似<code>\\007</code>的形式来使用ASCII码的形式来代表字符。</p>\n<p>浮点数可以以十进制小数点的形式来表示，也可以以指数符号的形式来表示，例如<code>7.38E10</code>。</p>\n<p><code>printf()</code>函数能够让你利用格式化转换符，以最简洁的方式打印各种各样的数值，它由一个百分号符<code>%</code>与一个表示类型的字符组成，比如<code>%d</code>或者<code>%f</code>。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><p>你会在附录A中找到这些问题的答案。<br>1.你对于这几种数据你会使用哪种数据类型？</p>\n<blockquote>\n<p>1.东斯普尔顿的人数 – int类型（16位即可）<br>2.在DVD上电影的价格–float类型<br>3.这一章最常见的字母–char类型<br>4.一个字母在这一章中出现的次数。– int类型（。）</p>\n</blockquote>\n<p>2.为什么有时候你会使用<code>long</code>而不是<code>int</code>。</p>\n<blockquote>\n<p>有些时候表示的范围会更大，但是并没有超过<code>long</code>，使用<code>long</code>类型可以保证数据因为存放不下而溢出，从而导致不同机型显示不一而且不会报错的问题。</p>\n</blockquote>\n<p>3.如果你想要得到一个32位有符号的整型，你会使用哪种可转移的类型，请写出所有类型，并说说每一种的合理性。</p>\n<blockquote>\n<p>1.在<code>&lt;inttypes.h&gt;</code>中的<code>int32_t</code>类型<br>2.基本类型中的<code>long</code>或者<code>int</code>类型（对于<code>int</code>来说不一定）</p>\n</blockquote>\n<p><code>long</code>合理，因为关键字更简洁容易记，格式化符也不容易弄错<br>（<code>int32_t</code>为<code>PRId32</code>,<code>long</code>为<code>%ld</code>）<br><code>int32_t</code>能够让编程人员选择适合的大小范围来进行编程，便于大小的记忆。</p>\n<p>4.确认每种类型与它的含义。</p>\n<blockquote>\n<p>1.<code>&#39;\\b&#39;</code>回车符（转义序列）<br>2.<code>1066</code>一个整数，一千零六十六<br>3.<code>99.44</code> 一个两位小数，九十九点四四<br>4.<code>0XAA</code>，十六进制数，10 * 16 + 10 &#x3D; 170.<br>5.<code>2.0e30</code>，指数形式的小数，2 * 10^30(10的30次方)</p>\n</blockquote>\n<p>5.Dottie Cawm 编造了这个满是错误的程序，请找到这个程序中问题。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">float</span> g; h;</span><br><span class=\"line\">\t<span class=\"type\">float</span> tax, rate;</span><br><span class=\"line\"></span><br><span class=\"line\">\tg = e21;</span><br><span class=\"line\">\ttax = rate * g;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（实在是太明显了啊。。）<br>1.include前面忘了#<br>2.main。。。（int main(void)，或者void main()）<br>3.g后面用了分号来分隔，相当于h未规定类型。<br>4.应该是1e21，e21啥也不是。<br>5.tax类型与g的类型大小都太小了，应该用double，float表示不了精确的21位数，或者直接使用long long也可以，反正是整型。<br>6.忘了写<code>return 0;</code></p>\n<p>6.确定下面几种常量数据的类型，与打印他们所使用的格式化标识符。<br><img src=\"/img/Identifytypes1.png\"></p>\n<blockquote>\n<p>·····12为整型，（int（作为常量，默认为int）），输出可以使用<code>%d</code>,<code>%hd</code>,<code>%u</code>,<code>%LLu</code>,<code>%lu</code>。<br>·····<code>0X3</code>，十六进制数，<code>%X</code><br>·····<code>&#39;C&#39;</code>，字符常量，<code>%c</code><br>·····<code>2.34E07</code>,后面看成八进制，但仍然是7，小数的指数形式，用<code>%f</code>或者<code>%lf</code>都可以。<br>·····<code>\\040</code>,十进制的040为32，此即<code>32</code>,即<code>&#39; &#39;</code>（空格字符）<br>·····<code>7.0</code>，一位小数，可以使用<code>%f</code>或者<code>%lf</code><br>·····<code>6L</code>,为<code>long</code>形式整型，可以使用<code>%ld</code>输出。<br>·····<code>6.0f</code>,为<code>float</code>形式小数，可以使用<code>%f</code>。</p>\n</blockquote>\n<p>7.同上<br><img src=\"/img/Identifytypes2.png\"></p>\n<blockquote>\n<p>·····012，八进制数，十进制下为10，可以用<code>%o</code>输出。<br>·····2.9e05L，<code>long double</code>，2.9 * 10^5.<br>·····<code>&#39;s&#39;</code>,字符常量，用<code>%c</code>.<br>·····<code>100000</code>,<code>32</code>位的<code>int</code>，<code>%ld</code>，或者<code>%lu</code>或者更大的类型<code>long long</code>。<br>·····<code>&#39;\\n&#39;</code>,转义序列换行符，直接打印即可。<br>·····20.0f，<code>float</code>类型，<code>%f</code>。<br>·····0x44，十六进制数，68.用<code>%x</code>输出。</p>\n</blockquote>\n<p>8.假设你的程序是以这几行声明语句开头的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> imate = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> shot = <span class=\"number\">53456</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> grade = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"built_in\">log</span> = <span class=\"number\">2.71828</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在下面的<code>printf()</code>函数语句中填入适当的格式化符。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The odds against the %__ were %__ to 1.\\n&quot;</span>,imate, shot);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A score of %__ is not an %__ grade.\\n&quot;</span>, <span class=\"built_in\">log</span>, grade);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The odds against the %d were %ld to 1.\\n&quot;</span>,imate, shot);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A score of %f is not an %c grade.\\n&quot;</span>, <span class=\"built_in\">log</span>, grade);</span><br></pre></td></tr></table></figure>\n\n<p>9.假设<code>ch</code>是一个字符变量，展示一下如何将回行符通过转义序列、十进制数值与八进制及十六进制字符常量的形式赋给ch的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> ch;</span><br><span class=\"line\"></span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\r&#x27;</span>;</span><br><span class=\"line\">ch = <span class=\"number\">13</span>;</span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\0x0D&#x27;</span>;</span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\015&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>10.纠正这个愚蠢的程序。<br><img src=\"/img/Perfect.png\" alt=\"&quot;Perfect...&quot;\"><br>（在C语言中<code>\\</code>表示除）</p>\n<p>1.未指定形式参数的变量名。（main(int a)）<br>2.注释符号没用对（要么<code>//</code>,要么<code>/**/</code>.)<br>3.声明变量使用关键字。（<code>int cows, legs;</code>）<br>4.<code>printf()</code>字符串缺少了右边的引号。<br>5.<code>scanf()</code>少了取地址符<code>&amp;</code>，而且legs的输入形式写错了，为<code>&#39;%d&#39;</code><br>6.<code>printf()</code>格式化符为<code>%d</code>。</p>\n<p>11.说说下面的转义序列代表啥意思？</p>\n<ol>\n<li><code>\\n</code>,换行符，10.</li>\n<li><code>\\\\</code>,相当于<code>\\</code>.</li>\n<li><code>\\&quot;</code>,相当于<code>&quot;</code>.</li>\n<li><code>\\t</code>,相当于tab键。</li>\n</ol>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>1.通过实验方式，弄清你的电脑是如何处理整型上溢、浮点数上溢以及浮点下溢的，也就是写一个拥有数据溢出问题的程序。</p>\n<p><img src=\"/img/overnunder.png\"></p>\n<p>这个肯定会溢出，可以修改程序看看会发生什么。<br>我观察到的是：整型溢出会直接跳到它的最小范围开始加<br>比如2146483650 &#x3D; - 2147483646 </p>\n<p>浮点上溢，会失去精度，但是只要未超过位数仍然可以表示，如果把指数调到40就会出INF（infinity），具体可以看上文对于浮点溢出的讲解。。</p>\n<p>浮点下溢，会直接被看成0。</p>\n<p>2.写一个能够根据你输入的ASCII码值返回对应字符的程序。</p>\n<p><img src=\"/img/ASCIIout.png\"></p>\n<p>包含了转义序列，使用了<code>switch</code>与<code>if</code>嵌套的结构。</p>\n<p>3.写一个能够发出警报声，并且能够打印以下句子的程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Startled by the sudden sound, Sally shouted, <span class=\"string\">&quot;By the Great Pumpkin,</span></span><br><span class=\"line\"><span class=\"string\">what was that!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重点有两个，一个是掌握好换行，可以用一个printf加上一个换行符实现，也可以用两个。<br>另一个是如何在字符串内输出”，这也是我们周赛第一道题的考点</p>\n<p><img src=\"/img/alarming.png\"></p>\n<p>4.书写一个能够读入浮点数据，然后将它先以十进制小数的形式输出，再以指数形式输出。输出类似下方，但指数形式的实数部分是视系统而变的。</p>\n<p><img src=\"/img/decimalandexp.png\"></p>\n<p>5.一年大概有3.156 * 10^7秒，写一个要求你输入以年计数的年龄并将它转化为秒数的程序。</p>\n<p><img src=\"/img/lifesecond.png\" alt=\"My life...\"></p>\n<p>6.一分子水大概是3.0 * 10^23克， 一夸脱水是950克。写一个要求你输入夸脱单位的水量，返回水的分子数的程序。</p>\n<p><img src=\"/img/quartmol.png\" alt=\"Too much...\"></p>\n<p>7.一英寸是2.54厘米， 写一个要求你输入英寸高度，返回厘米高度的程序。你要是想的话也可以反过来转换。</p>\n<p>1.inch to cm<br><img src=\"/img/inchtocm.png\"></p>\n<p>2.cm to inch<br><img src=\"/img/cmtoinch.png\"></p>\n<pre><code>End...\n</code></pre>"},{"title":"如何使用结构体","date":"2024-01-04T02:34:40.000Z","_content":"\n 结构体，是构造类型的一种，也就是由基本类型构造的类型。\n 构造类型：结构体struct、联合体union、枚举类型enum。\n\n## 1. 定性：\n新的“数据类型”。\n\n## 2. 意义：\n有些信息的组成数据并不止一种，\n囊括我们想要描述的大多数数据。(复合类型信息)。\n数据形成一体。\n\n## 3. 定义方式：\n### 1. 类型定义（注意最后的分号）\n```C\nstruct 结构体类型名\n{\n\t类型名 成员名;\n};//别忘了分号\n\n//最近学到的\ntypedef struct 结构体类型名\n{\n\t类型名 成员名;\n} 你想要的简化名;\n\ntypedef 类型名 简化名;\n//typedef就是为了给类型起别名用的\n```\n\n内部的单个变量类型叫做**成员**。 \n**主要创建在主函数外部**。\n\n### 2. 变量定义\n```C\n//变量定义方式\nstruct 结构体类型名 变量名;\n\n//定义并赋初值（初始化）\nstruct 结构体类型名 变量名 = {常量1, 常量2...};\n//常量的顺序对应定义类型的顺序。\n```\n\n## 4. 数据存储与读取\n使用索引对应成员的运算符： ->(指针，左边是地址，右边是成员名) / .（左边，索引成员名）\n其他一样\n\n > 额外提醒: 数组不能用=，结构体可以。--数组是类型不是地址。\n \n## 参考-典型例子\n\n```C\n#include <stdio.h>\n#include <string.h>\n// 结构体。\n//构造类型：结构体struct、联合体union、枚举类型enum。\nstruct student\n{\n\tchar name[50];\n\tint age;\n};typedef struct student stud;\n//typedef 给类型起别名。\n//typedef 已经存在的名 新类型名;\n\nint main(void)\n{\n\tint n, minage;\n\tstud stu1;\n\tscanf(\"%d\", &n);\n\tgetchar();\n\tchar minname[55] = {0};\n\n\tfor(int i = 0; i < n;i++)\n\t{\n\t\tscanf(\"%s %d\",stu1.name, &stu1.age);\n\t\tif(i == 0)\n\t\t{\n\t\t\tstrcpy(minname, stu1.name);\n\t\t\tminage = stu1.age;\n\t\t}\n\t\telse if(stu1.age < minage)\n\t\t{\n\t\t\tminage = stu1.age;\n\t\t\tstrcpy(minname, stu1.name);\n\t\t}\n\t}\n\tprintf(\"%s\", minname);\n\treturn 0;\n}\n```\n\n一般在一个东西的多个方面给予数据，用这些数据来排序比大小等等。\n","source":"_posts/如何使用结构体.md","raw":"---\ntitle: 如何使用结构体\ndate: 2024-01-04 10:34:40\ntags: C语言学习\n---\n\n 结构体，是构造类型的一种，也就是由基本类型构造的类型。\n 构造类型：结构体struct、联合体union、枚举类型enum。\n\n## 1. 定性：\n新的“数据类型”。\n\n## 2. 意义：\n有些信息的组成数据并不止一种，\n囊括我们想要描述的大多数数据。(复合类型信息)。\n数据形成一体。\n\n## 3. 定义方式：\n### 1. 类型定义（注意最后的分号）\n```C\nstruct 结构体类型名\n{\n\t类型名 成员名;\n};//别忘了分号\n\n//最近学到的\ntypedef struct 结构体类型名\n{\n\t类型名 成员名;\n} 你想要的简化名;\n\ntypedef 类型名 简化名;\n//typedef就是为了给类型起别名用的\n```\n\n内部的单个变量类型叫做**成员**。 \n**主要创建在主函数外部**。\n\n### 2. 变量定义\n```C\n//变量定义方式\nstruct 结构体类型名 变量名;\n\n//定义并赋初值（初始化）\nstruct 结构体类型名 变量名 = {常量1, 常量2...};\n//常量的顺序对应定义类型的顺序。\n```\n\n## 4. 数据存储与读取\n使用索引对应成员的运算符： ->(指针，左边是地址，右边是成员名) / .（左边，索引成员名）\n其他一样\n\n > 额外提醒: 数组不能用=，结构体可以。--数组是类型不是地址。\n \n## 参考-典型例子\n\n```C\n#include <stdio.h>\n#include <string.h>\n// 结构体。\n//构造类型：结构体struct、联合体union、枚举类型enum。\nstruct student\n{\n\tchar name[50];\n\tint age;\n};typedef struct student stud;\n//typedef 给类型起别名。\n//typedef 已经存在的名 新类型名;\n\nint main(void)\n{\n\tint n, minage;\n\tstud stu1;\n\tscanf(\"%d\", &n);\n\tgetchar();\n\tchar minname[55] = {0};\n\n\tfor(int i = 0; i < n;i++)\n\t{\n\t\tscanf(\"%s %d\",stu1.name, &stu1.age);\n\t\tif(i == 0)\n\t\t{\n\t\t\tstrcpy(minname, stu1.name);\n\t\t\tminage = stu1.age;\n\t\t}\n\t\telse if(stu1.age < minage)\n\t\t{\n\t\t\tminage = stu1.age;\n\t\t\tstrcpy(minname, stu1.name);\n\t\t}\n\t}\n\tprintf(\"%s\", minname);\n\treturn 0;\n}\n```\n\n一般在一个东西的多个方面给予数据，用这些数据来排序比大小等等。\n","slug":"如何使用结构体","published":1,"updated":"2024-01-04T02:47:44.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775ny0000szkue5nuv4vni","content":"<p> 结构体，是构造类型的一种，也就是由基本类型构造的类型。<br> 构造类型：结构体struct、联合体union、枚举类型enum。</p>\n<h2 id=\"1-定性：\"><a href=\"#1-定性：\" class=\"headerlink\" title=\"1. 定性：\"></a>1. 定性：</h2><p>新的“数据类型”。</p>\n<h2 id=\"2-意义：\"><a href=\"#2-意义：\" class=\"headerlink\" title=\"2. 意义：\"></a>2. 意义：</h2><p>有些信息的组成数据并不止一种，<br>囊括我们想要描述的大多数数据。(复合类型信息)。<br>数据形成一体。</p>\n<h2 id=\"3-定义方式：\"><a href=\"#3-定义方式：\" class=\"headerlink\" title=\"3. 定义方式：\"></a>3. 定义方式：</h2><h3 id=\"1-类型定义（注意最后的分号）\"><a href=\"#1-类型定义（注意最后的分号）\" class=\"headerlink\" title=\"1. 类型定义（注意最后的分号）\"></a>1. 类型定义（注意最后的分号）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t类型名 成员名;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//别忘了分号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最近学到的</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t类型名 成员名;</span><br><span class=\"line\">&#125; 你想要的简化名;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> 类型名 简化名;</span><br><span class=\"line\"><span class=\"comment\">//typedef就是为了给类型起别名用的</span></span><br></pre></td></tr></table></figure>\n\n<p>内部的单个变量类型叫做<strong>成员</strong>。<br><strong>主要创建在主函数外部</strong>。</p>\n<h3 id=\"2-变量定义\"><a href=\"#2-变量定义\" class=\"headerlink\" title=\"2. 变量定义\"></a>2. 变量定义</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//变量定义方式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名 变量名;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义并赋初值（初始化）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名 变量名 =</span> &#123;常量<span class=\"number\">1</span>, 常量<span class=\"number\">2.</span>..&#125;;</span><br><span class=\"line\"><span class=\"comment\">//常量的顺序对应定义类型的顺序。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-数据存储与读取\"><a href=\"#4-数据存储与读取\" class=\"headerlink\" title=\"4. 数据存储与读取\"></a>4. 数据存储与读取</h2><p>使用索引对应成员的运算符： -&gt;(指针，左边是地址，右边是成员名) &#x2F; .（左边，索引成员名）<br>其他一样</p>\n<blockquote>\n<p>额外提醒: 数组不能用&#x3D;，结构体可以。–数组是类型不是地址。</p>\n</blockquote>\n<h2 id=\"参考-典型例子\"><a href=\"#参考-典型例子\" class=\"headerlink\" title=\"参考-典型例子\"></a>参考-典型例子</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 结构体。</span></span><br><span class=\"line\"><span class=\"comment\">//构造类型：结构体struct、联合体union、枚举类型enum。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> name[<span class=\"number\">50</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">stud</span>;</span></span><br><span class=\"line\"><span class=\"comment\">//typedef 给类型起别名。</span></span><br><span class=\"line\"><span class=\"comment\">//typedef 已经存在的名 新类型名;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, minage;</span><br><span class=\"line\">\tstud stu1;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"type\">char</span> minname[<span class=\"number\">55</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s %d&quot;</span>,stu1.name, &amp;stu1.age);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">strcpy</span>(minname, stu1.name);</span><br><span class=\"line\">\t\t\tminage = stu1.age;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stu1.age &lt; minage)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tminage = stu1.age;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">strcpy</span>(minname, stu1.name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, minname);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般在一个东西的多个方面给予数据，用这些数据来排序比大小等等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p> 结构体，是构造类型的一种，也就是由基本类型构造的类型。<br> 构造类型：结构体struct、联合体union、枚举类型enum。</p>\n<h2 id=\"1-定性：\"><a href=\"#1-定性：\" class=\"headerlink\" title=\"1. 定性：\"></a>1. 定性：</h2><p>新的“数据类型”。</p>\n<h2 id=\"2-意义：\"><a href=\"#2-意义：\" class=\"headerlink\" title=\"2. 意义：\"></a>2. 意义：</h2><p>有些信息的组成数据并不止一种，<br>囊括我们想要描述的大多数数据。(复合类型信息)。<br>数据形成一体。</p>\n<h2 id=\"3-定义方式：\"><a href=\"#3-定义方式：\" class=\"headerlink\" title=\"3. 定义方式：\"></a>3. 定义方式：</h2><h3 id=\"1-类型定义（注意最后的分号）\"><a href=\"#1-类型定义（注意最后的分号）\" class=\"headerlink\" title=\"1. 类型定义（注意最后的分号）\"></a>1. 类型定义（注意最后的分号）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t类型名 成员名;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//别忘了分号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最近学到的</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t类型名 成员名;</span><br><span class=\"line\">&#125; 你想要的简化名;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> 类型名 简化名;</span><br><span class=\"line\"><span class=\"comment\">//typedef就是为了给类型起别名用的</span></span><br></pre></td></tr></table></figure>\n\n<p>内部的单个变量类型叫做<strong>成员</strong>。<br><strong>主要创建在主函数外部</strong>。</p>\n<h3 id=\"2-变量定义\"><a href=\"#2-变量定义\" class=\"headerlink\" title=\"2. 变量定义\"></a>2. 变量定义</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//变量定义方式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名 变量名;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义并赋初值（初始化）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名 变量名 =</span> &#123;常量<span class=\"number\">1</span>, 常量<span class=\"number\">2.</span>..&#125;;</span><br><span class=\"line\"><span class=\"comment\">//常量的顺序对应定义类型的顺序。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-数据存储与读取\"><a href=\"#4-数据存储与读取\" class=\"headerlink\" title=\"4. 数据存储与读取\"></a>4. 数据存储与读取</h2><p>使用索引对应成员的运算符： -&gt;(指针，左边是地址，右边是成员名) &#x2F; .（左边，索引成员名）<br>其他一样</p>\n<blockquote>\n<p>额外提醒: 数组不能用&#x3D;，结构体可以。–数组是类型不是地址。</p>\n</blockquote>\n<h2 id=\"参考-典型例子\"><a href=\"#参考-典型例子\" class=\"headerlink\" title=\"参考-典型例子\"></a>参考-典型例子</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 结构体。</span></span><br><span class=\"line\"><span class=\"comment\">//构造类型：结构体struct、联合体union、枚举类型enum。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> name[<span class=\"number\">50</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">stud</span>;</span></span><br><span class=\"line\"><span class=\"comment\">//typedef 给类型起别名。</span></span><br><span class=\"line\"><span class=\"comment\">//typedef 已经存在的名 新类型名;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, minage;</span><br><span class=\"line\">\tstud stu1;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"type\">char</span> minname[<span class=\"number\">55</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s %d&quot;</span>,stu1.name, &amp;stu1.age);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">strcpy</span>(minname, stu1.name);</span><br><span class=\"line\">\t\t\tminage = stu1.age;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stu1.age &lt; minage)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tminage = stu1.age;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">strcpy</span>(minname, stu1.name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, minname);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般在一个东西的多个方面给予数据，用这些数据来排序比大小等等。</p>\n"},{"title":"字符串函数","date":"2024-01-04T02:34:07.000Z","_content":"\n下为老师上课时讲过的字符串函数。\n\n# >>字符串函数\n> #include <string.h> 这是一个前提\n\n1. `strlen()`,求字符串长度。\n与`sizeof`有区别，它不算`'\\0'`这个字符。\n\n2. `strcpy(s1, s2)`，将s2拷贝到s1 (%% s1 = s2 %%) 。\n用赋值运算符`=`不行，编译错误，数组名为地址常量，不能被赋值。\n挨个覆盖直到结束符，然后后面的依然保存，\n但因为结束符的存在而，提早输出。\n\n3. `strcmp(s1, s2)` 字符串比较\n\n\t逐字符比较，\n\t`s1 < s2`就返回`-1`。\n\t`s1 > s2`返回`1`\n\t相等返回`0`.\n>一般用来判断字符串是否相等。\n\n4. `strrev(s1)` 字符串反置\n\t会修改原字符串。\n\t我们的OJ不支持，PTA支持（有待商榷）。\n\t自己写。\n\n5. `strcat(s1, s2)` 字符串连接，把s2连到s1后。\n\n>两个参数总是第一个被修改。\n\n6. `strchr(s1, ch)` 查找第一次出现的位置。\n位置是指针。通过寻址符。\n没有的话，返回地址为空NULL。\n减去首元素地址（数组名）就可以得到下标。\n`strchr(s1, ch) - s1`\n\n7. `strstr(s1, s2)` 在一个字符串中找另一个字符串。\n\n> 在s1中找s2（s2为字符串）\n\t找到返回地址，找不到返回NULL。\n\t则显示字符串第一次出现的第一个字符地址，\n\t减去d，则是它的下标。","source":"_posts/字符串函数.md","raw":"---\ntitle: 字符串函数\ndate: 2024-01-04 10:34:07\ntags: C语言学习\n---\n\n下为老师上课时讲过的字符串函数。\n\n# >>字符串函数\n> #include <string.h> 这是一个前提\n\n1. `strlen()`,求字符串长度。\n与`sizeof`有区别，它不算`'\\0'`这个字符。\n\n2. `strcpy(s1, s2)`，将s2拷贝到s1 (%% s1 = s2 %%) 。\n用赋值运算符`=`不行，编译错误，数组名为地址常量，不能被赋值。\n挨个覆盖直到结束符，然后后面的依然保存，\n但因为结束符的存在而，提早输出。\n\n3. `strcmp(s1, s2)` 字符串比较\n\n\t逐字符比较，\n\t`s1 < s2`就返回`-1`。\n\t`s1 > s2`返回`1`\n\t相等返回`0`.\n>一般用来判断字符串是否相等。\n\n4. `strrev(s1)` 字符串反置\n\t会修改原字符串。\n\t我们的OJ不支持，PTA支持（有待商榷）。\n\t自己写。\n\n5. `strcat(s1, s2)` 字符串连接，把s2连到s1后。\n\n>两个参数总是第一个被修改。\n\n6. `strchr(s1, ch)` 查找第一次出现的位置。\n位置是指针。通过寻址符。\n没有的话，返回地址为空NULL。\n减去首元素地址（数组名）就可以得到下标。\n`strchr(s1, ch) - s1`\n\n7. `strstr(s1, s2)` 在一个字符串中找另一个字符串。\n\n> 在s1中找s2（s2为字符串）\n\t找到返回地址，找不到返回NULL。\n\t则显示字符串第一次出现的第一个字符地址，\n\t减去d，则是它的下标。","slug":"字符串函数","published":1,"updated":"2024-01-04T02:37:42.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775ny2000wzkuedi4325ty","content":"<p>下为老师上课时讲过的字符串函数。</p>\n<h1 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"&gt;&gt;字符串函数\"></a>&gt;&gt;字符串函数</h1><blockquote>\n<p>#include &lt;string.h&gt; 这是一个前提</p>\n</blockquote>\n<ol>\n<li><p><code>strlen()</code>,求字符串长度。<br>与<code>sizeof</code>有区别，它不算<code>&#39;\\0&#39;</code>这个字符。</p>\n</li>\n<li><p><code>strcpy(s1, s2)</code>，将s2拷贝到s1 (%% s1 &#x3D; s2 %%) 。<br>用赋值运算符<code>=</code>不行，编译错误，数组名为地址常量，不能被赋值。<br>挨个覆盖直到结束符，然后后面的依然保存，<br>但因为结束符的存在而，提早输出。</p>\n</li>\n<li><p><code>strcmp(s1, s2)</code> 字符串比较</p>\n<p> 逐字符比较，<br> <code>s1 &lt; s2</code>就返回<code>-1</code>。<br> <code>s1 &gt; s2</code>返回<code>1</code><br> 相等返回<code>0</code>.</p>\n</li>\n</ol>\n<blockquote>\n<p>一般用来判断字符串是否相等。</p>\n</blockquote>\n<ol start=\"4\">\n<li><p><code>strrev(s1)</code> 字符串反置<br> 会修改原字符串。<br> 我们的OJ不支持，PTA支持（有待商榷）。<br> 自己写。</p>\n</li>\n<li><p><code>strcat(s1, s2)</code> 字符串连接，把s2连到s1后。</p>\n</li>\n</ol>\n<blockquote>\n<p>两个参数总是第一个被修改。</p>\n</blockquote>\n<ol start=\"6\">\n<li><p><code>strchr(s1, ch)</code> 查找第一次出现的位置。<br>位置是指针。通过寻址符。<br>没有的话，返回地址为空NULL。<br>减去首元素地址（数组名）就可以得到下标。<br><code>strchr(s1, ch) - s1</code></p>\n</li>\n<li><p><code>strstr(s1, s2)</code> 在一个字符串中找另一个字符串。</p>\n</li>\n</ol>\n<blockquote>\n<p>在s1中找s2（s2为字符串）<br>    找到返回地址，找不到返回NULL。<br>    则显示字符串第一次出现的第一个字符地址，<br>    减去d，则是它的下标。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>下为老师上课时讲过的字符串函数。</p>\n<h1 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"&gt;&gt;字符串函数\"></a>&gt;&gt;字符串函数</h1><blockquote>\n<p>#include &lt;string.h&gt; 这是一个前提</p>\n</blockquote>\n<ol>\n<li><p><code>strlen()</code>,求字符串长度。<br>与<code>sizeof</code>有区别，它不算<code>&#39;\\0&#39;</code>这个字符。</p>\n</li>\n<li><p><code>strcpy(s1, s2)</code>，将s2拷贝到s1 (%% s1 &#x3D; s2 %%) 。<br>用赋值运算符<code>=</code>不行，编译错误，数组名为地址常量，不能被赋值。<br>挨个覆盖直到结束符，然后后面的依然保存，<br>但因为结束符的存在而，提早输出。</p>\n</li>\n<li><p><code>strcmp(s1, s2)</code> 字符串比较</p>\n<p> 逐字符比较，<br> <code>s1 &lt; s2</code>就返回<code>-1</code>。<br> <code>s1 &gt; s2</code>返回<code>1</code><br> 相等返回<code>0</code>.</p>\n</li>\n</ol>\n<blockquote>\n<p>一般用来判断字符串是否相等。</p>\n</blockquote>\n<ol start=\"4\">\n<li><p><code>strrev(s1)</code> 字符串反置<br> 会修改原字符串。<br> 我们的OJ不支持，PTA支持（有待商榷）。<br> 自己写。</p>\n</li>\n<li><p><code>strcat(s1, s2)</code> 字符串连接，把s2连到s1后。</p>\n</li>\n</ol>\n<blockquote>\n<p>两个参数总是第一个被修改。</p>\n</blockquote>\n<ol start=\"6\">\n<li><p><code>strchr(s1, ch)</code> 查找第一次出现的位置。<br>位置是指针。通过寻址符。<br>没有的话，返回地址为空NULL。<br>减去首元素地址（数组名）就可以得到下标。<br><code>strchr(s1, ch) - s1</code></p>\n</li>\n<li><p><code>strstr(s1, s2)</code> 在一个字符串中找另一个字符串。</p>\n</li>\n</ol>\n<blockquote>\n<p>在s1中找s2（s2为字符串）<br>    找到返回地址，找不到返回NULL。<br>    则显示字符串第一次出现的第一个字符地址，<br>    减去d，则是它的下标。</p>\n</blockquote>\n"},{"title":"小思考","date":"2024-05-20T03:39:44.000Z","_content":"\n最近的表达欲直线上升了，可能是因为在读戴爷爷（戴建业老师）的书，作为一名语文老师，他是能够让我体会到古诗中的韵味和古人那种高尚的人生哲学的人，也给我的生活增添了不少的鼓励与趣味。这两天有幸接触到了他的《你听懂了没有》和《我的个天》这两本书，严肃的诗文分析我并不是很喜欢，但是散文能够传达生活的独特感受，一直是我的最爱，它的B站视频也十分有韵味。\n\n<!--more-->\n\n这两天，也因为自己做到了一些能够让自己骄傲的事情，心态好转了不少，没有了像过去那样的自卑，更多的是理性的思考和下一步的行动上的考虑，在很多情况下，我承认自己的行动力确实不足，因为源于习惯的对不确定性的反感，还是更喜欢稳妥能给自己带来好处的行为方式，一如现在的我确实十分的内向，因为人际关系总会因为自己的几句话而发生微妙的变化，微信聊天中的体会让我定义自己为一个聊天太过认真的人，所以我总是倾向于独自思考，思考自己的问题。这篇文章就是我对一些人生问题的思考，或许它们定义了我自己，或许它们是我的某些生活方式的写照，能够把我给描出来。\n\n这篇文章包含若干小文章，有时长，有时短，但一定是经过了思考，欢迎在评论区进行交流。\n作为学生，就从普遍日程上开始写起吧，\n## 日程篇 (学习、作息、生活)\n\n### 1. 为什么学习  \n\n我发觉到自己有这么一种倾向，追求个性，追求变化。很多时候想要产生自己的想法，毕竟很多时候社会都传播着热爱与梦想对于人的价值，但是也总是迫于内卷和对自己的不满，开始尝试（或者说是服从）人家符合早睡早起、好好学习的高中式作息。在高中的时候，我们通常会这样给自己的生活定义——“三点一线”，也就是家、食堂与学校。我确实对这种生活感到十分地厌倦，不仅是每天重复的生活，而且似乎我们生活的目标就只能盯着学习。现在进入大学，我们早已不在意家长口中传播的“上大学就轻松了”，因为我们已经接触到了现实，但现在，或许学习（传统意义上的上课与写作业）不再是我们生活的唯一目标了，可我们是否应该像高中那时候一样重视呢？我的观点是这样：传统的学习可以给生活带来些许成就感，仅此而已，广义的学习是生活的开拓，所以视其对你重要性而定喽。\n\n我知道我们确实通过之前的学习收获了很多，肯定有我没体会到的东西。是这样，但是你不能否认现在的大学课程因为课时进度与难度降低少讲了很多东西，就连英语这种需要终身学习的东西，我们也在心底觉得掌握六级6000个词左右就万事大吉了，而当我们面对实际的问题时，我们现有的知识又是十分匮乏的：要阅读论文，但是英语上大部分专业的词汇都没接触到，要应对生活中多变的问题，但是我们因为课本上没有就不去接触这个算法。工科的知识不够实际，所以必定是需要自学的。像语文、英语这样东西又被刻板印象上降级为只需要背和编的东西。所以我说传统的学习其实并没有给我们带来太多东西，并且很多知识我们学了是不知道用在哪里的，成就感何在？就在学习之后我们应用知识的场景上，比如学科竞赛、考试以及平时做题，有时候还可以得到父母的夸奖，而且学习的生活方式很长时间来被社会所认同，即使生活会因为学习而变得重复，心理上是过得去的。\n\n在高中的时候，我们班主任特别烦有人因为所谓的“自学”、“闭门造车”而请假回家看网课或者上课不听讲，确实这些人在之后并没有像他们想的一样取得比别人更好的成绩。仿佛自学是一件不好的事情。我是这样看的啊，因为老师站在我们学生的实际来讲课，而且讲课是有连贯性（注重知识点之间的迁移运用）的，因而教的效果要更好，在网上寻找课程，你必须要精细化好你的问题，老师会将这个问题抽象成一个简化的模型，然后会告诉你固定的思路，老师给你提供的是一个背景上的框架与框架里的信息，你可以通过看网课对同一个问题产生一些不同的视角，从而更好地解决问题。只看网课的缺点在哪呢，就在它知识点的独立与零碎上，首先是容易忘记，而且出于简单的需要，它将会将知识点做进一步的特殊化与简化，看课是为了做题，而不是对课本概念的理解，从而不能从根本上提高成绩。\n\n什么是自学呢？因为我也是“热爱”与“梦想”这两个词的”忠实粉丝“，因而我也要用这两个词来定义它。自学的动机是源于自己的想法。因而一定是有坚定的热爱才能够坚持下去，没有社会信念的支持，没有别人的支持，是你自己一个人的战斗。自学中没有竞争，只有你对于同一个问题的想法，因为不同的人对于学习有着自己的目标和理念，从根本上也没有什么好竞争的。从这个意义上来说，自学甚至可以看做是个性的一种集中表现，学什么、怎么学、学什么样都是你自己说了算。并且自学，在我看来，是给生活增添变量的过程，内容越多，思考越多，会的越多，能做的事情越多。对于这个世界的认知也越好。\n\n星穹铁道里有个词叫“开拓\"，我一直很喜欢这个词，因为它代表着前进与探索，并且在途中收获独属于自己的乐趣与体验。在我看来，自学的旅程也是一样，并且它能够帮助你实现梦想，免除一成不变的生活。从根本上来说，自学的本质才是学习本身，传统学习的目标是应试学习（实际上课本并不是这样要求我们的，课本上的每一句话都是很重要的，需要我们好好理解，但是我们却热衷于背弃课本去寻找其他的学习资料。）学习是人类的本性，是我们进步的方式，所以我认为自学才是一种真正的学习，从师学习，只要是动机出于自身，也是一种自学，所以，我觉得应该更重视自学。\n\n放松一下，我其实是一个挺自卑的人，不论是人际关系还是打游戏可能都不是很强（我或许都没有啥很强的地方），同班的人都能看得见我课课都抬着头好好听课，不管是水课还是专业课，实际上在某种程度上也是在寻找一种认可感与成就感，因为专注这件事其实很不容易做到，又由于我瞬时记忆力比较好，因而可以和老师对答如流，认真学习也是成绩的一种保证。这是我自信的一部分，所以在生活中我其实挺在意传统学习的，最近的HTML学习让我感受到了自学的乐趣，因而作这一篇。\n\n*May 20th* 天气晴","source":"_posts/小思考.md","raw":"---\ntitle: 小思考\ndate: 2024-05-20 11:39:44\ntags: 心态调整\n---\n\n最近的表达欲直线上升了，可能是因为在读戴爷爷（戴建业老师）的书，作为一名语文老师，他是能够让我体会到古诗中的韵味和古人那种高尚的人生哲学的人，也给我的生活增添了不少的鼓励与趣味。这两天有幸接触到了他的《你听懂了没有》和《我的个天》这两本书，严肃的诗文分析我并不是很喜欢，但是散文能够传达生活的独特感受，一直是我的最爱，它的B站视频也十分有韵味。\n\n<!--more-->\n\n这两天，也因为自己做到了一些能够让自己骄傲的事情，心态好转了不少，没有了像过去那样的自卑，更多的是理性的思考和下一步的行动上的考虑，在很多情况下，我承认自己的行动力确实不足，因为源于习惯的对不确定性的反感，还是更喜欢稳妥能给自己带来好处的行为方式，一如现在的我确实十分的内向，因为人际关系总会因为自己的几句话而发生微妙的变化，微信聊天中的体会让我定义自己为一个聊天太过认真的人，所以我总是倾向于独自思考，思考自己的问题。这篇文章就是我对一些人生问题的思考，或许它们定义了我自己，或许它们是我的某些生活方式的写照，能够把我给描出来。\n\n这篇文章包含若干小文章，有时长，有时短，但一定是经过了思考，欢迎在评论区进行交流。\n作为学生，就从普遍日程上开始写起吧，\n## 日程篇 (学习、作息、生活)\n\n### 1. 为什么学习  \n\n我发觉到自己有这么一种倾向，追求个性，追求变化。很多时候想要产生自己的想法，毕竟很多时候社会都传播着热爱与梦想对于人的价值，但是也总是迫于内卷和对自己的不满，开始尝试（或者说是服从）人家符合早睡早起、好好学习的高中式作息。在高中的时候，我们通常会这样给自己的生活定义——“三点一线”，也就是家、食堂与学校。我确实对这种生活感到十分地厌倦，不仅是每天重复的生活，而且似乎我们生活的目标就只能盯着学习。现在进入大学，我们早已不在意家长口中传播的“上大学就轻松了”，因为我们已经接触到了现实，但现在，或许学习（传统意义上的上课与写作业）不再是我们生活的唯一目标了，可我们是否应该像高中那时候一样重视呢？我的观点是这样：传统的学习可以给生活带来些许成就感，仅此而已，广义的学习是生活的开拓，所以视其对你重要性而定喽。\n\n我知道我们确实通过之前的学习收获了很多，肯定有我没体会到的东西。是这样，但是你不能否认现在的大学课程因为课时进度与难度降低少讲了很多东西，就连英语这种需要终身学习的东西，我们也在心底觉得掌握六级6000个词左右就万事大吉了，而当我们面对实际的问题时，我们现有的知识又是十分匮乏的：要阅读论文，但是英语上大部分专业的词汇都没接触到，要应对生活中多变的问题，但是我们因为课本上没有就不去接触这个算法。工科的知识不够实际，所以必定是需要自学的。像语文、英语这样东西又被刻板印象上降级为只需要背和编的东西。所以我说传统的学习其实并没有给我们带来太多东西，并且很多知识我们学了是不知道用在哪里的，成就感何在？就在学习之后我们应用知识的场景上，比如学科竞赛、考试以及平时做题，有时候还可以得到父母的夸奖，而且学习的生活方式很长时间来被社会所认同，即使生活会因为学习而变得重复，心理上是过得去的。\n\n在高中的时候，我们班主任特别烦有人因为所谓的“自学”、“闭门造车”而请假回家看网课或者上课不听讲，确实这些人在之后并没有像他们想的一样取得比别人更好的成绩。仿佛自学是一件不好的事情。我是这样看的啊，因为老师站在我们学生的实际来讲课，而且讲课是有连贯性（注重知识点之间的迁移运用）的，因而教的效果要更好，在网上寻找课程，你必须要精细化好你的问题，老师会将这个问题抽象成一个简化的模型，然后会告诉你固定的思路，老师给你提供的是一个背景上的框架与框架里的信息，你可以通过看网课对同一个问题产生一些不同的视角，从而更好地解决问题。只看网课的缺点在哪呢，就在它知识点的独立与零碎上，首先是容易忘记，而且出于简单的需要，它将会将知识点做进一步的特殊化与简化，看课是为了做题，而不是对课本概念的理解，从而不能从根本上提高成绩。\n\n什么是自学呢？因为我也是“热爱”与“梦想”这两个词的”忠实粉丝“，因而我也要用这两个词来定义它。自学的动机是源于自己的想法。因而一定是有坚定的热爱才能够坚持下去，没有社会信念的支持，没有别人的支持，是你自己一个人的战斗。自学中没有竞争，只有你对于同一个问题的想法，因为不同的人对于学习有着自己的目标和理念，从根本上也没有什么好竞争的。从这个意义上来说，自学甚至可以看做是个性的一种集中表现，学什么、怎么学、学什么样都是你自己说了算。并且自学，在我看来，是给生活增添变量的过程，内容越多，思考越多，会的越多，能做的事情越多。对于这个世界的认知也越好。\n\n星穹铁道里有个词叫“开拓\"，我一直很喜欢这个词，因为它代表着前进与探索，并且在途中收获独属于自己的乐趣与体验。在我看来，自学的旅程也是一样，并且它能够帮助你实现梦想，免除一成不变的生活。从根本上来说，自学的本质才是学习本身，传统学习的目标是应试学习（实际上课本并不是这样要求我们的，课本上的每一句话都是很重要的，需要我们好好理解，但是我们却热衷于背弃课本去寻找其他的学习资料。）学习是人类的本性，是我们进步的方式，所以我认为自学才是一种真正的学习，从师学习，只要是动机出于自身，也是一种自学，所以，我觉得应该更重视自学。\n\n放松一下，我其实是一个挺自卑的人，不论是人际关系还是打游戏可能都不是很强（我或许都没有啥很强的地方），同班的人都能看得见我课课都抬着头好好听课，不管是水课还是专业课，实际上在某种程度上也是在寻找一种认可感与成就感，因为专注这件事其实很不容易做到，又由于我瞬时记忆力比较好，因而可以和老师对答如流，认真学习也是成绩的一种保证。这是我自信的一部分，所以在生活中我其实挺在意传统学习的，最近的HTML学习让我感受到了自学的乐趣，因而作这一篇。\n\n*May 20th* 天气晴","slug":"小思考","published":1,"updated":"2024-05-20T03:48:57.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775ny3000zzkue5a4zf0pv","content":"<p>最近的表达欲直线上升了，可能是因为在读戴爷爷（戴建业老师）的书，作为一名语文老师，他是能够让我体会到古诗中的韵味和古人那种高尚的人生哲学的人，也给我的生活增添了不少的鼓励与趣味。这两天有幸接触到了他的《你听懂了没有》和《我的个天》这两本书，严肃的诗文分析我并不是很喜欢，但是散文能够传达生活的独特感受，一直是我的最爱，它的B站视频也十分有韵味。</p>\n<span id=\"more\"></span>\n\n<p>这两天，也因为自己做到了一些能够让自己骄傲的事情，心态好转了不少，没有了像过去那样的自卑，更多的是理性的思考和下一步的行动上的考虑，在很多情况下，我承认自己的行动力确实不足，因为源于习惯的对不确定性的反感，还是更喜欢稳妥能给自己带来好处的行为方式，一如现在的我确实十分的内向，因为人际关系总会因为自己的几句话而发生微妙的变化，微信聊天中的体会让我定义自己为一个聊天太过认真的人，所以我总是倾向于独自思考，思考自己的问题。这篇文章就是我对一些人生问题的思考，或许它们定义了我自己，或许它们是我的某些生活方式的写照，能够把我给描出来。</p>\n<p>这篇文章包含若干小文章，有时长，有时短，但一定是经过了思考，欢迎在评论区进行交流。<br>作为学生，就从普遍日程上开始写起吧，</p>\n<h2 id=\"日程篇-学习、作息、生活\"><a href=\"#日程篇-学习、作息、生活\" class=\"headerlink\" title=\"日程篇 (学习、作息、生活)\"></a>日程篇 (学习、作息、生活)</h2><h3 id=\"1-为什么学习\"><a href=\"#1-为什么学习\" class=\"headerlink\" title=\"1. 为什么学习\"></a>1. 为什么学习</h3><p>我发觉到自己有这么一种倾向，追求个性，追求变化。很多时候想要产生自己的想法，毕竟很多时候社会都传播着热爱与梦想对于人的价值，但是也总是迫于内卷和对自己的不满，开始尝试（或者说是服从）人家符合早睡早起、好好学习的高中式作息。在高中的时候，我们通常会这样给自己的生活定义——“三点一线”，也就是家、食堂与学校。我确实对这种生活感到十分地厌倦，不仅是每天重复的生活，而且似乎我们生活的目标就只能盯着学习。现在进入大学，我们早已不在意家长口中传播的“上大学就轻松了”，因为我们已经接触到了现实，但现在，或许学习（传统意义上的上课与写作业）不再是我们生活的唯一目标了，可我们是否应该像高中那时候一样重视呢？我的观点是这样：传统的学习可以给生活带来些许成就感，仅此而已，广义的学习是生活的开拓，所以视其对你重要性而定喽。</p>\n<p>我知道我们确实通过之前的学习收获了很多，肯定有我没体会到的东西。是这样，但是你不能否认现在的大学课程因为课时进度与难度降低少讲了很多东西，就连英语这种需要终身学习的东西，我们也在心底觉得掌握六级6000个词左右就万事大吉了，而当我们面对实际的问题时，我们现有的知识又是十分匮乏的：要阅读论文，但是英语上大部分专业的词汇都没接触到，要应对生活中多变的问题，但是我们因为课本上没有就不去接触这个算法。工科的知识不够实际，所以必定是需要自学的。像语文、英语这样东西又被刻板印象上降级为只需要背和编的东西。所以我说传统的学习其实并没有给我们带来太多东西，并且很多知识我们学了是不知道用在哪里的，成就感何在？就在学习之后我们应用知识的场景上，比如学科竞赛、考试以及平时做题，有时候还可以得到父母的夸奖，而且学习的生活方式很长时间来被社会所认同，即使生活会因为学习而变得重复，心理上是过得去的。</p>\n<p>在高中的时候，我们班主任特别烦有人因为所谓的“自学”、“闭门造车”而请假回家看网课或者上课不听讲，确实这些人在之后并没有像他们想的一样取得比别人更好的成绩。仿佛自学是一件不好的事情。我是这样看的啊，因为老师站在我们学生的实际来讲课，而且讲课是有连贯性（注重知识点之间的迁移运用）的，因而教的效果要更好，在网上寻找课程，你必须要精细化好你的问题，老师会将这个问题抽象成一个简化的模型，然后会告诉你固定的思路，老师给你提供的是一个背景上的框架与框架里的信息，你可以通过看网课对同一个问题产生一些不同的视角，从而更好地解决问题。只看网课的缺点在哪呢，就在它知识点的独立与零碎上，首先是容易忘记，而且出于简单的需要，它将会将知识点做进一步的特殊化与简化，看课是为了做题，而不是对课本概念的理解，从而不能从根本上提高成绩。</p>\n<p>什么是自学呢？因为我也是“热爱”与“梦想”这两个词的”忠实粉丝“，因而我也要用这两个词来定义它。自学的动机是源于自己的想法。因而一定是有坚定的热爱才能够坚持下去，没有社会信念的支持，没有别人的支持，是你自己一个人的战斗。自学中没有竞争，只有你对于同一个问题的想法，因为不同的人对于学习有着自己的目标和理念，从根本上也没有什么好竞争的。从这个意义上来说，自学甚至可以看做是个性的一种集中表现，学什么、怎么学、学什么样都是你自己说了算。并且自学，在我看来，是给生活增添变量的过程，内容越多，思考越多，会的越多，能做的事情越多。对于这个世界的认知也越好。</p>\n<p>星穹铁道里有个词叫“开拓”，我一直很喜欢这个词，因为它代表着前进与探索，并且在途中收获独属于自己的乐趣与体验。在我看来，自学的旅程也是一样，并且它能够帮助你实现梦想，免除一成不变的生活。从根本上来说，自学的本质才是学习本身，传统学习的目标是应试学习（实际上课本并不是这样要求我们的，课本上的每一句话都是很重要的，需要我们好好理解，但是我们却热衷于背弃课本去寻找其他的学习资料。）学习是人类的本性，是我们进步的方式，所以我认为自学才是一种真正的学习，从师学习，只要是动机出于自身，也是一种自学，所以，我觉得应该更重视自学。</p>\n<p>放松一下，我其实是一个挺自卑的人，不论是人际关系还是打游戏可能都不是很强（我或许都没有啥很强的地方），同班的人都能看得见我课课都抬着头好好听课，不管是水课还是专业课，实际上在某种程度上也是在寻找一种认可感与成就感，因为专注这件事其实很不容易做到，又由于我瞬时记忆力比较好，因而可以和老师对答如流，认真学习也是成绩的一种保证。这是我自信的一部分，所以在生活中我其实挺在意传统学习的，最近的HTML学习让我感受到了自学的乐趣，因而作这一篇。</p>\n<p><em>May 20th</em> 天气晴</p>\n","site":{"data":{}},"excerpt":"<p>最近的表达欲直线上升了，可能是因为在读戴爷爷（戴建业老师）的书，作为一名语文老师，他是能够让我体会到古诗中的韵味和古人那种高尚的人生哲学的人，也给我的生活增添了不少的鼓励与趣味。这两天有幸接触到了他的《你听懂了没有》和《我的个天》这两本书，严肃的诗文分析我并不是很喜欢，但是散文能够传达生活的独特感受，一直是我的最爱，它的B站视频也十分有韵味。</p>","more":"<p>这两天，也因为自己做到了一些能够让自己骄傲的事情，心态好转了不少，没有了像过去那样的自卑，更多的是理性的思考和下一步的行动上的考虑，在很多情况下，我承认自己的行动力确实不足，因为源于习惯的对不确定性的反感，还是更喜欢稳妥能给自己带来好处的行为方式，一如现在的我确实十分的内向，因为人际关系总会因为自己的几句话而发生微妙的变化，微信聊天中的体会让我定义自己为一个聊天太过认真的人，所以我总是倾向于独自思考，思考自己的问题。这篇文章就是我对一些人生问题的思考，或许它们定义了我自己，或许它们是我的某些生活方式的写照，能够把我给描出来。</p>\n<p>这篇文章包含若干小文章，有时长，有时短，但一定是经过了思考，欢迎在评论区进行交流。<br>作为学生，就从普遍日程上开始写起吧，</p>\n<h2 id=\"日程篇-学习、作息、生活\"><a href=\"#日程篇-学习、作息、生活\" class=\"headerlink\" title=\"日程篇 (学习、作息、生活)\"></a>日程篇 (学习、作息、生活)</h2><h3 id=\"1-为什么学习\"><a href=\"#1-为什么学习\" class=\"headerlink\" title=\"1. 为什么学习\"></a>1. 为什么学习</h3><p>我发觉到自己有这么一种倾向，追求个性，追求变化。很多时候想要产生自己的想法，毕竟很多时候社会都传播着热爱与梦想对于人的价值，但是也总是迫于内卷和对自己的不满，开始尝试（或者说是服从）人家符合早睡早起、好好学习的高中式作息。在高中的时候，我们通常会这样给自己的生活定义——“三点一线”，也就是家、食堂与学校。我确实对这种生活感到十分地厌倦，不仅是每天重复的生活，而且似乎我们生活的目标就只能盯着学习。现在进入大学，我们早已不在意家长口中传播的“上大学就轻松了”，因为我们已经接触到了现实，但现在，或许学习（传统意义上的上课与写作业）不再是我们生活的唯一目标了，可我们是否应该像高中那时候一样重视呢？我的观点是这样：传统的学习可以给生活带来些许成就感，仅此而已，广义的学习是生活的开拓，所以视其对你重要性而定喽。</p>\n<p>我知道我们确实通过之前的学习收获了很多，肯定有我没体会到的东西。是这样，但是你不能否认现在的大学课程因为课时进度与难度降低少讲了很多东西，就连英语这种需要终身学习的东西，我们也在心底觉得掌握六级6000个词左右就万事大吉了，而当我们面对实际的问题时，我们现有的知识又是十分匮乏的：要阅读论文，但是英语上大部分专业的词汇都没接触到，要应对生活中多变的问题，但是我们因为课本上没有就不去接触这个算法。工科的知识不够实际，所以必定是需要自学的。像语文、英语这样东西又被刻板印象上降级为只需要背和编的东西。所以我说传统的学习其实并没有给我们带来太多东西，并且很多知识我们学了是不知道用在哪里的，成就感何在？就在学习之后我们应用知识的场景上，比如学科竞赛、考试以及平时做题，有时候还可以得到父母的夸奖，而且学习的生活方式很长时间来被社会所认同，即使生活会因为学习而变得重复，心理上是过得去的。</p>\n<p>在高中的时候，我们班主任特别烦有人因为所谓的“自学”、“闭门造车”而请假回家看网课或者上课不听讲，确实这些人在之后并没有像他们想的一样取得比别人更好的成绩。仿佛自学是一件不好的事情。我是这样看的啊，因为老师站在我们学生的实际来讲课，而且讲课是有连贯性（注重知识点之间的迁移运用）的，因而教的效果要更好，在网上寻找课程，你必须要精细化好你的问题，老师会将这个问题抽象成一个简化的模型，然后会告诉你固定的思路，老师给你提供的是一个背景上的框架与框架里的信息，你可以通过看网课对同一个问题产生一些不同的视角，从而更好地解决问题。只看网课的缺点在哪呢，就在它知识点的独立与零碎上，首先是容易忘记，而且出于简单的需要，它将会将知识点做进一步的特殊化与简化，看课是为了做题，而不是对课本概念的理解，从而不能从根本上提高成绩。</p>\n<p>什么是自学呢？因为我也是“热爱”与“梦想”这两个词的”忠实粉丝“，因而我也要用这两个词来定义它。自学的动机是源于自己的想法。因而一定是有坚定的热爱才能够坚持下去，没有社会信念的支持，没有别人的支持，是你自己一个人的战斗。自学中没有竞争，只有你对于同一个问题的想法，因为不同的人对于学习有着自己的目标和理念，从根本上也没有什么好竞争的。从这个意义上来说，自学甚至可以看做是个性的一种集中表现，学什么、怎么学、学什么样都是你自己说了算。并且自学，在我看来，是给生活增添变量的过程，内容越多，思考越多，会的越多，能做的事情越多。对于这个世界的认知也越好。</p>\n<p>星穹铁道里有个词叫“开拓”，我一直很喜欢这个词，因为它代表着前进与探索，并且在途中收获独属于自己的乐趣与体验。在我看来，自学的旅程也是一样，并且它能够帮助你实现梦想，免除一成不变的生活。从根本上来说，自学的本质才是学习本身，传统学习的目标是应试学习（实际上课本并不是这样要求我们的，课本上的每一句话都是很重要的，需要我们好好理解，但是我们却热衷于背弃课本去寻找其他的学习资料。）学习是人类的本性，是我们进步的方式，所以我认为自学才是一种真正的学习，从师学习，只要是动机出于自身，也是一种自学，所以，我觉得应该更重视自学。</p>\n<p>放松一下，我其实是一个挺自卑的人，不论是人际关系还是打游戏可能都不是很强（我或许都没有啥很强的地方），同班的人都能看得见我课课都抬着头好好听课，不管是水课还是专业课，实际上在某种程度上也是在寻找一种认可感与成就感，因为专注这件事其实很不容易做到，又由于我瞬时记忆力比较好，因而可以和老师对答如流，认真学习也是成绩的一种保证。这是我自信的一部分，所以在生活中我其实挺在意传统学习的，最近的HTML学习让我感受到了自学的乐趣，因而作这一篇。</p>\n<p><em>May 20th</em> 天气晴</p>"},{"title":"我的心态调整指南","date":"2024-03-04T01:16:28.000Z","_content":"\n> 这篇文章收录在了我的obsidian仓库中的“我的未来”板块，如有同学观看，愿共勉且尊重。\n\n从这历经磨难的大一上走过来，经过了一个寒假，只不过是学会了一条道理，完完全全地颠覆了之前的大部分焦虑。\n<!--more-->\n\n在上一年，在我还刚入学的时候。看着来来往往的人群，我感到的是陌生与激动，激动属于是“应激反应”了，因为我习惯上看到青年来来往往的样子就会想象他们在努力追梦的样子。那时候，我还是啥都不懂，但心比天高。陌生是透到骨子里的陌生了，当时是自己坚持说要去外省，但是刚开始的时候感觉到的却是无依无靠的感觉，另外因为上大学办保险、办校园卡、买日用品、来河南花了家里不少的钱......种种不切实际与负面的情绪压抑着我。\n\n>那个时候，当年级里很多人在C语言群里交流算法或者C语言语法的时候，我还是才从班长口中得知要学C语言的小萌新，所以刚进学校，一阵巨大的压力就扑面而来，这种压力跟随了我一整个学期，如同我学习编程就是为了赶上C语言群里的人们（但他们学得太快太专一，自卑）。\n>\n>那个时候，学校里厉害的人很多，当时其实并没有对于未来形成一个明确的要往哪走的目标，只不过是想要做大多数人做不到的事情，而且尽量是在大一做，只是因为牛逼。报过两套课程，一个教如何成为一个牛逼的大学生，一个教IP（就是抖音的视频号，B站的UP主）的。两个东西占据了很多学习的时间，到头来学习与课外都没有兼顾好，一天做不了啥有实际意义（给自己带来优越感）的事情，阴郁的心情困扰着我。\n>\n>那个时候，耳机里每天听的是英语歌，歌曲里几乎都是歌唱恋爱与激励勇气拼搏的。每天都心心念念着美好的恋爱却迟迟不敢行动，不知道喜欢是啥感觉，不知道如何交流，看到别人也老是会自卑。听到拼搏热血的歌曲，只不过是在心里给自己讲理而已，但在一个人有情绪的时候，你觉得讲理分析有用吗？\n>\n>那个时候，我的爱好并不与同学们重合，我喜欢的是听音乐，他们可以做运动，编程等等。他们常说的那些游戏也基本都是萌新，刚刚接触而已。和舍友也说不上啥话。习惯了带有戒备心（或者说所谓的“礼貌用语”）讲话，因而几乎不能与人交心，与所有人都挺“远”的，只是憧憬着之前和同学们一起玩得开心的样子，但与以前的同学说话也被告诉“你现在说话怎么这个样子，都不像你了”。\n>\n>......\n\n![军训时候](/img/pic1.jpg)\n\n\n如果这篇文章是在上学期写的，我可能会反观这些故事，感觉自己的“事迹”不合群，感觉根本不会有人和我有重合的地方，因而直接放弃这篇文章，并且感觉我自己真惨（笑哭）。\n\n读到这里你可能会有与我重合的地方，作为一个计算机专业的学生，未来的方向尚未明确，整天愤世嫉俗，有不如别人的地方就自卑，这对于高中内卷环境走来的人来说也挺正常的（希望没有冒犯到谁），在高中的时候，我也会因为严苛的竞争环境而充满阴郁。但如果要把自己奋斗的目标设立为超过目之所及的所有人，你不累才怪哩。另外，我也是挺内向的一个人，即便到现在也是，我不认为内向是一个负面的性格，即便很多人可能和你说过沟通能力很重要。相信我，强行改变自己的态度或者行为会碰壁的，而且会让你的自信心大打折扣。\n\n> 于是，有这么多情绪在你心里，你上学期为啥活过来了呢？你可能会问。\n\n是，我上学期确实找到了一些方法，但是究其根本，还要以“我将生命看得很重要”作为铺垫。我自很小的时候就意识到人是会死的，这曾经让年少的我长达一个星期害怕着死亡。看到孩子挺年轻就因为事故失去了自己或者双亲的场景，看到因为压力中学生自杀，我会觉得冷，身体发抖，我不太会流泪，但是这可能也是我感觉到伤心的一个标志吧。我不想看到谁因为自己的某些情绪，某些外物放弃自己的生命或者伤害他人的生命。现在的我并不害怕死亡，因为死亡是几乎平等的，因为每个人都会迎来生命的尽头，万物亦然，重要的是要保护好自己，在有限的生命里找到自己想做的事情，并将它做好，但我仍然尊重生命，因为生命意味着一个人的全部，我们无权伤害、夺去。\n\n然后就是方法了，从”做一个牛逼的大学生“的浪前课程里，我学到了“虚拟思维”这件为我现在的心态保底的道理（别急呢，还没到文首提到的那个道理）。可以试想一下如果这个世界是虚拟的，除了你全是由计算机推演得到的一个游戏，你的身体（容器）每一天都会更换。每天早晨我们都被注入上一天的记忆，接受着我们固有的“人格设定”，那么你要达成的，不过是一些数据，如果达不到就继续玩呗，一定会有完美结局。你在做事之中形成的烦恼、压力，其实都是游戏设计者为了限制你的发展，将各个人的命运导引到固定的结果的工具。因而借助这些想法，可以合理地接受过去，可以忘却阻力奔向未来。但我认为这个道理还没有完全地解决我的问题，遇到烦恼在脑子里说”是虚拟的“这件事效力会随着你使用的次数以及焦虑的程度上升而下降，而且明白这个道理的时间也忒晚点。另外跑步也是我的方法之一，我们都会跑校园跑（有规定的），尝试放开自己的我曾经一两个月在操场上唱着自己喜欢的歌跑步，这是疏解情绪的好办法，尝试过的人都知道。因为自己瘦下来了也挺有成就感。最后就是自己确实挺喜欢出去骑自行车的，尤其自己出去淋雨，很自由很解脱。\n\n![一次骑自行车拍的](/img/pic.jpg)\n\n我仍然没有解决完毕这个问题，因为上文的两种方法都是“瞬时性地”解决你的焦虑烦恼。我的核心问题还没有解决：目标在哪里，我要做什么，我为啥不需要和同学们卷。\n\n而这里也就引出了我们文首提到的那个道理：**区分事实与观点**。\n\n你可能不会觉得这个道理很高大上，挺短的说实话。但是在实践之中，这个道理的使用效力没有一丝的改变，在目标规划的辅助之下，它是我的强大心态后盾。\n\n何为区分事实与观点呢？就是在规划的基础上，对来自外界以及自己对自己的怀疑，清晰的认识到这些都是观点，而不能作为你判定自己状态的思考。如果进入了消极的状态，想想自己是因为哪种想法进入的，想想这个想法是事实还是观点，是事实，就努力行动，解决问题；是观点，往往是自己骗自己，不要管它。在生活中，将好的与正能量的东西视为事实，向自己提醒。借助这个道理，我逃出了内卷的漩涡，逃出了自我的内耗束缚，正向地生活着。\n\n我开始规律地洗漱与睡眠，因为它能够让我身体健康。开始与人们交流自己的真实感受，我发现自己能够与人们产生共鸣了。我开始觉得合群并不重要，它并不是一个需要你自卑的东西。我也深刻认识到，只要有梦想，我们的方向真的不一样，内卷与内耗都十分的不必要。我开始规划自己的学习，实现自己想要的效果。所以现在我恒久地走在自己的路上，看着自己的目标一点点实现。期待在路上遇到不同的人...\n\n最后想和你说：一个明确的规划，一个不需要顾及别人观点的理由，足以让你专注于自己的事情。\n足以让你显露出自己的个性，你也终将找到自己的梦想，没必要将他人作为自己的目标。\n\n![整体规划的一角](/img/scheme1.png)\n\n![学习规划的一角](/img/scheme2.png)\n\n最后，加油，希望你能够早日走出阴霾！\n\n> End...\n","source":"_posts/我的心态调整指南.md","raw":"---\ntitle: 我的心态调整指南\ndate: 2024-03-04 09:16:28\ntags: 心态调整\n---\n\n> 这篇文章收录在了我的obsidian仓库中的“我的未来”板块，如有同学观看，愿共勉且尊重。\n\n从这历经磨难的大一上走过来，经过了一个寒假，只不过是学会了一条道理，完完全全地颠覆了之前的大部分焦虑。\n<!--more-->\n\n在上一年，在我还刚入学的时候。看着来来往往的人群，我感到的是陌生与激动，激动属于是“应激反应”了，因为我习惯上看到青年来来往往的样子就会想象他们在努力追梦的样子。那时候，我还是啥都不懂，但心比天高。陌生是透到骨子里的陌生了，当时是自己坚持说要去外省，但是刚开始的时候感觉到的却是无依无靠的感觉，另外因为上大学办保险、办校园卡、买日用品、来河南花了家里不少的钱......种种不切实际与负面的情绪压抑着我。\n\n>那个时候，当年级里很多人在C语言群里交流算法或者C语言语法的时候，我还是才从班长口中得知要学C语言的小萌新，所以刚进学校，一阵巨大的压力就扑面而来，这种压力跟随了我一整个学期，如同我学习编程就是为了赶上C语言群里的人们（但他们学得太快太专一，自卑）。\n>\n>那个时候，学校里厉害的人很多，当时其实并没有对于未来形成一个明确的要往哪走的目标，只不过是想要做大多数人做不到的事情，而且尽量是在大一做，只是因为牛逼。报过两套课程，一个教如何成为一个牛逼的大学生，一个教IP（就是抖音的视频号，B站的UP主）的。两个东西占据了很多学习的时间，到头来学习与课外都没有兼顾好，一天做不了啥有实际意义（给自己带来优越感）的事情，阴郁的心情困扰着我。\n>\n>那个时候，耳机里每天听的是英语歌，歌曲里几乎都是歌唱恋爱与激励勇气拼搏的。每天都心心念念着美好的恋爱却迟迟不敢行动，不知道喜欢是啥感觉，不知道如何交流，看到别人也老是会自卑。听到拼搏热血的歌曲，只不过是在心里给自己讲理而已，但在一个人有情绪的时候，你觉得讲理分析有用吗？\n>\n>那个时候，我的爱好并不与同学们重合，我喜欢的是听音乐，他们可以做运动，编程等等。他们常说的那些游戏也基本都是萌新，刚刚接触而已。和舍友也说不上啥话。习惯了带有戒备心（或者说所谓的“礼貌用语”）讲话，因而几乎不能与人交心，与所有人都挺“远”的，只是憧憬着之前和同学们一起玩得开心的样子，但与以前的同学说话也被告诉“你现在说话怎么这个样子，都不像你了”。\n>\n>......\n\n![军训时候](/img/pic1.jpg)\n\n\n如果这篇文章是在上学期写的，我可能会反观这些故事，感觉自己的“事迹”不合群，感觉根本不会有人和我有重合的地方，因而直接放弃这篇文章，并且感觉我自己真惨（笑哭）。\n\n读到这里你可能会有与我重合的地方，作为一个计算机专业的学生，未来的方向尚未明确，整天愤世嫉俗，有不如别人的地方就自卑，这对于高中内卷环境走来的人来说也挺正常的（希望没有冒犯到谁），在高中的时候，我也会因为严苛的竞争环境而充满阴郁。但如果要把自己奋斗的目标设立为超过目之所及的所有人，你不累才怪哩。另外，我也是挺内向的一个人，即便到现在也是，我不认为内向是一个负面的性格，即便很多人可能和你说过沟通能力很重要。相信我，强行改变自己的态度或者行为会碰壁的，而且会让你的自信心大打折扣。\n\n> 于是，有这么多情绪在你心里，你上学期为啥活过来了呢？你可能会问。\n\n是，我上学期确实找到了一些方法，但是究其根本，还要以“我将生命看得很重要”作为铺垫。我自很小的时候就意识到人是会死的，这曾经让年少的我长达一个星期害怕着死亡。看到孩子挺年轻就因为事故失去了自己或者双亲的场景，看到因为压力中学生自杀，我会觉得冷，身体发抖，我不太会流泪，但是这可能也是我感觉到伤心的一个标志吧。我不想看到谁因为自己的某些情绪，某些外物放弃自己的生命或者伤害他人的生命。现在的我并不害怕死亡，因为死亡是几乎平等的，因为每个人都会迎来生命的尽头，万物亦然，重要的是要保护好自己，在有限的生命里找到自己想做的事情，并将它做好，但我仍然尊重生命，因为生命意味着一个人的全部，我们无权伤害、夺去。\n\n然后就是方法了，从”做一个牛逼的大学生“的浪前课程里，我学到了“虚拟思维”这件为我现在的心态保底的道理（别急呢，还没到文首提到的那个道理）。可以试想一下如果这个世界是虚拟的，除了你全是由计算机推演得到的一个游戏，你的身体（容器）每一天都会更换。每天早晨我们都被注入上一天的记忆，接受着我们固有的“人格设定”，那么你要达成的，不过是一些数据，如果达不到就继续玩呗，一定会有完美结局。你在做事之中形成的烦恼、压力，其实都是游戏设计者为了限制你的发展，将各个人的命运导引到固定的结果的工具。因而借助这些想法，可以合理地接受过去，可以忘却阻力奔向未来。但我认为这个道理还没有完全地解决我的问题，遇到烦恼在脑子里说”是虚拟的“这件事效力会随着你使用的次数以及焦虑的程度上升而下降，而且明白这个道理的时间也忒晚点。另外跑步也是我的方法之一，我们都会跑校园跑（有规定的），尝试放开自己的我曾经一两个月在操场上唱着自己喜欢的歌跑步，这是疏解情绪的好办法，尝试过的人都知道。因为自己瘦下来了也挺有成就感。最后就是自己确实挺喜欢出去骑自行车的，尤其自己出去淋雨，很自由很解脱。\n\n![一次骑自行车拍的](/img/pic.jpg)\n\n我仍然没有解决完毕这个问题，因为上文的两种方法都是“瞬时性地”解决你的焦虑烦恼。我的核心问题还没有解决：目标在哪里，我要做什么，我为啥不需要和同学们卷。\n\n而这里也就引出了我们文首提到的那个道理：**区分事实与观点**。\n\n你可能不会觉得这个道理很高大上，挺短的说实话。但是在实践之中，这个道理的使用效力没有一丝的改变，在目标规划的辅助之下，它是我的强大心态后盾。\n\n何为区分事实与观点呢？就是在规划的基础上，对来自外界以及自己对自己的怀疑，清晰的认识到这些都是观点，而不能作为你判定自己状态的思考。如果进入了消极的状态，想想自己是因为哪种想法进入的，想想这个想法是事实还是观点，是事实，就努力行动，解决问题；是观点，往往是自己骗自己，不要管它。在生活中，将好的与正能量的东西视为事实，向自己提醒。借助这个道理，我逃出了内卷的漩涡，逃出了自我的内耗束缚，正向地生活着。\n\n我开始规律地洗漱与睡眠，因为它能够让我身体健康。开始与人们交流自己的真实感受，我发现自己能够与人们产生共鸣了。我开始觉得合群并不重要，它并不是一个需要你自卑的东西。我也深刻认识到，只要有梦想，我们的方向真的不一样，内卷与内耗都十分的不必要。我开始规划自己的学习，实现自己想要的效果。所以现在我恒久地走在自己的路上，看着自己的目标一点点实现。期待在路上遇到不同的人...\n\n最后想和你说：一个明确的规划，一个不需要顾及别人观点的理由，足以让你专注于自己的事情。\n足以让你显露出自己的个性，你也终将找到自己的梦想，没必要将他人作为自己的目标。\n\n![整体规划的一角](/img/scheme1.png)\n\n![学习规划的一角](/img/scheme2.png)\n\n最后，加油，希望你能够早日走出阴霾！\n\n> End...\n","slug":"我的心态调整指南","published":1,"updated":"2024-03-04T01:25:48.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775ny40013zkueh97le4by","content":"<blockquote>\n<p>这篇文章收录在了我的obsidian仓库中的“我的未来”板块，如有同学观看，愿共勉且尊重。</p>\n</blockquote>\n<p>从这历经磨难的大一上走过来，经过了一个寒假，只不过是学会了一条道理，完完全全地颠覆了之前的大部分焦虑。</p>\n<span id=\"more\"></span>\n\n<p>在上一年，在我还刚入学的时候。看着来来往往的人群，我感到的是陌生与激动，激动属于是“应激反应”了，因为我习惯上看到青年来来往往的样子就会想象他们在努力追梦的样子。那时候，我还是啥都不懂，但心比天高。陌生是透到骨子里的陌生了，当时是自己坚持说要去外省，但是刚开始的时候感觉到的却是无依无靠的感觉，另外因为上大学办保险、办校园卡、买日用品、来河南花了家里不少的钱……种种不切实际与负面的情绪压抑着我。</p>\n<blockquote>\n<p>那个时候，当年级里很多人在C语言群里交流算法或者C语言语法的时候，我还是才从班长口中得知要学C语言的小萌新，所以刚进学校，一阵巨大的压力就扑面而来，这种压力跟随了我一整个学期，如同我学习编程就是为了赶上C语言群里的人们（但他们学得太快太专一，自卑）。</p>\n<p>那个时候，学校里厉害的人很多，当时其实并没有对于未来形成一个明确的要往哪走的目标，只不过是想要做大多数人做不到的事情，而且尽量是在大一做，只是因为牛逼。报过两套课程，一个教如何成为一个牛逼的大学生，一个教IP（就是抖音的视频号，B站的UP主）的。两个东西占据了很多学习的时间，到头来学习与课外都没有兼顾好，一天做不了啥有实际意义（给自己带来优越感）的事情，阴郁的心情困扰着我。</p>\n<p>那个时候，耳机里每天听的是英语歌，歌曲里几乎都是歌唱恋爱与激励勇气拼搏的。每天都心心念念着美好的恋爱却迟迟不敢行动，不知道喜欢是啥感觉，不知道如何交流，看到别人也老是会自卑。听到拼搏热血的歌曲，只不过是在心里给自己讲理而已，但在一个人有情绪的时候，你觉得讲理分析有用吗？</p>\n<p>那个时候，我的爱好并不与同学们重合，我喜欢的是听音乐，他们可以做运动，编程等等。他们常说的那些游戏也基本都是萌新，刚刚接触而已。和舍友也说不上啥话。习惯了带有戒备心（或者说所谓的“礼貌用语”）讲话，因而几乎不能与人交心，与所有人都挺“远”的，只是憧憬着之前和同学们一起玩得开心的样子，但与以前的同学说话也被告诉“你现在说话怎么这个样子，都不像你了”。</p>\n<p>……</p>\n</blockquote>\n<p><img src=\"/img/pic1.jpg\" alt=\"军训时候\"></p>\n<p>如果这篇文章是在上学期写的，我可能会反观这些故事，感觉自己的“事迹”不合群，感觉根本不会有人和我有重合的地方，因而直接放弃这篇文章，并且感觉我自己真惨（笑哭）。</p>\n<p>读到这里你可能会有与我重合的地方，作为一个计算机专业的学生，未来的方向尚未明确，整天愤世嫉俗，有不如别人的地方就自卑，这对于高中内卷环境走来的人来说也挺正常的（希望没有冒犯到谁），在高中的时候，我也会因为严苛的竞争环境而充满阴郁。但如果要把自己奋斗的目标设立为超过目之所及的所有人，你不累才怪哩。另外，我也是挺内向的一个人，即便到现在也是，我不认为内向是一个负面的性格，即便很多人可能和你说过沟通能力很重要。相信我，强行改变自己的态度或者行为会碰壁的，而且会让你的自信心大打折扣。</p>\n<blockquote>\n<p>于是，有这么多情绪在你心里，你上学期为啥活过来了呢？你可能会问。</p>\n</blockquote>\n<p>是，我上学期确实找到了一些方法，但是究其根本，还要以“我将生命看得很重要”作为铺垫。我自很小的时候就意识到人是会死的，这曾经让年少的我长达一个星期害怕着死亡。看到孩子挺年轻就因为事故失去了自己或者双亲的场景，看到因为压力中学生自杀，我会觉得冷，身体发抖，我不太会流泪，但是这可能也是我感觉到伤心的一个标志吧。我不想看到谁因为自己的某些情绪，某些外物放弃自己的生命或者伤害他人的生命。现在的我并不害怕死亡，因为死亡是几乎平等的，因为每个人都会迎来生命的尽头，万物亦然，重要的是要保护好自己，在有限的生命里找到自己想做的事情，并将它做好，但我仍然尊重生命，因为生命意味着一个人的全部，我们无权伤害、夺去。</p>\n<p>然后就是方法了，从”做一个牛逼的大学生“的浪前课程里，我学到了“虚拟思维”这件为我现在的心态保底的道理（别急呢，还没到文首提到的那个道理）。可以试想一下如果这个世界是虚拟的，除了你全是由计算机推演得到的一个游戏，你的身体（容器）每一天都会更换。每天早晨我们都被注入上一天的记忆，接受着我们固有的“人格设定”，那么你要达成的，不过是一些数据，如果达不到就继续玩呗，一定会有完美结局。你在做事之中形成的烦恼、压力，其实都是游戏设计者为了限制你的发展，将各个人的命运导引到固定的结果的工具。因而借助这些想法，可以合理地接受过去，可以忘却阻力奔向未来。但我认为这个道理还没有完全地解决我的问题，遇到烦恼在脑子里说”是虚拟的“这件事效力会随着你使用的次数以及焦虑的程度上升而下降，而且明白这个道理的时间也忒晚点。另外跑步也是我的方法之一，我们都会跑校园跑（有规定的），尝试放开自己的我曾经一两个月在操场上唱着自己喜欢的歌跑步，这是疏解情绪的好办法，尝试过的人都知道。因为自己瘦下来了也挺有成就感。最后就是自己确实挺喜欢出去骑自行车的，尤其自己出去淋雨，很自由很解脱。</p>\n<p><img src=\"/img/pic.jpg\" alt=\"一次骑自行车拍的\"></p>\n<p>我仍然没有解决完毕这个问题，因为上文的两种方法都是“瞬时性地”解决你的焦虑烦恼。我的核心问题还没有解决：目标在哪里，我要做什么，我为啥不需要和同学们卷。</p>\n<p>而这里也就引出了我们文首提到的那个道理：<strong>区分事实与观点</strong>。</p>\n<p>你可能不会觉得这个道理很高大上，挺短的说实话。但是在实践之中，这个道理的使用效力没有一丝的改变，在目标规划的辅助之下，它是我的强大心态后盾。</p>\n<p>何为区分事实与观点呢？就是在规划的基础上，对来自外界以及自己对自己的怀疑，清晰的认识到这些都是观点，而不能作为你判定自己状态的思考。如果进入了消极的状态，想想自己是因为哪种想法进入的，想想这个想法是事实还是观点，是事实，就努力行动，解决问题；是观点，往往是自己骗自己，不要管它。在生活中，将好的与正能量的东西视为事实，向自己提醒。借助这个道理，我逃出了内卷的漩涡，逃出了自我的内耗束缚，正向地生活着。</p>\n<p>我开始规律地洗漱与睡眠，因为它能够让我身体健康。开始与人们交流自己的真实感受，我发现自己能够与人们产生共鸣了。我开始觉得合群并不重要，它并不是一个需要你自卑的东西。我也深刻认识到，只要有梦想，我们的方向真的不一样，内卷与内耗都十分的不必要。我开始规划自己的学习，实现自己想要的效果。所以现在我恒久地走在自己的路上，看着自己的目标一点点实现。期待在路上遇到不同的人…</p>\n<p>最后想和你说：一个明确的规划，一个不需要顾及别人观点的理由，足以让你专注于自己的事情。<br>足以让你显露出自己的个性，你也终将找到自己的梦想，没必要将他人作为自己的目标。</p>\n<p><img src=\"/img/scheme1.png\" alt=\"整体规划的一角\"></p>\n<p><img src=\"/img/scheme2.png\" alt=\"学习规划的一角\"></p>\n<p>最后，加油，希望你能够早日走出阴霾！</p>\n<blockquote>\n<p>End…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这篇文章收录在了我的obsidian仓库中的“我的未来”板块，如有同学观看，愿共勉且尊重。</p>\n</blockquote>\n<p>从这历经磨难的大一上走过来，经过了一个寒假，只不过是学会了一条道理，完完全全地颠覆了之前的大部分焦虑。</p>","more":"<p>在上一年，在我还刚入学的时候。看着来来往往的人群，我感到的是陌生与激动，激动属于是“应激反应”了，因为我习惯上看到青年来来往往的样子就会想象他们在努力追梦的样子。那时候，我还是啥都不懂，但心比天高。陌生是透到骨子里的陌生了，当时是自己坚持说要去外省，但是刚开始的时候感觉到的却是无依无靠的感觉，另外因为上大学办保险、办校园卡、买日用品、来河南花了家里不少的钱……种种不切实际与负面的情绪压抑着我。</p>\n<blockquote>\n<p>那个时候，当年级里很多人在C语言群里交流算法或者C语言语法的时候，我还是才从班长口中得知要学C语言的小萌新，所以刚进学校，一阵巨大的压力就扑面而来，这种压力跟随了我一整个学期，如同我学习编程就是为了赶上C语言群里的人们（但他们学得太快太专一，自卑）。</p>\n<p>那个时候，学校里厉害的人很多，当时其实并没有对于未来形成一个明确的要往哪走的目标，只不过是想要做大多数人做不到的事情，而且尽量是在大一做，只是因为牛逼。报过两套课程，一个教如何成为一个牛逼的大学生，一个教IP（就是抖音的视频号，B站的UP主）的。两个东西占据了很多学习的时间，到头来学习与课外都没有兼顾好，一天做不了啥有实际意义（给自己带来优越感）的事情，阴郁的心情困扰着我。</p>\n<p>那个时候，耳机里每天听的是英语歌，歌曲里几乎都是歌唱恋爱与激励勇气拼搏的。每天都心心念念着美好的恋爱却迟迟不敢行动，不知道喜欢是啥感觉，不知道如何交流，看到别人也老是会自卑。听到拼搏热血的歌曲，只不过是在心里给自己讲理而已，但在一个人有情绪的时候，你觉得讲理分析有用吗？</p>\n<p>那个时候，我的爱好并不与同学们重合，我喜欢的是听音乐，他们可以做运动，编程等等。他们常说的那些游戏也基本都是萌新，刚刚接触而已。和舍友也说不上啥话。习惯了带有戒备心（或者说所谓的“礼貌用语”）讲话，因而几乎不能与人交心，与所有人都挺“远”的，只是憧憬着之前和同学们一起玩得开心的样子，但与以前的同学说话也被告诉“你现在说话怎么这个样子，都不像你了”。</p>\n<p>……</p>\n</blockquote>\n<p><img src=\"/img/pic1.jpg\" alt=\"军训时候\"></p>\n<p>如果这篇文章是在上学期写的，我可能会反观这些故事，感觉自己的“事迹”不合群，感觉根本不会有人和我有重合的地方，因而直接放弃这篇文章，并且感觉我自己真惨（笑哭）。</p>\n<p>读到这里你可能会有与我重合的地方，作为一个计算机专业的学生，未来的方向尚未明确，整天愤世嫉俗，有不如别人的地方就自卑，这对于高中内卷环境走来的人来说也挺正常的（希望没有冒犯到谁），在高中的时候，我也会因为严苛的竞争环境而充满阴郁。但如果要把自己奋斗的目标设立为超过目之所及的所有人，你不累才怪哩。另外，我也是挺内向的一个人，即便到现在也是，我不认为内向是一个负面的性格，即便很多人可能和你说过沟通能力很重要。相信我，强行改变自己的态度或者行为会碰壁的，而且会让你的自信心大打折扣。</p>\n<blockquote>\n<p>于是，有这么多情绪在你心里，你上学期为啥活过来了呢？你可能会问。</p>\n</blockquote>\n<p>是，我上学期确实找到了一些方法，但是究其根本，还要以“我将生命看得很重要”作为铺垫。我自很小的时候就意识到人是会死的，这曾经让年少的我长达一个星期害怕着死亡。看到孩子挺年轻就因为事故失去了自己或者双亲的场景，看到因为压力中学生自杀，我会觉得冷，身体发抖，我不太会流泪，但是这可能也是我感觉到伤心的一个标志吧。我不想看到谁因为自己的某些情绪，某些外物放弃自己的生命或者伤害他人的生命。现在的我并不害怕死亡，因为死亡是几乎平等的，因为每个人都会迎来生命的尽头，万物亦然，重要的是要保护好自己，在有限的生命里找到自己想做的事情，并将它做好，但我仍然尊重生命，因为生命意味着一个人的全部，我们无权伤害、夺去。</p>\n<p>然后就是方法了，从”做一个牛逼的大学生“的浪前课程里，我学到了“虚拟思维”这件为我现在的心态保底的道理（别急呢，还没到文首提到的那个道理）。可以试想一下如果这个世界是虚拟的，除了你全是由计算机推演得到的一个游戏，你的身体（容器）每一天都会更换。每天早晨我们都被注入上一天的记忆，接受着我们固有的“人格设定”，那么你要达成的，不过是一些数据，如果达不到就继续玩呗，一定会有完美结局。你在做事之中形成的烦恼、压力，其实都是游戏设计者为了限制你的发展，将各个人的命运导引到固定的结果的工具。因而借助这些想法，可以合理地接受过去，可以忘却阻力奔向未来。但我认为这个道理还没有完全地解决我的问题，遇到烦恼在脑子里说”是虚拟的“这件事效力会随着你使用的次数以及焦虑的程度上升而下降，而且明白这个道理的时间也忒晚点。另外跑步也是我的方法之一，我们都会跑校园跑（有规定的），尝试放开自己的我曾经一两个月在操场上唱着自己喜欢的歌跑步，这是疏解情绪的好办法，尝试过的人都知道。因为自己瘦下来了也挺有成就感。最后就是自己确实挺喜欢出去骑自行车的，尤其自己出去淋雨，很自由很解脱。</p>\n<p><img src=\"/img/pic.jpg\" alt=\"一次骑自行车拍的\"></p>\n<p>我仍然没有解决完毕这个问题，因为上文的两种方法都是“瞬时性地”解决你的焦虑烦恼。我的核心问题还没有解决：目标在哪里，我要做什么，我为啥不需要和同学们卷。</p>\n<p>而这里也就引出了我们文首提到的那个道理：<strong>区分事实与观点</strong>。</p>\n<p>你可能不会觉得这个道理很高大上，挺短的说实话。但是在实践之中，这个道理的使用效力没有一丝的改变，在目标规划的辅助之下，它是我的强大心态后盾。</p>\n<p>何为区分事实与观点呢？就是在规划的基础上，对来自外界以及自己对自己的怀疑，清晰的认识到这些都是观点，而不能作为你判定自己状态的思考。如果进入了消极的状态，想想自己是因为哪种想法进入的，想想这个想法是事实还是观点，是事实，就努力行动，解决问题；是观点，往往是自己骗自己，不要管它。在生活中，将好的与正能量的东西视为事实，向自己提醒。借助这个道理，我逃出了内卷的漩涡，逃出了自我的内耗束缚，正向地生活着。</p>\n<p>我开始规律地洗漱与睡眠，因为它能够让我身体健康。开始与人们交流自己的真实感受，我发现自己能够与人们产生共鸣了。我开始觉得合群并不重要，它并不是一个需要你自卑的东西。我也深刻认识到，只要有梦想，我们的方向真的不一样，内卷与内耗都十分的不必要。我开始规划自己的学习，实现自己想要的效果。所以现在我恒久地走在自己的路上，看着自己的目标一点点实现。期待在路上遇到不同的人…</p>\n<p>最后想和你说：一个明确的规划，一个不需要顾及别人观点的理由，足以让你专注于自己的事情。<br>足以让你显露出自己的个性，你也终将找到自己的梦想，没必要将他人作为自己的目标。</p>\n<p><img src=\"/img/scheme1.png\" alt=\"整体规划的一角\"></p>\n<p><img src=\"/img/scheme2.png\" alt=\"学习规划的一角\"></p>\n<p>最后，加油，希望你能够早日走出阴霾！</p>\n<blockquote>\n<p>End…</p>\n</blockquote>"},{"title":"我的新尝试-HTML学习日记","date":"2024-05-14T11:16:26.000Z","_content":"\n有时候觉得把自己努力的过程记录下来，后来回望也知道自己是如何走到现在的结果的，是一个很浪漫的事情。\n<!--more-->\n\n近些天空闲的时间是越来越多了，这样的时间最常见的消耗方式，对我来说有俩\n>  一是在某些开放世界游戏里过剧情，尤其是你又一直期望着这些剧情会更好，结果真的是快看睡了，\n或是一天因为自己想抽卡的愿望肝到5-6个小时。\n抽卡这件事其实并不是多坏的事情，\n毕竟还有一种解释，既然这种努力是艰难的，那也是一种为自己的目标奋斗的过程。\n> \n> 二是睡觉，在不断寻找自己活着是为啥，在找寻可以做的事情时，一本书启发了我，睡觉是健脑的。\n因而我肯定不能让闹钟坏了我的好事，尤其是午后时光，一睡就是3个小时。\n\n平常的课程感觉就这样的状态还是可以应付的过去的。就在这舒适的生活中，一位老友联系上我，让我做一个小程序，\n咱想着总算有机会可以试试前端开发的水了，我就提出可以试一试，也是给自己一个目标。\n>第一，想着自己做一个，一看涉及到vue、js开发，完全从0开始搭建。害，别吓我，还有人做过的模板呢，拿来用不就好。\n>第二，想着找模板，我一看，网上像样的模板搞到了上千块钱，没钱，算了吧.\n>第三，找官方模板，人家说不合要求。\n所以总算这件事没谈成。\n\n不过总算是有收获，这就是这次尝试学习三件套的动机，无论是经济收益还是自学经验都是对以后的收益。\n\n## 5/14 复习之前的知识\n\n一个模版，所有用html的都熟悉。\n```HTML\n<!Doctype html>\n<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<title>标题</title>\n</head>\n\n<body>\n\t<h1>你好!</h1>\n\t<p>这是一个HTML页面。</p>\n</body>\n</html>\n```\n这时我就在想，如何做到在我的博客上能够预览这段代码的结果呢？\n将预览的HTML页面做成一个集合页面放到左边的栏里不就行了。\n这样我就可以在这里直接引用这个文件了。http://moniwarmth.top/html\n初期的网页十分粗糙，这个网页会随着我的学习不断迭代的，满足各位读者姥爷的期待。\n\n期间也学习了网页与图片在html中的表示，不过单独在此列出有些多余，演示都在左边那个栏里。\n同时为喜欢学习前端的童鞋们推荐一下编辑器。\n**Vscode**，很早的时候就很喜欢它的主题，只不过配置编译太过复杂一直没用，它在编写HTML时，有一个插件是`live preview`，可以一边编辑一边看效果，很赞。\n写这篇文章使用的**sublime text**也很推荐。\n\n这就是今天作的简单复习。\n\n## 5/17 字体整合表示\n\n>多的那些，关于咱具体学到了啥就不说了。\n>首先废话几句，唉，终于到了期待的周末了。\n>我不得不说，学习HTML是一个十分畅快的过程，看看今晚写的小故事吧\n>可能小对话写的不怎么样，不过通过字体变化刻画心理真的挺好玩的哈！\n\n总共的字体格式，后面可能会再补充吧，就这些\n大的，小的，下标的，上标的，粗的，斜的，带解释的，代码型的。\n\n另外还有感觉上很好用的一行以及换行符，加上以后感觉页面美观度又升了一级！\n不过现在也不指望多好看，等到学CSS了必定让它飞跃提升好吧！\n\n> Another Happy Day..\n\n## 5/25 黑塔转圈圈制作心得\n\n> 原网页＆灵感来源 请见： https://www.suiyil.cn/tool/herta_kuru/ \n\n想着实在是学CSS了就得做点不一样的东西嘛，当时恰好翻浏览器的历史记录就找到了这个小网页\n实际上人家的实现是比较复杂的，实际的效果与已有网站的效果也有差异之处\n一次项目实战有点让我措手不及的感觉，很多地方不会实现需要上网查\n当然也有查自己之前写过的html文件，有时看自己之前知道的很多很让自己汗颜。\n~~所以这一次不能再重学了！一定得坚持下去~~\n这次实现一共是有这么几个小问题，通过搜索也解决掉了。\n没想到HTML中属性的灵活度这么高，真是觉得越学越有劲头了。\n\n### 1.HTML中如何加入与播放音频文件\n\n首先是用audio标签声明你要用一个音频文件，然后在标签内嵌套一个source标签来声明引用文件的地址与类型\n（此处audio要通过按钮来控制播放，所以必须分开一个一个定义，每一个有单独的id才可以独立控制播放）\n\n代码是这样子的\n```Javascript\n\tvar x1 = document.getElementById(\"one\");\n\t/* 假如说我们有一个id为one的audio标签，用这个方法来使js变量链接到标签 */\n\t/* 在HTML那里，就是<audio id= \"one\"><source src=\"...\" type=\"...\"></audio>*/\n\tif(...)\n\t\tx1.play();\n\t/*可以使用函数或者if语句来控制播放，播放使用play()函数。*/\n```\n\n另外一说，C语言与JS语言是真的像，我就按C语言写的if语句，到现在没出过啥大的问题。\n\n### 2.如何使用css做出网页那样的按钮\n\n此处就涉及到对于button标签(也就是按钮)的style属性了，下面列一些昨天学到的。\n（注，关于数字的基本上单位都是px，也就是像素）\n\n> background-color 就是按钮背景色\n> border 有无边框\n> border-radius 圆角力度，越大越圆\n> padding 按钮中间文字与边框之间的距离\n> color 文字颜色\n> font-family 按钮文字字体\n> font-weight 加不加粗\n> font-size（关于数字的只有这个例外，单位是em）字体大小\n> position 一般从（relative、absolute、fixed）里面选\n> box-shadow 在下面加固定面积的阴影\n\n另外，那个鼠标悬停在按钮上变色的特效是通过修改hover(写法是`#id.hover:`)中的background-color属性实现的。\n\n### 3.如何做到文字与图片在一行\n\n把文字与图片放在div容器里统一管理，然后设置div的style如下\n\n```CSS\n            display: flex;\n            justify-content: center;\n```\n\n### 4.图片怎么做到半透明的（参考网页中间的黑塔）\n\n实际上并不算实现了，我只是把黑塔图片给弄透明了然后在后面放了个紫色的背景\n关于透明的CSS属性，它是opacity，它没有单位，是一个从0到1的值，值越大，越不透明。\n\n### 5.一个很复杂的问题，描述如下\n\n写动画的时候，我注意到那个图片转完了之后会回到网页的右边，\n按照印象来说，正常工作相当于是点一次创建一个黑塔，然后动画完成就没了。\n于是我通过这些代码复现了这个过程，解决了这个问题。\n\n```Javascript\n\t/*首先添加黑塔，也就是设置好元素的elem*/\n\tdocument.appendChild(elem);\n\t/*然后加一个计时器，在动画结束时删除黑塔*/\n\tsetTimeout(function() {\n\t\tdocument.body.removeChild(elem);\n\t}, 1400)\n\t/*后面这个是毫秒ms*/\n```\n\n### 6.动画是怎么实现的\n\n还是万能的CSS，使用了其中的两个属性。\n一个是图片的animation属性\n在图片中加进去就好，后面有一串属性，暂时不清楚所有的意义，只知道和时间与运动方向有关。\n\n第二个是@keyframes\n在这个语句中，定义了动画的关键帧，也就是在动画的什么阶段动画的“画”到哪里了。\n以下是该网页的例子\n\n```CSS\n        @keyframes move {\n        from {\n            top: 100px;\n            left: calc(100% + 500px);\n        }\n\n        100% {\n            top: 100px;\n            left: calc(0% - 500px);\n        }\n    }\n```\n\n总之就是这几个问题，\n还是觉得独立地解决综合问题收获最多。\n开发过程很开心.\n\n## 6.10 新HTML学习页心得\n\n很多天没有碰HTML了，这些天学习任务紧了起来，加上平时作息需要少有时间能够进行课外学习了。趁着这个端午节假期赶紧给补了起来。\n\n很久以来觉得HTML的intro页布局散乱，不好看，借着之前的知识，给安排成了赛博朋克的风格, 还给加上了背景音乐, 感觉离个性化编辑这个主题又进了一步\n\n### 改intro页的动机\n\n昨天学了div标签,但是div是一个集合,并没有什么代表性的效果,也就是说,它有用,什么都可以由它做出来,但是它太底层了,于是没有特点,做不成一个单独的项目,看着之前列表项目里改过的起始页,我就想着再改一改,让它好看一点.\n\n本来想要实现当鼠标悬停在某一个项目上会自动出现描述的效果的.\n感觉布局上有点太复杂, 而且可能把背景的视频挡住.\n就放下了这个想法(实现的话使用a标签+frame)\n\n起初是看着我一直都喜欢的一张像素画，然后想着把网页的背景图改成那张图片。\n\n![原画师@PHHHZ，在B站和站酷都可以找到](/HTML/dream.png)\n\n后来想到米哈游校招页上的背景视频，瞬间就想到可以把主页上夜幕微暖的那个背景改成视频。\n奈何主题的ejs文件都是一个复杂的系统，css文件都是存在服务器上的，要是改的话得自己重写一份CSS文件。\n于是嫌太麻烦了就没搞，又回到主目标上。\n\n起初参考了必应搜索的第一个，字节跳动的起始页，结果文字和视频老是分开的，而且遮罩也不管用了。\n\n![错误情况，大小调不好，文字不在视频上面](/img/error1.png)\n\n然后参考第二个，终于现在做出来像样的了。\n\n### 步骤\n\n首先是加一个`<video>`元素\n\n```html\n\t<video src=\"/bgvideo.mp4\" preload=\"auto\" loop playsinline autoplay muted=\"muted\"></video>\n```\n惯例的，定义视频的地址，自动循环播放。\n\n然后重点就来了，CSS的部分。\n首先设置video，宽高都占满网页，\n然后设置object-fit填充方式为cover，\n它可以保证你视频是尽可能正常显示的，尽管可能会截掉一部分\n\n```css\n\tvideo {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tobject-fit: cover;\n\t\tposition: absolute;\n\t\topacity: 30%;\n\t}\n```\n\n这样的话视频就可以在一个固定位置上了。\n这里的opacity是和body里的background-color一起用创建遮罩效果的。\n（body里的这个属性是什么颜色，遮罩就是什么颜色）\n\n```css\n        body {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            background-color: #000; /*这是一个黑色*/\n        }\n```\n\n现在就是这样的效果了。 \nhttps://moniwarmth.top/html\n\n### 其他的小效果是怎么实现的？\n\n> 无疑的，三个都是CSS实现的。\n\n1. 字体发光\n\n使用一个属性，text-shadow，然后设置发光的长宽高是多少，后面是颜色。\n下面是拿p标签来示例\n\n```CSS\n\tp{\n\t\ttext-shadow: 1px 1px 2px aqua;\n\t}\n\t/*这样是发数码蓝的那种颜色（aqua），如果没有就是发文字本来颜色的光*/\n```\n更多可以去MDN上搜一搜这个属性\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow\n\n2. 字前面有符号（实际上也可以是图片）\n\n设置你需要加符号的标签的before子类。\n\n```CSS\n\tp::before{\n\t\tcontent: →; /*或者可以使用url函数引入图片文件*，但图片尺寸需要小一点*/\n\t\tcolor: red;\n\t}\n```\n\n不废话啦，先push到网页上了。- :)\n\n![](/img/first_trial.png)\n\n","source":"_posts/我的新尝试-HTML学习日记.md","raw":"---\ntitle: 我的新尝试-HTML学习日记\ndate: 2024-05-14 19:16:26\ntags: HTML学习\n---\n\n有时候觉得把自己努力的过程记录下来，后来回望也知道自己是如何走到现在的结果的，是一个很浪漫的事情。\n<!--more-->\n\n近些天空闲的时间是越来越多了，这样的时间最常见的消耗方式，对我来说有俩\n>  一是在某些开放世界游戏里过剧情，尤其是你又一直期望着这些剧情会更好，结果真的是快看睡了，\n或是一天因为自己想抽卡的愿望肝到5-6个小时。\n抽卡这件事其实并不是多坏的事情，\n毕竟还有一种解释，既然这种努力是艰难的，那也是一种为自己的目标奋斗的过程。\n> \n> 二是睡觉，在不断寻找自己活着是为啥，在找寻可以做的事情时，一本书启发了我，睡觉是健脑的。\n因而我肯定不能让闹钟坏了我的好事，尤其是午后时光，一睡就是3个小时。\n\n平常的课程感觉就这样的状态还是可以应付的过去的。就在这舒适的生活中，一位老友联系上我，让我做一个小程序，\n咱想着总算有机会可以试试前端开发的水了，我就提出可以试一试，也是给自己一个目标。\n>第一，想着自己做一个，一看涉及到vue、js开发，完全从0开始搭建。害，别吓我，还有人做过的模板呢，拿来用不就好。\n>第二，想着找模板，我一看，网上像样的模板搞到了上千块钱，没钱，算了吧.\n>第三，找官方模板，人家说不合要求。\n所以总算这件事没谈成。\n\n不过总算是有收获，这就是这次尝试学习三件套的动机，无论是经济收益还是自学经验都是对以后的收益。\n\n## 5/14 复习之前的知识\n\n一个模版，所有用html的都熟悉。\n```HTML\n<!Doctype html>\n<html>\n\t<head>\n\t<meta charset=\"utf-8\">\n\t<title>标题</title>\n</head>\n\n<body>\n\t<h1>你好!</h1>\n\t<p>这是一个HTML页面。</p>\n</body>\n</html>\n```\n这时我就在想，如何做到在我的博客上能够预览这段代码的结果呢？\n将预览的HTML页面做成一个集合页面放到左边的栏里不就行了。\n这样我就可以在这里直接引用这个文件了。http://moniwarmth.top/html\n初期的网页十分粗糙，这个网页会随着我的学习不断迭代的，满足各位读者姥爷的期待。\n\n期间也学习了网页与图片在html中的表示，不过单独在此列出有些多余，演示都在左边那个栏里。\n同时为喜欢学习前端的童鞋们推荐一下编辑器。\n**Vscode**，很早的时候就很喜欢它的主题，只不过配置编译太过复杂一直没用，它在编写HTML时，有一个插件是`live preview`，可以一边编辑一边看效果，很赞。\n写这篇文章使用的**sublime text**也很推荐。\n\n这就是今天作的简单复习。\n\n## 5/17 字体整合表示\n\n>多的那些，关于咱具体学到了啥就不说了。\n>首先废话几句，唉，终于到了期待的周末了。\n>我不得不说，学习HTML是一个十分畅快的过程，看看今晚写的小故事吧\n>可能小对话写的不怎么样，不过通过字体变化刻画心理真的挺好玩的哈！\n\n总共的字体格式，后面可能会再补充吧，就这些\n大的，小的，下标的，上标的，粗的，斜的，带解释的，代码型的。\n\n另外还有感觉上很好用的一行以及换行符，加上以后感觉页面美观度又升了一级！\n不过现在也不指望多好看，等到学CSS了必定让它飞跃提升好吧！\n\n> Another Happy Day..\n\n## 5/25 黑塔转圈圈制作心得\n\n> 原网页＆灵感来源 请见： https://www.suiyil.cn/tool/herta_kuru/ \n\n想着实在是学CSS了就得做点不一样的东西嘛，当时恰好翻浏览器的历史记录就找到了这个小网页\n实际上人家的实现是比较复杂的，实际的效果与已有网站的效果也有差异之处\n一次项目实战有点让我措手不及的感觉，很多地方不会实现需要上网查\n当然也有查自己之前写过的html文件，有时看自己之前知道的很多很让自己汗颜。\n~~所以这一次不能再重学了！一定得坚持下去~~\n这次实现一共是有这么几个小问题，通过搜索也解决掉了。\n没想到HTML中属性的灵活度这么高，真是觉得越学越有劲头了。\n\n### 1.HTML中如何加入与播放音频文件\n\n首先是用audio标签声明你要用一个音频文件，然后在标签内嵌套一个source标签来声明引用文件的地址与类型\n（此处audio要通过按钮来控制播放，所以必须分开一个一个定义，每一个有单独的id才可以独立控制播放）\n\n代码是这样子的\n```Javascript\n\tvar x1 = document.getElementById(\"one\");\n\t/* 假如说我们有一个id为one的audio标签，用这个方法来使js变量链接到标签 */\n\t/* 在HTML那里，就是<audio id= \"one\"><source src=\"...\" type=\"...\"></audio>*/\n\tif(...)\n\t\tx1.play();\n\t/*可以使用函数或者if语句来控制播放，播放使用play()函数。*/\n```\n\n另外一说，C语言与JS语言是真的像，我就按C语言写的if语句，到现在没出过啥大的问题。\n\n### 2.如何使用css做出网页那样的按钮\n\n此处就涉及到对于button标签(也就是按钮)的style属性了，下面列一些昨天学到的。\n（注，关于数字的基本上单位都是px，也就是像素）\n\n> background-color 就是按钮背景色\n> border 有无边框\n> border-radius 圆角力度，越大越圆\n> padding 按钮中间文字与边框之间的距离\n> color 文字颜色\n> font-family 按钮文字字体\n> font-weight 加不加粗\n> font-size（关于数字的只有这个例外，单位是em）字体大小\n> position 一般从（relative、absolute、fixed）里面选\n> box-shadow 在下面加固定面积的阴影\n\n另外，那个鼠标悬停在按钮上变色的特效是通过修改hover(写法是`#id.hover:`)中的background-color属性实现的。\n\n### 3.如何做到文字与图片在一行\n\n把文字与图片放在div容器里统一管理，然后设置div的style如下\n\n```CSS\n            display: flex;\n            justify-content: center;\n```\n\n### 4.图片怎么做到半透明的（参考网页中间的黑塔）\n\n实际上并不算实现了，我只是把黑塔图片给弄透明了然后在后面放了个紫色的背景\n关于透明的CSS属性，它是opacity，它没有单位，是一个从0到1的值，值越大，越不透明。\n\n### 5.一个很复杂的问题，描述如下\n\n写动画的时候，我注意到那个图片转完了之后会回到网页的右边，\n按照印象来说，正常工作相当于是点一次创建一个黑塔，然后动画完成就没了。\n于是我通过这些代码复现了这个过程，解决了这个问题。\n\n```Javascript\n\t/*首先添加黑塔，也就是设置好元素的elem*/\n\tdocument.appendChild(elem);\n\t/*然后加一个计时器，在动画结束时删除黑塔*/\n\tsetTimeout(function() {\n\t\tdocument.body.removeChild(elem);\n\t}, 1400)\n\t/*后面这个是毫秒ms*/\n```\n\n### 6.动画是怎么实现的\n\n还是万能的CSS，使用了其中的两个属性。\n一个是图片的animation属性\n在图片中加进去就好，后面有一串属性，暂时不清楚所有的意义，只知道和时间与运动方向有关。\n\n第二个是@keyframes\n在这个语句中，定义了动画的关键帧，也就是在动画的什么阶段动画的“画”到哪里了。\n以下是该网页的例子\n\n```CSS\n        @keyframes move {\n        from {\n            top: 100px;\n            left: calc(100% + 500px);\n        }\n\n        100% {\n            top: 100px;\n            left: calc(0% - 500px);\n        }\n    }\n```\n\n总之就是这几个问题，\n还是觉得独立地解决综合问题收获最多。\n开发过程很开心.\n\n## 6.10 新HTML学习页心得\n\n很多天没有碰HTML了，这些天学习任务紧了起来，加上平时作息需要少有时间能够进行课外学习了。趁着这个端午节假期赶紧给补了起来。\n\n很久以来觉得HTML的intro页布局散乱，不好看，借着之前的知识，给安排成了赛博朋克的风格, 还给加上了背景音乐, 感觉离个性化编辑这个主题又进了一步\n\n### 改intro页的动机\n\n昨天学了div标签,但是div是一个集合,并没有什么代表性的效果,也就是说,它有用,什么都可以由它做出来,但是它太底层了,于是没有特点,做不成一个单独的项目,看着之前列表项目里改过的起始页,我就想着再改一改,让它好看一点.\n\n本来想要实现当鼠标悬停在某一个项目上会自动出现描述的效果的.\n感觉布局上有点太复杂, 而且可能把背景的视频挡住.\n就放下了这个想法(实现的话使用a标签+frame)\n\n起初是看着我一直都喜欢的一张像素画，然后想着把网页的背景图改成那张图片。\n\n![原画师@PHHHZ，在B站和站酷都可以找到](/HTML/dream.png)\n\n后来想到米哈游校招页上的背景视频，瞬间就想到可以把主页上夜幕微暖的那个背景改成视频。\n奈何主题的ejs文件都是一个复杂的系统，css文件都是存在服务器上的，要是改的话得自己重写一份CSS文件。\n于是嫌太麻烦了就没搞，又回到主目标上。\n\n起初参考了必应搜索的第一个，字节跳动的起始页，结果文字和视频老是分开的，而且遮罩也不管用了。\n\n![错误情况，大小调不好，文字不在视频上面](/img/error1.png)\n\n然后参考第二个，终于现在做出来像样的了。\n\n### 步骤\n\n首先是加一个`<video>`元素\n\n```html\n\t<video src=\"/bgvideo.mp4\" preload=\"auto\" loop playsinline autoplay muted=\"muted\"></video>\n```\n惯例的，定义视频的地址，自动循环播放。\n\n然后重点就来了，CSS的部分。\n首先设置video，宽高都占满网页，\n然后设置object-fit填充方式为cover，\n它可以保证你视频是尽可能正常显示的，尽管可能会截掉一部分\n\n```css\n\tvideo {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tobject-fit: cover;\n\t\tposition: absolute;\n\t\topacity: 30%;\n\t}\n```\n\n这样的话视频就可以在一个固定位置上了。\n这里的opacity是和body里的background-color一起用创建遮罩效果的。\n（body里的这个属性是什么颜色，遮罩就是什么颜色）\n\n```css\n        body {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            background-color: #000; /*这是一个黑色*/\n        }\n```\n\n现在就是这样的效果了。 \nhttps://moniwarmth.top/html\n\n### 其他的小效果是怎么实现的？\n\n> 无疑的，三个都是CSS实现的。\n\n1. 字体发光\n\n使用一个属性，text-shadow，然后设置发光的长宽高是多少，后面是颜色。\n下面是拿p标签来示例\n\n```CSS\n\tp{\n\t\ttext-shadow: 1px 1px 2px aqua;\n\t}\n\t/*这样是发数码蓝的那种颜色（aqua），如果没有就是发文字本来颜色的光*/\n```\n更多可以去MDN上搜一搜这个属性\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow\n\n2. 字前面有符号（实际上也可以是图片）\n\n设置你需要加符号的标签的before子类。\n\n```CSS\n\tp::before{\n\t\tcontent: →; /*或者可以使用url函数引入图片文件*，但图片尺寸需要小一点*/\n\t\tcolor: red;\n\t}\n```\n\n不废话啦，先push到网页上了。- :)\n\n![](/img/first_trial.png)\n\n","slug":"我的新尝试-HTML学习日记","published":1,"updated":"2024-06-10T05:42:44.253Z","_id":"clx775ny50016zkuecc1jet1b","comments":1,"layout":"post","photos":[],"link":"","content":"<p>有时候觉得把自己努力的过程记录下来，后来回望也知道自己是如何走到现在的结果的，是一个很浪漫的事情。</p>\n<span id=\"more\"></span>\n\n<p>近些天空闲的时间是越来越多了，这样的时间最常见的消耗方式，对我来说有俩</p>\n<blockquote>\n<p> 一是在某些开放世界游戏里过剧情，尤其是你又一直期望着这些剧情会更好，结果真的是快看睡了，<br>或是一天因为自己想抽卡的愿望肝到5-6个小时。<br>抽卡这件事其实并不是多坏的事情，<br>毕竟还有一种解释，既然这种努力是艰难的，那也是一种为自己的目标奋斗的过程。</p>\n<p>二是睡觉，在不断寻找自己活着是为啥，在找寻可以做的事情时，一本书启发了我，睡觉是健脑的。<br>因而我肯定不能让闹钟坏了我的好事，尤其是午后时光，一睡就是3个小时。</p>\n</blockquote>\n<p>平常的课程感觉就这样的状态还是可以应付的过去的。就在这舒适的生活中，一位老友联系上我，让我做一个小程序，<br>咱想着总算有机会可以试试前端开发的水了，我就提出可以试一试，也是给自己一个目标。</p>\n<blockquote>\n<p>第一，想着自己做一个，一看涉及到vue、js开发，完全从0开始搭建。害，别吓我，还有人做过的模板呢，拿来用不就好。<br>第二，想着找模板，我一看，网上像样的模板搞到了上千块钱，没钱，算了吧.<br>第三，找官方模板，人家说不合要求。<br>所以总算这件事没谈成。</p>\n</blockquote>\n<p>不过总算是有收获，这就是这次尝试学习三件套的动机，无论是经济收益还是自学经验都是对以后的收益。</p>\n<h2 id=\"5-14-复习之前的知识\"><a href=\"#5-14-复习之前的知识\" class=\"headerlink\" title=\"5&#x2F;14 复习之前的知识\"></a>5&#x2F;14 复习之前的知识</h2><p>一个模版，所有用html的都熟悉。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!Doctype <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>你好!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个HTML页面。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这时我就在想，如何做到在我的博客上能够预览这段代码的结果呢？<br>将预览的HTML页面做成一个集合页面放到左边的栏里不就行了。<br>这样我就可以在这里直接引用这个文件了。<a href=\"http://moniwarmth.top/html\">http://moniwarmth.top/html</a><br>初期的网页十分粗糙，这个网页会随着我的学习不断迭代的，满足各位读者姥爷的期待。</p>\n<p>期间也学习了网页与图片在html中的表示，不过单独在此列出有些多余，演示都在左边那个栏里。<br>同时为喜欢学习前端的童鞋们推荐一下编辑器。<br><strong>Vscode</strong>，很早的时候就很喜欢它的主题，只不过配置编译太过复杂一直没用，它在编写HTML时，有一个插件是<code>live preview</code>，可以一边编辑一边看效果，很赞。<br>写这篇文章使用的<strong>sublime text</strong>也很推荐。</p>\n<p>这就是今天作的简单复习。</p>\n<h2 id=\"5-17-字体整合表示\"><a href=\"#5-17-字体整合表示\" class=\"headerlink\" title=\"5&#x2F;17 字体整合表示\"></a>5&#x2F;17 字体整合表示</h2><blockquote>\n<p>多的那些，关于咱具体学到了啥就不说了。<br>首先废话几句，唉，终于到了期待的周末了。<br>我不得不说，学习HTML是一个十分畅快的过程，看看今晚写的小故事吧<br>可能小对话写的不怎么样，不过通过字体变化刻画心理真的挺好玩的哈！</p>\n</blockquote>\n<p>总共的字体格式，后面可能会再补充吧，就这些<br>大的，小的，下标的，上标的，粗的，斜的，带解释的，代码型的。</p>\n<p>另外还有感觉上很好用的一行以及换行符，加上以后感觉页面美观度又升了一级！<br>不过现在也不指望多好看，等到学CSS了必定让它飞跃提升好吧！</p>\n<blockquote>\n<p>Another Happy Day..</p>\n</blockquote>\n<h2 id=\"5-25-黑塔转圈圈制作心得\"><a href=\"#5-25-黑塔转圈圈制作心得\" class=\"headerlink\" title=\"5&#x2F;25 黑塔转圈圈制作心得\"></a>5&#x2F;25 黑塔转圈圈制作心得</h2><blockquote>\n<p>原网页＆灵感来源 请见： <a href=\"https://www.suiyil.cn/tool/herta_kuru/\">https://www.suiyil.cn/tool/herta_kuru/</a> </p>\n</blockquote>\n<p>想着实在是学CSS了就得做点不一样的东西嘛，当时恰好翻浏览器的历史记录就找到了这个小网页<br>实际上人家的实现是比较复杂的，实际的效果与已有网站的效果也有差异之处<br>一次项目实战有点让我措手不及的感觉，很多地方不会实现需要上网查<br>当然也有查自己之前写过的html文件，有时看自己之前知道的很多很让自己汗颜。<br><del>所以这一次不能再重学了！一定得坚持下去</del><br>这次实现一共是有这么几个小问题，通过搜索也解决掉了。<br>没想到HTML中属性的灵活度这么高，真是觉得越学越有劲头了。</p>\n<h3 id=\"1-HTML中如何加入与播放音频文件\"><a href=\"#1-HTML中如何加入与播放音频文件\" class=\"headerlink\" title=\"1.HTML中如何加入与播放音频文件\"></a>1.HTML中如何加入与播放音频文件</h3><p>首先是用audio标签声明你要用一个音频文件，然后在标签内嵌套一个source标签来声明引用文件的地址与类型<br>（此处audio要通过按钮来控制播放，所以必须分开一个一个定义，每一个有单独的id才可以独立控制播放）</p>\n<p>代码是这样子的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;one&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">/* 假如说我们有一个id为one的audio标签，用这个方法来使js变量链接到标签 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 在HTML那里，就是&lt;audio id= &quot;one&quot;&gt;&lt;source src=&quot;...&quot; type=&quot;...&quot;&gt;&lt;/audio&gt;*/</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(...)</span><br><span class=\"line\">\tx1.<span class=\"title function_\">play</span>();</span><br><span class=\"line\"><span class=\"comment\">/*可以使用函数或者if语句来控制播放，播放使用play()函数。*/</span></span><br></pre></td></tr></table></figure>\n\n<p>另外一说，C语言与JS语言是真的像，我就按C语言写的if语句，到现在没出过啥大的问题。</p>\n<h3 id=\"2-如何使用css做出网页那样的按钮\"><a href=\"#2-如何使用css做出网页那样的按钮\" class=\"headerlink\" title=\"2.如何使用css做出网页那样的按钮\"></a>2.如何使用css做出网页那样的按钮</h3><p>此处就涉及到对于button标签(也就是按钮)的style属性了，下面列一些昨天学到的。<br>（注，关于数字的基本上单位都是px，也就是像素）</p>\n<blockquote>\n<p>background-color 就是按钮背景色<br>border 有无边框<br>border-radius 圆角力度，越大越圆<br>padding 按钮中间文字与边框之间的距离<br>color 文字颜色<br>font-family 按钮文字字体<br>font-weight 加不加粗<br>font-size（关于数字的只有这个例外，单位是em）字体大小<br>position 一般从（relative、absolute、fixed）里面选<br>box-shadow 在下面加固定面积的阴影</p>\n</blockquote>\n<p>另外，那个鼠标悬停在按钮上变色的特效是通过修改hover(写法是<code>#id.hover:</code>)中的background-color属性实现的。</p>\n<h3 id=\"3-如何做到文字与图片在一行\"><a href=\"#3-如何做到文字与图片在一行\" class=\"headerlink\" title=\"3.如何做到文字与图片在一行\"></a>3.如何做到文字与图片在一行</h3><p>把文字与图片放在div容器里统一管理，然后设置div的style如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\"><span class=\"attribute\">justify-content</span>: center;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-图片怎么做到半透明的（参考网页中间的黑塔）\"><a href=\"#4-图片怎么做到半透明的（参考网页中间的黑塔）\" class=\"headerlink\" title=\"4.图片怎么做到半透明的（参考网页中间的黑塔）\"></a>4.图片怎么做到半透明的（参考网页中间的黑塔）</h3><p>实际上并不算实现了，我只是把黑塔图片给弄透明了然后在后面放了个紫色的背景<br>关于透明的CSS属性，它是opacity，它没有单位，是一个从0到1的值，值越大，越不透明。</p>\n<h3 id=\"5-一个很复杂的问题，描述如下\"><a href=\"#5-一个很复杂的问题，描述如下\" class=\"headerlink\" title=\"5.一个很复杂的问题，描述如下\"></a>5.一个很复杂的问题，描述如下</h3><p>写动画的时候，我注意到那个图片转完了之后会回到网页的右边，<br>按照印象来说，正常工作相当于是点一次创建一个黑塔，然后动画完成就没了。<br>于是我通过这些代码复现了这个过程，解决了这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*首先添加黑塔，也就是设置好元素的elem*/</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">appendChild</span>(elem);</span><br><span class=\"line\"><span class=\"comment\">/*然后加一个计时器，在动画结束时删除黑塔*/</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(elem);</span><br><span class=\"line\">&#125;, <span class=\"number\">1400</span>)</span><br><span class=\"line\"><span class=\"comment\">/*后面这个是毫秒ms*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-动画是怎么实现的\"><a href=\"#6-动画是怎么实现的\" class=\"headerlink\" title=\"6.动画是怎么实现的\"></a>6.动画是怎么实现的</h3><p>还是万能的CSS，使用了其中的两个属性。<br>一个是图片的animation属性<br>在图片中加进去就好，后面有一串属性，暂时不清楚所有的意义，只知道和时间与运动方向有关。</p>\n<p>第二个是@keyframes<br>在这个语句中，定义了动画的关键帧，也就是在动画的什么阶段动画的“画”到哪里了。<br>以下是该网页的例子</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">@keyframes</span> move &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"built_in\">calc</span>(<span class=\"number\">100%</span> + <span class=\"number\">500px</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"built_in\">calc</span>(<span class=\"number\">0%</span> - <span class=\"number\">500px</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总之就是这几个问题，<br>还是觉得独立地解决综合问题收获最多。<br>开发过程很开心.</p>\n<h2 id=\"6-10-新HTML学习页心得\"><a href=\"#6-10-新HTML学习页心得\" class=\"headerlink\" title=\"6.10 新HTML学习页心得\"></a>6.10 新HTML学习页心得</h2><p>很多天没有碰HTML了，这些天学习任务紧了起来，加上平时作息需要少有时间能够进行课外学习了。趁着这个端午节假期赶紧给补了起来。</p>\n<p>很久以来觉得HTML的intro页布局散乱，不好看，借着之前的知识，给安排成了赛博朋克的风格, 还给加上了背景音乐, 感觉离个性化编辑这个主题又进了一步</p>\n<h3 id=\"改intro页的动机\"><a href=\"#改intro页的动机\" class=\"headerlink\" title=\"改intro页的动机\"></a>改intro页的动机</h3><p>昨天学了div标签,但是div是一个集合,并没有什么代表性的效果,也就是说,它有用,什么都可以由它做出来,但是它太底层了,于是没有特点,做不成一个单独的项目,看着之前列表项目里改过的起始页,我就想着再改一改,让它好看一点.</p>\n<p>本来想要实现当鼠标悬停在某一个项目上会自动出现描述的效果的.<br>感觉布局上有点太复杂, 而且可能把背景的视频挡住.<br>就放下了这个想法(实现的话使用a标签+frame)</p>\n<p>起初是看着我一直都喜欢的一张像素画，然后想着把网页的背景图改成那张图片。</p>\n<p><img src=\"/HTML/dream.png\" alt=\"原画师@PHHHZ，在B站和站酷都可以找到\"></p>\n<p>后来想到米哈游校招页上的背景视频，瞬间就想到可以把主页上夜幕微暖的那个背景改成视频。<br>奈何主题的ejs文件都是一个复杂的系统，css文件都是存在服务器上的，要是改的话得自己重写一份CSS文件。<br>于是嫌太麻烦了就没搞，又回到主目标上。</p>\n<p>起初参考了必应搜索的第一个，字节跳动的起始页，结果文字和视频老是分开的，而且遮罩也不管用了。</p>\n<p><img src=\"/img/error1.png\" alt=\"错误情况，大小调不好，文字不在视频上面\"></p>\n<p>然后参考第二个，终于现在做出来像样的了。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>首先是加一个<code>&lt;video&gt;</code>元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/bgvideo.mp4&quot;</span> <span class=\"attr\">preload</span>=<span class=\"string\">&quot;auto&quot;</span> <span class=\"attr\">loop</span> <span class=\"attr\">playsinline</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">muted</span>=<span class=\"string\">&quot;muted&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>惯例的，定义视频的地址，自动循环播放。</p>\n<p>然后重点就来了，CSS的部分。<br>首先设置video，宽高都占满网页，<br>然后设置object-fit填充方式为cover，<br>它可以保证你视频是尽可能正常显示的，尽管可能会截掉一部分</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">video</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">object-fit</span>: cover;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">30%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话视频就可以在一个固定位置上了。<br>这里的opacity是和body里的background-color一起用创建遮罩效果的。<br>（body里的这个属性是什么颜色，遮罩就是什么颜色）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>; <span class=\"comment\">/*这是一个黑色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在就是这样的效果了。<br><a href=\"https://moniwarmth.top/html\">https://moniwarmth.top/html</a></p>\n<h3 id=\"其他的小效果是怎么实现的？\"><a href=\"#其他的小效果是怎么实现的？\" class=\"headerlink\" title=\"其他的小效果是怎么实现的？\"></a>其他的小效果是怎么实现的？</h3><blockquote>\n<p>无疑的，三个都是CSS实现的。</p>\n</blockquote>\n<ol>\n<li>字体发光</li>\n</ol>\n<p>使用一个属性，text-shadow，然后设置发光的长宽高是多少，后面是颜色。<br>下面是拿p标签来示例</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">2px</span> aqua;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*这样是发数码蓝的那种颜色（aqua），如果没有就是发文字本来颜色的光*/</span></span><br></pre></td></tr></table></figure>\n<p>更多可以去MDN上搜一搜这个属性<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow</a></p>\n<ol start=\"2\">\n<li>字前面有符号（实际上也可以是图片）</li>\n</ol>\n<p>设置你需要加符号的标签的before子类。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">content</span>: →; <span class=\"comment\">/*或者可以使用url函数引入图片文件*，但图片尺寸需要小一点*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不废话啦，先push到网页上了。- :)</p>\n<p><img src=\"/img/first_trial.png\"></p>\n","site":{"data":{}},"excerpt":"<p>有时候觉得把自己努力的过程记录下来，后来回望也知道自己是如何走到现在的结果的，是一个很浪漫的事情。</p>","more":"<p>近些天空闲的时间是越来越多了，这样的时间最常见的消耗方式，对我来说有俩</p>\n<blockquote>\n<p> 一是在某些开放世界游戏里过剧情，尤其是你又一直期望着这些剧情会更好，结果真的是快看睡了，<br>或是一天因为自己想抽卡的愿望肝到5-6个小时。<br>抽卡这件事其实并不是多坏的事情，<br>毕竟还有一种解释，既然这种努力是艰难的，那也是一种为自己的目标奋斗的过程。</p>\n<p>二是睡觉，在不断寻找自己活着是为啥，在找寻可以做的事情时，一本书启发了我，睡觉是健脑的。<br>因而我肯定不能让闹钟坏了我的好事，尤其是午后时光，一睡就是3个小时。</p>\n</blockquote>\n<p>平常的课程感觉就这样的状态还是可以应付的过去的。就在这舒适的生活中，一位老友联系上我，让我做一个小程序，<br>咱想着总算有机会可以试试前端开发的水了，我就提出可以试一试，也是给自己一个目标。</p>\n<blockquote>\n<p>第一，想着自己做一个，一看涉及到vue、js开发，完全从0开始搭建。害，别吓我，还有人做过的模板呢，拿来用不就好。<br>第二，想着找模板，我一看，网上像样的模板搞到了上千块钱，没钱，算了吧.<br>第三，找官方模板，人家说不合要求。<br>所以总算这件事没谈成。</p>\n</blockquote>\n<p>不过总算是有收获，这就是这次尝试学习三件套的动机，无论是经济收益还是自学经验都是对以后的收益。</p>\n<h2 id=\"5-14-复习之前的知识\"><a href=\"#5-14-复习之前的知识\" class=\"headerlink\" title=\"5&#x2F;14 复习之前的知识\"></a>5&#x2F;14 复习之前的知识</h2><p>一个模版，所有用html的都熟悉。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!Doctype <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>你好!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个HTML页面。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这时我就在想，如何做到在我的博客上能够预览这段代码的结果呢？<br>将预览的HTML页面做成一个集合页面放到左边的栏里不就行了。<br>这样我就可以在这里直接引用这个文件了。<a href=\"http://moniwarmth.top/html\">http://moniwarmth.top/html</a><br>初期的网页十分粗糙，这个网页会随着我的学习不断迭代的，满足各位读者姥爷的期待。</p>\n<p>期间也学习了网页与图片在html中的表示，不过单独在此列出有些多余，演示都在左边那个栏里。<br>同时为喜欢学习前端的童鞋们推荐一下编辑器。<br><strong>Vscode</strong>，很早的时候就很喜欢它的主题，只不过配置编译太过复杂一直没用，它在编写HTML时，有一个插件是<code>live preview</code>，可以一边编辑一边看效果，很赞。<br>写这篇文章使用的<strong>sublime text</strong>也很推荐。</p>\n<p>这就是今天作的简单复习。</p>\n<h2 id=\"5-17-字体整合表示\"><a href=\"#5-17-字体整合表示\" class=\"headerlink\" title=\"5&#x2F;17 字体整合表示\"></a>5&#x2F;17 字体整合表示</h2><blockquote>\n<p>多的那些，关于咱具体学到了啥就不说了。<br>首先废话几句，唉，终于到了期待的周末了。<br>我不得不说，学习HTML是一个十分畅快的过程，看看今晚写的小故事吧<br>可能小对话写的不怎么样，不过通过字体变化刻画心理真的挺好玩的哈！</p>\n</blockquote>\n<p>总共的字体格式，后面可能会再补充吧，就这些<br>大的，小的，下标的，上标的，粗的，斜的，带解释的，代码型的。</p>\n<p>另外还有感觉上很好用的一行以及换行符，加上以后感觉页面美观度又升了一级！<br>不过现在也不指望多好看，等到学CSS了必定让它飞跃提升好吧！</p>\n<blockquote>\n<p>Another Happy Day..</p>\n</blockquote>\n<h2 id=\"5-25-黑塔转圈圈制作心得\"><a href=\"#5-25-黑塔转圈圈制作心得\" class=\"headerlink\" title=\"5&#x2F;25 黑塔转圈圈制作心得\"></a>5&#x2F;25 黑塔转圈圈制作心得</h2><blockquote>\n<p>原网页＆灵感来源 请见： <a href=\"https://www.suiyil.cn/tool/herta_kuru/\">https://www.suiyil.cn/tool/herta_kuru/</a> </p>\n</blockquote>\n<p>想着实在是学CSS了就得做点不一样的东西嘛，当时恰好翻浏览器的历史记录就找到了这个小网页<br>实际上人家的实现是比较复杂的，实际的效果与已有网站的效果也有差异之处<br>一次项目实战有点让我措手不及的感觉，很多地方不会实现需要上网查<br>当然也有查自己之前写过的html文件，有时看自己之前知道的很多很让自己汗颜。<br><del>所以这一次不能再重学了！一定得坚持下去</del><br>这次实现一共是有这么几个小问题，通过搜索也解决掉了。<br>没想到HTML中属性的灵活度这么高，真是觉得越学越有劲头了。</p>\n<h3 id=\"1-HTML中如何加入与播放音频文件\"><a href=\"#1-HTML中如何加入与播放音频文件\" class=\"headerlink\" title=\"1.HTML中如何加入与播放音频文件\"></a>1.HTML中如何加入与播放音频文件</h3><p>首先是用audio标签声明你要用一个音频文件，然后在标签内嵌套一个source标签来声明引用文件的地址与类型<br>（此处audio要通过按钮来控制播放，所以必须分开一个一个定义，每一个有单独的id才可以独立控制播放）</p>\n<p>代码是这样子的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;one&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">/* 假如说我们有一个id为one的audio标签，用这个方法来使js变量链接到标签 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 在HTML那里，就是&lt;audio id= &quot;one&quot;&gt;&lt;source src=&quot;...&quot; type=&quot;...&quot;&gt;&lt;/audio&gt;*/</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(...)</span><br><span class=\"line\">\tx1.<span class=\"title function_\">play</span>();</span><br><span class=\"line\"><span class=\"comment\">/*可以使用函数或者if语句来控制播放，播放使用play()函数。*/</span></span><br></pre></td></tr></table></figure>\n\n<p>另外一说，C语言与JS语言是真的像，我就按C语言写的if语句，到现在没出过啥大的问题。</p>\n<h3 id=\"2-如何使用css做出网页那样的按钮\"><a href=\"#2-如何使用css做出网页那样的按钮\" class=\"headerlink\" title=\"2.如何使用css做出网页那样的按钮\"></a>2.如何使用css做出网页那样的按钮</h3><p>此处就涉及到对于button标签(也就是按钮)的style属性了，下面列一些昨天学到的。<br>（注，关于数字的基本上单位都是px，也就是像素）</p>\n<blockquote>\n<p>background-color 就是按钮背景色<br>border 有无边框<br>border-radius 圆角力度，越大越圆<br>padding 按钮中间文字与边框之间的距离<br>color 文字颜色<br>font-family 按钮文字字体<br>font-weight 加不加粗<br>font-size（关于数字的只有这个例外，单位是em）字体大小<br>position 一般从（relative、absolute、fixed）里面选<br>box-shadow 在下面加固定面积的阴影</p>\n</blockquote>\n<p>另外，那个鼠标悬停在按钮上变色的特效是通过修改hover(写法是<code>#id.hover:</code>)中的background-color属性实现的。</p>\n<h3 id=\"3-如何做到文字与图片在一行\"><a href=\"#3-如何做到文字与图片在一行\" class=\"headerlink\" title=\"3.如何做到文字与图片在一行\"></a>3.如何做到文字与图片在一行</h3><p>把文字与图片放在div容器里统一管理，然后设置div的style如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\"><span class=\"attribute\">justify-content</span>: center;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-图片怎么做到半透明的（参考网页中间的黑塔）\"><a href=\"#4-图片怎么做到半透明的（参考网页中间的黑塔）\" class=\"headerlink\" title=\"4.图片怎么做到半透明的（参考网页中间的黑塔）\"></a>4.图片怎么做到半透明的（参考网页中间的黑塔）</h3><p>实际上并不算实现了，我只是把黑塔图片给弄透明了然后在后面放了个紫色的背景<br>关于透明的CSS属性，它是opacity，它没有单位，是一个从0到1的值，值越大，越不透明。</p>\n<h3 id=\"5-一个很复杂的问题，描述如下\"><a href=\"#5-一个很复杂的问题，描述如下\" class=\"headerlink\" title=\"5.一个很复杂的问题，描述如下\"></a>5.一个很复杂的问题，描述如下</h3><p>写动画的时候，我注意到那个图片转完了之后会回到网页的右边，<br>按照印象来说，正常工作相当于是点一次创建一个黑塔，然后动画完成就没了。<br>于是我通过这些代码复现了这个过程，解决了这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*首先添加黑塔，也就是设置好元素的elem*/</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">appendChild</span>(elem);</span><br><span class=\"line\"><span class=\"comment\">/*然后加一个计时器，在动画结束时删除黑塔*/</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(elem);</span><br><span class=\"line\">&#125;, <span class=\"number\">1400</span>)</span><br><span class=\"line\"><span class=\"comment\">/*后面这个是毫秒ms*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-动画是怎么实现的\"><a href=\"#6-动画是怎么实现的\" class=\"headerlink\" title=\"6.动画是怎么实现的\"></a>6.动画是怎么实现的</h3><p>还是万能的CSS，使用了其中的两个属性。<br>一个是图片的animation属性<br>在图片中加进去就好，后面有一串属性，暂时不清楚所有的意义，只知道和时间与运动方向有关。</p>\n<p>第二个是@keyframes<br>在这个语句中，定义了动画的关键帧，也就是在动画的什么阶段动画的“画”到哪里了。<br>以下是该网页的例子</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">@keyframes</span> move &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"built_in\">calc</span>(<span class=\"number\">100%</span> + <span class=\"number\">500px</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">left</span>: <span class=\"built_in\">calc</span>(<span class=\"number\">0%</span> - <span class=\"number\">500px</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总之就是这几个问题，<br>还是觉得独立地解决综合问题收获最多。<br>开发过程很开心.</p>\n<h2 id=\"6-10-新HTML学习页心得\"><a href=\"#6-10-新HTML学习页心得\" class=\"headerlink\" title=\"6.10 新HTML学习页心得\"></a>6.10 新HTML学习页心得</h2><p>很多天没有碰HTML了，这些天学习任务紧了起来，加上平时作息需要少有时间能够进行课外学习了。趁着这个端午节假期赶紧给补了起来。</p>\n<p>很久以来觉得HTML的intro页布局散乱，不好看，借着之前的知识，给安排成了赛博朋克的风格, 还给加上了背景音乐, 感觉离个性化编辑这个主题又进了一步</p>\n<h3 id=\"改intro页的动机\"><a href=\"#改intro页的动机\" class=\"headerlink\" title=\"改intro页的动机\"></a>改intro页的动机</h3><p>昨天学了div标签,但是div是一个集合,并没有什么代表性的效果,也就是说,它有用,什么都可以由它做出来,但是它太底层了,于是没有特点,做不成一个单独的项目,看着之前列表项目里改过的起始页,我就想着再改一改,让它好看一点.</p>\n<p>本来想要实现当鼠标悬停在某一个项目上会自动出现描述的效果的.<br>感觉布局上有点太复杂, 而且可能把背景的视频挡住.<br>就放下了这个想法(实现的话使用a标签+frame)</p>\n<p>起初是看着我一直都喜欢的一张像素画，然后想着把网页的背景图改成那张图片。</p>\n<p><img src=\"/HTML/dream.png\" alt=\"原画师@PHHHZ，在B站和站酷都可以找到\"></p>\n<p>后来想到米哈游校招页上的背景视频，瞬间就想到可以把主页上夜幕微暖的那个背景改成视频。<br>奈何主题的ejs文件都是一个复杂的系统，css文件都是存在服务器上的，要是改的话得自己重写一份CSS文件。<br>于是嫌太麻烦了就没搞，又回到主目标上。</p>\n<p>起初参考了必应搜索的第一个，字节跳动的起始页，结果文字和视频老是分开的，而且遮罩也不管用了。</p>\n<p><img src=\"/img/error1.png\" alt=\"错误情况，大小调不好，文字不在视频上面\"></p>\n<p>然后参考第二个，终于现在做出来像样的了。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>首先是加一个<code>&lt;video&gt;</code>元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/bgvideo.mp4&quot;</span> <span class=\"attr\">preload</span>=<span class=\"string\">&quot;auto&quot;</span> <span class=\"attr\">loop</span> <span class=\"attr\">playsinline</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">muted</span>=<span class=\"string\">&quot;muted&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>惯例的，定义视频的地址，自动循环播放。</p>\n<p>然后重点就来了，CSS的部分。<br>首先设置video，宽高都占满网页，<br>然后设置object-fit填充方式为cover，<br>它可以保证你视频是尽可能正常显示的，尽管可能会截掉一部分</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">video</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">object-fit</span>: cover;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">30%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话视频就可以在一个固定位置上了。<br>这里的opacity是和body里的background-color一起用创建遮罩效果的。<br>（body里的这个属性是什么颜色，遮罩就是什么颜色）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>; <span class=\"comment\">/*这是一个黑色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在就是这样的效果了。<br><a href=\"https://moniwarmth.top/html\">https://moniwarmth.top/html</a></p>\n<h3 id=\"其他的小效果是怎么实现的？\"><a href=\"#其他的小效果是怎么实现的？\" class=\"headerlink\" title=\"其他的小效果是怎么实现的？\"></a>其他的小效果是怎么实现的？</h3><blockquote>\n<p>无疑的，三个都是CSS实现的。</p>\n</blockquote>\n<ol>\n<li>字体发光</li>\n</ol>\n<p>使用一个属性，text-shadow，然后设置发光的长宽高是多少，后面是颜色。<br>下面是拿p标签来示例</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">2px</span> aqua;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*这样是发数码蓝的那种颜色（aqua），如果没有就是发文字本来颜色的光*/</span></span><br></pre></td></tr></table></figure>\n<p>更多可以去MDN上搜一搜这个属性<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow</a></p>\n<ol start=\"2\">\n<li>字前面有符号（实际上也可以是图片）</li>\n</ol>\n<p>设置你需要加符号的标签的before子类。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">content</span>: →; <span class=\"comment\">/*或者可以使用url函数引入图片文件*，但图片尺寸需要小一点*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不废话啦，先push到网页上了。- :)</p>\n<p><img src=\"/img/first_trial.png\"></p>"},{"title":"数组","date":"2023-11-06T17:32:04.000Z","_content":"# 数组概论（Ver 2）\n\n战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。\n今天大体讲一下关于数组的内容，看完就可以使用来做题了。\n\n目录请见群里发送的图片\n<!--more-->\n\n## 1.数组基本用法\n### 1.1 数组的初始化 \n\n我们知道，要使用一个变量，我们需要先“声明”才能够使用，\n数组也是这样的，但作为一个数据容器，它还有大小这个参数。\n大体格式是这样的。\n\n```C\n\t<数据类型> <标识符>[长度];\n\t//也可以在长度后面加上={}，但是数组不确定的时候，没必要。\n```\n这里的**数据类型**就是我们常用的int,double,char等等，\n表示数组内元素的数据类型\n\n**标识符**是数组的名称，命名时也符合变量的命名规范\n比如这样\n\n>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，\n>不能使用关键字（会语法高亮的字比如int）\n>最好使用这种形式 数据类型的首字母加上名称，如iArray1\n\n**长度**是可以省略的，但只在数组完全确定的时候。\n但是我们在做题的过程中一般不使用确定的数组\n（数组可以预先指定好元素的值，如下例）\n一般是题目告诉我们最多的时候数据有多少个，\n我们一般取很大的数，如1000、10000等。\n像iArray0这样。\n\n```C\n\tint iArray0[1000]; //相信我，这会是你们用的频率最多的那种。\n\tint iArray1[5] = {1,2,3,4,5}; //确定数组\n\tint iArray2[5] = {1,2,3}      //int与double类型都是空位补零。\n\tint iArray3[] = {1,2,3,4,5}   //省略长度，相当于iArray1\n```\n\n其中，对于iArray3，规定了长度，但是没有确定完5个元素，\n其他的元素对于int类型数组用0填上\n但对于char类型的数组，用的是一个字符`\\0`，以后学字符串的时候会接触到\n这个字符提前，那么输出的时候就会提前结束。\n### 1.2 数组的数据储存输出\n\n已经声明完了，那么接下来就是往容器里加入数据\n方式依旧是我们惯用的scanf函数。\n但是这里就要到一个很容易错的点了：**下标**\n先看下面的演示，我们这样来写入数据\n\n```C\n\t//这也是一种惯用模式吧，像今天下午老师总结的那个\n\tfor(int i = 0;i <= n;i++)\n\t{\n\t\tscanf(\"%d\",&iArray0[i])\n\t}\n\t// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉\n```\n\n相信聪明的你已经看到了，我们的**i是从0开始取的**，\n那么`iArray0[0]`也就表示在`iArray0`数组里的第一项，所以最后的一项的下标是n - 1。\n这个特性一定要记好，要好好练习啊！\n（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）\n\n那么也像储存一样，我们也是用printf函数加上for循环来输出的\n（这比起某种语言真的太麻烦啦！差评）\n\n所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。\n## 2.多维数组\n\n也是简单一说，在平常做题的时候这种数组不会很频繁地用到。\n如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。\n就像下面这样\n    0   1   2\n0  \n1  \n2\n二维数组用两个参数确定一个值，\n也就是说在**scanf输入、声明、printf输出**的时候也需要两个括号。\n几维数组就是几个括号，其他的表示方式其实与一维数组差不多。\n\n> 1.空位自动补上对应的数值\n> 2.在数组确定的时候是可以省略长度参数的\n> 3.确定的时候稍有不同，可以有两种确定方式，如下。\n\n```C\n\tint iArray4[1000][1000];  //最常用的,等待输入\n\tint iArray5[2][5] = {{1,2,3,4,5},{2,3,4,5,6}};\n\t//或者int iArray5[2][5] = {1,2,3,4,5,2,3,4,5,6};\n```\n\n## 3.数组的应用场景\n\n从这几次周赛的题目来看，我们使用数组的目的是**储存数据**，\n也就是当我们**需要不止一次地遍历数据，而且数据很多**的时候，我们就可以使用数组。\n（不多的时候，两三个直接用变量存就好了）\n这里拿出两种题，\n一种是n个数求和，我们定义一个sum变量，\n直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。\n但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，\n这就需要遍历数组了，需要在输入之后再次使用所有数据。\n\n所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。\n我的分享到此结束！谢谢大家的时间！\n\n\n\n","source":"_posts/数组-1.md","raw":"---\ntitle: 数组\ndate: 2023-11-07 01:32:04\ntags: C语言学习\n---\n# 数组概论（Ver 2）\n\n战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。\n今天大体讲一下关于数组的内容，看完就可以使用来做题了。\n\n目录请见群里发送的图片\n<!--more-->\n\n## 1.数组基本用法\n### 1.1 数组的初始化 \n\n我们知道，要使用一个变量，我们需要先“声明”才能够使用，\n数组也是这样的，但作为一个数据容器，它还有大小这个参数。\n大体格式是这样的。\n\n```C\n\t<数据类型> <标识符>[长度];\n\t//也可以在长度后面加上={}，但是数组不确定的时候，没必要。\n```\n这里的**数据类型**就是我们常用的int,double,char等等，\n表示数组内元素的数据类型\n\n**标识符**是数组的名称，命名时也符合变量的命名规范\n比如这样\n\n>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，\n>不能使用关键字（会语法高亮的字比如int）\n>最好使用这种形式 数据类型的首字母加上名称，如iArray1\n\n**长度**是可以省略的，但只在数组完全确定的时候。\n但是我们在做题的过程中一般不使用确定的数组\n（数组可以预先指定好元素的值，如下例）\n一般是题目告诉我们最多的时候数据有多少个，\n我们一般取很大的数，如1000、10000等。\n像iArray0这样。\n\n```C\n\tint iArray0[1000]; //相信我，这会是你们用的频率最多的那种。\n\tint iArray1[5] = {1,2,3,4,5}; //确定数组\n\tint iArray2[5] = {1,2,3}      //int与double类型都是空位补零。\n\tint iArray3[] = {1,2,3,4,5}   //省略长度，相当于iArray1\n```\n\n其中，对于iArray3，规定了长度，但是没有确定完5个元素，\n其他的元素对于int类型数组用0填上\n但对于char类型的数组，用的是一个字符`\\0`，以后学字符串的时候会接触到\n这个字符提前，那么输出的时候就会提前结束。\n### 1.2 数组的数据储存输出\n\n已经声明完了，那么接下来就是往容器里加入数据\n方式依旧是我们惯用的scanf函数。\n但是这里就要到一个很容易错的点了：**下标**\n先看下面的演示，我们这样来写入数据\n\n```C\n\t//这也是一种惯用模式吧，像今天下午老师总结的那个\n\tfor(int i = 0;i <= n;i++)\n\t{\n\t\tscanf(\"%d\",&iArray0[i])\n\t}\n\t// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉\n```\n\n相信聪明的你已经看到了，我们的**i是从0开始取的**，\n那么`iArray0[0]`也就表示在`iArray0`数组里的第一项，所以最后的一项的下标是n - 1。\n这个特性一定要记好，要好好练习啊！\n（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）\n\n那么也像储存一样，我们也是用printf函数加上for循环来输出的\n（这比起某种语言真的太麻烦啦！差评）\n\n所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。\n## 2.多维数组\n\n也是简单一说，在平常做题的时候这种数组不会很频繁地用到。\n如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。\n就像下面这样\n    0   1   2\n0  \n1  \n2\n二维数组用两个参数确定一个值，\n也就是说在**scanf输入、声明、printf输出**的时候也需要两个括号。\n几维数组就是几个括号，其他的表示方式其实与一维数组差不多。\n\n> 1.空位自动补上对应的数值\n> 2.在数组确定的时候是可以省略长度参数的\n> 3.确定的时候稍有不同，可以有两种确定方式，如下。\n\n```C\n\tint iArray4[1000][1000];  //最常用的,等待输入\n\tint iArray5[2][5] = {{1,2,3,4,5},{2,3,4,5,6}};\n\t//或者int iArray5[2][5] = {1,2,3,4,5,2,3,4,5,6};\n```\n\n## 3.数组的应用场景\n\n从这几次周赛的题目来看，我们使用数组的目的是**储存数据**，\n也就是当我们**需要不止一次地遍历数据，而且数据很多**的时候，我们就可以使用数组。\n（不多的时候，两三个直接用变量存就好了）\n这里拿出两种题，\n一种是n个数求和，我们定义一个sum变量，\n直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。\n但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，\n这就需要遍历数组了，需要在输入之后再次使用所有数据。\n\n所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。\n我的分享到此结束！谢谢大家的时间！\n\n\n\n","slug":"数组-1","published":1,"updated":"2023-11-21T00:47:42.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775ny6001azkuecjno3jm0","content":"<h1 id=\"数组概论（Ver-2）\"><a href=\"#数组概论（Ver-2）\" class=\"headerlink\" title=\"数组概论（Ver 2）\"></a>数组概论（Ver 2）</h1><p>战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。<br>今天大体讲一下关于数组的内容，看完就可以使用来做题了。</p>\n<p>目录请见群里发送的图片</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-数组基本用法\"><a href=\"#1-数组基本用法\" class=\"headerlink\" title=\"1.数组基本用法\"></a>1.数组基本用法</h2><h3 id=\"1-1-数组的初始化\"><a href=\"#1-1-数组的初始化\" class=\"headerlink\" title=\"1.1 数组的初始化\"></a>1.1 数组的初始化</h3><p>我们知道，要使用一个变量，我们需要先“声明”才能够使用，<br>数组也是这样的，但作为一个数据容器，它还有大小这个参数。<br>大体格式是这样的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;数据类型&gt; &lt;标识符&gt;[长度];</span><br><span class=\"line\"><span class=\"comment\">//也可以在长度后面加上=&#123;&#125;，但是数组不确定的时候，没必要。</span></span><br></pre></td></tr></table></figure>\n<p>这里的<strong>数据类型</strong>就是我们常用的int,double,char等等，<br>表示数组内元素的数据类型</p>\n<p><strong>标识符</strong>是数组的名称，命名时也符合变量的命名规范<br>比如这样</p>\n<blockquote>\n<p>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，<br>不能使用关键字（会语法高亮的字比如int）<br>最好使用这种形式 数据类型的首字母加上名称，如iArray1</p>\n</blockquote>\n<p><strong>长度</strong>是可以省略的，但只在数组完全确定的时候。<br>但是我们在做题的过程中一般不使用确定的数组<br>（数组可以预先指定好元素的值，如下例）<br>一般是题目告诉我们最多的时候数据有多少个，<br>我们一般取很大的数，如1000、10000等。<br>像iArray0这样。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> iArray0[<span class=\"number\">1000</span>]; <span class=\"comment\">//相信我，这会是你们用的频率最多的那种。</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray1[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;; <span class=\"comment\">//确定数组</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray2[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;      <span class=\"comment\">//int与double类型都是空位补零。</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray3[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;   <span class=\"comment\">//省略长度，相当于iArray1</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，对于iArray3，规定了长度，但是没有确定完5个元素，<br>其他的元素对于int类型数组用0填上<br>但对于char类型的数组，用的是一个字符<code>\\0</code>，以后学字符串的时候会接触到<br>这个字符提前，那么输出的时候就会提前结束。</p>\n<h3 id=\"1-2-数组的数据储存输出\"><a href=\"#1-2-数组的数据储存输出\" class=\"headerlink\" title=\"1.2 数组的数据储存输出\"></a>1.2 数组的数据储存输出</h3><p>已经声明完了，那么接下来就是往容器里加入数据<br>方式依旧是我们惯用的scanf函数。<br>但是这里就要到一个很容易错的点了：<strong>下标</strong><br>先看下面的演示，我们这样来写入数据</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这也是一种惯用模式吧，像今天下午老师总结的那个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt;= n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;iArray0[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉</span></span><br></pre></td></tr></table></figure>\n\n<p>相信聪明的你已经看到了，我们的<strong>i是从0开始取的</strong>，<br>那么<code>iArray0[0]</code>也就表示在<code>iArray0</code>数组里的第一项，所以最后的一项的下标是n - 1。<br>这个特性一定要记好，要好好练习啊！<br>（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）</p>\n<p>那么也像储存一样，我们也是用printf函数加上for循环来输出的<br>（这比起某种语言真的太麻烦啦！差评）</p>\n<p>所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。</p>\n<h2 id=\"2-多维数组\"><a href=\"#2-多维数组\" class=\"headerlink\" title=\"2.多维数组\"></a>2.多维数组</h2><p>也是简单一说，在平常做题的时候这种数组不会很频繁地用到。<br>如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。<br>就像下面这样<br>    0   1   2<br>0<br>1<br>2<br>二维数组用两个参数确定一个值，<br>也就是说在<strong>scanf输入、声明、printf输出</strong>的时候也需要两个括号。<br>几维数组就是几个括号，其他的表示方式其实与一维数组差不多。</p>\n<blockquote>\n<p>1.空位自动补上对应的数值<br>2.在数组确定的时候是可以省略长度参数的<br>3.确定的时候稍有不同，可以有两种确定方式，如下。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> iArray4[<span class=\"number\">1000</span>][<span class=\"number\">1000</span>];  <span class=\"comment\">//最常用的,等待输入</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray5[<span class=\"number\">2</span>][<span class=\"number\">5</span>] = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;,&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//或者int iArray5[2][5] = &#123;1,2,3,4,5,2,3,4,5,6&#125;;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-数组的应用场景\"><a href=\"#3-数组的应用场景\" class=\"headerlink\" title=\"3.数组的应用场景\"></a>3.数组的应用场景</h2><p>从这几次周赛的题目来看，我们使用数组的目的是<strong>储存数据</strong>，<br>也就是当我们<strong>需要不止一次地遍历数据，而且数据很多</strong>的时候，我们就可以使用数组。<br>（不多的时候，两三个直接用变量存就好了）<br>这里拿出两种题，<br>一种是n个数求和，我们定义一个sum变量，<br>直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。<br>但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，<br>这就需要遍历数组了，需要在输入之后再次使用所有数据。</p>\n<p>所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。<br>我的分享到此结束！谢谢大家的时间！</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"数组概论（Ver-2）\"><a href=\"#数组概论（Ver-2）\" class=\"headerlink\" title=\"数组概论（Ver 2）\"></a>数组概论（Ver 2）</h1><p>战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。<br>今天大体讲一下关于数组的内容，看完就可以使用来做题了。</p>\n<p>目录请见群里发送的图片</p>","more":"<h2 id=\"1-数组基本用法\"><a href=\"#1-数组基本用法\" class=\"headerlink\" title=\"1.数组基本用法\"></a>1.数组基本用法</h2><h3 id=\"1-1-数组的初始化\"><a href=\"#1-1-数组的初始化\" class=\"headerlink\" title=\"1.1 数组的初始化\"></a>1.1 数组的初始化</h3><p>我们知道，要使用一个变量，我们需要先“声明”才能够使用，<br>数组也是这样的，但作为一个数据容器，它还有大小这个参数。<br>大体格式是这样的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;数据类型&gt; &lt;标识符&gt;[长度];</span><br><span class=\"line\"><span class=\"comment\">//也可以在长度后面加上=&#123;&#125;，但是数组不确定的时候，没必要。</span></span><br></pre></td></tr></table></figure>\n<p>这里的<strong>数据类型</strong>就是我们常用的int,double,char等等，<br>表示数组内元素的数据类型</p>\n<p><strong>标识符</strong>是数组的名称，命名时也符合变量的命名规范<br>比如这样</p>\n<blockquote>\n<p>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，<br>不能使用关键字（会语法高亮的字比如int）<br>最好使用这种形式 数据类型的首字母加上名称，如iArray1</p>\n</blockquote>\n<p><strong>长度</strong>是可以省略的，但只在数组完全确定的时候。<br>但是我们在做题的过程中一般不使用确定的数组<br>（数组可以预先指定好元素的值，如下例）<br>一般是题目告诉我们最多的时候数据有多少个，<br>我们一般取很大的数，如1000、10000等。<br>像iArray0这样。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> iArray0[<span class=\"number\">1000</span>]; <span class=\"comment\">//相信我，这会是你们用的频率最多的那种。</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray1[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;; <span class=\"comment\">//确定数组</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray2[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;      <span class=\"comment\">//int与double类型都是空位补零。</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray3[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;   <span class=\"comment\">//省略长度，相当于iArray1</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，对于iArray3，规定了长度，但是没有确定完5个元素，<br>其他的元素对于int类型数组用0填上<br>但对于char类型的数组，用的是一个字符<code>\\0</code>，以后学字符串的时候会接触到<br>这个字符提前，那么输出的时候就会提前结束。</p>\n<h3 id=\"1-2-数组的数据储存输出\"><a href=\"#1-2-数组的数据储存输出\" class=\"headerlink\" title=\"1.2 数组的数据储存输出\"></a>1.2 数组的数据储存输出</h3><p>已经声明完了，那么接下来就是往容器里加入数据<br>方式依旧是我们惯用的scanf函数。<br>但是这里就要到一个很容易错的点了：<strong>下标</strong><br>先看下面的演示，我们这样来写入数据</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这也是一种惯用模式吧，像今天下午老师总结的那个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt;= n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;iArray0[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉</span></span><br></pre></td></tr></table></figure>\n\n<p>相信聪明的你已经看到了，我们的<strong>i是从0开始取的</strong>，<br>那么<code>iArray0[0]</code>也就表示在<code>iArray0</code>数组里的第一项，所以最后的一项的下标是n - 1。<br>这个特性一定要记好，要好好练习啊！<br>（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）</p>\n<p>那么也像储存一样，我们也是用printf函数加上for循环来输出的<br>（这比起某种语言真的太麻烦啦！差评）</p>\n<p>所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。</p>\n<h2 id=\"2-多维数组\"><a href=\"#2-多维数组\" class=\"headerlink\" title=\"2.多维数组\"></a>2.多维数组</h2><p>也是简单一说，在平常做题的时候这种数组不会很频繁地用到。<br>如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。<br>就像下面这样<br>    0   1   2<br>0<br>1<br>2<br>二维数组用两个参数确定一个值，<br>也就是说在<strong>scanf输入、声明、printf输出</strong>的时候也需要两个括号。<br>几维数组就是几个括号，其他的表示方式其实与一维数组差不多。</p>\n<blockquote>\n<p>1.空位自动补上对应的数值<br>2.在数组确定的时候是可以省略长度参数的<br>3.确定的时候稍有不同，可以有两种确定方式，如下。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> iArray4[<span class=\"number\">1000</span>][<span class=\"number\">1000</span>];  <span class=\"comment\">//最常用的,等待输入</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray5[<span class=\"number\">2</span>][<span class=\"number\">5</span>] = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;,&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//或者int iArray5[2][5] = &#123;1,2,3,4,5,2,3,4,5,6&#125;;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-数组的应用场景\"><a href=\"#3-数组的应用场景\" class=\"headerlink\" title=\"3.数组的应用场景\"></a>3.数组的应用场景</h2><p>从这几次周赛的题目来看，我们使用数组的目的是<strong>储存数据</strong>，<br>也就是当我们<strong>需要不止一次地遍历数据，而且数据很多</strong>的时候，我们就可以使用数组。<br>（不多的时候，两三个直接用变量存就好了）<br>这里拿出两种题，<br>一种是n个数求和，我们定义一个sum变量，<br>直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。<br>但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，<br>这就需要遍历数组了，需要在输入之后再次使用所有数据。</p>\n<p>所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。<br>我的分享到此结束！谢谢大家的时间！</p>"},{"title":"流程控制方法","date":"2023-08-30T07:54:46.000Z","_content":"今天，在大多数编程语言中，都提供两种循环结构，一种是**以数据容器为基础的**，一种是**以条件为基础的**。\n<!--more-->\n\n\n**if语句**\n==\n你其实能发现，这一页可以构成一个粗略的if嵌套循环。\n\nif语句的最简单构成是\n```Python\nif expression:\n\tstatements\n```\n如果expression返回值为真，则执行statements，否则执行下面的语句。\n\n如果想让它对两种互补的情况操作，\n```Python\nif expression:\n\tstatements_for_true\nelse:\n\tstatements_for_false\n```\n如果有更多的情况\n```Python\nif expression1:\n\tstatements_for_expresson1_True\nelif expression2:\n\tstatements_for_expression2_True\nelif expression2:\n\tstatements_for_expression3_True\n```\n其中，*elif*是*else if*的缩写，用法相同。\n\n\n\n**for循环**\n==\n用来对于数据容器(**尤其是有序容器**)中的数据逐个操作的循环\nfor循环是以集合为基础的循环。\nfor后的‘for i in is’，如果`i in is`为*False*\n即**i无值或is为空的**\n则下面的语句不会被执行。\n\n#continue #break #pass\n\nContinue、Break和Pass语句\n==\n*Continue*语句将忽略其后的语句开始下一次循环。\n*Break*从此结束循环。\n*Pass*什么也不干，是用来占位的。\n\n\nwhile循环\n==\nwhile循环的格式如下\n```Python\nwhile expression:\n\tstatements\n```\n\n","source":"_posts/流程控制方法.md","raw":"---\ntitle: 流程控制方法\ndate: 2023-08-30 15:54:46\ntags:\ncategories:\n\tpython学习\n---\n今天，在大多数编程语言中，都提供两种循环结构，一种是**以数据容器为基础的**，一种是**以条件为基础的**。\n<!--more-->\n\n\n**if语句**\n==\n你其实能发现，这一页可以构成一个粗略的if嵌套循环。\n\nif语句的最简单构成是\n```Python\nif expression:\n\tstatements\n```\n如果expression返回值为真，则执行statements，否则执行下面的语句。\n\n如果想让它对两种互补的情况操作，\n```Python\nif expression:\n\tstatements_for_true\nelse:\n\tstatements_for_false\n```\n如果有更多的情况\n```Python\nif expression1:\n\tstatements_for_expresson1_True\nelif expression2:\n\tstatements_for_expression2_True\nelif expression2:\n\tstatements_for_expression3_True\n```\n其中，*elif*是*else if*的缩写，用法相同。\n\n\n\n**for循环**\n==\n用来对于数据容器(**尤其是有序容器**)中的数据逐个操作的循环\nfor循环是以集合为基础的循环。\nfor后的‘for i in is’，如果`i in is`为*False*\n即**i无值或is为空的**\n则下面的语句不会被执行。\n\n#continue #break #pass\n\nContinue、Break和Pass语句\n==\n*Continue*语句将忽略其后的语句开始下一次循环。\n*Break*从此结束循环。\n*Pass*什么也不干，是用来占位的。\n\n\nwhile循环\n==\nwhile循环的格式如下\n```Python\nwhile expression:\n\tstatements\n```\n\n","slug":"流程控制方法","published":1,"updated":"2023-11-20T12:08:07.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775ny7001dzkue7yvk36yp","content":"<p>今天，在大多数编程语言中，都提供两种循环结构，一种是<strong>以数据容器为基础的</strong>，一种是<strong>以条件为基础的</strong>。</p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a><strong>if语句</strong></h1><p>你其实能发现，这一页可以构成一个粗略的if嵌套循环。</p>\n<p>if语句的最简单构成是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression:</span><br><span class=\"line\">\tstatements</span><br></pre></td></tr></table></figure>\n<p>如果expression返回值为真，则执行statements，否则执行下面的语句。</p>\n<p>如果想让它对两种互补的情况操作，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression:</span><br><span class=\"line\">\tstatements_for_true</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tstatements_for_false</span><br></pre></td></tr></table></figure>\n<p>如果有更多的情况</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression1:</span><br><span class=\"line\">\tstatements_for_expresson1_True</span><br><span class=\"line\"><span class=\"keyword\">elif</span> expression2:</span><br><span class=\"line\">\tstatements_for_expression2_True</span><br><span class=\"line\"><span class=\"keyword\">elif</span> expression2:</span><br><span class=\"line\">\tstatements_for_expression3_True</span><br></pre></td></tr></table></figure>\n<p>其中，<em>elif</em>是<em>else if</em>的缩写，用法相同。</p>\n<h1 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a><strong>for循环</strong></h1><p>用来对于数据容器(<strong>尤其是有序容器</strong>)中的数据逐个操作的循环<br>for循环是以集合为基础的循环。<br>for后的‘for i in is’，如果<code>i in is</code>为<em>False</em><br>即<strong>i无值或is为空的</strong><br>则下面的语句不会被执行。</p>\n<p>#continue #break #pass</p>\n<h1 id=\"Continue、Break和Pass语句\"><a href=\"#Continue、Break和Pass语句\" class=\"headerlink\" title=\"Continue、Break和Pass语句\"></a>Continue、Break和Pass语句</h1><p><em>Continue</em>语句将忽略其后的语句开始下一次循环。<br><em>Break</em>从此结束循环。<br><em>Pass</em>什么也不干，是用来占位的。</p>\n<h1 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h1><p>while循环的格式如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> expression:</span><br><span class=\"line\">\tstatements</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>今天，在大多数编程语言中，都提供两种循环结构，一种是<strong>以数据容器为基础的</strong>，一种是<strong>以条件为基础的</strong>。</p>","more":"<h1 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a><strong>if语句</strong></h1><p>你其实能发现，这一页可以构成一个粗略的if嵌套循环。</p>\n<p>if语句的最简单构成是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression:</span><br><span class=\"line\">\tstatements</span><br></pre></td></tr></table></figure>\n<p>如果expression返回值为真，则执行statements，否则执行下面的语句。</p>\n<p>如果想让它对两种互补的情况操作，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression:</span><br><span class=\"line\">\tstatements_for_true</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tstatements_for_false</span><br></pre></td></tr></table></figure>\n<p>如果有更多的情况</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression1:</span><br><span class=\"line\">\tstatements_for_expresson1_True</span><br><span class=\"line\"><span class=\"keyword\">elif</span> expression2:</span><br><span class=\"line\">\tstatements_for_expression2_True</span><br><span class=\"line\"><span class=\"keyword\">elif</span> expression2:</span><br><span class=\"line\">\tstatements_for_expression3_True</span><br></pre></td></tr></table></figure>\n<p>其中，<em>elif</em>是<em>else if</em>的缩写，用法相同。</p>\n<h1 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a><strong>for循环</strong></h1><p>用来对于数据容器(<strong>尤其是有序容器</strong>)中的数据逐个操作的循环<br>for循环是以集合为基础的循环。<br>for后的‘for i in is’，如果<code>i in is</code>为<em>False</em><br>即<strong>i无值或is为空的</strong><br>则下面的语句不会被执行。</p>\n<p>#continue #break #pass</p>\n<h1 id=\"Continue、Break和Pass语句\"><a href=\"#Continue、Break和Pass语句\" class=\"headerlink\" title=\"Continue、Break和Pass语句\"></a>Continue、Break和Pass语句</h1><p><em>Continue</em>语句将忽略其后的语句开始下一次循环。<br><em>Break</em>从此结束循环。<br><em>Pass</em>什么也不干，是用来占位的。</p>\n<h1 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h1><p>while循环的格式如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> expression:</span><br><span class=\"line\">\tstatements</span><br></pre></td></tr></table></figure>"},{"title":"直播内容复盘-排序与交换","date":"2023-11-20T01:47:02.000Z","_content":"昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归\n我还需要再联系联系，不太能独立写出来。\n那就整理一下昨天晚上听到的一些点.\n<!--more-->\n\n## qsort函数的用法以及swap函数\n> 首先声明，需要添加stdlib库\n\n上定义\n```C\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\n```\n\n这个定义有点太复杂，我们可以把它特殊化处理\n\n```C\nvoid qsort(排序数组,排序个数，sizeof(数组数据类型)，排序规则(cmp));\n```\n\n这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。\n\n因为我们学习过全局变量，所以这个注意事项也好懂\n\n> 这个数组必须是全局的，即必须在预处理之后，主函数之前定义。\n\n因为这样数组才对qsort函数“可见“。\n\ncmp函数需要自己写，写的思路用到了指针，不过照抄就好。\n\n```C\nint cmp (const void * a, const void * b)  \n{  \n   return ( *(int*)a - *(int*)b );  \n}\n//先强转为对应类型的指针，然后再相减，\n//a-b为从小到大，b-a为从大到小\n```\n\n如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。\n\n所以这就是qsort库函数的用法。\n\n还有是swap函数，可以在我们写排序的时候用到。\n可以交换数组内的数据，非常好用。\n形式如下\n```C\nswap(&a,&b);\n```\n到用的时候可以把a和b换成数组的元素，如array[1].\n可以便捷地实现交换。\n这个函数实际上自己写也可以。\n\n这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。\n\n","source":"_posts/直播内容复盘-排序与交换.md","raw":"---\ntitle: 直播内容复盘-排序与交换\ndate: 2023-11-20 09:47:02\ntags: C语言学习\n---\n昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归\n我还需要再联系联系，不太能独立写出来。\n那就整理一下昨天晚上听到的一些点.\n<!--more-->\n\n## qsort函数的用法以及swap函数\n> 首先声明，需要添加stdlib库\n\n上定义\n```C\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\n```\n\n这个定义有点太复杂，我们可以把它特殊化处理\n\n```C\nvoid qsort(排序数组,排序个数，sizeof(数组数据类型)，排序规则(cmp));\n```\n\n这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。\n\n因为我们学习过全局变量，所以这个注意事项也好懂\n\n> 这个数组必须是全局的，即必须在预处理之后，主函数之前定义。\n\n因为这样数组才对qsort函数“可见“。\n\ncmp函数需要自己写，写的思路用到了指针，不过照抄就好。\n\n```C\nint cmp (const void * a, const void * b)  \n{  \n   return ( *(int*)a - *(int*)b );  \n}\n//先强转为对应类型的指针，然后再相减，\n//a-b为从小到大，b-a为从大到小\n```\n\n如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。\n\n所以这就是qsort库函数的用法。\n\n还有是swap函数，可以在我们写排序的时候用到。\n可以交换数组内的数据，非常好用。\n形式如下\n```C\nswap(&a,&b);\n```\n到用的时候可以把a和b换成数组的元素，如array[1].\n可以便捷地实现交换。\n这个函数实际上自己写也可以。\n\n这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。\n\n","slug":"直播内容复盘-排序与交换","published":1,"updated":"2023-11-21T00:47:39.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775ny7001gzkue0k927u22","content":"<p>昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归<br>我还需要再联系联系，不太能独立写出来。<br>那就整理一下昨天晚上听到的一些点.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"qsort函数的用法以及swap函数\"><a href=\"#qsort函数的用法以及swap函数\" class=\"headerlink\" title=\"qsort函数的用法以及swap函数\"></a>qsort函数的用法以及swap函数</h2><blockquote>\n<p>首先声明，需要添加stdlib库</p>\n</blockquote>\n<p>上定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">void</span> *base, <span class=\"type\">size_t</span> nitems, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> (*compar)(<span class=\"type\">const</span> <span class=\"type\">void</span> *, <span class=\"type\">const</span> <span class=\"type\">void</span>*))</span></span><br></pre></td></tr></table></figure>\n\n<p>这个定义有点太复杂，我们可以把它特殊化处理</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(排序数组,排序个数，<span class=\"keyword\">sizeof</span>(数组数据类型)，排序规则(cmp))</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。</p>\n<p>因为我们学习过全局变量，所以这个注意事项也好懂</p>\n<blockquote>\n<p>这个数组必须是全局的，即必须在预处理之后，主函数之前定义。</p>\n</blockquote>\n<p>因为这样数组才对qsort函数“可见“。</p>\n<p>cmp函数需要自己写，写的思路用到了指针，不过照抄就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cmp</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> * a, <span class=\"type\">const</span> <span class=\"type\">void</span> * b)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> ( *(<span class=\"type\">int</span>*)a - *(<span class=\"type\">int</span>*)b );  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先强转为对应类型的指针，然后再相减，</span></span><br><span class=\"line\"><span class=\"comment\">//a-b为从小到大，b-a为从大到小</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。</p>\n<p>所以这就是qsort库函数的用法。</p>\n<p>还有是swap函数，可以在我们写排序的时候用到。<br>可以交换数组内的数据，非常好用。<br>形式如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>\n<p>到用的时候可以把a和b换成数组的元素，如array[1].<br>可以便捷地实现交换。<br>这个函数实际上自己写也可以。</p>\n<p>这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。</p>\n","site":{"data":{}},"excerpt":"<p>昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归<br>我还需要再联系联系，不太能独立写出来。<br>那就整理一下昨天晚上听到的一些点.</p>","more":"<h2 id=\"qsort函数的用法以及swap函数\"><a href=\"#qsort函数的用法以及swap函数\" class=\"headerlink\" title=\"qsort函数的用法以及swap函数\"></a>qsort函数的用法以及swap函数</h2><blockquote>\n<p>首先声明，需要添加stdlib库</p>\n</blockquote>\n<p>上定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">void</span> *base, <span class=\"type\">size_t</span> nitems, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> (*compar)(<span class=\"type\">const</span> <span class=\"type\">void</span> *, <span class=\"type\">const</span> <span class=\"type\">void</span>*))</span></span><br></pre></td></tr></table></figure>\n\n<p>这个定义有点太复杂，我们可以把它特殊化处理</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(排序数组,排序个数，<span class=\"keyword\">sizeof</span>(数组数据类型)，排序规则(cmp))</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。</p>\n<p>因为我们学习过全局变量，所以这个注意事项也好懂</p>\n<blockquote>\n<p>这个数组必须是全局的，即必须在预处理之后，主函数之前定义。</p>\n</blockquote>\n<p>因为这样数组才对qsort函数“可见“。</p>\n<p>cmp函数需要自己写，写的思路用到了指针，不过照抄就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cmp</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> * a, <span class=\"type\">const</span> <span class=\"type\">void</span> * b)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> ( *(<span class=\"type\">int</span>*)a - *(<span class=\"type\">int</span>*)b );  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先强转为对应类型的指针，然后再相减，</span></span><br><span class=\"line\"><span class=\"comment\">//a-b为从小到大，b-a为从大到小</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。</p>\n<p>所以这就是qsort库函数的用法。</p>\n<p>还有是swap函数，可以在我们写排序的时候用到。<br>可以交换数组内的数据，非常好用。<br>形式如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>\n<p>到用的时候可以把a和b换成数组的元素，如array[1].<br>可以便捷地实现交换。<br>这个函数实际上自己写也可以。</p>\n<p>这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。</p>"},{"title":"算法学习：分治法中的二分查找","date":"2024-01-21T15:20:20.000Z","_content":"\n今天本应学习的是分治法，但今天的轨迹就是有点奇怪（哈）\n我看着老师讲着讲着讲到了我可能接触过的算法了，并且Leetcode上还能够练题。\n于是看完老师演示分治法的例子：归并排序、二分查找、求平方。\n然后就开始不由自主地想要实现它，想了半天没有搞出来，查找网上才学会的。\n<!--more-->\n\n今天也在Leetcode上练了几道有关于二分查找的题目，\n开始的时候感觉 - 害，不就一个查找吗，直接当成函数，还能给我出什么题？！\n尝试了一个困难难度的题根本做不出来（悲）\n于是从简单题做起了，感觉知道了二分查找的很多不同的用法。\n\n现在卡在了一道统计二叉树节点的题目上。\n问题的关键是我现在不知道我这个想法对不对，\n如果都是从1开始的话，那么其实不需要结构体与指针\n其实就是在统计元素个数。\n感觉想得过分简单了。\n\n![题目](/img/BinaryTreenum.png)\n\n分治法还是一个挺笼统的概念，它不是一个算法，而是一个设计算法的方法。\n主要可以分为三步：分、治以及组合。\n\n老师使用了一个奇怪的比喻：\n先将一块地分开成几个小部分，\n分别统治它们，就相当于统治了这个总体。\n不过还挺形象的。\n我想起了函数的使用目的，也是为了拆分问题。\n\n分也就是将一个问题划分成若干个小问题的过程。\n治就是对于每一个问题进行解决的过程。\n组合就是将这些小问题的答案组合形成最终的答案。\n分治法衍生出的算法可能很多，但是它们的递归式基本都是相似的形式\n也就是相似于主方法范式的那种。\n\n>比如 归并的 T(n) = 2 * T(n/2) + Θ(n)\n>二分的T(n) = T(n/2) + Θ(1)\n\n接着就是上文讲到的那几个举例，也是我一天的轨迹转折的地方。\n\n归并排序感觉现在已经不太想写了，\n毕竟这个代码量与细节都挺复杂的，用qsort也挺好。\n现在能够熟背的就是这个n^2的插入排序。\n但是为了之后的效率我得尝试记忆一下更快的了\n\n所以现在就说说二分查找吧，这是今天另一个值得讲的话题。\n\n## 二分查找\n\n1.算法演示\n\n还是给出一个**有序的**数组，我们想要在这个数组中查找一个数字。\n一般来说我们肯定最朴素的想法是一个n的循环遍历数组找这个数\n但是这个算法真的挺快的，它的时间复杂度是Θ(logn)\n\n![来自于一个Python学习网站 www.penjee.com](/img/BinarySearch.gif)\n\n用分治法的思路来想这个问题，\n>1.分 将一个数组分为大于中间数与小于中间数两部分。\n>2.治 如果搜索数小于中间数，去左边继续找\n>如果大于，去右边找。\n>3.混合，没啥操作。\n\n在图中我们看到是通过low与high这两个变量来控制mid这个变量，\n进而来确定我们数组的左边与右边。\n%%说实话我刚开始就是卡在了这里，\n我想用数组长度n来限定，想了很久没想出来右边怎么搞。%%\n\n那么分别根据递归与它的定义，我们可以写出两种表示的形式。\n\n```C\nint BinarySearch_Concept(int a[], int n, int x)\n{\n\tint low = 0, high = n - 1, mid;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(x < a[mid])\n\t\t\thigh = mid - 1;\n\t\telse if(x > a[mid])\n\t\t\tlow = mid + 1;\n\t\telse return mid;\n\t} \n\treturn -1;\n}\n\nint BinarySearch_Recursion(int a[], int low, int high, int x)\n{\n\t\n\tif(low > high) return -1;\n\tint mid = (low + high) / 2;\n\t//可以这样写 int mid = ((right - left) >> 1) + left;\n\t\n\tif(x == a[mid]) return mid;\n\telse if(x > a[mid])\n\t{\n\t\tlow = mid + 1;\n\t\treturn BinarySearch_Recursion(a, low, high, x);\n\t}\n\telse if(x < a[mid])\n\t{\n\t\thigh = mid - 1;\n\t\treturn BinarySearch_Recursion(a, low, high, x);\n\t}\n}\n//注 Concept为概念，Recursion为递归。\n```\n\n实际上只是一个思路两种写法而已，\n这两种情况的执行时间应该是差不多的。\n\n今天就是套这个模版然后改了点代码，\n有的时候还超过了不少做过这道题的人。\n空间复杂度上或者有时在时间复杂度上。\n官方题解也不少可以学习的地方。\n\n期望明天的学习，期望明天能够做出更多的题目，自己能够思考更多。\n\n\n\n\n\n","source":"_posts/算法学习：分治法中的二分查找.md","raw":"---\ntitle: 算法学习：分治法中的二分查找\ndate: 2024-01-21 23:20:20\ntags: 算法\n---\n\n今天本应学习的是分治法，但今天的轨迹就是有点奇怪（哈）\n我看着老师讲着讲着讲到了我可能接触过的算法了，并且Leetcode上还能够练题。\n于是看完老师演示分治法的例子：归并排序、二分查找、求平方。\n然后就开始不由自主地想要实现它，想了半天没有搞出来，查找网上才学会的。\n<!--more-->\n\n今天也在Leetcode上练了几道有关于二分查找的题目，\n开始的时候感觉 - 害，不就一个查找吗，直接当成函数，还能给我出什么题？！\n尝试了一个困难难度的题根本做不出来（悲）\n于是从简单题做起了，感觉知道了二分查找的很多不同的用法。\n\n现在卡在了一道统计二叉树节点的题目上。\n问题的关键是我现在不知道我这个想法对不对，\n如果都是从1开始的话，那么其实不需要结构体与指针\n其实就是在统计元素个数。\n感觉想得过分简单了。\n\n![题目](/img/BinaryTreenum.png)\n\n分治法还是一个挺笼统的概念，它不是一个算法，而是一个设计算法的方法。\n主要可以分为三步：分、治以及组合。\n\n老师使用了一个奇怪的比喻：\n先将一块地分开成几个小部分，\n分别统治它们，就相当于统治了这个总体。\n不过还挺形象的。\n我想起了函数的使用目的，也是为了拆分问题。\n\n分也就是将一个问题划分成若干个小问题的过程。\n治就是对于每一个问题进行解决的过程。\n组合就是将这些小问题的答案组合形成最终的答案。\n分治法衍生出的算法可能很多，但是它们的递归式基本都是相似的形式\n也就是相似于主方法范式的那种。\n\n>比如 归并的 T(n) = 2 * T(n/2) + Θ(n)\n>二分的T(n) = T(n/2) + Θ(1)\n\n接着就是上文讲到的那几个举例，也是我一天的轨迹转折的地方。\n\n归并排序感觉现在已经不太想写了，\n毕竟这个代码量与细节都挺复杂的，用qsort也挺好。\n现在能够熟背的就是这个n^2的插入排序。\n但是为了之后的效率我得尝试记忆一下更快的了\n\n所以现在就说说二分查找吧，这是今天另一个值得讲的话题。\n\n## 二分查找\n\n1.算法演示\n\n还是给出一个**有序的**数组，我们想要在这个数组中查找一个数字。\n一般来说我们肯定最朴素的想法是一个n的循环遍历数组找这个数\n但是这个算法真的挺快的，它的时间复杂度是Θ(logn)\n\n![来自于一个Python学习网站 www.penjee.com](/img/BinarySearch.gif)\n\n用分治法的思路来想这个问题，\n>1.分 将一个数组分为大于中间数与小于中间数两部分。\n>2.治 如果搜索数小于中间数，去左边继续找\n>如果大于，去右边找。\n>3.混合，没啥操作。\n\n在图中我们看到是通过low与high这两个变量来控制mid这个变量，\n进而来确定我们数组的左边与右边。\n%%说实话我刚开始就是卡在了这里，\n我想用数组长度n来限定，想了很久没想出来右边怎么搞。%%\n\n那么分别根据递归与它的定义，我们可以写出两种表示的形式。\n\n```C\nint BinarySearch_Concept(int a[], int n, int x)\n{\n\tint low = 0, high = n - 1, mid;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(x < a[mid])\n\t\t\thigh = mid - 1;\n\t\telse if(x > a[mid])\n\t\t\tlow = mid + 1;\n\t\telse return mid;\n\t} \n\treturn -1;\n}\n\nint BinarySearch_Recursion(int a[], int low, int high, int x)\n{\n\t\n\tif(low > high) return -1;\n\tint mid = (low + high) / 2;\n\t//可以这样写 int mid = ((right - left) >> 1) + left;\n\t\n\tif(x == a[mid]) return mid;\n\telse if(x > a[mid])\n\t{\n\t\tlow = mid + 1;\n\t\treturn BinarySearch_Recursion(a, low, high, x);\n\t}\n\telse if(x < a[mid])\n\t{\n\t\thigh = mid - 1;\n\t\treturn BinarySearch_Recursion(a, low, high, x);\n\t}\n}\n//注 Concept为概念，Recursion为递归。\n```\n\n实际上只是一个思路两种写法而已，\n这两种情况的执行时间应该是差不多的。\n\n今天就是套这个模版然后改了点代码，\n有的时候还超过了不少做过这道题的人。\n空间复杂度上或者有时在时间复杂度上。\n官方题解也不少可以学习的地方。\n\n期望明天的学习，期望明天能够做出更多的题目，自己能够思考更多。\n\n\n\n\n\n","slug":"算法学习：分治法中的二分查找","published":1,"updated":"2024-01-23T14:43:33.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nye001vzkueb1s9fqwj","content":"<p>今天本应学习的是分治法，但今天的轨迹就是有点奇怪（哈）<br>我看着老师讲着讲着讲到了我可能接触过的算法了，并且Leetcode上还能够练题。<br>于是看完老师演示分治法的例子：归并排序、二分查找、求平方。<br>然后就开始不由自主地想要实现它，想了半天没有搞出来，查找网上才学会的。</p>\n<span id=\"more\"></span>\n\n<p>今天也在Leetcode上练了几道有关于二分查找的题目，<br>开始的时候感觉 - 害，不就一个查找吗，直接当成函数，还能给我出什么题？！<br>尝试了一个困难难度的题根本做不出来（悲）<br>于是从简单题做起了，感觉知道了二分查找的很多不同的用法。</p>\n<p>现在卡在了一道统计二叉树节点的题目上。<br>问题的关键是我现在不知道我这个想法对不对，<br>如果都是从1开始的话，那么其实不需要结构体与指针<br>其实就是在统计元素个数。<br>感觉想得过分简单了。</p>\n<p><img src=\"/img/BinaryTreenum.png\" alt=\"题目\"></p>\n<p>分治法还是一个挺笼统的概念，它不是一个算法，而是一个设计算法的方法。<br>主要可以分为三步：分、治以及组合。</p>\n<p>老师使用了一个奇怪的比喻：<br>先将一块地分开成几个小部分，<br>分别统治它们，就相当于统治了这个总体。<br>不过还挺形象的。<br>我想起了函数的使用目的，也是为了拆分问题。</p>\n<p>分也就是将一个问题划分成若干个小问题的过程。<br>治就是对于每一个问题进行解决的过程。<br>组合就是将这些小问题的答案组合形成最终的答案。<br>分治法衍生出的算法可能很多，但是它们的递归式基本都是相似的形式<br>也就是相似于主方法范式的那种。</p>\n<blockquote>\n<p>比如 归并的 T(n) &#x3D; 2 * T(n&#x2F;2) + Θ(n)<br>二分的T(n) &#x3D; T(n&#x2F;2) + Θ(1)</p>\n</blockquote>\n<p>接着就是上文讲到的那几个举例，也是我一天的轨迹转折的地方。</p>\n<p>归并排序感觉现在已经不太想写了，<br>毕竟这个代码量与细节都挺复杂的，用qsort也挺好。<br>现在能够熟背的就是这个n^2的插入排序。<br>但是为了之后的效率我得尝试记忆一下更快的了</p>\n<p>所以现在就说说二分查找吧，这是今天另一个值得讲的话题。</p>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>1.算法演示</p>\n<p>还是给出一个<strong>有序的</strong>数组，我们想要在这个数组中查找一个数字。<br>一般来说我们肯定最朴素的想法是一个n的循环遍历数组找这个数<br>但是这个算法真的挺快的，它的时间复杂度是Θ(logn)</p>\n<p><img src=\"/img/BinarySearch.gif\" alt=\"来自于一个Python学习网站 www.penjee.com\"></p>\n<p>用分治法的思路来想这个问题，</p>\n<blockquote>\n<p>1.分 将一个数组分为大于中间数与小于中间数两部分。<br>2.治 如果搜索数小于中间数，去左边继续找<br>如果大于，去右边找。<br>3.混合，没啥操作。</p>\n</blockquote>\n<p>在图中我们看到是通过low与high这两个变量来控制mid这个变量，<br>进而来确定我们数组的左边与右边。<br>%%说实话我刚开始就是卡在了这里，<br>我想用数组长度n来限定，想了很久没想出来右边怎么搞。%%</p>\n<p>那么分别根据递归与它的定义，我们可以写出两种表示的形式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">BinarySearch_Concept</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> low = <span class=\"number\">0</span>, high = n - <span class=\"number\">1</span>, mid;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt; a[mid])</span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; a[mid])</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">BinarySearch_Recursion</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> high, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(low &gt; high) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//可以这样写 int mid = ((right - left) &gt;&gt; 1) + left;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x == a[mid]) <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; a[mid])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> BinarySearch_Recursion(a, low, high, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &lt; a[mid])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> BinarySearch_Recursion(a, low, high, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//注 Concept为概念，Recursion为递归。</span></span><br></pre></td></tr></table></figure>\n\n<p>实际上只是一个思路两种写法而已，<br>这两种情况的执行时间应该是差不多的。</p>\n<p>今天就是套这个模版然后改了点代码，<br>有的时候还超过了不少做过这道题的人。<br>空间复杂度上或者有时在时间复杂度上。<br>官方题解也不少可以学习的地方。</p>\n<p>期望明天的学习，期望明天能够做出更多的题目，自己能够思考更多。</p>\n","site":{"data":{}},"excerpt":"<p>今天本应学习的是分治法，但今天的轨迹就是有点奇怪（哈）<br>我看着老师讲着讲着讲到了我可能接触过的算法了，并且Leetcode上还能够练题。<br>于是看完老师演示分治法的例子：归并排序、二分查找、求平方。<br>然后就开始不由自主地想要实现它，想了半天没有搞出来，查找网上才学会的。</p>","more":"<p>今天也在Leetcode上练了几道有关于二分查找的题目，<br>开始的时候感觉 - 害，不就一个查找吗，直接当成函数，还能给我出什么题？！<br>尝试了一个困难难度的题根本做不出来（悲）<br>于是从简单题做起了，感觉知道了二分查找的很多不同的用法。</p>\n<p>现在卡在了一道统计二叉树节点的题目上。<br>问题的关键是我现在不知道我这个想法对不对，<br>如果都是从1开始的话，那么其实不需要结构体与指针<br>其实就是在统计元素个数。<br>感觉想得过分简单了。</p>\n<p><img src=\"/img/BinaryTreenum.png\" alt=\"题目\"></p>\n<p>分治法还是一个挺笼统的概念，它不是一个算法，而是一个设计算法的方法。<br>主要可以分为三步：分、治以及组合。</p>\n<p>老师使用了一个奇怪的比喻：<br>先将一块地分开成几个小部分，<br>分别统治它们，就相当于统治了这个总体。<br>不过还挺形象的。<br>我想起了函数的使用目的，也是为了拆分问题。</p>\n<p>分也就是将一个问题划分成若干个小问题的过程。<br>治就是对于每一个问题进行解决的过程。<br>组合就是将这些小问题的答案组合形成最终的答案。<br>分治法衍生出的算法可能很多，但是它们的递归式基本都是相似的形式<br>也就是相似于主方法范式的那种。</p>\n<blockquote>\n<p>比如 归并的 T(n) &#x3D; 2 * T(n&#x2F;2) + Θ(n)<br>二分的T(n) &#x3D; T(n&#x2F;2) + Θ(1)</p>\n</blockquote>\n<p>接着就是上文讲到的那几个举例，也是我一天的轨迹转折的地方。</p>\n<p>归并排序感觉现在已经不太想写了，<br>毕竟这个代码量与细节都挺复杂的，用qsort也挺好。<br>现在能够熟背的就是这个n^2的插入排序。<br>但是为了之后的效率我得尝试记忆一下更快的了</p>\n<p>所以现在就说说二分查找吧，这是今天另一个值得讲的话题。</p>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>1.算法演示</p>\n<p>还是给出一个<strong>有序的</strong>数组，我们想要在这个数组中查找一个数字。<br>一般来说我们肯定最朴素的想法是一个n的循环遍历数组找这个数<br>但是这个算法真的挺快的，它的时间复杂度是Θ(logn)</p>\n<p><img src=\"/img/BinarySearch.gif\" alt=\"来自于一个Python学习网站 www.penjee.com\"></p>\n<p>用分治法的思路来想这个问题，</p>\n<blockquote>\n<p>1.分 将一个数组分为大于中间数与小于中间数两部分。<br>2.治 如果搜索数小于中间数，去左边继续找<br>如果大于，去右边找。<br>3.混合，没啥操作。</p>\n</blockquote>\n<p>在图中我们看到是通过low与high这两个变量来控制mid这个变量，<br>进而来确定我们数组的左边与右边。<br>%%说实话我刚开始就是卡在了这里，<br>我想用数组长度n来限定，想了很久没想出来右边怎么搞。%%</p>\n<p>那么分别根据递归与它的定义，我们可以写出两种表示的形式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">BinarySearch_Concept</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> low = <span class=\"number\">0</span>, high = n - <span class=\"number\">1</span>, mid;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt; a[mid])</span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; a[mid])</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">BinarySearch_Recursion</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> high, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(low &gt; high) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//可以这样写 int mid = ((right - left) &gt;&gt; 1) + left;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x == a[mid]) <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; a[mid])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> BinarySearch_Recursion(a, low, high, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &lt; a[mid])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> BinarySearch_Recursion(a, low, high, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//注 Concept为概念，Recursion为递归。</span></span><br></pre></td></tr></table></figure>\n\n<p>实际上只是一个思路两种写法而已，<br>这两种情况的执行时间应该是差不多的。</p>\n<p>今天就是套这个模版然后改了点代码，<br>有的时候还超过了不少做过这道题的人。<br>空间复杂度上或者有时在时间复杂度上。<br>官方题解也不少可以学习的地方。</p>\n<p>期望明天的学习，期望明天能够做出更多的题目，自己能够思考更多。</p>"},{"title":"算法学习：分治法的其他例子","date":"2024-01-23T15:49:36.000Z","_content":"\n今天也是挺多事的一天，主要的生活重心集中在编程与游戏上\n编程上努力学习算法以及Javascript，把博客搞得更好看更有料\n游戏最近很被崩坏三的剧情吸引，时间就上去了。\n<!--more-->\n\n今天博客本来想要试试butterfly主题的，开了一天，实在是太多Bug\n我这才想起之前删掉这个主题包的缘由。\n`_config.yml`文件是真的有点烦人，\n改了一大通，但是因为其他主题文件中的问题以及node的很多问题\nCSS渲染不出来，改了全没用，一点不带变的。\n\n而且网上再怎么搜都是魔改教程，就有点，反衬。害。。\n\n另外将之前学习的斐波那契数列的输出方式以及pow函数的正数部分给写完了。\n想不到斐波那契数列还有这么多方式来输出，而且还与矩阵有关系。\n但矩阵这个算法因为牵扯到浮点数与黄金比，在计算机上实现不了。\n现在暂时就是中午想出来的递归以及线性版本。\n\n## 1.Pow函数(半成品)\n\n虽然Pow函数在C语言里可以直接用，\n在其他语言中也有对乘n次方的表示\n但是它的算法是确实可以优化的。\n\n<!--之所以说是半成品，是因为它只能算正数次幂-->\n\n说到乘方，我们一般会直接使用一个n次的循环来对基数乘n次方。\n也就是下面的写法：\n```C\nlong long ntimesa_naive(int a, int n)\n{\n    long long time = n;\n    a -= 1; //如果0到a的话实际是a+1次。\n    while(a--)\n        n *= time;\n    return n;\n}\n```\n\n但是，实际上我们可以将这个O(n)的算法进行改进，\n因为有一些计算的过程其实是可以省去的。\n\n还是以分治法的思路，我们可以将这个问题的规模降到n/2或更小吗？\n答案是肯定的。具体就是下面的式子了。\n\n>如果次数n为偶数，那么就等于n/2次乘n/2次\n>如果次数n为奇数，那么就直接使用上方的算法运算即可。\n\n如此就可以使用递归的方式实现了。\n\n```C\nlong long ntimesa_recursion(int a, int n)\n{\n    long long time = n;\n    if(n == 0) return 0;\n    else if(a % 2 == 0)\n        return ntimesa_recursion(a / 2, n) * ntimesa_recursion(a / 2, n);\n    else\n    {\n        if(a == 1) return n;\n        else \n        {\n            a -= 1;\n            while(a--)\n                n *= time;\n            return n;\n        }\n    }\n}\n```\n\n这个函数还需要进一步的完善，因为之前试着实现了一下负数的部分。\n发现在应对leetcode的题目的时候还是会时间超限。\n我感觉有些数应该对基数讨论，这样应该会更好一些。\n比如算1的2147932478(Whatever)次方，结果是1.\n\n今天试着进一步实现一下吧。\n## 2.斐波那契数列\n1.**定义递归法**\n+ 算法展示\n    我们都已经知道这个数列是如何递推出来的了。\n    也就是这个式子 F(n) = F(n - 1) + F(n - 2)\n    现在只需要将这个式子补充一些条件其实就可以直接使用了。\n    首先得知道第一项0与第二项1，\n    这样第三项及之后的项才能够推出来。\n    这样我们也就可以开写了。\n\n+ 代码展示\n```C\nint Fibonacci_Recursion(int n)\n{\n    if(n == 0) return 0;\n    else if(n == 1) return 1;\n    else return Fibonacci_Recursion(n - 1) + Fibonacci_Recursion(n - 2);\n}\n```\n\n这样也就是不断地执行减1与减2的操作，直到这个数变成1或者0.\n但是这样在n特别大的时候是特别慢的。\n\n>想一想，对于中间的每一个数字，都需要两个数字来算出来，\n>这个结果已经是2的指数次方级别的了\n\n指数这就很可怕了，但是其中肯定有些明显可以优化的地方。\n    比如，我们在算n-1项的时候其实已经算完了n-2项，\n    但是两边却是完全独立的，**数据的复用性很差。**\n\n那么有什么办法能够算出第n项呢？\n我们可以从第一项推到第n项。\n虽然这个办法也快不到哪里去，但比之前的指数级别的速度可要强多了。\n我们这一次直接将它的时间复杂度降到了**O(n)**.\n\n2.**线性递推法**\n+ 算法展示\n同样，我们仍然要给以后的计算提供条件，\n但是我们计算的基础单位变成了an，an-1，an-2这三个数，\n要提供三个数据。\n由这三个数，我们是可以从1推到无穷大的（笑，如果计算机的储存空间允许的话）。\n\n出个小思考题\n>如果现在an-2，an-1，an分别是1 2 3\n>如何编程将它们都推到下一项(an-2 = 2 an - 1 = 3 an = 5)？\n\n其实可以这样想，对于新an，an其实是an-1，an-1其实是an-2.\n往前也是一样的，又an-2 = an - an-1。\n全都推出来了。\n\n+ 代码展示\n于是我们就可以这样写了\n```C\nint Fibonacci_Linear(int n)\n{\n    if(n == 0) return 1;\n    else if(n == 1) return 1;\n    else if(n == 2) return 2;\n    else\n    {\n        int i = 3;\n        int anmin2 = 1, anmin1 = 1, an = 2;\n        while(i <= n)\n        {\n            an += anmin1;\n            anmin1 += anmin2;\n            anmin2 = an - anmin1;\n            i++;\n        }\n        return an;\n    }\n}\n```\n\n注：其中的n为第n项，这里的数列也许不标准，因为第一项并不是0而是1。\n\n然后就是有关于矩阵以及矩阵运算的内容了。\n里面涉及的算法有些复杂，涉及的运算也很多，可以在算法导论这本书中查找到。\n而且这里就不细讲了。\n\n![](/img/recursionsquaring.png)\n\n![](/img/stlssalgo.png)\n\n今晚从kmjj那里得到了一些对html文本的理解，\n我起初是想解决输出换行的问题。\n没成想反思下自己的这个想法其实不太好，\n因为这并不是一个编程语言。\n你要不换行直接写一行里就行。\n\n过两天花点时间尝试换一下C++，\n使用一些库以及数据结构。\n回到面向对象语言。\n\n这就是这一天学习的内容了，\n因为实现原因内容并不多，明天要继续努力了。\n","source":"_posts/算法学习：分治法的其他例子.md","raw":"---\ntitle: 算法学习：分治法的其他例子\ndate: 2024-01-23 23:49:36\ntags: 算法\n---\n\n今天也是挺多事的一天，主要的生活重心集中在编程与游戏上\n编程上努力学习算法以及Javascript，把博客搞得更好看更有料\n游戏最近很被崩坏三的剧情吸引，时间就上去了。\n<!--more-->\n\n今天博客本来想要试试butterfly主题的，开了一天，实在是太多Bug\n我这才想起之前删掉这个主题包的缘由。\n`_config.yml`文件是真的有点烦人，\n改了一大通，但是因为其他主题文件中的问题以及node的很多问题\nCSS渲染不出来，改了全没用，一点不带变的。\n\n而且网上再怎么搜都是魔改教程，就有点，反衬。害。。\n\n另外将之前学习的斐波那契数列的输出方式以及pow函数的正数部分给写完了。\n想不到斐波那契数列还有这么多方式来输出，而且还与矩阵有关系。\n但矩阵这个算法因为牵扯到浮点数与黄金比，在计算机上实现不了。\n现在暂时就是中午想出来的递归以及线性版本。\n\n## 1.Pow函数(半成品)\n\n虽然Pow函数在C语言里可以直接用，\n在其他语言中也有对乘n次方的表示\n但是它的算法是确实可以优化的。\n\n<!--之所以说是半成品，是因为它只能算正数次幂-->\n\n说到乘方，我们一般会直接使用一个n次的循环来对基数乘n次方。\n也就是下面的写法：\n```C\nlong long ntimesa_naive(int a, int n)\n{\n    long long time = n;\n    a -= 1; //如果0到a的话实际是a+1次。\n    while(a--)\n        n *= time;\n    return n;\n}\n```\n\n但是，实际上我们可以将这个O(n)的算法进行改进，\n因为有一些计算的过程其实是可以省去的。\n\n还是以分治法的思路，我们可以将这个问题的规模降到n/2或更小吗？\n答案是肯定的。具体就是下面的式子了。\n\n>如果次数n为偶数，那么就等于n/2次乘n/2次\n>如果次数n为奇数，那么就直接使用上方的算法运算即可。\n\n如此就可以使用递归的方式实现了。\n\n```C\nlong long ntimesa_recursion(int a, int n)\n{\n    long long time = n;\n    if(n == 0) return 0;\n    else if(a % 2 == 0)\n        return ntimesa_recursion(a / 2, n) * ntimesa_recursion(a / 2, n);\n    else\n    {\n        if(a == 1) return n;\n        else \n        {\n            a -= 1;\n            while(a--)\n                n *= time;\n            return n;\n        }\n    }\n}\n```\n\n这个函数还需要进一步的完善，因为之前试着实现了一下负数的部分。\n发现在应对leetcode的题目的时候还是会时间超限。\n我感觉有些数应该对基数讨论，这样应该会更好一些。\n比如算1的2147932478(Whatever)次方，结果是1.\n\n今天试着进一步实现一下吧。\n## 2.斐波那契数列\n1.**定义递归法**\n+ 算法展示\n    我们都已经知道这个数列是如何递推出来的了。\n    也就是这个式子 F(n) = F(n - 1) + F(n - 2)\n    现在只需要将这个式子补充一些条件其实就可以直接使用了。\n    首先得知道第一项0与第二项1，\n    这样第三项及之后的项才能够推出来。\n    这样我们也就可以开写了。\n\n+ 代码展示\n```C\nint Fibonacci_Recursion(int n)\n{\n    if(n == 0) return 0;\n    else if(n == 1) return 1;\n    else return Fibonacci_Recursion(n - 1) + Fibonacci_Recursion(n - 2);\n}\n```\n\n这样也就是不断地执行减1与减2的操作，直到这个数变成1或者0.\n但是这样在n特别大的时候是特别慢的。\n\n>想一想，对于中间的每一个数字，都需要两个数字来算出来，\n>这个结果已经是2的指数次方级别的了\n\n指数这就很可怕了，但是其中肯定有些明显可以优化的地方。\n    比如，我们在算n-1项的时候其实已经算完了n-2项，\n    但是两边却是完全独立的，**数据的复用性很差。**\n\n那么有什么办法能够算出第n项呢？\n我们可以从第一项推到第n项。\n虽然这个办法也快不到哪里去，但比之前的指数级别的速度可要强多了。\n我们这一次直接将它的时间复杂度降到了**O(n)**.\n\n2.**线性递推法**\n+ 算法展示\n同样，我们仍然要给以后的计算提供条件，\n但是我们计算的基础单位变成了an，an-1，an-2这三个数，\n要提供三个数据。\n由这三个数，我们是可以从1推到无穷大的（笑，如果计算机的储存空间允许的话）。\n\n出个小思考题\n>如果现在an-2，an-1，an分别是1 2 3\n>如何编程将它们都推到下一项(an-2 = 2 an - 1 = 3 an = 5)？\n\n其实可以这样想，对于新an，an其实是an-1，an-1其实是an-2.\n往前也是一样的，又an-2 = an - an-1。\n全都推出来了。\n\n+ 代码展示\n于是我们就可以这样写了\n```C\nint Fibonacci_Linear(int n)\n{\n    if(n == 0) return 1;\n    else if(n == 1) return 1;\n    else if(n == 2) return 2;\n    else\n    {\n        int i = 3;\n        int anmin2 = 1, anmin1 = 1, an = 2;\n        while(i <= n)\n        {\n            an += anmin1;\n            anmin1 += anmin2;\n            anmin2 = an - anmin1;\n            i++;\n        }\n        return an;\n    }\n}\n```\n\n注：其中的n为第n项，这里的数列也许不标准，因为第一项并不是0而是1。\n\n然后就是有关于矩阵以及矩阵运算的内容了。\n里面涉及的算法有些复杂，涉及的运算也很多，可以在算法导论这本书中查找到。\n而且这里就不细讲了。\n\n![](/img/recursionsquaring.png)\n\n![](/img/stlssalgo.png)\n\n今晚从kmjj那里得到了一些对html文本的理解，\n我起初是想解决输出换行的问题。\n没成想反思下自己的这个想法其实不太好，\n因为这并不是一个编程语言。\n你要不换行直接写一行里就行。\n\n过两天花点时间尝试换一下C++，\n使用一些库以及数据结构。\n回到面向对象语言。\n\n这就是这一天学习的内容了，\n因为实现原因内容并不多，明天要继续努力了。\n","slug":"算法学习：分治法的其他例子","published":1,"updated":"2024-01-24T00:52:10.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nyf001wzkuebaou5v27","content":"<p>今天也是挺多事的一天，主要的生活重心集中在编程与游戏上<br>编程上努力学习算法以及Javascript，把博客搞得更好看更有料<br>游戏最近很被崩坏三的剧情吸引，时间就上去了。</p>\n<span id=\"more\"></span>\n\n<p>今天博客本来想要试试butterfly主题的，开了一天，实在是太多Bug<br>我这才想起之前删掉这个主题包的缘由。<br><code>_config.yml</code>文件是真的有点烦人，<br>改了一大通，但是因为其他主题文件中的问题以及node的很多问题<br>CSS渲染不出来，改了全没用，一点不带变的。</p>\n<p>而且网上再怎么搜都是魔改教程，就有点，反衬。害。。</p>\n<p>另外将之前学习的斐波那契数列的输出方式以及pow函数的正数部分给写完了。<br>想不到斐波那契数列还有这么多方式来输出，而且还与矩阵有关系。<br>但矩阵这个算法因为牵扯到浮点数与黄金比，在计算机上实现不了。<br>现在暂时就是中午想出来的递归以及线性版本。</p>\n<h2 id=\"1-Pow函数-半成品\"><a href=\"#1-Pow函数-半成品\" class=\"headerlink\" title=\"1.Pow函数(半成品)\"></a>1.Pow函数(半成品)</h2><p>虽然Pow函数在C语言里可以直接用，<br>在其他语言中也有对乘n次方的表示<br>但是它的算法是确实可以优化的。</p>\n<!--之所以说是半成品，是因为它只能算正数次幂-->\n\n<p>说到乘方，我们一般会直接使用一个n次的循环来对基数乘n次方。<br>也就是下面的写法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">ntimesa_naive</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> time = n;</span><br><span class=\"line\">    a -= <span class=\"number\">1</span>; <span class=\"comment\">//如果0到a的话实际是a+1次。</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a--)</span><br><span class=\"line\">        n *= time;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，实际上我们可以将这个O(n)的算法进行改进，<br>因为有一些计算的过程其实是可以省去的。</p>\n<p>还是以分治法的思路，我们可以将这个问题的规模降到n&#x2F;2或更小吗？<br>答案是肯定的。具体就是下面的式子了。</p>\n<blockquote>\n<p>如果次数n为偶数，那么就等于n&#x2F;2次乘n&#x2F;2次<br>如果次数n为奇数，那么就直接使用上方的算法运算即可。</p>\n</blockquote>\n<p>如此就可以使用递归的方式实现了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">ntimesa_recursion</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> time = n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ntimesa_recursion(a / <span class=\"number\">2</span>, n) * ntimesa_recursion(a / <span class=\"number\">2</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a--)</span><br><span class=\"line\">                n *= time;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个函数还需要进一步的完善，因为之前试着实现了一下负数的部分。<br>发现在应对leetcode的题目的时候还是会时间超限。<br>我感觉有些数应该对基数讨论，这样应该会更好一些。<br>比如算1的2147932478(Whatever)次方，结果是1.</p>\n<p>今天试着进一步实现一下吧。</p>\n<h2 id=\"2-斐波那契数列\"><a href=\"#2-斐波那契数列\" class=\"headerlink\" title=\"2.斐波那契数列\"></a>2.斐波那契数列</h2><p>1.<strong>定义递归法</strong></p>\n<ul>\n<li><p>算法展示<br>  我们都已经知道这个数列是如何递推出来的了。<br>  也就是这个式子 F(n) &#x3D; F(n - 1) + F(n - 2)<br>  现在只需要将这个式子补充一些条件其实就可以直接使用了。<br>  首先得知道第一项0与第二项1，<br>  这样第三项及之后的项才能够推出来。<br>  这样我们也就可以开写了。</p>\n</li>\n<li><p>代码展示</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Fibonacci_Recursion</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> Fibonacci_Recursion(n - <span class=\"number\">1</span>) + Fibonacci_Recursion(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这样也就是不断地执行减1与减2的操作，直到这个数变成1或者0.<br>但是这样在n特别大的时候是特别慢的。</p>\n<blockquote>\n<p>想一想，对于中间的每一个数字，都需要两个数字来算出来，<br>这个结果已经是2的指数次方级别的了</p>\n</blockquote>\n<p>指数这就很可怕了，但是其中肯定有些明显可以优化的地方。<br>    比如，我们在算n-1项的时候其实已经算完了n-2项，<br>    但是两边却是完全独立的，<strong>数据的复用性很差。</strong></p>\n<p>那么有什么办法能够算出第n项呢？<br>我们可以从第一项推到第n项。<br>虽然这个办法也快不到哪里去，但比之前的指数级别的速度可要强多了。<br>我们这一次直接将它的时间复杂度降到了<strong>O(n)</strong>.</p>\n<p>2.<strong>线性递推法</strong></p>\n<ul>\n<li>算法展示<br>同样，我们仍然要给以后的计算提供条件，<br>但是我们计算的基础单位变成了an，an-1，an-2这三个数，<br>要提供三个数据。<br>由这三个数，我们是可以从1推到无穷大的（笑，如果计算机的储存空间允许的话）。</li>\n</ul>\n<p>出个小思考题</p>\n<blockquote>\n<p>如果现在an-2，an-1，an分别是1 2 3<br>如何编程将它们都推到下一项(an-2 &#x3D; 2 an - 1 &#x3D; 3 an &#x3D; 5)？</p>\n</blockquote>\n<p>其实可以这样想，对于新an，an其实是an-1，an-1其实是an-2.<br>往前也是一样的，又an-2 &#x3D; an - an-1。<br>全都推出来了。</p>\n<ul>\n<li>代码展示<br>于是我们就可以这样写了<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Fibonacci_Linear</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> anmin2 = <span class=\"number\">1</span>, anmin1 = <span class=\"number\">1</span>, an = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt;= n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            an += anmin1;</span><br><span class=\"line\">            anmin1 += anmin2;</span><br><span class=\"line\">            anmin2 = an - anmin1;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> an;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>注：其中的n为第n项，这里的数列也许不标准，因为第一项并不是0而是1。</p>\n<p>然后就是有关于矩阵以及矩阵运算的内容了。<br>里面涉及的算法有些复杂，涉及的运算也很多，可以在算法导论这本书中查找到。<br>而且这里就不细讲了。</p>\n<p><img src=\"/img/recursionsquaring.png\"></p>\n<p><img src=\"/img/stlssalgo.png\"></p>\n<p>今晚从kmjj那里得到了一些对html文本的理解，<br>我起初是想解决输出换行的问题。<br>没成想反思下自己的这个想法其实不太好，<br>因为这并不是一个编程语言。<br>你要不换行直接写一行里就行。</p>\n<p>过两天花点时间尝试换一下C++，<br>使用一些库以及数据结构。<br>回到面向对象语言。</p>\n<p>这就是这一天学习的内容了，<br>因为实现原因内容并不多，明天要继续努力了。</p>\n","site":{"data":{}},"excerpt":"<p>今天也是挺多事的一天，主要的生活重心集中在编程与游戏上<br>编程上努力学习算法以及Javascript，把博客搞得更好看更有料<br>游戏最近很被崩坏三的剧情吸引，时间就上去了。</p>","more":"<p>今天博客本来想要试试butterfly主题的，开了一天，实在是太多Bug<br>我这才想起之前删掉这个主题包的缘由。<br><code>_config.yml</code>文件是真的有点烦人，<br>改了一大通，但是因为其他主题文件中的问题以及node的很多问题<br>CSS渲染不出来，改了全没用，一点不带变的。</p>\n<p>而且网上再怎么搜都是魔改教程，就有点，反衬。害。。</p>\n<p>另外将之前学习的斐波那契数列的输出方式以及pow函数的正数部分给写完了。<br>想不到斐波那契数列还有这么多方式来输出，而且还与矩阵有关系。<br>但矩阵这个算法因为牵扯到浮点数与黄金比，在计算机上实现不了。<br>现在暂时就是中午想出来的递归以及线性版本。</p>\n<h2 id=\"1-Pow函数-半成品\"><a href=\"#1-Pow函数-半成品\" class=\"headerlink\" title=\"1.Pow函数(半成品)\"></a>1.Pow函数(半成品)</h2><p>虽然Pow函数在C语言里可以直接用，<br>在其他语言中也有对乘n次方的表示<br>但是它的算法是确实可以优化的。</p>\n<!--之所以说是半成品，是因为它只能算正数次幂-->\n\n<p>说到乘方，我们一般会直接使用一个n次的循环来对基数乘n次方。<br>也就是下面的写法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">ntimesa_naive</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> time = n;</span><br><span class=\"line\">    a -= <span class=\"number\">1</span>; <span class=\"comment\">//如果0到a的话实际是a+1次。</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a--)</span><br><span class=\"line\">        n *= time;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，实际上我们可以将这个O(n)的算法进行改进，<br>因为有一些计算的过程其实是可以省去的。</p>\n<p>还是以分治法的思路，我们可以将这个问题的规模降到n&#x2F;2或更小吗？<br>答案是肯定的。具体就是下面的式子了。</p>\n<blockquote>\n<p>如果次数n为偶数，那么就等于n&#x2F;2次乘n&#x2F;2次<br>如果次数n为奇数，那么就直接使用上方的算法运算即可。</p>\n</blockquote>\n<p>如此就可以使用递归的方式实现了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">ntimesa_recursion</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> time = n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ntimesa_recursion(a / <span class=\"number\">2</span>, n) * ntimesa_recursion(a / <span class=\"number\">2</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a--)</span><br><span class=\"line\">                n *= time;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个函数还需要进一步的完善，因为之前试着实现了一下负数的部分。<br>发现在应对leetcode的题目的时候还是会时间超限。<br>我感觉有些数应该对基数讨论，这样应该会更好一些。<br>比如算1的2147932478(Whatever)次方，结果是1.</p>\n<p>今天试着进一步实现一下吧。</p>\n<h2 id=\"2-斐波那契数列\"><a href=\"#2-斐波那契数列\" class=\"headerlink\" title=\"2.斐波那契数列\"></a>2.斐波那契数列</h2><p>1.<strong>定义递归法</strong></p>\n<ul>\n<li><p>算法展示<br>  我们都已经知道这个数列是如何递推出来的了。<br>  也就是这个式子 F(n) &#x3D; F(n - 1) + F(n - 2)<br>  现在只需要将这个式子补充一些条件其实就可以直接使用了。<br>  首先得知道第一项0与第二项1，<br>  这样第三项及之后的项才能够推出来。<br>  这样我们也就可以开写了。</p>\n</li>\n<li><p>代码展示</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Fibonacci_Recursion</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> Fibonacci_Recursion(n - <span class=\"number\">1</span>) + Fibonacci_Recursion(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这样也就是不断地执行减1与减2的操作，直到这个数变成1或者0.<br>但是这样在n特别大的时候是特别慢的。</p>\n<blockquote>\n<p>想一想，对于中间的每一个数字，都需要两个数字来算出来，<br>这个结果已经是2的指数次方级别的了</p>\n</blockquote>\n<p>指数这就很可怕了，但是其中肯定有些明显可以优化的地方。<br>    比如，我们在算n-1项的时候其实已经算完了n-2项，<br>    但是两边却是完全独立的，<strong>数据的复用性很差。</strong></p>\n<p>那么有什么办法能够算出第n项呢？<br>我们可以从第一项推到第n项。<br>虽然这个办法也快不到哪里去，但比之前的指数级别的速度可要强多了。<br>我们这一次直接将它的时间复杂度降到了<strong>O(n)</strong>.</p>\n<p>2.<strong>线性递推法</strong></p>\n<ul>\n<li>算法展示<br>同样，我们仍然要给以后的计算提供条件，<br>但是我们计算的基础单位变成了an，an-1，an-2这三个数，<br>要提供三个数据。<br>由这三个数，我们是可以从1推到无穷大的（笑，如果计算机的储存空间允许的话）。</li>\n</ul>\n<p>出个小思考题</p>\n<blockquote>\n<p>如果现在an-2，an-1，an分别是1 2 3<br>如何编程将它们都推到下一项(an-2 &#x3D; 2 an - 1 &#x3D; 3 an &#x3D; 5)？</p>\n</blockquote>\n<p>其实可以这样想，对于新an，an其实是an-1，an-1其实是an-2.<br>往前也是一样的，又an-2 &#x3D; an - an-1。<br>全都推出来了。</p>\n<ul>\n<li>代码展示<br>于是我们就可以这样写了<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Fibonacci_Linear</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> anmin2 = <span class=\"number\">1</span>, anmin1 = <span class=\"number\">1</span>, an = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt;= n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            an += anmin1;</span><br><span class=\"line\">            anmin1 += anmin2;</span><br><span class=\"line\">            anmin2 = an - anmin1;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> an;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>注：其中的n为第n项，这里的数列也许不标准，因为第一项并不是0而是1。</p>\n<p>然后就是有关于矩阵以及矩阵运算的内容了。<br>里面涉及的算法有些复杂，涉及的运算也很多，可以在算法导论这本书中查找到。<br>而且这里就不细讲了。</p>\n<p><img src=\"/img/recursionsquaring.png\"></p>\n<p><img src=\"/img/stlssalgo.png\"></p>\n<p>今晚从kmjj那里得到了一些对html文本的理解，<br>我起初是想解决输出换行的问题。<br>没成想反思下自己的这个想法其实不太好，<br>因为这并不是一个编程语言。<br>你要不换行直接写一行里就行。</p>\n<p>过两天花点时间尝试换一下C++，<br>使用一些库以及数据结构。<br>回到面向对象语言。</p>\n<p>这就是这一天学习的内容了，<br>因为实现原因内容并不多，明天要继续努力了。</p>"},{"title":"算法学习：归并排序以及插入排序","date":"2024-01-20T01:28:55.000Z","_content":"今天是大学第一个寒假的第一天，昨天玩了半天。\n<!--more-->\n到了晚上临时起志：\n既然上个暑假啥都没学精，那么这个寒假还是集中一个目标尽力往前进吧。\n于是在B站上翻视频，一直到了23点。\n\n今天找到了点生活的奔头，看了MIT学院的算法课程，又学习了两种排序方法，\n虽然不像之前那么多事情了，如果有啥别的重要的话再说嘛，现在才第一天。\n心里也想着，既然生活又有希望起来了，期待下学期的精彩旅途。\n因为我一直都在说着：放假了就快开学了，\n这样只看起点终点就很给人压迫，所以我还是喜欢去把每一天过得尽量好。\n\n今天学习了归并排序（Merge Sort）与插入排序（Insertion Sort）\n经过1-2小时的代码编辑，两种算法都已经以C语言实现完毕了，\n这里就再复盘一下自己今天学习过的内容。\n看到应该已经是第二天了，不过都一样。\n\n## 1. 算法分析\n\n对于一个算法，注重的是它的性能，性能并不是最重要的，\n但在软件设计过程中，它充当着一种货币，可以通过损失性能来换取其他的特性。\n\n一般来说，分析算法有三种方式：\n\t1.最坏情况分析\n\t2.平均值分析\n\t3.最好情况分析\n\n这里的情况指的是对于不同数据的运行时间，\n我们认为时间T(n)与输入的数组大小n是一个相关映射。\n\n最坏情况分析就是对于(1, n)下所有的输入中的时间最大值。\n最好情况分析就是同理的最大值，但是并不一定反映程序运行的一般情况。\n\n平均值严谨来说应该是时间期望，也就是每种情况的时间乘发生概率求和。\n概率无从可知，所以我们需要假设一些概率分布模型。\n\n\n## 2. 插入排序\n\n1. 算法演示\n> 代码毕竟只是表达它而已，理解它能够让我们自己写出它来。\n\n设想一个序列，我们用连续的小方格表示。\n![插入排序](/img/InsertionSort.png)\n从2开始遍历数组（假定下标从1开始），然后对于每一个元素进行上图的操作。\n上图的操作，就好像是移动前面的元素，使得中间空出一个合适的位置，\n然后将这个拿出来的`key`插入这个位置一样。\n\n2. 代码表示\n\t对于一个下标从1到n的数组a\n```C\nfor(int j = 2;j < n;j++)\n{\n\tkey = a[j];\n\ti = j - 1;\n\twhile(a[i] > key && i > 0)\n\t{\n\t\ta[i + 1] = a[i];\n\t\ti = i - 1; \n\t}\n\ta[i + 1] = key;\n}\n```\n\n实现的方法极其易懂，想记住打几遍代码也可以\n道理就与上图中讲的类似。\n\n当然，我们在C语言中的下标是从0开始的，\n这样我们可以将`j`的初始值改变为`1`，将i的限定条件改为`i >= 0`\n就可以对平常的C语言数组使用了。\n\n3. 算法分析\n\n一般来说，比较性能有两种方式：\n\t一个是不同机器相同算法的相对速度\n\t一个是不同算法相同机器的绝对速度\n\n描述时间复杂度的符号有O、θ或者Ω，它们叫做渐进符号。\n渐进分析是算法中的一个伟大的观点，\n因为它不仅能够反映相对速度的大小，还能反映绝对速度的大小。\n这些符号如何使用呢？\n\n步骤\n\t1.将一个式子中的低阶项去掉。\n\t2.将最高阶的参数去掉。\n\n比如一个式子 y = 3 * x^3 + 2 * x^2 （x^2即为x的平方）\n\t去掉低阶项，则为y = 3 * x^3\n\t去掉最高阶参数，则为θ(x^3).\n（这个式子，是通过对于程序所有语句执行的次数累加的结果）\n\n这就是我们说的时间复杂度刻画方式，实际上复杂度阶数大的时间并不一定大，\n只是增长过程中一定能够找到超过复杂度阶小的时间的点，之后就一直比它大。\n这是个临界点。\n\n+ 最坏情况分析\n\t对于这个算法，它的最坏情况即为完全逆序的情况，需要排序与移动项数n次，假设运行每一个语句的时间都是相等的常数C。\n\n首先是一个2~n的循环，然后是一个从j - 1到0的循环\n\n> (j 2~n)ΣjC C是一个常数，从1到n - 1.\n> 这样jC也就是θ(j)，所以就变成了 (j 2~n)Σθ(j)\n> 因为每一项都是j * θ(j)，一共有n项，所以相当于θ(n ^ 2)\n\n\n说实话，我不觉得排序是很高端的算法，甚至都不算算法。\n至少在很久之前只知道选择与冒泡的时候是这样想的。\n只觉得那些听不懂的，比如最短路径的迪杰斯特拉、二分查找、广度优先搜索这些才是。\n实际上，面对这些较为简单的算法，我们反而更轻松地学习对于一个算法如何分析。\n\n## 3. 归并排序\n\n1. 算法演示\n\n![归并排序](/img/MergeSort.png)\n\n这个算法看起来并不是很难，但是实现起来实在不容易，我这里是写了约90行代码。\n它的道理就是，如果总共只有一个元素，那么就返回这个元素。\n如果不是，就是两边先排序再归并，\n归并方式就是挨个比，然后移除元素，直到所有元素都被移到排序后表。\n实际上可以使用函数递归，这里还用的不熟练。\n\n2. 代码演示\n\n```C\n\t\tint l = 0, i = 0, j = 0;\n\t\t//i为a的下标，j位b的下标，l为c也就是排序后表的下标\n\t\t\n\t\twhile(1)\n\t\t{\n\t\t\t//在表的最后一个元素没有被去掉的时候\n\t\t\tif(i != (n / 2) && j != n - (n / 2))\n\t\t\t{\n\t\t\t\tif(a[i] > b[j])\n\t\t\t\t{\t\n\t\t\t\t\tc[l] = b[j];\n\t\t\t\t\tj += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t\telse if(a[i] < b[j])\n\t\t\t\t{\n\t\t\t\t\tc[l] = a[i];\n\t\t\t\t\ti += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t\telse if(a[i] == b[j])\n\t\t\t\t{\n\t\t\t\t\tc[l] = a[i];\n\t\t\t\t\tl += 1;\n\t\t\t\t\tc[l] = b[j];\n\t\t\t\t\ti += 1;\n\t\t\t\t\tj += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//左表的最后一个元素被去掉\n\t\t\telse if(i == n / 2)\n\t\t\t{\n\t\t\t\tfor(;j < n - (n / 2);j++)\n\t\t\t\t\tc[l++] = b[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//右表的最后一个元素被去掉\n\t\t\telse if(j == n - (n / 2))\n\t\t\t{\n\t\t\t\tfor(;i < n / 2;i++)\n\t\t\t\t\tc[l++] = a[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n```\n\n3. 算法分析\n对于这个算法，课程使用了递归树的模型\n\t对于两个表的排序，需要两个T(n/2)的时间，\n\t对于最后的归并，因为只是对于n个元素的操作，所以为θ(n)的时间。\n\n最后的时间就是T(n) = 2 * T(n/2) + θ(n)\n\n![递归树](/img/RecursionTree.png)\n\n递归树还没有整体学习，现在需要知道的就是，这个递归树的高度是log2n，最后的节点数是θ(n).\n总共加起来等于θ(n) + logn * θ(n) 省去第一项就是θ(n * logn)，这样的话在性能上是优于插入排序的，而且它的临界点只在30左右，这也就是说归并排序在大多数情况下都是更快的。\n\n开了个好头，总之希望好运，希望寒假快乐。\n\n>End...","source":"_posts/算法学习：归并排序以及插入排序.md","raw":"---\ntitle: 算法学习：归并排序以及插入排序\ndate: 2024-01-20 09:28:55\ntags: 算法\n---\n今天是大学第一个寒假的第一天，昨天玩了半天。\n<!--more-->\n到了晚上临时起志：\n既然上个暑假啥都没学精，那么这个寒假还是集中一个目标尽力往前进吧。\n于是在B站上翻视频，一直到了23点。\n\n今天找到了点生活的奔头，看了MIT学院的算法课程，又学习了两种排序方法，\n虽然不像之前那么多事情了，如果有啥别的重要的话再说嘛，现在才第一天。\n心里也想着，既然生活又有希望起来了，期待下学期的精彩旅途。\n因为我一直都在说着：放假了就快开学了，\n这样只看起点终点就很给人压迫，所以我还是喜欢去把每一天过得尽量好。\n\n今天学习了归并排序（Merge Sort）与插入排序（Insertion Sort）\n经过1-2小时的代码编辑，两种算法都已经以C语言实现完毕了，\n这里就再复盘一下自己今天学习过的内容。\n看到应该已经是第二天了，不过都一样。\n\n## 1. 算法分析\n\n对于一个算法，注重的是它的性能，性能并不是最重要的，\n但在软件设计过程中，它充当着一种货币，可以通过损失性能来换取其他的特性。\n\n一般来说，分析算法有三种方式：\n\t1.最坏情况分析\n\t2.平均值分析\n\t3.最好情况分析\n\n这里的情况指的是对于不同数据的运行时间，\n我们认为时间T(n)与输入的数组大小n是一个相关映射。\n\n最坏情况分析就是对于(1, n)下所有的输入中的时间最大值。\n最好情况分析就是同理的最大值，但是并不一定反映程序运行的一般情况。\n\n平均值严谨来说应该是时间期望，也就是每种情况的时间乘发生概率求和。\n概率无从可知，所以我们需要假设一些概率分布模型。\n\n\n## 2. 插入排序\n\n1. 算法演示\n> 代码毕竟只是表达它而已，理解它能够让我们自己写出它来。\n\n设想一个序列，我们用连续的小方格表示。\n![插入排序](/img/InsertionSort.png)\n从2开始遍历数组（假定下标从1开始），然后对于每一个元素进行上图的操作。\n上图的操作，就好像是移动前面的元素，使得中间空出一个合适的位置，\n然后将这个拿出来的`key`插入这个位置一样。\n\n2. 代码表示\n\t对于一个下标从1到n的数组a\n```C\nfor(int j = 2;j < n;j++)\n{\n\tkey = a[j];\n\ti = j - 1;\n\twhile(a[i] > key && i > 0)\n\t{\n\t\ta[i + 1] = a[i];\n\t\ti = i - 1; \n\t}\n\ta[i + 1] = key;\n}\n```\n\n实现的方法极其易懂，想记住打几遍代码也可以\n道理就与上图中讲的类似。\n\n当然，我们在C语言中的下标是从0开始的，\n这样我们可以将`j`的初始值改变为`1`，将i的限定条件改为`i >= 0`\n就可以对平常的C语言数组使用了。\n\n3. 算法分析\n\n一般来说，比较性能有两种方式：\n\t一个是不同机器相同算法的相对速度\n\t一个是不同算法相同机器的绝对速度\n\n描述时间复杂度的符号有O、θ或者Ω，它们叫做渐进符号。\n渐进分析是算法中的一个伟大的观点，\n因为它不仅能够反映相对速度的大小，还能反映绝对速度的大小。\n这些符号如何使用呢？\n\n步骤\n\t1.将一个式子中的低阶项去掉。\n\t2.将最高阶的参数去掉。\n\n比如一个式子 y = 3 * x^3 + 2 * x^2 （x^2即为x的平方）\n\t去掉低阶项，则为y = 3 * x^3\n\t去掉最高阶参数，则为θ(x^3).\n（这个式子，是通过对于程序所有语句执行的次数累加的结果）\n\n这就是我们说的时间复杂度刻画方式，实际上复杂度阶数大的时间并不一定大，\n只是增长过程中一定能够找到超过复杂度阶小的时间的点，之后就一直比它大。\n这是个临界点。\n\n+ 最坏情况分析\n\t对于这个算法，它的最坏情况即为完全逆序的情况，需要排序与移动项数n次，假设运行每一个语句的时间都是相等的常数C。\n\n首先是一个2~n的循环，然后是一个从j - 1到0的循环\n\n> (j 2~n)ΣjC C是一个常数，从1到n - 1.\n> 这样jC也就是θ(j)，所以就变成了 (j 2~n)Σθ(j)\n> 因为每一项都是j * θ(j)，一共有n项，所以相当于θ(n ^ 2)\n\n\n说实话，我不觉得排序是很高端的算法，甚至都不算算法。\n至少在很久之前只知道选择与冒泡的时候是这样想的。\n只觉得那些听不懂的，比如最短路径的迪杰斯特拉、二分查找、广度优先搜索这些才是。\n实际上，面对这些较为简单的算法，我们反而更轻松地学习对于一个算法如何分析。\n\n## 3. 归并排序\n\n1. 算法演示\n\n![归并排序](/img/MergeSort.png)\n\n这个算法看起来并不是很难，但是实现起来实在不容易，我这里是写了约90行代码。\n它的道理就是，如果总共只有一个元素，那么就返回这个元素。\n如果不是，就是两边先排序再归并，\n归并方式就是挨个比，然后移除元素，直到所有元素都被移到排序后表。\n实际上可以使用函数递归，这里还用的不熟练。\n\n2. 代码演示\n\n```C\n\t\tint l = 0, i = 0, j = 0;\n\t\t//i为a的下标，j位b的下标，l为c也就是排序后表的下标\n\t\t\n\t\twhile(1)\n\t\t{\n\t\t\t//在表的最后一个元素没有被去掉的时候\n\t\t\tif(i != (n / 2) && j != n - (n / 2))\n\t\t\t{\n\t\t\t\tif(a[i] > b[j])\n\t\t\t\t{\t\n\t\t\t\t\tc[l] = b[j];\n\t\t\t\t\tj += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t\telse if(a[i] < b[j])\n\t\t\t\t{\n\t\t\t\t\tc[l] = a[i];\n\t\t\t\t\ti += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t\telse if(a[i] == b[j])\n\t\t\t\t{\n\t\t\t\t\tc[l] = a[i];\n\t\t\t\t\tl += 1;\n\t\t\t\t\tc[l] = b[j];\n\t\t\t\t\ti += 1;\n\t\t\t\t\tj += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//左表的最后一个元素被去掉\n\t\t\telse if(i == n / 2)\n\t\t\t{\n\t\t\t\tfor(;j < n - (n / 2);j++)\n\t\t\t\t\tc[l++] = b[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//右表的最后一个元素被去掉\n\t\t\telse if(j == n - (n / 2))\n\t\t\t{\n\t\t\t\tfor(;i < n / 2;i++)\n\t\t\t\t\tc[l++] = a[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n```\n\n3. 算法分析\n对于这个算法，课程使用了递归树的模型\n\t对于两个表的排序，需要两个T(n/2)的时间，\n\t对于最后的归并，因为只是对于n个元素的操作，所以为θ(n)的时间。\n\n最后的时间就是T(n) = 2 * T(n/2) + θ(n)\n\n![递归树](/img/RecursionTree.png)\n\n递归树还没有整体学习，现在需要知道的就是，这个递归树的高度是log2n，最后的节点数是θ(n).\n总共加起来等于θ(n) + logn * θ(n) 省去第一项就是θ(n * logn)，这样的话在性能上是优于插入排序的，而且它的临界点只在30左右，这也就是说归并排序在大多数情况下都是更快的。\n\n开了个好头，总之希望好运，希望寒假快乐。\n\n>End...","slug":"算法学习：归并排序以及插入排序","published":1,"updated":"2024-01-20T01:39:55.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nyg001yzkue2uzcfj9s","content":"<p>今天是大学第一个寒假的第一天，昨天玩了半天。</p>\n<span id=\"more\"></span>\n<p>到了晚上临时起志：<br>既然上个暑假啥都没学精，那么这个寒假还是集中一个目标尽力往前进吧。<br>于是在B站上翻视频，一直到了23点。</p>\n<p>今天找到了点生活的奔头，看了MIT学院的算法课程，又学习了两种排序方法，<br>虽然不像之前那么多事情了，如果有啥别的重要的话再说嘛，现在才第一天。<br>心里也想着，既然生活又有希望起来了，期待下学期的精彩旅途。<br>因为我一直都在说着：放假了就快开学了，<br>这样只看起点终点就很给人压迫，所以我还是喜欢去把每一天过得尽量好。</p>\n<p>今天学习了归并排序（Merge Sort）与插入排序（Insertion Sort）<br>经过1-2小时的代码编辑，两种算法都已经以C语言实现完毕了，<br>这里就再复盘一下自己今天学习过的内容。<br>看到应该已经是第二天了，不过都一样。</p>\n<h2 id=\"1-算法分析\"><a href=\"#1-算法分析\" class=\"headerlink\" title=\"1. 算法分析\"></a>1. 算法分析</h2><p>对于一个算法，注重的是它的性能，性能并不是最重要的，<br>但在软件设计过程中，它充当着一种货币，可以通过损失性能来换取其他的特性。</p>\n<p>一般来说，分析算法有三种方式：<br>    1.最坏情况分析<br>    2.平均值分析<br>    3.最好情况分析</p>\n<p>这里的情况指的是对于不同数据的运行时间，<br>我们认为时间T(n)与输入的数组大小n是一个相关映射。</p>\n<p>最坏情况分析就是对于(1, n)下所有的输入中的时间最大值。<br>最好情况分析就是同理的最大值，但是并不一定反映程序运行的一般情况。</p>\n<p>平均值严谨来说应该是时间期望，也就是每种情况的时间乘发生概率求和。<br>概率无从可知，所以我们需要假设一些概率分布模型。</p>\n<h2 id=\"2-插入排序\"><a href=\"#2-插入排序\" class=\"headerlink\" title=\"2. 插入排序\"></a>2. 插入排序</h2><ol>\n<li>算法演示<blockquote>\n<p>代码毕竟只是表达它而已，理解它能够让我们自己写出它来。</p>\n</blockquote>\n</li>\n</ol>\n<p>设想一个序列，我们用连续的小方格表示。<br><img src=\"/img/InsertionSort.png\" alt=\"插入排序\"><br>从2开始遍历数组（假定下标从1开始），然后对于每一个元素进行上图的操作。<br>上图的操作，就好像是移动前面的元素，使得中间空出一个合适的位置，<br>然后将这个拿出来的<code>key</code>插入这个位置一样。</p>\n<ol start=\"2\">\n<li>代码表示<br> 对于一个下标从1到n的数组a<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">2</span>;j &lt; n;j++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tkey = a[j];</span><br><span class=\"line\">\ti = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(a[i] &gt; key &amp;&amp; i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[i + <span class=\"number\">1</span>] = a[i];</span><br><span class=\"line\">\t\ti = i - <span class=\"number\">1</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[i + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>实现的方法极其易懂，想记住打几遍代码也可以<br>道理就与上图中讲的类似。</p>\n<p>当然，我们在C语言中的下标是从0开始的，<br>这样我们可以将<code>j</code>的初始值改变为<code>1</code>，将i的限定条件改为<code>i &gt;= 0</code><br>就可以对平常的C语言数组使用了。</p>\n<ol start=\"3\">\n<li>算法分析</li>\n</ol>\n<p>一般来说，比较性能有两种方式：<br>    一个是不同机器相同算法的相对速度<br>    一个是不同算法相同机器的绝对速度</p>\n<p>描述时间复杂度的符号有O、θ或者Ω，它们叫做渐进符号。<br>渐进分析是算法中的一个伟大的观点，<br>因为它不仅能够反映相对速度的大小，还能反映绝对速度的大小。<br>这些符号如何使用呢？</p>\n<p>步骤<br>    1.将一个式子中的低阶项去掉。<br>    2.将最高阶的参数去掉。</p>\n<p>比如一个式子 y &#x3D; 3 * x^3 + 2 * x^2 （x^2即为x的平方）<br>    去掉低阶项，则为y &#x3D; 3 * x^3<br>    去掉最高阶参数，则为θ(x^3).<br>（这个式子，是通过对于程序所有语句执行的次数累加的结果）</p>\n<p>这就是我们说的时间复杂度刻画方式，实际上复杂度阶数大的时间并不一定大，<br>只是增长过程中一定能够找到超过复杂度阶小的时间的点，之后就一直比它大。<br>这是个临界点。</p>\n<ul>\n<li>最坏情况分析<br>  对于这个算法，它的最坏情况即为完全逆序的情况，需要排序与移动项数n次，假设运行每一个语句的时间都是相等的常数C。</li>\n</ul>\n<p>首先是一个2~n的循环，然后是一个从j - 1到0的循环</p>\n<blockquote>\n<p>(j 2<del>n)ΣjC C是一个常数，从1到n - 1.<br>这样jC也就是θ(j)，所以就变成了 (j 2</del>n)Σθ(j)<br>因为每一项都是j * θ(j)，一共有n项，所以相当于θ(n ^ 2)</p>\n</blockquote>\n<p>说实话，我不觉得排序是很高端的算法，甚至都不算算法。<br>至少在很久之前只知道选择与冒泡的时候是这样想的。<br>只觉得那些听不懂的，比如最短路径的迪杰斯特拉、二分查找、广度优先搜索这些才是。<br>实际上，面对这些较为简单的算法，我们反而更轻松地学习对于一个算法如何分析。</p>\n<h2 id=\"3-归并排序\"><a href=\"#3-归并排序\" class=\"headerlink\" title=\"3. 归并排序\"></a>3. 归并排序</h2><ol>\n<li>算法演示</li>\n</ol>\n<p><img src=\"/img/MergeSort.png\" alt=\"归并排序\"></p>\n<p>这个算法看起来并不是很难，但是实现起来实在不容易，我这里是写了约90行代码。<br>它的道理就是，如果总共只有一个元素，那么就返回这个元素。<br>如果不是，就是两边先排序再归并，<br>归并方式就是挨个比，然后移除元素，直到所有元素都被移到排序后表。<br>实际上可以使用函数递归，这里还用的不熟练。</p>\n<ol start=\"2\">\n<li>代码演示</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> l = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//i为a的下标，j位b的下标，l为c也就是排序后表的下标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在表的最后一个元素没有被去掉的时候</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i != (n / <span class=\"number\">2</span>) &amp;&amp; j != n - (n / <span class=\"number\">2</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] &gt; b[j])</span><br><span class=\"line\">\t\t&#123;\t</span><br><span class=\"line\">\t\t\tc[l] = b[j];</span><br><span class=\"line\">\t\t\tj += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] &lt; b[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tc[l] = a[i];</span><br><span class=\"line\">\t\t\ti += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] == b[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tc[l] = a[i];</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tc[l] = b[j];</span><br><span class=\"line\">\t\t\ti += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tj += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//左表的最后一个元素被去掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == n / <span class=\"number\">2</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;j &lt; n - (n / <span class=\"number\">2</span>);j++)</span><br><span class=\"line\">\t\t\tc[l++] = b[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//右表的最后一个元素被去掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j == n - (n / <span class=\"number\">2</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;i &lt; n / <span class=\"number\">2</span>;i++)</span><br><span class=\"line\">\t\t\tc[l++] = a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>算法分析<br>对于这个算法，课程使用了递归树的模型<br> 对于两个表的排序，需要两个T(n&#x2F;2)的时间，<br> 对于最后的归并，因为只是对于n个元素的操作，所以为θ(n)的时间。</li>\n</ol>\n<p>最后的时间就是T(n) &#x3D; 2 * T(n&#x2F;2) + θ(n)</p>\n<p><img src=\"/img/RecursionTree.png\" alt=\"递归树\"></p>\n<p>递归树还没有整体学习，现在需要知道的就是，这个递归树的高度是log2n，最后的节点数是θ(n).<br>总共加起来等于θ(n) + logn * θ(n) 省去第一项就是θ(n * logn)，这样的话在性能上是优于插入排序的，而且它的临界点只在30左右，这也就是说归并排序在大多数情况下都是更快的。</p>\n<p>开了个好头，总之希望好运，希望寒假快乐。</p>\n<blockquote>\n<p>End…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>今天是大学第一个寒假的第一天，昨天玩了半天。</p>","more":"<p>到了晚上临时起志：<br>既然上个暑假啥都没学精，那么这个寒假还是集中一个目标尽力往前进吧。<br>于是在B站上翻视频，一直到了23点。</p>\n<p>今天找到了点生活的奔头，看了MIT学院的算法课程，又学习了两种排序方法，<br>虽然不像之前那么多事情了，如果有啥别的重要的话再说嘛，现在才第一天。<br>心里也想着，既然生活又有希望起来了，期待下学期的精彩旅途。<br>因为我一直都在说着：放假了就快开学了，<br>这样只看起点终点就很给人压迫，所以我还是喜欢去把每一天过得尽量好。</p>\n<p>今天学习了归并排序（Merge Sort）与插入排序（Insertion Sort）<br>经过1-2小时的代码编辑，两种算法都已经以C语言实现完毕了，<br>这里就再复盘一下自己今天学习过的内容。<br>看到应该已经是第二天了，不过都一样。</p>\n<h2 id=\"1-算法分析\"><a href=\"#1-算法分析\" class=\"headerlink\" title=\"1. 算法分析\"></a>1. 算法分析</h2><p>对于一个算法，注重的是它的性能，性能并不是最重要的，<br>但在软件设计过程中，它充当着一种货币，可以通过损失性能来换取其他的特性。</p>\n<p>一般来说，分析算法有三种方式：<br>    1.最坏情况分析<br>    2.平均值分析<br>    3.最好情况分析</p>\n<p>这里的情况指的是对于不同数据的运行时间，<br>我们认为时间T(n)与输入的数组大小n是一个相关映射。</p>\n<p>最坏情况分析就是对于(1, n)下所有的输入中的时间最大值。<br>最好情况分析就是同理的最大值，但是并不一定反映程序运行的一般情况。</p>\n<p>平均值严谨来说应该是时间期望，也就是每种情况的时间乘发生概率求和。<br>概率无从可知，所以我们需要假设一些概率分布模型。</p>\n<h2 id=\"2-插入排序\"><a href=\"#2-插入排序\" class=\"headerlink\" title=\"2. 插入排序\"></a>2. 插入排序</h2><ol>\n<li>算法演示<blockquote>\n<p>代码毕竟只是表达它而已，理解它能够让我们自己写出它来。</p>\n</blockquote>\n</li>\n</ol>\n<p>设想一个序列，我们用连续的小方格表示。<br><img src=\"/img/InsertionSort.png\" alt=\"插入排序\"><br>从2开始遍历数组（假定下标从1开始），然后对于每一个元素进行上图的操作。<br>上图的操作，就好像是移动前面的元素，使得中间空出一个合适的位置，<br>然后将这个拿出来的<code>key</code>插入这个位置一样。</p>\n<ol start=\"2\">\n<li>代码表示<br> 对于一个下标从1到n的数组a<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">2</span>;j &lt; n;j++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tkey = a[j];</span><br><span class=\"line\">\ti = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(a[i] &gt; key &amp;&amp; i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[i + <span class=\"number\">1</span>] = a[i];</span><br><span class=\"line\">\t\ti = i - <span class=\"number\">1</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[i + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>实现的方法极其易懂，想记住打几遍代码也可以<br>道理就与上图中讲的类似。</p>\n<p>当然，我们在C语言中的下标是从0开始的，<br>这样我们可以将<code>j</code>的初始值改变为<code>1</code>，将i的限定条件改为<code>i &gt;= 0</code><br>就可以对平常的C语言数组使用了。</p>\n<ol start=\"3\">\n<li>算法分析</li>\n</ol>\n<p>一般来说，比较性能有两种方式：<br>    一个是不同机器相同算法的相对速度<br>    一个是不同算法相同机器的绝对速度</p>\n<p>描述时间复杂度的符号有O、θ或者Ω，它们叫做渐进符号。<br>渐进分析是算法中的一个伟大的观点，<br>因为它不仅能够反映相对速度的大小，还能反映绝对速度的大小。<br>这些符号如何使用呢？</p>\n<p>步骤<br>    1.将一个式子中的低阶项去掉。<br>    2.将最高阶的参数去掉。</p>\n<p>比如一个式子 y &#x3D; 3 * x^3 + 2 * x^2 （x^2即为x的平方）<br>    去掉低阶项，则为y &#x3D; 3 * x^3<br>    去掉最高阶参数，则为θ(x^3).<br>（这个式子，是通过对于程序所有语句执行的次数累加的结果）</p>\n<p>这就是我们说的时间复杂度刻画方式，实际上复杂度阶数大的时间并不一定大，<br>只是增长过程中一定能够找到超过复杂度阶小的时间的点，之后就一直比它大。<br>这是个临界点。</p>\n<ul>\n<li>最坏情况分析<br>  对于这个算法，它的最坏情况即为完全逆序的情况，需要排序与移动项数n次，假设运行每一个语句的时间都是相等的常数C。</li>\n</ul>\n<p>首先是一个2~n的循环，然后是一个从j - 1到0的循环</p>\n<blockquote>\n<p>(j 2<del>n)ΣjC C是一个常数，从1到n - 1.<br>这样jC也就是θ(j)，所以就变成了 (j 2</del>n)Σθ(j)<br>因为每一项都是j * θ(j)，一共有n项，所以相当于θ(n ^ 2)</p>\n</blockquote>\n<p>说实话，我不觉得排序是很高端的算法，甚至都不算算法。<br>至少在很久之前只知道选择与冒泡的时候是这样想的。<br>只觉得那些听不懂的，比如最短路径的迪杰斯特拉、二分查找、广度优先搜索这些才是。<br>实际上，面对这些较为简单的算法，我们反而更轻松地学习对于一个算法如何分析。</p>\n<h2 id=\"3-归并排序\"><a href=\"#3-归并排序\" class=\"headerlink\" title=\"3. 归并排序\"></a>3. 归并排序</h2><ol>\n<li>算法演示</li>\n</ol>\n<p><img src=\"/img/MergeSort.png\" alt=\"归并排序\"></p>\n<p>这个算法看起来并不是很难，但是实现起来实在不容易，我这里是写了约90行代码。<br>它的道理就是，如果总共只有一个元素，那么就返回这个元素。<br>如果不是，就是两边先排序再归并，<br>归并方式就是挨个比，然后移除元素，直到所有元素都被移到排序后表。<br>实际上可以使用函数递归，这里还用的不熟练。</p>\n<ol start=\"2\">\n<li>代码演示</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> l = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//i为a的下标，j位b的下标，l为c也就是排序后表的下标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在表的最后一个元素没有被去掉的时候</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i != (n / <span class=\"number\">2</span>) &amp;&amp; j != n - (n / <span class=\"number\">2</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] &gt; b[j])</span><br><span class=\"line\">\t\t&#123;\t</span><br><span class=\"line\">\t\t\tc[l] = b[j];</span><br><span class=\"line\">\t\t\tj += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] &lt; b[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tc[l] = a[i];</span><br><span class=\"line\">\t\t\ti += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] == b[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tc[l] = a[i];</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tc[l] = b[j];</span><br><span class=\"line\">\t\t\ti += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tj += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//左表的最后一个元素被去掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == n / <span class=\"number\">2</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;j &lt; n - (n / <span class=\"number\">2</span>);j++)</span><br><span class=\"line\">\t\t\tc[l++] = b[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//右表的最后一个元素被去掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j == n - (n / <span class=\"number\">2</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;i &lt; n / <span class=\"number\">2</span>;i++)</span><br><span class=\"line\">\t\t\tc[l++] = a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>算法分析<br>对于这个算法，课程使用了递归树的模型<br> 对于两个表的排序，需要两个T(n&#x2F;2)的时间，<br> 对于最后的归并，因为只是对于n个元素的操作，所以为θ(n)的时间。</li>\n</ol>\n<p>最后的时间就是T(n) &#x3D; 2 * T(n&#x2F;2) + θ(n)</p>\n<p><img src=\"/img/RecursionTree.png\" alt=\"递归树\"></p>\n<p>递归树还没有整体学习，现在需要知道的就是，这个递归树的高度是log2n，最后的节点数是θ(n).<br>总共加起来等于θ(n) + logn * θ(n) 省去第一项就是θ(n * logn)，这样的话在性能上是优于插入排序的，而且它的临界点只在30左右，这也就是说归并排序在大多数情况下都是更快的。</p>\n<p>开了个好头，总之希望好运，希望寒假快乐。</p>\n<blockquote>\n<p>End…</p>\n</blockquote>"},{"title":"输入与输出","date":"2023-11-20T01:46:35.000Z","_content":"从字符串那里，包括之前听C语言群里大佬说\n也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。\n今天也一并分享给大家。<!--more-->\n\n## 1.stdio.h中的更多的函数\n(关于stream与参数列表的不讲，还没学到。)\n\n类似的，应该你们也听说过，这里列一下。\n\n```C\nint sprintf(char *str, const char *format);\nint sscanf(const char *str, const char *format, ...);\n```\n### 一.函数定义读法\n\n这里是纯纯的函数函数定义，看起来可能很抽象，\n**没关系，我会出手。**\n\n总体上一讲，以后见到**前面带f**的一般是有关`stream`的\n**带v的**一般是有关`参数列表`的，\n以后看到学长写类似的函数就知道该多学习了!😂\n\n对于以后看这样的函数定义，首先看[返回值类型]，\n一般是，返回处理的结果或者返回一个数值（int/double)\n\n然后如果看不懂函数名的话，\n先看[括号中的形式参数]，知道我们需要输入的是什么东西。\n\n>比如这两个函数中\n>**const**是数据类型的修饰符，表示常量。\n>char* 表示字符串、后面的是形式参数名，不需要管。\n\n最后，通过[看实例]与函数的[概述]得知函数的作用。\n在菜鸟教程里都一条一条地列出来的，每一条都有实例。\n\n在最后一篇文章的最后会给大家列出来用过的这些网站。\n\n### 二.浅谈没讲过的sscanf()函数\n\n上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。\n现在就来讲一讲相对的sscanf函数。\n\n不多说，直接上函数定义。\n```C\nint sscanf(const char *str, const char *format, ...);\n```\n\n首先看**返回值**\n这个函数返回的是一个数值，也就像scanf一样\n函数返回的是成功赋值与匹配的个数。\n如果到达文件末尾或者错误返回EOF。\n\n然后看**形参**\n获取的是字符串常量(`const char *str`)，\n\t这个字符串，是包含着我们想要赋值数据的字符串。\n写入形式(`const char *format`)\n\t写入形式相当于格式化符，相当于赋值的顺序）\n\t尽量不要加新的形式。\n与参数列表(`...`)。\n\t对应之前的格式化符。\n关于参数列表，其实简单的说\n就是我们printf中标准符后边逗号中的内容\n见下方。\n\n```C\nint a,b,c;\nscanf(\"%d %d %d\",&a,&b,&c);\n//后面的a,b,c就是参数列表\n//%d的这个字符串就是写入形式的一种形式\n```\n\n所以这个函数的**功能**就是\n>1.从字符串中获取数据，\n>2.然后赋给格式化符的对应的变量。\n\nsscanf不需要我们自己输入，在字符串中有就好。\n\n所以更多的惯例自己去菜鸟教程上查就好，\n**建议立即行动，不然一定会忘记。**\n\n## 二.关于我们的输入输出\n\n>以下内容取自空梦大大的博客\n>[如何理解c/c++中的输入/输出函数？ | 山岳库博](https://kmar.top/posts/51c9b0a0/)\n>我们这里梳理的是，我们这个阶段可以用到的符号。\n\n### 1.关于格式化符与printf、scanf修饰符\n\n格式化符我们需要知道的如下，之前在题中也出过。\n\t1. %d/%lf/%f/%c 整数、字符、浮点数\n\t2. %s 字符串输入与输出。\n\t3. %x/%X - 十六进制整数 或者 %o 八进制整数\n\t4. %%两个百分号一起用可以输出%号，相当于转义了。\n%%\n掌握了这些我们就不太用怕需要的数据表示不出来了。\n现在看来老师教的还是不是很够，第一个都用过时了。\n\n## printf修饰符\n1. 加数字，右对齐字符宽度。-实例：`printf(\"%4d\",n);`\n2. .数字，对于小数表示小数后位数，比如`%.3lf`\n\t对于字符串是打印字符的最大数量\n\t只使用点%.f与%.0f相同。\n3. 使用ll表示long long `%lld`\n4. 使用l，对于整型表示long int，对于浮点型表示double\n5. 各种标记：\n\t1. 在数字前加符号为左对齐\n\t2. + 是为了把在有符号数开头加'+'或者'-'。\n\t3. 加0对于多于的字段宽度填充0，如`%04d`\n\t\t对于1，返回的是0001.\n\t\t4.加入 * 决定填入数字，\n\t\t需要在参数列表中新加入一个变量。\n\t\t 常见形式为`%*lf`\n\n## scanf修饰符\n1. * 只读取不赋值，这对于无用数据是有用处的 形式为类似`%*d`\n\td可以任意换，以下的所有实例中的d都可以换成其他类型\n2. 同样的加数字为取字段的宽，有多长取多长，别的截掉。\n\n这就是最近关于输入输出想和大家分享的内容。\n\n\n\n","source":"_posts/输入与输出.md","raw":"---\ntitle: 输入与输出\ndate: 2023-11-20 09:46:35\ntags: C语言学习\n---\n从字符串那里，包括之前听C语言群里大佬说\n也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。\n今天也一并分享给大家。<!--more-->\n\n## 1.stdio.h中的更多的函数\n(关于stream与参数列表的不讲，还没学到。)\n\n类似的，应该你们也听说过，这里列一下。\n\n```C\nint sprintf(char *str, const char *format);\nint sscanf(const char *str, const char *format, ...);\n```\n### 一.函数定义读法\n\n这里是纯纯的函数函数定义，看起来可能很抽象，\n**没关系，我会出手。**\n\n总体上一讲，以后见到**前面带f**的一般是有关`stream`的\n**带v的**一般是有关`参数列表`的，\n以后看到学长写类似的函数就知道该多学习了!😂\n\n对于以后看这样的函数定义，首先看[返回值类型]，\n一般是，返回处理的结果或者返回一个数值（int/double)\n\n然后如果看不懂函数名的话，\n先看[括号中的形式参数]，知道我们需要输入的是什么东西。\n\n>比如这两个函数中\n>**const**是数据类型的修饰符，表示常量。\n>char* 表示字符串、后面的是形式参数名，不需要管。\n\n最后，通过[看实例]与函数的[概述]得知函数的作用。\n在菜鸟教程里都一条一条地列出来的，每一条都有实例。\n\n在最后一篇文章的最后会给大家列出来用过的这些网站。\n\n### 二.浅谈没讲过的sscanf()函数\n\n上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。\n现在就来讲一讲相对的sscanf函数。\n\n不多说，直接上函数定义。\n```C\nint sscanf(const char *str, const char *format, ...);\n```\n\n首先看**返回值**\n这个函数返回的是一个数值，也就像scanf一样\n函数返回的是成功赋值与匹配的个数。\n如果到达文件末尾或者错误返回EOF。\n\n然后看**形参**\n获取的是字符串常量(`const char *str`)，\n\t这个字符串，是包含着我们想要赋值数据的字符串。\n写入形式(`const char *format`)\n\t写入形式相当于格式化符，相当于赋值的顺序）\n\t尽量不要加新的形式。\n与参数列表(`...`)。\n\t对应之前的格式化符。\n关于参数列表，其实简单的说\n就是我们printf中标准符后边逗号中的内容\n见下方。\n\n```C\nint a,b,c;\nscanf(\"%d %d %d\",&a,&b,&c);\n//后面的a,b,c就是参数列表\n//%d的这个字符串就是写入形式的一种形式\n```\n\n所以这个函数的**功能**就是\n>1.从字符串中获取数据，\n>2.然后赋给格式化符的对应的变量。\n\nsscanf不需要我们自己输入，在字符串中有就好。\n\n所以更多的惯例自己去菜鸟教程上查就好，\n**建议立即行动，不然一定会忘记。**\n\n## 二.关于我们的输入输出\n\n>以下内容取自空梦大大的博客\n>[如何理解c/c++中的输入/输出函数？ | 山岳库博](https://kmar.top/posts/51c9b0a0/)\n>我们这里梳理的是，我们这个阶段可以用到的符号。\n\n### 1.关于格式化符与printf、scanf修饰符\n\n格式化符我们需要知道的如下，之前在题中也出过。\n\t1. %d/%lf/%f/%c 整数、字符、浮点数\n\t2. %s 字符串输入与输出。\n\t3. %x/%X - 十六进制整数 或者 %o 八进制整数\n\t4. %%两个百分号一起用可以输出%号，相当于转义了。\n%%\n掌握了这些我们就不太用怕需要的数据表示不出来了。\n现在看来老师教的还是不是很够，第一个都用过时了。\n\n## printf修饰符\n1. 加数字，右对齐字符宽度。-实例：`printf(\"%4d\",n);`\n2. .数字，对于小数表示小数后位数，比如`%.3lf`\n\t对于字符串是打印字符的最大数量\n\t只使用点%.f与%.0f相同。\n3. 使用ll表示long long `%lld`\n4. 使用l，对于整型表示long int，对于浮点型表示double\n5. 各种标记：\n\t1. 在数字前加符号为左对齐\n\t2. + 是为了把在有符号数开头加'+'或者'-'。\n\t3. 加0对于多于的字段宽度填充0，如`%04d`\n\t\t对于1，返回的是0001.\n\t\t4.加入 * 决定填入数字，\n\t\t需要在参数列表中新加入一个变量。\n\t\t 常见形式为`%*lf`\n\n## scanf修饰符\n1. * 只读取不赋值，这对于无用数据是有用处的 形式为类似`%*d`\n\td可以任意换，以下的所有实例中的d都可以换成其他类型\n2. 同样的加数字为取字段的宽，有多长取多长，别的截掉。\n\n这就是最近关于输入输出想和大家分享的内容。\n\n\n\n","slug":"输入与输出","published":1,"updated":"2023-11-20T12:08:42.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nyh001zzkue0q0of7fr","content":"<p>从字符串那里，包括之前听C语言群里大佬说<br>也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。<br>今天也一并分享给大家。<span id=\"more\"></span></p>\n<h2 id=\"1-stdio-h中的更多的函数\"><a href=\"#1-stdio-h中的更多的函数\" class=\"headerlink\" title=\"1.stdio.h中的更多的函数\"></a>1.stdio.h中的更多的函数</h2><p>(关于stream与参数列表的不讲，还没学到。)</p>\n<p>类似的，应该你们也听说过，这里列一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sprintf</span><span class=\"params\">(<span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一-函数定义读法\"><a href=\"#一-函数定义读法\" class=\"headerlink\" title=\"一.函数定义读法\"></a>一.函数定义读法</h3><p>这里是纯纯的函数函数定义，看起来可能很抽象，<br><strong>没关系，我会出手。</strong></p>\n<p>总体上一讲，以后见到<strong>前面带f</strong>的一般是有关<code>stream</code>的<br><strong>带v的</strong>一般是有关<code>参数列表</code>的，<br>以后看到学长写类似的函数就知道该多学习了!😂</p>\n<p>对于以后看这样的函数定义，首先看[返回值类型]，<br>一般是，返回处理的结果或者返回一个数值（int&#x2F;double)</p>\n<p>然后如果看不懂函数名的话，<br>先看[括号中的形式参数]，知道我们需要输入的是什么东西。</p>\n<blockquote>\n<p>比如这两个函数中<br><strong>const</strong>是数据类型的修饰符，表示常量。<br>char* 表示字符串、后面的是形式参数名，不需要管。</p>\n</blockquote>\n<p>最后，通过[看实例]与函数的[概述]得知函数的作用。<br>在菜鸟教程里都一条一条地列出来的，每一条都有实例。</p>\n<p>在最后一篇文章的最后会给大家列出来用过的这些网站。</p>\n<h3 id=\"二-浅谈没讲过的sscanf-函数\"><a href=\"#二-浅谈没讲过的sscanf-函数\" class=\"headerlink\" title=\"二.浅谈没讲过的sscanf()函数\"></a>二.浅谈没讲过的sscanf()函数</h3><p>上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。<br>现在就来讲一讲相对的sscanf函数。</p>\n<p>不多说，直接上函数定义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>首先看<strong>返回值</strong><br>这个函数返回的是一个数值，也就像scanf一样<br>函数返回的是成功赋值与匹配的个数。<br>如果到达文件末尾或者错误返回EOF。</p>\n<p>然后看<strong>形参</strong><br>获取的是字符串常量(<code>const char *str</code>)，<br>    这个字符串，是包含着我们想要赋值数据的字符串。<br>写入形式(<code>const char *format</code>)<br>    写入形式相当于格式化符，相当于赋值的顺序）<br>    尽量不要加新的形式。<br>与参数列表(<code>...</code>)。<br>    对应之前的格式化符。<br>关于参数列表，其实简单的说<br>就是我们printf中标准符后边逗号中的内容<br>见下方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\"><span class=\"comment\">//后面的a,b,c就是参数列表</span></span><br><span class=\"line\"><span class=\"comment\">//%d的这个字符串就是写入形式的一种形式</span></span><br></pre></td></tr></table></figure>\n\n<p>所以这个函数的<strong>功能</strong>就是</p>\n<blockquote>\n<p>1.从字符串中获取数据，<br>2.然后赋给格式化符的对应的变量。</p>\n</blockquote>\n<p>sscanf不需要我们自己输入，在字符串中有就好。</p>\n<p>所以更多的惯例自己去菜鸟教程上查就好，<br><strong>建议立即行动，不然一定会忘记。</strong></p>\n<h2 id=\"二-关于我们的输入输出\"><a href=\"#二-关于我们的输入输出\" class=\"headerlink\" title=\"二.关于我们的输入输出\"></a>二.关于我们的输入输出</h2><blockquote>\n<p>以下内容取自空梦大大的博客<br><a href=\"https://kmar.top/posts/51c9b0a0/\">如何理解c&#x2F;c++中的输入&#x2F;输出函数？ | 山岳库博</a><br>我们这里梳理的是，我们这个阶段可以用到的符号。</p>\n</blockquote>\n<h3 id=\"1-关于格式化符与printf、scanf修饰符\"><a href=\"#1-关于格式化符与printf、scanf修饰符\" class=\"headerlink\" title=\"1.关于格式化符与printf、scanf修饰符\"></a>1.关于格式化符与printf、scanf修饰符</h3><p>格式化符我们需要知道的如下，之前在题中也出过。<br>    1. %d&#x2F;%lf&#x2F;%f&#x2F;%c 整数、字符、浮点数<br>    2. %s 字符串输入与输出。<br>    3. %x&#x2F;%X - 十六进制整数 或者 %o 八进制整数<br>    4. %%两个百分号一起用可以输出%号，相当于转义了。<br>%%<br>掌握了这些我们就不太用怕需要的数据表示不出来了。<br>现在看来老师教的还是不是很够，第一个都用过时了。</p>\n<h2 id=\"printf修饰符\"><a href=\"#printf修饰符\" class=\"headerlink\" title=\"printf修饰符\"></a>printf修饰符</h2><ol>\n<li>加数字，右对齐字符宽度。-实例：<code>printf(&quot;%4d&quot;,n);</code></li>\n<li>.数字，对于小数表示小数后位数，比如<code>%.3lf</code><br> 对于字符串是打印字符的最大数量<br> 只使用点%.f与%.0f相同。</li>\n<li>使用ll表示long long <code>%lld</code></li>\n<li>使用l，对于整型表示long int，对于浮点型表示double</li>\n<li>各种标记：<ol>\n<li>在数字前加符号为左对齐</li>\n<li><ul>\n<li>是为了把在有符号数开头加’+’或者’-‘。</li>\n</ul>\n</li>\n<li>加0对于多于的字段宽度填充0，如<code>%04d</code><br> 对于1，返回的是0001.<br> 4.加入 * 决定填入数字，<br> 需要在参数列表中新加入一个变量。<br>  常见形式为<code>%*lf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"scanf修饰符\"><a href=\"#scanf修饰符\" class=\"headerlink\" title=\"scanf修饰符\"></a>scanf修饰符</h2><ol>\n<li><ul>\n<li>只读取不赋值，这对于无用数据是有用处的 形式为类似<code>%*d</code><br> d可以任意换，以下的所有实例中的d都可以换成其他类型</li>\n</ul>\n</li>\n<li>同样的加数字为取字段的宽，有多长取多长，别的截掉。</li>\n</ol>\n<p>这就是最近关于输入输出想和大家分享的内容。</p>\n","site":{"data":{}},"excerpt":"<p>从字符串那里，包括之前听C语言群里大佬说<br>也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。<br>今天也一并分享给大家。","more":"</p>\n<h2 id=\"1-stdio-h中的更多的函数\"><a href=\"#1-stdio-h中的更多的函数\" class=\"headerlink\" title=\"1.stdio.h中的更多的函数\"></a>1.stdio.h中的更多的函数</h2><p>(关于stream与参数列表的不讲，还没学到。)</p>\n<p>类似的，应该你们也听说过，这里列一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sprintf</span><span class=\"params\">(<span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一-函数定义读法\"><a href=\"#一-函数定义读法\" class=\"headerlink\" title=\"一.函数定义读法\"></a>一.函数定义读法</h3><p>这里是纯纯的函数函数定义，看起来可能很抽象，<br><strong>没关系，我会出手。</strong></p>\n<p>总体上一讲，以后见到<strong>前面带f</strong>的一般是有关<code>stream</code>的<br><strong>带v的</strong>一般是有关<code>参数列表</code>的，<br>以后看到学长写类似的函数就知道该多学习了!😂</p>\n<p>对于以后看这样的函数定义，首先看[返回值类型]，<br>一般是，返回处理的结果或者返回一个数值（int&#x2F;double)</p>\n<p>然后如果看不懂函数名的话，<br>先看[括号中的形式参数]，知道我们需要输入的是什么东西。</p>\n<blockquote>\n<p>比如这两个函数中<br><strong>const</strong>是数据类型的修饰符，表示常量。<br>char* 表示字符串、后面的是形式参数名，不需要管。</p>\n</blockquote>\n<p>最后，通过[看实例]与函数的[概述]得知函数的作用。<br>在菜鸟教程里都一条一条地列出来的，每一条都有实例。</p>\n<p>在最后一篇文章的最后会给大家列出来用过的这些网站。</p>\n<h3 id=\"二-浅谈没讲过的sscanf-函数\"><a href=\"#二-浅谈没讲过的sscanf-函数\" class=\"headerlink\" title=\"二.浅谈没讲过的sscanf()函数\"></a>二.浅谈没讲过的sscanf()函数</h3><p>上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。<br>现在就来讲一讲相对的sscanf函数。</p>\n<p>不多说，直接上函数定义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>首先看<strong>返回值</strong><br>这个函数返回的是一个数值，也就像scanf一样<br>函数返回的是成功赋值与匹配的个数。<br>如果到达文件末尾或者错误返回EOF。</p>\n<p>然后看<strong>形参</strong><br>获取的是字符串常量(<code>const char *str</code>)，<br>    这个字符串，是包含着我们想要赋值数据的字符串。<br>写入形式(<code>const char *format</code>)<br>    写入形式相当于格式化符，相当于赋值的顺序）<br>    尽量不要加新的形式。<br>与参数列表(<code>...</code>)。<br>    对应之前的格式化符。<br>关于参数列表，其实简单的说<br>就是我们printf中标准符后边逗号中的内容<br>见下方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\"><span class=\"comment\">//后面的a,b,c就是参数列表</span></span><br><span class=\"line\"><span class=\"comment\">//%d的这个字符串就是写入形式的一种形式</span></span><br></pre></td></tr></table></figure>\n\n<p>所以这个函数的<strong>功能</strong>就是</p>\n<blockquote>\n<p>1.从字符串中获取数据，<br>2.然后赋给格式化符的对应的变量。</p>\n</blockquote>\n<p>sscanf不需要我们自己输入，在字符串中有就好。</p>\n<p>所以更多的惯例自己去菜鸟教程上查就好，<br><strong>建议立即行动，不然一定会忘记。</strong></p>\n<h2 id=\"二-关于我们的输入输出\"><a href=\"#二-关于我们的输入输出\" class=\"headerlink\" title=\"二.关于我们的输入输出\"></a>二.关于我们的输入输出</h2><blockquote>\n<p>以下内容取自空梦大大的博客<br><a href=\"https://kmar.top/posts/51c9b0a0/\">如何理解c&#x2F;c++中的输入&#x2F;输出函数？ | 山岳库博</a><br>我们这里梳理的是，我们这个阶段可以用到的符号。</p>\n</blockquote>\n<h3 id=\"1-关于格式化符与printf、scanf修饰符\"><a href=\"#1-关于格式化符与printf、scanf修饰符\" class=\"headerlink\" title=\"1.关于格式化符与printf、scanf修饰符\"></a>1.关于格式化符与printf、scanf修饰符</h3><p>格式化符我们需要知道的如下，之前在题中也出过。<br>    1. %d&#x2F;%lf&#x2F;%f&#x2F;%c 整数、字符、浮点数<br>    2. %s 字符串输入与输出。<br>    3. %x&#x2F;%X - 十六进制整数 或者 %o 八进制整数<br>    4. %%两个百分号一起用可以输出%号，相当于转义了。<br>%%<br>掌握了这些我们就不太用怕需要的数据表示不出来了。<br>现在看来老师教的还是不是很够，第一个都用过时了。</p>\n<h2 id=\"printf修饰符\"><a href=\"#printf修饰符\" class=\"headerlink\" title=\"printf修饰符\"></a>printf修饰符</h2><ol>\n<li>加数字，右对齐字符宽度。-实例：<code>printf(&quot;%4d&quot;,n);</code></li>\n<li>.数字，对于小数表示小数后位数，比如<code>%.3lf</code><br> 对于字符串是打印字符的最大数量<br> 只使用点%.f与%.0f相同。</li>\n<li>使用ll表示long long <code>%lld</code></li>\n<li>使用l，对于整型表示long int，对于浮点型表示double</li>\n<li>各种标记：<ol>\n<li>在数字前加符号为左对齐</li>\n<li><ul>\n<li>是为了把在有符号数开头加’+’或者’-‘。</li>\n</ul>\n</li>\n<li>加0对于多于的字段宽度填充0，如<code>%04d</code><br> 对于1，返回的是0001.<br> 4.加入 * 决定填入数字，<br> 需要在参数列表中新加入一个变量。<br>  常见形式为<code>%*lf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"scanf修饰符\"><a href=\"#scanf修饰符\" class=\"headerlink\" title=\"scanf修饰符\"></a>scanf修饰符</h2><ol>\n<li><ul>\n<li>只读取不赋值，这对于无用数据是有用处的 形式为类似<code>%*d</code><br> d可以任意换，以下的所有实例中的d都可以换成其他类型</li>\n</ul>\n</li>\n<li>同样的加数字为取字段的宽，有多长取多长，别的截掉。</li>\n</ol>\n<p>这就是最近关于输入输出想和大家分享的内容。</p>"},{"title":"算法学习：快速幂 以及 这几天搞机心得","date":"2024-01-26T05:12:17.000Z","_content":"\n随着自己学习的进行，感觉需要尝试的东西越来越多了。\n比如C++的学习、HTML学习，以及算法与数据结构。\n感觉又得重新规划一下了，不过我能挺过去的。\n等到开学我会变得大不一样的。\n<!--more-->\n\n## 1.快速幂\n\n今天尝试写完了乘方的程序，也就是补齐了负数次方的结果，但是还是通不过，因为时间耗费太长，看到leetcode上还有这样的结果：样例全部通过了，但时间耗费太长，所以判未通过。。这与我们的OJ判法还是有点差别的。\n\n看过题解之后，我又学会了一个之前听过的算法，它叫做快速幂。\n实际上就是上一次讲的算法，只不过我理解的有偏差，所以在实现上它的次数降落并不与算法中一样，计算起来还是有重复的步数（比如5次方不是偶数了，于是就直接开始按照老方法算了，更别说更大的奇数了）。\n\n所以下面为快速幂的代码展示：\n\n```C\ndouble quickpower(double x, int n)\n{\n    if(n == 0) return 1;\n    if(n == 1) return x;\n    double result = quickpower(x, n / 2);\n    return n % 2 == 0 ? result * result : result * result * x; \n}\n\ndouble compute(double x, int n)\n{\n    long long N = n;\n    return N >= 0 ? quickpower(x, N) : (1.0) / quickpower(x, -N);\n}\n```\n\n所有的次数只需要算一遍，\n而且次数的个数也比之前少了很多。\n时间复杂度O(logn).\n\n## 2.AndroidX86 9.0 试用心得\n\n> 我还是挺喜欢搞机的，一个平平无奇的机子，\n> 一开始研究其中底层的东西一切都变得有趣起来了。\n\n曾经尝试过使用系统进程唤起的方式一个一个打开系统进程，这个过程真的还有不少有趣的东西，我也不知道在找什么，但是就是很能给人新奇与发现的感觉，那时候第一次做也是心怀着上网与安装应用的目的，去找寻系统能不能有办法恢复出厂设置（当时学生平板给安了一个拥有超级用户权限的学习软件控制着的，不准恢复出厂设置），找到了点恢复出厂设置的那个按键，点之后什么都没发生，不过那之后还是很乐于做这件事。\n\n现在找老机子就是纯属发掘里面的潜能了。\n我一般就是看美观、干净的程度以及使用的便利程度\n\n三年级的时候买的？或者更早，那台机子已经在我们家很多年了，这几天看到了`AndroidX86`，在虚拟机上的清晰度太差了，而且声音也不达标，断断续续的。感觉在电脑上安装安卓系统还挺好玩的，要是再安点软件没准能够让它重新焕发生机，一向喜欢这种事的我今天捣鼓了一天，但过程也是异常的艰辛，之前的文件对于现在没用的很多了，都需要删除来给新系统腾空，更别说因为各种广告垃圾软件系统贼卡。\n\n下午，利用U盘刷机，安上了想要的AndroidX86系统，甚至没有按照教程，一通乱点（实际上应该是一开始点错了，然后它没有退出选项。。）。安上了又觉得哪里都看不上眼，输入法没有中文，很多软件好像是因为架构的原因安不上，而且联网还有问题，你必须断网情况下才能过第一次使用的引导程序。另外因为一开始点错了，内存只有可怜的4个G，可用的只有700多M。而且因为是老机子，也是很卡，这接二连三的错误劝退了我，不太想弄了，弄完已经是下午5点了。不过除此之外还把之前老系统刷回了Win7，现在正常使用是一点问题没有的，也挺快的，可以当个巨型U盘来用嘿嘿。\n\n要不是初三因为安装了应用平板被老爸摔了，\n害，现在还能用那个平板呢，\n感觉屏幕比现在用的大多了，而且自定义性也高，应该能做得不错。\n\n一天下来确实是挺累的，看着之前下过的游戏与之前的照片，花了大概是一上午的时间全部“检阅”了一遍吧，挺多的游戏现在仍然还在玩着，不过以前的时候也是挺爱尝试的，电脑里也有其他已经忘记的，回顾一遍也能想起来那时候玩游戏的开心，想起那个时候照片中的自己，是如何一步一步地成长为现在的我的。\n\n反思过后，我可能就是那种丝毫不愿看着事情变得极坏极坏的人，如果一样东西只是因为年岁原因而被抛弃，或者被人们因为其他局限的观点而全盘否定，我会很反对，我想要发现它们中间的其他闪光点，我想让他们重新好起来。\n\n我也是个怀旧的人，之前使用过的很多东西包括APP，我还是不厌其烦地看看他们现在是啥样子了，有的真的是随着时间而变得无人问津，举几个例子吧：小猿搜题、作业帮一课（其实作业帮本身也不太提起了），一起作业，手机乐园（之前可以与酷安以及应用汇抗衡的应用商店），7723游戏盒（这个知道的可能比较少，我从初中开始用，里面有个氛围挺好的资源交流论坛，但是现在已经关闭了，因为严格的审核政策。）不少改变还挺令人唏嘘的，这也是所谓的以史为鉴吧，看前几天发现的雨纸app，有时候还能够挖到宝呢！\n\n所谓的记忆，流光。。\n\n>End...\n","source":"_posts/算法学习：快速幂-以及-这几天搞机心得.md","raw":"---\ntitle: 算法学习：快速幂 以及 这几天搞机心得\ndate: 2024-01-26 13:12:17\ntags: \n\t- 算法\n\t- 搞机心得\n---\n\n随着自己学习的进行，感觉需要尝试的东西越来越多了。\n比如C++的学习、HTML学习，以及算法与数据结构。\n感觉又得重新规划一下了，不过我能挺过去的。\n等到开学我会变得大不一样的。\n<!--more-->\n\n## 1.快速幂\n\n今天尝试写完了乘方的程序，也就是补齐了负数次方的结果，但是还是通不过，因为时间耗费太长，看到leetcode上还有这样的结果：样例全部通过了，但时间耗费太长，所以判未通过。。这与我们的OJ判法还是有点差别的。\n\n看过题解之后，我又学会了一个之前听过的算法，它叫做快速幂。\n实际上就是上一次讲的算法，只不过我理解的有偏差，所以在实现上它的次数降落并不与算法中一样，计算起来还是有重复的步数（比如5次方不是偶数了，于是就直接开始按照老方法算了，更别说更大的奇数了）。\n\n所以下面为快速幂的代码展示：\n\n```C\ndouble quickpower(double x, int n)\n{\n    if(n == 0) return 1;\n    if(n == 1) return x;\n    double result = quickpower(x, n / 2);\n    return n % 2 == 0 ? result * result : result * result * x; \n}\n\ndouble compute(double x, int n)\n{\n    long long N = n;\n    return N >= 0 ? quickpower(x, N) : (1.0) / quickpower(x, -N);\n}\n```\n\n所有的次数只需要算一遍，\n而且次数的个数也比之前少了很多。\n时间复杂度O(logn).\n\n## 2.AndroidX86 9.0 试用心得\n\n> 我还是挺喜欢搞机的，一个平平无奇的机子，\n> 一开始研究其中底层的东西一切都变得有趣起来了。\n\n曾经尝试过使用系统进程唤起的方式一个一个打开系统进程，这个过程真的还有不少有趣的东西，我也不知道在找什么，但是就是很能给人新奇与发现的感觉，那时候第一次做也是心怀着上网与安装应用的目的，去找寻系统能不能有办法恢复出厂设置（当时学生平板给安了一个拥有超级用户权限的学习软件控制着的，不准恢复出厂设置），找到了点恢复出厂设置的那个按键，点之后什么都没发生，不过那之后还是很乐于做这件事。\n\n现在找老机子就是纯属发掘里面的潜能了。\n我一般就是看美观、干净的程度以及使用的便利程度\n\n三年级的时候买的？或者更早，那台机子已经在我们家很多年了，这几天看到了`AndroidX86`，在虚拟机上的清晰度太差了，而且声音也不达标，断断续续的。感觉在电脑上安装安卓系统还挺好玩的，要是再安点软件没准能够让它重新焕发生机，一向喜欢这种事的我今天捣鼓了一天，但过程也是异常的艰辛，之前的文件对于现在没用的很多了，都需要删除来给新系统腾空，更别说因为各种广告垃圾软件系统贼卡。\n\n下午，利用U盘刷机，安上了想要的AndroidX86系统，甚至没有按照教程，一通乱点（实际上应该是一开始点错了，然后它没有退出选项。。）。安上了又觉得哪里都看不上眼，输入法没有中文，很多软件好像是因为架构的原因安不上，而且联网还有问题，你必须断网情况下才能过第一次使用的引导程序。另外因为一开始点错了，内存只有可怜的4个G，可用的只有700多M。而且因为是老机子，也是很卡，这接二连三的错误劝退了我，不太想弄了，弄完已经是下午5点了。不过除此之外还把之前老系统刷回了Win7，现在正常使用是一点问题没有的，也挺快的，可以当个巨型U盘来用嘿嘿。\n\n要不是初三因为安装了应用平板被老爸摔了，\n害，现在还能用那个平板呢，\n感觉屏幕比现在用的大多了，而且自定义性也高，应该能做得不错。\n\n一天下来确实是挺累的，看着之前下过的游戏与之前的照片，花了大概是一上午的时间全部“检阅”了一遍吧，挺多的游戏现在仍然还在玩着，不过以前的时候也是挺爱尝试的，电脑里也有其他已经忘记的，回顾一遍也能想起来那时候玩游戏的开心，想起那个时候照片中的自己，是如何一步一步地成长为现在的我的。\n\n反思过后，我可能就是那种丝毫不愿看着事情变得极坏极坏的人，如果一样东西只是因为年岁原因而被抛弃，或者被人们因为其他局限的观点而全盘否定，我会很反对，我想要发现它们中间的其他闪光点，我想让他们重新好起来。\n\n我也是个怀旧的人，之前使用过的很多东西包括APP，我还是不厌其烦地看看他们现在是啥样子了，有的真的是随着时间而变得无人问津，举几个例子吧：小猿搜题、作业帮一课（其实作业帮本身也不太提起了），一起作业，手机乐园（之前可以与酷安以及应用汇抗衡的应用商店），7723游戏盒（这个知道的可能比较少，我从初中开始用，里面有个氛围挺好的资源交流论坛，但是现在已经关闭了，因为严格的审核政策。）不少改变还挺令人唏嘘的，这也是所谓的以史为鉴吧，看前几天发现的雨纸app，有时候还能够挖到宝呢！\n\n所谓的记忆，流光。。\n\n>End...\n","slug":"算法学习：快速幂-以及-这几天搞机心得","published":1,"updated":"2024-01-26T05:15:11.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nyh0020zkue9rz80ezm","content":"<p>随着自己学习的进行，感觉需要尝试的东西越来越多了。<br>比如C++的学习、HTML学习，以及算法与数据结构。<br>感觉又得重新规划一下了，不过我能挺过去的。<br>等到开学我会变得大不一样的。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-快速幂\"><a href=\"#1-快速幂\" class=\"headerlink\" title=\"1.快速幂\"></a>1.快速幂</h2><p>今天尝试写完了乘方的程序，也就是补齐了负数次方的结果，但是还是通不过，因为时间耗费太长，看到leetcode上还有这样的结果：样例全部通过了，但时间耗费太长，所以判未通过。。这与我们的OJ判法还是有点差别的。</p>\n<p>看过题解之后，我又学会了一个之前听过的算法，它叫做快速幂。<br>实际上就是上一次讲的算法，只不过我理解的有偏差，所以在实现上它的次数降落并不与算法中一样，计算起来还是有重复的步数（比如5次方不是偶数了，于是就直接开始按照老方法算了，更别说更大的奇数了）。</p>\n<p>所以下面为快速幂的代码展示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">quickpower</span><span class=\"params\">(<span class=\"type\">double</span> x, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"type\">double</span> result = quickpower(x, n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span> ? result * result : result * result * x; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">compute</span><span class=\"params\">(<span class=\"type\">double</span> x, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> N = n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> N &gt;= <span class=\"number\">0</span> ? quickpower(x, N) : (<span class=\"number\">1.0</span>) / quickpower(x, -N);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有的次数只需要算一遍，<br>而且次数的个数也比之前少了很多。<br>时间复杂度O(logn).</p>\n<h2 id=\"2-AndroidX86-9-0-试用心得\"><a href=\"#2-AndroidX86-9-0-试用心得\" class=\"headerlink\" title=\"2.AndroidX86 9.0 试用心得\"></a>2.AndroidX86 9.0 试用心得</h2><blockquote>\n<p>我还是挺喜欢搞机的，一个平平无奇的机子，<br>一开始研究其中底层的东西一切都变得有趣起来了。</p>\n</blockquote>\n<p>曾经尝试过使用系统进程唤起的方式一个一个打开系统进程，这个过程真的还有不少有趣的东西，我也不知道在找什么，但是就是很能给人新奇与发现的感觉，那时候第一次做也是心怀着上网与安装应用的目的，去找寻系统能不能有办法恢复出厂设置（当时学生平板给安了一个拥有超级用户权限的学习软件控制着的，不准恢复出厂设置），找到了点恢复出厂设置的那个按键，点之后什么都没发生，不过那之后还是很乐于做这件事。</p>\n<p>现在找老机子就是纯属发掘里面的潜能了。<br>我一般就是看美观、干净的程度以及使用的便利程度</p>\n<p>三年级的时候买的？或者更早，那台机子已经在我们家很多年了，这几天看到了<code>AndroidX86</code>，在虚拟机上的清晰度太差了，而且声音也不达标，断断续续的。感觉在电脑上安装安卓系统还挺好玩的，要是再安点软件没准能够让它重新焕发生机，一向喜欢这种事的我今天捣鼓了一天，但过程也是异常的艰辛，之前的文件对于现在没用的很多了，都需要删除来给新系统腾空，更别说因为各种广告垃圾软件系统贼卡。</p>\n<p>下午，利用U盘刷机，安上了想要的AndroidX86系统，甚至没有按照教程，一通乱点（实际上应该是一开始点错了，然后它没有退出选项。。）。安上了又觉得哪里都看不上眼，输入法没有中文，很多软件好像是因为架构的原因安不上，而且联网还有问题，你必须断网情况下才能过第一次使用的引导程序。另外因为一开始点错了，内存只有可怜的4个G，可用的只有700多M。而且因为是老机子，也是很卡，这接二连三的错误劝退了我，不太想弄了，弄完已经是下午5点了。不过除此之外还把之前老系统刷回了Win7，现在正常使用是一点问题没有的，也挺快的，可以当个巨型U盘来用嘿嘿。</p>\n<p>要不是初三因为安装了应用平板被老爸摔了，<br>害，现在还能用那个平板呢，<br>感觉屏幕比现在用的大多了，而且自定义性也高，应该能做得不错。</p>\n<p>一天下来确实是挺累的，看着之前下过的游戏与之前的照片，花了大概是一上午的时间全部“检阅”了一遍吧，挺多的游戏现在仍然还在玩着，不过以前的时候也是挺爱尝试的，电脑里也有其他已经忘记的，回顾一遍也能想起来那时候玩游戏的开心，想起那个时候照片中的自己，是如何一步一步地成长为现在的我的。</p>\n<p>反思过后，我可能就是那种丝毫不愿看着事情变得极坏极坏的人，如果一样东西只是因为年岁原因而被抛弃，或者被人们因为其他局限的观点而全盘否定，我会很反对，我想要发现它们中间的其他闪光点，我想让他们重新好起来。</p>\n<p>我也是个怀旧的人，之前使用过的很多东西包括APP，我还是不厌其烦地看看他们现在是啥样子了，有的真的是随着时间而变得无人问津，举几个例子吧：小猿搜题、作业帮一课（其实作业帮本身也不太提起了），一起作业，手机乐园（之前可以与酷安以及应用汇抗衡的应用商店），7723游戏盒（这个知道的可能比较少，我从初中开始用，里面有个氛围挺好的资源交流论坛，但是现在已经关闭了，因为严格的审核政策。）不少改变还挺令人唏嘘的，这也是所谓的以史为鉴吧，看前几天发现的雨纸app，有时候还能够挖到宝呢！</p>\n<p>所谓的记忆，流光。。</p>\n<blockquote>\n<p>End…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>随着自己学习的进行，感觉需要尝试的东西越来越多了。<br>比如C++的学习、HTML学习，以及算法与数据结构。<br>感觉又得重新规划一下了，不过我能挺过去的。<br>等到开学我会变得大不一样的。</p>","more":"<h2 id=\"1-快速幂\"><a href=\"#1-快速幂\" class=\"headerlink\" title=\"1.快速幂\"></a>1.快速幂</h2><p>今天尝试写完了乘方的程序，也就是补齐了负数次方的结果，但是还是通不过，因为时间耗费太长，看到leetcode上还有这样的结果：样例全部通过了，但时间耗费太长，所以判未通过。。这与我们的OJ判法还是有点差别的。</p>\n<p>看过题解之后，我又学会了一个之前听过的算法，它叫做快速幂。<br>实际上就是上一次讲的算法，只不过我理解的有偏差，所以在实现上它的次数降落并不与算法中一样，计算起来还是有重复的步数（比如5次方不是偶数了，于是就直接开始按照老方法算了，更别说更大的奇数了）。</p>\n<p>所以下面为快速幂的代码展示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">quickpower</span><span class=\"params\">(<span class=\"type\">double</span> x, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"type\">double</span> result = quickpower(x, n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span> ? result * result : result * result * x; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">compute</span><span class=\"params\">(<span class=\"type\">double</span> x, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> N = n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> N &gt;= <span class=\"number\">0</span> ? quickpower(x, N) : (<span class=\"number\">1.0</span>) / quickpower(x, -N);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有的次数只需要算一遍，<br>而且次数的个数也比之前少了很多。<br>时间复杂度O(logn).</p>\n<h2 id=\"2-AndroidX86-9-0-试用心得\"><a href=\"#2-AndroidX86-9-0-试用心得\" class=\"headerlink\" title=\"2.AndroidX86 9.0 试用心得\"></a>2.AndroidX86 9.0 试用心得</h2><blockquote>\n<p>我还是挺喜欢搞机的，一个平平无奇的机子，<br>一开始研究其中底层的东西一切都变得有趣起来了。</p>\n</blockquote>\n<p>曾经尝试过使用系统进程唤起的方式一个一个打开系统进程，这个过程真的还有不少有趣的东西，我也不知道在找什么，但是就是很能给人新奇与发现的感觉，那时候第一次做也是心怀着上网与安装应用的目的，去找寻系统能不能有办法恢复出厂设置（当时学生平板给安了一个拥有超级用户权限的学习软件控制着的，不准恢复出厂设置），找到了点恢复出厂设置的那个按键，点之后什么都没发生，不过那之后还是很乐于做这件事。</p>\n<p>现在找老机子就是纯属发掘里面的潜能了。<br>我一般就是看美观、干净的程度以及使用的便利程度</p>\n<p>三年级的时候买的？或者更早，那台机子已经在我们家很多年了，这几天看到了<code>AndroidX86</code>，在虚拟机上的清晰度太差了，而且声音也不达标，断断续续的。感觉在电脑上安装安卓系统还挺好玩的，要是再安点软件没准能够让它重新焕发生机，一向喜欢这种事的我今天捣鼓了一天，但过程也是异常的艰辛，之前的文件对于现在没用的很多了，都需要删除来给新系统腾空，更别说因为各种广告垃圾软件系统贼卡。</p>\n<p>下午，利用U盘刷机，安上了想要的AndroidX86系统，甚至没有按照教程，一通乱点（实际上应该是一开始点错了，然后它没有退出选项。。）。安上了又觉得哪里都看不上眼，输入法没有中文，很多软件好像是因为架构的原因安不上，而且联网还有问题，你必须断网情况下才能过第一次使用的引导程序。另外因为一开始点错了，内存只有可怜的4个G，可用的只有700多M。而且因为是老机子，也是很卡，这接二连三的错误劝退了我，不太想弄了，弄完已经是下午5点了。不过除此之外还把之前老系统刷回了Win7，现在正常使用是一点问题没有的，也挺快的，可以当个巨型U盘来用嘿嘿。</p>\n<p>要不是初三因为安装了应用平板被老爸摔了，<br>害，现在还能用那个平板呢，<br>感觉屏幕比现在用的大多了，而且自定义性也高，应该能做得不错。</p>\n<p>一天下来确实是挺累的，看着之前下过的游戏与之前的照片，花了大概是一上午的时间全部“检阅”了一遍吧，挺多的游戏现在仍然还在玩着，不过以前的时候也是挺爱尝试的，电脑里也有其他已经忘记的，回顾一遍也能想起来那时候玩游戏的开心，想起那个时候照片中的自己，是如何一步一步地成长为现在的我的。</p>\n<p>反思过后，我可能就是那种丝毫不愿看着事情变得极坏极坏的人，如果一样东西只是因为年岁原因而被抛弃，或者被人们因为其他局限的观点而全盘否定，我会很反对，我想要发现它们中间的其他闪光点，我想让他们重新好起来。</p>\n<p>我也是个怀旧的人，之前使用过的很多东西包括APP，我还是不厌其烦地看看他们现在是啥样子了，有的真的是随着时间而变得无人问津，举几个例子吧：小猿搜题、作业帮一课（其实作业帮本身也不太提起了），一起作业，手机乐园（之前可以与酷安以及应用汇抗衡的应用商店），7723游戏盒（这个知道的可能比较少，我从初中开始用，里面有个氛围挺好的资源交流论坛，但是现在已经关闭了，因为严格的审核政策。）不少改变还挺令人唏嘘的，这也是所谓的以史为鉴吧，看前几天发现的雨纸app，有时候还能够挖到宝呢！</p>\n<p>所谓的记忆，流光。。</p>\n<blockquote>\n<p>End…</p>\n</blockquote>"},{"title":"算法学习：解递归式以及渐进符号","date":"2024-01-20T15:27:36.000Z","_content":"事情变得有趣起来了，今天讲的是关于离散数学的内容，没有涉及纯粹的算法。\n今天的课程内容属实是有点挑战性了，不管是能不能听下去还是理解成本。\n<!--more-->\n今天的生活状态总体来说不太好，听完课就不太知道干啥了，\n尤其是这样不涉及编程，不能支撑做题的，\n课上的内容消化已经耗能较高，我就懒得做更多的探究。\n在家里就容易活在固定模式里。\n出去也找不到玩的，复读的同学好像也还没放假，找其他人有点胆怯，\n总感觉离开家成本太大，在家里还得看妹妹。\n玩游戏吧，开放世界或者沙盒的那种总感觉玩了特容易上瘾，而且后劲很大。\n对于时间还是挺吝啬的，玩不开心，总是活在欲望与爆发希望之中。\n感觉玩个游戏都有些功利化了，要是没有啥固定的结果就是个while(1)循环了一样。\n家里的东西并不一定比那里好吃，特别是姥姥姥爷在家的时候（笑）。\n\n要是想破局的话，学做饭、尽兴做事与玩游戏，并且敢于走出去，\n我不确定自己能不能行动起来，不过写这篇也就是对我的一个提醒了。\n\n今天是彻底地对于之前还挺模糊的**渐进符号**下了精确的数学定义，所以这一篇也要像人家老师说的，纯粹是数学的讨论（但也是思维的挑战）。\n\n昨天见过了几种常用的渐进符号，也就是O, Ω, Θ, 实际上除此之外还有o，ω，分别与对应的大小关系构成“严格关系”（比如O表示小于等于，o表示严格小于）\n\n对于这些符号，现在给出定义\n\n>1.O \n\n我们用f(n) = O(g(n))形式来使用这个符号，\n它的意义是，存在适当的c与n0，\n使得对于所有的n >= n0, 满足0 <= f(n) <= c(g(n))\n\n这里的O(g(n))符号表示的并不是另一个函数，而是一个集合，\n所以这里的等于号就相当于一个属于符号∈\n这里就如同一个原函数与原函数集的关系。\n\n在昨天学习中已经接触到了这些符号都是有渐进的观点的，\n也就是省去低阶项与系数，所以除去对于f(n)非负的假设\n右边部分表示的是f(n) <= c(g(n)).\n也即O表示小于等于的一个集合，这个小于等于包含很多含义。\n有参数，阶次更低等等。\n\n在表达式中，它可以与函数一起使用（如O(g(n)）\n被用来替代一个抽象函数\n如f(n) = n^3 + O(n ^ 2) 这个表达式表达一个“小于等于n^2的函数h(n)”\n满足上面的函数关系。\n\n那么已经有了上文的O的例子，其他符号理解起来也就简单一些了。\n\n**Ω**相当于**渐进上**的”**大于等于**“，\n**o**相当于**渐进上**的“**小于**”，ω相当于**渐进上**的“**大于**”。\n**Θ**只有大写，之前写错了，相当于O与Ω的交集，\n可以理解成**渐进上**的”**相等**“。\n相当于给最高项加上系数或者加一个至几个低阶项。\n\n前提是对于足够大的n，\n因为当n为一个常数的时候，这些符号的n都是Θ(1)。\n而f(n)需要大于等于0，后面如果有低阶项的话需要保证n足够大\n（这里的大也不一定是更大，我想是大小的意思，需要一个合适的大小）.\n\n接着就是严格的部分了。\n**解递归式**\n\n就和定积分一样，它没有固定的方法，\n我们需要学习很多的方法，然后看看哪一种更适合\n\n>方法有三种\n\t1.代换法\n\t2.递归树法\n\t3.主方法\n\n主方法并不是主要的方法，只是用它是更为方便与固定的一条路。\n\n## 一. 代换法\n\n先听一下它的要求哈：\n>第一步，猜答案，而且必须猜对它，\n（但是你可以不知道常数系数，但是它的形式必须对）\n\n还是有点离谱哈，但是其实还行，给个例子就知道了。\n实际上是根据自变量与函数值关系的变化来推，而且不需要管低阶项，\n\n>T(n) = 4 * T(n/2) + n\n>（先看看，过会再和你说是如何猜的）\n\n我们一般是求上界，下界有时也会求。\n\n假设我们猜想它是一个O(n^3)\n那么自然T(k) <= k ^ 3 而且k < n\n\n展开原式然后小于等于右边式子即可，推出C >= 1时，\nO(n^3)是一个上界\n实际上这里只是一个比较宽的上界，就好像说它是小于n的10次方也可以\n但是不准确。\n\n下面就是猜的方法了，\n\n >可以看出T(n)是T(n/2)的四倍，然后n是n/2的两倍，\n>是不是与n^2类似？\n>所以按照O(n^2)假设，类似做法一直改进假设即可。\n>想看解法，如下\n\n![](/img/Processes.png)\n\n但是这种方法往往太过于理论化（哈），我在面对这些式子的时候常常走神，写到一半就不知道自己的思路去哪里了，相比于第一种方法，第二种方法还是更直观一些。\n\n## 二. 递归树法\n\n所以又是我们昨天见过的，看起来挺复杂，听上去也挺吓人的递归树。\n它有时是不太严谨的，但是它是万能的，\n可以用它来猜正确答案，然后再用第一种方法来做。\n\n>出一个例子：\n>T(n) = T(n/4) + T(n/2) + n^2\n（灵魂画手预警！！）\n\n![](/img/Treeexample.png)\n\n分支总数也就是分到最后Θ(1)的数量。-- \n虽然估测不出来，但是一定小于n\n树高度就是这个递归树总共有几层。 -- log2n\n然后一层一层地找规律并求和。\n>第一层求和为 n^2\n>第二层求和为5/16n ^ 2\n>第三层求和为25/256n ^ 2\n\n这样我们发现这个求和的结果是按照几何级数递减（小数等比）的，\n所以我们就直接等比数列求和，或者也不用求和，\n结果一定是与n^2有关的式子，而且系数一定是大于1小于2的。\n就是O(n ^ 2)(这里有点存疑，我还得问问。)\n\n## 3.主方法\n\n它被称为“主”，是因为\n它只能够被用到特定形式的递归式中 -- 符合T(n) = aT(n/b) + f(n)\n系数需要符合标准 -- a必须>= 1 b>1\n而且还得满足三种情况的其中一种（如下三种）。\n\n对于每一种情况都有一个渐进的定理，\n这些定理都可以使用递归树证明出来。\n\n**定理情况**\n比较f(n) 与 n^logba的相对大小\n+ 当f(n) = O(n^（logba - ε）），对于大于0的ε\n\tT(n) = Θ(n^logba)\n+  2.当f(n) = Θ(n^logba*(log2n)^k) k>=0\n\tT(n) = Θ(n^logba * log2n^(k+1))\n+ 3.当f(n)比n^logba增长的快\n\tf(n) = Ω(n^(logba+ε)) ,对于大于0的ε\n\t而且f(n)要不断变小(af(n/b) <= (1 - ε')f(n) ε' > 0\n\t递归树的下一层要严格小于上一层\n\tT(n) = Θ(f(n))\n\n这就是今天学习的递归树以及渐进符号内容，今天这样说来也收获了不少的东西呢！继续加油。\n\n\n\n\n","source":"_posts/算法学习：解递归式以及渐进符号.md","raw":"---\ntitle: 算法学习：解递归式以及渐进符号\ndate: 2024-01-20 23:27:36\ntags: 算法\n---\n事情变得有趣起来了，今天讲的是关于离散数学的内容，没有涉及纯粹的算法。\n今天的课程内容属实是有点挑战性了，不管是能不能听下去还是理解成本。\n<!--more-->\n今天的生活状态总体来说不太好，听完课就不太知道干啥了，\n尤其是这样不涉及编程，不能支撑做题的，\n课上的内容消化已经耗能较高，我就懒得做更多的探究。\n在家里就容易活在固定模式里。\n出去也找不到玩的，复读的同学好像也还没放假，找其他人有点胆怯，\n总感觉离开家成本太大，在家里还得看妹妹。\n玩游戏吧，开放世界或者沙盒的那种总感觉玩了特容易上瘾，而且后劲很大。\n对于时间还是挺吝啬的，玩不开心，总是活在欲望与爆发希望之中。\n感觉玩个游戏都有些功利化了，要是没有啥固定的结果就是个while(1)循环了一样。\n家里的东西并不一定比那里好吃，特别是姥姥姥爷在家的时候（笑）。\n\n要是想破局的话，学做饭、尽兴做事与玩游戏，并且敢于走出去，\n我不确定自己能不能行动起来，不过写这篇也就是对我的一个提醒了。\n\n今天是彻底地对于之前还挺模糊的**渐进符号**下了精确的数学定义，所以这一篇也要像人家老师说的，纯粹是数学的讨论（但也是思维的挑战）。\n\n昨天见过了几种常用的渐进符号，也就是O, Ω, Θ, 实际上除此之外还有o，ω，分别与对应的大小关系构成“严格关系”（比如O表示小于等于，o表示严格小于）\n\n对于这些符号，现在给出定义\n\n>1.O \n\n我们用f(n) = O(g(n))形式来使用这个符号，\n它的意义是，存在适当的c与n0，\n使得对于所有的n >= n0, 满足0 <= f(n) <= c(g(n))\n\n这里的O(g(n))符号表示的并不是另一个函数，而是一个集合，\n所以这里的等于号就相当于一个属于符号∈\n这里就如同一个原函数与原函数集的关系。\n\n在昨天学习中已经接触到了这些符号都是有渐进的观点的，\n也就是省去低阶项与系数，所以除去对于f(n)非负的假设\n右边部分表示的是f(n) <= c(g(n)).\n也即O表示小于等于的一个集合，这个小于等于包含很多含义。\n有参数，阶次更低等等。\n\n在表达式中，它可以与函数一起使用（如O(g(n)）\n被用来替代一个抽象函数\n如f(n) = n^3 + O(n ^ 2) 这个表达式表达一个“小于等于n^2的函数h(n)”\n满足上面的函数关系。\n\n那么已经有了上文的O的例子，其他符号理解起来也就简单一些了。\n\n**Ω**相当于**渐进上**的”**大于等于**“，\n**o**相当于**渐进上**的“**小于**”，ω相当于**渐进上**的“**大于**”。\n**Θ**只有大写，之前写错了，相当于O与Ω的交集，\n可以理解成**渐进上**的”**相等**“。\n相当于给最高项加上系数或者加一个至几个低阶项。\n\n前提是对于足够大的n，\n因为当n为一个常数的时候，这些符号的n都是Θ(1)。\n而f(n)需要大于等于0，后面如果有低阶项的话需要保证n足够大\n（这里的大也不一定是更大，我想是大小的意思，需要一个合适的大小）.\n\n接着就是严格的部分了。\n**解递归式**\n\n就和定积分一样，它没有固定的方法，\n我们需要学习很多的方法，然后看看哪一种更适合\n\n>方法有三种\n\t1.代换法\n\t2.递归树法\n\t3.主方法\n\n主方法并不是主要的方法，只是用它是更为方便与固定的一条路。\n\n## 一. 代换法\n\n先听一下它的要求哈：\n>第一步，猜答案，而且必须猜对它，\n（但是你可以不知道常数系数，但是它的形式必须对）\n\n还是有点离谱哈，但是其实还行，给个例子就知道了。\n实际上是根据自变量与函数值关系的变化来推，而且不需要管低阶项，\n\n>T(n) = 4 * T(n/2) + n\n>（先看看，过会再和你说是如何猜的）\n\n我们一般是求上界，下界有时也会求。\n\n假设我们猜想它是一个O(n^3)\n那么自然T(k) <= k ^ 3 而且k < n\n\n展开原式然后小于等于右边式子即可，推出C >= 1时，\nO(n^3)是一个上界\n实际上这里只是一个比较宽的上界，就好像说它是小于n的10次方也可以\n但是不准确。\n\n下面就是猜的方法了，\n\n >可以看出T(n)是T(n/2)的四倍，然后n是n/2的两倍，\n>是不是与n^2类似？\n>所以按照O(n^2)假设，类似做法一直改进假设即可。\n>想看解法，如下\n\n![](/img/Processes.png)\n\n但是这种方法往往太过于理论化（哈），我在面对这些式子的时候常常走神，写到一半就不知道自己的思路去哪里了，相比于第一种方法，第二种方法还是更直观一些。\n\n## 二. 递归树法\n\n所以又是我们昨天见过的，看起来挺复杂，听上去也挺吓人的递归树。\n它有时是不太严谨的，但是它是万能的，\n可以用它来猜正确答案，然后再用第一种方法来做。\n\n>出一个例子：\n>T(n) = T(n/4) + T(n/2) + n^2\n（灵魂画手预警！！）\n\n![](/img/Treeexample.png)\n\n分支总数也就是分到最后Θ(1)的数量。-- \n虽然估测不出来，但是一定小于n\n树高度就是这个递归树总共有几层。 -- log2n\n然后一层一层地找规律并求和。\n>第一层求和为 n^2\n>第二层求和为5/16n ^ 2\n>第三层求和为25/256n ^ 2\n\n这样我们发现这个求和的结果是按照几何级数递减（小数等比）的，\n所以我们就直接等比数列求和，或者也不用求和，\n结果一定是与n^2有关的式子，而且系数一定是大于1小于2的。\n就是O(n ^ 2)(这里有点存疑，我还得问问。)\n\n## 3.主方法\n\n它被称为“主”，是因为\n它只能够被用到特定形式的递归式中 -- 符合T(n) = aT(n/b) + f(n)\n系数需要符合标准 -- a必须>= 1 b>1\n而且还得满足三种情况的其中一种（如下三种）。\n\n对于每一种情况都有一个渐进的定理，\n这些定理都可以使用递归树证明出来。\n\n**定理情况**\n比较f(n) 与 n^logba的相对大小\n+ 当f(n) = O(n^（logba - ε）），对于大于0的ε\n\tT(n) = Θ(n^logba)\n+  2.当f(n) = Θ(n^logba*(log2n)^k) k>=0\n\tT(n) = Θ(n^logba * log2n^(k+1))\n+ 3.当f(n)比n^logba增长的快\n\tf(n) = Ω(n^(logba+ε)) ,对于大于0的ε\n\t而且f(n)要不断变小(af(n/b) <= (1 - ε')f(n) ε' > 0\n\t递归树的下一层要严格小于上一层\n\tT(n) = Θ(f(n))\n\n这就是今天学习的递归树以及渐进符号内容，今天这样说来也收获了不少的东西呢！继续加油。\n\n\n\n\n","slug":"算法学习：解递归式以及渐进符号","published":1,"updated":"2024-01-20T15:32:56.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nyi0023zkuef1940roo","content":"<p>事情变得有趣起来了，今天讲的是关于离散数学的内容，没有涉及纯粹的算法。<br>今天的课程内容属实是有点挑战性了，不管是能不能听下去还是理解成本。</p>\n<span id=\"more\"></span>\n<p>今天的生活状态总体来说不太好，听完课就不太知道干啥了，<br>尤其是这样不涉及编程，不能支撑做题的，<br>课上的内容消化已经耗能较高，我就懒得做更多的探究。<br>在家里就容易活在固定模式里。<br>出去也找不到玩的，复读的同学好像也还没放假，找其他人有点胆怯，<br>总感觉离开家成本太大，在家里还得看妹妹。<br>玩游戏吧，开放世界或者沙盒的那种总感觉玩了特容易上瘾，而且后劲很大。<br>对于时间还是挺吝啬的，玩不开心，总是活在欲望与爆发希望之中。<br>感觉玩个游戏都有些功利化了，要是没有啥固定的结果就是个while(1)循环了一样。<br>家里的东西并不一定比那里好吃，特别是姥姥姥爷在家的时候（笑）。</p>\n<p>要是想破局的话，学做饭、尽兴做事与玩游戏，并且敢于走出去，<br>我不确定自己能不能行动起来，不过写这篇也就是对我的一个提醒了。</p>\n<p>今天是彻底地对于之前还挺模糊的<strong>渐进符号</strong>下了精确的数学定义，所以这一篇也要像人家老师说的，纯粹是数学的讨论（但也是思维的挑战）。</p>\n<p>昨天见过了几种常用的渐进符号，也就是O, Ω, Θ, 实际上除此之外还有o，ω，分别与对应的大小关系构成“严格关系”（比如O表示小于等于，o表示严格小于）</p>\n<p>对于这些符号，现在给出定义</p>\n<blockquote>\n<p>1.O </p>\n</blockquote>\n<p>我们用f(n) &#x3D; O(g(n))形式来使用这个符号，<br>它的意义是，存在适当的c与n0，<br>使得对于所有的n &gt;&#x3D; n0, 满足0 &lt;&#x3D; f(n) &lt;&#x3D; c(g(n))</p>\n<p>这里的O(g(n))符号表示的并不是另一个函数，而是一个集合，<br>所以这里的等于号就相当于一个属于符号∈<br>这里就如同一个原函数与原函数集的关系。</p>\n<p>在昨天学习中已经接触到了这些符号都是有渐进的观点的，<br>也就是省去低阶项与系数，所以除去对于f(n)非负的假设<br>右边部分表示的是f(n) &lt;&#x3D; c(g(n)).<br>也即O表示小于等于的一个集合，这个小于等于包含很多含义。<br>有参数，阶次更低等等。</p>\n<p>在表达式中，它可以与函数一起使用（如O(g(n)）<br>被用来替代一个抽象函数<br>如f(n) &#x3D; n^3 + O(n ^ 2) 这个表达式表达一个“小于等于n^2的函数h(n)”<br>满足上面的函数关系。</p>\n<p>那么已经有了上文的O的例子，其他符号理解起来也就简单一些了。</p>\n<p><strong>Ω</strong>相当于<strong>渐进上</strong>的”<strong>大于等于</strong>“，<br><strong>o</strong>相当于<strong>渐进上</strong>的“<strong>小于</strong>”，ω相当于<strong>渐进上</strong>的“<strong>大于</strong>”。<br><strong>Θ</strong>只有大写，之前写错了，相当于O与Ω的交集，<br>可以理解成<strong>渐进上</strong>的”<strong>相等</strong>“。<br>相当于给最高项加上系数或者加一个至几个低阶项。</p>\n<p>前提是对于足够大的n，<br>因为当n为一个常数的时候，这些符号的n都是Θ(1)。<br>而f(n)需要大于等于0，后面如果有低阶项的话需要保证n足够大<br>（这里的大也不一定是更大，我想是大小的意思，需要一个合适的大小）.</p>\n<p>接着就是严格的部分了。<br><strong>解递归式</strong></p>\n<p>就和定积分一样，它没有固定的方法，<br>我们需要学习很多的方法，然后看看哪一种更适合</p>\n<blockquote>\n<p>方法有三种<br>    1.代换法<br>    2.递归树法<br>    3.主方法</p>\n</blockquote>\n<p>主方法并不是主要的方法，只是用它是更为方便与固定的一条路。</p>\n<h2 id=\"一-代换法\"><a href=\"#一-代换法\" class=\"headerlink\" title=\"一. 代换法\"></a>一. 代换法</h2><p>先听一下它的要求哈：</p>\n<blockquote>\n<p>第一步，猜答案，而且必须猜对它，<br>（但是你可以不知道常数系数，但是它的形式必须对）</p>\n</blockquote>\n<p>还是有点离谱哈，但是其实还行，给个例子就知道了。<br>实际上是根据自变量与函数值关系的变化来推，而且不需要管低阶项，</p>\n<blockquote>\n<p>T(n) &#x3D; 4 * T(n&#x2F;2) + n<br>（先看看，过会再和你说是如何猜的）</p>\n</blockquote>\n<p>我们一般是求上界，下界有时也会求。</p>\n<p>假设我们猜想它是一个O(n^3)<br>那么自然T(k) &lt;&#x3D; k ^ 3 而且k &lt; n</p>\n<p>展开原式然后小于等于右边式子即可，推出C &gt;&#x3D; 1时，<br>O(n^3)是一个上界<br>实际上这里只是一个比较宽的上界，就好像说它是小于n的10次方也可以<br>但是不准确。</p>\n<p>下面就是猜的方法了，</p>\n<blockquote>\n<p>可以看出T(n)是T(n&#x2F;2)的四倍，然后n是n&#x2F;2的两倍，<br>是不是与n^2类似？<br>所以按照O(n^2)假设，类似做法一直改进假设即可。<br>想看解法，如下</p>\n</blockquote>\n<p><img src=\"/img/Processes.png\"></p>\n<p>但是这种方法往往太过于理论化（哈），我在面对这些式子的时候常常走神，写到一半就不知道自己的思路去哪里了，相比于第一种方法，第二种方法还是更直观一些。</p>\n<h2 id=\"二-递归树法\"><a href=\"#二-递归树法\" class=\"headerlink\" title=\"二. 递归树法\"></a>二. 递归树法</h2><p>所以又是我们昨天见过的，看起来挺复杂，听上去也挺吓人的递归树。<br>它有时是不太严谨的，但是它是万能的，<br>可以用它来猜正确答案，然后再用第一种方法来做。</p>\n<blockquote>\n<p>出一个例子：<br>T(n) &#x3D; T(n&#x2F;4) + T(n&#x2F;2) + n^2<br>（灵魂画手预警！！）</p>\n</blockquote>\n<p><img src=\"/img/Treeexample.png\"></p>\n<p>分支总数也就是分到最后Θ(1)的数量。–<br>虽然估测不出来，但是一定小于n<br>树高度就是这个递归树总共有几层。 – log2n<br>然后一层一层地找规律并求和。</p>\n<blockquote>\n<p>第一层求和为 n^2<br>第二层求和为5&#x2F;16n ^ 2<br>第三层求和为25&#x2F;256n ^ 2</p>\n</blockquote>\n<p>这样我们发现这个求和的结果是按照几何级数递减（小数等比）的，<br>所以我们就直接等比数列求和，或者也不用求和，<br>结果一定是与n^2有关的式子，而且系数一定是大于1小于2的。<br>就是O(n ^ 2)(这里有点存疑，我还得问问。)</p>\n<h2 id=\"3-主方法\"><a href=\"#3-主方法\" class=\"headerlink\" title=\"3.主方法\"></a>3.主方法</h2><p>它被称为“主”，是因为<br>它只能够被用到特定形式的递归式中 – 符合T(n) &#x3D; aT(n&#x2F;b) + f(n)<br>系数需要符合标准 – a必须&gt;&#x3D; 1 b&gt;1<br>而且还得满足三种情况的其中一种（如下三种）。</p>\n<p>对于每一种情况都有一个渐进的定理，<br>这些定理都可以使用递归树证明出来。</p>\n<p><strong>定理情况</strong><br>比较f(n) 与 n^logba的相对大小</p>\n<ul>\n<li>当f(n) &#x3D; O(n^（logba - ε）），对于大于0的ε<br>  T(n) &#x3D; Θ(n^logba)</li>\n<li>2.当f(n) &#x3D; Θ(n^logba*(log2n)^k) k&gt;&#x3D;0<br> T(n) &#x3D; Θ(n^logba * log2n^(k+1))</li>\n<li>3.当f(n)比n^logba增长的快<br>  f(n) &#x3D; Ω(n^(logba+ε)) ,对于大于0的ε<br>  而且f(n)要不断变小(af(n&#x2F;b) &lt;&#x3D; (1 - ε’)f(n) ε’ &gt; 0<br>  递归树的下一层要严格小于上一层<br>  T(n) &#x3D; Θ(f(n))</li>\n</ul>\n<p>这就是今天学习的递归树以及渐进符号内容，今天这样说来也收获了不少的东西呢！继续加油。</p>\n","site":{"data":{}},"excerpt":"<p>事情变得有趣起来了，今天讲的是关于离散数学的内容，没有涉及纯粹的算法。<br>今天的课程内容属实是有点挑战性了，不管是能不能听下去还是理解成本。</p>","more":"<p>今天的生活状态总体来说不太好，听完课就不太知道干啥了，<br>尤其是这样不涉及编程，不能支撑做题的，<br>课上的内容消化已经耗能较高，我就懒得做更多的探究。<br>在家里就容易活在固定模式里。<br>出去也找不到玩的，复读的同学好像也还没放假，找其他人有点胆怯，<br>总感觉离开家成本太大，在家里还得看妹妹。<br>玩游戏吧，开放世界或者沙盒的那种总感觉玩了特容易上瘾，而且后劲很大。<br>对于时间还是挺吝啬的，玩不开心，总是活在欲望与爆发希望之中。<br>感觉玩个游戏都有些功利化了，要是没有啥固定的结果就是个while(1)循环了一样。<br>家里的东西并不一定比那里好吃，特别是姥姥姥爷在家的时候（笑）。</p>\n<p>要是想破局的话，学做饭、尽兴做事与玩游戏，并且敢于走出去，<br>我不确定自己能不能行动起来，不过写这篇也就是对我的一个提醒了。</p>\n<p>今天是彻底地对于之前还挺模糊的<strong>渐进符号</strong>下了精确的数学定义，所以这一篇也要像人家老师说的，纯粹是数学的讨论（但也是思维的挑战）。</p>\n<p>昨天见过了几种常用的渐进符号，也就是O, Ω, Θ, 实际上除此之外还有o，ω，分别与对应的大小关系构成“严格关系”（比如O表示小于等于，o表示严格小于）</p>\n<p>对于这些符号，现在给出定义</p>\n<blockquote>\n<p>1.O </p>\n</blockquote>\n<p>我们用f(n) &#x3D; O(g(n))形式来使用这个符号，<br>它的意义是，存在适当的c与n0，<br>使得对于所有的n &gt;&#x3D; n0, 满足0 &lt;&#x3D; f(n) &lt;&#x3D; c(g(n))</p>\n<p>这里的O(g(n))符号表示的并不是另一个函数，而是一个集合，<br>所以这里的等于号就相当于一个属于符号∈<br>这里就如同一个原函数与原函数集的关系。</p>\n<p>在昨天学习中已经接触到了这些符号都是有渐进的观点的，<br>也就是省去低阶项与系数，所以除去对于f(n)非负的假设<br>右边部分表示的是f(n) &lt;&#x3D; c(g(n)).<br>也即O表示小于等于的一个集合，这个小于等于包含很多含义。<br>有参数，阶次更低等等。</p>\n<p>在表达式中，它可以与函数一起使用（如O(g(n)）<br>被用来替代一个抽象函数<br>如f(n) &#x3D; n^3 + O(n ^ 2) 这个表达式表达一个“小于等于n^2的函数h(n)”<br>满足上面的函数关系。</p>\n<p>那么已经有了上文的O的例子，其他符号理解起来也就简单一些了。</p>\n<p><strong>Ω</strong>相当于<strong>渐进上</strong>的”<strong>大于等于</strong>“，<br><strong>o</strong>相当于<strong>渐进上</strong>的“<strong>小于</strong>”，ω相当于<strong>渐进上</strong>的“<strong>大于</strong>”。<br><strong>Θ</strong>只有大写，之前写错了，相当于O与Ω的交集，<br>可以理解成<strong>渐进上</strong>的”<strong>相等</strong>“。<br>相当于给最高项加上系数或者加一个至几个低阶项。</p>\n<p>前提是对于足够大的n，<br>因为当n为一个常数的时候，这些符号的n都是Θ(1)。<br>而f(n)需要大于等于0，后面如果有低阶项的话需要保证n足够大<br>（这里的大也不一定是更大，我想是大小的意思，需要一个合适的大小）.</p>\n<p>接着就是严格的部分了。<br><strong>解递归式</strong></p>\n<p>就和定积分一样，它没有固定的方法，<br>我们需要学习很多的方法，然后看看哪一种更适合</p>\n<blockquote>\n<p>方法有三种<br>    1.代换法<br>    2.递归树法<br>    3.主方法</p>\n</blockquote>\n<p>主方法并不是主要的方法，只是用它是更为方便与固定的一条路。</p>\n<h2 id=\"一-代换法\"><a href=\"#一-代换法\" class=\"headerlink\" title=\"一. 代换法\"></a>一. 代换法</h2><p>先听一下它的要求哈：</p>\n<blockquote>\n<p>第一步，猜答案，而且必须猜对它，<br>（但是你可以不知道常数系数，但是它的形式必须对）</p>\n</blockquote>\n<p>还是有点离谱哈，但是其实还行，给个例子就知道了。<br>实际上是根据自变量与函数值关系的变化来推，而且不需要管低阶项，</p>\n<blockquote>\n<p>T(n) &#x3D; 4 * T(n&#x2F;2) + n<br>（先看看，过会再和你说是如何猜的）</p>\n</blockquote>\n<p>我们一般是求上界，下界有时也会求。</p>\n<p>假设我们猜想它是一个O(n^3)<br>那么自然T(k) &lt;&#x3D; k ^ 3 而且k &lt; n</p>\n<p>展开原式然后小于等于右边式子即可，推出C &gt;&#x3D; 1时，<br>O(n^3)是一个上界<br>实际上这里只是一个比较宽的上界，就好像说它是小于n的10次方也可以<br>但是不准确。</p>\n<p>下面就是猜的方法了，</p>\n<blockquote>\n<p>可以看出T(n)是T(n&#x2F;2)的四倍，然后n是n&#x2F;2的两倍，<br>是不是与n^2类似？<br>所以按照O(n^2)假设，类似做法一直改进假设即可。<br>想看解法，如下</p>\n</blockquote>\n<p><img src=\"/img/Processes.png\"></p>\n<p>但是这种方法往往太过于理论化（哈），我在面对这些式子的时候常常走神，写到一半就不知道自己的思路去哪里了，相比于第一种方法，第二种方法还是更直观一些。</p>\n<h2 id=\"二-递归树法\"><a href=\"#二-递归树法\" class=\"headerlink\" title=\"二. 递归树法\"></a>二. 递归树法</h2><p>所以又是我们昨天见过的，看起来挺复杂，听上去也挺吓人的递归树。<br>它有时是不太严谨的，但是它是万能的，<br>可以用它来猜正确答案，然后再用第一种方法来做。</p>\n<blockquote>\n<p>出一个例子：<br>T(n) &#x3D; T(n&#x2F;4) + T(n&#x2F;2) + n^2<br>（灵魂画手预警！！）</p>\n</blockquote>\n<p><img src=\"/img/Treeexample.png\"></p>\n<p>分支总数也就是分到最后Θ(1)的数量。–<br>虽然估测不出来，但是一定小于n<br>树高度就是这个递归树总共有几层。 – log2n<br>然后一层一层地找规律并求和。</p>\n<blockquote>\n<p>第一层求和为 n^2<br>第二层求和为5&#x2F;16n ^ 2<br>第三层求和为25&#x2F;256n ^ 2</p>\n</blockquote>\n<p>这样我们发现这个求和的结果是按照几何级数递减（小数等比）的，<br>所以我们就直接等比数列求和，或者也不用求和，<br>结果一定是与n^2有关的式子，而且系数一定是大于1小于2的。<br>就是O(n ^ 2)(这里有点存疑，我还得问问。)</p>\n<h2 id=\"3-主方法\"><a href=\"#3-主方法\" class=\"headerlink\" title=\"3.主方法\"></a>3.主方法</h2><p>它被称为“主”，是因为<br>它只能够被用到特定形式的递归式中 – 符合T(n) &#x3D; aT(n&#x2F;b) + f(n)<br>系数需要符合标准 – a必须&gt;&#x3D; 1 b&gt;1<br>而且还得满足三种情况的其中一种（如下三种）。</p>\n<p>对于每一种情况都有一个渐进的定理，<br>这些定理都可以使用递归树证明出来。</p>\n<p><strong>定理情况</strong><br>比较f(n) 与 n^logba的相对大小</p>\n<ul>\n<li>当f(n) &#x3D; O(n^（logba - ε）），对于大于0的ε<br>  T(n) &#x3D; Θ(n^logba)</li>\n<li>2.当f(n) &#x3D; Θ(n^logba*(log2n)^k) k&gt;&#x3D;0<br> T(n) &#x3D; Θ(n^logba * log2n^(k+1))</li>\n<li>3.当f(n)比n^logba增长的快<br>  f(n) &#x3D; Ω(n^(logba+ε)) ,对于大于0的ε<br>  而且f(n)要不断变小(af(n&#x2F;b) &lt;&#x3D; (1 - ε’)f(n) ε’ &gt; 0<br>  递归树的下一层要严格小于上一层<br>  T(n) &#x3D; Θ(f(n))</li>\n</ul>\n<p>这就是今天学习的递归树以及渐进符号内容，今天这样说来也收获了不少的东西呢！继续加油。</p>"},{"title":"高等数学小整理","date":"2023-11-27T13:07:09.000Z","_content":"\n![第一页](/img/page1.png)\n![第二页](/img/page2.png)\n![第三页](/img/page3.png)\n","source":"_posts/高等数学小整理.md","raw":"---\ntitle: 高等数学小整理\ndate: 2023-11-27 21:07:09\ntags: 大学学习\n---\n\n![第一页](/img/page1.png)\n![第二页](/img/page2.png)\n![第三页](/img/page3.png)\n","slug":"高等数学小整理","published":1,"updated":"2023-11-27T13:16:00.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clx775nyi0025zkue3fkpgxvl","content":"<p><img src=\"/img/page1.png\" alt=\"第一页\"><br><img src=\"/img/page2.png\" alt=\"第二页\"><br><img src=\"/img/page3.png\" alt=\"第三页\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/img/page1.png\" alt=\"第一页\"><br><img src=\"/img/page2.png\" alt=\"第二页\"><br><img src=\"/img/page3.png\" alt=\"第三页\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/OJ中的那些小丑行为/OJclown.png","slug":"OJclown.png","post":"clx775nxq0008zkue9fxr8c8h","modified":0,"renderable":0},{"_id":"source/_posts/千奇百怪的字符串处理函数/1.png","slug":"1.png","post":"clx775nxy000mzkue9dzzhlpf","modified":0,"renderable":0},{"_id":"source/_posts/千奇百怪的字符串处理函数/2.png","slug":"2.png","post":"clx775nxy000mzkue9dzzhlpf","modified":0,"renderable":0},{"_id":"source/_posts/千奇百怪的字符串处理函数/3.png","slug":"3.png","post":"clx775nxy000mzkue9dzzhlpf","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clx775ny7001dzkue7yvk36yp","category_id":"clx775ny8001jzkuefe4j64k5","_id":"clx775nyb001szkuefhg28pcz"}],"PostTag":[{"post_id":"clx775nxi0001zkuebhvlbq9l","tag_id":"clx775nxn0004zkue2vbo6knp","_id":"clx775nxs000czkue0w0x8d0j"},{"post_id":"clx775nxm0003zkue9ee39agy","tag_id":"clx775nxn0004zkue2vbo6knp","_id":"clx775nxw000izkue0q6z0xwu"},{"post_id":"clx775nxp0006zkueanm1h0j9","tag_id":"clx775nxw000hzkue0whgh34b","_id":"clx775ny0000qzkuecxju0ws4"},{"post_id":"clx775nxy000mzkue9dzzhlpf","tag_id":"clx775nxw000hzkue0whgh34b","_id":"clx775ny1000tzkue796ravtr"},{"post_id":"clx775nxz000pzkue9mnw3xeo","tag_id":"clx775nxn0004zkue2vbo6knp","_id":"clx775ny2000xzkue05df7ajp"},{"post_id":"clx775nxq0008zkue9fxr8c8h","tag_id":"clx775nxw000hzkue0whgh34b","_id":"clx775ny30010zkue79j819r8"},{"post_id":"clx775ny0000szkue5nuv4vni","tag_id":"clx775nxw000hzkue0whgh34b","_id":"clx775ny50014zkued6l20oyi"},{"post_id":"clx775ny2000wzkuedi4325ty","tag_id":"clx775nxw000hzkue0whgh34b","_id":"clx775ny50017zkueeaz1e7x4"},{"post_id":"clx775nxr000azkue8rqk2tt6","tag_id":"clx775ny1000uzkuedglxhb7i","_id":"clx775ny6001bzkueelfjc9b9"},{"post_id":"clx775nxv000gzkue10xe5546","tag_id":"clx775ny40011zkuehwsp288f","_id":"clx775ny7001ezkuea7tebedw"},{"post_id":"clx775ny6001azkuecjno3jm0","tag_id":"clx775nxw000hzkue0whgh34b","_id":"clx775ny8001izkuees5b08va"},{"post_id":"clx775nxx000kzkuehiexfpso","tag_id":"clx775ny60018zkuedlnh4jxo","_id":"clx775ny8001lzkuegu5a9pde"},{"post_id":"clx775ny7001gzkue0k927u22","tag_id":"clx775nxw000hzkue0whgh34b","_id":"clx775ny9001nzkue29vm895n"},{"post_id":"clx775ny3000zzkue5a4zf0pv","tag_id":"clx775ny7001hzkue0zvj5i3y","_id":"clx775nya001qzkue333ybyf6"},{"post_id":"clx775ny40013zkueh97le4by","tag_id":"clx775ny7001hzkue0zvj5i3y","_id":"clx775nyb001tzkuegr0f6f4o"},{"post_id":"clx775ny50016zkuecc1jet1b","tag_id":"clx775nya001rzkuedm4j656e","_id":"clx775nyb001uzkuegy50clqx"},{"post_id":"clx775nyh001zzkue0q0of7fr","tag_id":"clx775nxw000hzkue0whgh34b","_id":"clx775nyi0022zkueeendeahc"},{"post_id":"clx775nye001vzkueb1s9fqwj","tag_id":"clx775nyg001xzkue6jfa6u6u","_id":"clx775nyi0024zkue1x7n81lj"},{"post_id":"clx775nyi0023zkuef1940roo","tag_id":"clx775nyg001xzkue6jfa6u6u","_id":"clx775nyj0027zkueazwpdsy2"},{"post_id":"clx775nyf001wzkuebaou5v27","tag_id":"clx775nyg001xzkue6jfa6u6u","_id":"clx775nyj0028zkue6f0z6oh0"},{"post_id":"clx775nyg001yzkue2uzcfj9s","tag_id":"clx775nyg001xzkue6jfa6u6u","_id":"clx775nyj002azkueb6q72exf"},{"post_id":"clx775nyh0020zkue9rz80ezm","tag_id":"clx775nyg001xzkue6jfa6u6u","_id":"clx775nyj002czkueajbocsex"},{"post_id":"clx775nyh0020zkue9rz80ezm","tag_id":"clx775nyj0029zkuehg695sal","_id":"clx775nyj002dzkue851zhzd7"},{"post_id":"clx775nyi0025zkue3fkpgxvl","tag_id":"clx775nyj002bzkueajqe5lcg","_id":"clx775nyj002ezkuehmnufiow"}],"Tag":[{"name":"C_premier_plus","_id":"clx775nxn0004zkue2vbo6knp"},{"name":"C语言学习","_id":"clx775nxw000hzkue0whgh34b"},{"name":"JS学习","_id":"clx775ny1000uzkuedglxhb7i"},{"name":"学习资源","_id":"clx775ny40011zkuehwsp288f"},{"name":"C++学习","_id":"clx775ny60018zkuedlnh4jxo"},{"name":"心态调整","_id":"clx775ny7001hzkue0zvj5i3y"},{"name":"HTML学习","_id":"clx775nya001rzkuedm4j656e"},{"name":"算法","_id":"clx775nyg001xzkue6jfa6u6u"},{"name":"搞机心得","_id":"clx775nyj0029zkuehg695sal"},{"name":"大学学习","_id":"clx775nyj002bzkueajqe5lcg"}]}}