{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/Annie/source/css/Annie.styl","path":"css/Annie.styl","modified":1,"renderable":1},{"_id":"themes/Annie/source/css/comment.styl","path":"css/comment.styl","modified":1,"renderable":1},{"_id":"themes/Annie/source/js/leancloud-count.js","path":"js/leancloud-count.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/Annie_qq_qrcode.jpg","path":"img/Annie_qq_qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/lazy.gif","path":"img/lazy.gif","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/cart_cover.jpg","path":"img/cart_cover.jpg","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/header-bg.jpg","path":"img/header-bg.jpg","modified":1,"renderable":1},{"_id":"themes/Annie/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/Annie/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/Annie/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/chinese/chinese.js","path":"plugin/chinese/chinese.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/clipboard/clipboard.js","path":"plugin/clipboard/clipboard.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/comment/valine.min.js","path":"plugin/comment/valine.min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/fancybox/jquery.fancybox.css","path":"plugin/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/fancybox/jquery.fancybox.js","path":"plugin/fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/data.json","path":"plugin/gallerypage/data.json","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/imagelazyloader/yall.min.js","path":"plugin/imagelazyloader/yall.min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/imageloaded/imagesloaded.pkgd.min.js","path":"plugin/imageloaded/imagesloaded.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/jquery/jquery.min.js","path":"plugin/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/leancloud/av-min.js","path":"plugin/leancloud/av-min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/natural-gallery.full.css","path":"plugin/gallerypage/natural-gallery.full.css","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/love/love.js","path":"plugin/love/love.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/motto/motto.js","path":"plugin/motto/motto.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/nicescroll/jquery.nicescroll.js","path":"plugin/nicescroll/jquery.nicescroll.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/natural-gallery.full.js","path":"plugin/gallerypage/natural-gallery.full.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/resizediv/resizediv.js","path":"plugin/resizediv/resizediv.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/search/ziploader.js","path":"plugin/search/ziploader.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/toc/katelog.min.js","path":"plugin/toc/katelog.min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/quote/danger.svg","path":"img/quote/danger.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/natural.css","path":"plugin/gallerypage/natural.css","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/quote/warning.svg","path":"img/quote/warning.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/quote/info.svg","path":"img/quote/info.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/quote/quote-left.svg","path":"img/quote/quote-left.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/quote/success.svg","path":"img/quote/success.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/images/default-skin.svg","path":"plugin/gallerypage/images/default-skin.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/images/default-skin.png","path":"plugin/gallerypage/images/default-skin.png","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/images/preloader.gif","path":"plugin/gallerypage/images/preloader.gif","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/OJ中的那些小丑行为.md","hash":"d1524c1a802817b92b5c08e77ac04756b9b07342","modified":1700444716067},{"_id":"source/_posts/千奇百怪的字符串处理函数.md","hash":"b1c1f7c517ad6c913b33fee466e6f3c2bd73abaa","modified":1700444905648},{"_id":"source/_posts/网站集合.md","hash":"df2cee86b342076fc793e3f9af8dea29e66d1afe","modified":1700445101025},{"_id":"source/_posts/直播内容复盘-排序与交换.md","hash":"1cc8c95f1451fa289c06d2ad6bb6049a63e6a2b3","modified":1700444978298},{"_id":"source/_posts/输入与输出.md","hash":"b93971f440747e86a63008373d89267758f9a8d2","modified":1700445017327},{"_id":"source/categories/index.md","hash":"31b6b3309749cce76d76f2ebfd7976ceb971b7f4","modified":1693392684244},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1693381266846},{"_id":"source/_posts/数组-1.md","hash":"92ce81a3dbbcf7757cab6d102054cbbdc1a23b57","modified":1699291966748},{"_id":"source/tags/index.md","hash":"afe86559422bf7dac8be75e8c5f598d7aae3d0cb","modified":1693392001779},{"_id":"source/_posts/流程控制方法.md","hash":"212804e73047b87e8ab17ab54af0cc94d1a224bb","modified":1693393155756},{"_id":"source/新建文件夹/OJ中的“小丑”行为.md","hash":"78217aafef8aefae06af5a2433528f8c1d180395","modified":1700444920197},{"_id":"source/新建文件夹/关于更多的Printf与scanf知识.md","hash":"e6db49e975a523d709992ed31092e4595271e795","modified":1700368133380},{"_id":"source/新建文件夹/对于昨天晚上学长讲的内容的复盘.md","hash":"88fc9e2d4cdd111606b563ba2a8450a10290b72e","modified":1700370523887},{"_id":"source/新建文件夹/基于最近两次直播的知识调研.md","hash":"96c81d298797dd3068ffaedbeb616daa5ae057a9","modified":1700365889134},{"_id":"themes/Annie/README.md","hash":"c430fe9268af1a217e5bfa9ad9136b217f362a73","modified":1693383858974},{"_id":"themes/Annie/languages/en.yml","hash":"7ff2a2d785228af120243793613cca4b6c03f1ee","modified":1693383858974},{"_id":"themes/Annie/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1693383859021},{"_id":"themes/Annie/languages/default.yml","hash":"04ee332aff1a4f7030768ab74c74007072e0cd49","modified":1693383858974},{"_id":"themes/Annie/languages/zh-TW.yml","hash":"d2be42743997e6999e5367fe133b884a0c06b9d0","modified":1693383858974},{"_id":"themes/Annie/_config.yml","hash":"4af0c07c167cc3cdcea11074196b8cb0353305a3","modified":1693383858974},{"_id":"themes/Annie/.project","hash":"02413f0cc96f269b21a49578e457500415b9c416","modified":1693383858974},{"_id":"themes/Annie/layout/about.ejs","hash":"5ee10ee04545aa22978e8eef1770234d8d663270","modified":1693383859021},{"_id":"themes/Annie/languages/zh-CN.yml","hash":"00221343dc07cd2d6e256aedb15794306144ad5c","modified":1693383858974},{"_id":"themes/Annie/layout/layout.ejs","hash":"8fb02ce4f5659ce4809e4d0770f311fb574f37a4","modified":1693383859021},{"_id":"themes/Annie/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1693383859021},{"_id":"themes/Annie/layout/index.ejs","hash":"dd37aa16577cbd2b1b3a75e0a924c5d2f078e326","modified":1693383859021},{"_id":"themes/Annie/scripts/colorquote.js","hash":"f537bf038dd3be728ebce2e937dd50862bc36d9b","modified":1693383859021},{"_id":"themes/Annie/layout/page.ejs","hash":"7ea1bad6d26c79b7baccbf452ca8a52113be2716","modified":1693383859021},{"_id":"themes/Annie/scripts/first-letter-sink.js","hash":"15f0937f5e6b64fe94877f09d95d605491d8824a","modified":1693383859021},{"_id":"themes/Annie/LICENSE","hash":"f29e45d4c4a9b68c9d1344f7ba8744e3f179216f","modified":1693383858974},{"_id":"themes/Annie/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1693383859021},{"_id":"themes/Annie/layout/gallery.ejs","hash":"d8f70a8a47d5f93c172fac95e0b46d70830622b4","modified":1693383859021},{"_id":"themes/Annie/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f7fc277213466be52fbd016749f5311c1052247a","modified":1693383858974},{"_id":"themes/Annie/.github/ISSUE_TEMPLATE/general-issue.md","hash":"65bceba2410aee9466c2677c2600deca328a885c","modified":1693383858974},{"_id":"themes/Annie/layout/post.ejs","hash":"c1fe38aba639c318ba79eecab914c18c8272c818","modified":1693383859021},{"_id":"themes/Annie/.github/ISSUE_TEMPLATE/bug_report.md","hash":"e161744bf2909c9a1aaf7758c07777e78cb2b9ea","modified":1693383858974},{"_id":"themes/Annie/layout/_partial/footer-after.ejs","hash":"0aad5b01f9ae83ecb0d68aba61b6c8e5b8a01338","modified":1693383858989},{"_id":"themes/Annie/.github/ISSUE_TEMPLATE/pull-request.md","hash":"cb590aff7033c8ee26287df26761c54b87134f9a","modified":1693383858974},{"_id":"themes/Annie/layout/_partial/footer-social.ejs","hash":"4279da8689ab24f576e420b1435db2e2f2185ca8","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/footer.ejs","hash":"c7c1cb345a64cff3850f57b66a17ed70138b6946","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/archive.ejs","hash":"c9c52a882fa8d953b31ecfbab87d094b8fa5b845","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/head.ejs","hash":"b69923b279c0d9d4afb297e1887407e59ed0106e","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/header.ejs","hash":"47eb73557b1ecb2443fdbff62756ca00f62ede8f","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/index-pure.ejs","hash":"7e1881f375f2a24b2a64f5863887ad4b895ae22a","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/nav.ejs","hash":"7d734d1a5f2d213c4ff466ee2384bab7a12a53ef","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/paginator.ejs","hash":"99ee617ea741cf2dfca9a809c67e565fc789f31e","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/index-cart.ejs","hash":"add55cfab29defad0febbc949b01121aa06cc60c","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/page-header.ejs","hash":"074624a89e21e6cf6814ce9fd6e8e368b616766b","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/post-number.ejs","hash":"04ba92aec82cffc65ddf7e54daf6014e6c5ef49c","modified":1693383859005},{"_id":"themes/Annie/source/css/Annie.styl","hash":"c254b5fbfb982ddfdf1bc68be5071d52d9fb59eb","modified":1693383859021},{"_id":"themes/Annie/layout/_partial/post-like.ejs","hash":"8462c9ead4620e8d69cf789230e4b941d496d0a5","modified":1693383859005},{"_id":"themes/Annie/source/css/comment.styl","hash":"e38672bfa1bc3fcc54829c48c0d4d49df42200d0","modified":1693383859053},{"_id":"themes/Annie/layout/_partial/post.ejs","hash":"36d0404de79239c5994ed302e3baa5f5e6acee49","modified":1693383859005},{"_id":"themes/Annie/source/img/Annie_qq_qrcode.jpg","hash":"571f514f6ef9b4e085bb9c74523eade02a84e8ea","modified":1693383859067},{"_id":"themes/Annie/layout/_partial/page.ejs","hash":"79818e81b34d1b8facdd9f08d2f048a59a93c911","modified":1693383858989},{"_id":"themes/Annie/source/img/logo.png","hash":"6753531813b7157625c4eca2531d08edc65f846b","modified":1693383859083},{"_id":"themes/Annie/layout/_partial/post-relate.ejs","hash":"035200aeaf2094cfc62ea0ce1cea03d3f4e2de23","modified":1693383859005},{"_id":"themes/Annie/source/js/leancloud-count.js","hash":"633ebe1caf6432eaed708568665aae764c35b5d8","modified":1693383859083},{"_id":"themes/Annie/layout/_partial/custom/XXX.ejs","hash":"da87df37f41e32bc63f75f7dc3a5d1de70123c2e","modified":1693383858989},{"_id":"themes/Annie/source/js/main.js","hash":"aca5bb7822dc1e80616e34be2e32411989b6139c","modified":1693383859083},{"_id":"themes/Annie/source/img/lazy.gif","hash":"0bbc5084e6aaa8d6260645c49abc45659553f464","modified":1693383859083},{"_id":"themes/Annie/source/js/search.js","hash":"7deb23070a46517cf35b42b5da7a9d2e6860d31c","modified":1693383859083},{"_id":"themes/Annie/layout/_partial/plugin/clipboard.ejs","hash":"4daa2f62fa4d845fe01586f51a42f84ae116cb0a","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/plugin/mathjax.ejs","hash":"5360830f3ef51394db8999fa99c19649916f0569","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/toc.ejs","hash":"7fb458a5262a4179e4374031e68348ff0082bc54","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/comment.ejs","hash":"0875935243a303da4b2bb5461a42fcee939d0793","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/plugin/search.ejs","hash":"05dcc0ece738f0728fecd308fda38cff0bdfee01","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics.ejs","hash":"3634879d692e117352dd0cf6f7cf6d2687fc03f0","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/post/category.ejs","hash":"e77636e2e27059b2405861a927387ccb4737683a","modified":1693383859020},{"_id":"themes/Annie/layout/_partial/plugin/motto.ejs","hash":"3d2af7457c471558f6f2391b29c0373f0d0fcffb","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/share.ejs","hash":"c6014f9f93a885cb26379f3fa75e6e9011d5f985","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/post/title.ejs","hash":"65994e06024045d474402e3a0a22f869dd41476d","modified":1693383859021},{"_id":"themes/Annie/layout/_partial/post/tag.ejs","hash":"4d95ff96b9a3161add5364c779800c7945bd6ad8","modified":1693383859021},{"_id":"themes/Annie/layout/_partial/post/date.ejs","hash":"8bf4c6177c66713bd707967c12087e2b24314046","modified":1693383859020},{"_id":"themes/Annie/layout/_partial/widget/totop.ejs","hash":"43dc78bfb7c5acbbf763e519bedec10bb75a460f","modified":1693383859021},{"_id":"themes/Annie/layout/_partial/post/navigation.ejs","hash":"0f9918ed0d1ff9bd4053c68dd4f05091c793a634","modified":1693383859021},{"_id":"themes/Annie/source/css/_base/base.styl","hash":"98a00417c2502fac105647379e2cbdd6a916b107","modified":1693383859021},{"_id":"themes/Annie/layout/_partial/post/gallery.ejs","hash":"d48911706f21fa6ad256b4aefda45865e42927a4","modified":1693383859021},{"_id":"themes/Annie/source/css/_component/backtotop.styl","hash":"b77b304ae3dae357d2d5b07254c00a3382635252","modified":1693383859036},{"_id":"themes/Annie/source/css/_base/normalize.styl","hash":"f995dab1c91c02ba01562b39ca5f09996cfa6364","modified":1693383859031},{"_id":"themes/Annie/source/css/_base/icomoon.styl","hash":"c83d6c27f4738c42360767f4bee5c9ce3cbc86a7","modified":1693383859030},{"_id":"themes/Annie/source/css/_component/animation.styl","hash":"4256c6fdbfc0de2afc9e18bbabbe03c46533de7d","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/component.styl","hash":"fa22ad8c2147825a92ccf469c4fab3a1a833a1ca","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/pagination.styl","hash":"d0dd3e2db660ad529b064145e40736a16a90e672","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/comment.styl","hash":"e15088f78a268bd286d6dd8012995ea24fb72f21","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/preloader.styl","hash":"74aaeadf1838c09d7667ec4ea5378b74b9702203","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/menu.styl","hash":"95f45cb5f964e9d67435b335785a17b82e7dce9b","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/share.styl","hash":"6720cbbe6fdc486207176b2f871b4d2b409311c6","modified":1693383859036},{"_id":"themes/Annie/source/css/_custom/custom.styl","hash":"f177f04e3c1557ccd282cf9aa4470884a1303b5e","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/scrollbar.styl","hash":"1befebd24ed02cb4d622e1e41942b8f1ace0b302","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/progressbar.styl","hash":"2f22c183e7f7596abfae732dccf8b8932ac56ca3","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/toc.styl","hash":"508e83590f1c79e76b00349dfebf5a87131172d2","modified":1693383859036},{"_id":"themes/Annie/source/css/_layout/footer.styl","hash":"62ce46fa3621bfacabcdc008b6c09920102369f6","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/search.styl","hash":"4c153e7b43804cd86bee37dfc7d666db182c2a30","modified":1693383859036},{"_id":"themes/Annie/source/css/_helper/variable.styl","hash":"4a66fb49db3fc1821fd67f9cbf74193b787f6f3c","modified":1693383859036},{"_id":"themes/Annie/source/css/_layout/header.styl","hash":"76df122eee69972747d6c269152812258a225fdb","modified":1693383859036},{"_id":"themes/Annie/source/css/_page/about.styl","hash":"8c75594341d61270c684473b7e9c73289ece940a","modified":1693383859036},{"_id":"themes/Annie/source/css/_page/category.styl","hash":"b511884ac4525fe47c6143443094cfcf0535f608","modified":1693383859051},{"_id":"themes/Annie/source/css/_page/gallery.styl","hash":"2cd0e802a06bdf4a856757a75c00cb00be8a4534","modified":1693383859051},{"_id":"themes/Annie/source/css/_mobile/mobile.styl","hash":"174e72a645b97dec14dbdb3125a1266bf803d985","modified":1693383859036},{"_id":"themes/Annie/source/css/_page/archive.styl","hash":"a73615cffcfd65ac215cc2a9ad5ccc0e3b707564","modified":1693383859036},{"_id":"themes/Annie/source/css/fonts/icomoon.eot","hash":"8b0e8a844b0db44cd73419c55ab9054e90844cf3","modified":1693383859056},{"_id":"themes/Annie/source/css/_page/page.styl","hash":"74734f58b62fca791dba68c71293d8141cc1c273","modified":1693383859053},{"_id":"themes/Annie/source/css/_page/post.styl","hash":"7c42dccb7eb428969d6ad287f960328ec3b2c200","modified":1693383859053},{"_id":"themes/Annie/source/css/fonts/icomoon.woff","hash":"4a4bcec7a051735d1fa587af3e53c6a9270dca79","modified":1693383859065},{"_id":"themes/Annie/source/css/_page/tag.styl","hash":"a6681d8d8a5fbae37060d9b0cb261c2d33d7b55e","modified":1693383859053},{"_id":"themes/Annie/source/css/fonts/icomoon.ttf","hash":"7f5ba460f1c534dffd1f1bd92fa381fe93c6e8bc","modified":1693383859062},{"_id":"themes/Annie/source/plugin/clipboard/clipboard.js","hash":"a6807ac344ef1c099eb932801828398870ddee30","modified":1693383859083},{"_id":"themes/Annie/source/plugin/chinese/chinese.js","hash":"0afd302a9db7de46a0af3f076f5ea5e639e64393","modified":1693383859083},{"_id":"themes/Annie/source/plugin/comment/valine.min.js","hash":"c095b96b53c9d4aaa3a0eca6d0223cf033c0af8a","modified":1693383859096},{"_id":"themes/Annie/source/plugin/fancybox/jquery.fancybox.css","hash":"cbb951aeb94d1d070d011b2610490b59fbf3c463","modified":1693383859096},{"_id":"themes/Annie/source/plugin/imagelazyloader/yall.min.js","hash":"46a606cadfb1dbdf3c6172a0797c5f30d3968d1e","modified":1693383859099},{"_id":"themes/Annie/source/css/_page/index.styl","hash":"ce385c631bf8d82871f118c9362bb7767ecc323e","modified":1693383859051},{"_id":"themes/Annie/source/plugin/imageloaded/imagesloaded.pkgd.min.js","hash":"049173b82e68c40492961bb95ddacefb44eab680","modified":1693383859099},{"_id":"themes/Annie/source/plugin/gallerypage/natural-gallery.full.css","hash":"77aef23f3414e3da9adfaa005458c10c90afb7db","modified":1693383859099},{"_id":"themes/Annie/source/plugin/love/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1693383859115},{"_id":"themes/Annie/source/plugin/resizediv/resizediv.js","hash":"997f421eab476ef47459efe87fede1e3f2e9b91c","modified":1693383859131},{"_id":"themes/Annie/source/plugin/search/ziploader.js","hash":"f5de8fdfdbd61417e9d06d09fd87ce79f4bcc0aa","modified":1693383859131},{"_id":"themes/Annie/source/img/quote/danger.svg","hash":"213125a083bcef89806b4285190e050eef2660f2","modified":1693383859083},{"_id":"themes/Annie/source/img/quote/warning.svg","hash":"e4005d2eabfbd3bdd291236f56a4d385e3b337b2","modified":1693383859083},{"_id":"themes/Annie/source/img/quote/success.svg","hash":"16e9a53d7c49621be8e3f1a28b11bcf5e751105e","modified":1693383859083},{"_id":"themes/Annie/layout/_partial/plugin/comment/livere.ejs","hash":"548b662d2f5fbc53018fe94dbca2c687be3faf10","modified":1693383858989},{"_id":"themes/Annie/source/img/quote/info.svg","hash":"60613abd8f8522c6cebdbb4bf7bf3fcc482245bd","modified":1693383859083},{"_id":"themes/Annie/source/img/quote/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1693383859083},{"_id":"themes/Annie/source/plugin/toc/katelog.min.js","hash":"98a96608bb3e1e01638020f0c0e1ac04127c3933","modified":1693383859131},{"_id":"themes/Annie/layout/_partial/plugin/clipboard/code-copy.ejs","hash":"b282c82570692d346a9e787d11e000b1b66930e4","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/plugin/comment/gitalk.ejs","hash":"b9dc663252087e98672b9ab2196010a7e83b7260","modified":1693383858989},{"_id":"themes/Annie/source/plugin/gallerypage/natural.css","hash":"a65275daafd7534f48e9dac1cba5de73f6b88822","modified":1693383859099},{"_id":"themes/Annie/layout/_partial/plugin/share/addThis.ejs","hash":"84c09f49d846bea4b25953d50a87d1b94d099e4b","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/share/social-share.ejs","hash":"d988ed9d04db97719a8eb5c1b8b007e5f721070a","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/share/shareThis.ejs","hash":"1757b52b44204a89fdea9a430b93749bd50b0bd4","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/busuanzi.ejs","hash":"c002a4dd377e0d22a58d644557f8614317ee4383","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/tencent_analytics.ejs","hash":"f0cec1818596094a3d42657c078b38da82eb052f","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/share/baidu-share.ejs","hash":"871a09cdd452bf89764e02d607b2b196b7fa3881","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/baidu-analytics.ejs","hash":"4208b0443b39d7341fbde666a245c358d6ba4e17","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/cnzz_analytics.ejs","hash":"957c9f527e849a548cd4b6d1f7851f1ddb1b647b","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/comment/valine.ejs","hash":"956b638975058cde705bd9419556f0cf982dd1ba","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/topN-post.ejs","hash":"e04315ff9602ceec1d347e0d1432590601bb12d7","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/google_analytics.ejs","hash":"4b5393a94f1063b27bdca8ad796749fb7d29f1b6","modified":1693383859005},{"_id":"themes/Annie/source/css/_component/_hexotags/first-letter-sink.styl","hash":"2017617486dfc4537197d8878ee2de43097f960e","modified":1693383859033},{"_id":"themes/Annie/source/css/_component/_highlight/_diff.styl","hash":"15578f4883a07c4753dd6be1258f1a553619135a","modified":1693383859035},{"_id":"themes/Annie/layout/_partial/plugin/statistics/leancloud.ejs","hash":"12b05f18c64515f7c056681113ba8a72f48041a8","modified":1693383859005},{"_id":"themes/Annie/source/css/_component/_hexotags/colorquote.styl","hash":"742f3bb8cd8178f9c50bfe4364926885853d1e82","modified":1693383859033},{"_id":"themes/Annie/source/css/_component/_highlight/_code-copy.styl","hash":"2bea0d796bcd4264e806edf1d238bb4b3e91e4f3","modified":1693383859034},{"_id":"themes/Annie/source/plugin/gallerypage/images/default-skin.svg","hash":"bf61aaab4ee361ac7537b68abee8780ac6fd22f3","modified":1693383859099},{"_id":"themes/Annie/source/css/_component/_highlight/_theme.styl","hash":"b9874d938ddb4165065f9aaf3a3b035f088022a8","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/_highlight/_variables.styl","hash":"f397024eb66bb042624e0df43a5b406631501277","modified":1693383859036},{"_id":"themes/Annie/source/plugin/gallerypage/images/default-skin.png","hash":"f6c7bd39c5ceda639276e64447f6007ad28ac0dd","modified":1693383859099},{"_id":"themes/Annie/source/css/_component/_highlight/highlight.styl","hash":"e3ae63b5ebc04d1b77191535eb6147c30fc7d89a","modified":1693383859036},{"_id":"themes/Annie/source/plugin/gallerypage/images/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1693383859099},{"_id":"themes/Annie/source/plugin/gallerypage/data.json","hash":"fc42a58d5b23572ef1ceb77618fa03355a411d62","modified":1693383859099},{"_id":"themes/Annie/source/plugin/jquery/jquery.min.js","hash":"dacc1f76630a9708add066819b1aabf8dce01056","modified":1693383859115},{"_id":"themes/Annie/source/plugin/nicescroll/jquery.nicescroll.js","hash":"d6a0c3c1e0bba483e12e7996c0bd07fd438650cf","modified":1693383859115},{"_id":"themes/Annie/source/plugin/gallerypage/natural-gallery.full.js","hash":"98a795f711ea0267a50c60b266ff0e72986f7d0a","modified":1693383859099},{"_id":"themes/Annie/source/css/fonts/icomoon.svg","hash":"09149a4a43ec2f8fd9df3a2a0cca774384f576a5","modified":1693383859059},{"_id":"themes/Annie/source/plugin/fancybox/jquery.fancybox.js","hash":"cc3932fc552c8761990260ebf9a8f76ebfa19a2f","modified":1693383859099},{"_id":"themes/Annie/source/plugin/leancloud/av-min.js","hash":"430bb484ce71c61a2f55ea1aa9e040312933332b","modified":1693383859115},{"_id":"themes/Annie/source/plugin/motto/motto.js","hash":"30316c1e695d7da05b915e12cc34addd91511e15","modified":1693383859115},{"_id":"themes/Annie/source/img/favicon.ico","hash":"92da6723b6526aa98c23501e6086c5948a13083c","modified":1693383859067},{"_id":"themes/Annie/source/img/cart_cover.jpg","hash":"5c9561c6cc4637a1cfc03fb0399883f052e3340b","modified":1693383859067},{"_id":"themes/Annie/source/img/header-bg.jpg","hash":"509748b7822d48d510476d6168c96cc09d6d7502","modified":1693383859067},{"_id":"public/atom.xml","hash":"7db5b350426c9f1d8b3388ce4dd7e6ddb061f468","modified":1700445116433},{"_id":"public/search.xml","hash":"e6865238769925bea9d129e2f957f72b12cbda54","modified":1700445116433},{"_id":"public/categories/index.html","hash":"9c87bdc360f4b6123bb97fba6788ee089921aeec","modified":1700445116433},{"_id":"public/tags/index.html","hash":"f592a01458db7e39687d78bc0013df214625194e","modified":1700445116433},{"_id":"public/新建文件夹/关于更多的Printf与scanf知识.html","hash":"e2b95df183de1e0a2e3da31f131dadcecd16a86d","modified":1700445116433},{"_id":"public/新建文件夹/OJ中的“小丑”行为.html","hash":"c92d470231c63ae6cad406e4e2b7c2bd71c6f612","modified":1700445116433},{"_id":"public/新建文件夹/对于昨天晚上学长讲的内容的复盘.html","hash":"8829d0f86349e681cb2cb7c9a572808a724a83da","modified":1700445116433},{"_id":"public/新建文件夹/基于最近两次直播的知识调研.html","hash":"45599b11ee4cb03d2bca75d4ebbe73715bde1606","modified":1700445116433},{"_id":"public/2023/11/20/网站集合/index.html","hash":"9310f1ce259ab2b820e09ed4e8c6c91a334ec7a2","modified":1700445116433},{"_id":"public/2023/11/20/直播内容复盘-排序与交换/index.html","hash":"aef762ab72c388ea4168289a5987a70606c2baa6","modified":1700445116433},{"_id":"public/2023/11/20/输入与输出/index.html","hash":"ef15c634a428575a528468bddf1853870c20e18d","modified":1700445116433},{"_id":"public/2023/11/20/千奇百怪的字符串处理函数/index.html","hash":"da917c0ec746664f7cb3d6467d93fc23eb60b725","modified":1700445116433},{"_id":"public/2023/11/20/OJ中的那些小丑行为/index.html","hash":"e5ff7c7e1678b8f23ce66805c2763a35111ce6c8","modified":1700445116433},{"_id":"public/2023/11/07/hello-world/index.html","hash":"fcb0ad397ec52b27df6493c81ee3ba4f364c3c23","modified":1700445116433},{"_id":"public/2023/11/07/数组-1/index.html","hash":"b943a3600845c89ca32359ac631589b62818d250","modified":1700445116433},{"_id":"public/2023/08/30/流程控制方法/index.html","hash":"54cf77e9fa884d8e9db046e5a9d1771f5a72a816","modified":1700445116433},{"_id":"public/archives/index.html","hash":"478a8d2222d4be9efa41da724f5f59b7d566308d","modified":1700445116433},{"_id":"public/archives/2023/index.html","hash":"d5b26bd377491762fb789c9633cea9408a9d95c0","modified":1700445116433},{"_id":"public/archives/2023/08/index.html","hash":"c00910a962642375d6cd89833c0aaed84fec85d1","modified":1700445116433},{"_id":"public/index.html","hash":"12901dc34a3fcae3d329d1b688df847250ea14cd","modified":1700445116433},{"_id":"public/archives/2023/11/index.html","hash":"ac9158de37bc90218a62578a94dcdae92775e5c9","modified":1700445116433},{"_id":"public/categories/python学习/index.html","hash":"3c1032ee8d9827bab4e81e6277ef4f3b7526a247","modified":1700445116433},{"_id":"public/tags/C语言学习/index.html","hash":"7fed8575d46e0c2b178819dfbb3d457299e78c36","modified":1700445116433},{"_id":"public/tags/学习资源/index.html","hash":"43e025a2fe12f9eb7d403bf0a1a3f552088aa6c7","modified":1700445116433},{"_id":"public/img/Annie_qq_qrcode.jpg","hash":"571f514f6ef9b4e085bb9c74523eade02a84e8ea","modified":1700445116433},{"_id":"public/img/logo.png","hash":"6753531813b7157625c4eca2531d08edc65f846b","modified":1700445116433},{"_id":"public/img/lazy.gif","hash":"0bbc5084e6aaa8d6260645c49abc45659553f464","modified":1700445116433},{"_id":"public/css/fonts/icomoon.eot","hash":"8b0e8a844b0db44cd73419c55ab9054e90844cf3","modified":1700445116433},{"_id":"public/css/fonts/icomoon.woff","hash":"4a4bcec7a051735d1fa587af3e53c6a9270dca79","modified":1700445116433},{"_id":"public/css/fonts/icomoon.ttf","hash":"7f5ba460f1c534dffd1f1bd92fa381fe93c6e8bc","modified":1700445116433},{"_id":"public/img/quote/danger.svg","hash":"213125a083bcef89806b4285190e050eef2660f2","modified":1700445116433},{"_id":"public/img/quote/success.svg","hash":"16e9a53d7c49621be8e3f1a28b11bcf5e751105e","modified":1700445116433},{"_id":"public/img/quote/info.svg","hash":"60613abd8f8522c6cebdbb4bf7bf3fcc482245bd","modified":1700445116433},{"_id":"public/img/quote/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1700445116433},{"_id":"public/plugin/gallerypage/images/default-skin.svg","hash":"bf61aaab4ee361ac7537b68abee8780ac6fd22f3","modified":1700445116433},{"_id":"public/img/quote/warning.svg","hash":"e4005d2eabfbd3bdd291236f56a4d385e3b337b2","modified":1700445116433},{"_id":"public/plugin/gallerypage/images/default-skin.png","hash":"f6c7bd39c5ceda639276e64447f6007ad28ac0dd","modified":1700445116433},{"_id":"public/plugin/gallerypage/images/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1700445116433},{"_id":"public/css/Annie.css","hash":"64e9f855fb1cae775c953815ae654ad4cf7b65b3","modified":1700445116433},{"_id":"public/css/comment.css","hash":"22cfb29c7d04da36aaa306aebed8496380efefc1","modified":1700445116433},{"_id":"public/js/search.js","hash":"1a1bfdbf2ea98d387925f63246c15ef9e9556fef","modified":1700445116433},{"_id":"public/js/leancloud-count.js","hash":"3d713d7b5e9f473a8c44b2cc64f211568bac8c90","modified":1700445116433},{"_id":"public/js/main.js","hash":"5c090a6312edcfee22d1a0b3a760cd467d9982bd","modified":1700445116433},{"_id":"public/plugin/chinese/chinese.js","hash":"986dfdf6f27852151e2225aaaa22d2302d5d24dc","modified":1700445116433},{"_id":"public/plugin/fancybox/jquery.fancybox.css","hash":"7a81dceacd45c9249b1da50c3a51eb6aec68424c","modified":1700445116433},{"_id":"public/plugin/clipboard/clipboard.js","hash":"43d4af727a32a793d9146eb828ed114e3ca29cec","modified":1700445116433},{"_id":"public/plugin/imagelazyloader/yall.min.js","hash":"59e3ca7c5cc98368156826ea857fa1a8dea6aaa4","modified":1700445116433},{"_id":"public/plugin/comment/valine.min.js","hash":"0c698e2d51cdc0d2eb303c8c3a81ddd6d6cf667f","modified":1700445116433},{"_id":"public/plugin/gallerypage/data.json","hash":"a827712b50f4805533735999a50684999788986c","modified":1700445116433},{"_id":"public/plugin/gallerypage/natural-gallery.full.css","hash":"d5c5ff93bf13e2d4ece69ccaa6cd72a2486daba0","modified":1700445116433},{"_id":"public/plugin/imageloaded/imagesloaded.pkgd.min.js","hash":"6d3e11174e22668e69df236e5c4542168f7cbfec","modified":1700445116433},{"_id":"public/plugin/love/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1700445116433},{"_id":"public/plugin/fancybox/jquery.fancybox.js","hash":"c4461bc0cacd6a1d58885ca0f466ba1b7562c85d","modified":1700445116433},{"_id":"public/plugin/jquery/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1700445116433},{"_id":"public/plugin/leancloud/av-min.js","hash":"d16c3eb20daa240feea36cc607a2e8a22ac66f81","modified":1700445116433},{"_id":"public/plugin/resizediv/resizediv.js","hash":"1b3e3eb33aee0de1f02384dbdbd3941716e0fda5","modified":1700445116433},{"_id":"public/plugin/search/ziploader.js","hash":"93c976bea5ae21811807cf27b4ca8c3c94640b04","modified":1700445116433},{"_id":"public/plugin/gallerypage/natural-gallery.full.js","hash":"5b3dfb0b5279055706c57484e14c8dac321be7e8","modified":1700445116433},{"_id":"public/plugin/toc/katelog.min.js","hash":"7acaa9e4a1a3689b84382c1814b58b1168c57e2c","modified":1700445116433},{"_id":"public/plugin/gallerypage/natural.css","hash":"8014a4791f5789e55aa8921def9eb93b3f31d48d","modified":1700445116433},{"_id":"public/plugin/nicescroll/jquery.nicescroll.js","hash":"25b8db3ad673a4661334b1cdeaf37ed881ffd17c","modified":1700445116433},{"_id":"public/plugin/motto/motto.js","hash":"282eac08d66a6e14f1b170cf1dbea67e53fba436","modified":1700445116433},{"_id":"public/css/fonts/icomoon.svg","hash":"09149a4a43ec2f8fd9df3a2a0cca774384f576a5","modified":1700445116433},{"_id":"public/img/favicon.ico","hash":"92da6723b6526aa98c23501e6086c5948a13083c","modified":1700445116433},{"_id":"public/img/cart_cover.jpg","hash":"5c9561c6cc4637a1cfc03fb0399883f052e3340b","modified":1700445116433},{"_id":"public/img/header-bg.jpg","hash":"509748b7822d48d510476d6168c96cc09d6d7502","modified":1700445116433}],"Category":[{"name":"python学习","_id":"clp6949ei000fh4ue70s29wmz"}],"Data":[],"Page":[{"title":"categories","date":"2023-08-30T09:46:13.000Z","type":"categories","layout":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-08-30 17:46:13\ntype: \"categories\"\nlayout: \"categories\"\n---\n\n","updated":"2023-08-30T10:51:24.244Z","path":"categories/index.html","comments":1,"_id":"clp6949e40000h4ue552lgvb5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-08-30T10:39:08.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-08-30 18:39:08\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-08-30T10:40:01.779Z","path":"tags/index.html","comments":1,"_id":"clp6949eb0002h4ueekr0cbxu","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，\n我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。\n\n1. 编译错误引火线\n+ 复制到做题平台上时复制漏了一些东西。 -不必多讲。\n+ if语句后加了分号，导致出现对于else语句的错误。\n+ 变量重名，或者没改完一些变量的名字。\n+ 忘了一些分号。\n+ int mian（int main）或者stdio打错了\n+ 修改程序的时候忘了关黑框，有时候会不能编译新的文件。\n+ for循环中分号用成逗号\n+ 函数声明与定义部分，都需要对于形式变量的数据类型进行设置。\n\n2. 运行错误引火线\n+ for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加\n\t死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。\n\n3. 程序结果错误引火线\n+ scanf没有加取址符，printf加了取址符\n\tscanf不加的话，就不会对于变量进行赋值操作\n\tprintf加的话，返回的是变量的储存地址，垃圾数据。\n\n+ 部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）\n\t数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。\n\n+ 循环完一次的结果归零。\n\t有些循环比如while进行多实例检测的时候，会执行多个循环，\n\t如果某些计数的变量没有归零，会导致数据很离谱。\n\n+ 判断相等运算符 == 写成赋值运算符 = \n\t建议把变量放后面，值放前面，这样如果犯这个错的话会报错\n\n+ 赋值运算符=的结合性不清楚。\n\t用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。\n\n+ double转int的坑\n\tdouble储存的数据是近似值，切去小数点后有可能数据-1\n\t届时答案对不对完全看你运气。\n\n+ 数据类型对应的格式化符在更改变量类型的时候没有改变。\n\n+ switch语句中漏写了一个break。\n\t直接不受控地向下面的case进发，全部执行，直到遇到新的break。\n\n+ scanf中的格式加空格就算了，别的不要轻易加。\n+ \n+ 多字符输入的时候，注意处理回车与空格，一般用getchar来解决\n\n检查的思路：\n1. 首先基本问题，不要出编译错误，对于一些常见符号要打对\n\t比如，scanf中的&符号，各个语句后面的分号，大括号不要漏一边。\n2. 然后，看修改变量的时候有没有注意类型，\n相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改\n3. 接着看循环，\n对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环\n对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。\n看分支，看if语句的限定是否满足自己想要的条件，是否存在== 写成=的情况。\n看switch语句的break。\n4. 最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。","source":"新建文件夹/OJ中的“小丑”行为.md","raw":"在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，\n我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。\n\n1. 编译错误引火线\n+ 复制到做题平台上时复制漏了一些东西。 -不必多讲。\n+ if语句后加了分号，导致出现对于else语句的错误。\n+ 变量重名，或者没改完一些变量的名字。\n+ 忘了一些分号。\n+ int mian（int main）或者stdio打错了\n+ 修改程序的时候忘了关黑框，有时候会不能编译新的文件。\n+ for循环中分号用成逗号\n+ 函数声明与定义部分，都需要对于形式变量的数据类型进行设置。\n\n2. 运行错误引火线\n+ for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加\n\t死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。\n\n3. 程序结果错误引火线\n+ scanf没有加取址符，printf加了取址符\n\tscanf不加的话，就不会对于变量进行赋值操作\n\tprintf加的话，返回的是变量的储存地址，垃圾数据。\n\n+ 部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）\n\t数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。\n\n+ 循环完一次的结果归零。\n\t有些循环比如while进行多实例检测的时候，会执行多个循环，\n\t如果某些计数的变量没有归零，会导致数据很离谱。\n\n+ 判断相等运算符 == 写成赋值运算符 = \n\t建议把变量放后面，值放前面，这样如果犯这个错的话会报错\n\n+ 赋值运算符=的结合性不清楚。\n\t用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。\n\n+ double转int的坑\n\tdouble储存的数据是近似值，切去小数点后有可能数据-1\n\t届时答案对不对完全看你运气。\n\n+ 数据类型对应的格式化符在更改变量类型的时候没有改变。\n\n+ switch语句中漏写了一个break。\n\t直接不受控地向下面的case进发，全部执行，直到遇到新的break。\n\n+ scanf中的格式加空格就算了，别的不要轻易加。\n+ \n+ 多字符输入的时候，注意处理回车与空格，一般用getchar来解决\n\n检查的思路：\n1. 首先基本问题，不要出编译错误，对于一些常见符号要打对\n\t比如，scanf中的&符号，各个语句后面的分号，大括号不要漏一边。\n2. 然后，看修改变量的时候有没有注意类型，\n相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改\n3. 接着看循环，\n对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环\n对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。\n看分支，看if语句的限定是否满足自己想要的条件，是否存在== 写成=的情况。\n看switch语句的break。\n4. 最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。","date":"2023-11-20T01:48:40.197Z","updated":"2023-11-20T01:48:40.197Z","path":"新建文件夹/OJ中的“小丑”行为.html","title":"","comments":1,"layout":"page","_id":"clp6949ee0005h4ue478b0r8o","content":"<p>在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，<br>我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。</p>\n<ol>\n<li>编译错误引火线</li>\n</ol>\n<ul>\n<li>复制到做题平台上时复制漏了一些东西。 -不必多讲。</li>\n<li>if语句后加了分号，导致出现对于else语句的错误。</li>\n<li>变量重名，或者没改完一些变量的名字。</li>\n<li>忘了一些分号。</li>\n<li>int mian（int main）或者stdio打错了</li>\n<li>修改程序的时候忘了关黑框，有时候会不能编译新的文件。</li>\n<li>for循环中分号用成逗号</li>\n<li>函数声明与定义部分，都需要对于形式变量的数据类型进行设置。</li>\n</ul>\n<ol start=\"2\">\n<li>运行错误引火线</li>\n</ol>\n<ul>\n<li>for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加<br>  死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。</li>\n</ul>\n<ol start=\"3\">\n<li>程序结果错误引火线</li>\n</ol>\n<ul>\n<li><p>scanf没有加取址符，printf加了取址符<br>  scanf不加的话，就不会对于变量进行赋值操作<br>  printf加的话，返回的是变量的储存地址，垃圾数据。</p>\n</li>\n<li><p>部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）<br>  数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。</p>\n</li>\n<li><p>循环完一次的结果归零。<br>  有些循环比如while进行多实例检测的时候，会执行多个循环，<br>  如果某些计数的变量没有归零，会导致数据很离谱。</p>\n</li>\n<li><p>判断相等运算符 &#x3D;&#x3D; 写成赋值运算符 &#x3D;<br>  建议把变量放后面，值放前面，这样如果犯这个错的话会报错</p>\n</li>\n<li><p>赋值运算符&#x3D;的结合性不清楚。<br>  用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。</p>\n</li>\n<li><p>double转int的坑<br>  double储存的数据是近似值，切去小数点后有可能数据-1<br>  届时答案对不对完全看你运气。</p>\n</li>\n<li><p>数据类型对应的格式化符在更改变量类型的时候没有改变。</p>\n</li>\n<li><p>switch语句中漏写了一个break。<br>  直接不受控地向下面的case进发，全部执行，直到遇到新的break。</p>\n</li>\n<li><p>scanf中的格式加空格就算了，别的不要轻易加。</p>\n</li>\n<li></li>\n<li><p>多字符输入的时候，注意处理回车与空格，一般用getchar来解决</p>\n</li>\n</ul>\n<p>检查的思路：</p>\n<ol>\n<li>首先基本问题，不要出编译错误，对于一些常见符号要打对<br> 比如，scanf中的&amp;符号，各个语句后面的分号，大括号不要漏一边。</li>\n<li>然后，看修改变量的时候有没有注意类型，<br>相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改</li>\n<li>接着看循环，<br>对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环<br>对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。<br>看分支，看if语句的限定是否满足自己想要的条件，是否存在&#x3D;&#x3D; 写成&#x3D;的情况。<br>看switch语句的break。</li>\n<li>最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，<br>我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。</p>\n<ol>\n<li>编译错误引火线</li>\n</ol>\n<ul>\n<li>复制到做题平台上时复制漏了一些东西。 -不必多讲。</li>\n<li>if语句后加了分号，导致出现对于else语句的错误。</li>\n<li>变量重名，或者没改完一些变量的名字。</li>\n<li>忘了一些分号。</li>\n<li>int mian（int main）或者stdio打错了</li>\n<li>修改程序的时候忘了关黑框，有时候会不能编译新的文件。</li>\n<li>for循环中分号用成逗号</li>\n<li>函数声明与定义部分，都需要对于形式变量的数据类型进行设置。</li>\n</ul>\n<ol start=\"2\">\n<li>运行错误引火线</li>\n</ol>\n<ul>\n<li>for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加<br>  死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。</li>\n</ul>\n<ol start=\"3\">\n<li>程序结果错误引火线</li>\n</ol>\n<ul>\n<li><p>scanf没有加取址符，printf加了取址符<br>  scanf不加的话，就不会对于变量进行赋值操作<br>  printf加的话，返回的是变量的储存地址，垃圾数据。</p>\n</li>\n<li><p>部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）<br>  数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。</p>\n</li>\n<li><p>循环完一次的结果归零。<br>  有些循环比如while进行多实例检测的时候，会执行多个循环，<br>  如果某些计数的变量没有归零，会导致数据很离谱。</p>\n</li>\n<li><p>判断相等运算符 &#x3D;&#x3D; 写成赋值运算符 &#x3D;<br>  建议把变量放后面，值放前面，这样如果犯这个错的话会报错</p>\n</li>\n<li><p>赋值运算符&#x3D;的结合性不清楚。<br>  用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。</p>\n</li>\n<li><p>double转int的坑<br>  double储存的数据是近似值，切去小数点后有可能数据-1<br>  届时答案对不对完全看你运气。</p>\n</li>\n<li><p>数据类型对应的格式化符在更改变量类型的时候没有改变。</p>\n</li>\n<li><p>switch语句中漏写了一个break。<br>  直接不受控地向下面的case进发，全部执行，直到遇到新的break。</p>\n</li>\n<li><p>scanf中的格式加空格就算了，别的不要轻易加。</p>\n</li>\n<li></li>\n<li><p>多字符输入的时候，注意处理回车与空格，一般用getchar来解决</p>\n</li>\n</ul>\n<p>检查的思路：</p>\n<ol>\n<li>首先基本问题，不要出编译错误，对于一些常见符号要打对<br> 比如，scanf中的&amp;符号，各个语句后面的分号，大括号不要漏一边。</li>\n<li>然后，看修改变量的时候有没有注意类型，<br>相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改</li>\n<li>接着看循环，<br>对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环<br>对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。<br>看分支，看if语句的限定是否满足自己想要的条件，是否存在&#x3D;&#x3D; 写成&#x3D;的情况。<br>看switch语句的break。</li>\n<li>最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。</li>\n</ol>\n"},{"_content":"从字符串那里，包括之前听C语言群里大佬说\n也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。\n今天也一并分享给大家。\n\n## 1.stdio.h中的更多的函数\n(关于stream与参数列表的不讲，还没学到。)\n\n类似的，应该你们也听说过，这里列一下。\n\n```C\nint sprintf(char *str, const char *format);\nint sscanf(const char *str, const char *format, ...);\n```\n### 一.函数定义读法\n\n这里是纯纯的函数函数定义，看起来可能很抽象，\n**没关系，我会出手。**\n\n总体上一讲，以后见到**前面带f**的一般是有关`stream`的\n**带v的**一般是有关`参数列表`的，\n以后看到学长写类似的函数就知道该多学习了!😂\n\n对于以后看这样的函数定义，首先看[返回值类型]，\n一般是，返回处理的结果或者返回一个数值（int/double)\n\n然后如果看不懂函数名的话，\n先看[括号中的形式参数]，知道我们需要输入的是什么东西。\n\n>比如这两个函数中\n>**const**是数据类型的修饰符，表示常量。\n>char* 表示字符串、后面的是形式参数名，不需要管。\n\n最后，通过[看实例]与函数的[概述]得知函数的作用。\n在菜鸟教程里都一条一条地列出来的，每一条都有实例。\n\n在最后一篇文章的最后会给大家列出来用过的这些网站。\n\n### 二.浅谈没讲过的sscanf()函数\n\n上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。\n现在就来讲一讲相对的sscanf函数。\n\n不多说，直接上函数定义。\n```C\nint sscanf(const char *str, const char *format, ...);\n```\n\n首先看**返回值**\n这个函数返回的是一个数值，也就像scanf一样\n函数返回的是成功赋值与匹配的个数。\n如果到达文件末尾或者错误返回EOF。\n\n然后看**形参**\n获取的是字符串常量(`const char *str`)，\n\t这个字符串，是包含着我们想要赋值数据的字符串。\n写入形式(`const char *format`)\n\t写入形式相当于格式化符，相当于赋值的顺序）\n\t尽量不要加新的形式。\n与参数列表(`...`)。\n\t对应之前的格式化符。\n关于参数列表，其实简单的说\n就是我们printf中标准符后边逗号中的内容\n见下方。\n\n```C\nint a,b,c;\nscanf(\"%d %d %d\",&a,&b,&c);\n//后面的a,b,c就是参数列表\n//%d的这个字符串就是写入形式的一种形式\n```\n\n所以这个函数的**功能**就是\n>1.从字符串中获取数据，\n>2.然后赋给格式化符的对应的变量。\n\nsscanf不需要我们自己输入，在字符串中有就好。\n\n所以更多的惯例自己去菜鸟教程上查就好，\n**建议立即行动，不然一定会忘记。**\n\n## 二.关于我们的输入输出\n\n>以下内容取自空梦大大的博客\n>[如何理解c/c++中的输入/输出函数？ | 山岳库博](https://kmar.top/posts/51c9b0a0/)\n>我们这里梳理的是，我们这个阶段可以用到的符号。\n\n### 1.关于格式化符与printf、scanf修饰符\n\n格式化符我们需要知道的如下，之前在题中也出过。\n\t1. %d/%lf/%f/%c 整数、字符、浮点数\n\t2. %s 字符串输入与输出。\n\t3. %x/%X - 十六进制整数 或者 %o 八进制整数\n\t4. %%两个百分号一起用可以输出%号，相当于转义了。\n%%\n掌握了这些我们就不太用怕需要的数据表示不出来了。\n现在看来老师教的还是不是很够，第一个都用过时了。\n\n## printf修饰符\n1. 加数字，右对齐字符宽度。-实例：`printf(\"%4d\",n);`\n2. .数字，对于小数表示小数后位数，比如`%.3lf`\n\t对于字符串是打印字符的最大数量\n\t只使用点%.f与%.0f相同。\n3. 使用ll表示long long `%lld`\n4. 使用l，对于整型表示long int，对于浮点型表示double\n5. 各种标记：\n\t1. 在数字前加符号为左对齐\n\t2. + 是为了把在有符号数开头加'+'或者'-'。\n\t3. 加0对于多于的字段宽度填充0，如`%04d`\n\t\t对于1，返回的是0001.\n\t\t4.加入 * 决定填入数字，\n\t\t需要在参数列表中新加入一个变量。\n\t\t 常见形式为`%*lf`\n\n## scanf修饰符\n1. * 只读取不赋值，这对于无用数据是有用处的 形式为类似`%*d`\n\td可以任意换，以下的所有实例中的d都可以换成其他类型\n2. 同样的加数字为取字段的宽，有多长取多长，别的截掉。\n\n这就是最近关于输入输出想和大家分享的内容。\n\n\n","source":"新建文件夹/关于更多的Printf与scanf知识.md","raw":"从字符串那里，包括之前听C语言群里大佬说\n也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。\n今天也一并分享给大家。\n\n## 1.stdio.h中的更多的函数\n(关于stream与参数列表的不讲，还没学到。)\n\n类似的，应该你们也听说过，这里列一下。\n\n```C\nint sprintf(char *str, const char *format);\nint sscanf(const char *str, const char *format, ...);\n```\n### 一.函数定义读法\n\n这里是纯纯的函数函数定义，看起来可能很抽象，\n**没关系，我会出手。**\n\n总体上一讲，以后见到**前面带f**的一般是有关`stream`的\n**带v的**一般是有关`参数列表`的，\n以后看到学长写类似的函数就知道该多学习了!😂\n\n对于以后看这样的函数定义，首先看[返回值类型]，\n一般是，返回处理的结果或者返回一个数值（int/double)\n\n然后如果看不懂函数名的话，\n先看[括号中的形式参数]，知道我们需要输入的是什么东西。\n\n>比如这两个函数中\n>**const**是数据类型的修饰符，表示常量。\n>char* 表示字符串、后面的是形式参数名，不需要管。\n\n最后，通过[看实例]与函数的[概述]得知函数的作用。\n在菜鸟教程里都一条一条地列出来的，每一条都有实例。\n\n在最后一篇文章的最后会给大家列出来用过的这些网站。\n\n### 二.浅谈没讲过的sscanf()函数\n\n上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。\n现在就来讲一讲相对的sscanf函数。\n\n不多说，直接上函数定义。\n```C\nint sscanf(const char *str, const char *format, ...);\n```\n\n首先看**返回值**\n这个函数返回的是一个数值，也就像scanf一样\n函数返回的是成功赋值与匹配的个数。\n如果到达文件末尾或者错误返回EOF。\n\n然后看**形参**\n获取的是字符串常量(`const char *str`)，\n\t这个字符串，是包含着我们想要赋值数据的字符串。\n写入形式(`const char *format`)\n\t写入形式相当于格式化符，相当于赋值的顺序）\n\t尽量不要加新的形式。\n与参数列表(`...`)。\n\t对应之前的格式化符。\n关于参数列表，其实简单的说\n就是我们printf中标准符后边逗号中的内容\n见下方。\n\n```C\nint a,b,c;\nscanf(\"%d %d %d\",&a,&b,&c);\n//后面的a,b,c就是参数列表\n//%d的这个字符串就是写入形式的一种形式\n```\n\n所以这个函数的**功能**就是\n>1.从字符串中获取数据，\n>2.然后赋给格式化符的对应的变量。\n\nsscanf不需要我们自己输入，在字符串中有就好。\n\n所以更多的惯例自己去菜鸟教程上查就好，\n**建议立即行动，不然一定会忘记。**\n\n## 二.关于我们的输入输出\n\n>以下内容取自空梦大大的博客\n>[如何理解c/c++中的输入/输出函数？ | 山岳库博](https://kmar.top/posts/51c9b0a0/)\n>我们这里梳理的是，我们这个阶段可以用到的符号。\n\n### 1.关于格式化符与printf、scanf修饰符\n\n格式化符我们需要知道的如下，之前在题中也出过。\n\t1. %d/%lf/%f/%c 整数、字符、浮点数\n\t2. %s 字符串输入与输出。\n\t3. %x/%X - 十六进制整数 或者 %o 八进制整数\n\t4. %%两个百分号一起用可以输出%号，相当于转义了。\n%%\n掌握了这些我们就不太用怕需要的数据表示不出来了。\n现在看来老师教的还是不是很够，第一个都用过时了。\n\n## printf修饰符\n1. 加数字，右对齐字符宽度。-实例：`printf(\"%4d\",n);`\n2. .数字，对于小数表示小数后位数，比如`%.3lf`\n\t对于字符串是打印字符的最大数量\n\t只使用点%.f与%.0f相同。\n3. 使用ll表示long long `%lld`\n4. 使用l，对于整型表示long int，对于浮点型表示double\n5. 各种标记：\n\t1. 在数字前加符号为左对齐\n\t2. + 是为了把在有符号数开头加'+'或者'-'。\n\t3. 加0对于多于的字段宽度填充0，如`%04d`\n\t\t对于1，返回的是0001.\n\t\t4.加入 * 决定填入数字，\n\t\t需要在参数列表中新加入一个变量。\n\t\t 常见形式为`%*lf`\n\n## scanf修饰符\n1. * 只读取不赋值，这对于无用数据是有用处的 形式为类似`%*d`\n\td可以任意换，以下的所有实例中的d都可以换成其他类型\n2. 同样的加数字为取字段的宽，有多长取多长，别的截掉。\n\n这就是最近关于输入输出想和大家分享的内容。\n\n\n","date":"2023-11-20T01:49:44.016Z","updated":"2023-11-19T04:28:53.380Z","path":"新建文件夹/关于更多的Printf与scanf知识.html","title":"","comments":1,"layout":"page","_id":"clp6949ef0007h4uee3mh35cx","content":"<p>从字符串那里，包括之前听C语言群里大佬说<br>也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。<br>今天也一并分享给大家。</p>\n<h2 id=\"1-stdio-h中的更多的函数\"><a href=\"#1-stdio-h中的更多的函数\" class=\"headerlink\" title=\"1.stdio.h中的更多的函数\"></a>1.stdio.h中的更多的函数</h2><p>(关于stream与参数列表的不讲，还没学到。)</p>\n<p>类似的，应该你们也听说过，这里列一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sprintf</span><span class=\"params\">(<span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一-函数定义读法\"><a href=\"#一-函数定义读法\" class=\"headerlink\" title=\"一.函数定义读法\"></a>一.函数定义读法</h3><p>这里是纯纯的函数函数定义，看起来可能很抽象，<br><strong>没关系，我会出手。</strong></p>\n<p>总体上一讲，以后见到<strong>前面带f</strong>的一般是有关<code>stream</code>的<br><strong>带v的</strong>一般是有关<code>参数列表</code>的，<br>以后看到学长写类似的函数就知道该多学习了!😂</p>\n<p>对于以后看这样的函数定义，首先看[返回值类型]，<br>一般是，返回处理的结果或者返回一个数值（int&#x2F;double)</p>\n<p>然后如果看不懂函数名的话，<br>先看[括号中的形式参数]，知道我们需要输入的是什么东西。</p>\n<blockquote>\n<p>比如这两个函数中<br><strong>const</strong>是数据类型的修饰符，表示常量。<br>char* 表示字符串、后面的是形式参数名，不需要管。</p>\n</blockquote>\n<p>最后，通过[看实例]与函数的[概述]得知函数的作用。<br>在菜鸟教程里都一条一条地列出来的，每一条都有实例。</p>\n<p>在最后一篇文章的最后会给大家列出来用过的这些网站。</p>\n<h3 id=\"二-浅谈没讲过的sscanf-函数\"><a href=\"#二-浅谈没讲过的sscanf-函数\" class=\"headerlink\" title=\"二.浅谈没讲过的sscanf()函数\"></a>二.浅谈没讲过的sscanf()函数</h3><p>上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。<br>现在就来讲一讲相对的sscanf函数。</p>\n<p>不多说，直接上函数定义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>首先看<strong>返回值</strong><br>这个函数返回的是一个数值，也就像scanf一样<br>函数返回的是成功赋值与匹配的个数。<br>如果到达文件末尾或者错误返回EOF。</p>\n<p>然后看<strong>形参</strong><br>获取的是字符串常量(<code>const char *str</code>)，<br>    这个字符串，是包含着我们想要赋值数据的字符串。<br>写入形式(<code>const char *format</code>)<br>    写入形式相当于格式化符，相当于赋值的顺序）<br>    尽量不要加新的形式。<br>与参数列表(<code>...</code>)。<br>    对应之前的格式化符。<br>关于参数列表，其实简单的说<br>就是我们printf中标准符后边逗号中的内容<br>见下方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\"><span class=\"comment\">//后面的a,b,c就是参数列表</span></span><br><span class=\"line\"><span class=\"comment\">//%d的这个字符串就是写入形式的一种形式</span></span><br></pre></td></tr></table></figure>\n\n<p>所以这个函数的<strong>功能</strong>就是</p>\n<blockquote>\n<p>1.从字符串中获取数据，<br>2.然后赋给格式化符的对应的变量。</p>\n</blockquote>\n<p>sscanf不需要我们自己输入，在字符串中有就好。</p>\n<p>所以更多的惯例自己去菜鸟教程上查就好，<br><strong>建议立即行动，不然一定会忘记。</strong></p>\n<h2 id=\"二-关于我们的输入输出\"><a href=\"#二-关于我们的输入输出\" class=\"headerlink\" title=\"二.关于我们的输入输出\"></a>二.关于我们的输入输出</h2><blockquote>\n<p>以下内容取自空梦大大的博客<br><a href=\"https://kmar.top/posts/51c9b0a0/\">如何理解c&#x2F;c++中的输入&#x2F;输出函数？ | 山岳库博</a><br>我们这里梳理的是，我们这个阶段可以用到的符号。</p>\n</blockquote>\n<h3 id=\"1-关于格式化符与printf、scanf修饰符\"><a href=\"#1-关于格式化符与printf、scanf修饰符\" class=\"headerlink\" title=\"1.关于格式化符与printf、scanf修饰符\"></a>1.关于格式化符与printf、scanf修饰符</h3><p>格式化符我们需要知道的如下，之前在题中也出过。<br>    1. %d&#x2F;%lf&#x2F;%f&#x2F;%c 整数、字符、浮点数<br>    2. %s 字符串输入与输出。<br>    3. %x&#x2F;%X - 十六进制整数 或者 %o 八进制整数<br>    4. %%两个百分号一起用可以输出%号，相当于转义了。<br>%%<br>掌握了这些我们就不太用怕需要的数据表示不出来了。<br>现在看来老师教的还是不是很够，第一个都用过时了。</p>\n<h2 id=\"printf修饰符\"><a href=\"#printf修饰符\" class=\"headerlink\" title=\"printf修饰符\"></a>printf修饰符</h2><ol>\n<li>加数字，右对齐字符宽度。-实例：<code>printf(&quot;%4d&quot;,n);</code></li>\n<li>.数字，对于小数表示小数后位数，比如<code>%.3lf</code><br> 对于字符串是打印字符的最大数量<br> 只使用点%.f与%.0f相同。</li>\n<li>使用ll表示long long <code>%lld</code></li>\n<li>使用l，对于整型表示long int，对于浮点型表示double</li>\n<li>各种标记：<ol>\n<li>在数字前加符号为左对齐</li>\n<li><ul>\n<li>是为了把在有符号数开头加’+’或者’-‘。</li>\n</ul>\n</li>\n<li>加0对于多于的字段宽度填充0，如<code>%04d</code><br> 对于1，返回的是0001.<br> 4.加入 * 决定填入数字，<br> 需要在参数列表中新加入一个变量。<br>  常见形式为<code>%*lf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"scanf修饰符\"><a href=\"#scanf修饰符\" class=\"headerlink\" title=\"scanf修饰符\"></a>scanf修饰符</h2><ol>\n<li><ul>\n<li>只读取不赋值，这对于无用数据是有用处的 形式为类似<code>%*d</code><br> d可以任意换，以下的所有实例中的d都可以换成其他类型</li>\n</ul>\n</li>\n<li>同样的加数字为取字段的宽，有多长取多长，别的截掉。</li>\n</ol>\n<p>这就是最近关于输入输出想和大家分享的内容。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>从字符串那里，包括之前听C语言群里大佬说<br>也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。<br>今天也一并分享给大家。</p>\n<h2 id=\"1-stdio-h中的更多的函数\"><a href=\"#1-stdio-h中的更多的函数\" class=\"headerlink\" title=\"1.stdio.h中的更多的函数\"></a>1.stdio.h中的更多的函数</h2><p>(关于stream与参数列表的不讲，还没学到。)</p>\n<p>类似的，应该你们也听说过，这里列一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sprintf</span><span class=\"params\">(<span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一-函数定义读法\"><a href=\"#一-函数定义读法\" class=\"headerlink\" title=\"一.函数定义读法\"></a>一.函数定义读法</h3><p>这里是纯纯的函数函数定义，看起来可能很抽象，<br><strong>没关系，我会出手。</strong></p>\n<p>总体上一讲，以后见到<strong>前面带f</strong>的一般是有关<code>stream</code>的<br><strong>带v的</strong>一般是有关<code>参数列表</code>的，<br>以后看到学长写类似的函数就知道该多学习了!😂</p>\n<p>对于以后看这样的函数定义，首先看[返回值类型]，<br>一般是，返回处理的结果或者返回一个数值（int&#x2F;double)</p>\n<p>然后如果看不懂函数名的话，<br>先看[括号中的形式参数]，知道我们需要输入的是什么东西。</p>\n<blockquote>\n<p>比如这两个函数中<br><strong>const</strong>是数据类型的修饰符，表示常量。<br>char* 表示字符串、后面的是形式参数名，不需要管。</p>\n</blockquote>\n<p>最后，通过[看实例]与函数的[概述]得知函数的作用。<br>在菜鸟教程里都一条一条地列出来的，每一条都有实例。</p>\n<p>在最后一篇文章的最后会给大家列出来用过的这些网站。</p>\n<h3 id=\"二-浅谈没讲过的sscanf-函数\"><a href=\"#二-浅谈没讲过的sscanf-函数\" class=\"headerlink\" title=\"二.浅谈没讲过的sscanf()函数\"></a>二.浅谈没讲过的sscanf()函数</h3><p>上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。<br>现在就来讲一讲相对的sscanf函数。</p>\n<p>不多说，直接上函数定义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>首先看<strong>返回值</strong><br>这个函数返回的是一个数值，也就像scanf一样<br>函数返回的是成功赋值与匹配的个数。<br>如果到达文件末尾或者错误返回EOF。</p>\n<p>然后看<strong>形参</strong><br>获取的是字符串常量(<code>const char *str</code>)，<br>    这个字符串，是包含着我们想要赋值数据的字符串。<br>写入形式(<code>const char *format</code>)<br>    写入形式相当于格式化符，相当于赋值的顺序）<br>    尽量不要加新的形式。<br>与参数列表(<code>...</code>)。<br>    对应之前的格式化符。<br>关于参数列表，其实简单的说<br>就是我们printf中标准符后边逗号中的内容<br>见下方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\"><span class=\"comment\">//后面的a,b,c就是参数列表</span></span><br><span class=\"line\"><span class=\"comment\">//%d的这个字符串就是写入形式的一种形式</span></span><br></pre></td></tr></table></figure>\n\n<p>所以这个函数的<strong>功能</strong>就是</p>\n<blockquote>\n<p>1.从字符串中获取数据，<br>2.然后赋给格式化符的对应的变量。</p>\n</blockquote>\n<p>sscanf不需要我们自己输入，在字符串中有就好。</p>\n<p>所以更多的惯例自己去菜鸟教程上查就好，<br><strong>建议立即行动，不然一定会忘记。</strong></p>\n<h2 id=\"二-关于我们的输入输出\"><a href=\"#二-关于我们的输入输出\" class=\"headerlink\" title=\"二.关于我们的输入输出\"></a>二.关于我们的输入输出</h2><blockquote>\n<p>以下内容取自空梦大大的博客<br><a href=\"https://kmar.top/posts/51c9b0a0/\">如何理解c&#x2F;c++中的输入&#x2F;输出函数？ | 山岳库博</a><br>我们这里梳理的是，我们这个阶段可以用到的符号。</p>\n</blockquote>\n<h3 id=\"1-关于格式化符与printf、scanf修饰符\"><a href=\"#1-关于格式化符与printf、scanf修饰符\" class=\"headerlink\" title=\"1.关于格式化符与printf、scanf修饰符\"></a>1.关于格式化符与printf、scanf修饰符</h3><p>格式化符我们需要知道的如下，之前在题中也出过。<br>    1. %d&#x2F;%lf&#x2F;%f&#x2F;%c 整数、字符、浮点数<br>    2. %s 字符串输入与输出。<br>    3. %x&#x2F;%X - 十六进制整数 或者 %o 八进制整数<br>    4. %%两个百分号一起用可以输出%号，相当于转义了。<br>%%<br>掌握了这些我们就不太用怕需要的数据表示不出来了。<br>现在看来老师教的还是不是很够，第一个都用过时了。</p>\n<h2 id=\"printf修饰符\"><a href=\"#printf修饰符\" class=\"headerlink\" title=\"printf修饰符\"></a>printf修饰符</h2><ol>\n<li>加数字，右对齐字符宽度。-实例：<code>printf(&quot;%4d&quot;,n);</code></li>\n<li>.数字，对于小数表示小数后位数，比如<code>%.3lf</code><br> 对于字符串是打印字符的最大数量<br> 只使用点%.f与%.0f相同。</li>\n<li>使用ll表示long long <code>%lld</code></li>\n<li>使用l，对于整型表示long int，对于浮点型表示double</li>\n<li>各种标记：<ol>\n<li>在数字前加符号为左对齐</li>\n<li><ul>\n<li>是为了把在有符号数开头加’+’或者’-‘。</li>\n</ul>\n</li>\n<li>加0对于多于的字段宽度填充0，如<code>%04d</code><br> 对于1，返回的是0001.<br> 4.加入 * 决定填入数字，<br> 需要在参数列表中新加入一个变量。<br>  常见形式为<code>%*lf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"scanf修饰符\"><a href=\"#scanf修饰符\" class=\"headerlink\" title=\"scanf修饰符\"></a>scanf修饰符</h2><ol>\n<li><ul>\n<li>只读取不赋值，这对于无用数据是有用处的 形式为类似<code>%*d</code><br> d可以任意换，以下的所有实例中的d都可以换成其他类型</li>\n</ul>\n</li>\n<li>同样的加数字为取字段的宽，有多长取多长，别的截掉。</li>\n</ol>\n<p>这就是最近关于输入输出想和大家分享的内容。</p>\n"},{"_content":"昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归\n我还需要再联系联系，不太能独立写出来。\n那就整理一下昨天晚上听到的一些点，\n\n## qsort函数的用法以及swap函数\n> 首先声明，需要添加stdlib库\n\n上定义\n```C\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\n```\n\n这个定义有点太复杂，我们可以把它特殊化处理\n\n```C\nvoid qsort(排序数组,排序个数，sizeof(数组数据类型)，排序规则(cmp));\n```\n\n这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。\n\n因为我们学习过全局变量，所以这个注意事项也好懂\n\n> 这个数组必须是全局的，即必须在预处理之后，主函数之前定义。\n\n因为这样数组才对qsort函数“可见“。\n\ncmp函数需要自己写，写的思路用到了指针，不过照抄就好。\n\n```C\nint cmp (const void * a, const void * b)  \n{  \n   return ( *(int*)a - *(int*)b );  \n}\n//先强转为对应类型的指针，然后再相减，\n//a-b为从小到大，b-a为从大到小\n```\n\n如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。\n\n所以这就是qsort库函数的用法。\n\n还有是swap函数，可以在我们写排序的时候用到。\n可以交换数组内的数据，非常好用。\n形式如下\n```C\nswap(&a,&b);\n```\n到用的时候可以把a和b换成数组的元素，如array[1].\n可以便捷地实现交换。\n这个函数实际上自己写也可以。\n\n这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。\n\n\n\n# 总体网站集合\n>1.菜鸟教程 www.runoob.com\n>2.空梦博客 www.kmar.top\n>3.昨日学长的B站号 [@zyoobn]\n>\t学长的CSDN [@郑轻大不知名]\n>4.编程爱好者协会 www.godyu.com\n>\tB站直播号 [@郑轻编程爱好者协会]\n\n看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了\n那网站上没法发帖子，所以我还是自己想办法建个博客吧。\n","source":"新建文件夹/对于昨天晚上学长讲的内容的复盘.md","raw":"昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归\n我还需要再联系联系，不太能独立写出来。\n那就整理一下昨天晚上听到的一些点，\n\n## qsort函数的用法以及swap函数\n> 首先声明，需要添加stdlib库\n\n上定义\n```C\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\n```\n\n这个定义有点太复杂，我们可以把它特殊化处理\n\n```C\nvoid qsort(排序数组,排序个数，sizeof(数组数据类型)，排序规则(cmp));\n```\n\n这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。\n\n因为我们学习过全局变量，所以这个注意事项也好懂\n\n> 这个数组必须是全局的，即必须在预处理之后，主函数之前定义。\n\n因为这样数组才对qsort函数“可见“。\n\ncmp函数需要自己写，写的思路用到了指针，不过照抄就好。\n\n```C\nint cmp (const void * a, const void * b)  \n{  \n   return ( *(int*)a - *(int*)b );  \n}\n//先强转为对应类型的指针，然后再相减，\n//a-b为从小到大，b-a为从大到小\n```\n\n如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。\n\n所以这就是qsort库函数的用法。\n\n还有是swap函数，可以在我们写排序的时候用到。\n可以交换数组内的数据，非常好用。\n形式如下\n```C\nswap(&a,&b);\n```\n到用的时候可以把a和b换成数组的元素，如array[1].\n可以便捷地实现交换。\n这个函数实际上自己写也可以。\n\n这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。\n\n\n\n# 总体网站集合\n>1.菜鸟教程 www.runoob.com\n>2.空梦博客 www.kmar.top\n>3.昨日学长的B站号 [@zyoobn]\n>\t学长的CSDN [@郑轻大不知名]\n>4.编程爱好者协会 www.godyu.com\n>\tB站直播号 [@郑轻编程爱好者协会]\n\n看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了\n那网站上没法发帖子，所以我还是自己想办法建个博客吧。\n","date":"2023-11-20T01:48:57.748Z","updated":"2023-11-19T05:08:43.887Z","path":"新建文件夹/对于昨天晚上学长讲的内容的复盘.html","title":"","comments":1,"layout":"page","_id":"clp6949eg0009h4ue5xlr7hcq","content":"<p>昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归<br>我还需要再联系联系，不太能独立写出来。<br>那就整理一下昨天晚上听到的一些点，</p>\n<h2 id=\"qsort函数的用法以及swap函数\"><a href=\"#qsort函数的用法以及swap函数\" class=\"headerlink\" title=\"qsort函数的用法以及swap函数\"></a>qsort函数的用法以及swap函数</h2><blockquote>\n<p>首先声明，需要添加stdlib库</p>\n</blockquote>\n<p>上定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">void</span> *base, <span class=\"type\">size_t</span> nitems, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> (*compar)(<span class=\"type\">const</span> <span class=\"type\">void</span> *, <span class=\"type\">const</span> <span class=\"type\">void</span>*))</span></span><br></pre></td></tr></table></figure>\n\n<p>这个定义有点太复杂，我们可以把它特殊化处理</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(排序数组,排序个数，<span class=\"keyword\">sizeof</span>(数组数据类型)，排序规则(cmp))</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。</p>\n<p>因为我们学习过全局变量，所以这个注意事项也好懂</p>\n<blockquote>\n<p>这个数组必须是全局的，即必须在预处理之后，主函数之前定义。</p>\n</blockquote>\n<p>因为这样数组才对qsort函数“可见“。</p>\n<p>cmp函数需要自己写，写的思路用到了指针，不过照抄就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cmp</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> * a, <span class=\"type\">const</span> <span class=\"type\">void</span> * b)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> ( *(<span class=\"type\">int</span>*)a - *(<span class=\"type\">int</span>*)b );  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先强转为对应类型的指针，然后再相减，</span></span><br><span class=\"line\"><span class=\"comment\">//a-b为从小到大，b-a为从大到小</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。</p>\n<p>所以这就是qsort库函数的用法。</p>\n<p>还有是swap函数，可以在我们写排序的时候用到。<br>可以交换数组内的数据，非常好用。<br>形式如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>\n<p>到用的时候可以把a和b换成数组的元素，如array[1].<br>可以便捷地实现交换。<br>这个函数实际上自己写也可以。</p>\n<p>这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。</p>\n<h1 id=\"总体网站集合\"><a href=\"#总体网站集合\" class=\"headerlink\" title=\"总体网站集合\"></a>总体网站集合</h1><blockquote>\n<p>1.菜鸟教程 <a href=\"http://www.runoob.com/\">www.runoob.com</a><br>2.空梦博客 <a href=\"http://www.kmar.top/\">www.kmar.top</a><br>3.昨日学长的B站号 [@zyoobn]<br>学长的CSDN [@郑轻大不知名]<br>4.编程爱好者协会 <a href=\"http://www.godyu.com/\">www.godyu.com</a><br>B站直播号 [@郑轻编程爱好者协会]</p>\n</blockquote>\n<p>看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了<br>那网站上没法发帖子，所以我还是自己想办法建个博客吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归<br>我还需要再联系联系，不太能独立写出来。<br>那就整理一下昨天晚上听到的一些点，</p>\n<h2 id=\"qsort函数的用法以及swap函数\"><a href=\"#qsort函数的用法以及swap函数\" class=\"headerlink\" title=\"qsort函数的用法以及swap函数\"></a>qsort函数的用法以及swap函数</h2><blockquote>\n<p>首先声明，需要添加stdlib库</p>\n</blockquote>\n<p>上定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">void</span> *base, <span class=\"type\">size_t</span> nitems, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> (*compar)(<span class=\"type\">const</span> <span class=\"type\">void</span> *, <span class=\"type\">const</span> <span class=\"type\">void</span>*))</span></span><br></pre></td></tr></table></figure>\n\n<p>这个定义有点太复杂，我们可以把它特殊化处理</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(排序数组,排序个数，<span class=\"keyword\">sizeof</span>(数组数据类型)，排序规则(cmp))</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。</p>\n<p>因为我们学习过全局变量，所以这个注意事项也好懂</p>\n<blockquote>\n<p>这个数组必须是全局的，即必须在预处理之后，主函数之前定义。</p>\n</blockquote>\n<p>因为这样数组才对qsort函数“可见“。</p>\n<p>cmp函数需要自己写，写的思路用到了指针，不过照抄就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cmp</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> * a, <span class=\"type\">const</span> <span class=\"type\">void</span> * b)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> ( *(<span class=\"type\">int</span>*)a - *(<span class=\"type\">int</span>*)b );  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先强转为对应类型的指针，然后再相减，</span></span><br><span class=\"line\"><span class=\"comment\">//a-b为从小到大，b-a为从大到小</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。</p>\n<p>所以这就是qsort库函数的用法。</p>\n<p>还有是swap函数，可以在我们写排序的时候用到。<br>可以交换数组内的数据，非常好用。<br>形式如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>\n<p>到用的时候可以把a和b换成数组的元素，如array[1].<br>可以便捷地实现交换。<br>这个函数实际上自己写也可以。</p>\n<p>这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。</p>\n<h1 id=\"总体网站集合\"><a href=\"#总体网站集合\" class=\"headerlink\" title=\"总体网站集合\"></a>总体网站集合</h1><blockquote>\n<p>1.菜鸟教程 <a href=\"http://www.runoob.com/\">www.runoob.com</a><br>2.空梦博客 <a href=\"http://www.kmar.top/\">www.kmar.top</a><br>3.昨日学长的B站号 [@zyoobn]<br>学长的CSDN [@郑轻大不知名]<br>4.编程爱好者协会 <a href=\"http://www.godyu.com/\">www.godyu.com</a><br>B站直播号 [@郑轻编程爱好者协会]</p>\n</blockquote>\n<p>看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了<br>那网站上没法发帖子，所以我还是自己想办法建个博客吧。</p>\n"},{"_content":"最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题\n今天学习了一些关于字符串、输入输出函数的知识，\n以及整理了一下昨天晚上直播的重点内容 @21级学长zyb\n希望能够帮到大家\n\n## 1.千奇百怪的字符串处理函数\n\n>首先声明，此处使用的函数（如图），需要加入**string.h**标准库\n>加入方式如下\n\n```C\n#include <string.h>\n```\n\n![[Pasted image 20231119081701.png]]\n\n\t 参考来自菜鸟教程\n\t(https://www.runoob.com/cprogramming/c-strings.html)\n\n这是我们在平时做题时常用的几个函数，比较易懂。\n除此之外我还在string.h中为大家多找了几个关于**搜索匹配字符**的。\n是下面这两个\n\n![[屏幕截图 2023-11-19 082223.png]]\n![[Pasted image 20231119082242.png]]\n（看起来可能参数与返回值都有点吓人，但也就那样。）\n\n\t 参考来自菜鸟教程\n\t (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n\n相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了\n要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：\n\n```C\n\t//定义方式\n\tchar 标识符[字符串长度];\n\t//标识符即为名字，字符串长度可以省略。\n\n\t//为字符串赋值的方式\n\tchar string[] = \"I'm a string!\";   //第一种方法\n\tchar string2[6] = \"Hello!\";        //第二种方法\n\t\n\tchar string3[10];                  //第三种方法\n\tgets(string3);\n\n\tint n;\n\tscanf(\"%d\",&n);                    //第四种，应该是最常用的一种方法\n\tchar string[1000];\n\tfor(int i = 0;i < n;i++)\n\t\tscanf(\"%c\",&string[i]);\n\n\t//sprintf(被写入字符串,\"写入字符串\"，格式化符列表)\n\t//括号的后半部分与printf类似，但是它不是为了输出的。\n\tint n;\n\tscanf(\"%d\",&n);\n\tsprintf(string1,\"%d\",n);\n\n\t//字符串输出的方式\n\tputs(string);\n\n\tfor(int i = 0;i < n;i++)\n\t\tputchar(string[i]);\n\t\t//此处n也可以不定义，在使用第一或者第二种方式时\n\t\t//可以使用strlen函数或者sizeof运算符 - 1来代替\n\t\t//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不\n\n\t\n```\n\n所谓的**字符串**，其实就是[由字符组成，以’ \\\\0‘为结束的一维数组]。\n’\\\\0'标志着字符串输出的结束，\\是**转义符号**，为了提示它不是数字0\n\n>注意，对于字符串的scanf都不需要加取地址符&。\n>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。\n>和字符串本身无关。\n\n上面的函数给出了几种给字符串赋值的方式，\n我觉得你们可能不太好理解的是以下内容：\n+ gets()与puts()函数的用法\n+ 1000是可以随机的吗\n+ strlen函数以及sizeof的用法\n\n这里简单一说\n1. gets()就是获取一段字符串，在括号中需要加入参数，\n\t参数为字符串（字符数组）\n\tputs是把字符串打印出来\n\t其实这两个相似于字符的getchar与putchar\n2. 1000看题目要求，看字符串的最大容量。\n3. strlen是返回字符串的长度，不包含结尾的\\\\0符号，\n\tsizeof运算符对于字符串来说，是返回包括\\\\0的长度。\n\t所以sizeof要减一。\n\n下面再说一下这些函数的效果。（看图也可。）\n\n> 1.strcpy(s1,s2);\n\ns1与s2是形式参数，代表两个字符串，\n通过这个函数我们能够覆盖式地把s2复制粘贴到s1上\n甚至长度不允许也没关系。\n\n关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。\n对于很多的函数是可以通过这种方式记忆的\n其实用多了就自然记住了。\n\n> 2.strcat(s1,s2);\n\ns1,s2作用不再赘述。\n把s2连接到s1的末尾，改变s1。\n可以通过输出看s1的变化，\n\n> 3.strlen(s1)\n> 返回s1的去掉结尾符号的长度，已经讲过。\n\n> 4.strcmp(s1,s2);\n> 从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。\n> 昨晚在直播中学长讲过了。\n> 大小与返回值的关系请见图。\n\n> 5.strpbrk(const char* str1, const char* str2);\n\n\t关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n\n分析第一个字符串的字符，与第二个字符串内的字符比对\n只要找出两个字符串都包含的字符就返回那个字符。\n\n\t很好理解。\n\t比如，\"AABB\"与\"BCDE\"，就会返回B。\n\n> 6.strspn(const char* str1, const char* str2);\n\n也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。\n返回那个字符的下标，注意不是字符。\n\n想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，\n比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。\n这在我刚开始学习C语言的时候就感觉到了。\nPython中的字符串处理有很多的内建函数，处理起来很方便。\n但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。\n所以学好字符串还是很有必要的。\n\n还有一个是 @空梦Kmar 的建议\n尽量使用C标准库函数，这样能够极大地优化程序的效率。\n详细的建议在他的博客里，第一条就是优先使用库函数。\n[关于C语言编码的一些建议 | 山岳库博 (kmar.top)](https://kmar.top/posts/51979312/)\n包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题\n还有用于交换数组排序的swap函数。\n所以学习C语言标准库而不是自己写还是很好的，而且很省事。\n\n\n","source":"新建文件夹/基于最近两次直播的知识调研.md","raw":"最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题\n今天学习了一些关于字符串、输入输出函数的知识，\n以及整理了一下昨天晚上直播的重点内容 @21级学长zyb\n希望能够帮到大家\n\n## 1.千奇百怪的字符串处理函数\n\n>首先声明，此处使用的函数（如图），需要加入**string.h**标准库\n>加入方式如下\n\n```C\n#include <string.h>\n```\n\n![[Pasted image 20231119081701.png]]\n\n\t 参考来自菜鸟教程\n\t(https://www.runoob.com/cprogramming/c-strings.html)\n\n这是我们在平时做题时常用的几个函数，比较易懂。\n除此之外我还在string.h中为大家多找了几个关于**搜索匹配字符**的。\n是下面这两个\n\n![[屏幕截图 2023-11-19 082223.png]]\n![[Pasted image 20231119082242.png]]\n（看起来可能参数与返回值都有点吓人，但也就那样。）\n\n\t 参考来自菜鸟教程\n\t (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n\n相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了\n要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：\n\n```C\n\t//定义方式\n\tchar 标识符[字符串长度];\n\t//标识符即为名字，字符串长度可以省略。\n\n\t//为字符串赋值的方式\n\tchar string[] = \"I'm a string!\";   //第一种方法\n\tchar string2[6] = \"Hello!\";        //第二种方法\n\t\n\tchar string3[10];                  //第三种方法\n\tgets(string3);\n\n\tint n;\n\tscanf(\"%d\",&n);                    //第四种，应该是最常用的一种方法\n\tchar string[1000];\n\tfor(int i = 0;i < n;i++)\n\t\tscanf(\"%c\",&string[i]);\n\n\t//sprintf(被写入字符串,\"写入字符串\"，格式化符列表)\n\t//括号的后半部分与printf类似，但是它不是为了输出的。\n\tint n;\n\tscanf(\"%d\",&n);\n\tsprintf(string1,\"%d\",n);\n\n\t//字符串输出的方式\n\tputs(string);\n\n\tfor(int i = 0;i < n;i++)\n\t\tputchar(string[i]);\n\t\t//此处n也可以不定义，在使用第一或者第二种方式时\n\t\t//可以使用strlen函数或者sizeof运算符 - 1来代替\n\t\t//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不\n\n\t\n```\n\n所谓的**字符串**，其实就是[由字符组成，以’ \\\\0‘为结束的一维数组]。\n’\\\\0'标志着字符串输出的结束，\\是**转义符号**，为了提示它不是数字0\n\n>注意，对于字符串的scanf都不需要加取地址符&。\n>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。\n>和字符串本身无关。\n\n上面的函数给出了几种给字符串赋值的方式，\n我觉得你们可能不太好理解的是以下内容：\n+ gets()与puts()函数的用法\n+ 1000是可以随机的吗\n+ strlen函数以及sizeof的用法\n\n这里简单一说\n1. gets()就是获取一段字符串，在括号中需要加入参数，\n\t参数为字符串（字符数组）\n\tputs是把字符串打印出来\n\t其实这两个相似于字符的getchar与putchar\n2. 1000看题目要求，看字符串的最大容量。\n3. strlen是返回字符串的长度，不包含结尾的\\\\0符号，\n\tsizeof运算符对于字符串来说，是返回包括\\\\0的长度。\n\t所以sizeof要减一。\n\n下面再说一下这些函数的效果。（看图也可。）\n\n> 1.strcpy(s1,s2);\n\ns1与s2是形式参数，代表两个字符串，\n通过这个函数我们能够覆盖式地把s2复制粘贴到s1上\n甚至长度不允许也没关系。\n\n关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。\n对于很多的函数是可以通过这种方式记忆的\n其实用多了就自然记住了。\n\n> 2.strcat(s1,s2);\n\ns1,s2作用不再赘述。\n把s2连接到s1的末尾，改变s1。\n可以通过输出看s1的变化，\n\n> 3.strlen(s1)\n> 返回s1的去掉结尾符号的长度，已经讲过。\n\n> 4.strcmp(s1,s2);\n> 从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。\n> 昨晚在直播中学长讲过了。\n> 大小与返回值的关系请见图。\n\n> 5.strpbrk(const char* str1, const char* str2);\n\n\t关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n\n分析第一个字符串的字符，与第二个字符串内的字符比对\n只要找出两个字符串都包含的字符就返回那个字符。\n\n\t很好理解。\n\t比如，\"AABB\"与\"BCDE\"，就会返回B。\n\n> 6.strspn(const char* str1, const char* str2);\n\n也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。\n返回那个字符的下标，注意不是字符。\n\n想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，\n比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。\n这在我刚开始学习C语言的时候就感觉到了。\nPython中的字符串处理有很多的内建函数，处理起来很方便。\n但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。\n所以学好字符串还是很有必要的。\n\n还有一个是 @空梦Kmar 的建议\n尽量使用C标准库函数，这样能够极大地优化程序的效率。\n详细的建议在他的博客里，第一条就是优先使用库函数。\n[关于C语言编码的一些建议 | 山岳库博 (kmar.top)](https://kmar.top/posts/51979312/)\n包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题\n还有用于交换数组排序的swap函数。\n所以学习C语言标准库而不是自己写还是很好的，而且很省事。\n\n\n","date":"2023-11-20T01:47:48.404Z","updated":"2023-11-19T03:51:29.134Z","path":"新建文件夹/基于最近两次直播的知识调研.html","title":"","comments":1,"layout":"page","_id":"clp6949eh000dh4ue8jrfdz3s","content":"<p>最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题<br>今天学习了一些关于字符串、输入输出函数的知识，<br>以及整理了一下昨天晚上直播的重点内容 @21级学长zyb<br>希望能够帮到大家</p>\n<h2 id=\"1-千奇百怪的字符串处理函数\"><a href=\"#1-千奇百怪的字符串处理函数\" class=\"headerlink\" title=\"1.千奇百怪的字符串处理函数\"></a>1.千奇百怪的字符串处理函数</h2><blockquote>\n<p>首先声明，此处使用的函数（如图），需要加入<strong>string.h</strong>标准库<br>加入方式如下</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>![[Pasted image 20231119081701.png]]</p>\n<pre><code> 参考来自菜鸟教程\n(https://www.runoob.com/cprogramming/c-strings.html)\n</code></pre>\n<p>这是我们在平时做题时常用的几个函数，比较易懂。<br>除此之外我还在string.h中为大家多找了几个关于<strong>搜索匹配字符</strong>的。<br>是下面这两个</p>\n<p>![[屏幕截图 2023-11-19 082223.png]]<br>![[Pasted image 20231119082242.png]]<br>（看起来可能参数与返回值都有点吓人，但也就那样。）</p>\n<pre><code> 参考来自菜鸟教程\n (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n</code></pre>\n<p>相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了<br>要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> 标识符[字符串长度];</span><br><span class=\"line\"><span class=\"comment\">//标识符即为名字，字符串长度可以省略。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为字符串赋值的方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[] = <span class=\"string\">&quot;I&#x27;m a string!&quot;</span>;   <span class=\"comment\">//第一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> string2[<span class=\"number\">6</span>] = <span class=\"string\">&quot;Hello!&quot;</span>;        <span class=\"comment\">//第二种方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> string3[<span class=\"number\">10</span>];                  <span class=\"comment\">//第三种方法</span></span><br><span class=\"line\">gets(string3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);                    <span class=\"comment\">//第四种，应该是最常用的一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sprintf(被写入字符串,&quot;写入字符串&quot;，格式化符列表)</span></span><br><span class=\"line\"><span class=\"comment\">//括号的后半部分与printf类似，但是它不是为了输出的。</span></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(string1,<span class=\"string\">&quot;%d&quot;</span>,n);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串输出的方式</span></span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"built_in\">string</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\">\t<span class=\"comment\">//此处n也可以不定义，在使用第一或者第二种方式时</span></span><br><span class=\"line\">\t<span class=\"comment\">//可以使用strlen函数或者sizeof运算符 - 1来代替</span></span><br><span class=\"line\">\t<span class=\"comment\">//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所谓的<strong>字符串</strong>，其实就是[由字符组成，以’ \\0‘为结束的一维数组]。<br>’\\0’标志着字符串输出的结束，\\是<strong>转义符号</strong>，为了提示它不是数字0</p>\n<blockquote>\n<p>注意，对于字符串的scanf都不需要加取地址符&amp;。<br>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。<br>和字符串本身无关。</p>\n</blockquote>\n<p>上面的函数给出了几种给字符串赋值的方式，<br>我觉得你们可能不太好理解的是以下内容：</p>\n<ul>\n<li>gets()与puts()函数的用法</li>\n<li>1000是可以随机的吗</li>\n<li>strlen函数以及sizeof的用法</li>\n</ul>\n<p>这里简单一说</p>\n<ol>\n<li>gets()就是获取一段字符串，在括号中需要加入参数，<br> 参数为字符串（字符数组）<br> puts是把字符串打印出来<br> 其实这两个相似于字符的getchar与putchar</li>\n<li>1000看题目要求，看字符串的最大容量。</li>\n<li>strlen是返回字符串的长度，不包含结尾的\\0符号，<br> sizeof运算符对于字符串来说，是返回包括\\0的长度。<br> 所以sizeof要减一。</li>\n</ol>\n<p>下面再说一下这些函数的效果。（看图也可。）</p>\n<blockquote>\n<p>1.strcpy(s1,s2);</p>\n</blockquote>\n<p>s1与s2是形式参数，代表两个字符串，<br>通过这个函数我们能够覆盖式地把s2复制粘贴到s1上<br>甚至长度不允许也没关系。</p>\n<p>关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。<br>对于很多的函数是可以通过这种方式记忆的<br>其实用多了就自然记住了。</p>\n<blockquote>\n<p>2.strcat(s1,s2);</p>\n</blockquote>\n<p>s1,s2作用不再赘述。<br>把s2连接到s1的末尾，改变s1。<br>可以通过输出看s1的变化，</p>\n<blockquote>\n<p>3.strlen(s1)<br>返回s1的去掉结尾符号的长度，已经讲过。</p>\n</blockquote>\n<blockquote>\n<p>4.strcmp(s1,s2);<br>从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。<br>昨晚在直播中学长讲过了。<br>大小与返回值的关系请见图。</p>\n</blockquote>\n<blockquote>\n<p>5.strpbrk(const char* str1, const char* str2);</p>\n</blockquote>\n<pre><code>关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n</code></pre>\n<p>分析第一个字符串的字符，与第二个字符串内的字符比对<br>只要找出两个字符串都包含的字符就返回那个字符。</p>\n<pre><code>很好理解。\n比如，&quot;AABB&quot;与&quot;BCDE&quot;，就会返回B。\n</code></pre>\n<blockquote>\n<p>6.strspn(const char* str1, const char* str2);</p>\n</blockquote>\n<p>也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。<br>返回那个字符的下标，注意不是字符。</p>\n<p>想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，<br>比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。<br>这在我刚开始学习C语言的时候就感觉到了。<br>Python中的字符串处理有很多的内建函数，处理起来很方便。<br>但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。<br>所以学好字符串还是很有必要的。</p>\n<p>还有一个是 @空梦Kmar 的建议<br>尽量使用C标准库函数，这样能够极大地优化程序的效率。<br>详细的建议在他的博客里，第一条就是优先使用库函数。<br><a href=\"https://kmar.top/posts/51979312/\">关于C语言编码的一些建议 | 山岳库博 (kmar.top)</a><br>包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题<br>还有用于交换数组排序的swap函数。<br>所以学习C语言标准库而不是自己写还是很好的，而且很省事。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题<br>今天学习了一些关于字符串、输入输出函数的知识，<br>以及整理了一下昨天晚上直播的重点内容 @21级学长zyb<br>希望能够帮到大家</p>\n<h2 id=\"1-千奇百怪的字符串处理函数\"><a href=\"#1-千奇百怪的字符串处理函数\" class=\"headerlink\" title=\"1.千奇百怪的字符串处理函数\"></a>1.千奇百怪的字符串处理函数</h2><blockquote>\n<p>首先声明，此处使用的函数（如图），需要加入<strong>string.h</strong>标准库<br>加入方式如下</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>![[Pasted image 20231119081701.png]]</p>\n<pre><code> 参考来自菜鸟教程\n(https://www.runoob.com/cprogramming/c-strings.html)\n</code></pre>\n<p>这是我们在平时做题时常用的几个函数，比较易懂。<br>除此之外我还在string.h中为大家多找了几个关于<strong>搜索匹配字符</strong>的。<br>是下面这两个</p>\n<p>![[屏幕截图 2023-11-19 082223.png]]<br>![[Pasted image 20231119082242.png]]<br>（看起来可能参数与返回值都有点吓人，但也就那样。）</p>\n<pre><code> 参考来自菜鸟教程\n (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n</code></pre>\n<p>相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了<br>要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> 标识符[字符串长度];</span><br><span class=\"line\"><span class=\"comment\">//标识符即为名字，字符串长度可以省略。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为字符串赋值的方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[] = <span class=\"string\">&quot;I&#x27;m a string!&quot;</span>;   <span class=\"comment\">//第一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> string2[<span class=\"number\">6</span>] = <span class=\"string\">&quot;Hello!&quot;</span>;        <span class=\"comment\">//第二种方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> string3[<span class=\"number\">10</span>];                  <span class=\"comment\">//第三种方法</span></span><br><span class=\"line\">gets(string3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);                    <span class=\"comment\">//第四种，应该是最常用的一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sprintf(被写入字符串,&quot;写入字符串&quot;，格式化符列表)</span></span><br><span class=\"line\"><span class=\"comment\">//括号的后半部分与printf类似，但是它不是为了输出的。</span></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(string1,<span class=\"string\">&quot;%d&quot;</span>,n);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串输出的方式</span></span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"built_in\">string</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\">\t<span class=\"comment\">//此处n也可以不定义，在使用第一或者第二种方式时</span></span><br><span class=\"line\">\t<span class=\"comment\">//可以使用strlen函数或者sizeof运算符 - 1来代替</span></span><br><span class=\"line\">\t<span class=\"comment\">//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所谓的<strong>字符串</strong>，其实就是[由字符组成，以’ \\0‘为结束的一维数组]。<br>’\\0’标志着字符串输出的结束，\\是<strong>转义符号</strong>，为了提示它不是数字0</p>\n<blockquote>\n<p>注意，对于字符串的scanf都不需要加取地址符&amp;。<br>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。<br>和字符串本身无关。</p>\n</blockquote>\n<p>上面的函数给出了几种给字符串赋值的方式，<br>我觉得你们可能不太好理解的是以下内容：</p>\n<ul>\n<li>gets()与puts()函数的用法</li>\n<li>1000是可以随机的吗</li>\n<li>strlen函数以及sizeof的用法</li>\n</ul>\n<p>这里简单一说</p>\n<ol>\n<li>gets()就是获取一段字符串，在括号中需要加入参数，<br> 参数为字符串（字符数组）<br> puts是把字符串打印出来<br> 其实这两个相似于字符的getchar与putchar</li>\n<li>1000看题目要求，看字符串的最大容量。</li>\n<li>strlen是返回字符串的长度，不包含结尾的\\0符号，<br> sizeof运算符对于字符串来说，是返回包括\\0的长度。<br> 所以sizeof要减一。</li>\n</ol>\n<p>下面再说一下这些函数的效果。（看图也可。）</p>\n<blockquote>\n<p>1.strcpy(s1,s2);</p>\n</blockquote>\n<p>s1与s2是形式参数，代表两个字符串，<br>通过这个函数我们能够覆盖式地把s2复制粘贴到s1上<br>甚至长度不允许也没关系。</p>\n<p>关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。<br>对于很多的函数是可以通过这种方式记忆的<br>其实用多了就自然记住了。</p>\n<blockquote>\n<p>2.strcat(s1,s2);</p>\n</blockquote>\n<p>s1,s2作用不再赘述。<br>把s2连接到s1的末尾，改变s1。<br>可以通过输出看s1的变化，</p>\n<blockquote>\n<p>3.strlen(s1)<br>返回s1的去掉结尾符号的长度，已经讲过。</p>\n</blockquote>\n<blockquote>\n<p>4.strcmp(s1,s2);<br>从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。<br>昨晚在直播中学长讲过了。<br>大小与返回值的关系请见图。</p>\n</blockquote>\n<blockquote>\n<p>5.strpbrk(const char* str1, const char* str2);</p>\n</blockquote>\n<pre><code>关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n</code></pre>\n<p>分析第一个字符串的字符，与第二个字符串内的字符比对<br>只要找出两个字符串都包含的字符就返回那个字符。</p>\n<pre><code>很好理解。\n比如，&quot;AABB&quot;与&quot;BCDE&quot;，就会返回B。\n</code></pre>\n<blockquote>\n<p>6.strspn(const char* str1, const char* str2);</p>\n</blockquote>\n<p>也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。<br>返回那个字符的下标，注意不是字符。</p>\n<p>想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，<br>比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。<br>这在我刚开始学习C语言的时候就感觉到了。<br>Python中的字符串处理有很多的内建函数，处理起来很方便。<br>但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。<br>所以学好字符串还是很有必要的。</p>\n<p>还有一个是 @空梦Kmar 的建议<br>尽量使用C标准库函数，这样能够极大地优化程序的效率。<br>详细的建议在他的博客里，第一条就是优先使用库函数。<br><a href=\"https://kmar.top/posts/51979312/\">关于C语言编码的一些建议 | 山岳库博 (kmar.top)</a><br>包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题<br>还有用于交换数组排序的swap函数。<br>所以学习C语言标准库而不是自己写还是很好的，而且很省事。</p>\n"}],"Post":[{"title":"OJ中的那些小丑行为","date":"2023-11-20T00:55:43.000Z","_content":"在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，\n我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。\n\n1. 编译错误引火线\n+ 复制到做题平台上时复制漏了一些东西。 -不必多讲。\n+ if语句后加了分号，导致出现对于else语句的错误。\n+ 变量重名，或者没改完一些变量的名字。\n+ 忘了一些分号。\n+ int mian（int main）或者stdio打错了\n+ 修改程序的时候忘了关黑框，有时候会不能编译新的文件。\n+ for循环中分号用成逗号\n+ 函数声明与定义部分，都需要对于形式变量的数据类型进行设置。\n\n2. 运行错误引火线\n+ for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加\n\t死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。\n\n3. 程序结果错误引火线\n+ scanf没有加取址符，printf加了取址符\n\tscanf不加的话，就不会对于变量进行赋值操作\n\tprintf加的话，返回的是变量的储存地址，垃圾数据。\n\n+ 部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）\n\t数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。\n\n+ 循环完一次的结果归零。\n\t有些循环比如while进行多实例检测的时候，会执行多个循环，\n\t如果某些计数的变量没有归零，会导致数据很离谱。\n\n+ 判断相等运算符 == 写成赋值运算符 = \n\t建议把变量放后面，值放前面，这样如果犯这个错的话会报错\n\n+ 赋值运算符=的结合性不清楚。\n\t用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。\n\n+ double转int的坑\n\tdouble储存的数据是近似值，切去小数点后有可能数据-1\n\t届时答案对不对完全看你运气。\n\n+ 数据类型对应的格式化符在更改变量类型的时候没有改变。\n\n+ switch语句中漏写了一个break。\n\t直接不受控地向下面的case进发，全部执行，直到遇到新的break。\n\n+ scanf中的格式加空格就算了，别的不要轻易加。\n+ \n+ 多字符输入的时候，注意处理回车与空格，一般用getchar来解决\n\n检查的思路：\n1. 首先基本问题，不要出编译错误，对于一些常见符号要打对\n\t比如，scanf中的&符号，各个语句后面的分号，大括号不要漏一边。\n2. 然后，看修改变量的时候有没有注意类型，\n相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改\n3. 接着看循环，\n对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环\n对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。\n看分支，看if语句的限定是否满足自己想要的条件，是否存在== 写成=的情况。\n看switch语句的break。\n4. 最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。","source":"_posts/OJ中的那些小丑行为.md","raw":"---\ntitle: OJ中的那些小丑行为\ndate: 2023-11-20 08:55:43\ntags: C语言学习\n---\n在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，\n我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。\n\n1. 编译错误引火线\n+ 复制到做题平台上时复制漏了一些东西。 -不必多讲。\n+ if语句后加了分号，导致出现对于else语句的错误。\n+ 变量重名，或者没改完一些变量的名字。\n+ 忘了一些分号。\n+ int mian（int main）或者stdio打错了\n+ 修改程序的时候忘了关黑框，有时候会不能编译新的文件。\n+ for循环中分号用成逗号\n+ 函数声明与定义部分，都需要对于形式变量的数据类型进行设置。\n\n2. 运行错误引火线\n+ for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加\n\t死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。\n\n3. 程序结果错误引火线\n+ scanf没有加取址符，printf加了取址符\n\tscanf不加的话，就不会对于变量进行赋值操作\n\tprintf加的话，返回的是变量的储存地址，垃圾数据。\n\n+ 部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）\n\t数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。\n\n+ 循环完一次的结果归零。\n\t有些循环比如while进行多实例检测的时候，会执行多个循环，\n\t如果某些计数的变量没有归零，会导致数据很离谱。\n\n+ 判断相等运算符 == 写成赋值运算符 = \n\t建议把变量放后面，值放前面，这样如果犯这个错的话会报错\n\n+ 赋值运算符=的结合性不清楚。\n\t用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。\n\n+ double转int的坑\n\tdouble储存的数据是近似值，切去小数点后有可能数据-1\n\t届时答案对不对完全看你运气。\n\n+ 数据类型对应的格式化符在更改变量类型的时候没有改变。\n\n+ switch语句中漏写了一个break。\n\t直接不受控地向下面的case进发，全部执行，直到遇到新的break。\n\n+ scanf中的格式加空格就算了，别的不要轻易加。\n+ \n+ 多字符输入的时候，注意处理回车与空格，一般用getchar来解决\n\n检查的思路：\n1. 首先基本问题，不要出编译错误，对于一些常见符号要打对\n\t比如，scanf中的&符号，各个语句后面的分号，大括号不要漏一边。\n2. 然后，看修改变量的时候有没有注意类型，\n相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改\n3. 接着看循环，\n对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环\n对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。\n看分支，看if语句的限定是否满足自己想要的条件，是否存在== 写成=的情况。\n看switch语句的break。\n4. 最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。","slug":"OJ中的那些小丑行为","published":1,"updated":"2023-11-20T01:45:16.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clp6949e90001h4ueadpxanhc","content":"<p>在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，<br>我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。</p>\n<ol>\n<li>编译错误引火线</li>\n</ol>\n<ul>\n<li>复制到做题平台上时复制漏了一些东西。 -不必多讲。</li>\n<li>if语句后加了分号，导致出现对于else语句的错误。</li>\n<li>变量重名，或者没改完一些变量的名字。</li>\n<li>忘了一些分号。</li>\n<li>int mian（int main）或者stdio打错了</li>\n<li>修改程序的时候忘了关黑框，有时候会不能编译新的文件。</li>\n<li>for循环中分号用成逗号</li>\n<li>函数声明与定义部分，都需要对于形式变量的数据类型进行设置。</li>\n</ul>\n<ol start=\"2\">\n<li>运行错误引火线</li>\n</ol>\n<ul>\n<li>for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加<br>  死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。</li>\n</ul>\n<ol start=\"3\">\n<li>程序结果错误引火线</li>\n</ol>\n<ul>\n<li><p>scanf没有加取址符，printf加了取址符<br>  scanf不加的话，就不会对于变量进行赋值操作<br>  printf加的话，返回的是变量的储存地址，垃圾数据。</p>\n</li>\n<li><p>部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）<br>  数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。</p>\n</li>\n<li><p>循环完一次的结果归零。<br>  有些循环比如while进行多实例检测的时候，会执行多个循环，<br>  如果某些计数的变量没有归零，会导致数据很离谱。</p>\n</li>\n<li><p>判断相等运算符 &#x3D;&#x3D; 写成赋值运算符 &#x3D;<br>  建议把变量放后面，值放前面，这样如果犯这个错的话会报错</p>\n</li>\n<li><p>赋值运算符&#x3D;的结合性不清楚。<br>  用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。</p>\n</li>\n<li><p>double转int的坑<br>  double储存的数据是近似值，切去小数点后有可能数据-1<br>  届时答案对不对完全看你运气。</p>\n</li>\n<li><p>数据类型对应的格式化符在更改变量类型的时候没有改变。</p>\n</li>\n<li><p>switch语句中漏写了一个break。<br>  直接不受控地向下面的case进发，全部执行，直到遇到新的break。</p>\n</li>\n<li><p>scanf中的格式加空格就算了，别的不要轻易加。</p>\n</li>\n<li></li>\n<li><p>多字符输入的时候，注意处理回车与空格，一般用getchar来解决</p>\n</li>\n</ul>\n<p>检查的思路：</p>\n<ol>\n<li>首先基本问题，不要出编译错误，对于一些常见符号要打对<br> 比如，scanf中的&amp;符号，各个语句后面的分号，大括号不要漏一边。</li>\n<li>然后，看修改变量的时候有没有注意类型，<br>相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改</li>\n<li>接着看循环，<br>对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环<br>对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。<br>看分支，看if语句的限定是否满足自己想要的条件，是否存在&#x3D;&#x3D; 写成&#x3D;的情况。<br>看switch语句的break。</li>\n<li>最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，<br>我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。</p>\n<ol>\n<li>编译错误引火线</li>\n</ol>\n<ul>\n<li>复制到做题平台上时复制漏了一些东西。 -不必多讲。</li>\n<li>if语句后加了分号，导致出现对于else语句的错误。</li>\n<li>变量重名，或者没改完一些变量的名字。</li>\n<li>忘了一些分号。</li>\n<li>int mian（int main）或者stdio打错了</li>\n<li>修改程序的时候忘了关黑框，有时候会不能编译新的文件。</li>\n<li>for循环中分号用成逗号</li>\n<li>函数声明与定义部分，都需要对于形式变量的数据类型进行设置。</li>\n</ul>\n<ol start=\"2\">\n<li>运行错误引火线</li>\n</ol>\n<ul>\n<li>for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加<br>  死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。</li>\n</ul>\n<ol start=\"3\">\n<li>程序结果错误引火线</li>\n</ol>\n<ul>\n<li><p>scanf没有加取址符，printf加了取址符<br>  scanf不加的话，就不会对于变量进行赋值操作<br>  printf加的话，返回的是变量的储存地址，垃圾数据。</p>\n</li>\n<li><p>部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）<br>  数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。</p>\n</li>\n<li><p>循环完一次的结果归零。<br>  有些循环比如while进行多实例检测的时候，会执行多个循环，<br>  如果某些计数的变量没有归零，会导致数据很离谱。</p>\n</li>\n<li><p>判断相等运算符 &#x3D;&#x3D; 写成赋值运算符 &#x3D;<br>  建议把变量放后面，值放前面，这样如果犯这个错的话会报错</p>\n</li>\n<li><p>赋值运算符&#x3D;的结合性不清楚。<br>  用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。</p>\n</li>\n<li><p>double转int的坑<br>  double储存的数据是近似值，切去小数点后有可能数据-1<br>  届时答案对不对完全看你运气。</p>\n</li>\n<li><p>数据类型对应的格式化符在更改变量类型的时候没有改变。</p>\n</li>\n<li><p>switch语句中漏写了一个break。<br>  直接不受控地向下面的case进发，全部执行，直到遇到新的break。</p>\n</li>\n<li><p>scanf中的格式加空格就算了，别的不要轻易加。</p>\n</li>\n<li></li>\n<li><p>多字符输入的时候，注意处理回车与空格，一般用getchar来解决</p>\n</li>\n</ul>\n<p>检查的思路：</p>\n<ol>\n<li>首先基本问题，不要出编译错误，对于一些常见符号要打对<br> 比如，scanf中的&amp;符号，各个语句后面的分号，大括号不要漏一边。</li>\n<li>然后，看修改变量的时候有没有注意类型，<br>相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改</li>\n<li>接着看循环，<br>对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环<br>对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。<br>看分支，看if语句的限定是否满足自己想要的条件，是否存在&#x3D;&#x3D; 写成&#x3D;的情况。<br>看switch语句的break。</li>\n<li>最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。</li>\n</ol>\n"},{"title":"千奇百怪的字符串处理函数","date":"2023-11-20T01:46:11.000Z","_content":"最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题\n今天学习了一些关于字符串、输入输出函数的知识，\n以及整理了一下昨天晚上直播的重点内容 @21级学长zyb\n希望能够帮到大家\n\n## 千奇百怪的字符串处理函数\n\n>首先声明，此处使用的函数（如图），需要加入**string.h**标准库\n>加入方式如下\n\n```C\n#include <string.h>\n```\n\n![[Pasted image 20231119081701.png]]\n\n\t 参考来自菜鸟教程\n\t(https://www.runoob.com/cprogramming/c-strings.html)\n\n这是我们在平时做题时常用的几个函数，比较易懂。\n除此之外我还在string.h中为大家多找了几个关于**搜索匹配字符**的。\n是下面这两个\n\n![[屏幕截图 2023-11-19 082223.png]]\n![[Pasted image 20231119082242.png]]\n（看起来可能参数与返回值都有点吓人，但也就那样。）\n\n\t 参考来自菜鸟教程\n\t (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n\n相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了\n要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：\n\n```C\n\t//定义方式\n\tchar 标识符[字符串长度];\n\t//标识符即为名字，字符串长度可以省略。\n\n\t//为字符串赋值的方式\n\tchar string[] = \"I'm a string!\";   //第一种方法\n\tchar string2[6] = \"Hello!\";        //第二种方法\n\t\n\tchar string3[10];                  //第三种方法\n\tgets(string3);\n\n\tint n;\n\tscanf(\"%d\",&n);                    //第四种，应该是最常用的一种方法\n\tchar string[1000];\n\tfor(int i = 0;i < n;i++)\n\t\tscanf(\"%c\",&string[i]);\n\n\t//sprintf(被写入字符串,\"写入字符串\"，格式化符列表)\n\t//括号的后半部分与printf类似，但是它不是为了输出的。\n\tint n;\n\tscanf(\"%d\",&n);\n\tsprintf(string1,\"%d\",n);\n\n\t//字符串输出的方式\n\tputs(string);\n\n\tfor(int i = 0;i < n;i++)\n\t\tputchar(string[i]);\n\t\t//此处n也可以不定义，在使用第一或者第二种方式时\n\t\t//可以使用strlen函数或者sizeof运算符 - 1来代替\n\t\t//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不\n\n\t\n```\n\n所谓的**字符串**，其实就是[由字符组成，以’ \\\\0‘为结束的一维数组]。\n’\\\\0'标志着字符串输出的结束，\\是**转义符号**，为了提示它不是数字0\n\n>注意，对于字符串的scanf都不需要加取地址符&。\n>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。\n>和字符串本身无关。\n\n上面的函数给出了几种给字符串赋值的方式，\n我觉得你们可能不太好理解的是以下内容：\n+ gets()与puts()函数的用法\n+ 1000是可以随机的吗\n+ strlen函数以及sizeof的用法\n\n这里简单一说\n1. gets()就是获取一段字符串，在括号中需要加入参数，\n\t参数为字符串（字符数组）\n\tputs是把字符串打印出来\n\t其实这两个相似于字符的getchar与putchar\n2. 1000看题目要求，看字符串的最大容量。\n3. strlen是返回字符串的长度，不包含结尾的\\\\0符号，\n\tsizeof运算符对于字符串来说，是返回包括\\\\0的长度。\n\t所以sizeof要减一。\n\n下面再说一下这些函数的效果。（看图也可。）\n\n> 1.strcpy(s1,s2);\n\ns1与s2是形式参数，代表两个字符串，\n通过这个函数我们能够覆盖式地把s2复制粘贴到s1上\n甚至长度不允许也没关系。\n\n关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。\n对于很多的函数是可以通过这种方式记忆的\n其实用多了就自然记住了。\n\n> 2.strcat(s1,s2);\n\ns1,s2作用不再赘述。\n把s2连接到s1的末尾，改变s1。\n可以通过输出看s1的变化，\n\n> 3.strlen(s1)\n> 返回s1的去掉结尾符号的长度，已经讲过。\n\n> 4.strcmp(s1,s2);\n> 从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。\n> 昨晚在直播中学长讲过了。\n> 大小与返回值的关系请见图。\n\n> 5.strpbrk(const char* str1, const char* str2);\n\n\t关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n\n分析第一个字符串的字符，与第二个字符串内的字符比对\n只要找出两个字符串都包含的字符就返回那个字符。\n\n\t很好理解。\n\t比如，\"AABB\"与\"BCDE\"，就会返回B。\n\n> 6.strspn(const char* str1, const char* str2);\n\n也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。\n返回那个字符的下标，注意不是字符。\n\n想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，\n比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。\n这在我刚开始学习C语言的时候就感觉到了。\nPython中的字符串处理有很多的内建函数，处理起来很方便。\n但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。\n所以学好字符串还是很有必要的。\n\n还有一个是 @空梦Kmar 的建议\n尽量使用C标准库函数，这样能够极大地优化程序的效率。\n详细的建议在他的博客里，第一条就是优先使用库函数。\n[关于C语言编码的一些建议 | 山岳库博 (kmar.top)](https://kmar.top/posts/51979312/)\n包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题\n还有用于交换数组排序的swap函数。\n所以学习C语言标准库而不是自己写还是很好的，而且很省事。\n\n\n","source":"_posts/千奇百怪的字符串处理函数.md","raw":"---\ntitle: 千奇百怪的字符串处理函数\ndate: 2023-11-20 09:46:11\ntags: C语言学习\n---\n最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题\n今天学习了一些关于字符串、输入输出函数的知识，\n以及整理了一下昨天晚上直播的重点内容 @21级学长zyb\n希望能够帮到大家\n\n## 千奇百怪的字符串处理函数\n\n>首先声明，此处使用的函数（如图），需要加入**string.h**标准库\n>加入方式如下\n\n```C\n#include <string.h>\n```\n\n![[Pasted image 20231119081701.png]]\n\n\t 参考来自菜鸟教程\n\t(https://www.runoob.com/cprogramming/c-strings.html)\n\n这是我们在平时做题时常用的几个函数，比较易懂。\n除此之外我还在string.h中为大家多找了几个关于**搜索匹配字符**的。\n是下面这两个\n\n![[屏幕截图 2023-11-19 082223.png]]\n![[Pasted image 20231119082242.png]]\n（看起来可能参数与返回值都有点吓人，但也就那样。）\n\n\t 参考来自菜鸟教程\n\t (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n\n相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了\n要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：\n\n```C\n\t//定义方式\n\tchar 标识符[字符串长度];\n\t//标识符即为名字，字符串长度可以省略。\n\n\t//为字符串赋值的方式\n\tchar string[] = \"I'm a string!\";   //第一种方法\n\tchar string2[6] = \"Hello!\";        //第二种方法\n\t\n\tchar string3[10];                  //第三种方法\n\tgets(string3);\n\n\tint n;\n\tscanf(\"%d\",&n);                    //第四种，应该是最常用的一种方法\n\tchar string[1000];\n\tfor(int i = 0;i < n;i++)\n\t\tscanf(\"%c\",&string[i]);\n\n\t//sprintf(被写入字符串,\"写入字符串\"，格式化符列表)\n\t//括号的后半部分与printf类似，但是它不是为了输出的。\n\tint n;\n\tscanf(\"%d\",&n);\n\tsprintf(string1,\"%d\",n);\n\n\t//字符串输出的方式\n\tputs(string);\n\n\tfor(int i = 0;i < n;i++)\n\t\tputchar(string[i]);\n\t\t//此处n也可以不定义，在使用第一或者第二种方式时\n\t\t//可以使用strlen函数或者sizeof运算符 - 1来代替\n\t\t//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不\n\n\t\n```\n\n所谓的**字符串**，其实就是[由字符组成，以’ \\\\0‘为结束的一维数组]。\n’\\\\0'标志着字符串输出的结束，\\是**转义符号**，为了提示它不是数字0\n\n>注意，对于字符串的scanf都不需要加取地址符&。\n>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。\n>和字符串本身无关。\n\n上面的函数给出了几种给字符串赋值的方式，\n我觉得你们可能不太好理解的是以下内容：\n+ gets()与puts()函数的用法\n+ 1000是可以随机的吗\n+ strlen函数以及sizeof的用法\n\n这里简单一说\n1. gets()就是获取一段字符串，在括号中需要加入参数，\n\t参数为字符串（字符数组）\n\tputs是把字符串打印出来\n\t其实这两个相似于字符的getchar与putchar\n2. 1000看题目要求，看字符串的最大容量。\n3. strlen是返回字符串的长度，不包含结尾的\\\\0符号，\n\tsizeof运算符对于字符串来说，是返回包括\\\\0的长度。\n\t所以sizeof要减一。\n\n下面再说一下这些函数的效果。（看图也可。）\n\n> 1.strcpy(s1,s2);\n\ns1与s2是形式参数，代表两个字符串，\n通过这个函数我们能够覆盖式地把s2复制粘贴到s1上\n甚至长度不允许也没关系。\n\n关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。\n对于很多的函数是可以通过这种方式记忆的\n其实用多了就自然记住了。\n\n> 2.strcat(s1,s2);\n\ns1,s2作用不再赘述。\n把s2连接到s1的末尾，改变s1。\n可以通过输出看s1的变化，\n\n> 3.strlen(s1)\n> 返回s1的去掉结尾符号的长度，已经讲过。\n\n> 4.strcmp(s1,s2);\n> 从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。\n> 昨晚在直播中学长讲过了。\n> 大小与返回值的关系请见图。\n\n> 5.strpbrk(const char* str1, const char* str2);\n\n\t关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n\n分析第一个字符串的字符，与第二个字符串内的字符比对\n只要找出两个字符串都包含的字符就返回那个字符。\n\n\t很好理解。\n\t比如，\"AABB\"与\"BCDE\"，就会返回B。\n\n> 6.strspn(const char* str1, const char* str2);\n\n也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。\n返回那个字符的下标，注意不是字符。\n\n想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，\n比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。\n这在我刚开始学习C语言的时候就感觉到了。\nPython中的字符串处理有很多的内建函数，处理起来很方便。\n但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。\n所以学好字符串还是很有必要的。\n\n还有一个是 @空梦Kmar 的建议\n尽量使用C标准库函数，这样能够极大地优化程序的效率。\n详细的建议在他的博客里，第一条就是优先使用库函数。\n[关于C语言编码的一些建议 | 山岳库博 (kmar.top)](https://kmar.top/posts/51979312/)\n包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题\n还有用于交换数组排序的swap函数。\n所以学习C语言标准库而不是自己写还是很好的，而且很省事。\n\n\n","slug":"千奇百怪的字符串处理函数","published":1,"updated":"2023-11-20T01:48:25.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clp6949ec0003h4ue1pmsf07d","content":"<p>最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题<br>今天学习了一些关于字符串、输入输出函数的知识，<br>以及整理了一下昨天晚上直播的重点内容 @21级学长zyb<br>希望能够帮到大家</p>\n<h2 id=\"千奇百怪的字符串处理函数\"><a href=\"#千奇百怪的字符串处理函数\" class=\"headerlink\" title=\"千奇百怪的字符串处理函数\"></a>千奇百怪的字符串处理函数</h2><blockquote>\n<p>首先声明，此处使用的函数（如图），需要加入<strong>string.h</strong>标准库<br>加入方式如下</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>![[Pasted image 20231119081701.png]]</p>\n<pre><code> 参考来自菜鸟教程\n(https://www.runoob.com/cprogramming/c-strings.html)\n</code></pre>\n<p>这是我们在平时做题时常用的几个函数，比较易懂。<br>除此之外我还在string.h中为大家多找了几个关于<strong>搜索匹配字符</strong>的。<br>是下面这两个</p>\n<p>![[屏幕截图 2023-11-19 082223.png]]<br>![[Pasted image 20231119082242.png]]<br>（看起来可能参数与返回值都有点吓人，但也就那样。）</p>\n<pre><code> 参考来自菜鸟教程\n (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n</code></pre>\n<p>相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了<br>要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> 标识符[字符串长度];</span><br><span class=\"line\"><span class=\"comment\">//标识符即为名字，字符串长度可以省略。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为字符串赋值的方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[] = <span class=\"string\">&quot;I&#x27;m a string!&quot;</span>;   <span class=\"comment\">//第一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> string2[<span class=\"number\">6</span>] = <span class=\"string\">&quot;Hello!&quot;</span>;        <span class=\"comment\">//第二种方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> string3[<span class=\"number\">10</span>];                  <span class=\"comment\">//第三种方法</span></span><br><span class=\"line\">gets(string3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);                    <span class=\"comment\">//第四种，应该是最常用的一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sprintf(被写入字符串,&quot;写入字符串&quot;，格式化符列表)</span></span><br><span class=\"line\"><span class=\"comment\">//括号的后半部分与printf类似，但是它不是为了输出的。</span></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(string1,<span class=\"string\">&quot;%d&quot;</span>,n);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串输出的方式</span></span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"built_in\">string</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\">\t<span class=\"comment\">//此处n也可以不定义，在使用第一或者第二种方式时</span></span><br><span class=\"line\">\t<span class=\"comment\">//可以使用strlen函数或者sizeof运算符 - 1来代替</span></span><br><span class=\"line\">\t<span class=\"comment\">//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所谓的<strong>字符串</strong>，其实就是[由字符组成，以’ \\0‘为结束的一维数组]。<br>’\\0’标志着字符串输出的结束，\\是<strong>转义符号</strong>，为了提示它不是数字0</p>\n<blockquote>\n<p>注意，对于字符串的scanf都不需要加取地址符&amp;。<br>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。<br>和字符串本身无关。</p>\n</blockquote>\n<p>上面的函数给出了几种给字符串赋值的方式，<br>我觉得你们可能不太好理解的是以下内容：</p>\n<ul>\n<li>gets()与puts()函数的用法</li>\n<li>1000是可以随机的吗</li>\n<li>strlen函数以及sizeof的用法</li>\n</ul>\n<p>这里简单一说</p>\n<ol>\n<li>gets()就是获取一段字符串，在括号中需要加入参数，<br> 参数为字符串（字符数组）<br> puts是把字符串打印出来<br> 其实这两个相似于字符的getchar与putchar</li>\n<li>1000看题目要求，看字符串的最大容量。</li>\n<li>strlen是返回字符串的长度，不包含结尾的\\0符号，<br> sizeof运算符对于字符串来说，是返回包括\\0的长度。<br> 所以sizeof要减一。</li>\n</ol>\n<p>下面再说一下这些函数的效果。（看图也可。）</p>\n<blockquote>\n<p>1.strcpy(s1,s2);</p>\n</blockquote>\n<p>s1与s2是形式参数，代表两个字符串，<br>通过这个函数我们能够覆盖式地把s2复制粘贴到s1上<br>甚至长度不允许也没关系。</p>\n<p>关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。<br>对于很多的函数是可以通过这种方式记忆的<br>其实用多了就自然记住了。</p>\n<blockquote>\n<p>2.strcat(s1,s2);</p>\n</blockquote>\n<p>s1,s2作用不再赘述。<br>把s2连接到s1的末尾，改变s1。<br>可以通过输出看s1的变化，</p>\n<blockquote>\n<p>3.strlen(s1)<br>返回s1的去掉结尾符号的长度，已经讲过。</p>\n</blockquote>\n<blockquote>\n<p>4.strcmp(s1,s2);<br>从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。<br>昨晚在直播中学长讲过了。<br>大小与返回值的关系请见图。</p>\n</blockquote>\n<blockquote>\n<p>5.strpbrk(const char* str1, const char* str2);</p>\n</blockquote>\n<pre><code>关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n</code></pre>\n<p>分析第一个字符串的字符，与第二个字符串内的字符比对<br>只要找出两个字符串都包含的字符就返回那个字符。</p>\n<pre><code>很好理解。\n比如，&quot;AABB&quot;与&quot;BCDE&quot;，就会返回B。\n</code></pre>\n<blockquote>\n<p>6.strspn(const char* str1, const char* str2);</p>\n</blockquote>\n<p>也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。<br>返回那个字符的下标，注意不是字符。</p>\n<p>想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，<br>比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。<br>这在我刚开始学习C语言的时候就感觉到了。<br>Python中的字符串处理有很多的内建函数，处理起来很方便。<br>但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。<br>所以学好字符串还是很有必要的。</p>\n<p>还有一个是 @空梦Kmar 的建议<br>尽量使用C标准库函数，这样能够极大地优化程序的效率。<br>详细的建议在他的博客里，第一条就是优先使用库函数。<br><a href=\"https://kmar.top/posts/51979312/\">关于C语言编码的一些建议 | 山岳库博 (kmar.top)</a><br>包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题<br>还有用于交换数组排序的swap函数。<br>所以学习C语言标准库而不是自己写还是很好的，而且很省事。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题<br>今天学习了一些关于字符串、输入输出函数的知识，<br>以及整理了一下昨天晚上直播的重点内容 @21级学长zyb<br>希望能够帮到大家</p>\n<h2 id=\"千奇百怪的字符串处理函数\"><a href=\"#千奇百怪的字符串处理函数\" class=\"headerlink\" title=\"千奇百怪的字符串处理函数\"></a>千奇百怪的字符串处理函数</h2><blockquote>\n<p>首先声明，此处使用的函数（如图），需要加入<strong>string.h</strong>标准库<br>加入方式如下</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>![[Pasted image 20231119081701.png]]</p>\n<pre><code> 参考来自菜鸟教程\n(https://www.runoob.com/cprogramming/c-strings.html)\n</code></pre>\n<p>这是我们在平时做题时常用的几个函数，比较易懂。<br>除此之外我还在string.h中为大家多找了几个关于<strong>搜索匹配字符</strong>的。<br>是下面这两个</p>\n<p>![[屏幕截图 2023-11-19 082223.png]]<br>![[Pasted image 20231119082242.png]]<br>（看起来可能参数与返回值都有点吓人，但也就那样。）</p>\n<pre><code> 参考来自菜鸟教程\n (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n</code></pre>\n<p>相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了<br>要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> 标识符[字符串长度];</span><br><span class=\"line\"><span class=\"comment\">//标识符即为名字，字符串长度可以省略。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为字符串赋值的方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[] = <span class=\"string\">&quot;I&#x27;m a string!&quot;</span>;   <span class=\"comment\">//第一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> string2[<span class=\"number\">6</span>] = <span class=\"string\">&quot;Hello!&quot;</span>;        <span class=\"comment\">//第二种方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> string3[<span class=\"number\">10</span>];                  <span class=\"comment\">//第三种方法</span></span><br><span class=\"line\">gets(string3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);                    <span class=\"comment\">//第四种，应该是最常用的一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sprintf(被写入字符串,&quot;写入字符串&quot;，格式化符列表)</span></span><br><span class=\"line\"><span class=\"comment\">//括号的后半部分与printf类似，但是它不是为了输出的。</span></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(string1,<span class=\"string\">&quot;%d&quot;</span>,n);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串输出的方式</span></span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"built_in\">string</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\">\t<span class=\"comment\">//此处n也可以不定义，在使用第一或者第二种方式时</span></span><br><span class=\"line\">\t<span class=\"comment\">//可以使用strlen函数或者sizeof运算符 - 1来代替</span></span><br><span class=\"line\">\t<span class=\"comment\">//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所谓的<strong>字符串</strong>，其实就是[由字符组成，以’ \\0‘为结束的一维数组]。<br>’\\0’标志着字符串输出的结束，\\是<strong>转义符号</strong>，为了提示它不是数字0</p>\n<blockquote>\n<p>注意，对于字符串的scanf都不需要加取地址符&amp;。<br>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。<br>和字符串本身无关。</p>\n</blockquote>\n<p>上面的函数给出了几种给字符串赋值的方式，<br>我觉得你们可能不太好理解的是以下内容：</p>\n<ul>\n<li>gets()与puts()函数的用法</li>\n<li>1000是可以随机的吗</li>\n<li>strlen函数以及sizeof的用法</li>\n</ul>\n<p>这里简单一说</p>\n<ol>\n<li>gets()就是获取一段字符串，在括号中需要加入参数，<br> 参数为字符串（字符数组）<br> puts是把字符串打印出来<br> 其实这两个相似于字符的getchar与putchar</li>\n<li>1000看题目要求，看字符串的最大容量。</li>\n<li>strlen是返回字符串的长度，不包含结尾的\\0符号，<br> sizeof运算符对于字符串来说，是返回包括\\0的长度。<br> 所以sizeof要减一。</li>\n</ol>\n<p>下面再说一下这些函数的效果。（看图也可。）</p>\n<blockquote>\n<p>1.strcpy(s1,s2);</p>\n</blockquote>\n<p>s1与s2是形式参数，代表两个字符串，<br>通过这个函数我们能够覆盖式地把s2复制粘贴到s1上<br>甚至长度不允许也没关系。</p>\n<p>关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。<br>对于很多的函数是可以通过这种方式记忆的<br>其实用多了就自然记住了。</p>\n<blockquote>\n<p>2.strcat(s1,s2);</p>\n</blockquote>\n<p>s1,s2作用不再赘述。<br>把s2连接到s1的末尾，改变s1。<br>可以通过输出看s1的变化，</p>\n<blockquote>\n<p>3.strlen(s1)<br>返回s1的去掉结尾符号的长度，已经讲过。</p>\n</blockquote>\n<blockquote>\n<p>4.strcmp(s1,s2);<br>从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。<br>昨晚在直播中学长讲过了。<br>大小与返回值的关系请见图。</p>\n</blockquote>\n<blockquote>\n<p>5.strpbrk(const char* str1, const char* str2);</p>\n</blockquote>\n<pre><code>关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n</code></pre>\n<p>分析第一个字符串的字符，与第二个字符串内的字符比对<br>只要找出两个字符串都包含的字符就返回那个字符。</p>\n<pre><code>很好理解。\n比如，&quot;AABB&quot;与&quot;BCDE&quot;，就会返回B。\n</code></pre>\n<blockquote>\n<p>6.strspn(const char* str1, const char* str2);</p>\n</blockquote>\n<p>也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。<br>返回那个字符的下标，注意不是字符。</p>\n<p>想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，<br>比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。<br>这在我刚开始学习C语言的时候就感觉到了。<br>Python中的字符串处理有很多的内建函数，处理起来很方便。<br>但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。<br>所以学好字符串还是很有必要的。</p>\n<p>还有一个是 @空梦Kmar 的建议<br>尽量使用C标准库函数，这样能够极大地优化程序的效率。<br>详细的建议在他的博客里，第一条就是优先使用库函数。<br><a href=\"https://kmar.top/posts/51979312/\">关于C语言编码的一些建议 | 山岳库博 (kmar.top)</a><br>包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题<br>还有用于交换数组排序的swap函数。<br>所以学习C语言标准库而不是自己写还是很好的，而且很省事。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-11-07T03:53:23.878Z","updated":"2023-08-30T07:41:06.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clp6949ee0006h4ue8elv9svd","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"数组","date":"2023-11-06T17:32:04.000Z","_content":"# 数组概论（Ver 2）\n\n战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。\n今天大体讲一下关于数组的内容，看完就可以使用来做题了。\n\n目录请见群里发送的图片\n\n## 1.数组基本用法\n### 1.1 数组的初始化 \n\n我们知道，要使用一个变量，我们需要先“声明”才能够使用，\n数组也是这样的，但作为一个数据容器，它还有大小这个参数。\n大体格式是这样的。\n\n```C\n\t<数据类型> <标识符>[长度];\n\t//也可以在长度后面加上={}，但是数组不确定的时候，没必要。\n```\n这里的**数据类型**就是我们常用的int,double,char等等，\n表示数组内元素的数据类型\n\n**标识符**是数组的名称，命名时也符合变量的命名规范\n比如这样\n\n>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，\n>不能使用关键字（会语法高亮的字比如int）\n>最好使用这种形式 数据类型的首字母加上名称，如iArray1\n\n**长度**是可以省略的，但只在数组完全确定的时候。\n但是我们在做题的过程中一般不使用确定的数组\n（数组可以预先指定好元素的值，如下例）\n一般是题目告诉我们最多的时候数据有多少个，\n我们一般取很大的数，如1000、10000等。\n像iArray0这样。\n\n```C\n\tint iArray0[1000]; //相信我，这会是你们用的频率最多的那种。\n\tint iArray1[5] = {1,2,3,4,5}; //确定数组\n\tint iArray2[5] = {1,2,3}      //int与double类型都是空位补零。\n\tint iArray3[] = {1,2,3,4,5}   //省略长度，相当于iArray1\n```\n\n其中，对于iArray3，规定了长度，但是没有确定完5个元素，\n其他的元素对于int类型数组用0填上\n但对于char类型的数组，用的是一个字符`\\0`，以后学字符串的时候会接触到\n这个字符提前，那么输出的时候就会提前结束。\n### 1.2 数组的数据储存输出\n\n已经声明完了，那么接下来就是往容器里加入数据\n方式依旧是我们惯用的scanf函数。\n但是这里就要到一个很容易错的点了：**下标**\n先看下面的演示，我们这样来写入数据\n\n```C\n\t//这也是一种惯用模式吧，像今天下午老师总结的那个\n\tfor(int i = 0;i <= n;i++)\n\t{\n\t\tscanf(\"%d\",&iArray0[i])\n\t}\n\t// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉\n```\n\n相信聪明的你已经看到了，我们的**i是从0开始取的**，\n那么`iArray0[0]`也就表示在`iArray0`数组里的第一项，所以最后的一项的下标是n - 1。\n这个特性一定要记好，要好好练习啊！\n（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）\n\n那么也像储存一样，我们也是用printf函数加上for循环来输出的\n（这比起某种语言真的太麻烦啦！差评）\n\n所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。\n## 2.多维数组\n\n也是简单一说，在平常做题的时候这种数组不会很频繁地用到。\n如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。\n就像下面这样\n    0   1   2\n0  \n1  \n2\n二维数组用两个参数确定一个值，\n也就是说在**scanf输入、声明、printf输出**的时候也需要两个括号。\n几维数组就是几个括号，其他的表示方式其实与一维数组差不多。\n\n> 1.空位自动补上对应的数值\n> 2.在数组确定的时候是可以省略长度参数的\n> 3.确定的时候稍有不同，可以有两种确定方式，如下。\n\n```C\n\tint iArray4[1000][1000];  //最常用的,等待输入\n\tint iArray5[2][5] = {{1,2,3,4,5},{2,3,4,5,6}};\n\t//或者int iArray5[2][5] = {1,2,3,4,5,2,3,4,5,6};\n```\n\n## 3.数组的应用场景\n\n从这几次周赛的题目来看，我们使用数组的目的是**储存数据**，\n也就是当我们**需要不止一次地遍历数据，而且数据很多**的时候，我们就可以使用数组。\n（不多的时候，两三个直接用变量存就好了）\n这里拿出两种题，\n一种是n个数求和，我们定义一个sum变量，\n直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。\n但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，\n这就需要遍历数组了，需要在输入之后再次使用所有数据。\n\n所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。\n我的分享到此结束！谢谢大家的时间！\n\n\n\n","source":"_posts/数组-1.md","raw":"---\ntitle: 数组\ndate: 2023-11-07 01:32:04\ntags: C语言学习\n---\n# 数组概论（Ver 2）\n\n战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。\n今天大体讲一下关于数组的内容，看完就可以使用来做题了。\n\n目录请见群里发送的图片\n\n## 1.数组基本用法\n### 1.1 数组的初始化 \n\n我们知道，要使用一个变量，我们需要先“声明”才能够使用，\n数组也是这样的，但作为一个数据容器，它还有大小这个参数。\n大体格式是这样的。\n\n```C\n\t<数据类型> <标识符>[长度];\n\t//也可以在长度后面加上={}，但是数组不确定的时候，没必要。\n```\n这里的**数据类型**就是我们常用的int,double,char等等，\n表示数组内元素的数据类型\n\n**标识符**是数组的名称，命名时也符合变量的命名规范\n比如这样\n\n>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，\n>不能使用关键字（会语法高亮的字比如int）\n>最好使用这种形式 数据类型的首字母加上名称，如iArray1\n\n**长度**是可以省略的，但只在数组完全确定的时候。\n但是我们在做题的过程中一般不使用确定的数组\n（数组可以预先指定好元素的值，如下例）\n一般是题目告诉我们最多的时候数据有多少个，\n我们一般取很大的数，如1000、10000等。\n像iArray0这样。\n\n```C\n\tint iArray0[1000]; //相信我，这会是你们用的频率最多的那种。\n\tint iArray1[5] = {1,2,3,4,5}; //确定数组\n\tint iArray2[5] = {1,2,3}      //int与double类型都是空位补零。\n\tint iArray3[] = {1,2,3,4,5}   //省略长度，相当于iArray1\n```\n\n其中，对于iArray3，规定了长度，但是没有确定完5个元素，\n其他的元素对于int类型数组用0填上\n但对于char类型的数组，用的是一个字符`\\0`，以后学字符串的时候会接触到\n这个字符提前，那么输出的时候就会提前结束。\n### 1.2 数组的数据储存输出\n\n已经声明完了，那么接下来就是往容器里加入数据\n方式依旧是我们惯用的scanf函数。\n但是这里就要到一个很容易错的点了：**下标**\n先看下面的演示，我们这样来写入数据\n\n```C\n\t//这也是一种惯用模式吧，像今天下午老师总结的那个\n\tfor(int i = 0;i <= n;i++)\n\t{\n\t\tscanf(\"%d\",&iArray0[i])\n\t}\n\t// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉\n```\n\n相信聪明的你已经看到了，我们的**i是从0开始取的**，\n那么`iArray0[0]`也就表示在`iArray0`数组里的第一项，所以最后的一项的下标是n - 1。\n这个特性一定要记好，要好好练习啊！\n（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）\n\n那么也像储存一样，我们也是用printf函数加上for循环来输出的\n（这比起某种语言真的太麻烦啦！差评）\n\n所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。\n## 2.多维数组\n\n也是简单一说，在平常做题的时候这种数组不会很频繁地用到。\n如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。\n就像下面这样\n    0   1   2\n0  \n1  \n2\n二维数组用两个参数确定一个值，\n也就是说在**scanf输入、声明、printf输出**的时候也需要两个括号。\n几维数组就是几个括号，其他的表示方式其实与一维数组差不多。\n\n> 1.空位自动补上对应的数值\n> 2.在数组确定的时候是可以省略长度参数的\n> 3.确定的时候稍有不同，可以有两种确定方式，如下。\n\n```C\n\tint iArray4[1000][1000];  //最常用的,等待输入\n\tint iArray5[2][5] = {{1,2,3,4,5},{2,3,4,5,6}};\n\t//或者int iArray5[2][5] = {1,2,3,4,5,2,3,4,5,6};\n```\n\n## 3.数组的应用场景\n\n从这几次周赛的题目来看，我们使用数组的目的是**储存数据**，\n也就是当我们**需要不止一次地遍历数据，而且数据很多**的时候，我们就可以使用数组。\n（不多的时候，两三个直接用变量存就好了）\n这里拿出两种题，\n一种是n个数求和，我们定义一个sum变量，\n直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。\n但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，\n这就需要遍历数组了，需要在输入之后再次使用所有数据。\n\n所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。\n我的分享到此结束！谢谢大家的时间！\n\n\n\n","slug":"数组-1","published":1,"updated":"2023-11-06T17:32:46.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clp6949ef0008h4uefu7l3bey","content":"<h1 id=\"数组概论（Ver-2）\"><a href=\"#数组概论（Ver-2）\" class=\"headerlink\" title=\"数组概论（Ver 2）\"></a>数组概论（Ver 2）</h1><p>战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。<br>今天大体讲一下关于数组的内容，看完就可以使用来做题了。</p>\n<p>目录请见群里发送的图片</p>\n<h2 id=\"1-数组基本用法\"><a href=\"#1-数组基本用法\" class=\"headerlink\" title=\"1.数组基本用法\"></a>1.数组基本用法</h2><h3 id=\"1-1-数组的初始化\"><a href=\"#1-1-数组的初始化\" class=\"headerlink\" title=\"1.1 数组的初始化\"></a>1.1 数组的初始化</h3><p>我们知道，要使用一个变量，我们需要先“声明”才能够使用，<br>数组也是这样的，但作为一个数据容器，它还有大小这个参数。<br>大体格式是这样的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;数据类型&gt; &lt;标识符&gt;[长度];</span><br><span class=\"line\"><span class=\"comment\">//也可以在长度后面加上=&#123;&#125;，但是数组不确定的时候，没必要。</span></span><br></pre></td></tr></table></figure>\n<p>这里的<strong>数据类型</strong>就是我们常用的int,double,char等等，<br>表示数组内元素的数据类型</p>\n<p><strong>标识符</strong>是数组的名称，命名时也符合变量的命名规范<br>比如这样</p>\n<blockquote>\n<p>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，<br>不能使用关键字（会语法高亮的字比如int）<br>最好使用这种形式 数据类型的首字母加上名称，如iArray1</p>\n</blockquote>\n<p><strong>长度</strong>是可以省略的，但只在数组完全确定的时候。<br>但是我们在做题的过程中一般不使用确定的数组<br>（数组可以预先指定好元素的值，如下例）<br>一般是题目告诉我们最多的时候数据有多少个，<br>我们一般取很大的数，如1000、10000等。<br>像iArray0这样。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> iArray0[<span class=\"number\">1000</span>]; <span class=\"comment\">//相信我，这会是你们用的频率最多的那种。</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray1[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;; <span class=\"comment\">//确定数组</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray2[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;      <span class=\"comment\">//int与double类型都是空位补零。</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray3[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;   <span class=\"comment\">//省略长度，相当于iArray1</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，对于iArray3，规定了长度，但是没有确定完5个元素，<br>其他的元素对于int类型数组用0填上<br>但对于char类型的数组，用的是一个字符<code>\\0</code>，以后学字符串的时候会接触到<br>这个字符提前，那么输出的时候就会提前结束。</p>\n<h3 id=\"1-2-数组的数据储存输出\"><a href=\"#1-2-数组的数据储存输出\" class=\"headerlink\" title=\"1.2 数组的数据储存输出\"></a>1.2 数组的数据储存输出</h3><p>已经声明完了，那么接下来就是往容器里加入数据<br>方式依旧是我们惯用的scanf函数。<br>但是这里就要到一个很容易错的点了：<strong>下标</strong><br>先看下面的演示，我们这样来写入数据</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这也是一种惯用模式吧，像今天下午老师总结的那个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt;= n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;iArray0[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉</span></span><br></pre></td></tr></table></figure>\n\n<p>相信聪明的你已经看到了，我们的<strong>i是从0开始取的</strong>，<br>那么<code>iArray0[0]</code>也就表示在<code>iArray0</code>数组里的第一项，所以最后的一项的下标是n - 1。<br>这个特性一定要记好，要好好练习啊！<br>（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）</p>\n<p>那么也像储存一样，我们也是用printf函数加上for循环来输出的<br>（这比起某种语言真的太麻烦啦！差评）</p>\n<p>所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。</p>\n<h2 id=\"2-多维数组\"><a href=\"#2-多维数组\" class=\"headerlink\" title=\"2.多维数组\"></a>2.多维数组</h2><p>也是简单一说，在平常做题的时候这种数组不会很频繁地用到。<br>如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。<br>就像下面这样<br>    0   1   2<br>0<br>1<br>2<br>二维数组用两个参数确定一个值，<br>也就是说在<strong>scanf输入、声明、printf输出</strong>的时候也需要两个括号。<br>几维数组就是几个括号，其他的表示方式其实与一维数组差不多。</p>\n<blockquote>\n<p>1.空位自动补上对应的数值<br>2.在数组确定的时候是可以省略长度参数的<br>3.确定的时候稍有不同，可以有两种确定方式，如下。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> iArray4[<span class=\"number\">1000</span>][<span class=\"number\">1000</span>];  <span class=\"comment\">//最常用的,等待输入</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray5[<span class=\"number\">2</span>][<span class=\"number\">5</span>] = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;,&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//或者int iArray5[2][5] = &#123;1,2,3,4,5,2,3,4,5,6&#125;;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-数组的应用场景\"><a href=\"#3-数组的应用场景\" class=\"headerlink\" title=\"3.数组的应用场景\"></a>3.数组的应用场景</h2><p>从这几次周赛的题目来看，我们使用数组的目的是<strong>储存数据</strong>，<br>也就是当我们<strong>需要不止一次地遍历数据，而且数据很多</strong>的时候，我们就可以使用数组。<br>（不多的时候，两三个直接用变量存就好了）<br>这里拿出两种题，<br>一种是n个数求和，我们定义一个sum变量，<br>直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。<br>但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，<br>这就需要遍历数组了，需要在输入之后再次使用所有数据。</p>\n<p>所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。<br>我的分享到此结束！谢谢大家的时间！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数组概论（Ver-2）\"><a href=\"#数组概论（Ver-2）\" class=\"headerlink\" title=\"数组概论（Ver 2）\"></a>数组概论（Ver 2）</h1><p>战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。<br>今天大体讲一下关于数组的内容，看完就可以使用来做题了。</p>\n<p>目录请见群里发送的图片</p>\n<h2 id=\"1-数组基本用法\"><a href=\"#1-数组基本用法\" class=\"headerlink\" title=\"1.数组基本用法\"></a>1.数组基本用法</h2><h3 id=\"1-1-数组的初始化\"><a href=\"#1-1-数组的初始化\" class=\"headerlink\" title=\"1.1 数组的初始化\"></a>1.1 数组的初始化</h3><p>我们知道，要使用一个变量，我们需要先“声明”才能够使用，<br>数组也是这样的，但作为一个数据容器，它还有大小这个参数。<br>大体格式是这样的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;数据类型&gt; &lt;标识符&gt;[长度];</span><br><span class=\"line\"><span class=\"comment\">//也可以在长度后面加上=&#123;&#125;，但是数组不确定的时候，没必要。</span></span><br></pre></td></tr></table></figure>\n<p>这里的<strong>数据类型</strong>就是我们常用的int,double,char等等，<br>表示数组内元素的数据类型</p>\n<p><strong>标识符</strong>是数组的名称，命名时也符合变量的命名规范<br>比如这样</p>\n<blockquote>\n<p>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，<br>不能使用关键字（会语法高亮的字比如int）<br>最好使用这种形式 数据类型的首字母加上名称，如iArray1</p>\n</blockquote>\n<p><strong>长度</strong>是可以省略的，但只在数组完全确定的时候。<br>但是我们在做题的过程中一般不使用确定的数组<br>（数组可以预先指定好元素的值，如下例）<br>一般是题目告诉我们最多的时候数据有多少个，<br>我们一般取很大的数，如1000、10000等。<br>像iArray0这样。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> iArray0[<span class=\"number\">1000</span>]; <span class=\"comment\">//相信我，这会是你们用的频率最多的那种。</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray1[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;; <span class=\"comment\">//确定数组</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray2[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;      <span class=\"comment\">//int与double类型都是空位补零。</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray3[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;   <span class=\"comment\">//省略长度，相当于iArray1</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，对于iArray3，规定了长度，但是没有确定完5个元素，<br>其他的元素对于int类型数组用0填上<br>但对于char类型的数组，用的是一个字符<code>\\0</code>，以后学字符串的时候会接触到<br>这个字符提前，那么输出的时候就会提前结束。</p>\n<h3 id=\"1-2-数组的数据储存输出\"><a href=\"#1-2-数组的数据储存输出\" class=\"headerlink\" title=\"1.2 数组的数据储存输出\"></a>1.2 数组的数据储存输出</h3><p>已经声明完了，那么接下来就是往容器里加入数据<br>方式依旧是我们惯用的scanf函数。<br>但是这里就要到一个很容易错的点了：<strong>下标</strong><br>先看下面的演示，我们这样来写入数据</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这也是一种惯用模式吧，像今天下午老师总结的那个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt;= n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;iArray0[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉</span></span><br></pre></td></tr></table></figure>\n\n<p>相信聪明的你已经看到了，我们的<strong>i是从0开始取的</strong>，<br>那么<code>iArray0[0]</code>也就表示在<code>iArray0</code>数组里的第一项，所以最后的一项的下标是n - 1。<br>这个特性一定要记好，要好好练习啊！<br>（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）</p>\n<p>那么也像储存一样，我们也是用printf函数加上for循环来输出的<br>（这比起某种语言真的太麻烦啦！差评）</p>\n<p>所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。</p>\n<h2 id=\"2-多维数组\"><a href=\"#2-多维数组\" class=\"headerlink\" title=\"2.多维数组\"></a>2.多维数组</h2><p>也是简单一说，在平常做题的时候这种数组不会很频繁地用到。<br>如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。<br>就像下面这样<br>    0   1   2<br>0<br>1<br>2<br>二维数组用两个参数确定一个值，<br>也就是说在<strong>scanf输入、声明、printf输出</strong>的时候也需要两个括号。<br>几维数组就是几个括号，其他的表示方式其实与一维数组差不多。</p>\n<blockquote>\n<p>1.空位自动补上对应的数值<br>2.在数组确定的时候是可以省略长度参数的<br>3.确定的时候稍有不同，可以有两种确定方式，如下。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> iArray4[<span class=\"number\">1000</span>][<span class=\"number\">1000</span>];  <span class=\"comment\">//最常用的,等待输入</span></span><br><span class=\"line\"><span class=\"type\">int</span> iArray5[<span class=\"number\">2</span>][<span class=\"number\">5</span>] = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;,&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//或者int iArray5[2][5] = &#123;1,2,3,4,5,2,3,4,5,6&#125;;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-数组的应用场景\"><a href=\"#3-数组的应用场景\" class=\"headerlink\" title=\"3.数组的应用场景\"></a>3.数组的应用场景</h2><p>从这几次周赛的题目来看，我们使用数组的目的是<strong>储存数据</strong>，<br>也就是当我们<strong>需要不止一次地遍历数据，而且数据很多</strong>的时候，我们就可以使用数组。<br>（不多的时候，两三个直接用变量存就好了）<br>这里拿出两种题，<br>一种是n个数求和，我们定义一个sum变量，<br>直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。<br>但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，<br>这就需要遍历数组了，需要在输入之后再次使用所有数据。</p>\n<p>所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。<br>我的分享到此结束！谢谢大家的时间！</p>\n"},{"title":"流程控制方法","date":"2023-08-30T07:54:46.000Z","_content":"今天，在大多数编程语言中，都提供两种循环结构，一种是**以数据容器为基础的**，一种是**以条件为基础的**。\n\n#if语句\n\n**if语句**\n==\n你其实能发现，这一页可以构成一个粗略的if嵌套循环。\n\nif语句的最简单构成是\n```Python\nif expression:\n\tstatements\n```\n如果expression返回值为真，则执行statements，否则执行下面的语句。\n\n如果想让它对两种互补的情况操作，\n```Python\nif expression:\n\tstatements_for_true\nelse:\n\tstatements_for_false\n```\n如果有更多的情况\n```Python\nif expression1:\n\tstatements_for_expresson1_True\nelif expression2:\n\tstatements_for_expression2_True\nelif expression2:\n\tstatements_for_expression3_True\n```\n其中，*elif*是*else if*的缩写，用法相同。\n\n\n#for循环\n\n**for循环**\n==\n用来对于数据容器(**尤其是有序容器**)中的数据逐个操作的循环\nfor循环是以集合为基础的循环。\nfor后的‘for i in is’，如果`i in is`为*False*\n即**i无值或is为空的**\n则下面的语句不会被执行。\n\n#continue #break #pass\n\nContinue、Break和Pass语句\n==\n*Continue*语句将忽略其后的语句开始下一次循环。\n*Break*从此结束循环。\n*Pass*什么也不干，是用来占位的。\n\n#while循环\n\nwhile循环\n==\nwhile循环的格式如下\n```Python\nwhile expression:\n\tstatements\n```\n\n","source":"_posts/流程控制方法.md","raw":"---\ntitle: 流程控制方法\ndate: 2023-08-30 15:54:46\ntags:\ncategories:\n\tpython学习\n---\n今天，在大多数编程语言中，都提供两种循环结构，一种是**以数据容器为基础的**，一种是**以条件为基础的**。\n\n#if语句\n\n**if语句**\n==\n你其实能发现，这一页可以构成一个粗略的if嵌套循环。\n\nif语句的最简单构成是\n```Python\nif expression:\n\tstatements\n```\n如果expression返回值为真，则执行statements，否则执行下面的语句。\n\n如果想让它对两种互补的情况操作，\n```Python\nif expression:\n\tstatements_for_true\nelse:\n\tstatements_for_false\n```\n如果有更多的情况\n```Python\nif expression1:\n\tstatements_for_expresson1_True\nelif expression2:\n\tstatements_for_expression2_True\nelif expression2:\n\tstatements_for_expression3_True\n```\n其中，*elif*是*else if*的缩写，用法相同。\n\n\n#for循环\n\n**for循环**\n==\n用来对于数据容器(**尤其是有序容器**)中的数据逐个操作的循环\nfor循环是以集合为基础的循环。\nfor后的‘for i in is’，如果`i in is`为*False*\n即**i无值或is为空的**\n则下面的语句不会被执行。\n\n#continue #break #pass\n\nContinue、Break和Pass语句\n==\n*Continue*语句将忽略其后的语句开始下一次循环。\n*Break*从此结束循环。\n*Pass*什么也不干，是用来占位的。\n\n#while循环\n\nwhile循环\n==\nwhile循环的格式如下\n```Python\nwhile expression:\n\tstatements\n```\n\n","slug":"流程控制方法","published":1,"updated":"2023-08-30T10:59:15.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clp6949eg000ah4ued9g5a9ch","content":"<p>今天，在大多数编程语言中，都提供两种循环结构，一种是<strong>以数据容器为基础的</strong>，一种是<strong>以条件为基础的</strong>。</p>\n<p>#if语句</p>\n<h1 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a><strong>if语句</strong></h1><p>你其实能发现，这一页可以构成一个粗略的if嵌套循环。</p>\n<p>if语句的最简单构成是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression:</span><br><span class=\"line\">\tstatements</span><br></pre></td></tr></table></figure>\n<p>如果expression返回值为真，则执行statements，否则执行下面的语句。</p>\n<p>如果想让它对两种互补的情况操作，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression:</span><br><span class=\"line\">\tstatements_for_true</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tstatements_for_false</span><br></pre></td></tr></table></figure>\n<p>如果有更多的情况</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression1:</span><br><span class=\"line\">\tstatements_for_expresson1_True</span><br><span class=\"line\"><span class=\"keyword\">elif</span> expression2:</span><br><span class=\"line\">\tstatements_for_expression2_True</span><br><span class=\"line\"><span class=\"keyword\">elif</span> expression2:</span><br><span class=\"line\">\tstatements_for_expression3_True</span><br></pre></td></tr></table></figure>\n<p>其中，<em>elif</em>是<em>else if</em>的缩写，用法相同。</p>\n<p>#for循环</p>\n<h1 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a><strong>for循环</strong></h1><p>用来对于数据容器(<strong>尤其是有序容器</strong>)中的数据逐个操作的循环<br>for循环是以集合为基础的循环。<br>for后的‘for i in is’，如果<code>i in is</code>为<em>False</em><br>即<strong>i无值或is为空的</strong><br>则下面的语句不会被执行。</p>\n<p>#continue #break #pass</p>\n<h1 id=\"Continue、Break和Pass语句\"><a href=\"#Continue、Break和Pass语句\" class=\"headerlink\" title=\"Continue、Break和Pass语句\"></a>Continue、Break和Pass语句</h1><p><em>Continue</em>语句将忽略其后的语句开始下一次循环。<br><em>Break</em>从此结束循环。<br><em>Pass</em>什么也不干，是用来占位的。</p>\n<p>#while循环</p>\n<h1 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h1><p>while循环的格式如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> expression:</span><br><span class=\"line\">\tstatements</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>今天，在大多数编程语言中，都提供两种循环结构，一种是<strong>以数据容器为基础的</strong>，一种是<strong>以条件为基础的</strong>。</p>\n<p>#if语句</p>\n<h1 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a><strong>if语句</strong></h1><p>你其实能发现，这一页可以构成一个粗略的if嵌套循环。</p>\n<p>if语句的最简单构成是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression:</span><br><span class=\"line\">\tstatements</span><br></pre></td></tr></table></figure>\n<p>如果expression返回值为真，则执行statements，否则执行下面的语句。</p>\n<p>如果想让它对两种互补的情况操作，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression:</span><br><span class=\"line\">\tstatements_for_true</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tstatements_for_false</span><br></pre></td></tr></table></figure>\n<p>如果有更多的情况</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression1:</span><br><span class=\"line\">\tstatements_for_expresson1_True</span><br><span class=\"line\"><span class=\"keyword\">elif</span> expression2:</span><br><span class=\"line\">\tstatements_for_expression2_True</span><br><span class=\"line\"><span class=\"keyword\">elif</span> expression2:</span><br><span class=\"line\">\tstatements_for_expression3_True</span><br></pre></td></tr></table></figure>\n<p>其中，<em>elif</em>是<em>else if</em>的缩写，用法相同。</p>\n<p>#for循环</p>\n<h1 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a><strong>for循环</strong></h1><p>用来对于数据容器(<strong>尤其是有序容器</strong>)中的数据逐个操作的循环<br>for循环是以集合为基础的循环。<br>for后的‘for i in is’，如果<code>i in is</code>为<em>False</em><br>即<strong>i无值或is为空的</strong><br>则下面的语句不会被执行。</p>\n<p>#continue #break #pass</p>\n<h1 id=\"Continue、Break和Pass语句\"><a href=\"#Continue、Break和Pass语句\" class=\"headerlink\" title=\"Continue、Break和Pass语句\"></a>Continue、Break和Pass语句</h1><p><em>Continue</em>语句将忽略其后的语句开始下一次循环。<br><em>Break</em>从此结束循环。<br><em>Pass</em>什么也不干，是用来占位的。</p>\n<p>#while循环</p>\n<h1 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h1><p>while循环的格式如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> expression:</span><br><span class=\"line\">\tstatements</span><br></pre></td></tr></table></figure>\n\n"},{"title":"网站集合","date":"2023-11-20T01:50:34.000Z","_content":"# 总体网站集合\n>1.菜鸟教程 www.runoob.com\n>2.空梦博客 www.kmar.top\n>3.昨日学长的B站号 [@zyoobn]\n>\t学长的CSDN [@郑轻大不知名]\n>4.编程爱好者协会 www.godyu.com\n>\tB站直播号 [@郑轻编程爱好者协会]\n\n看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了\n那网站上没法发帖子，所以我还是自己想办法建个博客吧。\n","source":"_posts/网站集合.md","raw":"---\ntitle: 网站集合\ndate: 2023-11-20 09:50:34\ntags: 学习资源\n---\n# 总体网站集合\n>1.菜鸟教程 www.runoob.com\n>2.空梦博客 www.kmar.top\n>3.昨日学长的B站号 [@zyoobn]\n>\t学长的CSDN [@郑轻大不知名]\n>4.编程爱好者协会 www.godyu.com\n>\tB站直播号 [@郑轻编程爱好者协会]\n\n看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了\n那网站上没法发帖子，所以我还是自己想办法建个博客吧。\n","slug":"网站集合","published":1,"updated":"2023-11-20T01:51:41.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clp6949ei000eh4ue5pz95jko","content":"<h1 id=\"总体网站集合\"><a href=\"#总体网站集合\" class=\"headerlink\" title=\"总体网站集合\"></a>总体网站集合</h1><blockquote>\n<p>1.菜鸟教程 <a href=\"http://www.runoob.com/\">www.runoob.com</a><br>2.空梦博客 <a href=\"http://www.kmar.top/\">www.kmar.top</a><br>3.昨日学长的B站号 [@zyoobn]<br>学长的CSDN [@郑轻大不知名]<br>4.编程爱好者协会 <a href=\"http://www.godyu.com/\">www.godyu.com</a><br>B站直播号 [@郑轻编程爱好者协会]</p>\n</blockquote>\n<p>看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了<br>那网站上没法发帖子，所以我还是自己想办法建个博客吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"总体网站集合\"><a href=\"#总体网站集合\" class=\"headerlink\" title=\"总体网站集合\"></a>总体网站集合</h1><blockquote>\n<p>1.菜鸟教程 <a href=\"http://www.runoob.com/\">www.runoob.com</a><br>2.空梦博客 <a href=\"http://www.kmar.top/\">www.kmar.top</a><br>3.昨日学长的B站号 [@zyoobn]<br>学长的CSDN [@郑轻大不知名]<br>4.编程爱好者协会 <a href=\"http://www.godyu.com/\">www.godyu.com</a><br>B站直播号 [@郑轻编程爱好者协会]</p>\n</blockquote>\n<p>看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了<br>那网站上没法发帖子，所以我还是自己想办法建个博客吧。</p>\n"},{"title":"直播内容复盘-排序与交换","date":"2023-11-20T01:47:02.000Z","_content":"昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归\n我还需要再联系联系，不太能独立写出来。\n那就整理一下昨天晚上听到的一些点，\n\n## qsort函数的用法以及swap函数\n> 首先声明，需要添加stdlib库\n\n上定义\n```C\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\n```\n\n这个定义有点太复杂，我们可以把它特殊化处理\n\n```C\nvoid qsort(排序数组,排序个数，sizeof(数组数据类型)，排序规则(cmp));\n```\n\n这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。\n\n因为我们学习过全局变量，所以这个注意事项也好懂\n\n> 这个数组必须是全局的，即必须在预处理之后，主函数之前定义。\n\n因为这样数组才对qsort函数“可见“。\n\ncmp函数需要自己写，写的思路用到了指针，不过照抄就好。\n\n```C\nint cmp (const void * a, const void * b)  \n{  \n   return ( *(int*)a - *(int*)b );  \n}\n//先强转为对应类型的指针，然后再相减，\n//a-b为从小到大，b-a为从大到小\n```\n\n如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。\n\n所以这就是qsort库函数的用法。\n\n还有是swap函数，可以在我们写排序的时候用到。\n可以交换数组内的数据，非常好用。\n形式如下\n```C\nswap(&a,&b);\n```\n到用的时候可以把a和b换成数组的元素，如array[1].\n可以便捷地实现交换。\n这个函数实际上自己写也可以。\n\n这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。\n\n","source":"_posts/直播内容复盘-排序与交换.md","raw":"---\ntitle: 直播内容复盘-排序与交换\ndate: 2023-11-20 09:47:02\ntags: C语言学习\n---\n昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归\n我还需要再联系联系，不太能独立写出来。\n那就整理一下昨天晚上听到的一些点，\n\n## qsort函数的用法以及swap函数\n> 首先声明，需要添加stdlib库\n\n上定义\n```C\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\n```\n\n这个定义有点太复杂，我们可以把它特殊化处理\n\n```C\nvoid qsort(排序数组,排序个数，sizeof(数组数据类型)，排序规则(cmp));\n```\n\n这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。\n\n因为我们学习过全局变量，所以这个注意事项也好懂\n\n> 这个数组必须是全局的，即必须在预处理之后，主函数之前定义。\n\n因为这样数组才对qsort函数“可见“。\n\ncmp函数需要自己写，写的思路用到了指针，不过照抄就好。\n\n```C\nint cmp (const void * a, const void * b)  \n{  \n   return ( *(int*)a - *(int*)b );  \n}\n//先强转为对应类型的指针，然后再相减，\n//a-b为从小到大，b-a为从大到小\n```\n\n如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。\n\n所以这就是qsort库函数的用法。\n\n还有是swap函数，可以在我们写排序的时候用到。\n可以交换数组内的数据，非常好用。\n形式如下\n```C\nswap(&a,&b);\n```\n到用的时候可以把a和b换成数组的元素，如array[1].\n可以便捷地实现交换。\n这个函数实际上自己写也可以。\n\n这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。\n\n","slug":"直播内容复盘-排序与交换","published":1,"updated":"2023-11-20T01:49:38.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clp6949ej000hh4uehbf3397k","content":"<p>昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归<br>我还需要再联系联系，不太能独立写出来。<br>那就整理一下昨天晚上听到的一些点，</p>\n<h2 id=\"qsort函数的用法以及swap函数\"><a href=\"#qsort函数的用法以及swap函数\" class=\"headerlink\" title=\"qsort函数的用法以及swap函数\"></a>qsort函数的用法以及swap函数</h2><blockquote>\n<p>首先声明，需要添加stdlib库</p>\n</blockquote>\n<p>上定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">void</span> *base, <span class=\"type\">size_t</span> nitems, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> (*compar)(<span class=\"type\">const</span> <span class=\"type\">void</span> *, <span class=\"type\">const</span> <span class=\"type\">void</span>*))</span></span><br></pre></td></tr></table></figure>\n\n<p>这个定义有点太复杂，我们可以把它特殊化处理</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(排序数组,排序个数，<span class=\"keyword\">sizeof</span>(数组数据类型)，排序规则(cmp))</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。</p>\n<p>因为我们学习过全局变量，所以这个注意事项也好懂</p>\n<blockquote>\n<p>这个数组必须是全局的，即必须在预处理之后，主函数之前定义。</p>\n</blockquote>\n<p>因为这样数组才对qsort函数“可见“。</p>\n<p>cmp函数需要自己写，写的思路用到了指针，不过照抄就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cmp</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> * a, <span class=\"type\">const</span> <span class=\"type\">void</span> * b)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> ( *(<span class=\"type\">int</span>*)a - *(<span class=\"type\">int</span>*)b );  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先强转为对应类型的指针，然后再相减，</span></span><br><span class=\"line\"><span class=\"comment\">//a-b为从小到大，b-a为从大到小</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。</p>\n<p>所以这就是qsort库函数的用法。</p>\n<p>还有是swap函数，可以在我们写排序的时候用到。<br>可以交换数组内的数据，非常好用。<br>形式如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>\n<p>到用的时候可以把a和b换成数组的元素，如array[1].<br>可以便捷地实现交换。<br>这个函数实际上自己写也可以。</p>\n<p>这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归<br>我还需要再联系联系，不太能独立写出来。<br>那就整理一下昨天晚上听到的一些点，</p>\n<h2 id=\"qsort函数的用法以及swap函数\"><a href=\"#qsort函数的用法以及swap函数\" class=\"headerlink\" title=\"qsort函数的用法以及swap函数\"></a>qsort函数的用法以及swap函数</h2><blockquote>\n<p>首先声明，需要添加stdlib库</p>\n</blockquote>\n<p>上定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">void</span> *base, <span class=\"type\">size_t</span> nitems, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> (*compar)(<span class=\"type\">const</span> <span class=\"type\">void</span> *, <span class=\"type\">const</span> <span class=\"type\">void</span>*))</span></span><br></pre></td></tr></table></figure>\n\n<p>这个定义有点太复杂，我们可以把它特殊化处理</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(排序数组,排序个数，<span class=\"keyword\">sizeof</span>(数组数据类型)，排序规则(cmp))</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。</p>\n<p>因为我们学习过全局变量，所以这个注意事项也好懂</p>\n<blockquote>\n<p>这个数组必须是全局的，即必须在预处理之后，主函数之前定义。</p>\n</blockquote>\n<p>因为这样数组才对qsort函数“可见“。</p>\n<p>cmp函数需要自己写，写的思路用到了指针，不过照抄就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cmp</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> * a, <span class=\"type\">const</span> <span class=\"type\">void</span> * b)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> ( *(<span class=\"type\">int</span>*)a - *(<span class=\"type\">int</span>*)b );  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先强转为对应类型的指针，然后再相减，</span></span><br><span class=\"line\"><span class=\"comment\">//a-b为从小到大，b-a为从大到小</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。</p>\n<p>所以这就是qsort库函数的用法。</p>\n<p>还有是swap函数，可以在我们写排序的时候用到。<br>可以交换数组内的数据，非常好用。<br>形式如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>\n<p>到用的时候可以把a和b换成数组的元素，如array[1].<br>可以便捷地实现交换。<br>这个函数实际上自己写也可以。</p>\n<p>这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。</p>\n"},{"title":"输入与输出","date":"2023-11-20T01:46:35.000Z","_content":"从字符串那里，包括之前听C语言群里大佬说\n也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。\n今天也一并分享给大家。\n\n## 1.stdio.h中的更多的函数\n(关于stream与参数列表的不讲，还没学到。)\n\n类似的，应该你们也听说过，这里列一下。\n\n```C\nint sprintf(char *str, const char *format);\nint sscanf(const char *str, const char *format, ...);\n```\n### 一.函数定义读法\n\n这里是纯纯的函数函数定义，看起来可能很抽象，\n**没关系，我会出手。**\n\n总体上一讲，以后见到**前面带f**的一般是有关`stream`的\n**带v的**一般是有关`参数列表`的，\n以后看到学长写类似的函数就知道该多学习了!😂\n\n对于以后看这样的函数定义，首先看[返回值类型]，\n一般是，返回处理的结果或者返回一个数值（int/double)\n\n然后如果看不懂函数名的话，\n先看[括号中的形式参数]，知道我们需要输入的是什么东西。\n\n>比如这两个函数中\n>**const**是数据类型的修饰符，表示常量。\n>char* 表示字符串、后面的是形式参数名，不需要管。\n\n最后，通过[看实例]与函数的[概述]得知函数的作用。\n在菜鸟教程里都一条一条地列出来的，每一条都有实例。\n\n在最后一篇文章的最后会给大家列出来用过的这些网站。\n\n### 二.浅谈没讲过的sscanf()函数\n\n上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。\n现在就来讲一讲相对的sscanf函数。\n\n不多说，直接上函数定义。\n```C\nint sscanf(const char *str, const char *format, ...);\n```\n\n首先看**返回值**\n这个函数返回的是一个数值，也就像scanf一样\n函数返回的是成功赋值与匹配的个数。\n如果到达文件末尾或者错误返回EOF。\n\n然后看**形参**\n获取的是字符串常量(`const char *str`)，\n\t这个字符串，是包含着我们想要赋值数据的字符串。\n写入形式(`const char *format`)\n\t写入形式相当于格式化符，相当于赋值的顺序）\n\t尽量不要加新的形式。\n与参数列表(`...`)。\n\t对应之前的格式化符。\n关于参数列表，其实简单的说\n就是我们printf中标准符后边逗号中的内容\n见下方。\n\n```C\nint a,b,c;\nscanf(\"%d %d %d\",&a,&b,&c);\n//后面的a,b,c就是参数列表\n//%d的这个字符串就是写入形式的一种形式\n```\n\n所以这个函数的**功能**就是\n>1.从字符串中获取数据，\n>2.然后赋给格式化符的对应的变量。\n\nsscanf不需要我们自己输入，在字符串中有就好。\n\n所以更多的惯例自己去菜鸟教程上查就好，\n**建议立即行动，不然一定会忘记。**\n\n## 二.关于我们的输入输出\n\n>以下内容取自空梦大大的博客\n>[如何理解c/c++中的输入/输出函数？ | 山岳库博](https://kmar.top/posts/51c9b0a0/)\n>我们这里梳理的是，我们这个阶段可以用到的符号。\n\n### 1.关于格式化符与printf、scanf修饰符\n\n格式化符我们需要知道的如下，之前在题中也出过。\n\t1. %d/%lf/%f/%c 整数、字符、浮点数\n\t2. %s 字符串输入与输出。\n\t3. %x/%X - 十六进制整数 或者 %o 八进制整数\n\t4. %%两个百分号一起用可以输出%号，相当于转义了。\n%%\n掌握了这些我们就不太用怕需要的数据表示不出来了。\n现在看来老师教的还是不是很够，第一个都用过时了。\n\n## printf修饰符\n1. 加数字，右对齐字符宽度。-实例：`printf(\"%4d\",n);`\n2. .数字，对于小数表示小数后位数，比如`%.3lf`\n\t对于字符串是打印字符的最大数量\n\t只使用点%.f与%.0f相同。\n3. 使用ll表示long long `%lld`\n4. 使用l，对于整型表示long int，对于浮点型表示double\n5. 各种标记：\n\t1. 在数字前加符号为左对齐\n\t2. + 是为了把在有符号数开头加'+'或者'-'。\n\t3. 加0对于多于的字段宽度填充0，如`%04d`\n\t\t对于1，返回的是0001.\n\t\t4.加入 * 决定填入数字，\n\t\t需要在参数列表中新加入一个变量。\n\t\t 常见形式为`%*lf`\n\n## scanf修饰符\n1. * 只读取不赋值，这对于无用数据是有用处的 形式为类似`%*d`\n\td可以任意换，以下的所有实例中的d都可以换成其他类型\n2. 同样的加数字为取字段的宽，有多长取多长，别的截掉。\n\n这就是最近关于输入输出想和大家分享的内容。\n\n\n\n","source":"_posts/输入与输出.md","raw":"---\ntitle: 输入与输出\ndate: 2023-11-20 09:46:35\ntags: C语言学习\n---\n从字符串那里，包括之前听C语言群里大佬说\n也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。\n今天也一并分享给大家。\n\n## 1.stdio.h中的更多的函数\n(关于stream与参数列表的不讲，还没学到。)\n\n类似的，应该你们也听说过，这里列一下。\n\n```C\nint sprintf(char *str, const char *format);\nint sscanf(const char *str, const char *format, ...);\n```\n### 一.函数定义读法\n\n这里是纯纯的函数函数定义，看起来可能很抽象，\n**没关系，我会出手。**\n\n总体上一讲，以后见到**前面带f**的一般是有关`stream`的\n**带v的**一般是有关`参数列表`的，\n以后看到学长写类似的函数就知道该多学习了!😂\n\n对于以后看这样的函数定义，首先看[返回值类型]，\n一般是，返回处理的结果或者返回一个数值（int/double)\n\n然后如果看不懂函数名的话，\n先看[括号中的形式参数]，知道我们需要输入的是什么东西。\n\n>比如这两个函数中\n>**const**是数据类型的修饰符，表示常量。\n>char* 表示字符串、后面的是形式参数名，不需要管。\n\n最后，通过[看实例]与函数的[概述]得知函数的作用。\n在菜鸟教程里都一条一条地列出来的，每一条都有实例。\n\n在最后一篇文章的最后会给大家列出来用过的这些网站。\n\n### 二.浅谈没讲过的sscanf()函数\n\n上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。\n现在就来讲一讲相对的sscanf函数。\n\n不多说，直接上函数定义。\n```C\nint sscanf(const char *str, const char *format, ...);\n```\n\n首先看**返回值**\n这个函数返回的是一个数值，也就像scanf一样\n函数返回的是成功赋值与匹配的个数。\n如果到达文件末尾或者错误返回EOF。\n\n然后看**形参**\n获取的是字符串常量(`const char *str`)，\n\t这个字符串，是包含着我们想要赋值数据的字符串。\n写入形式(`const char *format`)\n\t写入形式相当于格式化符，相当于赋值的顺序）\n\t尽量不要加新的形式。\n与参数列表(`...`)。\n\t对应之前的格式化符。\n关于参数列表，其实简单的说\n就是我们printf中标准符后边逗号中的内容\n见下方。\n\n```C\nint a,b,c;\nscanf(\"%d %d %d\",&a,&b,&c);\n//后面的a,b,c就是参数列表\n//%d的这个字符串就是写入形式的一种形式\n```\n\n所以这个函数的**功能**就是\n>1.从字符串中获取数据，\n>2.然后赋给格式化符的对应的变量。\n\nsscanf不需要我们自己输入，在字符串中有就好。\n\n所以更多的惯例自己去菜鸟教程上查就好，\n**建议立即行动，不然一定会忘记。**\n\n## 二.关于我们的输入输出\n\n>以下内容取自空梦大大的博客\n>[如何理解c/c++中的输入/输出函数？ | 山岳库博](https://kmar.top/posts/51c9b0a0/)\n>我们这里梳理的是，我们这个阶段可以用到的符号。\n\n### 1.关于格式化符与printf、scanf修饰符\n\n格式化符我们需要知道的如下，之前在题中也出过。\n\t1. %d/%lf/%f/%c 整数、字符、浮点数\n\t2. %s 字符串输入与输出。\n\t3. %x/%X - 十六进制整数 或者 %o 八进制整数\n\t4. %%两个百分号一起用可以输出%号，相当于转义了。\n%%\n掌握了这些我们就不太用怕需要的数据表示不出来了。\n现在看来老师教的还是不是很够，第一个都用过时了。\n\n## printf修饰符\n1. 加数字，右对齐字符宽度。-实例：`printf(\"%4d\",n);`\n2. .数字，对于小数表示小数后位数，比如`%.3lf`\n\t对于字符串是打印字符的最大数量\n\t只使用点%.f与%.0f相同。\n3. 使用ll表示long long `%lld`\n4. 使用l，对于整型表示long int，对于浮点型表示double\n5. 各种标记：\n\t1. 在数字前加符号为左对齐\n\t2. + 是为了把在有符号数开头加'+'或者'-'。\n\t3. 加0对于多于的字段宽度填充0，如`%04d`\n\t\t对于1，返回的是0001.\n\t\t4.加入 * 决定填入数字，\n\t\t需要在参数列表中新加入一个变量。\n\t\t 常见形式为`%*lf`\n\n## scanf修饰符\n1. * 只读取不赋值，这对于无用数据是有用处的 形式为类似`%*d`\n\td可以任意换，以下的所有实例中的d都可以换成其他类型\n2. 同样的加数字为取字段的宽，有多长取多长，别的截掉。\n\n这就是最近关于输入输出想和大家分享的内容。\n\n\n\n","slug":"输入与输出","published":1,"updated":"2023-11-20T01:50:17.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clp6949ej000kh4ueecp51kz7","content":"<p>从字符串那里，包括之前听C语言群里大佬说<br>也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。<br>今天也一并分享给大家。</p>\n<h2 id=\"1-stdio-h中的更多的函数\"><a href=\"#1-stdio-h中的更多的函数\" class=\"headerlink\" title=\"1.stdio.h中的更多的函数\"></a>1.stdio.h中的更多的函数</h2><p>(关于stream与参数列表的不讲，还没学到。)</p>\n<p>类似的，应该你们也听说过，这里列一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sprintf</span><span class=\"params\">(<span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一-函数定义读法\"><a href=\"#一-函数定义读法\" class=\"headerlink\" title=\"一.函数定义读法\"></a>一.函数定义读法</h3><p>这里是纯纯的函数函数定义，看起来可能很抽象，<br><strong>没关系，我会出手。</strong></p>\n<p>总体上一讲，以后见到<strong>前面带f</strong>的一般是有关<code>stream</code>的<br><strong>带v的</strong>一般是有关<code>参数列表</code>的，<br>以后看到学长写类似的函数就知道该多学习了!😂</p>\n<p>对于以后看这样的函数定义，首先看[返回值类型]，<br>一般是，返回处理的结果或者返回一个数值（int&#x2F;double)</p>\n<p>然后如果看不懂函数名的话，<br>先看[括号中的形式参数]，知道我们需要输入的是什么东西。</p>\n<blockquote>\n<p>比如这两个函数中<br><strong>const</strong>是数据类型的修饰符，表示常量。<br>char* 表示字符串、后面的是形式参数名，不需要管。</p>\n</blockquote>\n<p>最后，通过[看实例]与函数的[概述]得知函数的作用。<br>在菜鸟教程里都一条一条地列出来的，每一条都有实例。</p>\n<p>在最后一篇文章的最后会给大家列出来用过的这些网站。</p>\n<h3 id=\"二-浅谈没讲过的sscanf-函数\"><a href=\"#二-浅谈没讲过的sscanf-函数\" class=\"headerlink\" title=\"二.浅谈没讲过的sscanf()函数\"></a>二.浅谈没讲过的sscanf()函数</h3><p>上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。<br>现在就来讲一讲相对的sscanf函数。</p>\n<p>不多说，直接上函数定义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>首先看<strong>返回值</strong><br>这个函数返回的是一个数值，也就像scanf一样<br>函数返回的是成功赋值与匹配的个数。<br>如果到达文件末尾或者错误返回EOF。</p>\n<p>然后看<strong>形参</strong><br>获取的是字符串常量(<code>const char *str</code>)，<br>    这个字符串，是包含着我们想要赋值数据的字符串。<br>写入形式(<code>const char *format</code>)<br>    写入形式相当于格式化符，相当于赋值的顺序）<br>    尽量不要加新的形式。<br>与参数列表(<code>...</code>)。<br>    对应之前的格式化符。<br>关于参数列表，其实简单的说<br>就是我们printf中标准符后边逗号中的内容<br>见下方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\"><span class=\"comment\">//后面的a,b,c就是参数列表</span></span><br><span class=\"line\"><span class=\"comment\">//%d的这个字符串就是写入形式的一种形式</span></span><br></pre></td></tr></table></figure>\n\n<p>所以这个函数的<strong>功能</strong>就是</p>\n<blockquote>\n<p>1.从字符串中获取数据，<br>2.然后赋给格式化符的对应的变量。</p>\n</blockquote>\n<p>sscanf不需要我们自己输入，在字符串中有就好。</p>\n<p>所以更多的惯例自己去菜鸟教程上查就好，<br><strong>建议立即行动，不然一定会忘记。</strong></p>\n<h2 id=\"二-关于我们的输入输出\"><a href=\"#二-关于我们的输入输出\" class=\"headerlink\" title=\"二.关于我们的输入输出\"></a>二.关于我们的输入输出</h2><blockquote>\n<p>以下内容取自空梦大大的博客<br><a href=\"https://kmar.top/posts/51c9b0a0/\">如何理解c&#x2F;c++中的输入&#x2F;输出函数？ | 山岳库博</a><br>我们这里梳理的是，我们这个阶段可以用到的符号。</p>\n</blockquote>\n<h3 id=\"1-关于格式化符与printf、scanf修饰符\"><a href=\"#1-关于格式化符与printf、scanf修饰符\" class=\"headerlink\" title=\"1.关于格式化符与printf、scanf修饰符\"></a>1.关于格式化符与printf、scanf修饰符</h3><p>格式化符我们需要知道的如下，之前在题中也出过。<br>    1. %d&#x2F;%lf&#x2F;%f&#x2F;%c 整数、字符、浮点数<br>    2. %s 字符串输入与输出。<br>    3. %x&#x2F;%X - 十六进制整数 或者 %o 八进制整数<br>    4. %%两个百分号一起用可以输出%号，相当于转义了。<br>%%<br>掌握了这些我们就不太用怕需要的数据表示不出来了。<br>现在看来老师教的还是不是很够，第一个都用过时了。</p>\n<h2 id=\"printf修饰符\"><a href=\"#printf修饰符\" class=\"headerlink\" title=\"printf修饰符\"></a>printf修饰符</h2><ol>\n<li>加数字，右对齐字符宽度。-实例：<code>printf(&quot;%4d&quot;,n);</code></li>\n<li>.数字，对于小数表示小数后位数，比如<code>%.3lf</code><br> 对于字符串是打印字符的最大数量<br> 只使用点%.f与%.0f相同。</li>\n<li>使用ll表示long long <code>%lld</code></li>\n<li>使用l，对于整型表示long int，对于浮点型表示double</li>\n<li>各种标记：<ol>\n<li>在数字前加符号为左对齐</li>\n<li><ul>\n<li>是为了把在有符号数开头加’+’或者’-‘。</li>\n</ul>\n</li>\n<li>加0对于多于的字段宽度填充0，如<code>%04d</code><br> 对于1，返回的是0001.<br> 4.加入 * 决定填入数字，<br> 需要在参数列表中新加入一个变量。<br>  常见形式为<code>%*lf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"scanf修饰符\"><a href=\"#scanf修饰符\" class=\"headerlink\" title=\"scanf修饰符\"></a>scanf修饰符</h2><ol>\n<li><ul>\n<li>只读取不赋值，这对于无用数据是有用处的 形式为类似<code>%*d</code><br> d可以任意换，以下的所有实例中的d都可以换成其他类型</li>\n</ul>\n</li>\n<li>同样的加数字为取字段的宽，有多长取多长，别的截掉。</li>\n</ol>\n<p>这就是最近关于输入输出想和大家分享的内容。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>从字符串那里，包括之前听C语言群里大佬说<br>也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。<br>今天也一并分享给大家。</p>\n<h2 id=\"1-stdio-h中的更多的函数\"><a href=\"#1-stdio-h中的更多的函数\" class=\"headerlink\" title=\"1.stdio.h中的更多的函数\"></a>1.stdio.h中的更多的函数</h2><p>(关于stream与参数列表的不讲，还没学到。)</p>\n<p>类似的，应该你们也听说过，这里列一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sprintf</span><span class=\"params\">(<span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一-函数定义读法\"><a href=\"#一-函数定义读法\" class=\"headerlink\" title=\"一.函数定义读法\"></a>一.函数定义读法</h3><p>这里是纯纯的函数函数定义，看起来可能很抽象，<br><strong>没关系，我会出手。</strong></p>\n<p>总体上一讲，以后见到<strong>前面带f</strong>的一般是有关<code>stream</code>的<br><strong>带v的</strong>一般是有关<code>参数列表</code>的，<br>以后看到学长写类似的函数就知道该多学习了!😂</p>\n<p>对于以后看这样的函数定义，首先看[返回值类型]，<br>一般是，返回处理的结果或者返回一个数值（int&#x2F;double)</p>\n<p>然后如果看不懂函数名的话，<br>先看[括号中的形式参数]，知道我们需要输入的是什么东西。</p>\n<blockquote>\n<p>比如这两个函数中<br><strong>const</strong>是数据类型的修饰符，表示常量。<br>char* 表示字符串、后面的是形式参数名，不需要管。</p>\n</blockquote>\n<p>最后，通过[看实例]与函数的[概述]得知函数的作用。<br>在菜鸟教程里都一条一条地列出来的，每一条都有实例。</p>\n<p>在最后一篇文章的最后会给大家列出来用过的这些网站。</p>\n<h3 id=\"二-浅谈没讲过的sscanf-函数\"><a href=\"#二-浅谈没讲过的sscanf-函数\" class=\"headerlink\" title=\"二.浅谈没讲过的sscanf()函数\"></a>二.浅谈没讲过的sscanf()函数</h3><p>上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。<br>现在就来讲一讲相对的sscanf函数。</p>\n<p>不多说，直接上函数定义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>首先看<strong>返回值</strong><br>这个函数返回的是一个数值，也就像scanf一样<br>函数返回的是成功赋值与匹配的个数。<br>如果到达文件末尾或者错误返回EOF。</p>\n<p>然后看<strong>形参</strong><br>获取的是字符串常量(<code>const char *str</code>)，<br>    这个字符串，是包含着我们想要赋值数据的字符串。<br>写入形式(<code>const char *format</code>)<br>    写入形式相当于格式化符，相当于赋值的顺序）<br>    尽量不要加新的形式。<br>与参数列表(<code>...</code>)。<br>    对应之前的格式化符。<br>关于参数列表，其实简单的说<br>就是我们printf中标准符后边逗号中的内容<br>见下方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\"><span class=\"comment\">//后面的a,b,c就是参数列表</span></span><br><span class=\"line\"><span class=\"comment\">//%d的这个字符串就是写入形式的一种形式</span></span><br></pre></td></tr></table></figure>\n\n<p>所以这个函数的<strong>功能</strong>就是</p>\n<blockquote>\n<p>1.从字符串中获取数据，<br>2.然后赋给格式化符的对应的变量。</p>\n</blockquote>\n<p>sscanf不需要我们自己输入，在字符串中有就好。</p>\n<p>所以更多的惯例自己去菜鸟教程上查就好，<br><strong>建议立即行动，不然一定会忘记。</strong></p>\n<h2 id=\"二-关于我们的输入输出\"><a href=\"#二-关于我们的输入输出\" class=\"headerlink\" title=\"二.关于我们的输入输出\"></a>二.关于我们的输入输出</h2><blockquote>\n<p>以下内容取自空梦大大的博客<br><a href=\"https://kmar.top/posts/51c9b0a0/\">如何理解c&#x2F;c++中的输入&#x2F;输出函数？ | 山岳库博</a><br>我们这里梳理的是，我们这个阶段可以用到的符号。</p>\n</blockquote>\n<h3 id=\"1-关于格式化符与printf、scanf修饰符\"><a href=\"#1-关于格式化符与printf、scanf修饰符\" class=\"headerlink\" title=\"1.关于格式化符与printf、scanf修饰符\"></a>1.关于格式化符与printf、scanf修饰符</h3><p>格式化符我们需要知道的如下，之前在题中也出过。<br>    1. %d&#x2F;%lf&#x2F;%f&#x2F;%c 整数、字符、浮点数<br>    2. %s 字符串输入与输出。<br>    3. %x&#x2F;%X - 十六进制整数 或者 %o 八进制整数<br>    4. %%两个百分号一起用可以输出%号，相当于转义了。<br>%%<br>掌握了这些我们就不太用怕需要的数据表示不出来了。<br>现在看来老师教的还是不是很够，第一个都用过时了。</p>\n<h2 id=\"printf修饰符\"><a href=\"#printf修饰符\" class=\"headerlink\" title=\"printf修饰符\"></a>printf修饰符</h2><ol>\n<li>加数字，右对齐字符宽度。-实例：<code>printf(&quot;%4d&quot;,n);</code></li>\n<li>.数字，对于小数表示小数后位数，比如<code>%.3lf</code><br> 对于字符串是打印字符的最大数量<br> 只使用点%.f与%.0f相同。</li>\n<li>使用ll表示long long <code>%lld</code></li>\n<li>使用l，对于整型表示long int，对于浮点型表示double</li>\n<li>各种标记：<ol>\n<li>在数字前加符号为左对齐</li>\n<li><ul>\n<li>是为了把在有符号数开头加’+’或者’-‘。</li>\n</ul>\n</li>\n<li>加0对于多于的字段宽度填充0，如<code>%04d</code><br> 对于1，返回的是0001.<br> 4.加入 * 决定填入数字，<br> 需要在参数列表中新加入一个变量。<br>  常见形式为<code>%*lf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"scanf修饰符\"><a href=\"#scanf修饰符\" class=\"headerlink\" title=\"scanf修饰符\"></a>scanf修饰符</h2><ol>\n<li><ul>\n<li>只读取不赋值，这对于无用数据是有用处的 形式为类似<code>%*d</code><br> d可以任意换，以下的所有实例中的d都可以换成其他类型</li>\n</ul>\n</li>\n<li>同样的加数字为取字段的宽，有多长取多长，别的截掉。</li>\n</ol>\n<p>这就是最近关于输入输出想和大家分享的内容。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clp6949eg000ah4ued9g5a9ch","category_id":"clp6949ei000fh4ue70s29wmz","_id":"clp6949ek000oh4uecok95z6z"}],"PostTag":[{"post_id":"clp6949ef0008h4uefu7l3bey","tag_id":"clp6949ed0004h4ue6949408v","_id":"clp6949eh000ch4uedbxj8uys"},{"post_id":"clp6949e90001h4ueadpxanhc","tag_id":"clp6949ed0004h4ue6949408v","_id":"clp6949ej000gh4uedhyzcdc8"},{"post_id":"clp6949ec0003h4ue1pmsf07d","tag_id":"clp6949ed0004h4ue6949408v","_id":"clp6949ej000jh4uea9924xt1"},{"post_id":"clp6949ej000hh4uehbf3397k","tag_id":"clp6949ed0004h4ue6949408v","_id":"clp6949ek000lh4uehocjhl17"},{"post_id":"clp6949ej000kh4ueecp51kz7","tag_id":"clp6949ed0004h4ue6949408v","_id":"clp6949ek000mh4ue770y9um7"},{"post_id":"clp6949ei000eh4ue5pz95jko","tag_id":"clp6949ej000ih4ueci9l2ujf","_id":"clp6949ek000nh4uehnj6gf0m"}],"Tag":[{"name":"C语言学习","_id":"clp6949ed0004h4ue6949408v"},{"name":"学习资源","_id":"clp6949ej000ih4ueci9l2ujf"}]}}