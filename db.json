{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/Annie/source/css/Annie.styl","path":"css/Annie.styl","modified":1,"renderable":1},{"_id":"themes/Annie/source/css/comment.styl","path":"css/comment.styl","modified":1,"renderable":1},{"_id":"themes/Annie/source/js/leancloud-count.js","path":"js/leancloud-count.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/Annie_qq_qrcode.jpg","path":"img/Annie_qq_qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/lazy.gif","path":"img/lazy.gif","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/cart_cover.jpg","path":"img/cart_cover.jpg","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/header-bg.jpg","path":"img/header-bg.jpg","modified":1,"renderable":1},{"_id":"themes/Annie/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/Annie/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/Annie/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/chinese/chinese.js","path":"plugin/chinese/chinese.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/clipboard/clipboard.js","path":"plugin/clipboard/clipboard.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/comment/valine.min.js","path":"plugin/comment/valine.min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/fancybox/jquery.fancybox.css","path":"plugin/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/fancybox/jquery.fancybox.js","path":"plugin/fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/data.json","path":"plugin/gallerypage/data.json","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/imagelazyloader/yall.min.js","path":"plugin/imagelazyloader/yall.min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/imageloaded/imagesloaded.pkgd.min.js","path":"plugin/imageloaded/imagesloaded.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/jquery/jquery.min.js","path":"plugin/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/leancloud/av-min.js","path":"plugin/leancloud/av-min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/natural-gallery.full.css","path":"plugin/gallerypage/natural-gallery.full.css","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/love/love.js","path":"plugin/love/love.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/motto/motto.js","path":"plugin/motto/motto.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/nicescroll/jquery.nicescroll.js","path":"plugin/nicescroll/jquery.nicescroll.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/natural-gallery.full.js","path":"plugin/gallerypage/natural-gallery.full.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/resizediv/resizediv.js","path":"plugin/resizediv/resizediv.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/search/ziploader.js","path":"plugin/search/ziploader.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/toc/katelog.min.js","path":"plugin/toc/katelog.min.js","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/quote/danger.svg","path":"img/quote/danger.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/natural.css","path":"plugin/gallerypage/natural.css","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/quote/warning.svg","path":"img/quote/warning.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/quote/info.svg","path":"img/quote/info.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/quote/quote-left.svg","path":"img/quote/quote-left.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/img/quote/success.svg","path":"img/quote/success.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/images/default-skin.svg","path":"plugin/gallerypage/images/default-skin.svg","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/images/default-skin.png","path":"plugin/gallerypage/images/default-skin.png","modified":1,"renderable":1},{"_id":"themes/Annie/source/plugin/gallerypage/images/preloader.gif","path":"plugin/gallerypage/images/preloader.gif","modified":1,"renderable":1},{"_id":"themes/ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/gitee.png","path":"images/gitee.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","path":"images/hexo-tag-chart.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo.png","path":"images/hexo.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","path":"js/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.css","path":"css/fonts/remixicon.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","path":"css/fonts/remixicon.woff","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","path":"css/fonts/remixicon.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","path":"css/fonts/remixicon.ttf","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","path":"css/fonts/remixicon.eot","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","path":"css/fonts/remixicon.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/img/3.png","path":"img/3.png","modified":0,"renderable":0},{"_id":"source/img/1.png","path":"img/1.png","modified":0,"renderable":0},{"_id":"source/img/2.png","path":"img/2.png","modified":0,"renderable":0},{"_id":"source/img/OJclown.png","path":"img/OJclown.png","modified":0,"renderable":0},{"_id":"themes/one/source/012cf6a10129e2275d79d6adac7f3b02.woff","path":"012cf6a10129e2275d79d6adac7f3b02.woff","modified":0,"renderable":1},{"_id":"themes/one/source/570eb83859dc23dd0eec423a49e147fe.woff2","path":"570eb83859dc23dd0eec423a49e147fe.woff2","modified":0,"renderable":1},{"_id":"themes/one/source/52342c4f7685bd4be2f462665845d4e9.js","path":"52342c4f7685bd4be2f462665845d4e9.js","modified":0,"renderable":1},{"_id":"themes/one/source/bundle.js","path":"bundle.js","modified":0,"renderable":1},{"_id":"themes/one/source/a37b0c01c0baf1888ca812cc0508f6e2.ttf","path":"a37b0c01c0baf1888ca812cc0508f6e2.ttf","modified":0,"renderable":1},{"_id":"themes/one/source/e79bfd88537def476913f3ed52f4f4b3.eot","path":"e79bfd88537def476913f3ed52f4f4b3.eot","modified":0,"renderable":1},{"_id":"themes/one/source/bundle.js.map","path":"bundle.js.map","modified":0,"renderable":1},{"_id":"themes/one/source/index.html","path":"index.html","modified":0,"renderable":1},{"_id":"themes/one/source/embed.js","path":"embed.js","modified":0,"renderable":1},{"_id":"themes/one/source/vendor.js.map","path":"vendor.js.map","modified":0,"renderable":1},{"_id":"themes/one/source/vendor.js","path":"vendor.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ocean/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/hexo.svg","path":"images/hexo.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/forrestgump.png","path":"images/forrestgump.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/hexo-inverted.svg","path":"images/hexo-inverted.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/ocean.js","path":"js/ocean.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/jquery.justifiedGallery.min.js","path":"js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/pace.min.js","path":"js/pace.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","path":"css/feathericon/feathericon.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","path":"css/feathericon/feathericon.ttf","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","path":"css/feathericon/feathericon.woff","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","path":"css/feathericon/feathericon.woff2","modified":0,"renderable":1},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.eot","path":"fonts/raleway_medium/Raleway-Medium.eot","modified":0,"renderable":1},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.svg","path":"fonts/raleway_medium/Raleway-Medium.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.ttf","path":"fonts/raleway_medium/Raleway-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.woff","path":"fonts/raleway_medium/Raleway-Medium.woff","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","path":"images/ocean/ocean.mp4","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","path":"images/ocean/ocean.ogv","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.png","path":"images/ocean/ocean.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","path":"images/ocean/overlay-hero.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","path":"css/feathericon/feathericon.eot","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.webm","path":"images/ocean/ocean.webm","modified":0,"renderable":1},{"_id":"themes/flexblock/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/flexblock/source/icons-192.png","path":"icons-192.png","modified":0,"renderable":1},{"_id":"themes/flexblock/source/icons-512.png","path":"icons-512.png","modified":0,"renderable":1},{"_id":"themes/flexblock/source/manifest.json","path":"manifest.json","modified":0,"renderable":1},{"_id":"themes/flexblock/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/flexblock/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/cola/source/css/APlayer.min.css","path":"css/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/css/markdown-theme.css","path":"css/markdown-theme.css","modified":0,"renderable":1},{"_id":"themes/cola/source/css/iconfont.styl","path":"css/iconfont.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/cola/source/css/mobile.styl","path":"css/mobile.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/css/public.styl","path":"css/public.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/imgs/404.png","path":"imgs/404.png","modified":0,"renderable":1},{"_id":"themes/cola/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/imgs/avatar-bg.jpeg","path":"imgs/avatar-bg.jpeg","modified":0,"renderable":1},{"_id":"themes/cola/source/imgs/bg-cover.jpeg","path":"imgs/bg-cover.jpeg","modified":0,"renderable":1},{"_id":"themes/cola/source/imgs/avatar.jpg","path":"imgs/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/cola/source/imgs/default-cover.webp","path":"imgs/default-cover.webp","modified":0,"renderable":1},{"_id":"themes/cola/source/imgs/default-cover.jpeg","path":"imgs/default-cover.jpeg","modified":0,"renderable":1},{"_id":"themes/cola/source/imgs/shortcut-icon.ico","path":"imgs/shortcut-icon.ico","modified":0,"renderable":1},{"_id":"themes/cola/source/imgs/top-cover.jpeg","path":"imgs/top-cover.jpeg","modified":0,"renderable":1},{"_id":"themes/cola/source/music/kabuda.mp3","path":"music/kabuda.mp3","modified":0,"renderable":1},{"_id":"themes/cola/source/music/八连杀.mp3","path":"music/八连杀.mp3","modified":0,"renderable":1},{"_id":"themes/cola/source/js/APlayer.min.js","path":"js/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/jquery.pjax.min.js","path":"js/jquery.pjax.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/prism.js","path":"js/prism.js","modified":0,"renderable":1},{"_id":"themes/cola/source/css/partial/about.styl","path":"css/partial/about.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/css/partial/archive.styl","path":"css/partial/archive.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/css/partial/article.styl","path":"css/partial/article.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/css/partial/empty.styl","path":"css/partial/empty.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/css/partial/categories.styl","path":"css/partial/categories.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/css/partial/index.styl","path":"css/partial/index.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/css/partial/tools.styl","path":"css/partial/tools.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/css/partial/tags.styl","path":"css/partial/tags.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/css/partial/link.styl","path":"css/partial/link.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/imgs/log/coffee.jpg","path":"imgs/log/coffee.jpg","modified":0,"renderable":1},{"_id":"themes/cola/source/imgs/log/street1.jpg","path":"imgs/log/street1.jpg","modified":0,"renderable":1},{"_id":"themes/cola/source/css/partial/log.styl","path":"css/partial/log.styl","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/DIGESTS.md","path":"js/highlight/DIGESTS.md","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/LICENSE","path":"js/highlight/LICENSE","modified":0,"renderable":1},{"_id":"themes/cola/source/imgs/log/street2.jpg","path":"imgs/log/street2.jpg","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/README.md","path":"js/highlight/README.md","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/highlight.js","path":"js/highlight/highlight.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/highlight.min.js","path":"js/highlight/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/package.json","path":"js/highlight/package.json","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/es/core.js","path":"js/highlight/es/core.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/es/highlight.js","path":"js/highlight/es/highlight.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/es/core.min.js","path":"js/highlight/es/core.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/es/highlight.min.js","path":"js/highlight/es/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/es/package.json","path":"js/highlight/es/package.json","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/a11y-dark.min.css","path":"js/highlight/styles/a11y-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/androidstudio.min.css","path":"js/highlight/styles/androidstudio.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/a11y-light.min.css","path":"js/highlight/styles/a11y-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/agate.min.css","path":"js/highlight/styles/agate.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/arduino-light.min.css","path":"js/highlight/styles/arduino-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/an-old-hope.min.css","path":"js/highlight/styles/an-old-hope.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/atom-one-dark-reasonable.min.css","path":"js/highlight/styles/atom-one-dark-reasonable.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/arta.min.css","path":"js/highlight/styles/arta.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/ascetic.min.css","path":"js/highlight/styles/ascetic.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/atom-one-light.min.css","path":"js/highlight/styles/atom-one-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/brown-papersq.png","path":"js/highlight/styles/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/brown-paper.min.css","path":"js/highlight/styles/brown-paper.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/atom-one-dark.min.css","path":"js/highlight/styles/atom-one-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/color-brewer.min.css","path":"js/highlight/styles/color-brewer.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/codepen-embed.min.css","path":"js/highlight/styles/codepen-embed.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/dark.min.css","path":"js/highlight/styles/dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/default.min.css","path":"js/highlight/styles/default.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/devibeans.min.css","path":"js/highlight/styles/devibeans.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/docco.min.css","path":"js/highlight/styles/docco.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/foundation.min.css","path":"js/highlight/styles/foundation.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/felipec.min.css","path":"js/highlight/styles/felipec.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/far.min.css","path":"js/highlight/styles/far.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/github-dark.min.css","path":"js/highlight/styles/github-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/github.min.css","path":"js/highlight/styles/github.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/github-dark-dimmed.min.css","path":"js/highlight/styles/github-dark-dimmed.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/gml.min.css","path":"js/highlight/styles/gml.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/gradient-dark.min.css","path":"js/highlight/styles/gradient-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/googlecode.min.css","path":"js/highlight/styles/googlecode.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/gradient-light.min.css","path":"js/highlight/styles/gradient-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/grayscale.min.css","path":"js/highlight/styles/grayscale.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/hybrid.min.css","path":"js/highlight/styles/hybrid.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/idea.min.css","path":"js/highlight/styles/idea.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/isbl-editor-dark.min.css","path":"js/highlight/styles/isbl-editor-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/isbl-editor-light.min.css","path":"js/highlight/styles/isbl-editor-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/intellij-light.min.css","path":"js/highlight/styles/intellij-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/ir-black.min.css","path":"js/highlight/styles/ir-black.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/kimbie-dark.min.css","path":"js/highlight/styles/kimbie-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/kimbie-light.min.css","path":"js/highlight/styles/kimbie-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/lightfair.min.css","path":"js/highlight/styles/lightfair.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/magula.min.css","path":"js/highlight/styles/magula.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/lioshi.min.css","path":"js/highlight/styles/lioshi.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/mono-blue.min.css","path":"js/highlight/styles/mono-blue.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/monokai.min.css","path":"js/highlight/styles/monokai.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/nnfx-dark.min.css","path":"js/highlight/styles/nnfx-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/monokai-sublime.min.css","path":"js/highlight/styles/monokai-sublime.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/night-owl.min.css","path":"js/highlight/styles/night-owl.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/nnfx-light.min.css","path":"js/highlight/styles/nnfx-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/nord.min.css","path":"js/highlight/styles/nord.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/panda-syntax-light.min.css","path":"js/highlight/styles/panda-syntax-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/obsidian.min.css","path":"js/highlight/styles/obsidian.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/panda-syntax-dark.min.css","path":"js/highlight/styles/panda-syntax-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/paraiso-dark.min.css","path":"js/highlight/styles/paraiso-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/paraiso-light.min.css","path":"js/highlight/styles/paraiso-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/purebasic.min.css","path":"js/highlight/styles/purebasic.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/pojoaque.jpg","path":"js/highlight/styles/pojoaque.jpg","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/pojoaque.min.css","path":"js/highlight/styles/pojoaque.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/qtcreator-dark.min.css","path":"js/highlight/styles/qtcreator-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/qtcreator-light.min.css","path":"js/highlight/styles/qtcreator-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/school-book.min.css","path":"js/highlight/styles/school-book.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/rainbow.min.css","path":"js/highlight/styles/rainbow.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/routeros.min.css","path":"js/highlight/styles/routeros.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/shades-of-purple.min.css","path":"js/highlight/styles/shades-of-purple.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/srcery.min.css","path":"js/highlight/styles/srcery.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/sunburst.min.css","path":"js/highlight/styles/sunburst.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/tokyo-night-dark.min.css","path":"js/highlight/styles/tokyo-night-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/stackoverflow-dark.min.css","path":"js/highlight/styles/stackoverflow-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/stackoverflow-light.min.css","path":"js/highlight/styles/stackoverflow-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/tokyo-night-light.min.css","path":"js/highlight/styles/tokyo-night-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/tomorrow-night-blue.min.css","path":"js/highlight/styles/tomorrow-night-blue.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/vs2015.min.css","path":"js/highlight/styles/vs2015.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/tomorrow-night-bright.min.css","path":"js/highlight/styles/tomorrow-night-bright.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/vs.min.css","path":"js/highlight/styles/vs.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/xcode.min.css","path":"js/highlight/styles/xcode.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/xt256.min.css","path":"js/highlight/styles/xt256.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/3024.min.css","path":"js/highlight/styles/base16/3024.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/apathy.min.css","path":"js/highlight/styles/base16/apathy.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/apprentice.min.css","path":"js/highlight/styles/base16/apprentice.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/ashes.min.css","path":"js/highlight/styles/base16/ashes.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-cave-light.min.css","path":"js/highlight/styles/base16/atelier-cave-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-dune-light.min.css","path":"js/highlight/styles/base16/atelier-dune-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-dune.min.css","path":"js/highlight/styles/base16/atelier-dune.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-cave.min.css","path":"js/highlight/styles/base16/atelier-cave.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-estuary.min.css","path":"js/highlight/styles/base16/atelier-estuary.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-estuary-light.min.css","path":"js/highlight/styles/base16/atelier-estuary-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-heath-light.min.css","path":"js/highlight/styles/base16/atelier-heath-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-forest.min.css","path":"js/highlight/styles/base16/atelier-forest.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-heath.min.css","path":"js/highlight/styles/base16/atelier-heath.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-forest-light.min.css","path":"js/highlight/styles/base16/atelier-forest-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-lakeside-light.min.css","path":"js/highlight/styles/base16/atelier-lakeside-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-plateau-light.min.css","path":"js/highlight/styles/base16/atelier-plateau-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-plateau.min.css","path":"js/highlight/styles/base16/atelier-plateau.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-lakeside.min.css","path":"js/highlight/styles/base16/atelier-lakeside.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-savanna-light.min.css","path":"js/highlight/styles/base16/atelier-savanna-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-savanna.min.css","path":"js/highlight/styles/base16/atelier-savanna.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-seaside-light.min.css","path":"js/highlight/styles/base16/atelier-seaside-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-sulphurpool-light.min.css","path":"js/highlight/styles/base16/atelier-sulphurpool-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-seaside.min.css","path":"js/highlight/styles/base16/atelier-seaside.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-sulphurpool.min.css","path":"js/highlight/styles/base16/atelier-sulphurpool.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/bespin.min.css","path":"js/highlight/styles/base16/bespin.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/atlas.min.css","path":"js/highlight/styles/base16/atlas.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-burzum.min.css","path":"js/highlight/styles/base16/black-metal-burzum.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-gorgoroth.min.css","path":"js/highlight/styles/base16/black-metal-gorgoroth.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-immortal.min.css","path":"js/highlight/styles/base16/black-metal-immortal.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-dark-funeral.min.css","path":"js/highlight/styles/base16/black-metal-dark-funeral.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-khold.min.css","path":"js/highlight/styles/base16/black-metal-khold.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-marduk.min.css","path":"js/highlight/styles/base16/black-metal-marduk.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-bathory.min.css","path":"js/highlight/styles/base16/black-metal-bathory.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-mayhem.min.css","path":"js/highlight/styles/base16/black-metal-mayhem.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-nile.min.css","path":"js/highlight/styles/base16/black-metal-nile.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-venom.min.css","path":"js/highlight/styles/base16/black-metal-venom.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal.min.css","path":"js/highlight/styles/base16/black-metal.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/brewer.min.css","path":"js/highlight/styles/base16/brewer.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/bright.min.css","path":"js/highlight/styles/base16/bright.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/brogrammer.min.css","path":"js/highlight/styles/base16/brogrammer.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/brush-trees-dark.min.css","path":"js/highlight/styles/base16/brush-trees-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/brush-trees.min.css","path":"js/highlight/styles/base16/brush-trees.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/chalk.min.css","path":"js/highlight/styles/base16/chalk.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/circus.min.css","path":"js/highlight/styles/base16/circus.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/classic-dark.min.css","path":"js/highlight/styles/base16/classic-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/classic-light.min.css","path":"js/highlight/styles/base16/classic-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/codeschool.min.css","path":"js/highlight/styles/base16/codeschool.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/colors.min.css","path":"js/highlight/styles/base16/colors.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/cupcake.min.css","path":"js/highlight/styles/base16/cupcake.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/cupertino.min.css","path":"js/highlight/styles/base16/cupertino.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/danqing.min.css","path":"js/highlight/styles/base16/danqing.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/darcula.min.css","path":"js/highlight/styles/base16/darcula.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/darkmoss.min.css","path":"js/highlight/styles/base16/darkmoss.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/darktooth.min.css","path":"js/highlight/styles/base16/darktooth.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/dark-violet.min.css","path":"js/highlight/styles/base16/dark-violet.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/decaf.min.css","path":"js/highlight/styles/base16/decaf.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/default-dark.min.css","path":"js/highlight/styles/base16/default-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/default-light.min.css","path":"js/highlight/styles/base16/default-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/dirtysea.min.css","path":"js/highlight/styles/base16/dirtysea.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/dracula.min.css","path":"js/highlight/styles/base16/dracula.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/edge-dark.min.css","path":"js/highlight/styles/base16/edge-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/edge-light.min.css","path":"js/highlight/styles/base16/edge-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/eighties.min.css","path":"js/highlight/styles/base16/eighties.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/equilibrium-gray-dark.min.css","path":"js/highlight/styles/base16/equilibrium-gray-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/embers.min.css","path":"js/highlight/styles/base16/embers.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/equilibrium-dark.min.css","path":"js/highlight/styles/base16/equilibrium-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/equilibrium-gray-light.min.css","path":"js/highlight/styles/base16/equilibrium-gray-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/equilibrium-light.min.css","path":"js/highlight/styles/base16/equilibrium-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/espresso.min.css","path":"js/highlight/styles/base16/espresso.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/eva-dim.min.css","path":"js/highlight/styles/base16/eva-dim.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/eva.min.css","path":"js/highlight/styles/base16/eva.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/flat.min.css","path":"js/highlight/styles/base16/flat.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/framer.min.css","path":"js/highlight/styles/base16/framer.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/fruit-soda.min.css","path":"js/highlight/styles/base16/fruit-soda.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/gigavolt.min.css","path":"js/highlight/styles/base16/gigavolt.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/github.min.css","path":"js/highlight/styles/base16/github.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/google-dark.min.css","path":"js/highlight/styles/base16/google-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/google-light.min.css","path":"js/highlight/styles/base16/google-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/grayscale-dark.min.css","path":"js/highlight/styles/base16/grayscale-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/grayscale-light.min.css","path":"js/highlight/styles/base16/grayscale-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/green-screen.min.css","path":"js/highlight/styles/base16/green-screen.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-dark-hard.min.css","path":"js/highlight/styles/base16/gruvbox-dark-hard.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-dark-medium.min.css","path":"js/highlight/styles/base16/gruvbox-dark-medium.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-dark-pale.min.css","path":"js/highlight/styles/base16/gruvbox-dark-pale.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-dark-soft.min.css","path":"js/highlight/styles/base16/gruvbox-dark-soft.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-light-hard.min.css","path":"js/highlight/styles/base16/gruvbox-light-hard.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-light-medium.min.css","path":"js/highlight/styles/base16/gruvbox-light-medium.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/hardcore.min.css","path":"js/highlight/styles/base16/hardcore.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-light-soft.min.css","path":"js/highlight/styles/base16/gruvbox-light-soft.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/harmonic16-light.min.css","path":"js/highlight/styles/base16/harmonic16-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/harmonic16-dark.min.css","path":"js/highlight/styles/base16/harmonic16-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/heetch-dark.min.css","path":"js/highlight/styles/base16/heetch-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/heetch-light.min.css","path":"js/highlight/styles/base16/heetch-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/helios.min.css","path":"js/highlight/styles/base16/helios.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/hopscotch.min.css","path":"js/highlight/styles/base16/hopscotch.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/horizon-dark.min.css","path":"js/highlight/styles/base16/horizon-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/horizon-light.min.css","path":"js/highlight/styles/base16/horizon-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/humanoid-dark.min.css","path":"js/highlight/styles/base16/humanoid-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/ia-dark.min.css","path":"js/highlight/styles/base16/ia-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/humanoid-light.min.css","path":"js/highlight/styles/base16/humanoid-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/ia-light.min.css","path":"js/highlight/styles/base16/ia-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/icy-dark.min.css","path":"js/highlight/styles/base16/icy-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/ir-black.min.css","path":"js/highlight/styles/base16/ir-black.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/isotope.min.css","path":"js/highlight/styles/base16/isotope.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/kimber.min.css","path":"js/highlight/styles/base16/kimber.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/london-tube.min.css","path":"js/highlight/styles/base16/london-tube.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/macintosh.min.css","path":"js/highlight/styles/base16/macintosh.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/marrakesh.min.css","path":"js/highlight/styles/base16/marrakesh.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/materia.min.css","path":"js/highlight/styles/base16/materia.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/material-darker.min.css","path":"js/highlight/styles/base16/material-darker.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/material-lighter.min.css","path":"js/highlight/styles/base16/material-lighter.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/material-vivid.min.css","path":"js/highlight/styles/base16/material-vivid.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/material-palenight.min.css","path":"js/highlight/styles/base16/material-palenight.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/material.min.css","path":"js/highlight/styles/base16/material.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/mexico-light.min.css","path":"js/highlight/styles/base16/mexico-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/mellow-purple.min.css","path":"js/highlight/styles/base16/mellow-purple.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/mocha.min.css","path":"js/highlight/styles/base16/mocha.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/monokai.min.css","path":"js/highlight/styles/base16/monokai.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/nebula.min.css","path":"js/highlight/styles/base16/nebula.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/nord.min.css","path":"js/highlight/styles/base16/nord.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/nova.min.css","path":"js/highlight/styles/base16/nova.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/ocean.min.css","path":"js/highlight/styles/base16/ocean.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/oceanicnext.min.css","path":"js/highlight/styles/base16/oceanicnext.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/one-light.min.css","path":"js/highlight/styles/base16/one-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/onedark.min.css","path":"js/highlight/styles/base16/onedark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/outrun-dark.min.css","path":"js/highlight/styles/base16/outrun-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/papercolor-dark.min.css","path":"js/highlight/styles/base16/papercolor-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/papercolor-light.min.css","path":"js/highlight/styles/base16/papercolor-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/paraiso.min.css","path":"js/highlight/styles/base16/paraiso.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/pasque.min.css","path":"js/highlight/styles/base16/pasque.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/phd.min.css","path":"js/highlight/styles/base16/phd.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/pop.min.css","path":"js/highlight/styles/base16/pop.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/pico.min.css","path":"js/highlight/styles/base16/pico.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/porple.min.css","path":"js/highlight/styles/base16/porple.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/railscasts.min.css","path":"js/highlight/styles/base16/railscasts.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/qualia.min.css","path":"js/highlight/styles/base16/qualia.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/rebecca.min.css","path":"js/highlight/styles/base16/rebecca.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/ros-pine-dawn.min.css","path":"js/highlight/styles/base16/ros-pine-dawn.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/ros-pine.min.css","path":"js/highlight/styles/base16/ros-pine.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/ros-pine-moon.min.css","path":"js/highlight/styles/base16/ros-pine-moon.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/sagelight.min.css","path":"js/highlight/styles/base16/sagelight.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/sandcastle.min.css","path":"js/highlight/styles/base16/sandcastle.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/seti-ui.min.css","path":"js/highlight/styles/base16/seti-ui.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/shapeshifter.min.css","path":"js/highlight/styles/base16/shapeshifter.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/silk-dark.min.css","path":"js/highlight/styles/base16/silk-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/silk-light.min.css","path":"js/highlight/styles/base16/silk-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/snazzy.min.css","path":"js/highlight/styles/base16/snazzy.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/solar-flare-light.min.css","path":"js/highlight/styles/base16/solar-flare-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/solar-flare.min.css","path":"js/highlight/styles/base16/solar-flare.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/solarized-dark.min.css","path":"js/highlight/styles/base16/solarized-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/solarized-light.min.css","path":"js/highlight/styles/base16/solarized-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/spacemacs.min.css","path":"js/highlight/styles/base16/spacemacs.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/summercamp.min.css","path":"js/highlight/styles/base16/summercamp.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/summerfruit-dark.min.css","path":"js/highlight/styles/base16/summerfruit-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/summerfruit-light.min.css","path":"js/highlight/styles/base16/summerfruit-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/synth-midnight-terminal-dark.min.css","path":"js/highlight/styles/base16/synth-midnight-terminal-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/synth-midnight-terminal-light.min.css","path":"js/highlight/styles/base16/synth-midnight-terminal-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/tender.min.css","path":"js/highlight/styles/base16/tender.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/tango.min.css","path":"js/highlight/styles/base16/tango.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/tomorrow.min.css","path":"js/highlight/styles/base16/tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/tomorrow-night.min.css","path":"js/highlight/styles/base16/tomorrow-night.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/twilight.min.css","path":"js/highlight/styles/base16/twilight.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/unikitty-dark.min.css","path":"js/highlight/styles/base16/unikitty-dark.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/unikitty-light.min.css","path":"js/highlight/styles/base16/unikitty-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/vulcan.min.css","path":"js/highlight/styles/base16/vulcan.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-10-light.min.css","path":"js/highlight/styles/base16/windows-10-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-95-light.min.css","path":"js/highlight/styles/base16/windows-95-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-10.min.css","path":"js/highlight/styles/base16/windows-10.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-high-contrast-light.min.css","path":"js/highlight/styles/base16/windows-high-contrast-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-high-contrast.min.css","path":"js/highlight/styles/base16/windows-high-contrast.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-95.min.css","path":"js/highlight/styles/base16/windows-95.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-nt-light.min.css","path":"js/highlight/styles/base16/windows-nt-light.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-nt.min.css","path":"js/highlight/styles/base16/windows-nt.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/woodland.min.css","path":"js/highlight/styles/base16/woodland.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/xcode-dusk.min.css","path":"js/highlight/styles/base16/xcode-dusk.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/styles/base16/zenburn.min.css","path":"js/highlight/styles/base16/zenburn.min.css","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/apache.min.js","path":"js/highlight/languages/apache.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/cpp.min.js","path":"js/highlight/languages/cpp.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/bash.min.js","path":"js/highlight/languages/bash.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/css.min.js","path":"js/highlight/languages/css.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/glsl.min.js","path":"js/highlight/languages/glsl.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/csharp.min.js","path":"js/highlight/languages/csharp.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/javascript.min.js","path":"js/highlight/languages/javascript.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/go.min.js","path":"js/highlight/languages/go.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/java.min.js","path":"js/highlight/languages/java.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/ini.min.js","path":"js/highlight/languages/ini.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/http.min.js","path":"js/highlight/languages/http.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/lua.min.js","path":"js/highlight/languages/lua.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/less.min.js","path":"js/highlight/languages/less.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/json.min.js","path":"js/highlight/languages/json.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/nginx.min.js","path":"js/highlight/languages/nginx.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/markdown.min.js","path":"js/highlight/languages/markdown.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/php.min.js","path":"js/highlight/languages/php.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/python.min.js","path":"js/highlight/languages/python.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/rust.min.js","path":"js/highlight/languages/rust.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/scss.min.js","path":"js/highlight/languages/scss.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/sql.min.js","path":"js/highlight/languages/sql.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/shell.min.js","path":"js/highlight/languages/shell.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/typescript.min.js","path":"js/highlight/languages/typescript.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/stylus.min.js","path":"js/highlight/languages/stylus.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/xml.min.js","path":"js/highlight/languages/xml.min.js","modified":0,"renderable":1},{"_id":"themes/cola/source/js/highlight/languages/yaml.min.js","path":"js/highlight/languages/yaml.min.js","modified":0,"renderable":1},{"_id":"source/img/22cf517c3686de1119cf1f156160bd4.jpg","path":"img/22cf517c3686de1119cf1f156160bd4.jpg","modified":0,"renderable":0},{"_id":"source/HTML/girl.jpg","path":"HTML/girl.jpg","modified":1,"renderable":0},{"_id":"source/HTML/girlsit.gif","path":"HTML/girlsit.gif","modified":1,"renderable":0},{"_id":"source/img/ASCIIout.png","path":"img/ASCIIout.png","modified":1,"renderable":0},{"_id":"source/img/BinaryTreenum.png","path":"img/BinaryTreenum.png","modified":1,"renderable":0},{"_id":"source/img/BinarySearch.gif","path":"img/BinarySearch.gif","modified":1,"renderable":0},{"_id":"source/img/C67.png","path":"img/C67.png","modified":1,"renderable":0},{"_id":"source/img/C992.png","path":"img/C992.png","modified":1,"renderable":0},{"_id":"source/img/C99.png","path":"img/C99.png","modified":1,"renderable":0},{"_id":"source/img/Chapter1.2.png","path":"img/Chapter1.2.png","modified":1,"renderable":0},{"_id":"source/img/C99sup.png","path":"img/C99sup.png","modified":1,"renderable":0},{"_id":"source/img/Chapter1.3.png","path":"img/Chapter1.3.png","modified":1,"renderable":0},{"_id":"source/img/Chapter1.6.png","path":"img/Chapter1.6.png","modified":1,"renderable":0},{"_id":"source/img/DefinenInitial.png","path":"img/DefinenInitial.png","modified":1,"renderable":0},{"_id":"source/img/ErrandWarn.png","path":"img/ErrandWarn.png","modified":1,"renderable":0},{"_id":"source/img/Figure3.1.png","path":"img/Figure3.1.png","modified":1,"renderable":0},{"_id":"source/img/Figure3.2.png","path":"img/Figure3.2.png","modified":1,"renderable":0},{"_id":"source/img/Figure3.3.png","path":"img/Figure3.3.png","modified":1,"renderable":0},{"_id":"source/img/Figure3.5.png","path":"img/Figure3.5.png","modified":1,"renderable":0},{"_id":"source/img/Figure3.6.png","path":"img/Figure3.6.png","modified":1,"renderable":0},{"_id":"source/img/Figure3.7.png","path":"img/Figure3.7.png","modified":1,"renderable":0},{"_id":"source/img/INF.png","path":"img/INF.png","modified":1,"renderable":0},{"_id":"source/img/Identifytypes1.png","path":"img/Identifytypes1.png","modified":1,"renderable":0},{"_id":"source/img/Identifytypes2.png","path":"img/Identifytypes2.png","modified":1,"renderable":0},{"_id":"source/img/InsertionSort.png","path":"img/InsertionSort.png","modified":1,"renderable":0},{"_id":"source/img/Listing3.1.png","path":"img/Listing3.1.png","modified":1,"renderable":0},{"_id":"source/img/Listing3.10.png","path":"img/Listing3.10.png","modified":1,"renderable":0},{"_id":"source/img/Listing3.2.png","path":"img/Listing3.2.png","modified":1,"renderable":0},{"_id":"source/img/Listing3.3.png","path":"img/Listing3.3.png","modified":1,"renderable":0},{"_id":"source/img/Listing3.4.png","path":"img/Listing3.4.png","modified":1,"renderable":0},{"_id":"source/img/Listing3.5.png","path":"img/Listing3.5.png","modified":1,"renderable":0},{"_id":"source/img/Listing3.6.png","path":"img/Listing3.6.png","modified":1,"renderable":0},{"_id":"source/img/Listing3.7.png","path":"img/Listing3.7.png","modified":1,"renderable":0},{"_id":"source/img/Listing3.8.png","path":"img/Listing3.8.png","modified":1,"renderable":0},{"_id":"source/img/Listing3.9.png","path":"img/Listing3.9.png","modified":1,"renderable":0},{"_id":"source/img/MergeSort.png","path":"img/MergeSort.png","modified":1,"renderable":0},{"_id":"source/img/Olist3.1.png","path":"img/Olist3.1.png","modified":1,"renderable":0},{"_id":"source/img/Pasted image 20231222083825.png","path":"img/Pasted image 20231222083825.png","modified":1,"renderable":0},{"_id":"source/img/Processes.png","path":"img/Processes.png","modified":1,"renderable":0},{"_id":"source/img/Perfect.png","path":"img/Perfect.png","modified":1,"renderable":0},{"_id":"source/img/RecursionTree.png","path":"img/RecursionTree.png","modified":1,"renderable":0},{"_id":"source/img/Table3.1.png","path":"img/Table3.1.png","modified":1,"renderable":0},{"_id":"source/img/Summary.png","path":"img/Summary.png","modified":1,"renderable":0},{"_id":"source/img/Table3.2.png","path":"img/Table3.2.png","modified":1,"renderable":0},{"_id":"source/img/Treeexample.png","path":"img/Treeexample.png","modified":1,"renderable":0},{"_id":"source/img/Twotables.png","path":"img/Twotables.png","modified":1,"renderable":0},{"_id":"source/img/alldevices.png","path":"img/alldevices.png","modified":1,"renderable":0},{"_id":"source/img/alarming.png","path":"img/alarming.png","modified":1,"renderable":0},{"_id":"source/img/assignment.png","path":"img/assignment.png","modified":1,"renderable":0},{"_id":"source/img/analysis.png","path":"img/analysis.png","modified":1,"renderable":0},{"_id":"source/img/assignments.png","path":"img/assignments.png","modified":1,"renderable":0},{"_id":"source/img/calling.png","path":"img/calling.png","modified":1,"renderable":0},{"_id":"source/img/basicdata.png","path":"img/basicdata.png","modified":1,"renderable":0},{"_id":"source/img/charassign.png","path":"img/charassign.png","modified":1,"renderable":0},{"_id":"source/img/chardeclare.png","path":"img/chardeclare.png","modified":1,"renderable":0},{"_id":"source/img/chardef.png","path":"img/chardef.png","modified":1,"renderable":0},{"_id":"source/img/cmtoinch.png","path":"img/cmtoinch.png","modified":1,"renderable":0},{"_id":"source/img/codeline.png","path":"img/codeline.png","modified":1,"renderable":0},{"_id":"source/img/comment.png","path":"img/comment.png","modified":1,"renderable":0},{"_id":"source/img/decimalandexp.png","path":"img/decimalandexp.png","modified":1,"renderable":0},{"_id":"source/img/drop4in5.png","path":"img/drop4in5.png","modified":1,"renderable":0},{"_id":"source/img/example.png","path":"img/example.png","modified":1,"renderable":0},{"_id":"source/img/example2.png","path":"img/example2.png","modified":1,"renderable":0},{"_id":"source/img/floatdeclare.png","path":"img/floatdeclare.png","modified":1,"renderable":0},{"_id":"source/img/flowresult.png","path":"img/flowresult.png","modified":1,"renderable":0},{"_id":"source/img/four.png","path":"img/four.png","modified":1,"renderable":0},{"_id":"source/img/four_kinds.png","path":"img/four_kinds.png","modified":1,"renderable":0},{"_id":"source/img/function1.png","path":"img/function1.png","modified":1,"renderable":0},{"_id":"source/img/gradeb.png","path":"img/gradeb.png","modified":1,"renderable":0},{"_id":"source/img/hopeagain.png","path":"img/hopeagain.png","modified":1,"renderable":0},{"_id":"source/img/ihope.png","path":"img/ihope.png","modified":1,"renderable":0},{"_id":"source/img/inchtocm.png","path":"img/inchtocm.png","modified":1,"renderable":0},{"_id":"source/img/informc.png","path":"img/informc.png","modified":1,"renderable":0},{"_id":"source/img/initialization.png","path":"img/initialization.png","modified":1,"renderable":0},{"_id":"source/img/last.png","path":"img/last.png","modified":1,"renderable":0},{"_id":"source/img/keywords.png","path":"img/keywords.png","modified":1,"renderable":0},{"_id":"source/img/lifesecond.png","path":"img/lifesecond.png","modified":1,"renderable":0},{"_id":"source/img/listing1.1.png","path":"img/listing1.1.png","modified":1,"renderable":0},{"_id":"source/img/listing1.2.png","path":"img/listing1.2.png","modified":1,"renderable":0},{"_id":"source/img/listing1.4.png","path":"img/listing1.4.png","modified":1,"renderable":0},{"_id":"source/img/lookslike.png","path":"img/lookslike.png","modified":1,"renderable":0},{"_id":"source/img/matchup.png","path":"img/matchup.png","modified":1,"renderable":0},{"_id":"source/img/morevalid.png","path":"img/morevalid.png","modified":1,"renderable":0},{"_id":"source/img/newform.png","path":"img/newform.png","modified":1,"renderable":0},{"_id":"source/img/nogood.png","path":"img/nogood.png","modified":1,"renderable":0},{"_id":"source/img/nospaces.png","path":"img/nospaces.png","modified":1,"renderable":0},{"_id":"source/img/nonsense.png","path":"img/nonsense.png","modified":1,"renderable":0},{"_id":"source/img/othertypes.png","path":"img/othertypes.png","modified":1,"renderable":0},{"_id":"source/img/numassign.png","path":"img/numassign.png","modified":1,"renderable":0},{"_id":"source/img/original.png","path":"img/original.png","modified":1,"renderable":0},{"_id":"source/img/out1.png","path":"img/out1.png","modified":1,"renderable":0},{"_id":"source/img/out3.png","path":"img/out3.png","modified":1,"renderable":0},{"_id":"source/img/output.png","path":"img/output.png","modified":1,"renderable":0},{"_id":"source/img/overflow.png","path":"img/overflow.png","modified":1,"renderable":0},{"_id":"source/img/overnunder.png","path":"img/overnunder.png","modified":1,"renderable":0},{"_id":"source/img/page2.png","path":"img/page2.png","modified":1,"renderable":0},{"_id":"source/img/page1.png","path":"img/page1.png","modified":1,"renderable":0},{"_id":"source/img/page3.png","path":"img/page3.png","modified":1,"renderable":0},{"_id":"source/img/poorreadability.png","path":"img/poorreadability.png","modified":1,"renderable":0},{"_id":"source/img/process.png","path":"img/process.png","modified":1,"renderable":0},{"_id":"source/img/quest4.png","path":"img/quest4.png","modified":1,"renderable":0},{"_id":"source/img/quartmol.png","path":"img/quartmol.png","modified":1,"renderable":0},{"_id":"source/img/quest5.png","path":"img/quest5.png","modified":1,"renderable":0},{"_id":"source/img/quest8.png","path":"img/quest8.png","modified":1,"renderable":0},{"_id":"source/img/readable.png","path":"img/readable.png","modified":1,"renderable":0},{"_id":"source/img/result1.png","path":"img/result1.png","modified":1,"renderable":0},{"_id":"source/img/result2.png","path":"img/result2.png","modified":1,"renderable":0},{"_id":"source/img/result3.png","path":"img/result3.png","modified":1,"renderable":0},{"_id":"source/img/sciennotation.png","path":"img/sciennotation.png","modified":1,"renderable":0},{"_id":"source/img/six.png","path":"img/six.png","modified":1,"renderable":0},{"_id":"source/img/sizes.png","path":"img/sizes.png","modified":1,"renderable":0},{"_id":"source/img/storingtypes.png","path":"img/storingtypes.png","modified":1,"renderable":0},{"_id":"source/img/stillbad.png","path":"img/stillbad.png","modified":1,"renderable":0},{"_id":"source/img/structure.png","path":"img/structure.png","modified":1,"renderable":0},{"_id":"source/img/toobig.png","path":"img/toobig.png","modified":1,"renderable":0},{"_id":"source/img/tracer.png","path":"img/tracer.png","modified":1,"renderable":0},{"_id":"source/img/tradition.png","path":"img/tradition.png","modified":1,"renderable":0},{"_id":"source/img/turning1.png","path":"img/turning1.png","modified":1,"renderable":0},{"_id":"source/img/turning2.png","path":"img/turning2.png","modified":1,"renderable":0},{"_id":"source/img/twoexam.png","path":"img/twoexam.png","modified":1,"renderable":0},{"_id":"source/img/twofunc.png","path":"img/twofunc.png","modified":1,"renderable":0},{"_id":"source/img/typeface.png","path":"img/typeface.png","modified":1,"renderable":0},{"_id":"source/img/valid_declaration.png","path":"img/valid_declaration.png","modified":1,"renderable":0},{"_id":"source/img/valid.png","path":"img/valid.png","modified":1,"renderable":0},{"_id":"source/img/输出.png","path":"img/输出.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/OJ中的那些小丑行为.md","hash":"9c89abcb2f13724d6e34c878388accb615ec33e5","modified":1700527595315},{"_id":"source/_posts/千奇百怪的字符串处理函数.md","hash":"b5c6cd8dd750a53d845827e9189edf6d2207cf09","modified":1700527762634},{"_id":"source/_posts/网站集合.md","hash":"df2cee86b342076fc793e3f9af8dea29e66d1afe","modified":1700445101025},{"_id":"source/_posts/直播内容复盘-排序与交换.md","hash":"e01ca49534c61da40c69fb967c5d636be09a3c87","modified":1700527659701},{"_id":"source/_posts/输入与输出.md","hash":"acbe69f8dc87d3e5aa3a174923c26b0f6fefdd25","modified":1700482122375},{"_id":"source/categories/index.md","hash":"31b6b3309749cce76d76f2ebfd7976ceb971b7f4","modified":1693392684244},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1693381266846},{"_id":"source/_posts/数组-1.md","hash":"0d778582703cbb6e4bd80d067bf1e92429ac50bc","modified":1700527662884},{"_id":"source/tags/index.md","hash":"afe86559422bf7dac8be75e8c5f598d7aae3d0cb","modified":1693392001779},{"_id":"source/_posts/流程控制方法.md","hash":"f5d99f6761e632504bf9b2b32a592bf5536a2dc1","modified":1700482087183},{"_id":"source/新建文件夹/OJ中的“小丑”行为.md","hash":"78217aafef8aefae06af5a2433528f8c1d180395","modified":1700444920197},{"_id":"source/新建文件夹/关于更多的Printf与scanf知识.md","hash":"e6db49e975a523d709992ed31092e4595271e795","modified":1700368133380},{"_id":"source/新建文件夹/对于昨天晚上学长讲的内容的复盘.md","hash":"88fc9e2d4cdd111606b563ba2a8450a10290b72e","modified":1700370523887},{"_id":"source/新建文件夹/基于最近两次直播的知识调研.md","hash":"96c81d298797dd3068ffaedbeb616daa5ae057a9","modified":1700365889134},{"_id":"themes/Annie/README.md","hash":"c430fe9268af1a217e5bfa9ad9136b217f362a73","modified":1693383858974},{"_id":"themes/Annie/languages/en.yml","hash":"7ff2a2d785228af120243793613cca4b6c03f1ee","modified":1693383858974},{"_id":"themes/Annie/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1693383859021},{"_id":"themes/Annie/languages/default.yml","hash":"04ee332aff1a4f7030768ab74c74007072e0cd49","modified":1693383858974},{"_id":"themes/Annie/languages/zh-TW.yml","hash":"d2be42743997e6999e5367fe133b884a0c06b9d0","modified":1693383858974},{"_id":"themes/Annie/_config.yml","hash":"4af0c07c167cc3cdcea11074196b8cb0353305a3","modified":1693383858974},{"_id":"themes/Annie/.project","hash":"02413f0cc96f269b21a49578e457500415b9c416","modified":1693383858974},{"_id":"themes/Annie/layout/about.ejs","hash":"5ee10ee04545aa22978e8eef1770234d8d663270","modified":1693383859021},{"_id":"themes/Annie/languages/zh-CN.yml","hash":"00221343dc07cd2d6e256aedb15794306144ad5c","modified":1693383858974},{"_id":"themes/Annie/layout/layout.ejs","hash":"8fb02ce4f5659ce4809e4d0770f311fb574f37a4","modified":1693383859021},{"_id":"themes/Annie/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1693383859021},{"_id":"themes/Annie/layout/index.ejs","hash":"dd37aa16577cbd2b1b3a75e0a924c5d2f078e326","modified":1693383859021},{"_id":"themes/Annie/scripts/colorquote.js","hash":"f537bf038dd3be728ebce2e937dd50862bc36d9b","modified":1693383859021},{"_id":"themes/Annie/layout/page.ejs","hash":"7ea1bad6d26c79b7baccbf452ca8a52113be2716","modified":1693383859021},{"_id":"themes/Annie/scripts/first-letter-sink.js","hash":"15f0937f5e6b64fe94877f09d95d605491d8824a","modified":1693383859021},{"_id":"themes/Annie/LICENSE","hash":"f29e45d4c4a9b68c9d1344f7ba8744e3f179216f","modified":1693383858974},{"_id":"themes/Annie/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1693383859021},{"_id":"themes/Annie/layout/gallery.ejs","hash":"d8f70a8a47d5f93c172fac95e0b46d70830622b4","modified":1693383859021},{"_id":"themes/Annie/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f7fc277213466be52fbd016749f5311c1052247a","modified":1693383858974},{"_id":"themes/Annie/.github/ISSUE_TEMPLATE/general-issue.md","hash":"65bceba2410aee9466c2677c2600deca328a885c","modified":1693383858974},{"_id":"themes/Annie/layout/post.ejs","hash":"c1fe38aba639c318ba79eecab914c18c8272c818","modified":1693383859021},{"_id":"themes/Annie/.github/ISSUE_TEMPLATE/bug_report.md","hash":"e161744bf2909c9a1aaf7758c07777e78cb2b9ea","modified":1693383858974},{"_id":"themes/Annie/layout/_partial/footer-after.ejs","hash":"0aad5b01f9ae83ecb0d68aba61b6c8e5b8a01338","modified":1693383858989},{"_id":"themes/Annie/.github/ISSUE_TEMPLATE/pull-request.md","hash":"cb590aff7033c8ee26287df26761c54b87134f9a","modified":1693383858974},{"_id":"themes/Annie/layout/_partial/footer-social.ejs","hash":"4279da8689ab24f576e420b1435db2e2f2185ca8","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/footer.ejs","hash":"c7c1cb345a64cff3850f57b66a17ed70138b6946","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/archive.ejs","hash":"c9c52a882fa8d953b31ecfbab87d094b8fa5b845","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/head.ejs","hash":"b69923b279c0d9d4afb297e1887407e59ed0106e","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/header.ejs","hash":"47eb73557b1ecb2443fdbff62756ca00f62ede8f","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/index-pure.ejs","hash":"7e1881f375f2a24b2a64f5863887ad4b895ae22a","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/nav.ejs","hash":"7d734d1a5f2d213c4ff466ee2384bab7a12a53ef","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/paginator.ejs","hash":"99ee617ea741cf2dfca9a809c67e565fc789f31e","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/index-cart.ejs","hash":"add55cfab29defad0febbc949b01121aa06cc60c","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/page-header.ejs","hash":"074624a89e21e6cf6814ce9fd6e8e368b616766b","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/post-number.ejs","hash":"04ba92aec82cffc65ddf7e54daf6014e6c5ef49c","modified":1693383859005},{"_id":"themes/Annie/source/css/Annie.styl","hash":"c254b5fbfb982ddfdf1bc68be5071d52d9fb59eb","modified":1693383859021},{"_id":"themes/Annie/layout/_partial/post-like.ejs","hash":"8462c9ead4620e8d69cf789230e4b941d496d0a5","modified":1693383859005},{"_id":"themes/Annie/source/css/comment.styl","hash":"e38672bfa1bc3fcc54829c48c0d4d49df42200d0","modified":1693383859053},{"_id":"themes/Annie/layout/_partial/post.ejs","hash":"36d0404de79239c5994ed302e3baa5f5e6acee49","modified":1693383859005},{"_id":"themes/Annie/source/img/Annie_qq_qrcode.jpg","hash":"571f514f6ef9b4e085bb9c74523eade02a84e8ea","modified":1693383859067},{"_id":"themes/Annie/layout/_partial/page.ejs","hash":"79818e81b34d1b8facdd9f08d2f048a59a93c911","modified":1693383858989},{"_id":"themes/Annie/source/img/logo.png","hash":"6753531813b7157625c4eca2531d08edc65f846b","modified":1693383859083},{"_id":"themes/Annie/layout/_partial/post-relate.ejs","hash":"035200aeaf2094cfc62ea0ce1cea03d3f4e2de23","modified":1693383859005},{"_id":"themes/Annie/source/js/leancloud-count.js","hash":"633ebe1caf6432eaed708568665aae764c35b5d8","modified":1693383859083},{"_id":"themes/Annie/layout/_partial/custom/XXX.ejs","hash":"da87df37f41e32bc63f75f7dc3a5d1de70123c2e","modified":1693383858989},{"_id":"themes/Annie/source/js/main.js","hash":"aca5bb7822dc1e80616e34be2e32411989b6139c","modified":1693383859083},{"_id":"themes/Annie/source/img/lazy.gif","hash":"0bbc5084e6aaa8d6260645c49abc45659553f464","modified":1693383859083},{"_id":"themes/Annie/source/js/search.js","hash":"7deb23070a46517cf35b42b5da7a9d2e6860d31c","modified":1693383859083},{"_id":"themes/Annie/layout/_partial/plugin/clipboard.ejs","hash":"4daa2f62fa4d845fe01586f51a42f84ae116cb0a","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/plugin/mathjax.ejs","hash":"5360830f3ef51394db8999fa99c19649916f0569","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/toc.ejs","hash":"7fb458a5262a4179e4374031e68348ff0082bc54","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/comment.ejs","hash":"0875935243a303da4b2bb5461a42fcee939d0793","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/plugin/search.ejs","hash":"05dcc0ece738f0728fecd308fda38cff0bdfee01","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics.ejs","hash":"3634879d692e117352dd0cf6f7cf6d2687fc03f0","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/post/category.ejs","hash":"e77636e2e27059b2405861a927387ccb4737683a","modified":1693383859020},{"_id":"themes/Annie/layout/_partial/plugin/motto.ejs","hash":"3d2af7457c471558f6f2391b29c0373f0d0fcffb","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/share.ejs","hash":"c6014f9f93a885cb26379f3fa75e6e9011d5f985","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/post/title.ejs","hash":"65994e06024045d474402e3a0a22f869dd41476d","modified":1693383859021},{"_id":"themes/Annie/layout/_partial/post/tag.ejs","hash":"4d95ff96b9a3161add5364c779800c7945bd6ad8","modified":1693383859021},{"_id":"themes/Annie/layout/_partial/post/date.ejs","hash":"8bf4c6177c66713bd707967c12087e2b24314046","modified":1693383859020},{"_id":"themes/Annie/layout/_partial/widget/totop.ejs","hash":"43dc78bfb7c5acbbf763e519bedec10bb75a460f","modified":1693383859021},{"_id":"themes/Annie/layout/_partial/post/navigation.ejs","hash":"0f9918ed0d1ff9bd4053c68dd4f05091c793a634","modified":1693383859021},{"_id":"themes/Annie/source/css/_base/base.styl","hash":"98a00417c2502fac105647379e2cbdd6a916b107","modified":1693383859021},{"_id":"themes/Annie/layout/_partial/post/gallery.ejs","hash":"d48911706f21fa6ad256b4aefda45865e42927a4","modified":1693383859021},{"_id":"themes/Annie/source/css/_component/backtotop.styl","hash":"b77b304ae3dae357d2d5b07254c00a3382635252","modified":1693383859036},{"_id":"themes/Annie/source/css/_base/normalize.styl","hash":"f995dab1c91c02ba01562b39ca5f09996cfa6364","modified":1693383859031},{"_id":"themes/Annie/source/css/_base/icomoon.styl","hash":"c83d6c27f4738c42360767f4bee5c9ce3cbc86a7","modified":1693383859030},{"_id":"themes/Annie/source/css/_component/animation.styl","hash":"4256c6fdbfc0de2afc9e18bbabbe03c46533de7d","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/component.styl","hash":"fa22ad8c2147825a92ccf469c4fab3a1a833a1ca","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/pagination.styl","hash":"d0dd3e2db660ad529b064145e40736a16a90e672","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/comment.styl","hash":"e15088f78a268bd286d6dd8012995ea24fb72f21","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/preloader.styl","hash":"74aaeadf1838c09d7667ec4ea5378b74b9702203","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/menu.styl","hash":"95f45cb5f964e9d67435b335785a17b82e7dce9b","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/share.styl","hash":"6720cbbe6fdc486207176b2f871b4d2b409311c6","modified":1693383859036},{"_id":"themes/Annie/source/css/_custom/custom.styl","hash":"f177f04e3c1557ccd282cf9aa4470884a1303b5e","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/scrollbar.styl","hash":"1befebd24ed02cb4d622e1e41942b8f1ace0b302","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/progressbar.styl","hash":"2f22c183e7f7596abfae732dccf8b8932ac56ca3","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/toc.styl","hash":"508e83590f1c79e76b00349dfebf5a87131172d2","modified":1693383859036},{"_id":"themes/Annie/source/css/_layout/footer.styl","hash":"62ce46fa3621bfacabcdc008b6c09920102369f6","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/search.styl","hash":"4c153e7b43804cd86bee37dfc7d666db182c2a30","modified":1693383859036},{"_id":"themes/Annie/source/css/_helper/variable.styl","hash":"4a66fb49db3fc1821fd67f9cbf74193b787f6f3c","modified":1693383859036},{"_id":"themes/Annie/source/css/_layout/header.styl","hash":"76df122eee69972747d6c269152812258a225fdb","modified":1693383859036},{"_id":"themes/Annie/source/css/_page/about.styl","hash":"8c75594341d61270c684473b7e9c73289ece940a","modified":1693383859036},{"_id":"themes/Annie/source/css/_page/category.styl","hash":"b511884ac4525fe47c6143443094cfcf0535f608","modified":1693383859051},{"_id":"themes/Annie/source/css/_page/gallery.styl","hash":"2cd0e802a06bdf4a856757a75c00cb00be8a4534","modified":1693383859051},{"_id":"themes/Annie/source/css/_mobile/mobile.styl","hash":"174e72a645b97dec14dbdb3125a1266bf803d985","modified":1693383859036},{"_id":"themes/Annie/source/css/_page/archive.styl","hash":"a73615cffcfd65ac215cc2a9ad5ccc0e3b707564","modified":1693383859036},{"_id":"themes/Annie/source/css/fonts/icomoon.eot","hash":"8b0e8a844b0db44cd73419c55ab9054e90844cf3","modified":1693383859056},{"_id":"themes/Annie/source/css/_page/page.styl","hash":"74734f58b62fca791dba68c71293d8141cc1c273","modified":1693383859053},{"_id":"themes/Annie/source/css/_page/post.styl","hash":"7c42dccb7eb428969d6ad287f960328ec3b2c200","modified":1693383859053},{"_id":"themes/Annie/source/css/fonts/icomoon.woff","hash":"4a4bcec7a051735d1fa587af3e53c6a9270dca79","modified":1693383859065},{"_id":"themes/Annie/source/css/_page/tag.styl","hash":"a6681d8d8a5fbae37060d9b0cb261c2d33d7b55e","modified":1693383859053},{"_id":"themes/Annie/source/css/fonts/icomoon.ttf","hash":"7f5ba460f1c534dffd1f1bd92fa381fe93c6e8bc","modified":1693383859062},{"_id":"themes/Annie/source/plugin/clipboard/clipboard.js","hash":"a6807ac344ef1c099eb932801828398870ddee30","modified":1693383859083},{"_id":"themes/Annie/source/plugin/chinese/chinese.js","hash":"0afd302a9db7de46a0af3f076f5ea5e639e64393","modified":1693383859083},{"_id":"themes/Annie/source/plugin/comment/valine.min.js","hash":"c095b96b53c9d4aaa3a0eca6d0223cf033c0af8a","modified":1693383859096},{"_id":"themes/Annie/source/plugin/fancybox/jquery.fancybox.css","hash":"cbb951aeb94d1d070d011b2610490b59fbf3c463","modified":1693383859096},{"_id":"themes/Annie/source/plugin/imagelazyloader/yall.min.js","hash":"46a606cadfb1dbdf3c6172a0797c5f30d3968d1e","modified":1693383859099},{"_id":"themes/Annie/source/css/_page/index.styl","hash":"ce385c631bf8d82871f118c9362bb7767ecc323e","modified":1693383859051},{"_id":"themes/Annie/source/plugin/imageloaded/imagesloaded.pkgd.min.js","hash":"049173b82e68c40492961bb95ddacefb44eab680","modified":1693383859099},{"_id":"themes/Annie/source/plugin/gallerypage/natural-gallery.full.css","hash":"77aef23f3414e3da9adfaa005458c10c90afb7db","modified":1693383859099},{"_id":"themes/Annie/source/plugin/love/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1693383859115},{"_id":"themes/Annie/source/plugin/resizediv/resizediv.js","hash":"997f421eab476ef47459efe87fede1e3f2e9b91c","modified":1693383859131},{"_id":"themes/Annie/source/plugin/search/ziploader.js","hash":"f5de8fdfdbd61417e9d06d09fd87ce79f4bcc0aa","modified":1693383859131},{"_id":"themes/Annie/source/img/quote/danger.svg","hash":"213125a083bcef89806b4285190e050eef2660f2","modified":1693383859083},{"_id":"themes/Annie/source/img/quote/warning.svg","hash":"e4005d2eabfbd3bdd291236f56a4d385e3b337b2","modified":1693383859083},{"_id":"themes/Annie/source/img/quote/success.svg","hash":"16e9a53d7c49621be8e3f1a28b11bcf5e751105e","modified":1693383859083},{"_id":"themes/Annie/layout/_partial/plugin/comment/livere.ejs","hash":"548b662d2f5fbc53018fe94dbca2c687be3faf10","modified":1693383858989},{"_id":"themes/Annie/source/img/quote/info.svg","hash":"60613abd8f8522c6cebdbb4bf7bf3fcc482245bd","modified":1693383859083},{"_id":"themes/Annie/source/img/quote/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1693383859083},{"_id":"themes/Annie/source/plugin/toc/katelog.min.js","hash":"98a96608bb3e1e01638020f0c0e1ac04127c3933","modified":1693383859131},{"_id":"themes/Annie/layout/_partial/plugin/clipboard/code-copy.ejs","hash":"b282c82570692d346a9e787d11e000b1b66930e4","modified":1693383858989},{"_id":"themes/Annie/layout/_partial/plugin/comment/gitalk.ejs","hash":"b9dc663252087e98672b9ab2196010a7e83b7260","modified":1693383858989},{"_id":"themes/Annie/source/plugin/gallerypage/natural.css","hash":"a65275daafd7534f48e9dac1cba5de73f6b88822","modified":1693383859099},{"_id":"themes/Annie/layout/_partial/plugin/share/addThis.ejs","hash":"84c09f49d846bea4b25953d50a87d1b94d099e4b","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/share/social-share.ejs","hash":"d988ed9d04db97719a8eb5c1b8b007e5f721070a","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/share/shareThis.ejs","hash":"1757b52b44204a89fdea9a430b93749bd50b0bd4","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/busuanzi.ejs","hash":"c002a4dd377e0d22a58d644557f8614317ee4383","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/tencent_analytics.ejs","hash":"f0cec1818596094a3d42657c078b38da82eb052f","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/share/baidu-share.ejs","hash":"871a09cdd452bf89764e02d607b2b196b7fa3881","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/baidu-analytics.ejs","hash":"4208b0443b39d7341fbde666a245c358d6ba4e17","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/cnzz_analytics.ejs","hash":"957c9f527e849a548cd4b6d1f7851f1ddb1b647b","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/comment/valine.ejs","hash":"956b638975058cde705bd9419556f0cf982dd1ba","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/topN-post.ejs","hash":"e04315ff9602ceec1d347e0d1432590601bb12d7","modified":1693383859005},{"_id":"themes/Annie/layout/_partial/plugin/statistics/google_analytics.ejs","hash":"4b5393a94f1063b27bdca8ad796749fb7d29f1b6","modified":1693383859005},{"_id":"themes/Annie/source/css/_component/_hexotags/first-letter-sink.styl","hash":"2017617486dfc4537197d8878ee2de43097f960e","modified":1693383859033},{"_id":"themes/Annie/source/css/_component/_highlight/_diff.styl","hash":"15578f4883a07c4753dd6be1258f1a553619135a","modified":1693383859035},{"_id":"themes/Annie/layout/_partial/plugin/statistics/leancloud.ejs","hash":"12b05f18c64515f7c056681113ba8a72f48041a8","modified":1693383859005},{"_id":"themes/Annie/source/css/_component/_hexotags/colorquote.styl","hash":"742f3bb8cd8178f9c50bfe4364926885853d1e82","modified":1693383859033},{"_id":"themes/Annie/source/css/_component/_highlight/_code-copy.styl","hash":"2bea0d796bcd4264e806edf1d238bb4b3e91e4f3","modified":1693383859034},{"_id":"themes/Annie/source/plugin/gallerypage/images/default-skin.svg","hash":"bf61aaab4ee361ac7537b68abee8780ac6fd22f3","modified":1693383859099},{"_id":"themes/Annie/source/css/_component/_highlight/_theme.styl","hash":"b9874d938ddb4165065f9aaf3a3b035f088022a8","modified":1693383859036},{"_id":"themes/Annie/source/css/_component/_highlight/_variables.styl","hash":"f397024eb66bb042624e0df43a5b406631501277","modified":1693383859036},{"_id":"themes/Annie/source/plugin/gallerypage/images/default-skin.png","hash":"f6c7bd39c5ceda639276e64447f6007ad28ac0dd","modified":1693383859099},{"_id":"themes/Annie/source/css/_component/_highlight/highlight.styl","hash":"e3ae63b5ebc04d1b77191535eb6147c30fc7d89a","modified":1693383859036},{"_id":"themes/Annie/source/plugin/gallerypage/images/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1693383859099},{"_id":"themes/Annie/source/plugin/gallerypage/data.json","hash":"fc42a58d5b23572ef1ceb77618fa03355a411d62","modified":1693383859099},{"_id":"themes/Annie/source/plugin/jquery/jquery.min.js","hash":"dacc1f76630a9708add066819b1aabf8dce01056","modified":1693383859115},{"_id":"themes/Annie/source/plugin/nicescroll/jquery.nicescroll.js","hash":"d6a0c3c1e0bba483e12e7996c0bd07fd438650cf","modified":1693383859115},{"_id":"themes/Annie/source/plugin/gallerypage/natural-gallery.full.js","hash":"98a795f711ea0267a50c60b266ff0e72986f7d0a","modified":1693383859099},{"_id":"themes/Annie/source/css/fonts/icomoon.svg","hash":"09149a4a43ec2f8fd9df3a2a0cca774384f576a5","modified":1693383859059},{"_id":"themes/Annie/source/plugin/fancybox/jquery.fancybox.js","hash":"cc3932fc552c8761990260ebf9a8f76ebfa19a2f","modified":1693383859099},{"_id":"themes/Annie/source/plugin/leancloud/av-min.js","hash":"430bb484ce71c61a2f55ea1aa9e040312933332b","modified":1693383859115},{"_id":"themes/Annie/source/plugin/motto/motto.js","hash":"30316c1e695d7da05b915e12cc34addd91511e15","modified":1693383859115},{"_id":"themes/Annie/source/img/favicon.ico","hash":"92da6723b6526aa98c23501e6086c5948a13083c","modified":1693383859067},{"_id":"themes/Annie/source/img/cart_cover.jpg","hash":"5c9561c6cc4637a1cfc03fb0399883f052e3340b","modified":1693383859067},{"_id":"themes/Annie/source/img/header-bg.jpg","hash":"509748b7822d48d510476d6168c96cc09d6d7502","modified":1693383859067},{"_id":"public/atom.xml","hash":"fd3cca21137b543caf2dbe3f323e7505741be788","modified":1700834493602},{"_id":"public/search.xml","hash":"0ffaef8a2fac8e03230e2fed39ccda5cc2dc0ad5","modified":1700834493602},{"_id":"public/categories/index.html","hash":"94ec6dc09d654cf3e17f96046b0ebd72a956c2f3","modified":1700794712425},{"_id":"public/tags/index.html","hash":"e897807ce99a4fa2298201924f763266e7d543d9","modified":1700794712425},{"_id":"public/新建文件夹/关于更多的Printf与scanf知识.html","hash":"41b22542b9f2d1ba65d51e57526a5304f99048b7","modified":1700794712425},{"_id":"public/新建文件夹/OJ中的“小丑”行为.html","hash":"436158b04f63aa73d738be63bb63586b6b59ea78","modified":1700794712425},{"_id":"public/新建文件夹/对于昨天晚上学长讲的内容的复盘.html","hash":"d1b70270d191e7698efaa67fc4d3a0fc81afda4b","modified":1700794712425},{"_id":"public/新建文件夹/基于最近两次直播的知识调研.html","hash":"0831c6ec7c1bf79ad2203978d78688a3b6168246","modified":1700794712425},{"_id":"public/2023/11/20/网站集合/index.html","hash":"ee838675947fa3401ce507216fd182071161be7c","modified":1700833274983},{"_id":"public/2023/11/20/直播内容复盘-排序与交换/index.html","hash":"1cab8ebbf65bcfc106100276d7ffb87e1e48cb74","modified":1700794712425},{"_id":"public/2023/11/20/输入与输出/index.html","hash":"ed4af9bdf03e9b1c3f6dc9e5e44a0b89b26c5f3a","modified":1700794712425},{"_id":"public/2023/11/20/千奇百怪的字符串处理函数/index.html","hash":"ccd5f6b8b807a6dab68f6c1745c739fb1e15d751","modified":1700794712425},{"_id":"public/2023/11/20/OJ中的那些小丑行为/index.html","hash":"a0fce1fc662060e3d11fd7fa0b54b4553abe83d5","modified":1700794712425},{"_id":"public/2023/11/07/hello-world/index.html","hash":"0d90d04a52162c16a650cf2765703d96f4fd4f4e","modified":1700794712425},{"_id":"public/2023/11/07/数组-1/index.html","hash":"a8f76204bbb8307999b00db2eb66e4ae98787570","modified":1700794712425},{"_id":"public/2023/08/30/流程控制方法/index.html","hash":"5f2fefaae1037d58768c10e7ad945b2da41a4aa7","modified":1700794712425},{"_id":"public/archives/index.html","hash":"aaf9f597e3b9c04ab6978a39453387a6755bf1a0","modified":1700833274983},{"_id":"public/archives/2023/index.html","hash":"c414239feded23fd2c36663ce4c5ffffa94aa433","modified":1700833274983},{"_id":"public/archives/2023/08/index.html","hash":"e30d0804f46893c617435c2fb1a2c6eceb92f55e","modified":1700794712425},{"_id":"public/index.html","hash":"57cd3dc64b31560020951ae7928fc427a1a8b031","modified":1700834493602},{"_id":"public/archives/2023/11/index.html","hash":"02b35c77534aacddf7dbcf0e99923696d30f3d08","modified":1700833274983},{"_id":"public/categories/python学习/index.html","hash":"ccaa901ca033e5706de706c93e194d5f86772344","modified":1700794712425},{"_id":"public/tags/C语言学习/index.html","hash":"f248c975a244dc652268a57a438168131e2f178b","modified":1700833274983},{"_id":"public/tags/学习资源/index.html","hash":"b64e8db817d83da8030e4b38c41300ab6d1bd232","modified":1700794712425},{"_id":"public/img/Annie_qq_qrcode.jpg","hash":"571f514f6ef9b4e085bb9c74523eade02a84e8ea","modified":1700445116433},{"_id":"public/img/logo.png","hash":"6753531813b7157625c4eca2531d08edc65f846b","modified":1700834493602},{"_id":"public/img/lazy.gif","hash":"0bbc5084e6aaa8d6260645c49abc45659553f464","modified":1700445116433},{"_id":"public/css/fonts/icomoon.eot","hash":"8b0e8a844b0db44cd73419c55ab9054e90844cf3","modified":1700445116433},{"_id":"public/css/fonts/icomoon.woff","hash":"4a4bcec7a051735d1fa587af3e53c6a9270dca79","modified":1700445116433},{"_id":"public/css/fonts/icomoon.ttf","hash":"7f5ba460f1c534dffd1f1bd92fa381fe93c6e8bc","modified":1700445116433},{"_id":"public/img/quote/danger.svg","hash":"213125a083bcef89806b4285190e050eef2660f2","modified":1700445116433},{"_id":"public/img/quote/success.svg","hash":"16e9a53d7c49621be8e3f1a28b11bcf5e751105e","modified":1700445116433},{"_id":"public/img/quote/info.svg","hash":"60613abd8f8522c6cebdbb4bf7bf3fcc482245bd","modified":1700445116433},{"_id":"public/img/quote/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1700445116433},{"_id":"public/plugin/gallerypage/images/default-skin.svg","hash":"bf61aaab4ee361ac7537b68abee8780ac6fd22f3","modified":1700445116433},{"_id":"public/img/quote/warning.svg","hash":"e4005d2eabfbd3bdd291236f56a4d385e3b337b2","modified":1700445116433},{"_id":"public/plugin/gallerypage/images/default-skin.png","hash":"f6c7bd39c5ceda639276e64447f6007ad28ac0dd","modified":1700445116433},{"_id":"public/plugin/gallerypage/images/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1700445116433},{"_id":"public/css/Annie.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1700446577359},{"_id":"public/css/comment.css","hash":"22cfb29c7d04da36aaa306aebed8496380efefc1","modified":1700445116433},{"_id":"public/js/search.js","hash":"7dd6ada071decde02737645143d217906fe3fe80","modified":1700581352077},{"_id":"public/js/leancloud-count.js","hash":"3d713d7b5e9f473a8c44b2cc64f211568bac8c90","modified":1700445116433},{"_id":"public/js/main.js","hash":"4b4f882a393cbf5b3dfc2b218608a09905f3e3db","modified":1700452825427},{"_id":"public/plugin/chinese/chinese.js","hash":"986dfdf6f27852151e2225aaaa22d2302d5d24dc","modified":1700445116433},{"_id":"public/plugin/fancybox/jquery.fancybox.css","hash":"7a81dceacd45c9249b1da50c3a51eb6aec68424c","modified":1700445116433},{"_id":"public/plugin/clipboard/clipboard.js","hash":"43d4af727a32a793d9146eb828ed114e3ca29cec","modified":1700445116433},{"_id":"public/plugin/imagelazyloader/yall.min.js","hash":"59e3ca7c5cc98368156826ea857fa1a8dea6aaa4","modified":1700445116433},{"_id":"public/plugin/comment/valine.min.js","hash":"0c698e2d51cdc0d2eb303c8c3a81ddd6d6cf667f","modified":1700445116433},{"_id":"public/plugin/gallerypage/data.json","hash":"a827712b50f4805533735999a50684999788986c","modified":1700445116433},{"_id":"public/plugin/gallerypage/natural-gallery.full.css","hash":"d5c5ff93bf13e2d4ece69ccaa6cd72a2486daba0","modified":1700445116433},{"_id":"public/plugin/imageloaded/imagesloaded.pkgd.min.js","hash":"6d3e11174e22668e69df236e5c4542168f7cbfec","modified":1700445116433},{"_id":"public/plugin/love/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1700445116433},{"_id":"public/plugin/fancybox/jquery.fancybox.js","hash":"c4461bc0cacd6a1d58885ca0f466ba1b7562c85d","modified":1700445116433},{"_id":"public/plugin/jquery/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1700445116433},{"_id":"public/plugin/leancloud/av-min.js","hash":"d16c3eb20daa240feea36cc607a2e8a22ac66f81","modified":1700445116433},{"_id":"public/plugin/resizediv/resizediv.js","hash":"1b3e3eb33aee0de1f02384dbdbd3941716e0fda5","modified":1700445116433},{"_id":"public/plugin/search/ziploader.js","hash":"93c976bea5ae21811807cf27b4ca8c3c94640b04","modified":1700445116433},{"_id":"public/plugin/gallerypage/natural-gallery.full.js","hash":"5b3dfb0b5279055706c57484e14c8dac321be7e8","modified":1700445116433},{"_id":"public/plugin/toc/katelog.min.js","hash":"7acaa9e4a1a3689b84382c1814b58b1168c57e2c","modified":1700445116433},{"_id":"public/plugin/gallerypage/natural.css","hash":"8014a4791f5789e55aa8921def9eb93b3f31d48d","modified":1700445116433},{"_id":"public/plugin/nicescroll/jquery.nicescroll.js","hash":"25b8db3ad673a4661334b1cdeaf37ed881ffd17c","modified":1700445116433},{"_id":"public/plugin/motto/motto.js","hash":"282eac08d66a6e14f1b170cf1dbea67e53fba436","modified":1700445116433},{"_id":"public/css/fonts/icomoon.svg","hash":"09149a4a43ec2f8fd9df3a2a0cca774384f576a5","modified":1700445116433},{"_id":"public/img/favicon.ico","hash":"92da6723b6526aa98c23501e6086c5948a13083c","modified":1700445116433},{"_id":"public/img/cart_cover.jpg","hash":"5c9561c6cc4637a1cfc03fb0399883f052e3340b","modified":1700445116433},{"_id":"public/img/header-bg.jpg","hash":"509748b7822d48d510476d6168c96cc09d6d7502","modified":1700445116433},{"_id":"themes/ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1693386330252},{"_id":"themes/ayer/.gitignore","hash":"8faed9be54528620a8da662ad9f242e7305d6757","modified":1693386330255},{"_id":"themes/ayer/.npmignore","hash":"13239db7290ce1d6dfc62fb60191a8048c6e5781","modified":1693386330255},{"_id":"themes/ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1693386330255},{"_id":"themes/ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1693386330255},{"_id":"themes/ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":1693386330255},{"_id":"themes/ayer/README.md","hash":"df98c8af4a4412483800a8f945e62ece4caa074c","modified":1693386330255},{"_id":"themes/ayer/rollup.config.js","hash":"3d98bd1db1dcf2e0878b6fcbbbf8ff9c3da6d357","modified":1693386330284},{"_id":"themes/ayer/package.json","hash":"f171e4375353a66c8b609b3bc8aece58e8b7cd01","modified":1693386330284},{"_id":"themes/ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1693386330284},{"_id":"themes/ayer/.github/config.yml","hash":"d786334df2ea7feca64d07e573055c3452843f8a","modified":1693386330255},{"_id":"themes/ayer/_config.yml","hash":"f3f9e8bbd6c28928971f82f60c1ac0bf3ff6faee","modified":1705933222720},{"_id":"themes/ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1693386330255},{"_id":"themes/ayer/.github/FUNDING.yml","hash":"56f5ebae29b5bd4551df79f38c09ab452e0ab28f","modified":1693386330252},{"_id":"themes/ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1693386330284},{"_id":"themes/ayer/languages/en.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1693386330255},{"_id":"themes/ayer/languages/default.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1693386330255},{"_id":"themes/ayer/languages/es.yml","hash":"fc27661276313c1c539252517d664359cb286f8a","modified":1693386330255},{"_id":"themes/ayer/languages/fr.yml","hash":"3dac4d53b9b2a1b10c0273ce7472b2e76576dc5a","modified":1693386330255},{"_id":"themes/ayer/languages/nl.yml","hash":"d619955fd9659a209c58f696ee2160dfe8c6ac41","modified":1693386330255},{"_id":"themes/ayer/languages/de.yml","hash":"2b7fa47fbe06f6928a43ea3b345ab3aeaa2cee81","modified":1693386330255},{"_id":"themes/ayer/languages/ja.yml","hash":"aea06ea7bcb439d2b84501924cdd092293ee891a","modified":1693386330255},{"_id":"themes/ayer/languages/no.yml","hash":"fa4d2da9bb00ad0febc631afaf17f76aaa17e950","modified":1693386330268},{"_id":"themes/ayer/languages/ru.yml","hash":"45edcadb57176d0b11a839055df1964da8ca08f9","modified":1693386330268},{"_id":"themes/ayer/languages/pt.yml","hash":"fa0b3a4a01a0493f3ef402039e394a291a1251fd","modified":1693386330268},{"_id":"themes/ayer/languages/ko.yml","hash":"00db39dd43875774088511b4d467dcb71f1ce8ac","modified":1693386330255},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1693386330284},{"_id":"themes/ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1693386330284},{"_id":"themes/ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1693386330284},{"_id":"themes/ayer/languages/vi.yml","hash":"20f25fe0e9017d530a771687fe9d21353e034fff","modified":1693386330268},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"edf1f8c164f3d166f94e213148e984fdfc3a7c85","modified":1693386330268},{"_id":"themes/ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1693386330284},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"750fba5314d340ddb00812fc17a608a084f04462","modified":1693386330268},{"_id":"themes/ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":1693386330284},{"_id":"themes/ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1693386330284},{"_id":"themes/ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":1693386330284},{"_id":"themes/ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1693386330284},{"_id":"themes/ayer/layout/layout.ejs","hash":"ad2222b1819f763cd981f72b8204a19cb0fa75ae","modified":1693386330284},{"_id":"themes/ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1693386330284},{"_id":"themes/ayer/source-src/main.js","hash":"fcb7c6c5ffcfd72ba9bd55b475af8a0e74484634","modified":1693386330316},{"_id":"themes/ayer/.github/workflows/npmpublish.yml","hash":"6a748fbb9f13da90a00e35d1e8f54bbe71a14571","modified":1693386330255},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/bug-report.md","hash":"109c742a5829ca6c9a39d9df5023f6ecc6ff886e","modified":1693386330255},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/feature-request.md","hash":"ca76e0709f2e97edfa004922da78599ef35eb039","modified":1693386330255},{"_id":"themes/ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1693386330268},{"_id":"themes/ayer/source/404.html","hash":"fce8d48b2534f5ba5feb3a91e43813f8f85b07d8","modified":1693386330316},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/other.md","hash":"e4c347d70c3b8044eec656e8cfb78cfd49f2d991","modified":1693386330255},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1693386330348},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1693386330268},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"ec2dd8a5e55b99350d7606a4f4ba0918fd656116","modified":1693386330268},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/question.md","hash":"20a7174d36e8f090ba7800c08b0c44b15b753736","modified":1693386330255},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/float-btns.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":1693386330268},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"9ef0ed563dd6e3277534f9601ab290b72b3dc42b","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"1a9b8574d4341354ed00127ffb873c80ac1beee9","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/katex.ejs","hash":"bef830bc48db44c19bfa922d8ed5f6ee1e924ea7","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"84f5c967f5019f4964711f3edd408a7503702e58","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"4d6b2bbe0d50f609a9d6e5d646d07f7ab29e8c66","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"38abac221b79d83fd8d3ec8ee0fba55ef162d148","modified":1693386330270},{"_id":"themes/ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1693386330301},{"_id":"themes/ayer/scripts/events/index.js","hash":"f3a5d9bda901565e3c302bcb5ed716b6d006089e","modified":1693386330284},{"_id":"themes/ayer/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1693386330301},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1693386330299},{"_id":"themes/ayer/layout/_partial/lock.ejs","hash":"72ec0a339f98399c5141f4b3aca4cc8e8310f03a","modified":1693386330270},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1693386330300},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1693386330284},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1693386330299},{"_id":"themes/ayer/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1693386330301},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1693386330301},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"ba0639363016f5badd13fefd000ef967c6a4e47b","modified":1693386330284},{"_id":"themes/ayer/source/dist/main.js","hash":"4338ca7a7bc35ee139016c91d4746643a3ee01c8","modified":1693386330348},{"_id":"themes/ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1693386330316},{"_id":"themes/ayer/source/css/custom.styl","hash":"32990e811ea6fba84673b6d7175c88a3b890b109","modified":1693386330316},{"_id":"themes/ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1693386330349},{"_id":"themes/ayer/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1693386330348},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1693386330349},{"_id":"themes/ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1693386330349},{"_id":"themes/ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1693386330349},{"_id":"themes/ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1693386330349},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1693386330363},{"_id":"themes/ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1693386330363},{"_id":"themes/ayer/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1693386330363},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1693386330363},{"_id":"themes/ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1693386330363},{"_id":"themes/ayer/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1693386330363},{"_id":"themes/ayer/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1693386330363},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"ce7edc6de9f7875d8467157831680d51cf729d5a","modified":1693387112000},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1693386330363},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1693386330363},{"_id":"themes/ayer/source/js/clickBoom1.js","hash":"c97ea1f120dba2c6804d0420186ef5d6f2419b7c","modified":1693386330363},{"_id":"themes/ayer/source/js/clickBoom2.js","hash":"2bc7267652ec49cea5dc3a8bd470c7d5ec57c721","modified":1693386330363},{"_id":"themes/ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1693386330363},{"_id":"themes/ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1693386330363},{"_id":"themes/ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1693386330363},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1693386330363},{"_id":"themes/ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1693386330304},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1693386330363},{"_id":"themes/ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_remixicon.styl","hash":"6e7671af612868b750f1dc195f2e7c1c34931800","modified":1693386330316},{"_id":"themes/ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1693386330316},{"_id":"themes/ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":1693386330270},{"_id":"themes/ayer/source-src/css/style.styl","hash":"dd5f5d0fef358ea1eba3f782458f72e13f764bba","modified":1693386330316},{"_id":"themes/ayer/source-src/js/ayer.js","hash":"a3d349fb8af029e710d064c15373163680da2d39","modified":1693386330316},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1693386330270},{"_id":"themes/ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":1693386330316},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/clipboard.ejs","hash":"55f2fafe9c6a151eeee39d1a2556742ebe89b2a2","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"9f0250bc192a59a8577ea3048c8f5eef91ac10ef","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":1693386330270},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1693386330270},{"_id":"themes/ayer/scripts/events/lib/hello.js","hash":"058c73fa3900d143affb9cc7ea0b2105d3925915","modified":1693386330284},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1693386330270},{"_id":"themes/ayer/scripts/events/lib/merge-configs.js","hash":"734aac9a53cf168ee51482b02b75954a2a3df150","modified":1693386330284},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"d5b568a3554f0d6572e7b232b8a0ab3ea81a1845","modified":1693386330284},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1693386330284},{"_id":"themes/ayer/layout/_partial/post/twikoo.ejs","hash":"1e591e7b71880ca0a1dd9ab9913aa67fdd91633a","modified":1693386330270},{"_id":"themes/ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/article.styl","hash":"659a35544b321a101f7cf114f0c9fdf2cc125625","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/ayer.styl","hash":"38187e5c88eaf1ea099f2ded56f1f60194c95ec4","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1693386330313},{"_id":"themes/ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1693386330313},{"_id":"themes/ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1693386330304},{"_id":"themes/ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1693386330313},{"_id":"themes/ayer/source-src/css/_partial/navbar.styl","hash":"266df43ec4041226f1801719e873265b75fe6515","modified":1693386330313},{"_id":"themes/ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1693386330315},{"_id":"themes/ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":1693386330313},{"_id":"themes/ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1693386330316},{"_id":"themes/ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1693386330315},{"_id":"themes/ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1693386330315},{"_id":"themes/ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1693386330316},{"_id":"themes/ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1693386330315},{"_id":"themes/ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1693386330316},{"_id":"themes/ayer/source-src/css/_partial/tocbot.styl","hash":"130e29937aa750e63e8cf216934dbdd4ea95969f","modified":1693386330316},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"40ea7e428cfec835f196705b42e5a292502780af","modified":1693387091000},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1693386330349},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1693386330363},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1693386330331},{"_id":"themes/ayer/source/css/fonts/remixicon.css","hash":"8b54eed3270fae6d5bde5b0a6b522a32b5bd39a0","modified":1693386330316},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1693386330347},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1693386330363},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1693386330284},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1693386330349},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1693386330349},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1693386330331},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1693386330316},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1693386330349},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1693386330363},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1693386330331},{"_id":"public/favicon.ico","hash":"cd1b610096d9c5c780fd2a7e24baaa78dada3163","modified":1700580922197},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1700446577359},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1700446577359},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1700446577359},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1700446577359},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1700446577359},{"_id":"public/images/alipay.jpg","hash":"40ea7e428cfec835f196705b42e5a292502780af","modified":1700446577359},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1700446577359},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1700446577359},{"_id":"public/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1700446577359},{"_id":"public/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1700446577359},{"_id":"public/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1700446577359},{"_id":"public/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1700446577359},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1700446577359},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1700446577359},{"_id":"public/images/wechat.jpg","hash":"ce7edc6de9f7875d8467157831680d51cf729d5a","modified":1700446577359},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1700446577359},{"_id":"public/404.html","hash":"788929fab7b99dd74575399f41cddae6f63ce1f4","modified":1700542677525},{"_id":"public/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1700446577359},{"_id":"public/css/custom.css","hash":"58950a4f4cd82465f85428ec17b3bc05f8153b56","modified":1700446577359},{"_id":"public/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1700446577359},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1700446577359},{"_id":"public/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1700446577359},{"_id":"public/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1700446577359},{"_id":"public/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1700446577359},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1700446577359},{"_id":"public/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1700446577359},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1700446577359},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1700446577359},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1700446577359},{"_id":"public/js/tocbot.min.js","hash":"bc45d3586a21f7e364cd6efe58844932c00cf11c","modified":1700542677525},{"_id":"public/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1700446577359},{"_id":"public/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1700446577359},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1700446577359},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1700446577359},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1700446577359},{"_id":"public/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1700446577359},{"_id":"public/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1700446577359},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1700446577359},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1700446577359},{"_id":"public/css/fonts/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1700446577359},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1700451839271},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1700451836906},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"cdde6c6d6a1bdf9fb965313e21d92cf6213582b6","modified":1700451839283},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"49f681a203eecfa7127ac22edc13bd3b49693d0a","modified":1700451837548},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"b2c283d4e9aaf9ba49b8abb81adc03117b0e07db","modified":1700451837548},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1700451839284},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1700451839285},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1700451839285},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1700451839285},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1700451839286},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1700451839287},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1700451839286},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1700451839288},{"_id":"node_modules/hexo-theme-fluid/layout/.DS_Store","hash":"e2295dbe42d85b294e6f3aeefaf3623bd31759ed","modified":1700451836898},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1700451839287},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1700451836908},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1700451836909},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1700451836913},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1700451836915},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1700451836917},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1700451836925},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":1700451836925},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1700451836925},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1700451836932},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1700451836936},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":1700451836933},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1700451836936},{"_id":"node_modules/hexo-theme-fluid/source/.DS_Store","hash":"e11e97632e6d13d5b9dccadcc514268f3c039508","modified":1700451836903},{"_id":"node_modules/hexo-theme-fluid/scripts/.DS_Store","hash":"daec53fd4601c37ca272321ba2eb594d9b0a43ac","modified":1700451836900},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1700451836916},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1700451836917},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1700451836913},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1700451836918},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1700451836919},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1700451836922},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1700451836923},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1700451836924},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1700451836927},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1700451836932},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1700451836934},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1700451836934},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1700451836908},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1700451839261},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1700451839262},{"_id":"node_modules/hexo-theme-fluid/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1700451836904},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1700451839265},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1700451837549},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1700451839246},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1700451836941},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1700451839249},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1700451836941},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1700451836946},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1700451836951},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1700451837537},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1700451837531},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1700451837544},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1700451837547},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1700451837540},{"_id":"node_modules/hexo-theme-fluid/scripts/events/.DS_Store","hash":"80308812974d7cb7e001cd8f64ff9fced30ff139","modified":1700451836901},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1700451837533},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1700451839272},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1700451837532},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1700451837538},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1700451837544},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1700451837540},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1700451836949},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":1700451837545},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1700451836949},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1700451836950},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1700451836951},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1700451837543},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1700451837531},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1700451837546},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1700451837546},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1700451837535},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1700451837545},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1700451837547},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1700451836943},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1700451836944},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1700451837536},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1700451836952},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1700451837541},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1700451836902},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1700451837542},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1700451837545},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1700451836947},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1700451837543},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1700451837546},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1700451836918},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1700451836920},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1700451836920},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1700451836923},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1700451836921},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1700451836926},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1700451836922},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1700451836934},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1700451836937},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1700451836915},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1700451836939},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1700451836938},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1700451836935},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1700451836939},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1700451836914},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1700451836931},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1700451836911},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1700451836918},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1700451836912},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1700451836921},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1700451836924},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1700451836922},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1700451836928},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1700451836928},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1700451836931},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1700451836938},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1700451836915},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1700451836919},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1700451836930},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1700451836928},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1700451836935},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1700451836935},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1700451836937},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1700451839253},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1700451839268},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1700451839253},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1700451839255},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1700451836948},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"b2f61b91fffb17d11ad56811f07d52d23f012741","modified":1700451836951},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1700451836952},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":1700451837530},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1700451837537},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1700451837541},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1700451837535},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1700451839252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1700451839250},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1700451839254},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1700451839263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1700451839263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":1700451839258},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1700451839269},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1700451839256},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1700451839262},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1700451839257},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1700451839257},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1700451839259},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1700451839261},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":1700451839269},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1700451839265},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1700451839269},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1700451839264},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1700451839271},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1700451839252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1700451839251},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1700451839256},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1700451839258},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1700451839259},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1700451839260},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1700451839266},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1700451839260},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1700451839261},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1700451839267},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1700451839267},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1700451839270},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1700451839268},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1700451839270},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1700451839271},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1700451839270},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1700451839226},{"_id":"public/local-search.xml","hash":"bc8c9a61e3ce55ac6493fe66615b735222ee306c","modified":1700527913973},{"_id":"public/links/index.html","hash":"883ae9abe7d3afa08e70b19b86b48fcf7f03e649","modified":1700524024834},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1700452603555},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1700452603555},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1700452603555},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1700452603555},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1700452603555},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1700452603555},{"_id":"public/css/highlight.css","hash":"fdfaf9cd6ce76ecf183605311c247ead2da76ed1","modified":1700581396216},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1700452603555},{"_id":"public/css/main.css","hash":"526a4522eb54bb51772f51fb98295dc4fe03429f","modified":1700452603555},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1700452603555},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1700452603555},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1700452603555},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1700452603555},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1700452603555},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1700452603555},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1700452825427},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1700452603555},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1700452603555},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1700451942493},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":1700451942824},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"262fba7e30cc966b66e6b7aee99f295b15eba724","modified":1700451942822},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"421b77b99c85035f34183ff14cbfbc4dff1a3078","modified":1700451943155},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"b6d30fdf8fae8c56a1dfcdff56d964ce7dd53e57","modified":1700451942820},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"9b7647f0abda10287f86f66ef81eedbb417459b7","modified":1700451943165},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":1700451943160},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":1700451943161},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1700451942849},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":1700451943171},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":1700451943173},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1700451942885},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1700451942984},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1700451943015},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1700451943054},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1700451943027},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1700451943158},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1700451943164},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1700451943169},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1700451943156},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1700451942827},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1700451943170},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1700451942834},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1700451942940},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1700451942991},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"f03129356c788bf47071c3f007f2ef5b6b1498af","modified":1700451942959},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1700451943017},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":1700451943045},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1700451943047},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1700451943127},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":1700451943151},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1700451942681},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1700451942664},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1700451942825},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"4b4f882a393cbf5b3dfc2b218608a09905f3e3db","modified":1700451942778},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1700451942814},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1700451942816},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1700451942688},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1700451942728},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1700451942748},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1700451942723},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1700451942819},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1700451942703},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"022b870ee8ad7ac05d1569268b61899d2f706221","modified":1700451942806},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":1700451942709},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1700451942732},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":1700451942751},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1700451942803},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":1700451942790},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1700451942798},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1700451942717},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1700451942737},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1700451942744},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":1700451942742},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1700451942754},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1700451942757},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1700451942781},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1700451942799},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1700451942785},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1700451942806},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":1700451942807},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1700451942809},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1700451942794},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1700451942796},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1700451942961},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1700451943002},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1700451943008},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"a5c7d362ae63474c1a4e3eb5cd09804b3684e984","modified":1700451943023},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1700451943050},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1700451943012},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1700451942846},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"ffb13539d343498b7d7093c546831a8bde90b6a2","modified":1700451942893},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1700451942957},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1700451943029},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1700451942890},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1700451943036},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1700451943049},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1700451942943},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1700451942963},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1700451943013},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1700451942860},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"50d1b08367f709e5416140043933e79cd8d77559","modified":1700451943025},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1700451942884},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1700451942899},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1700451943055},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1700451942936},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":1700451943023},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1700451942848},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1700451943043},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1700451942923},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1700451943019},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":1700451943020},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1700451943032},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1700451943053},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1700451942861},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1700451942862},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1700451942866},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1700451942868},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1700451942867},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1700451942869},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"3ec354778f6a4ac97fb64d5629c83b293ccceb5e","modified":1700451942873},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1700451942872},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1700451942877},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1700451942874},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1700451942879},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1700451942880},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1700451942882},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1700451942982},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":1700451943108},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":1700451943123},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":1700451943118},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1700451943149},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1700451943073},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1700451943080},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1700451943094},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1700451943089},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1700451943104},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1700451943119},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":1700451943083},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1700451943147},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1700451943091},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1700451943092},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1700451943106},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1700451943136},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"029eebbdcb3c682780d1de629fa06858cbe9782b","modified":1700451943113},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1700451943132},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"f853075c1399be950107247b1fe79cdd086120e4","modified":1700451943138},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1700451943141},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1700451943142},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":1700451943143},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"1ca53ee8c4a2dee23acba46c67e5a9f01c5d2eb5","modified":1700451943144},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1700451943149},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":1700451943098},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":1700451943139},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1700451943078},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1700451943125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"a9bf2e1153a8486acd1ea8e0e528a07059ade17b","modified":1700451943133},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1700451943088},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":1700451943111},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1700451943113},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1700451943115},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1700451943128},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1700451943129},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1700451943134},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":1700451943145},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1700451943150},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1700451942531},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1700451942694},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1700451942765},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":1700451942832},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1700451942966},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1700451942853},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1700451942930},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1700451942911},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1700451942967},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1700451943038},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1700451943059},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1700451943064},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1700451943067},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1700451942916},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5b73920843ce858df6e3b03325d5d1f43cdab3","modified":1700451942855},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":1700451942919},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":1700451942925},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":1700451942953},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":1700451942954},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1700451942974},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1700451942986},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1700451943039},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1700451942992},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"894bf60ff5170cf1e4f276a8cedaf8301bceb824","modified":1700451943060},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":1700451943065},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":1700451943063},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1700451942888},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"ad7f1ee2e67deee0706e0838b5724dd37fc30a34","modified":1700451943069},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1700451942896},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1700451942897},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1700451942970},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1700451943006},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1700451943056},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1700451942976},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1700451943000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1700451942988},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1700451942857},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":1700451943005},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1700451942904},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1700451942977},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1700451942956},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1700451943042},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1700451943058},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1700451943066},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"42496c6a32406604178d24685408b77a40adc993","modified":1700451943070},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1700451942839},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":1700451942920},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1700451942978},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":1700451942997},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1700451942837},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1700451942980},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1700451943046},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1700451943100},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1700451943123},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1700451943103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1700451943125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":1700451943131},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1700452825427},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1700452825427},{"_id":"public/img/favicon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1700581352077},{"_id":"public/css/index.css","hash":"d25f87bebbc7d2447530d70c1b5ce4d3de952272","modified":1700452825427},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1700452825427},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1700452825427},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1700452825427},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1700452825427},{"_id":"public/live2dw/assets/miku.model.json","hash":"32e49dfc6cb4d9c537453bb083aab39ed708c476","modified":1700453760632},{"_id":"public/live2dw/assets/mtn/miku_idle_01.mtn","hash":"5633f73601cf8b0a318e7a7265f71cc782683251","modified":1700453760632},{"_id":"public/live2dw/assets/miku.physics.json","hash":"d5ca7f215044ba5bf1cdb8045a5c99b64ec258ce","modified":1700453760632},{"_id":"public/live2dw/assets/mtn/miku_m_01.mtn","hash":"bd0ea5f2f0528b21c4e5632838b69e478b652e88","modified":1700453760632},{"_id":"public/live2dw/assets/mtn/miku_m_02.mtn","hash":"2eda9602d626d89285e0c0c5f564383964516cc8","modified":1700453760632},{"_id":"public/live2dw/assets/mtn/miku_m_04.mtn","hash":"5c440e8f4cd45e73a7c8044ea0e2ea11234f9fd9","modified":1700453760632},{"_id":"public/live2dw/assets/mtn/miku_m_03.mtn","hash":"94ef9d31a78f7f90d3fb213c4353afbdb3462cff","modified":1700453760632},{"_id":"public/live2dw/assets/mtn/miku_m_06.mtn","hash":"0bfd6ad29e5e171a1ce03a7acb8ffcca9f463902","modified":1700453760632},{"_id":"public/live2dw/assets/mtn/miku_shake_01.mtn","hash":"190875ab6cdeee7ae87c4c296429b848c942dd8a","modified":1700453760632},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1700453760632},{"_id":"public/live2dw/assets/mtn/miku_m_05.mtn","hash":"73b9b162c1dbf9a6747364ae47b12cba9da0bbec","modified":1700453760632},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1700453760632},{"_id":"public/live2dw/assets/moc/miku.moc","hash":"a57e92e12f1fcb21d4d3a9ac34f01badbeff3671","modified":1700453760632},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1700453760632},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1700453760632},{"_id":"public/live2dw/assets/moc/miku.2048/texture_00.png","hash":"26fe101720ab8e55fb62c87b563d0dbb903c5eaf","modified":1700453760632},{"_id":"source/blogpics/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1700353343033},{"_id":"source/blogpics/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1700353358394},{"_id":"source/blogpics/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1700352986978},{"_id":"source/postcover/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1700455682632},{"_id":"public/blogpics/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1700456487961},{"_id":"public/blogpics/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1700456487961},{"_id":"public/blogpics/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1700456487961},{"_id":"public/postcover/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1700456487961},{"_id":"source/medias/postcover/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1700455682632},{"_id":"source/medias/blogpics/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1700353343033},{"_id":"source/medias/blogpics/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1700353358394},{"_id":"source/medias/blogpics/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1700352986978},{"_id":"public/medias/blogpics/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1700457239023},{"_id":"public/medias/blogpics/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1700457239023},{"_id":"public/medias/blogpics/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1700457239023},{"_id":"public/medias/postcover/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1700457239023},{"_id":"source/_posts/千奇百怪的字符串处理函数/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1700353343033},{"_id":"source/_posts/千奇百怪的字符串处理函数/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1700353358394},{"_id":"source/_posts/千奇百怪的字符串处理函数/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1700352986978},{"_id":"source/_posts/OJ中的那些小丑行为/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1700455682632},{"_id":"public/2023/11/20/千奇百怪的字符串处理函数/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1700460014037},{"_id":"public/2023/11/20/千奇百怪的字符串处理函数/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1700460014037},{"_id":"public/2023/11/20/千奇百怪的字符串处理函数/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1700460014037},{"_id":"public/2023/11/20/OJ中的那些小丑行为/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1700460014037},{"_id":"source/img/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1700353358394},{"_id":"source/img/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1700353343033},{"_id":"source/img/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1700352986978},{"_id":"source/img/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1700455682632},{"_id":"public/img/3.png","hash":"101a284227907ff261f212463c915c49a0c8d6c6","modified":1700527913973},{"_id":"public/img/2.png","hash":"ca34b7fed3774ce590e138cf249a7c2a9058efa8","modified":1700527913973},{"_id":"public/img/1.png","hash":"ba68080f8a9b1971ef30b5922d4af2810ddc5749","modified":1700527913973},{"_id":"public/img/OJclown.png","hash":"9e120a978e2992ea01b6f8f731d8d041915db8c3","modified":1700527913973},{"_id":"themes/one/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493644191000},{"_id":"themes/one/_config.yml","hash":"293537e902308415e7c64cc5da41e3682dcbf947","modified":1493644191000},{"_id":"themes/one/layout/index.ejs","hash":"dba8f063f5f0013f1f3680663c2c4090fa02072a","modified":1493644191000},{"_id":"themes/one/layout/layout.ejs","hash":"dba8f063f5f0013f1f3680663c2c4090fa02072a","modified":1493644191000},{"_id":"themes/one/source/012cf6a10129e2275d79d6adac7f3b02.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1493644191000},{"_id":"themes/one/scripts/index.js","hash":"c63ab8162634ede968455fa51c68b2b6ef6cd55e","modified":1493644191000},{"_id":"themes/one/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1493644191000},{"_id":"themes/one/source/570eb83859dc23dd0eec423a49e147fe.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1493644191000},{"_id":"themes/one/source/index.html","hash":"add1acb9ba3df604955502ed6ff844356d94f54e","modified":1493644191000},{"_id":"themes/one/scripts/lib/css_lsload.js","hash":"b5e624154c0a36914454eb129549d92fe22a6201","modified":1493644191000},{"_id":"themes/one/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1493644191000},{"_id":"themes/one/scripts/lib/js_lsload.js","hash":"a8778ec9b545968308959b8e81ec16dbf0b21908","modified":1493644191000},{"_id":"themes/one/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1493644191000},{"_id":"themes/one/scripts/lib/router-add-one.js","hash":"afa1cc03ea12c1453c6fa4132e163e6cfd030821","modified":1493644191000},{"_id":"themes/one/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1493644191000},{"_id":"themes/one/scripts/lib/restful.js","hash":"bb02f074e56b4762c709b85959ad76d12888976d","modified":1493644191000},{"_id":"themes/one/source/a37b0c01c0baf1888ca812cc0508f6e2.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1493644191000},{"_id":"themes/one/source/52342c4f7685bd4be2f462665845d4e9.js","hash":"ceac2f8363baa1ddb8853d3bcd3c3f3c6d12326a","modified":1493644191000},{"_id":"themes/one/source/e79bfd88537def476913f3ed52f4f4b3.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1493644191000},{"_id":"themes/one/source/embed.js","hash":"3ac650967aa0f74ec4d7ef5d8d168f7f199e31af","modified":1493644191000},{"_id":"themes/one/source/bundle.js","hash":"6aa0aa2a54c3ad025ee8a0dbbfd0528358537bdb","modified":1493644191000},{"_id":"themes/one/source/vendor.js","hash":"e0b464cc7951b731a635e80553b0e1829d305c2e","modified":1493644191000},{"_id":"themes/one/source/bundle.js.map","hash":"433753b9b460ea8422b7f97eefc03d29fd0eb944","modified":1493644191000},{"_id":"themes/one/source/vendor.js.map","hash":"47795ec038673ca72dbd3dd312eefef68677807d","modified":1493644191000},{"_id":"public/012cf6a10129e2275d79d6adac7f3b02.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1700531466333},{"_id":"public/570eb83859dc23dd0eec423a49e147fe.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1700531466333},{"_id":"public/a37b0c01c0baf1888ca812cc0508f6e2.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1700531466333},{"_id":"public/52342c4f7685bd4be2f462665845d4e9.js","hash":"ceac2f8363baa1ddb8853d3bcd3c3f3c6d12326a","modified":1700531466333},{"_id":"public/embed.js","hash":"3ac650967aa0f74ec4d7ef5d8d168f7f199e31af","modified":1700531466333},{"_id":"public/e79bfd88537def476913f3ed52f4f4b3.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1700531466333},{"_id":"public/bundle.js","hash":"6aa0aa2a54c3ad025ee8a0dbbfd0528358537bdb","modified":1700531466333},{"_id":"public/vendor.js","hash":"e0b464cc7951b731a635e80553b0e1829d305c2e","modified":1700531466333},{"_id":"public/bundle.js.map","hash":"433753b9b460ea8422b7f97eefc03d29fd0eb944","modified":1700531466333},{"_id":"public/vendor.js.map","hash":"47795ec038673ca72dbd3dd312eefef68677807d","modified":1700531466333},{"_id":"themes/ocean/package.json","hash":"3976a703c6b3d903387a77cae8b732a7aeb83954","modified":1693383564312},{"_id":"themes/ocean/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1693383564296},{"_id":"themes/ocean/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1693383564296},{"_id":"themes/ocean/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1693383564296},{"_id":"themes/ocean/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1693383564296},{"_id":"themes/ocean/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1693383564296},{"_id":"themes/ocean/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1693383564296},{"_id":"themes/ocean/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1693383564296},{"_id":"themes/ocean/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1693383564296},{"_id":"themes/ocean/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1693383564296},{"_id":"themes/ocean/languages/zh-CN.yml","hash":"7dbe3a66616b6d65c3b2cd5e05a3f56b372ae6e3","modified":1693383564296},{"_id":"themes/ocean/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1693383564296},{"_id":"themes/ocean/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1693383564296},{"_id":"themes/ocean/layout/categories.ejs","hash":"4cb23a7e19dfc8c49ccf91efe17c29553f3d77d9","modified":1693383564312},{"_id":"themes/ocean/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1693383564312},{"_id":"themes/ocean/layout/layout.ejs","hash":"d64efda756d3a7cb72a581ecaa6da7a3a56e0679","modified":1693383564312},{"_id":"themes/ocean/layout/index.ejs","hash":"6c73519baaab31439d0c33c8ecd5445f52237535","modified":1693383564312},{"_id":"themes/ocean/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1693383564312},{"_id":"themes/ocean/layout/tags.ejs","hash":"06d5141a27dfed6f88f73d764c6d0d8d97e5e955","modified":1693383564312},{"_id":"themes/ocean/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1693383564312},{"_id":"themes/ocean/README.md","hash":"8bb589206c1fee1b055b77f9dc7f26ccdf269ddc","modified":1693383564281},{"_id":"themes/ocean/source/404.html","hash":"5110b5b2505a01ef1e5d98c8d35071e11c13af9f","modified":1693383564322},{"_id":"themes/ocean/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1693383564281},{"_id":"themes/ocean/layout/_partial/archive-post.ejs","hash":"faa07de523087032aa5ec2b1543606d8f6950ce8","modified":1693383564296},{"_id":"themes/ocean/_config.yml","hash":"fa79a15e545b3732d2c602ff30c8cbd722633b41","modified":1693383564281},{"_id":"themes/ocean/layout/_partial/after-footer.ejs","hash":"016ab42745779e63e4e397e0b5cdc9e4a28ada1c","modified":1693383564296},{"_id":"themes/ocean/source/favicon.ico","hash":"d125a7c3f6f2c75e3f3fb7df9ef28db2987a85a7","modified":1693383564359},{"_id":"themes/ocean/layout/_partial/article.ejs","hash":"375733ce25ab8fea34418854bc9a8e7421fb59af","modified":1693383564296},{"_id":"themes/ocean/layout/_partial/archive.ejs","hash":"bd9db72e891bf373a93194b45e6fbf59d4d64458","modified":1693383564296},{"_id":"themes/ocean/layout/_partial/totop.ejs","hash":"3ba945ca770b0f0fd74eebb2e209ffc95b2f4877","modified":1693383564312},{"_id":"themes/ocean/layout/_partial/head.ejs","hash":"8891e199993ba8cee3b42c7a795f3f4bc630bf10","modified":1693383564305},{"_id":"themes/ocean/layout/_partial/footer.ejs","hash":"fb246a762cd73a17f0352772e185f64b33f7703e","modified":1693383564305},{"_id":"themes/ocean/source/css/404.styl","hash":"31e772e911b83153513c80e4462926c77444b465","modified":1693383564322},{"_id":"themes/ocean/layout/_partial/ocean.ejs","hash":"e8f02ce1a13a74b17b0924c5d3495e173fed87d5","modified":1693383564305},{"_id":"themes/ocean/layout/_partial/sidebar.ejs","hash":"11fa32ed8a5bc5c2fd1029714734853682e2ff89","modified":1693383564312},{"_id":"themes/ocean/source/css/_extend.styl","hash":"2f63544e862d76ef490582d4d837b55ae0e75d03","modified":1693383564328},{"_id":"themes/ocean/source/css/_fonts.styl","hash":"b3c230b86160e3caaa8b70152f6e583df561999a","modified":1693383564328},{"_id":"themes/ocean/source/css/_variables.styl","hash":"b0b30caa39bbb94e1af61959cfc044b18d02871c","modified":1693383564343},{"_id":"themes/ocean/source/css/style.styl","hash":"b35372aa92fe2d32a146dccc115e3c672d866ed5","modified":1693383564343},{"_id":"themes/ocean/source/images/hexo.svg","hash":"35df818edc1b34e4172e39d6e1989f04a4addf78","modified":1693383564359},{"_id":"themes/ocean/source/css/_mixins.styl","hash":"7e948f380916e51f8da3ae90f5c69800413e0c64","modified":1693383564328},{"_id":"themes/ocean/source/css/_feathericon.styl","hash":"f83daf47291ff0834353f63c1b67fc9ec470de94","modified":1693383564328},{"_id":"themes/ocean/source/images/hexo-inverted.svg","hash":"5f3b9981523bbec59669b6ff138b1e327d17dcd6","modified":1693383564359},{"_id":"themes/ocean/source/css/_normalize.styl","hash":"df9ca719f651c45a88ab4d6afa6d29edf51aeba9","modified":1693383564328},{"_id":"themes/ocean/source/js/ocean.js","hash":"0328aaa1a1186af6b8a0bed5a320643bcf4c15e5","modified":1693383564590},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1693383564585},{"_id":"themes/ocean/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1693383564586},{"_id":"themes/ocean/source/js/jquery.justifiedGallery.min.js","hash":"e628c5caefa53b09675efed2faa1c8ff04bb4d5f","modified":1693383564586},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1693383564343},{"_id":"themes/ocean/source/js/search.js","hash":"45cc4cd34bd8700a7e238216b63ae2ad94220164","modified":1693383564591},{"_id":"themes/ocean/layout/_partial/post/busuanzi.ejs","hash":"1a9cd03ed6ea9f75d6ee885addfd1d297bf58b0f","modified":1693383564305},{"_id":"themes/ocean/source/js/pace.min.js","hash":"64759f14e0f92d62df57eb752f1745a16aba93ce","modified":1693383564591},{"_id":"themes/ocean/layout/_partial/post/albums.ejs","hash":"56c2c04574d00cd74eaa2a8134174bc0a27d0e73","modified":1693383564305},{"_id":"themes/ocean/source/js/tocbot.min.js","hash":"bc45d3586a21f7e364cd6efe58844932c00cf11c","modified":1693383564591},{"_id":"themes/ocean/layout/_partial/post/gallery.ejs","hash":"bbae7612131a2338c14a37b9c6ab67589307bcf9","modified":1693383564305},{"_id":"themes/ocean/layout/_partial/post/justifiedGallery.ejs","hash":"84bf2f2b7e5737abd8e76848e5639940a32bbd12","modified":1693383564305},{"_id":"themes/ocean/layout/_partial/post/category.ejs","hash":"6940af644b8a1f4502618303daf8bb551f480e1a","modified":1693383564305},{"_id":"themes/ocean/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1693383564305},{"_id":"themes/ocean/layout/_partial/post/nav.ejs","hash":"f054071bc2fbbc378dbbb87a78cc2247251ab442","modified":1693383564305},{"_id":"themes/ocean/layout/_partial/post/tag.ejs","hash":"173a9bfc9ef20a84bcb261fc14a5312770eb8fb7","modified":1693383564312},{"_id":"themes/ocean/layout/_partial/post/tocbot.ejs","hash":"cab48cd323fa664027e88e491c7b5dde9494f78e","modified":1693383564312},{"_id":"themes/ocean/layout/_partial/post/title.ejs","hash":"c2dee75ffff83ccf0a7d92dc773fbe9542b72d6c","modified":1693383564312},{"_id":"themes/ocean/layout/_partial/post/valine.ejs","hash":"233ec49910c198c76c8a43758c0d7e25a9141481","modified":1693383564312},{"_id":"themes/ocean/layout/_partial/post/gitalk.ejs","hash":"94822dbc74fc46ef3449d2ca4d8eac1c0b64abdc","modified":1693383564305},{"_id":"themes/ocean/layout/_partial/post/topping.ejs","hash":"14a517ef1eb2e20c441659d271ce77944d63f8e2","modified":1693383564312},{"_id":"themes/ocean/source/css/_partial/archive.styl","hash":"77e06d5d08cdcdb95e4781ae5f2aac0642148d56","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/articles.styl","hash":"92da71c704ae6f69704211a124bd72c23e4069a4","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/categories.styl","hash":"2d5144932a9a396a171f80ea8a5b42cdb95c590d","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/english.styl","hash":"3706089d7166c1ec54eb84732509d95c9070bc2f","modified":1693383564328},{"_id":"themes/ocean/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1693383564305},{"_id":"themes/ocean/source/css/_partial/article.styl","hash":"669d1f048f69a3d9ca28a707d892a112fcc70431","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/apple.styl","hash":"0323de4d3839537b1eb1b53fc4ca46f371b666fe","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/blockquote.styl","hash":"777f58bef2c6a2e3312e593163c2fc7e5b5a7b1a","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/highlight.styl","hash":"ec817f8699d0402d2d73c923588eda1971fec9d1","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/layou.styl","hash":"52206b6d091569a0936ad91ebca1b3d041b0949b","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/justifiedGallery.styl","hash":"6d354099d27254bfe38cdc6b1baaae3b09a665f4","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/lists.styl","hash":"e75bbb6462166b88bde8c03cacdd2d61d2bdea29","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/pages.styl","hash":"2f16310c0fa151d63551266e03133480668e832a","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/footer.styl","hash":"ee5a84861cdecbc61f63c897eb43c872e4a8c778","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/safari.styl","hash":"e5df2451121bba0a38ad84134550006c5e80a584","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/navbar.styl","hash":"22eb72e5224cf0699df52afe17cebadfa71053b5","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/tooltips.styl","hash":"8c0ddaa180636df8ddf4a39ae6cfe6b44d8b4b6d","modified":1693383564343},{"_id":"themes/ocean/source/css/_partial/ocean.styl","hash":"0ca6bf20e20f7d35d12c008a05faefd35ac1fa46","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/tag.styl","hash":"fe9699f17d198599742cd58dbae734f1441a3cd6","modified":1693383564343},{"_id":"themes/ocean/source/css/_partial/search.styl","hash":"1070b0139c91d0def736ea182cdc884b927a9d19","modified":1693383564328},{"_id":"themes/ocean/source/css/_partial/valine.styl","hash":"f00d3136bfab1bff406d2465ed019f24ed4b881b","modified":1693383564343},{"_id":"themes/ocean/source/css/_partial/totop.styl","hash":"a36c7e0756c2df2bd2897953a1faa6c7e3a63ccc","modified":1693383564343},{"_id":"themes/ocean/source/css/_partial/tocbot.styl","hash":"de6fdc9775343f03b5d9ef0f796cfbc8c53f5815","modified":1693383564343},{"_id":"themes/ocean/source/css/_partial/pace.styl","hash":"da489a56e05903999c297c21b5c005570a2220e2","modified":1693383564328},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1693383564343},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1693383564343},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1693383564343},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.eot","hash":"532e7f0e62bcc9be2fb72c143635fa5051503414","modified":1693383564359},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.svg","hash":"b0a3535723b40ad2fa1636b244099af1c86c71a7","modified":1693383564359},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.ttf","hash":"1133580bee441a8ad24fb2dde3bbdc324d8648af","modified":1693383564359},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.woff","hash":"83f9d80f2e2a158f7e3024289d8cd856d0966efb","modified":1693383564359},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1693383564343},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1693383564581},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","hash":"f270afe2322da504c90d0bd9497d27725dac7bde","modified":1693383564359},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","hash":"fecf3b222004a4d9d5c5f962b81344754673c7c9","modified":1693383564586},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","hash":"c868a01325d16441a50a94a13c623100a94a3a5c","modified":1693383564343},{"_id":"themes/ocean/screenshots/hexo-theme-ocean.jpg","hash":"13b5045d2120cac2f68849757f5e0af08938b7c6","modified":1693383564322},{"_id":"themes/ocean/source/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1693383564359},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1693383564471},{"_id":"themes/ocean/source/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1693383564486},{"_id":"themes/ocean/source/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1693383564581},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1693383564423},{"_id":"public/images/hexo-inverted.svg","hash":"5f3b9981523bbec59669b6ff138b1e327d17dcd6","modified":1700542677525},{"_id":"public/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1700542677525},{"_id":"public/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1700542677525},{"_id":"public/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1700542677525},{"_id":"public/fonts/raleway_medium/Raleway-Medium.eot","hash":"532e7f0e62bcc9be2fb72c143635fa5051503414","modified":1700542677525},{"_id":"public/fonts/raleway_medium/Raleway-Medium.svg","hash":"b0a3535723b40ad2fa1636b244099af1c86c71a7","modified":1700542677525},{"_id":"public/fonts/raleway_medium/Raleway-Medium.ttf","hash":"1133580bee441a8ad24fb2dde3bbdc324d8648af","modified":1700542677525},{"_id":"public/images/hexo.svg","hash":"35df818edc1b34e4172e39d6e1989f04a4addf78","modified":1700542677525},{"_id":"public/fonts/raleway_medium/Raleway-Medium.woff","hash":"83f9d80f2e2a158f7e3024289d8cd856d0966efb","modified":1700542677525},{"_id":"public/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1700542677525},{"_id":"public/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1700542677525},{"_id":"public/css/feathericon/feathericon.svg","hash":"c868a01325d16441a50a94a13c623100a94a3a5c","modified":1700542677525},{"_id":"public/css/style.css","hash":"fa3cb40c60001824e36fe49ef88831d6ac3ab784","modified":1700580922197},{"_id":"public/css/404.css","hash":"952f9d1b869886a2940768fb7d1fd891ccea29fa","modified":1700542677525},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1700542677525},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"600c86071c2b5198cfa2c052dd90b78920f62b45","modified":1700542677525},{"_id":"public/js/ocean.js","hash":"39f7f028a6c449b3e418e659abba7276cff7f3b0","modified":1700542677525},{"_id":"public/js/jquery-2.0.3.min.js","hash":"ab131f0b13a89f24543fadbf496b1c813d417c02","modified":1700542677525},{"_id":"public/js/jquery.justifiedGallery.min.js","hash":"73b9373cd80bdbf77e711818095f3f120a019547","modified":1700542677525},{"_id":"public/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1700542677525},{"_id":"public/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1700542677525},{"_id":"public/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1700542677525},{"_id":"public/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1700542677525},{"_id":"public/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1700542677525},{"_id":"public/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1700542677525},{"_id":"themes/flexblock/.gitignore","hash":"a010af107642d751bda979583183f366cf05fd7f","modified":1692149353000},{"_id":"themes/flexblock/README.md","hash":"96fb9162640f7ea355d66e09a9e8718d4c8816db","modified":1692149353000},{"_id":"themes/flexblock/LICENSE","hash":"da85e2f093615e3c008f60a94f85bf3d45106c95","modified":1692149353000},{"_id":"themes/flexblock/_config.yml","hash":"05a40b7a56af450b770c73cfc1e3e2fb79c7c2a7","modified":1692149353000},{"_id":"themes/flexblock/.prettierrc.cjs","hash":"485d5a61c410ecebb2954e6762f7eb6f10f6b3e9","modified":1692149353000},{"_id":"themes/flexblock/package.json","hash":"4444cdfac3e5c95144962471050b073779475139","modified":1692149353000},{"_id":"themes/flexblock/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1692149353000},{"_id":"themes/flexblock/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1692149353000},{"_id":"themes/flexblock/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1692149353000},{"_id":"themes/flexblock/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1692149353000},{"_id":"themes/flexblock/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1692149353000},{"_id":"themes/flexblock/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1692149353000},{"_id":"themes/flexblock/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1692149353000},{"_id":"themes/flexblock/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1692149353000},{"_id":"themes/flexblock/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1692149353000},{"_id":"themes/flexblock/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1692149353000},{"_id":"themes/flexblock/languages/zh-CN.yml","hash":"eb0ef000853ecc6d5db678dd5b71caf53e809d02","modified":1692149353000},{"_id":"themes/flexblock/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1692149353000},{"_id":"themes/flexblock/layout/category.ejs","hash":"c631331af04cbfb8eb4567262a369be74fdf4acb","modified":1692149353000},{"_id":"themes/flexblock/layout/index.ejs","hash":"1170f7c070d40374753ac343783b9795349f6ec9","modified":1692149353000},{"_id":"themes/flexblock/layout/archive.ejs","hash":"691837b349f9c4c11651d3a45776130cbde3587e","modified":1692149353000},{"_id":"themes/flexblock/layout/layout.ejs","hash":"ea68e65fce440f6a319a4122e3a0f74cde4e1c8d","modified":1692149353000},{"_id":"themes/flexblock/layout/page.ejs","hash":"1efd4bc229345efff68aa47ec4bf9a774ebee874","modified":1692149353000},{"_id":"themes/flexblock/layout/post.ejs","hash":"e7afe45b5c524dcd7fc6115936dc4de8f6deaedc","modified":1692149353000},{"_id":"themes/flexblock/layout/tag.ejs","hash":"5d7eaf2d7cee35d6ec957db5edbf81f38b450ed7","modified":1692149353000},{"_id":"themes/flexblock/scripts/index.js","hash":"67587a84ed857755433949f153e891ec72e36a1f","modified":1692149353000},{"_id":"themes/flexblock/source/icons-192.png","hash":"8cd106d9039f1d5aa8163ecd4a5e352058a0f6cf","modified":1692149353000},{"_id":"themes/flexblock/source/favicon.ico","hash":"cd1b610096d9c5c780fd2a7e24baaa78dada3163","modified":1692149353000},{"_id":"themes/flexblock/source/manifest.json","hash":"2088b35862949ca226a2b7b3d06d50c25ef721a0","modified":1692149353000},{"_id":"themes/flexblock/layout/_svg/icon-article.svg","hash":"f89ab250586cf0bd8108b77e48a5288f1d0dd512","modified":1692149353000},{"_id":"themes/flexblock/.github/workflows/npm-publish.yml","hash":"6bbe7bfe0ef521a5c8d317e645ea194bb921be73","modified":1692149353000},{"_id":"themes/flexblock/layout/_svg/icon-tags.svg","hash":"0d974ce6d089d08ef009ad56d1b5d66bf9c2c1e6","modified":1692149353000},{"_id":"themes/flexblock/layout/_svg/icon-toc.svg","hash":"05d2eecfb27deade461f25b2a396c230e18cd6b4","modified":1692149353000},{"_id":"themes/flexblock/layout/_svg/icon-notice.svg","hash":"0d2f705ca65673eda3d38420aa512d83fcbc1e72","modified":1692149353000},{"_id":"themes/flexblock/layout/_svg/icon-categories.svg","hash":"cfe4012051132281255e211c28971e05726cdc43","modified":1692149353000},{"_id":"themes/flexblock/layout/_svg/social-ins.svg","hash":"fdcaac4ecfa35a05765a9aead8ed52c46634f4ed","modified":1692149353000},{"_id":"themes/flexblock/layout/_svg/social-github.svg","hash":"20c1b5fd5e06d10fb1e2cd83da0a18629dbe9c9d","modified":1692149353000},{"_id":"themes/flexblock/layout/_svg/social-twitter.svg","hash":"b9bbd30600b9832ac7e37fc116d78b389c047e1a","modified":1692149353000},{"_id":"themes/flexblock/layout/_svg/social-weibo.svg","hash":"ec9dd4c6d4cd7e1c860054c84cef570c7bbd0f35","modified":1692149353000},{"_id":"themes/flexblock/layout/_partial/article-list.ejs","hash":"e7d7858e52174cad048f7667083f87b2926f7a2e","modified":1692149353000},{"_id":"themes/flexblock/layout/_svg/social-zhihu.svg","hash":"c7dfaa6791aea630f418821890ae97ac4153ef50","modified":1692149353000},{"_id":"themes/flexblock/layout/_partial/footer-other.ejs","hash":"9e93e20f3e3ded687abe00a6478e3c4dbfff479e","modified":1692149353000},{"_id":"themes/flexblock/layout/_partial/content.ejs","hash":"abac1b4977a15d63535aad7e4566e998baafac37","modified":1692149353000},{"_id":"themes/flexblock/layout/_partial/footer-script.ejs","hash":"1975bc07891e516c797de7d346db051745da7a63","modified":1692149353000},{"_id":"themes/flexblock/layout/_partial/footer.ejs","hash":"ec1b0fc3c90b768a9e5a7e17d12865661f6a6976","modified":1692149353000},{"_id":"themes/flexblock/layout/_partial/nav.ejs","hash":"7da8b959230e2c3b1f20413263c578ad46a6b1a5","modified":1692149353000},{"_id":"themes/flexblock/layout/_partial/page.ejs","hash":"9411826c3a045f389d23cbc809e2ef46e21ea1fd","modified":1692149353000},{"_id":"themes/flexblock/layout/_partial/header.ejs","hash":"eee81ace5b6c75005cc59ee2be6ab37eb3c2b17f","modified":1692149353000},{"_id":"themes/flexblock/layout/_partial/pagination.ejs","hash":"51a0986190719eea34e8624c87b346b4a199e49c","modified":1692149353000},{"_id":"themes/flexblock/layout/_widget/article-nav.ejs","hash":"8df3b527e6153323c8ded33768bd5e5267dfa422","modified":1692149353000},{"_id":"themes/flexblock/layout/_widget/category.ejs","hash":"488d6e93a6240d00d0c60c9f104f4304400415ba","modified":1692149353000},{"_id":"themes/flexblock/layout/_widget/date.ejs","hash":"5c275ec71f7ce628599683393ae71cf95196f71f","modified":1692149353000},{"_id":"themes/flexblock/layout/_widget/tag.ejs","hash":"2a1642735fe62363cee1eeeb09a3d36c2e8ac00e","modified":1692149353000},{"_id":"themes/flexblock/layout/_widget/updated.ejs","hash":"7ce6c7f3d22f7c394cf43f4f4b893dabc9503e83","modified":1692149353000},{"_id":"themes/flexblock/layout/_widget/widget-categorys.ejs","hash":"588237737f87a0ff69d00605c868c1297054d573","modified":1692149353000},{"_id":"themes/flexblock/layout/_widget/widget-tags.ejs","hash":"8c360bf72e85a4cf48c6064b44a64828d059285a","modified":1692149353000},{"_id":"themes/flexblock/layout/_widget/widget-notice.ejs","hash":"0a1ec45028b2abd123bb6a96017168fd55759971","modified":1692149353000},{"_id":"themes/flexblock/layout/_widget/widget-toc.ejs","hash":"0607e05641735d1fea7c74bc3c5b5f41f3bfb16f","modified":1692149353000},{"_id":"themes/flexblock/layout/plug-in/aplayer.ejs","hash":"081184379480e5e154a7d06e1e059a38e964f10c","modified":1692149353000},{"_id":"themes/flexblock/layout/plug-in/bilibili-emoji.ejs","hash":"55a1213ef83c32e59f9cc0a84502a87985da1db5","modified":1692149353000},{"_id":"themes/flexblock/layout/plug-in/clipboard.ejs","hash":"9aa6f1e5b150ab1003bbb5481ab993777cfde5f1","modified":1692149353000},{"_id":"themes/flexblock/layout/plug-in/dplayer.ejs","hash":"1ba83b2e10b840c6b5b72ece2f8448f4ec888347","modified":1692149353000},{"_id":"themes/flexblock/source/css/style.styl","hash":"f388a27e55579eb3ecd726c580c2253a48f68fc3","modified":1692149353000},{"_id":"themes/flexblock/source/js/script.js","hash":"8f0900b1b6bbd1fdc463fbc77f3deb5e598c9871","modified":1692149353000},{"_id":"themes/flexblock/layout/_widget/widget-author.ejs","hash":"d3bb8143f405d39734b28216f31a5a7b26691bab","modified":1692149353000},{"_id":"themes/flexblock/layout/_widget/comment.ejs","hash":"65eb6218afe3799205397a08a153738d7533a5e5","modified":1692149353000},{"_id":"themes/flexblock/source/css/_partial/card.styl","hash":"ce4215a8f91f1c2136a192c8004ea439b11c2abc","modified":1692149353000},{"_id":"themes/flexblock/source/css/_partial/content.styl","hash":"3d489acf1c6c4903c0a2e2bf47daee58a0a55445","modified":1692149353000},{"_id":"themes/flexblock/source/css/_partial/nav.styl","hash":"8a90c260ee4ab99001fc414accd661e7fdb235d5","modified":1692149353000},{"_id":"themes/flexblock/source/css/_partial/header.styl","hash":"b3df8393a64cbcd16bb586e9b656a31e679260da","modified":1692149353000},{"_id":"themes/flexblock/source/css/_partial/footer.styl","hash":"00796f433ed85bd9186be3b2d16deb90b682d1d1","modified":1692149353000},{"_id":"themes/flexblock/source/css/_partial/page.styl","hash":"2d0fcee623a70283e53134fb2e16f2f7fa4d6d95","modified":1692149353000},{"_id":"themes/flexblock/source/css/_partial/pagination.styl","hash":"bdd9fede0c8f23af3e9b0cbc4f356e3148721416","modified":1692149353000},{"_id":"themes/flexblock/source/css/_util/mixins.styl","hash":"70cf83071cfa7823045ea6f355f47b0aa26d23f8","modified":1692149353000},{"_id":"themes/flexblock/source/css/_util/variables.styl","hash":"b184fe67edca77ae4cd2e1c23e624b6ef86354e4","modified":1692149353000},{"_id":"themes/flexblock/source/css/_util/theme.styl","hash":"1d7c69498b68e85f2a048acfa6924df5070ddc48","modified":1692149353000},{"_id":"themes/flexblock/source/icons-512.png","hash":"c2cd59a7712738831ee0cca4338343d407777a4b","modified":1692149353000},{"_id":"themes/flexblock/screenshots/flex-block--post.jpeg","hash":"bc607db875e42fe2c82ed5130c07d67cca5adc41","modified":1692149353000},{"_id":"themes/flexblock/screenshots/flex-block--home.jpeg","hash":"7f6c738298108020ab2e4918592007a2d4bcb9d8","modified":1692149353000},{"_id":"themes/flexblock/screenshots/flex-block.png","hash":"93a5456d4f3a51f5e9fd4a957b85584273083fe6","modified":1692149353000},{"_id":"public/icons-192.png","hash":"8cd106d9039f1d5aa8163ecd4a5e352058a0f6cf","modified":1700580922197},{"_id":"public/manifest.json","hash":"70ae21c5c320fbc0df5922a4baf3fa73d5343959","modified":1700580922197},{"_id":"public/js/script.js","hash":"8f0900b1b6bbd1fdc463fbc77f3deb5e598c9871","modified":1700580922197},{"_id":"public/icons-512.png","hash":"c2cd59a7712738831ee0cca4338343d407777a4b","modified":1700580922197},{"_id":"themes/kira/demo/themes/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1700579641655},{"_id":"themes/kira/.gitignore","hash":"6b899430e533e61f48291964f3aae6a2892a5cc9","modified":1700579641642},{"_id":"themes/kira/.npmignore","hash":"456a603f2bfe37e077310981650caf6776d3dc4b","modified":1700579641642},{"_id":"themes/kira/LICENSE","hash":"16401737d2489b2399c6bcb2274e8835bc21c2ec","modified":1700579641643},{"_id":"themes/kira/package.json","hash":"f498f1682bce11f73e7c656f0ac4e0463e0febfe","modified":1700579641661},{"_id":"themes/kira/readme.md","hash":"d0c3dc55dbbe84b0f64e7cc288b3bb29dbfd3307","modified":1700579641670},{"_id":"themes/kira/languages/default.yml","hash":"975a90fd111336055181085e3c27e6f67d41f68b","modified":1700579641656},{"_id":"themes/kira/.vscode/settings.json","hash":"a51ee4174ac8bbc35fd8fdb7ce6aff49b7e88285","modified":1700579641643},{"_id":"themes/kira/languages/ja.yml","hash":"2f848f022dd6eb70893dbf0d1f68440d487b285e","modified":1700579641657},{"_id":"themes/kira/languages/it.yml","hash":"708e1a520eebd468b9895fe5f80c79c1cdca0fc8","modified":1700579641657},{"_id":"themes/kira/languages/zh-HK.yml","hash":"52c501d778ed22d242c0cd405db38c985dbccfce","modified":1700579641657},{"_id":"themes/kira/languages/zh-CN.yml","hash":"975a90fd111336055181085e3c27e6f67d41f68b","modified":1700579641657},{"_id":"themes/kira/languages/zh-TW.yml","hash":"52c501d778ed22d242c0cd405db38c985dbccfce","modified":1700579641657},{"_id":"themes/kira/languages/en.yml","hash":"d3e7f13edbe8c6fcf1c18f679c8fa9f919941d5b","modified":1700579641656},{"_id":"themes/kira/demo/.gitignore","hash":"79501b8f92076a730ef901af47485e763183b2fe","modified":1700579641644},{"_id":"themes/kira/demo/_config.yml","hash":"eb0b69bbd863b7f34d5575da6bf7ea402d279dae","modified":1700579641645},{"_id":"themes/kira/demo/package.json","hash":"a52c3aea4426af496776142a23f328c58c624397","modified":1700579641645},{"_id":"themes/kira/demo/_config.kira.yml","hash":"42dc7507b5ebb22cf3ce4cbbb52ee8b651d0f896","modified":1700579641645},{"_id":"themes/kira/layout/archives.ejs","hash":"bc09ed31aea541e207edfa0dc1482f74ed6d8361","modified":1700579641659},{"_id":"themes/kira/layout/friends.ejs","hash":"0702afdbfa01a4266a29f3e018928a3a4aedd16a","modified":1700579641660},{"_id":"themes/kira/layout/index.ejs","hash":"d7dd4eba4d8b4306f78e59b7f7b7142e5e9755f2","modified":1700579641661},{"_id":"themes/kira/layout/post.ejs","hash":"0e3c45139d96781bbc4532a3173286697a82decd","modified":1700579641661},{"_id":"themes/kira/layout/layout.ejs","hash":"bda28d488d06d6830ee1b8b71f5ba629d939b335","modified":1700579641661},{"_id":"themes/kira/demo/.github/dependabot.yml","hash":"055a7e8776cb1e01c2c489fee80f3e51472a683c","modified":1700579641644},{"_id":"themes/kira/demo/scaffolds/page.md","hash":"892cedeb7b62a73e72a3b369daf2bc63dfee47dc","modified":1700579641645},{"_id":"themes/kira/demo/scaffolds/post.md","hash":"c569840f0ea232daf0865c3bc8f7ef63b235be62","modified":1700579641646},{"_id":"themes/kira/demo/source/about.md","hash":"4224bc6722ec813b066861d7c4694f87122dbed5","modified":1700579641654},{"_id":"themes/kira/demo/scaffolds/draft.md","hash":"b14e9fa1e21c75482dd3f05d27705719a2cb47f1","modified":1700579641645},{"_id":"themes/kira/demo/source/archive.md","hash":"00d3773d9b4a900f930fab0daa16a60e505470b1","modified":1700579641655},{"_id":"themes/kira/demo/source/friends.md","hash":"712580aa8f744b7b04d42e18f1745295dfd9f140","modified":1700579641655},{"_id":"themes/kira/layout/_widget/archive.ejs","hash":"1b7927c453a4ba3bc91f57585d1c9a028f3a2634","modified":1700579641658},{"_id":"themes/kira/layout/_widget/category.ejs","hash":"249ecb1c70bcbb5dd792deb7ca597ece06497cac","modified":1700579641658},{"_id":"themes/kira/layout/_widget/social.ejs","hash":"78ee34ba7813bc3cb9ac0155a251a7db5fc20668","modified":1700579641658},{"_id":"themes/kira/layout/components/copyright.ejs","hash":"7a6bf6be3cd1605c7974a33baf8b54a90a50b141","modified":1700579641659},{"_id":"themes/kira/layout/_widget/tagcloud.ejs","hash":"ae70b1e05f4b9e0bdc4bc4946aab9a2f04b62441","modified":1700579641659},{"_id":"themes/kira/layout/components/kira-image.ejs","hash":"3222ae7c8d79afc3cd5ed0f1e8ef1b51b3fdda36","modified":1700579641660},{"_id":"themes/kira/layout/components/header.ejs","hash":"c1e28f64f4ea8cbccb77bcb7ebd78a7bbecf2f94","modified":1700579641660},{"_id":"themes/kira/layout/components/right-column.ejs","hash":"6db93a9722a5288f96ab16dd54783e187909657f","modified":1700579641660},{"_id":"themes/kira/layout/components/friends.ejs","hash":"1833dafebc1997996b8c77d55683b1d97de2a71b","modified":1700579641660},{"_id":"themes/kira/layout/components/sidebar.ejs","hash":"f3a34ba45e03f231a0acc2ca81214cbb61c80d7e","modified":1700579641660},{"_id":"themes/kira/source/css/archive.styl","hash":"014aeb1e8edee23ab191accde28b903094e0250a","modified":1700579641672},{"_id":"themes/kira/source/css/article.styl","hash":"5d71b0348e8777d44fcac4dd1b42691bb60ca0a0","modified":1700579641672},{"_id":"themes/kira/source/css/color.styl","hash":"de24fe89ea6609bedb10d6883813900613bc666c","modified":1700579641672},{"_id":"themes/kira/source/css/constants.styl","hash":"9882f6fdf8b0a840b461fe68b5a5781ac5f9a135","modified":1700579641672},{"_id":"themes/kira/source/css/content.styl","hash":"f855d66a230c058d879afabe9440d6983228f75c","modified":1700579641673},{"_id":"themes/kira/source/css/kira-friends.styl","hash":"174acae9379c2521e9658ee7a9cca78121efdb56","modified":1700579641673},{"_id":"themes/kira/source/css/kira-code-copy.styl","hash":"0ec2c5bee6b740d1c470b1552b0489ce2752a43b","modified":1700579641673},{"_id":"themes/kira/source/css/kira-image.styl","hash":"6012db7df3e0491f2469025b8e39e3542a389e00","modified":1700579641673},{"_id":"themes/kira/source/css/layout.styl","hash":"4638f0d7f257287e680ac67abd3241331a7f57c5","modified":1700579641674},{"_id":"themes/kira/source/css/media.styl","hash":"24e882ac68cc8ae1bbcdd156192101c68859bdc7","modified":1700579641674},{"_id":"themes/kira/source/css/right-column.styl","hash":"50fe1943a6b5cebfe15ce0ef645d8959d20d625d","modified":1700579641674},{"_id":"themes/kira/source/css/post.styl","hash":"30165070270d51377ab8a5b2bd6ee03d81c2ab26","modified":1700579641674},{"_id":"themes/kira/source/css/sidebar.styl","hash":"172f73ad5a78d7976a3b0e8f69672270520002ff","modified":1700579641674},{"_id":"themes/kira/source/js/kira-code-copy.js","hash":"da6ecf70c0084bd0136171c5790131140c732cc7","modified":1700579641677},{"_id":"themes/kira/source/js/kira-image.js","hash":"84aa358b87ca68af35b331fc1c807f68f8c22dd4","modified":1700579641677},{"_id":"themes/kira/scripts/tag/biliplayer.js","hash":"573c7bd45e38c96c5cad922e23d19e1abd70fb7b","modified":1700579641671},{"_id":"themes/kira/scripts/tag/codepen.js","hash":"8b871ebc448984b97559f07313845c384080ed0f","modified":1700579641671},{"_id":"themes/kira/scripts/tag/kira-player.js","hash":"cfbae6ff10abc986ea05044c536b6870f3c2a0f5","modified":1700579641671},{"_id":"themes/kira/scripts/tag/meting.js","hash":"9d9474ea97a789b3c1d7b1153c30475eca0967d9","modified":1700579641671},{"_id":"themes/kira/scripts/utils/image_auto_lazyload.js","hash":"fef224ee29365821af9a0d4fe18f99665a65eb80","modified":1700579641672},{"_id":"themes/kira/demo/source/_posts/TypeScript-IOC-设计模式初探.md","hash":"1cc8d8ce931f7242d65a7caec26f0c4486982f6f","modified":1700579641651},{"_id":"themes/kira/demo/source/_posts/Unity使用Newtonsoft报错的解决方案.md","hash":"8c842c0ff75a1c6200057f8b6d7be520e2c92713","modified":1700579641652},{"_id":"themes/kira/demo/source/_posts/【Fira-Code】一款为程序员量身打造的字体.md","hash":"cdb9cc1c5a94e1c80d928902750d5d87ca061ce1","modified":1700579641652},{"_id":"themes/kira/demo/source/_posts/【VSCODE插件推荐】TODO-Highlight.md","hash":"01b83d6e572c75ebfd9c25d7b704a37698b03a6f","modified":1700579641652},{"_id":"themes/kira/demo/source/_posts/字节跳动西瓜视频一面面经.md","hash":"3ebf2679209ec3cccf59e49290ff1a44936c17bd","modified":1700579641654},{"_id":"themes/kira/demo/source/_posts/蚂蚁集团-数字金融线-体验技术部前端一面面经.md","hash":"a476c57e374920f9e06fbf3dd5e836cb7ef4977b","modified":1700579641654},{"_id":"themes/kira/demo/source/_posts/使用Vue和Electron开发一款简单的Markdown编辑器.md","hash":"afddbaf60a11b77fe3f0f38f8d8b8b381a77950d","modified":1700579641654},{"_id":"themes/kira/layout/components/comments/giscus.ejs","hash":"2df2a6b98e5060d0c2dd2ef9bb2f6a690a747e16","modified":1700579641659},{"_id":"themes/kira/layout/components/comments/gitalk.ejs","hash":"6ea24c937c1b38598323cae3f42c2a5e12d8fff0","modified":1700579641659},{"_id":"themes/kira/source/deps/css/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1700579641676},{"_id":"themes/kira/source/deps/js/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1700579641676},{"_id":"themes/kira/source/lib/iconfont/demo.css","hash":"53456972a11d52af67187fc17999e6665f9f06fe","modified":1700579641677},{"_id":"themes/kira/source/deps/js/Meting.min.js","hash":"c9a7d747dfa8fe4d3fc7ddb096b0506f55ff1fd4","modified":1700579641677},{"_id":"themes/kira/source/lib/iconfont/iconfont.css","hash":"84918de2a2e36d051ee51c3ea17f5d6e601714da","modified":1700579641678},{"_id":"themes/kira/source/lib/iconfont/demo_index.html","hash":"65b9325f267371c9e5a07a7a3a224c5766d07c18","modified":1700579641678},{"_id":"themes/kira/source/lib/iconfont/iconfont.js","hash":"72c1211ab8026e3f7419f05bf8860fac6e96fe65","modified":1700579641678},{"_id":"themes/kira/source/lib/iconfont/iconfont.ttf","hash":"a066712350eb107bdfeb78130ec4ce58d3a29655","modified":1700579641679},{"_id":"themes/kira/source/lib/iconfont/iconfont.woff","hash":"7938931f0d753453933c6c75ff1ff1d02b51c983","modified":1700579641679},{"_id":"themes/kira/source/lib/iconfont/iconfont.json","hash":"fccceb7956fd4f43c5ce1a18a100513ba353753c","modified":1700579641678},{"_id":"themes/kira/source/lib/iconfont/iconfont.woff2","hash":"47b0a99b271ef70b3663dab0d611e471db59a49b","modified":1700579641679},{"_id":"themes/kira/demo/source/_posts/JavaScript/js原型链.md","hash":"7e85994df44c25d4816e7dbd7f9ec1738fed18bc","modified":1700579641646},{"_id":"themes/kira/demo/source/_posts/JavaScript/js的对象.md","hash":"f2ce9bb9562cf05e7840e77398f23c228a7064b8","modified":1700579641646},{"_id":"themes/kira/demo/source/_posts/JavaScript/了解js的原型.md","hash":"e2964f763980f7b479b7e1fb416750ae31ea6e54","modified":1700579641646},{"_id":"themes/kira/demo/source/_posts/JavaScript/浅谈JS中的闭包.md","hash":"8f5e64a9b931f2b482b45cb0a9bf37f0b4be86e6","modified":1700579641648},{"_id":"themes/kira/demo/source/_posts/JavaScript/理解JS中的防抖与节流.md","hash":"ecd8f382ead1af08398e6e3402babec7d4c2e72f","modified":1700579641648},{"_id":"themes/kira/demo/source/_posts/JavaScript/正确区分var、let和const.md","hash":"66ad8b61fb789f8a087d5298b19630eb81814529","modified":1700579641646},{"_id":"themes/kira/demo/source/_posts/Node.js/【Node.js学习】初识Node.js.md","hash":"df3fbab3763487cc385c9e50b0d4a0c8e10f40a4","modified":1700579641648},{"_id":"themes/kira/demo/source/_posts/Node.js/【Node.js学习】简单认识express.md","hash":"fbb54648f1492f192f67d2a730b008c29c0cbe93","modified":1700579641648},{"_id":"themes/kira/demo/source/_posts/Node.js/【Node.js学习】简单认识http模块.md","hash":"5e132b16e89d5e9295c90d6464590e894901bb5b","modified":1700579641649},{"_id":"themes/kira/demo/source/_posts/Node.js/【Node.js学习】简单认识fs文件系统模块.md","hash":"858d9296b881e997e6e40c82582ab41b73e48690","modified":1700579641649},{"_id":"themes/kira/demo/source/_posts/Revue/Eutopia.md","hash":"4bd81f213339f291bb63594e2aca91b76e506109","modified":1700579641650},{"_id":"themes/kira/demo/source/_posts/Revue/Fly-Me-To-The-Star.md","hash":"36b742e14514012f454708dd3dd7f1d07ec11e64","modified":1700579641650},{"_id":"themes/kira/demo/source/_posts/Revue/花咲か唄.md","hash":"7baf5545d8de1d948c703f0058aaa52376f3531d","modified":1700579641651},{"_id":"themes/kira/demo/source/_posts/Revue/Star-Divine-フィナーレ.md","hash":"75a9a523af021157feb7275a47dd4ca88f6fb611","modified":1700579641651},{"_id":"themes/kira/demo/source/_posts/Revue/誇りと驕り.md","hash":"debe73409f5b37af25c8ccfa0aa8ec5702edde7b","modified":1700579641651},{"_id":"themes/kira/demo/source/_posts/Rust/初识Rust.md","hash":"8fb7824797cf656df86da16e3de81a70e3960d81","modified":1700579641651},{"_id":"themes/kira/demo/source/_posts/Rust/Rust与所有权.md","hash":"645ab8b1d63883a0a0f6394107d8933a77bcbbe8","modified":1700579641651},{"_id":"themes/kira/demo/source/_posts/React/React入门.md","hash":"62e730cf6faf837f817f5f9e8f2e73807a1900c0","modified":1700579641649},{"_id":"themes/kira/demo/source/_posts/React/React条件渲染.md","hash":"af0cd35dd9d489c135f8a7a99156ec7c6d74b769","modified":1700579641649},{"_id":"themes/kira/demo/source/_posts/React/React的事件处理.md","hash":"6ffd4d660c48cffbffc7d07748df611c0f34c062","modified":1700579641650},{"_id":"themes/kira/demo/source/_posts/React/React的组件.md","hash":"d1e97521fa0e25a47d73893fb168924e72c47342","modified":1700579641650},{"_id":"themes/kira/demo/source/_posts/React/关于React18中ReactDOM.render报错的解决方法.md","hash":"c4195ede25ffa4847239b79193357587e925182d","modified":1700579641650},{"_id":"themes/kira/yarn.lock","hash":"472c855a41c0afdab9a3a4f9021044d5f474db9a","modified":1700579641680},{"_id":"themes/kira/preview.png","hash":"4ca5c910079f1360d00083386e30bab63413c66c","modified":1700579641670},{"_id":"public/lib/iconfont/iconfont.ttf","hash":"a066712350eb107bdfeb78130ec4ce58d3a29655","modified":1700581162675},{"_id":"public/lib/iconfont/iconfont.woff","hash":"7938931f0d753453933c6c75ff1ff1d02b51c983","modified":1700581162675},{"_id":"public/lib/iconfont/iconfont.woff2","hash":"47b0a99b271ef70b3663dab0d611e471db59a49b","modified":1700581162675},{"_id":"public/css/article.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1700581162675},{"_id":"public/css/archive.css","hash":"f2e607d91144f695c7c37aba2ff3412ee650e2f6","modified":1700581162675},{"_id":"public/css/content.css","hash":"2b9f949c73dcf423afa7a4cf263b7dab13f8db06","modified":1700581162675},{"_id":"public/css/kira-code-copy.css","hash":"e2e06b934d904d17afd80023cd219736d95d45dd","modified":1700581162675},{"_id":"public/css/kira-friends.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1700581162675},{"_id":"public/css/constants.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1700581162675},{"_id":"public/css/kira-image.css","hash":"e7f148597ad415ee431676cf694118f197e2bccc","modified":1700581162675},{"_id":"public/css/media.css","hash":"2add1ea023389a10ab5899749097adf68ddc27a5","modified":1700581162675},{"_id":"public/css/layout.css","hash":"b683784cc2191263d0a78c96afea03cd988d3327","modified":1700581396216},{"_id":"public/css/right-column.css","hash":"39be39f09742d498d4ecb159344907e882fec259","modified":1700581162675},{"_id":"public/css/post.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1700581162675},{"_id":"public/css/sidebar.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1700581162675},{"_id":"public/js/kira-code-copy.js","hash":"127719393b154a29bf0c05119c4a5527b68a4467","modified":1700581162675},{"_id":"public/css/color.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1700581162675},{"_id":"public/deps/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1700581162675},{"_id":"public/js/kira-image.js","hash":"833d671ac4f4bc9020914250f4708e27f7bd4fbe","modified":1700581162675},{"_id":"public/lib/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1700581162675},{"_id":"public/deps/js/Meting.min.js","hash":"1b76611da71b63f7c0c1f04601a8ec02b0650667","modified":1700581162675},{"_id":"public/deps/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1700581162675},{"_id":"public/lib/iconfont/iconfont.css","hash":"cee8b34fa5a48b6cac84115af7e4f9f454aa9bba","modified":1700581162675},{"_id":"public/lib/iconfont/demo_index.html","hash":"b7b1a61ac0c224ee9f74a1b3e2caf2a0dfc0b486","modified":1700581162675},{"_id":"public/lib/iconfont/iconfont.js","hash":"72c1211ab8026e3f7419f05bf8860fac6e96fe65","modified":1700581162675},{"_id":"public/lib/iconfont/iconfont.json","hash":"22fc847df082b51e1fb4f5a0cd234f2949bc6cbc","modified":1700581162675},{"_id":"themes/obsidian/source/aplayer/docs/.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1692249997000},{"_id":"themes/obsidian/.gitignore","hash":"0163bc6198f408db68e8223186b1ee6cfc58dbfd","modified":1692249997000},{"_id":"themes/obsidian/_config_template_cn.yml","hash":"5f7d88c31d9c1179b4bfe76dcc9a47841e1110c6","modified":1700579439022},{"_id":"themes/obsidian/LICENSE","hash":"5433bef2c6c055447443802b3538cf37adabd705","modified":1692249997000},{"_id":"themes/obsidian/README.md","hash":"502f4038bee54db5cb2117257da8605675578a58","modified":1692249997000},{"_id":"themes/obsidian/.prettierignore","hash":"36612689c3688127ca3a5fdfba0d22dfc306b386","modified":1692249997000},{"_id":"themes/obsidian/CHANGELOG_CN.md","hash":"4bc3569e2ceb8fae513e797876d1298bf3eda030","modified":1692249997000},{"_id":"themes/obsidian/CHANGELOG.md","hash":"c61c2d69c28d9a34f5aa5e2ddd700520a8f80c14","modified":1692249997000},{"_id":"themes/obsidian/package.json","hash":"58dff57dc13b339fe6d749f97dbfb4828375f3a8","modified":1692249997000},{"_id":"themes/obsidian/layout/category.ejs","hash":"e0c36bded984989c864227801dcd289207241f76","modified":1692249997000},{"_id":"themes/obsidian/_config_template_en.yml","hash":"5aa4e63d27dc69f9a6d2d7d304adb419287f2c8c","modified":1692249997000},{"_id":"themes/obsidian/package-lock.json","hash":"cf1d3cdf81a32bab600fa3b5f5259aa3ef66dbd0","modified":1700543097157},{"_id":"themes/obsidian/layout/post.ejs","hash":"e585d8b4680c52dccfc40ffa6b2c5df515bf20d2","modified":1692249997000},{"_id":"themes/obsidian/layout/index.ejs","hash":"7873010b22819f17b08c67edb60fa01fba94589c","modified":1692249997000},{"_id":"themes/obsidian/README_CN.md","hash":"4f35e6295422ffb2c05c7ade41ea4bc1fbb8fcee","modified":1692249997000},{"_id":"themes/obsidian/.github/FUNDING.yml","hash":"3f874b8655bc5cf04d97e6be412840c9a3faa08e","modified":1692249997000},{"_id":"themes/obsidian/layout/layout.ejs","hash":"38506238848041990347d9d1a6767494ee0d9ffc","modified":1692249997000},{"_id":"themes/obsidian/layout/page.ejs","hash":"db7051aba9f46e48808236a3887d440d2369d74e","modified":1692249997000},{"_id":"themes/obsidian/layout/tag.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1692249997000},{"_id":"themes/obsidian/layout/archive.ejs","hash":"17eb8f480c30e1de60e5f696942c697e20dc6d3a","modified":1692249997000},{"_id":"themes/obsidian/languages/fr.yml","hash":"a3bc76db5b6a644d3f777220fe7af395441b1c11","modified":1692249997000},{"_id":"themes/obsidian/languages/default.yml","hash":"64f341736b8cfa05a0cc6cce51b0722dbf0ad32b","modified":1692249997000},{"_id":"themes/obsidian/languages/nl.yml","hash":"3344fbf73157deaccd8b87b500efe21d9a94cbc7","modified":1692249997000},{"_id":"themes/obsidian/languages/it.yml","hash":"edd4a16f80f2ae83ef8e537cecf2fc0d7fab89c8","modified":1692249997000},{"_id":"themes/obsidian/languages/no.yml","hash":"d972e7bef0630528747e66ac3a79d4a1dc0bf543","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/google-analytics.ejs","hash":"4806289a1c3de19a1cc4e6242c82cdd429c3bfe8","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/categories.ejs","hash":"db45b83951cd4dca8b9f1fac289e0f38e13c3dc1","modified":1692249997000},{"_id":"themes/obsidian/languages/zh-TW.yml","hash":"31090af93079a84129f6b65303b75f9d3d8f46e1","modified":1692249997000},{"_id":"themes/obsidian/languages/zh-CN.yml","hash":"07eacfc9c19f9d9aa20e793b6a7a0e56497037f8","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/list.ejs","hash":"8e03499580aa81ec0b4c8316347b4e3839849007","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/menu.ejs","hash":"34c14e4d39fda3f4b0f6ec7e393529ebb33c1139","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/head.ejs","hash":"dcc9c939cd5c9ab176a5a27b66e2a8c683e6e3e6","modified":1692249997000},{"_id":"themes/obsidian/languages/ru.yml","hash":"a2f6020c6a4f687a1d6a9b582a134f72a0381c62","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/mathjax.ejs","hash":"3aae1c6eb8795525090f83b4e2ab00a1c04db13d","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/tags.ejs","hash":"fc037d52e956ed280d2d69f9683461ef86b5b453","modified":1692249997000},{"_id":"themes/obsidian/scripts/helpers/hexo-symbols-count-time.js","hash":"dc213a7d2533f4624bd6c41217657c9ab4e9ce85","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/screen.ejs","hash":"75d5c4dc1621d1c053bcb5da060e00ae3ecbaedb","modified":1692249997000},{"_id":"themes/obsidian/scripts/helpers/page_title.js","hash":"35dbc39e4edd53b20f5433dc0d1708024049186d","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/photoswipe.ejs","hash":"9cd0571569a37aef1c6c4a5bf074dc1dc7b0558b","modified":1692249997000},{"_id":"themes/obsidian/scripts/helpers/hexo-html-truncate.js","hash":"72733931cbe4841f3da9a680e7549718f13bd0b7","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/scripts.ejs","hash":"eef3077d691c67c81138a07b5575dec8889134a8","modified":1692249997000},{"_id":"themes/obsidian/source/css/codemirror.styl","hash":"b2e335244baf9703d2281eb41bbbf37ddf820713","modified":1692249997000},{"_id":"themes/obsidian/source/css/theme.styl","hash":"7a3cda7d326995d7e16dc17c2201241525b89ba1","modified":1692249997000},{"_id":"themes/obsidian/source/css/ball-atom.min.css","hash":"c226472e3b8f09c1a30c55a4e1575fc2b22bd4a5","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/LICENSE","hash":"ae26f1f8ac172c3e6daf6a62e7e407e9b5221fac","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/README.md","hash":"1f9abec9efec10b6112feb5c1408e2bf499aa051","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/package.json","hash":"420fbfe9616677997279ab5e44999f7803acefed","modified":1692249997000},{"_id":"themes/obsidian/source/font/Rubik-Regular-kern-latin.woff2","hash":"f6220f2824efbdb57afe2165886aa7e8ca9345b3","modified":1692249997000},{"_id":"themes/obsidian/source/font/Rubik-Bold-kern-latin.woff2","hash":"5ffc50abee67c11cfe7c174e6407119dda79bffe","modified":1692249997000},{"_id":"themes/obsidian/source/img/favicon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1692249997000},{"_id":"themes/obsidian/source/img/logo.png","hash":"956a5c90eba01360e5576178122cf29e3df1b3e4","modified":1692249997000},{"_id":"themes/obsidian/source/img/logo_icon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1692249997000},{"_id":"themes/obsidian/source/js/Meting.min.js","hash":"be49f061c76145ba818a7e20b4b4515131bba32b","modified":1692249997000},{"_id":"themes/obsidian/source/js/loadaplayer.js","hash":"ec86aeb41463c3ee8602d08b21df1c7ec97ddfa1","modified":1692249997000},{"_id":"themes/obsidian/source/js/busuanzi.js","hash":"8148df0753f8fdcddb306dc36003a6a636b44691","modified":1692249997000},{"_id":"themes/obsidian/source/js/busuanzi.min.js","hash":"c31e1244ea9c6da70f306b76ea0c001486e4ea78","modified":1692249997000},{"_id":"themes/obsidian/source/js/jquery.truncate.js","hash":"9bfb5e6e567458aff86e0cc4bc8c53917387ce13","modified":1692249997000},{"_id":"themes/obsidian/source/js/jquery.truncate.min.js","hash":"a71f558be59d47c2e896bea46e605eb93aa26786","modified":1692249997000},{"_id":"themes/obsidian/source/js/obsidian.min.js","hash":"609c0f9fe552687d3d4bca1f58da8bc603911410","modified":1692249997000},{"_id":"themes/obsidian/source/js/obsidian.js","hash":"b3595121977c127598f9108316eeaae491521a18","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/gitalk.ejs","hash":"d46d85ccccc3f431fd6f80495fe03fc906871a0e","modified":1692249997000},{"_id":"themes/obsidian/source/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/tag.ejs","hash":"c2b4ce7e1d7eed59f4c333915cd431f008f898e3","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/article.ejs","hash":"ddb124cc561f2150c67ec1090f5f064bc3c72832","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/title.ejs","hash":"33f2a96f17fb1efa354c92aef906d96984abd9ab","modified":1692249997000},{"_id":"themes/obsidian/source/js/search.js","hash":"7dd6ada071decde02737645143d217906fe3fe80","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/header.ejs","hash":"95af4961efdc1421fc62b60075672cc49bc49a2c","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/item.ejs","hash":"54e0cd26f2505f547190e499cfc40467abfaadb4","modified":1692249997000},{"_id":"themes/obsidian/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/demo/demo.js","hash":"b8f47c0c112b54e068cfabbac07a6c65f4aa4907","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.css","hash":"e0702acfbbe02aa08af77ff55102ef4c80dde105","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/demo/index.html","hash":"0c4317d84bbf6a22aeda24657d806cd222225a2b","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/webpack/dev.config.js","hash":"38486bc2e2a2e072b29f95eb049e4191b312c09e","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/webpack/prod.config.js","hash":"e8a8f69b91c0deb4ae6f88f40d1e495f9212236e","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/config.js","hash":"781bf27b5073314aac6992e2bacf75783cd36f01","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/parse.js","hash":"dc8dc6f82fd1c8f33eda9442025235a3632bfa36","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/README.md","hash":"ece89351b4bd0aed112291157d31e8e2e893dcb7","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/index.html","hash":"94506337e896d818c0f0a4589a03d150287284c1","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/landing.html","hash":"c3a5f4259529e7a42edbe3da17a4571c70b0d1a6","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/utils.js","hash":"425759c783010cd1d72771f2b8d471047a1e1285","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/cheerio.js","hash":"df60e3da86341b0474f15d9aa8547d71617cb5a9","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/static.js","hash":"36ad488d734e0d9930d0a478deacebe6d5b8c775","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/ecosystem.md","hash":"60f428190159f6958ce66b74e2f48a307d44142f","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/bar.js","hash":"f530658a6b2f221e624546b763b1056de7adf2e5","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/support.md","hash":"cb3fb8224a7e4f2be8917fd03a0e44ee8c8706ef","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/index.js","hash":"4b445a3e4b0183fbdbec92e1ad989b9ce05ce502","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/events.js","hash":"58cc17514767d6a79f14eff6c6eb75549cff54bc","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/controller.js","hash":"a1fa5f1be74a9080abf8c266de52479e1f4fe662","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/icons.js","hash":"b34136ffdbfe9861081eb8aaeda6331679340f0d","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/options.js","hash":"4b343773b511d73520a32082b66422278a1ab136","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/storage.js","hash":"1a70813959ac37e55337958466185e0177d5dcba","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/lrc.js","hash":"f843a16621bc204d16ae97e579fa10be89b2d76a","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/list.js","hash":"af64cfa133ffa2eb67425094a3e5a5ae4b2320ef","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/timer.js","hash":"4681c42cf8014b35141dbe827dd0578862a1c56a","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/player.js","hash":"3c3e4e2806a376d65dc576eab66e020c188717af","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/loading.svg","hash":"a032e15f65605ebea9d61de5a741f836b3ff5c21","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/template.js","hash":"10b534c119eca0a69628d57be0f7ff320700b48b","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/loop-all.svg","hash":"d15f558bca9675cee9eacdbc2d1125907f6cf22f","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/loop-none.svg","hash":"daf74504add716b8b32ed06df236c8ab35c15faf","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/lrc.svg","hash":"1f0eebc00c99da25332a4bdcb3fd7b770c59a709","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/order-list.svg","hash":"d9762f52daa5da7489279bca269f86ef82100e59","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/loop-one.svg","hash":"221b3e24dae19a5dc023d9ab00253fb754b5b389","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/menu.svg","hash":"5b37ffd6adba91c42daf63a8232f2b180dcc9e49","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/js/utils.js","hash":"9d4829298ffbca25657d1a1ff2eb140f91e7fa6e","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/play.svg","hash":"f36398bb91f986da148f7157316f4ceaa2b42beb","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/order-random.svg","hash":"e8328fc87b99c6bc6ed2c89cfa260dc6b1628af0","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/pause.svg","hash":"4fc55cadd15cc6cc053b0b327f1ba72692e234d7","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/skip.svg","hash":"5635ae52738c79b3a65e3184784bd78bc5af7b26","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/right.svg","hash":"d9e8211c2f4783bd69d3871330db4facb4a6780f","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/volume-off.svg","hash":"5c8b6b0acf02070216ccaa5bdf27f05758e1033d","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/volume-down.svg","hash":"0fe1d0f49f3ecb87584fb9ce28c55c715d3b2dfe","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/template/lrc.art","hash":"f9bd888397d0f972f8c764797fb9354cebeafafc","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/template/list-item.art","hash":"e61626368b30154183f8853c69405ab269e46d0b","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/api/attributes.js","hash":"404a942475f8bf31dd4704d17490b25bfcdffb07","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/assets/volume-up.svg","hash":"2d6979f5cb874ab5d14e3c0bea4e0dc40799d83a","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/api/css.js","hash":"de88fe4f6977eab77bf080d9a688cc3f2b0d516c","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/api/traversing.js","hash":"5a83ea3c18f2e73eb1b4f4e4425de932e20d38bb","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/api/manipulation.js","hash":"93b36f7e67557d2a2f5ba65eee21a65f93c37b1f","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/template/player.art","hash":"64edf17aa5b21193d051a6170c6c935ca94526ad","modified":1692249997000},{"_id":"themes/obsidian/scripts/libs/cheerio/api/forms.js","hash":"e9d8465f092ce6c2d2e48575bfa1de7e1cbaf3bd","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/src/css/index.scss","hash":"cc4c34c197667439e7ca924cc0c45d44d505adf4","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/zh-Hans/README.md","hash":"efb64217c6a09a382284e8c5fd73ebf7f2b2eac7","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/zh-Hans/support.md","hash":"267028806007e6ee067765d84fa2ff1c7b263a36","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/docs/zh-Hans/ecosystem.md","hash":"93c0561a6ea190a783299843ac78fa584761847e","modified":1692249997000},{"_id":"themes/obsidian/source/css/obsidian.styl","hash":"519777788a0b7e1872a1cc05e634d8ce135a1d92","modified":1692249997000},{"_id":"themes/obsidian/source/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.js","hash":"484f100a6548d181a27fe32cfcdc9a1a548c10bc","modified":1692249997000},{"_id":"themes/obsidian/source/img/cover.jpg","hash":"b977716eb4569f06ae41747c92121d44dd0ef2ec","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1692249997000},{"_id":"themes/obsidian/source/aplayer/yarn.lock","hash":"8dbed195fe8209e26307a9bde9cd99b5e38d0395","modified":1692249997000},{"_id":"themes/obsidian/source/img/welcome-cover.jpg","hash":"4f64859e7d800f527944aab1615ecc4e24467f50","modified":1692249997000},{"_id":"themes/obsidian/source/img/profile.jpg","hash":"f039e298bfe68f8edeaa2f3bf90a118852588e4e","modified":1692249997000},{"_id":"themes/obsidian/source/statics/chengdu.mp3","hash":"ffff18953f07760d1e30a74e22eee49f1f7f793f","modified":1692249997000},{"_id":"public/aplayer/LICENSE","hash":"ae26f1f8ac172c3e6daf6a62e7e407e9b5221fac","modified":1700581352077},{"_id":"public/font/Rubik-Regular-kern-latin.woff2","hash":"f6220f2824efbdb57afe2165886aa7e8ca9345b3","modified":1700581352077},{"_id":"public/font/Rubik-Bold-kern-latin.woff2","hash":"5ffc50abee67c11cfe7c174e6407119dda79bffe","modified":1700581352077},{"_id":"public/img/logo_icon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1700581352077},{"_id":"public/aplayer/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1700581352077},{"_id":"public/aplayer/src/assets/loading.svg","hash":"a032e15f65605ebea9d61de5a741f836b3ff5c21","modified":1700581352077},{"_id":"public/aplayer/src/assets/loop-all.svg","hash":"d15f558bca9675cee9eacdbc2d1125907f6cf22f","modified":1700581352077},{"_id":"public/aplayer/src/assets/loop-none.svg","hash":"daf74504add716b8b32ed06df236c8ab35c15faf","modified":1700581352077},{"_id":"public/aplayer/src/assets/lrc.svg","hash":"1f0eebc00c99da25332a4bdcb3fd7b770c59a709","modified":1700581352077},{"_id":"public/aplayer/src/assets/loop-one.svg","hash":"221b3e24dae19a5dc023d9ab00253fb754b5b389","modified":1700581352077},{"_id":"public/aplayer/src/assets/menu.svg","hash":"5b37ffd6adba91c42daf63a8232f2b180dcc9e49","modified":1700581352077},{"_id":"public/aplayer/src/assets/order-list.svg","hash":"d9762f52daa5da7489279bca269f86ef82100e59","modified":1700581352077},{"_id":"public/aplayer/src/assets/order-random.svg","hash":"e8328fc87b99c6bc6ed2c89cfa260dc6b1628af0","modified":1700581352077},{"_id":"public/aplayer/src/assets/pause.svg","hash":"4fc55cadd15cc6cc053b0b327f1ba72692e234d7","modified":1700581352077},{"_id":"public/aplayer/src/assets/play.svg","hash":"f36398bb91f986da148f7157316f4ceaa2b42beb","modified":1700581352077},{"_id":"public/aplayer/src/assets/right.svg","hash":"d9e8211c2f4783bd69d3871330db4facb4a6780f","modified":1700581352077},{"_id":"public/aplayer/src/assets/volume-up.svg","hash":"2d6979f5cb874ab5d14e3c0bea4e0dc40799d83a","modified":1700581352077},{"_id":"public/aplayer/src/assets/skip.svg","hash":"5635ae52738c79b3a65e3184784bd78bc5af7b26","modified":1700581352077},{"_id":"public/aplayer/src/assets/volume-down.svg","hash":"0fe1d0f49f3ecb87584fb9ce28c55c715d3b2dfe","modified":1700581352077},{"_id":"public/aplayer/src/assets/volume-off.svg","hash":"5c8b6b0acf02070216ccaa5bdf27f05758e1033d","modified":1700581352077},{"_id":"public/aplayer/src/template/list-item.art","hash":"e61626368b30154183f8853c69405ab269e46d0b","modified":1700581352077},{"_id":"public/aplayer/src/template/player.art","hash":"64edf17aa5b21193d051a6170c6c935ca94526ad","modified":1700581352077},{"_id":"public/aplayer/src/template/lrc.art","hash":"f9bd888397d0f972f8c764797fb9354cebeafafc","modified":1700581352077},{"_id":"public/aplayer/src/css/index.scss","hash":"cc4c34c197667439e7ca924cc0c45d44d505adf4","modified":1700581352077},{"_id":"public/css/codemirror.css","hash":"d45967fa2b7e701c3d0dd62cdce0385f5c8f6961","modified":1700581352077},{"_id":"public/css/ball-atom.min.css","hash":"c226472e3b8f09c1a30c55a4e1575fc2b22bd4a5","modified":1700581352077},{"_id":"public/css/theme.css","hash":"0e5c3bdd7b08931209c816eab93ab1b62554d609","modified":1700581352077},{"_id":"public/aplayer/README.html","hash":"4e62891fbbd329c967ec08763bb32f34465e4849","modified":1700581352077},{"_id":"public/aplayer/package.json","hash":"72085f63e6199b8dc0dfaa05610b63e397bd1f43","modified":1700581352077},{"_id":"public/js/Meting.min.js","hash":"be49f061c76145ba818a7e20b4b4515131bba32b","modified":1700581352077},{"_id":"public/js/busuanzi.js","hash":"8148df0753f8fdcddb306dc36003a6a636b44691","modified":1700581352077},{"_id":"public/js/busuanzi.min.js","hash":"c31e1244ea9c6da70f306b76ea0c001486e4ea78","modified":1700581352077},{"_id":"public/js/loadaplayer.js","hash":"ec86aeb41463c3ee8602d08b21df1c7ec97ddfa1","modified":1700581352077},{"_id":"public/js/jquery.truncate.js","hash":"9bfb5e6e567458aff86e0cc4bc8c53917387ce13","modified":1700581352077},{"_id":"public/js/jquery.truncate.min.js","hash":"a71f558be59d47c2e896bea46e605eb93aa26786","modified":1700581352077},{"_id":"public/js/obsidian.min.js","hash":"609c0f9fe552687d3d4bca1f58da8bc603911410","modified":1700581352077},{"_id":"public/css/obsidian.css","hash":"62822bfbc85e79250f4aef143e04dd5bc89b3ec9","modified":1700581352077},{"_id":"public/aplayer/demo/demo.js","hash":"b8f47c0c112b54e068cfabbac07a6c65f4aa4907","modified":1700581352077},{"_id":"public/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1700581352077},{"_id":"public/js/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1700581396216},{"_id":"public/js/obsidian.js","hash":"b3595121977c127598f9108316eeaae491521a18","modified":1700581352077},{"_id":"public/aplayer/demo/index.html","hash":"0c4317d84bbf6a22aeda24657d806cd222225a2b","modified":1700581352077},{"_id":"public/aplayer/webpack/dev.config.js","hash":"38486bc2e2a2e072b29f95eb049e4191b312c09e","modified":1700581352077},{"_id":"public/aplayer/dist/APlayer.min.css","hash":"e0702acfbbe02aa08af77ff55102ef4c80dde105","modified":1700581352077},{"_id":"public/aplayer/docs/config.js","hash":"781bf27b5073314aac6992e2bacf75783cd36f01","modified":1700581352077},{"_id":"public/aplayer/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1700581352077},{"_id":"public/aplayer/webpack/prod.config.js","hash":"e8a8f69b91c0deb4ae6f88f40d1e495f9212236e","modified":1700581352077},{"_id":"public/aplayer/docs/index.html","hash":"94506337e896d818c0f0a4589a03d150287284c1","modified":1700581352077},{"_id":"public/aplayer/docs/README.html","hash":"e0ba677af1e0852d73dcdb437d9d85960705a04c","modified":1700581352077},{"_id":"public/aplayer/docs/landing.html","hash":"c3a5f4259529e7a42edbe3da17a4571c70b0d1a6","modified":1700581352077},{"_id":"public/aplayer/docs/support.html","hash":"fb556985584b8158e4fb9635f0649b0bf9f50280","modified":1700581352077},{"_id":"public/aplayer/docs/ecosystem.html","hash":"32e445002b6d388162ca2cd9863a543d52871efd","modified":1700581352077},{"_id":"public/aplayer/src/js/bar.js","hash":"f530658a6b2f221e624546b763b1056de7adf2e5","modified":1700581352077},{"_id":"public/aplayer/dist/APlayer.js","hash":"484f100a6548d181a27fe32cfcdc9a1a548c10bc","modified":1700581352077},{"_id":"public/aplayer/src/js/index.js","hash":"4b445a3e4b0183fbdbec92e1ad989b9ce05ce502","modified":1700581352077},{"_id":"public/aplayer/src/js/events.js","hash":"58cc17514767d6a79f14eff6c6eb75549cff54bc","modified":1700581352077},{"_id":"public/aplayer/src/js/icons.js","hash":"b34136ffdbfe9861081eb8aaeda6331679340f0d","modified":1700581352077},{"_id":"public/aplayer/src/js/options.js","hash":"4b343773b511d73520a32082b66422278a1ab136","modified":1700581352077},{"_id":"public/aplayer/src/js/controller.js","hash":"a1fa5f1be74a9080abf8c266de52479e1f4fe662","modified":1700581352077},{"_id":"public/aplayer/src/js/list.js","hash":"af64cfa133ffa2eb67425094a3e5a5ae4b2320ef","modified":1700581352077},{"_id":"public/aplayer/src/js/player.js","hash":"3c3e4e2806a376d65dc576eab66e020c188717af","modified":1700581352077},{"_id":"public/aplayer/src/js/lrc.js","hash":"f843a16621bc204d16ae97e579fa10be89b2d76a","modified":1700581352077},{"_id":"public/aplayer/src/js/storage.js","hash":"1a70813959ac37e55337958466185e0177d5dcba","modified":1700581352077},{"_id":"public/aplayer/src/js/timer.js","hash":"4681c42cf8014b35141dbe827dd0578862a1c56a","modified":1700581352077},{"_id":"public/aplayer/src/js/template.js","hash":"10b534c119eca0a69628d57be0f7ff320700b48b","modified":1700581352077},{"_id":"public/aplayer/src/js/utils.js","hash":"9d4829298ffbca25657d1a1ff2eb140f91e7fa6e","modified":1700581352077},{"_id":"public/aplayer/docs/zh-Hans/README.html","hash":"e86101eb1d829c2096a2ea83658568390d20bb02","modified":1700581352077},{"_id":"public/aplayer/docs/zh-Hans/ecosystem.html","hash":"4834ab5017e273fbc333adfca573cdf15d3fb8ce","modified":1700581352077},{"_id":"public/aplayer/docs/zh-Hans/support.html","hash":"b4876ccccbed564b312013ab292c2a7c51a94abe","modified":1700581352077},{"_id":"public/img/cover.jpg","hash":"b977716eb4569f06ae41747c92121d44dd0ef2ec","modified":1700581352077},{"_id":"public/aplayer/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1700581352077},{"_id":"public/aplayer/yarn.lock","hash":"8dbed195fe8209e26307a9bde9cd99b5e38d0395","modified":1700581352077},{"_id":"public/img/welcome-cover.jpg","hash":"4f64859e7d800f527944aab1615ecc4e24467f50","modified":1700581352077},{"_id":"public/img/profile.jpg","hash":"f039e298bfe68f8edeaa2f3bf90a118852588e4e","modified":1700581352077},{"_id":"public/statics/chengdu.mp3","hash":"ffff18953f07760d1e30a74e22eee49f1f7f793f","modified":1700581352077},{"_id":"themes/cola/README.md","hash":"4260a23493da9cb593083027b79b251eccbab9b8","modified":1692709319000},{"_id":"themes/cola/_config.yml","hash":"bca634bb423d3660a44a2e25dc9156a040194f72","modified":1692709319000},{"_id":"themes/cola/layout/archive.ejs","hash":"938bf73edb193a72de0a4700dffe27c770b45709","modified":1692709319000},{"_id":"themes/cola/layout/category.ejs","hash":"c9a83aae63502de8f41090b0385413d578e956fc","modified":1692709319000},{"_id":"themes/cola/layout/index.ejs","hash":"e132faa311b5dfa4279fbd4ff6d0db92f71dfa3f","modified":1692709319000},{"_id":"themes/cola/layout/tag.ejs","hash":"e132faa311b5dfa4279fbd4ff6d0db92f71dfa3f","modified":1692709319000},{"_id":"themes/cola/layout/layout.ejs","hash":"61eaed9289fcd9b1d6cc3e7af99ff1596553460f","modified":1692709319000},{"_id":"themes/cola/layout/post.ejs","hash":"136e94062115bd0625e83f6e94f223d343fee876","modified":1692709319000},{"_id":"themes/cola/layout/_partial/about.ejs","hash":"7b7c7536a6d6a6c1c6aa154273a499c26d83d510","modified":1692709319000},{"_id":"themes/cola/layout/_partial/article.ejs","hash":"29d02e6254143649b29151d2d06716378f4ef669","modified":1692709319000},{"_id":"themes/cola/layout/_partial/head.ejs","hash":"084181899af74f840dbde8059247d9b07689f42a","modified":1692709319000},{"_id":"themes/cola/layout/_partial/category.ejs","hash":"f2bb7901a0e205bac461bde12b98b5ac927c39df","modified":1692709319000},{"_id":"themes/cola/layout/_partial/header.ejs","hash":"3a5ed939525abec5d016e5f2c1c554974e699483","modified":1692709319000},{"_id":"themes/cola/layout/_partial/index.ejs","hash":"1d7bba38aac28fedb20f5e2965d419640cf0cbf3","modified":1692709319000},{"_id":"themes/cola/layout/_partial/empty.ejs","hash":"7f594ed6c079bb4417df3af41b03aefb37e7a590","modified":1692709319000},{"_id":"themes/cola/layout/_partial/link.ejs","hash":"fcfcc5e9f57a9ab3cafb44a71c8680f1372cca44","modified":1692709319000},{"_id":"themes/cola/layout/_partial/log.ejs","hash":"783726cc1f0a01e8555051613e121cbdb321b8e1","modified":1692709319000},{"_id":"themes/cola/layout/_partial/tags.ejs","hash":"9e7e26f34dc4b827c8175f2d0a3392fd4bf71eb9","modified":1692709319000},{"_id":"themes/cola/layout/_partial/main-right.ejs","hash":"d4fb236d53684b849880c4624fc15ed5e508f2e1","modified":1692709319000},{"_id":"themes/cola/layout/_partial/main-left.ejs","hash":"1706284ca90ac0f147eafdcc844975c0bdd5e734","modified":1692709319000},{"_id":"themes/cola/layout/_partial/tools.ejs","hash":"36a5350defa5214f9880bbaec199a3c0f21fe9c6","modified":1692709319000},{"_id":"themes/cola/source/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1692709319000},{"_id":"themes/cola/source/css/markdown-theme.css","hash":"cae54abf3ca8989cc0ac60cf69f114609884742f","modified":1692709319000},{"_id":"themes/cola/source/css/iconfont.styl","hash":"5e1e0a3c6cec5c769debd00b078188ffd12578cf","modified":1692709319000},{"_id":"themes/cola/source/css/layout.styl","hash":"5d1d5d1697cef7a41c55a7a2a5f7b2275a0c2cf0","modified":1692709319000},{"_id":"themes/cola/source/css/highlight.css","hash":"fdfaf9cd6ce76ecf183605311c247ead2da76ed1","modified":1692709319000},{"_id":"themes/cola/source/css/mobile.styl","hash":"c5a720fa86db7919cfe5613932e74260183705aa","modified":1692709319000},{"_id":"themes/cola/source/imgs/404.png","hash":"cb9fc6f842f7673417e8ffc8a8be950fa68aec85","modified":1692709319000},{"_id":"themes/cola/source/css/public.styl","hash":"5c0382e604b33c8f9934720757f57440465b95eb","modified":1692709319000},{"_id":"themes/cola/source/css/var.styl","hash":"b474e6d6afd631786fddcd74a69d84505c4dbc2d","modified":1692709319000},{"_id":"themes/cola/source/imgs/avatar-bg.jpeg","hash":"c8727143cc5f2f95a61408e748d6ff95783d1cee","modified":1692709319000},{"_id":"themes/cola/source/imgs/avatar.jpg","hash":"3997d5ea09398df5399d65f238aed4cbd13e3f23","modified":1692709319000},{"_id":"themes/cola/source/imgs/shortcut-icon.ico","hash":"af248f8e319ff8bf825af2460a88825ee0967abd","modified":1692709319000},{"_id":"themes/cola/source/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1692709319000},{"_id":"themes/cola/source/js/jquery.pjax.min.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1692709319000},{"_id":"themes/cola/source/css/partial/about.styl","hash":"0af347191ea056bb60909dca8f9b3d8962408cee","modified":1692709319000},{"_id":"themes/cola/source/css/partial/archive.styl","hash":"0eea0e565583249ccd904d5c18cb650e94133545","modified":1692709319000},{"_id":"themes/cola/source/css/partial/article.styl","hash":"1b0decbdf5e23accce9decfc0f7dcd40c71a9634","modified":1692709319000},{"_id":"themes/cola/source/css/partial/categories.styl","hash":"7eb6f4363834921d78fa30b62e12704fcbfa9bfe","modified":1692709319000},{"_id":"themes/cola/source/css/partial/index.styl","hash":"4f4d173f9ce99bbe35fe7f657e5a879ecf46eeb3","modified":1692709319000},{"_id":"themes/cola/source/css/partial/empty.styl","hash":"6ed47adf1da369a73da383b5a7289a78849865c9","modified":1692709319000},{"_id":"themes/cola/source/css/partial/tags.styl","hash":"8d1cd594d677580f66ced40cc6c783a27d4ae72c","modified":1692709319000},{"_id":"themes/cola/source/css/partial/tools.styl","hash":"ed7c1c5c804ee66f4cc519318a17846cce860fc1","modified":1692709319000},{"_id":"themes/cola/source/css/partial/link.styl","hash":"977b50b91f150e498e436b4386d33c7fe8f01879","modified":1692709319000},{"_id":"themes/cola/source/imgs/log/street1.jpg","hash":"997c0209bd16cbb953f974a2cfb15d24e512c27b","modified":1692709319000},{"_id":"themes/cola/source/css/partial/log.styl","hash":"158b40f955dfb874471c591c9c81af7500ccc705","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/DIGESTS.md","hash":"c0e8f335645d0c91099991b1631f5cc50ea9639e","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/LICENSE","hash":"00990dad3f28f5503fad9835bd7291524301574c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/README.md","hash":"9dcb78f311149d5368a918d78f7bc9b2bda18b00","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/package.json","hash":"cc701ffd356eecfe5210bb78bab051fee0a66ac2","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/es/core.min.js","hash":"9aa251092ab81412a05445c1e041c51d3065fb68","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/es/highlight.min.js","hash":"9aa251092ab81412a05445c1e041c51d3065fb68","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/es/package.json","hash":"297690bb29d61d6313f4155ef40448a352e84d0a","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/cpp.min.js","hash":"0b8ec2267399334eb821991049158c9112ebef79","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/csharp.min.js","hash":"ae7362eda4237d3be4716b629c11e25dda3f7523","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/bash.min.js","hash":"1bcc2708260fbef636b0b4b29025de1f67c1f4c5","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/apache.min.js","hash":"aa72c9430c87872e883a7a08f6d657f42b71ccd0","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/glsl.min.js","hash":"806cbaf8a59003fb90bc214de54f83f2d5c99d69","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/css.min.js","hash":"ff03d6eb780025823b1e0136ddbe4ecea9f96043","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/javascript.min.js","hash":"4d0a58536910830b37f6fc308fc09fbfaeb35294","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/go.min.js","hash":"8083d0406e8302d02666436f981cbe5e625bac4a","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/java.min.js","hash":"3bcab8df828c96fea20fc0b0fb2cc721ca553838","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/http.min.js","hash":"1a6ce813b982701c19e72e80620d80d17179b171","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/ini.min.js","hash":"71a9d987c6de9642735433a258323e874bbce01d","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/lua.min.js","hash":"b1c62b503ddd68603647569305c5434c194f3966","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/less.min.js","hash":"d8dde07b62c91b57b445cf081ebbe524d17be917","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/json.min.js","hash":"475a21f3ebe8a2851287758e30f20bdb1cfc6ab3","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/nginx.min.js","hash":"3858bddc87462d913822e1d392ab8c784dbb54e0","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/markdown.min.js","hash":"39e3cfa22d44d96d5e803103099f51200f46d4a1","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/php.min.js","hash":"3635d4bc114e327b4aa361d5e21203d5fc4e32d5","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/python.min.js","hash":"f7c304c56d879ace3965ec0ab574a1fcab16a784","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/rust.min.js","hash":"37f2e093af1047fbd19b1bb3cf501aae9e821b24","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/scss.min.js","hash":"b3f98d42a6a511e0900beae90203daf94831e7e3","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/sql.min.js","hash":"97aa1e1e30cb02f1aabe6474e5bed9ba9073847d","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/shell.min.js","hash":"0f6a2aacb071dff4ea231ef4e209aac76e2286c9","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/typescript.min.js","hash":"6acb91fb781c6fc6ac382c566cb51f1e171a28aa","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/stylus.min.js","hash":"689725ddc0ee6c67d39a1d5500b8c0b572c6876d","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/xml.min.js","hash":"ddee5c5ec798232058f23309023884aaae661485","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/languages/yaml.min.js","hash":"786b7f0e48747f7bd5660fb5ad371e23c1197901","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/a11y-dark.min.css","hash":"e0a3294faa7dfa1eae300caea5a01f438b643b93","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/androidstudio.min.css","hash":"3fca6d132b9b5b4f2f0658ca0e6e3c6e3b4fe8b2","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/a11y-light.min.css","hash":"be83f4d7eaace469cc6a2ac1487cc6fb30665ed7","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/agate.min.css","hash":"3df515255166aef435d6528781a2e2c5cd6df58c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/arduino-light.min.css","hash":"fd7940194f14afeb0f49ec08038582bda3196137","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/an-old-hope.min.css","hash":"65be5a19ae19775e4872d411d99752e57f9f40b5","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/atom-one-dark-reasonable.min.css","hash":"c5d9f70a98a859937bb859bb6f14125708ab5ca9","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/arta.min.css","hash":"c21878eda3a7d58551d02dc090be7950232ff0f5","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/ascetic.min.css","hash":"774bd25b6a7155b6fcf724758ab81fadc029189b","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/atom-one-light.min.css","hash":"a0cb76ff3bbd0040fd846a5d62bf94fc40b0f06b","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/brown-paper.min.css","hash":"cbaf9c121b02c11d465ace09fe8180cd4a6f27a6","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/atom-one-dark.min.css","hash":"56dddcd32332b54853ba9eadba3c883f95f00275","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/color-brewer.min.css","hash":"520804652cc3abc319c21acf04822d03cf310f47","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/codepen-embed.min.css","hash":"9a7be471de0df66fe5c3ab38bbcf3026349ba78b","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/dark.min.css","hash":"5ab9082a6fd29f7f8ffad02a606967bb841a2ab4","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/default.min.css","hash":"9dafcb6d23472adb90f9c9f55bd9dbd590392953","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/devibeans.min.css","hash":"0ddec3b13da49dcd9fcee4eb9188674cfeb29629","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/docco.min.css","hash":"2076bc6b7adff7a6f582017d64a6ce9b66237c10","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/foundation.min.css","hash":"98ac4498ff65d61776485219fe3d13cb6b7b05a7","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/felipec.min.css","hash":"895b5d299601966ffdab0124e0d223f1f4693936","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/far.min.css","hash":"79ab1e13b8c641ab86ce1b636ba83b60b28a069f","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/github-dark.min.css","hash":"a1ed034f5a2c76d6ada0af51dcb30e2e5af936a0","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/github.min.css","hash":"54b718c687ce8460e10d501c1eb53a8098942c1e","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/github-dark-dimmed.min.css","hash":"8137fa6d839aec5d711a9e74f5be5d376f41798f","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/gml.min.css","hash":"089e8aa0acb7a319043b93974516e9f7429f2eb1","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/gradient-dark.min.css","hash":"280d83487b76156bb68c2b5089d253ac77030e36","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/googlecode.min.css","hash":"7c6570b385e09d5d77e4984d5c7150e6d607b2be","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/gradient-light.min.css","hash":"55ae8dd088bb01f33908c9049aeef71e7be906a9","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/grayscale.min.css","hash":"3527f4d2eb324aa42f9ae426c4936fe8971bc056","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/hybrid.min.css","hash":"9ab5c8a3effe9a0048b9e62ff2ddc30569e854e9","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/isbl-editor-dark.min.css","hash":"edabeb353a051623980adea5c8fb9954e4d03bbc","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/idea.min.css","hash":"41bbd30aedb7ad30461432f21967c44265ac67e3","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/isbl-editor-light.min.css","hash":"49c3d979f6e0fb8e7be0f4ff12ad08c683d1cae4","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/intellij-light.min.css","hash":"eaf6a468491203fc9b1512f3c63be11b4ae94789","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/ir-black.min.css","hash":"37eefcee4c4cb5e05049c51d4b614561956eec45","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/kimbie-dark.min.css","hash":"6c08f429eaaa7494b3ec158c6771409f4f1d8ca1","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/kimbie-light.min.css","hash":"1c2f87ce01e6bbf7f08b7fcf83fab578737aa90e","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/lightfair.min.css","hash":"5e558dbfcf4779bde03532acc46b660391d91c63","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/magula.min.css","hash":"232985ea0caf14c3a071480baaf02500629b1572","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/lioshi.min.css","hash":"b0ef1ffaf274beee22dba96a0c4bee9fde8663be","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/mono-blue.min.css","hash":"72888c2f9ade3b98cff907adee5d4cff43a6826e","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/monokai.min.css","hash":"2ccd97a7d5e0d9f1a251a2139ed2bbc42a4521db","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/nnfx-dark.min.css","hash":"6c9250478c5a85f477fb7946e43aff6d4ec9b417","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/monokai-sublime.min.css","hash":"8a5d18f7ae218a0de0de283a0766e0c284d4cfba","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/night-owl.min.css","hash":"3ccb9e3e12d231e6a16d905a539a72a1b8b323b3","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/nord.min.css","hash":"ed022587efe0b50f9efffcb97e9923aa87dedef0","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/nnfx-light.min.css","hash":"f3c5480f2f29f55fa358ad2fd60cfcc0dc6b4b4e","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/panda-syntax-light.min.css","hash":"ed760498e7d4e5351209670a4e77b149785aa3c5","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/obsidian.min.css","hash":"d90bd36c085b41222fb1fadb5f87150d57fcd620","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/panda-syntax-dark.min.css","hash":"2b3851620dbaea9929876092d0a667a77f45b000","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/paraiso-dark.min.css","hash":"05428cc64880ee464a334ca343a845780b828326","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/paraiso-light.min.css","hash":"16887f76435d97618839f6554a5ea0b911371c03","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/purebasic.min.css","hash":"cceed4931efba33b947e07dde994b037991161a2","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/pojoaque.min.css","hash":"154b01709684ebecf1314590fee0374644ad4636","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/qtcreator-dark.min.css","hash":"015e3e981d7a268fd1389b13637b97139f394505","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/qtcreator-light.min.css","hash":"0b7004cb0cac17024ac1ff264c3a71a67e494219","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/school-book.min.css","hash":"1ea765dbe18936ebef7b028cfef19ce45fe3ed8b","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/rainbow.min.css","hash":"54e7c56ad5c071e238655eb242804730ab95d6ea","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/routeros.min.css","hash":"ad833a4838155353cc128fdd7b903fd321e067c1","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/shades-of-purple.min.css","hash":"bb7ec502691590f7c0e5e1a12ae62988885eff88","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/srcery.min.css","hash":"bd439806670e65a25696e666fc74624d97e2cdda","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/sunburst.min.css","hash":"5e58559e771e295917827b053fc4127f4bd36925","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/tokyo-night-dark.min.css","hash":"e33c2450f134d68d048edd4c5c9ced77f58e0374","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/stackoverflow-dark.min.css","hash":"ada69847e1bf540b1eb72100850898b503e6e1f8","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/stackoverflow-light.min.css","hash":"f78d859c41720a2322681228eed24f15c2139e44","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/tokyo-night-light.min.css","hash":"3fcd96f027e14f80daa2869100ce9b66decddfe6","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/tomorrow-night-blue.min.css","hash":"abce92baef3b9e7279767bb678ae3167c2e5a8f4","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/vs2015.min.css","hash":"fc8e8571ee0e49b7fc2c994696126daea49d19bd","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/tomorrow-night-bright.min.css","hash":"3f40ec130d6f419d1aedac1de63a2c5b06541dff","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/vs.min.css","hash":"d8b0e930e12e1d6120c7c572697193b2bd0f6412","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/xcode.min.css","hash":"e7f0e58729d994c33e4958afe3f545d1e7372d4e","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/xt256.min.css","hash":"ef2f1defc190c5466b47dec6928325e13787c5ba","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/3024.min.css","hash":"2b6c6a25ebf0b308744d5e204111f22696c0cd07","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/apathy.min.css","hash":"65cc6ace938a696a68d18d7c321bb77975919517","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/apprentice.min.css","hash":"590e9151a831e7d4f5e5e2a9a74c482dcf36b4fb","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/ashes.min.css","hash":"8193ded0de98942307c614fbd74eb4637187c610","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-cave-light.min.css","hash":"edf0891236955b32cd6a109d375e9af84efb9159","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-dune-light.min.css","hash":"c727191d17f5444e2c15b75b02e4f982aeeedccc","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-dune.min.css","hash":"1bec22b0e97a47861fb56495967b9efcac393624","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-cave.min.css","hash":"29aade98e27b6c678bced60d8ea66f7251b035e6","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-estuary.min.css","hash":"f39d1d965e0fb7474e1c393a0e1eca7a82f03810","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-estuary-light.min.css","hash":"746f569947009fb223648cacf7606dd47dbf7f21","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-heath-light.min.css","hash":"894026765303f5b26ecc31b53d041049f78527a7","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-forest.min.css","hash":"f00920703e2ca56bcb2512a3b5d59c186e8a469e","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-heath.min.css","hash":"10794ec1074f6ec81761bc50ac69da9ed4b12941","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-forest-light.min.css","hash":"ce9659e72928f42d815b9a851b4969dcf4cc41e9","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-lakeside-light.min.css","hash":"eb6033cf2e30f09be932f04ac90b851c2ea14072","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-plateau.min.css","hash":"f04c508b4850d6b0ec1ac651cdfe138e8f24e5c4","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-plateau-light.min.css","hash":"b4c4e9283282717cda5f147c6a0442d95eccd5b8","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-lakeside.min.css","hash":"606dad21a00dd644a9ad732b4f53e305752e27c8","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-savanna-light.min.css","hash":"2cb68d6a4cceb500bafc3c5651755647fd1df16d","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-savanna.min.css","hash":"9a648aa3f8390ddb26e5147d59f62793ef067077","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-seaside-light.min.css","hash":"e1a3cb13223199753ed9740748530cd9e5af6d93","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-sulphurpool-light.min.css","hash":"9e9a09a84026dfb3652a59c551c421cd62c358a3","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-seaside.min.css","hash":"d086d7eeddfb80e64ac70a227bd03166cc81946c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atelier-sulphurpool.min.css","hash":"39c82fb9548139f1c753f4c6d022ee06af1f0f4e","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/bespin.min.css","hash":"8b303707bfc06bccd059723e07f6d3ece17cdbbf","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/atlas.min.css","hash":"1a7c6b6e21be097dc9dce8319cee65dc7c9f8e47","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-burzum.min.css","hash":"3fa25771092109b9330e0c14d47af4a2948a46f2","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-gorgoroth.min.css","hash":"cd78458e263cb7008aa901bdfd4072997999c18c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-dark-funeral.min.css","hash":"2028edfeff7f673ba7e869b2a0702332771b97a4","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-immortal.min.css","hash":"3a04b344f11b1efe22d32375852b627666570281","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-khold.min.css","hash":"f1a31fbff96198f6faa219263f606ff74ff9f4a8","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-marduk.min.css","hash":"3dc49125d84d1784f07bf83f732b34a773c66517","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-bathory.min.css","hash":"623f7e28ecae4367c6a7e18c024cf3071204b123","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-nile.min.css","hash":"254192329e5ddf51c723be53f14bad43427e2502","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-mayhem.min.css","hash":"37fb5b649c0a6efe36df7f33748fb9497679c8ca","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal-venom.min.css","hash":"80d2797e7e7a689f1810a972fd78321a49ef85f5","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/black-metal.min.css","hash":"ce8b0740a175e07ae70c343b4b1d8e7e31142cb0","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/brewer.min.css","hash":"d6d718e569c5b6c5e0ba512a59a05148c1442fe9","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/bright.min.css","hash":"6beb06d1e3cfea9293f11cbbb375a4a3db0338cf","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/brogrammer.min.css","hash":"349e50e05ce223ac30b494d5186bbc5f934149bc","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/brush-trees-dark.min.css","hash":"ab1f5e77e1d0b71f057c347ea4be03081a3262aa","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/brush-trees.min.css","hash":"9fa06dbbce4370f0f51b43aa35cdd5c6f44e508c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/chalk.min.css","hash":"0326e5ebebdb6121010369233f18c0cd0ac7e24b","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/circus.min.css","hash":"7b219c9aa01c777d55f34a2f25984557a82dfe66","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/classic-dark.min.css","hash":"f59a354efc15ea680853d6982b8c7861ca728f28","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/classic-light.min.css","hash":"bd674c8c0c410e80545d0a8bfac0fbdb758d9421","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/codeschool.min.css","hash":"caf9edeba7ccd187f91d15e13c66e618d70e029c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/colors.min.css","hash":"2a60c4d1b5e9f8232ce970f7baf8eba0c19ea00c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/cupcake.min.css","hash":"d5250bbd3f0cf0f9d886ad18cf870c6f2cf25b79","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/cupertino.min.css","hash":"595f3cf2df83bad1c55bbe061c9bbe53f61c051c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/danqing.min.css","hash":"a653d5344188644208168ddf888df95734fd8376","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/darcula.min.css","hash":"5543c43b65b7020513d1d847418ba7b5a24cf692","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/darkmoss.min.css","hash":"e9b88f0d646d2bf267551d1350076ff8fd78f448","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/darktooth.min.css","hash":"3dd57bebd721f61081c6b66fd4cca9390a8e2c62","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/dark-violet.min.css","hash":"b844178c655a706544105a4feeb43c5520bb95ca","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/decaf.min.css","hash":"429c0a8de6fad84db26ba42a01dfcb9bfea19961","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/default-dark.min.css","hash":"2d336859aa28a61179edf52ce9e24838ee8e03af","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/default-light.min.css","hash":"195419c5211bd73d29bf001c3478c992bbc6ac0e","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/dirtysea.min.css","hash":"8e00ad69cb202bc25566e94022fa8934b8dacd5a","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/dracula.min.css","hash":"f059ea8a0bfa5c1252582f1b453293524a23d914","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/edge-dark.min.css","hash":"d8f1c0aa07044605be978c7522dbd7aaf5db6a99","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/edge-light.min.css","hash":"33efb57ee2ccda693a0299203dc2c05539877fe7","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/eighties.min.css","hash":"e36e93c85baec8573ab7f17493c52cd8ab8175e4","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/equilibrium-gray-dark.min.css","hash":"e330d31898800966bf846d1cff20add7e48a93f6","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/embers.min.css","hash":"6fa920dc4b09e2efd7ad04a10541574a226d5c6c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/equilibrium-dark.min.css","hash":"0379378c73203d337c861cabb670b6194a882b29","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/equilibrium-light.min.css","hash":"60b6487151a35990b1e3e6abaa6a94b1fc07b865","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/equilibrium-gray-light.min.css","hash":"3e7cbf157b6bcf481f1d925336ae95d0bc3d8726","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/eva-dim.min.css","hash":"eda637cf44b40c354b6b2be1444f7490d61fb294","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/eva.min.css","hash":"de80e433a23b29bb67d11e3bec9ce855c0850f11","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/flat.min.css","hash":"eecc423e68e7124b31d2638d6264624c7f1be74a","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/espresso.min.css","hash":"7177ee411c44489feb6c037470a1187f15c035b1","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/framer.min.css","hash":"b097aee0719bc6fb756120e388809315f65ae40f","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/gigavolt.min.css","hash":"229c5ec67bcac715e9e71965ba6725a8d5e996f7","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/fruit-soda.min.css","hash":"8dac460b1f689265cb8861f9eb73750bfb81c461","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/github.min.css","hash":"0be0372ed774893672c2c02720d1ebe6a6589def","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/google-dark.min.css","hash":"2d8153415989a0b2830d2ded84a0764615379e9b","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/grayscale-dark.min.css","hash":"f1d9e3a4a7ff58a3fac751e85d8d3ab7d73bba7f","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/google-light.min.css","hash":"010ddde835befa08e354f157df69909750ee0f63","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/grayscale-light.min.css","hash":"c551ee72c76013b69421847409c7dd9352012863","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/green-screen.min.css","hash":"c5784f6a24a46f7de5eeef78d365b75e4e7bfb01","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-dark-hard.min.css","hash":"5485830ad496cabf1e5208a548216f5a669cfd57","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-dark-medium.min.css","hash":"56833f57398d540793131f126c10052b804cebf7","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-dark-pale.min.css","hash":"2583ff8e92c047a8f48569835d9fdf1ab441183b","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-dark-soft.min.css","hash":"c062ec093316c6878d0cecb6dc6b38bdab0437cc","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-light-hard.min.css","hash":"b66165f61348744c44583e14c47e5027025a0643","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-light-medium.min.css","hash":"7da913e6e5682f6065563ef89245d2185b9571ae","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/hardcore.min.css","hash":"e07bcad93fd3e09858164a9034fd4ee9d8e4a445","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/harmonic16-light.min.css","hash":"f1c18cd160a5a1c6a26358f3eb5652febef84e0d","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/gruvbox-light-soft.min.css","hash":"4e8749a0d405e5c51cbe29b1f8b49fc0082664a9","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/harmonic16-dark.min.css","hash":"8589158c51e6cde7c3e2def5c31a24619512ab4d","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/heetch-dark.min.css","hash":"24d460581251402ee0d66db10386e9de21f85e91","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/heetch-light.min.css","hash":"4d1842be216631a59966c7ad7194d55672a58fe2","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/helios.min.css","hash":"1605744136df8e670149f1cf6179d176eea6a5d6","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/hopscotch.min.css","hash":"32ff3b51527db61e9bb76acfeccf0db370f1647b","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/horizon-dark.min.css","hash":"9ff193dcd091eef32342561f2f2a2e2d286821fa","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/horizon-light.min.css","hash":"06a405dcc9d1d5581485602bc2643665f035590c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/humanoid-dark.min.css","hash":"424a3d366d3c1165e11bd947755af65de39311ff","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/ia-dark.min.css","hash":"3eb84c418cb6bd0de23d1fcb3182f22f40bb3baa","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/humanoid-light.min.css","hash":"f71b5fac55d8a2c652d71fce475ccd944a4baa46","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/ia-light.min.css","hash":"09b6af73916508c2f88ca651c14e728f4e2cc076","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/icy-dark.min.css","hash":"276ed41177d8edb91f255de44653856feed9dbab","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/ir-black.min.css","hash":"8f617ca204d423bda4b077c82488695610b8edbc","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/isotope.min.css","hash":"ab6d557428f635b58e27591defaeb730b4c4bf24","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/kimber.min.css","hash":"2f01e1ff280558a9f3bc4c5696fc27d164ab8699","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/london-tube.min.css","hash":"67fdb61219dafc05bf8811842a947ce0b28c3cfc","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/macintosh.min.css","hash":"d7bc98f2b0aed6fb89e0e4f0087c91b6199d3dbc","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/marrakesh.min.css","hash":"0c304320602c6cc49a94e9824563679dce78792d","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/materia.min.css","hash":"d8bdc0a5958e1742e16ac8499cafa206120f1e64","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/material-darker.min.css","hash":"b6ba949cd2d382e6f3830c479c35b715607e44a2","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/material-lighter.min.css","hash":"7f52a3b14ca47ca246f42f9bc14d96ddc37c9759","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/material-vivid.min.css","hash":"4196f93e5e0743658dc3eabcf632f1000b623735","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/material-palenight.min.css","hash":"09f509bf75cbb9748df91baa906a98bdf27d9731","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/material.min.css","hash":"be11c5b24b52528719376881a0d308cf5774b533","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/mexico-light.min.css","hash":"22140bcb2f7af83479abde465f799bf674cb709d","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/mellow-purple.min.css","hash":"414e151ef01e4f86ebab490c2f67d9de593f85fc","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/mocha.min.css","hash":"1b79c5d144a6de7c42472b34c0ec613957dcbefc","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/monokai.min.css","hash":"98ad13552be2857071598173a128608dcdfa0a94","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/nebula.min.css","hash":"d3cce5341d6f0ac8ccd4c8cdaf07028ed6b5f31e","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/nord.min.css","hash":"4759d44eec55b3baf8d2b61b1df69dde25fac39e","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/nova.min.css","hash":"b0c27a5be896ca0a0392890c7a3eb95b9ce83dc2","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/ocean.min.css","hash":"b69b8d154934bd8906de7a718888dbd7c6dd8aff","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/oceanicnext.min.css","hash":"9449036a22aa9a0e3a1f15b9acb9707cac8e9bec","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/one-light.min.css","hash":"8511afec97a53262dbc24e58425a83fe74abf11c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/outrun-dark.min.css","hash":"675c20d28b46290eee73b4fc3118614d40bfe410","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/onedark.min.css","hash":"e5d0c3832e829db406193c4d42cc1c3d75dff600","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/papercolor-dark.min.css","hash":"6e1501ee21fd9e28e8e10475d5649580701b61d1","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/papercolor-light.min.css","hash":"6b7f1eef183982569b50fca72548adc938c5f26a","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/paraiso.min.css","hash":"d959f2daffcafcf6454ad83135fec3df25db7007","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/pasque.min.css","hash":"f47b5eed9d29a1516004ebbe51c16df6f4dfcb84","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/phd.min.css","hash":"aeb53d584d0348f1d213fcb8b8e8a18e14344800","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/pop.min.css","hash":"96c81ba51e8566786eec389e90d1fb783453d42b","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/pico.min.css","hash":"30b8b7159ac8886c75dfe5dec1b61ba86ba1c2be","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/porple.min.css","hash":"a528df7f3bd5ca446331d6662eba4220382408e8","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/railscasts.min.css","hash":"eb035c0170df98b3d3b1196d141eff728fc67b6b","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/qualia.min.css","hash":"fc8c0d6277e4285e216529ec14bfca26d5c275a1","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/rebecca.min.css","hash":"99aaa67362cb1550c9d4dd4d47ca1d07af93df4f","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/ros-pine-dawn.min.css","hash":"e488897d53e8dc0d6457e0981f8f6bded8b78f04","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/ros-pine.min.css","hash":"a0bb25e24c8114d488b555a23068f942fee1a5cd","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/ros-pine-moon.min.css","hash":"679bba0f44c93781b94ee69879858ddceb6c0c9c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/sagelight.min.css","hash":"df87908ff53b6a7b7763092eb3b14d52a8df57dc","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/sandcastle.min.css","hash":"f69a837c8483b03df6eeabe85f902a90c508628c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/seti-ui.min.css","hash":"1909cd661999e7f990f8caa5d7b16a66823342d5","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/shapeshifter.min.css","hash":"984de15ca0838413578efb140e4623f77610463a","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/silk-dark.min.css","hash":"4846822c85f6e02c91e30d335b543666cfb3cebe","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/silk-light.min.css","hash":"c2b4dbfd0396593993189b999e6fb85d8eb68ce7","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/snazzy.min.css","hash":"b5d208ed46cfac312f0078201b66c4bcf4edf3dc","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/solar-flare-light.min.css","hash":"7918e394a35d1d20a7bda2845f1864531ddf2fb5","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/solar-flare.min.css","hash":"b1b4fb9382f539b85b1669876dcf7d8b5e344735","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/solarized-dark.min.css","hash":"3331578390ec3d2d08f7521e81dff825f4b50715","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/solarized-light.min.css","hash":"30abd96881de07ba334868637745395ab5d6f08a","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/spacemacs.min.css","hash":"899807f4de03c6a12cfed643e7867e0094af0299","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/summercamp.min.css","hash":"56a6e5f113e5ff63140f21069afceb42c2564394","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/summerfruit-dark.min.css","hash":"c786a2ff71d77b36d2b2deb9ea5bdafc928c4da0","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/synth-midnight-terminal-dark.min.css","hash":"ba8288b4b755f6411d55a16b110c6b480574e5b0","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/summerfruit-light.min.css","hash":"b397c6ea94285d1059e0d5f11f05289d509832d9","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/synth-midnight-terminal-light.min.css","hash":"ada5d8f3430cf29e06ba7de8255ad5fb253b3d9c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/tender.min.css","hash":"5471ead0a9125e79e8de206b53ea3e165bfc8419","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/tango.min.css","hash":"63775fea5e3edecb1334244d759b3b51855aa94a","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/tomorrow.min.css","hash":"951f9fd73a9e85ffd09c2318073a5fc568c8c53d","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/tomorrow-night.min.css","hash":"f108341a9c85ec38890f15e19df69fa5339fdd5a","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/twilight.min.css","hash":"a043d83ecceefeeec888b057eb2e4ec473090701","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/unikitty-dark.min.css","hash":"b7551826393c9fb893ccdbc26331ba63580ec88f","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/unikitty-light.min.css","hash":"611934d10f720b7f781709790aa1862747a2fcdb","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/vulcan.min.css","hash":"5a47539368ea62e096cbaba27677ee90431ad4ed","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-10-light.min.css","hash":"049b8a66c0f9f74a8bbbf0f40c7c29560d8e727d","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-95-light.min.css","hash":"8e54d927f04a400cffd059230f905914d7cf9ac4","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-10.min.css","hash":"0db5cc58c618c583b6030794ad353ce4a8261643","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-high-contrast-light.min.css","hash":"cc9b98a27f1ba49825d931e5b8103887f758a797","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-high-contrast.min.css","hash":"1eae1776c8444c598521f47cfb445bf6753affce","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-95.min.css","hash":"7afb9eb31ef567735d3a1ec418a65be1c225aa4d","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-nt-light.min.css","hash":"8787f875b49fde0402818e457bd48864f87e04a8","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/windows-nt.min.css","hash":"b551e3b2e2214083d4ce6b2d824810d6e91a6cd8","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/woodland.min.css","hash":"6b612b12f27af1a4d4eaf9461a49c8cce72b3e0a","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/xcode-dusk.min.css","hash":"6522364448934cedbf185589a92419cf4f2f7f96","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/styles/base16/zenburn.min.css","hash":"df5d73017c2177ea3dfc02c17e7d64a2c72e19b4","modified":1692709319000},{"_id":"themes/cola/source/imgs/default-cover.webp","hash":"581572c3702ed4b9677494d52dc975ec5d08f047","modified":1692709319000},{"_id":"themes/cola/source/imgs/top-cover.jpeg","hash":"03891c22377a69bf6eeeba926ab456d9ec94bb44","modified":1692709319000},{"_id":"themes/cola/source/js/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1692709319000},{"_id":"themes/cola/source/js/prism.js","hash":"26a9b3090bc261cd4ce5b012500d2f2cdca7ff56","modified":1692709319000},{"_id":"themes/cola/source/imgs/log/street2.jpg","hash":"66ecf4645188f1aa7236f725230c083a4c24370c","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/highlight.js","hash":"b73df223c70f32545099401097aea9692fa93f93","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/es/core.js","hash":"f05826e8df6b55ea16a9516fce2a18c5e68e16d8","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/es/highlight.js","hash":"37747432efc37fab78891d6a6e8adb18bb2e856f","modified":1692709319000},{"_id":"themes/cola/source/js/highlight/highlight.min.js","hash":"31582aaaebf5e18c1bb9453aa03911279a0c901c","modified":1692709319000},{"_id":"themes/cola/source/imgs/default-cover.jpeg","hash":"7c1ce642902faace50a6042fb603c4c4bf8df275","modified":1692709319000},{"_id":"themes/cola/source/imgs/bg-cover.jpeg","hash":"af30216fc80a250f79550b0968a9891f3a2518a6","modified":1692709319000},{"_id":"themes/cola/source/music/八连杀.mp3","hash":"cf8dc44d2157f30186f9bfb81d9618918eaf0a55","modified":1692709319000},{"_id":"themes/cola/source/imgs/log/coffee.jpg","hash":"e55ce98b933efffa738fbfc419e5cc2faa8ab4f1","modified":1692709319000},{"_id":"themes/cola/source/music/kabuda.mp3","hash":"800ac10c0c8db3db2751e4a8c1eef7424b149c74","modified":1692709319000},{"_id":"public/imgs/avatar-bg.jpeg","hash":"c8727143cc5f2f95a61408e748d6ff95783d1cee","modified":1700581396216},{"_id":"public/imgs/404.png","hash":"cb9fc6f842f7673417e8ffc8a8be950fa68aec85","modified":1700581396216},{"_id":"public/imgs/avatar.jpg","hash":"3997d5ea09398df5399d65f238aed4cbd13e3f23","modified":1700581396216},{"_id":"public/imgs/shortcut-icon.ico","hash":"af248f8e319ff8bf825af2460a88825ee0967abd","modified":1700581396216},{"_id":"public/imgs/log/street1.jpg","hash":"997c0209bd16cbb953f974a2cfb15d24e512c27b","modified":1700581396216},{"_id":"public/js/highlight/LICENSE","hash":"00990dad3f28f5503fad9835bd7291524301574c","modified":1700581396216},{"_id":"public/js/highlight/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1700581396216},{"_id":"public/js/highlight/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1700581396216},{"_id":"public/imgs/default-cover.webp","hash":"581572c3702ed4b9677494d52dc975ec5d08f047","modified":1700581396216},{"_id":"public/imgs/top-cover.jpeg","hash":"03891c22377a69bf6eeeba926ab456d9ec94bb44","modified":1700581396216},{"_id":"public/imgs/log/street2.jpg","hash":"66ecf4645188f1aa7236f725230c083a4c24370c","modified":1700581396216},{"_id":"public/css/markdown-theme.css","hash":"cae54abf3ca8989cc0ac60cf69f114609884742f","modified":1700581396216},{"_id":"public/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1700581396216},{"_id":"public/css/public.css","hash":"c4ba513718883e88d05c087794f24d48199253d0","modified":1700581396216},{"_id":"public/css/iconfont.css","hash":"4be7b518bc7c778a226c9c1132b0e7a46ce822c7","modified":1700581396216},{"_id":"public/css/mobile.css","hash":"c956fb38e797a0ecccaa86050fa131d5e2768d79","modified":1700581396216},{"_id":"public/css/partial/archive.css","hash":"2fcfda8ab8cdd9ed80faa2ac526230ed6fa605f2","modified":1700581396216},{"_id":"public/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1700581396216},{"_id":"public/css/partial/about.css","hash":"e3ba63e0ee0ebe85d24b06c5d2bd0cf4240c8a4d","modified":1700581396216},{"_id":"public/css/partial/empty.css","hash":"28f6be0a5747564a7dcafe8e83874c31d3bd3e4b","modified":1700581396216},{"_id":"public/js/prism.js","hash":"26a9b3090bc261cd4ce5b012500d2f2cdca7ff56","modified":1700581396216},{"_id":"public/js/jquery.pjax.min.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1700581396216},{"_id":"public/css/partial/article.css","hash":"cbd8a55003b94a6bbefcb6e16399c5aaaa7ec216","modified":1700581396216},{"_id":"public/css/partial/categories.css","hash":"72d799ed77257a051f2818dbfac8ecab27aa77ca","modified":1700581396216},{"_id":"public/css/partial/tools.css","hash":"da0b11c81adc33866356e7ec1b4804acdfcfc384","modified":1700581396216},{"_id":"public/css/partial/index.css","hash":"9bf99980029de1a90238b500a599009bdaaeec5e","modified":1700581396216},{"_id":"public/css/partial/tags.css","hash":"686d74dd55ec495149365a258e8b02d97d940f88","modified":1700581396216},{"_id":"public/css/partial/link.css","hash":"0acf706f6a2c7aff5c7241243397a854a20affda","modified":1700581396216},{"_id":"public/css/partial/log.css","hash":"b05d1c90f2ee0fc493f327fb7c04db8876a4896a","modified":1700581396216},{"_id":"public/js/highlight/DIGESTS.html","hash":"b7155519f7dd89b2897c619fcc38db848145c1ae","modified":1700581396216},{"_id":"public/js/highlight/README.html","hash":"7f6e7b07da56edd27a2ddb8742d34ea9a890899a","modified":1700581396216},{"_id":"public/js/highlight/highlight.js","hash":"b73df223c70f32545099401097aea9692fa93f93","modified":1700581396216},{"_id":"public/js/highlight/package.json","hash":"ae8252f2ba03fc94d30236e9575d8bf8b42b97ef","modified":1700581396216},{"_id":"public/js/highlight/es/core.min.js","hash":"9aa251092ab81412a05445c1e041c51d3065fb68","modified":1700581396216},{"_id":"public/js/highlight/es/highlight.min.js","hash":"9aa251092ab81412a05445c1e041c51d3065fb68","modified":1700581396216},{"_id":"public/js/highlight/es/package.json","hash":"ee2833a41c28830d75b2f3327075286c915ed0dd","modified":1700581396216},{"_id":"public/js/highlight/styles/a11y-dark.min.css","hash":"e0a3294faa7dfa1eae300caea5a01f438b643b93","modified":1700581396216},{"_id":"public/js/highlight/es/core.js","hash":"f05826e8df6b55ea16a9516fce2a18c5e68e16d8","modified":1700581396216},{"_id":"public/js/highlight/styles/androidstudio.min.css","hash":"3fca6d132b9b5b4f2f0658ca0e6e3c6e3b4fe8b2","modified":1700581396216},{"_id":"public/js/highlight/es/highlight.js","hash":"37747432efc37fab78891d6a6e8adb18bb2e856f","modified":1700581396216},{"_id":"public/js/highlight/highlight.min.js","hash":"31582aaaebf5e18c1bb9453aa03911279a0c901c","modified":1700581396216},{"_id":"public/js/highlight/styles/agate.min.css","hash":"3df515255166aef435d6528781a2e2c5cd6df58c","modified":1700581396216},{"_id":"public/js/highlight/styles/a11y-light.min.css","hash":"be83f4d7eaace469cc6a2ac1487cc6fb30665ed7","modified":1700581396216},{"_id":"public/js/highlight/styles/an-old-hope.min.css","hash":"65be5a19ae19775e4872d411d99752e57f9f40b5","modified":1700581396216},{"_id":"public/js/highlight/styles/arduino-light.min.css","hash":"fd7940194f14afeb0f49ec08038582bda3196137","modified":1700581396216},{"_id":"public/js/highlight/styles/atom-one-dark-reasonable.min.css","hash":"c5d9f70a98a859937bb859bb6f14125708ab5ca9","modified":1700581396216},{"_id":"public/js/highlight/styles/arta.min.css","hash":"c21878eda3a7d58551d02dc090be7950232ff0f5","modified":1700581396216},{"_id":"public/js/highlight/styles/ascetic.min.css","hash":"774bd25b6a7155b6fcf724758ab81fadc029189b","modified":1700581396216},{"_id":"public/js/highlight/styles/atom-one-light.min.css","hash":"a0cb76ff3bbd0040fd846a5d62bf94fc40b0f06b","modified":1700581396216},{"_id":"public/js/highlight/styles/brown-paper.min.css","hash":"cbaf9c121b02c11d465ace09fe8180cd4a6f27a6","modified":1700581396216},{"_id":"public/js/highlight/styles/color-brewer.min.css","hash":"520804652cc3abc319c21acf04822d03cf310f47","modified":1700581396216},{"_id":"public/js/highlight/styles/dark.min.css","hash":"5ab9082a6fd29f7f8ffad02a606967bb841a2ab4","modified":1700581396216},{"_id":"public/js/highlight/styles/foundation.min.css","hash":"98ac4498ff65d61776485219fe3d13cb6b7b05a7","modified":1700581396216},{"_id":"public/js/highlight/styles/codepen-embed.min.css","hash":"9a7be471de0df66fe5c3ab38bbcf3026349ba78b","modified":1700581396216},{"_id":"public/js/highlight/styles/atom-one-dark.min.css","hash":"56dddcd32332b54853ba9eadba3c883f95f00275","modified":1700581396216},{"_id":"public/js/highlight/styles/default.min.css","hash":"9dafcb6d23472adb90f9c9f55bd9dbd590392953","modified":1700581396216},{"_id":"public/js/highlight/styles/devibeans.min.css","hash":"0ddec3b13da49dcd9fcee4eb9188674cfeb29629","modified":1700581396216},{"_id":"public/js/highlight/styles/docco.min.css","hash":"2076bc6b7adff7a6f582017d64a6ce9b66237c10","modified":1700581396216},{"_id":"public/js/highlight/styles/felipec.min.css","hash":"895b5d299601966ffdab0124e0d223f1f4693936","modified":1700581396216},{"_id":"public/js/highlight/styles/github.min.css","hash":"54b718c687ce8460e10d501c1eb53a8098942c1e","modified":1700581396216},{"_id":"public/js/highlight/styles/github-dark.min.css","hash":"a1ed034f5a2c76d6ada0af51dcb30e2e5af936a0","modified":1700581396216},{"_id":"public/js/highlight/styles/far.min.css","hash":"79ab1e13b8c641ab86ce1b636ba83b60b28a069f","modified":1700581396216},{"_id":"public/js/highlight/styles/github-dark-dimmed.min.css","hash":"8137fa6d839aec5d711a9e74f5be5d376f41798f","modified":1700581396216},{"_id":"public/js/highlight/styles/gradient-dark.min.css","hash":"280d83487b76156bb68c2b5089d253ac77030e36","modified":1700581396216},{"_id":"public/js/highlight/styles/googlecode.min.css","hash":"7c6570b385e09d5d77e4984d5c7150e6d607b2be","modified":1700581396216},{"_id":"public/js/highlight/styles/grayscale.min.css","hash":"3527f4d2eb324aa42f9ae426c4936fe8971bc056","modified":1700581396216},{"_id":"public/js/highlight/styles/gml.min.css","hash":"089e8aa0acb7a319043b93974516e9f7429f2eb1","modified":1700581396216},{"_id":"public/js/highlight/styles/gradient-light.min.css","hash":"55ae8dd088bb01f33908c9049aeef71e7be906a9","modified":1700581396216},{"_id":"public/js/highlight/styles/hybrid.min.css","hash":"9ab5c8a3effe9a0048b9e62ff2ddc30569e854e9","modified":1700581396216},{"_id":"public/js/highlight/styles/idea.min.css","hash":"41bbd30aedb7ad30461432f21967c44265ac67e3","modified":1700581396216},{"_id":"public/js/highlight/styles/isbl-editor-dark.min.css","hash":"edabeb353a051623980adea5c8fb9954e4d03bbc","modified":1700581396216},{"_id":"public/js/highlight/styles/intellij-light.min.css","hash":"eaf6a468491203fc9b1512f3c63be11b4ae94789","modified":1700581396216},{"_id":"public/js/highlight/styles/isbl-editor-light.min.css","hash":"49c3d979f6e0fb8e7be0f4ff12ad08c683d1cae4","modified":1700581396216},{"_id":"public/js/highlight/styles/ir-black.min.css","hash":"37eefcee4c4cb5e05049c51d4b614561956eec45","modified":1700581396216},{"_id":"public/js/highlight/styles/kimbie-dark.min.css","hash":"6c08f429eaaa7494b3ec158c6771409f4f1d8ca1","modified":1700581396216},{"_id":"public/js/highlight/styles/kimbie-light.min.css","hash":"1c2f87ce01e6bbf7f08b7fcf83fab578737aa90e","modified":1700581396216},{"_id":"public/js/highlight/styles/lightfair.min.css","hash":"5e558dbfcf4779bde03532acc46b660391d91c63","modified":1700581396216},{"_id":"public/js/highlight/styles/magula.min.css","hash":"232985ea0caf14c3a071480baaf02500629b1572","modified":1700581396216},{"_id":"public/js/highlight/styles/lioshi.min.css","hash":"b0ef1ffaf274beee22dba96a0c4bee9fde8663be","modified":1700581396216},{"_id":"public/js/highlight/styles/nnfx-dark.min.css","hash":"6c9250478c5a85f477fb7946e43aff6d4ec9b417","modified":1700581396216},{"_id":"public/js/highlight/styles/mono-blue.min.css","hash":"72888c2f9ade3b98cff907adee5d4cff43a6826e","modified":1700581396216},{"_id":"public/js/highlight/styles/monokai.min.css","hash":"2ccd97a7d5e0d9f1a251a2139ed2bbc42a4521db","modified":1700581396216},{"_id":"public/js/highlight/styles/monokai-sublime.min.css","hash":"8a5d18f7ae218a0de0de283a0766e0c284d4cfba","modified":1700581396216},{"_id":"public/js/highlight/styles/night-owl.min.css","hash":"3ccb9e3e12d231e6a16d905a539a72a1b8b323b3","modified":1700581396216},{"_id":"public/js/highlight/styles/nord.min.css","hash":"ed022587efe0b50f9efffcb97e9923aa87dedef0","modified":1700581396216},{"_id":"public/js/highlight/styles/panda-syntax-light.min.css","hash":"ed760498e7d4e5351209670a4e77b149785aa3c5","modified":1700581396216},{"_id":"public/js/highlight/styles/obsidian.min.css","hash":"d90bd36c085b41222fb1fadb5f87150d57fcd620","modified":1700581396216},{"_id":"public/js/highlight/styles/nnfx-light.min.css","hash":"f3c5480f2f29f55fa358ad2fd60cfcc0dc6b4b4e","modified":1700581396216},{"_id":"public/js/highlight/styles/paraiso-dark.min.css","hash":"05428cc64880ee464a334ca343a845780b828326","modified":1700581396216},{"_id":"public/js/highlight/styles/paraiso-light.min.css","hash":"16887f76435d97618839f6554a5ea0b911371c03","modified":1700581396216},{"_id":"public/js/highlight/styles/panda-syntax-dark.min.css","hash":"2b3851620dbaea9929876092d0a667a77f45b000","modified":1700581396216},{"_id":"public/js/highlight/styles/purebasic.min.css","hash":"cceed4931efba33b947e07dde994b037991161a2","modified":1700581396216},{"_id":"public/js/highlight/styles/pojoaque.min.css","hash":"154b01709684ebecf1314590fee0374644ad4636","modified":1700581396216},{"_id":"public/js/highlight/styles/qtcreator-dark.min.css","hash":"015e3e981d7a268fd1389b13637b97139f394505","modified":1700581396216},{"_id":"public/js/highlight/styles/school-book.min.css","hash":"1ea765dbe18936ebef7b028cfef19ce45fe3ed8b","modified":1700581396216},{"_id":"public/js/highlight/styles/qtcreator-light.min.css","hash":"0b7004cb0cac17024ac1ff264c3a71a67e494219","modified":1700581396216},{"_id":"public/js/highlight/styles/routeros.min.css","hash":"ad833a4838155353cc128fdd7b903fd321e067c1","modified":1700581396216},{"_id":"public/js/highlight/styles/rainbow.min.css","hash":"54e7c56ad5c071e238655eb242804730ab95d6ea","modified":1700581396216},{"_id":"public/js/highlight/styles/shades-of-purple.min.css","hash":"bb7ec502691590f7c0e5e1a12ae62988885eff88","modified":1700581396216},{"_id":"public/js/highlight/styles/sunburst.min.css","hash":"5e58559e771e295917827b053fc4127f4bd36925","modified":1700581396216},{"_id":"public/js/highlight/styles/srcery.min.css","hash":"bd439806670e65a25696e666fc74624d97e2cdda","modified":1700581396216},{"_id":"public/js/highlight/styles/tokyo-night-dark.min.css","hash":"e33c2450f134d68d048edd4c5c9ced77f58e0374","modified":1700581396216},{"_id":"public/js/highlight/styles/stackoverflow-light.min.css","hash":"f78d859c41720a2322681228eed24f15c2139e44","modified":1700581396216},{"_id":"public/js/highlight/styles/tokyo-night-light.min.css","hash":"3fcd96f027e14f80daa2869100ce9b66decddfe6","modified":1700581396216},{"_id":"public/js/highlight/styles/stackoverflow-dark.min.css","hash":"ada69847e1bf540b1eb72100850898b503e6e1f8","modified":1700581396216},{"_id":"public/js/highlight/styles/tomorrow-night-blue.min.css","hash":"abce92baef3b9e7279767bb678ae3167c2e5a8f4","modified":1700581396216},{"_id":"public/js/highlight/styles/vs2015.min.css","hash":"fc8e8571ee0e49b7fc2c994696126daea49d19bd","modified":1700581396216},{"_id":"public/js/highlight/styles/vs.min.css","hash":"d8b0e930e12e1d6120c7c572697193b2bd0f6412","modified":1700581396216},{"_id":"public/js/highlight/styles/tomorrow-night-bright.min.css","hash":"3f40ec130d6f419d1aedac1de63a2c5b06541dff","modified":1700581396216},{"_id":"public/js/highlight/styles/xcode.min.css","hash":"e7f0e58729d994c33e4958afe3f545d1e7372d4e","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/3024.min.css","hash":"2b6c6a25ebf0b308744d5e204111f22696c0cd07","modified":1700581396216},{"_id":"public/js/highlight/styles/xt256.min.css","hash":"ef2f1defc190c5466b47dec6928325e13787c5ba","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/apathy.min.css","hash":"65cc6ace938a696a68d18d7c321bb77975919517","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/apprentice.min.css","hash":"590e9151a831e7d4f5e5e2a9a74c482dcf36b4fb","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/ashes.min.css","hash":"8193ded0de98942307c614fbd74eb4637187c610","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-cave-light.min.css","hash":"edf0891236955b32cd6a109d375e9af84efb9159","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-dune-light.min.css","hash":"c727191d17f5444e2c15b75b02e4f982aeeedccc","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-dune.min.css","hash":"1bec22b0e97a47861fb56495967b9efcac393624","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-cave.min.css","hash":"29aade98e27b6c678bced60d8ea66f7251b035e6","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-estuary-light.min.css","hash":"746f569947009fb223648cacf7606dd47dbf7f21","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-estuary.min.css","hash":"f39d1d965e0fb7474e1c393a0e1eca7a82f03810","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-heath-light.min.css","hash":"894026765303f5b26ecc31b53d041049f78527a7","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-forest.min.css","hash":"f00920703e2ca56bcb2512a3b5d59c186e8a469e","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-forest-light.min.css","hash":"ce9659e72928f42d815b9a851b4969dcf4cc41e9","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-heath.min.css","hash":"10794ec1074f6ec81761bc50ac69da9ed4b12941","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-lakeside-light.min.css","hash":"eb6033cf2e30f09be932f04ac90b851c2ea14072","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-plateau-light.min.css","hash":"b4c4e9283282717cda5f147c6a0442d95eccd5b8","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-lakeside.min.css","hash":"606dad21a00dd644a9ad732b4f53e305752e27c8","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-plateau.min.css","hash":"f04c508b4850d6b0ec1ac651cdfe138e8f24e5c4","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-savanna-light.min.css","hash":"2cb68d6a4cceb500bafc3c5651755647fd1df16d","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-savanna.min.css","hash":"9a648aa3f8390ddb26e5147d59f62793ef067077","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-seaside-light.min.css","hash":"e1a3cb13223199753ed9740748530cd9e5af6d93","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-sulphurpool-light.min.css","hash":"9e9a09a84026dfb3652a59c551c421cd62c358a3","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-sulphurpool.min.css","hash":"39c82fb9548139f1c753f4c6d022ee06af1f0f4e","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atelier-seaside.min.css","hash":"d086d7eeddfb80e64ac70a227bd03166cc81946c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/bespin.min.css","hash":"8b303707bfc06bccd059723e07f6d3ece17cdbbf","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/atlas.min.css","hash":"1a7c6b6e21be097dc9dce8319cee65dc7c9f8e47","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/black-metal-immortal.min.css","hash":"3a04b344f11b1efe22d32375852b627666570281","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/black-metal-dark-funeral.min.css","hash":"2028edfeff7f673ba7e869b2a0702332771b97a4","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/black-metal-gorgoroth.min.css","hash":"cd78458e263cb7008aa901bdfd4072997999c18c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/black-metal-burzum.min.css","hash":"3fa25771092109b9330e0c14d47af4a2948a46f2","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/black-metal-khold.min.css","hash":"f1a31fbff96198f6faa219263f606ff74ff9f4a8","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/black-metal-mayhem.min.css","hash":"37fb5b649c0a6efe36df7f33748fb9497679c8ca","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/black-metal-marduk.min.css","hash":"3dc49125d84d1784f07bf83f732b34a773c66517","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/black-metal-bathory.min.css","hash":"623f7e28ecae4367c6a7e18c024cf3071204b123","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/black-metal-nile.min.css","hash":"254192329e5ddf51c723be53f14bad43427e2502","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/black-metal-venom.min.css","hash":"80d2797e7e7a689f1810a972fd78321a49ef85f5","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/black-metal.min.css","hash":"ce8b0740a175e07ae70c343b4b1d8e7e31142cb0","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/brewer.min.css","hash":"d6d718e569c5b6c5e0ba512a59a05148c1442fe9","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/bright.min.css","hash":"6beb06d1e3cfea9293f11cbbb375a4a3db0338cf","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/brogrammer.min.css","hash":"349e50e05ce223ac30b494d5186bbc5f934149bc","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/brush-trees-dark.min.css","hash":"ab1f5e77e1d0b71f057c347ea4be03081a3262aa","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/chalk.min.css","hash":"0326e5ebebdb6121010369233f18c0cd0ac7e24b","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/brush-trees.min.css","hash":"9fa06dbbce4370f0f51b43aa35cdd5c6f44e508c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/circus.min.css","hash":"7b219c9aa01c777d55f34a2f25984557a82dfe66","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/classic-dark.min.css","hash":"f59a354efc15ea680853d6982b8c7861ca728f28","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/classic-light.min.css","hash":"bd674c8c0c410e80545d0a8bfac0fbdb758d9421","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/codeschool.min.css","hash":"caf9edeba7ccd187f91d15e13c66e618d70e029c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/cupcake.min.css","hash":"d5250bbd3f0cf0f9d886ad18cf870c6f2cf25b79","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/cupertino.min.css","hash":"595f3cf2df83bad1c55bbe061c9bbe53f61c051c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/colors.min.css","hash":"2a60c4d1b5e9f8232ce970f7baf8eba0c19ea00c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/danqing.min.css","hash":"a653d5344188644208168ddf888df95734fd8376","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/darcula.min.css","hash":"5543c43b65b7020513d1d847418ba7b5a24cf692","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/darktooth.min.css","hash":"3dd57bebd721f61081c6b66fd4cca9390a8e2c62","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/dark-violet.min.css","hash":"b844178c655a706544105a4feeb43c5520bb95ca","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/darkmoss.min.css","hash":"e9b88f0d646d2bf267551d1350076ff8fd78f448","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/decaf.min.css","hash":"429c0a8de6fad84db26ba42a01dfcb9bfea19961","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/default-dark.min.css","hash":"2d336859aa28a61179edf52ce9e24838ee8e03af","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/default-light.min.css","hash":"195419c5211bd73d29bf001c3478c992bbc6ac0e","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/dirtysea.min.css","hash":"8e00ad69cb202bc25566e94022fa8934b8dacd5a","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/dracula.min.css","hash":"f059ea8a0bfa5c1252582f1b453293524a23d914","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/edge-dark.min.css","hash":"d8f1c0aa07044605be978c7522dbd7aaf5db6a99","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/eighties.min.css","hash":"e36e93c85baec8573ab7f17493c52cd8ab8175e4","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/edge-light.min.css","hash":"33efb57ee2ccda693a0299203dc2c05539877fe7","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/equilibrium-gray-dark.min.css","hash":"e330d31898800966bf846d1cff20add7e48a93f6","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/embers.min.css","hash":"6fa920dc4b09e2efd7ad04a10541574a226d5c6c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/equilibrium-gray-light.min.css","hash":"3e7cbf157b6bcf481f1d925336ae95d0bc3d8726","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/equilibrium-dark.min.css","hash":"0379378c73203d337c861cabb670b6194a882b29","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/equilibrium-light.min.css","hash":"60b6487151a35990b1e3e6abaa6a94b1fc07b865","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/espresso.min.css","hash":"7177ee411c44489feb6c037470a1187f15c035b1","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/eva-dim.min.css","hash":"eda637cf44b40c354b6b2be1444f7490d61fb294","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/eva.min.css","hash":"de80e433a23b29bb67d11e3bec9ce855c0850f11","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/flat.min.css","hash":"eecc423e68e7124b31d2638d6264624c7f1be74a","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/framer.min.css","hash":"b097aee0719bc6fb756120e388809315f65ae40f","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/fruit-soda.min.css","hash":"8dac460b1f689265cb8861f9eb73750bfb81c461","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/github.min.css","hash":"0be0372ed774893672c2c02720d1ebe6a6589def","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/gigavolt.min.css","hash":"229c5ec67bcac715e9e71965ba6725a8d5e996f7","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/google-dark.min.css","hash":"2d8153415989a0b2830d2ded84a0764615379e9b","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/grayscale-dark.min.css","hash":"f1d9e3a4a7ff58a3fac751e85d8d3ab7d73bba7f","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/google-light.min.css","hash":"010ddde835befa08e354f157df69909750ee0f63","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/grayscale-light.min.css","hash":"c551ee72c76013b69421847409c7dd9352012863","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/green-screen.min.css","hash":"c5784f6a24a46f7de5eeef78d365b75e4e7bfb01","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/gruvbox-dark-hard.min.css","hash":"5485830ad496cabf1e5208a548216f5a669cfd57","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/gruvbox-dark-medium.min.css","hash":"56833f57398d540793131f126c10052b804cebf7","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/gruvbox-dark-pale.min.css","hash":"2583ff8e92c047a8f48569835d9fdf1ab441183b","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/gruvbox-dark-soft.min.css","hash":"c062ec093316c6878d0cecb6dc6b38bdab0437cc","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/gruvbox-light-hard.min.css","hash":"b66165f61348744c44583e14c47e5027025a0643","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/hardcore.min.css","hash":"e07bcad93fd3e09858164a9034fd4ee9d8e4a445","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/gruvbox-light-medium.min.css","hash":"7da913e6e5682f6065563ef89245d2185b9571ae","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/gruvbox-light-soft.min.css","hash":"4e8749a0d405e5c51cbe29b1f8b49fc0082664a9","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/harmonic16-dark.min.css","hash":"8589158c51e6cde7c3e2def5c31a24619512ab4d","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/harmonic16-light.min.css","hash":"f1c18cd160a5a1c6a26358f3eb5652febef84e0d","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/heetch-dark.min.css","hash":"24d460581251402ee0d66db10386e9de21f85e91","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/heetch-light.min.css","hash":"4d1842be216631a59966c7ad7194d55672a58fe2","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/helios.min.css","hash":"1605744136df8e670149f1cf6179d176eea6a5d6","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/horizon-dark.min.css","hash":"9ff193dcd091eef32342561f2f2a2e2d286821fa","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/horizon-light.min.css","hash":"06a405dcc9d1d5581485602bc2643665f035590c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/humanoid-dark.min.css","hash":"424a3d366d3c1165e11bd947755af65de39311ff","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/ia-dark.min.css","hash":"3eb84c418cb6bd0de23d1fcb3182f22f40bb3baa","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/hopscotch.min.css","hash":"32ff3b51527db61e9bb76acfeccf0db370f1647b","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/humanoid-light.min.css","hash":"f71b5fac55d8a2c652d71fce475ccd944a4baa46","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/icy-dark.min.css","hash":"276ed41177d8edb91f255de44653856feed9dbab","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/ia-light.min.css","hash":"09b6af73916508c2f88ca651c14e728f4e2cc076","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/ir-black.min.css","hash":"8f617ca204d423bda4b077c82488695610b8edbc","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/isotope.min.css","hash":"ab6d557428f635b58e27591defaeb730b4c4bf24","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/kimber.min.css","hash":"2f01e1ff280558a9f3bc4c5696fc27d164ab8699","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/london-tube.min.css","hash":"67fdb61219dafc05bf8811842a947ce0b28c3cfc","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/macintosh.min.css","hash":"d7bc98f2b0aed6fb89e0e4f0087c91b6199d3dbc","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/marrakesh.min.css","hash":"0c304320602c6cc49a94e9824563679dce78792d","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/material-darker.min.css","hash":"b6ba949cd2d382e6f3830c479c35b715607e44a2","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/materia.min.css","hash":"d8bdc0a5958e1742e16ac8499cafa206120f1e64","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/material-vivid.min.css","hash":"4196f93e5e0743658dc3eabcf632f1000b623735","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/material-lighter.min.css","hash":"7f52a3b14ca47ca246f42f9bc14d96ddc37c9759","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/material-palenight.min.css","hash":"09f509bf75cbb9748df91baa906a98bdf27d9731","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/material.min.css","hash":"be11c5b24b52528719376881a0d308cf5774b533","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/mexico-light.min.css","hash":"22140bcb2f7af83479abde465f799bf674cb709d","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/mellow-purple.min.css","hash":"414e151ef01e4f86ebab490c2f67d9de593f85fc","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/mocha.min.css","hash":"1b79c5d144a6de7c42472b34c0ec613957dcbefc","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/monokai.min.css","hash":"98ad13552be2857071598173a128608dcdfa0a94","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/nebula.min.css","hash":"d3cce5341d6f0ac8ccd4c8cdaf07028ed6b5f31e","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/nord.min.css","hash":"4759d44eec55b3baf8d2b61b1df69dde25fac39e","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/ocean.min.css","hash":"b69b8d154934bd8906de7a718888dbd7c6dd8aff","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/nova.min.css","hash":"b0c27a5be896ca0a0392890c7a3eb95b9ce83dc2","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/one-light.min.css","hash":"8511afec97a53262dbc24e58425a83fe74abf11c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/onedark.min.css","hash":"e5d0c3832e829db406193c4d42cc1c3d75dff600","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/oceanicnext.min.css","hash":"9449036a22aa9a0e3a1f15b9acb9707cac8e9bec","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/outrun-dark.min.css","hash":"675c20d28b46290eee73b4fc3118614d40bfe410","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/papercolor-dark.min.css","hash":"6e1501ee21fd9e28e8e10475d5649580701b61d1","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/paraiso.min.css","hash":"d959f2daffcafcf6454ad83135fec3df25db7007","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/papercolor-light.min.css","hash":"6b7f1eef183982569b50fca72548adc938c5f26a","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/pasque.min.css","hash":"f47b5eed9d29a1516004ebbe51c16df6f4dfcb84","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/phd.min.css","hash":"aeb53d584d0348f1d213fcb8b8e8a18e14344800","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/pop.min.css","hash":"96c81ba51e8566786eec389e90d1fb783453d42b","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/pico.min.css","hash":"30b8b7159ac8886c75dfe5dec1b61ba86ba1c2be","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/porple.min.css","hash":"a528df7f3bd5ca446331d6662eba4220382408e8","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/railscasts.min.css","hash":"eb035c0170df98b3d3b1196d141eff728fc67b6b","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/qualia.min.css","hash":"fc8c0d6277e4285e216529ec14bfca26d5c275a1","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/rebecca.min.css","hash":"99aaa67362cb1550c9d4dd4d47ca1d07af93df4f","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/ros-pine-dawn.min.css","hash":"e488897d53e8dc0d6457e0981f8f6bded8b78f04","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/ros-pine-moon.min.css","hash":"679bba0f44c93781b94ee69879858ddceb6c0c9c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/ros-pine.min.css","hash":"a0bb25e24c8114d488b555a23068f942fee1a5cd","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/sandcastle.min.css","hash":"f69a837c8483b03df6eeabe85f902a90c508628c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/sagelight.min.css","hash":"df87908ff53b6a7b7763092eb3b14d52a8df57dc","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/shapeshifter.min.css","hash":"984de15ca0838413578efb140e4623f77610463a","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/seti-ui.min.css","hash":"1909cd661999e7f990f8caa5d7b16a66823342d5","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/silk-dark.min.css","hash":"4846822c85f6e02c91e30d335b543666cfb3cebe","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/silk-light.min.css","hash":"c2b4dbfd0396593993189b999e6fb85d8eb68ce7","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/snazzy.min.css","hash":"b5d208ed46cfac312f0078201b66c4bcf4edf3dc","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/solar-flare-light.min.css","hash":"7918e394a35d1d20a7bda2845f1864531ddf2fb5","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/solar-flare.min.css","hash":"b1b4fb9382f539b85b1669876dcf7d8b5e344735","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/solarized-dark.min.css","hash":"3331578390ec3d2d08f7521e81dff825f4b50715","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/solarized-light.min.css","hash":"30abd96881de07ba334868637745395ab5d6f08a","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/spacemacs.min.css","hash":"899807f4de03c6a12cfed643e7867e0094af0299","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/summerfruit-dark.min.css","hash":"c786a2ff71d77b36d2b2deb9ea5bdafc928c4da0","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/summercamp.min.css","hash":"56a6e5f113e5ff63140f21069afceb42c2564394","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/summerfruit-light.min.css","hash":"b397c6ea94285d1059e0d5f11f05289d509832d9","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/synth-midnight-terminal-dark.min.css","hash":"ba8288b4b755f6411d55a16b110c6b480574e5b0","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/tender.min.css","hash":"5471ead0a9125e79e8de206b53ea3e165bfc8419","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/tomorrow.min.css","hash":"951f9fd73a9e85ffd09c2318073a5fc568c8c53d","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/synth-midnight-terminal-light.min.css","hash":"ada5d8f3430cf29e06ba7de8255ad5fb253b3d9c","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/tango.min.css","hash":"63775fea5e3edecb1334244d759b3b51855aa94a","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/twilight.min.css","hash":"a043d83ecceefeeec888b057eb2e4ec473090701","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/tomorrow-night.min.css","hash":"f108341a9c85ec38890f15e19df69fa5339fdd5a","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/unikitty-dark.min.css","hash":"b7551826393c9fb893ccdbc26331ba63580ec88f","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/unikitty-light.min.css","hash":"611934d10f720b7f781709790aa1862747a2fcdb","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/vulcan.min.css","hash":"5a47539368ea62e096cbaba27677ee90431ad4ed","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/windows-10-light.min.css","hash":"049b8a66c0f9f74a8bbbf0f40c7c29560d8e727d","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/windows-95-light.min.css","hash":"8e54d927f04a400cffd059230f905914d7cf9ac4","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/windows-10.min.css","hash":"0db5cc58c618c583b6030794ad353ce4a8261643","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/windows-high-contrast.min.css","hash":"1eae1776c8444c598521f47cfb445bf6753affce","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/windows-high-contrast-light.min.css","hash":"cc9b98a27f1ba49825d931e5b8103887f758a797","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/windows-nt-light.min.css","hash":"8787f875b49fde0402818e457bd48864f87e04a8","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/windows-95.min.css","hash":"7afb9eb31ef567735d3a1ec418a65be1c225aa4d","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/windows-nt.min.css","hash":"b551e3b2e2214083d4ce6b2d824810d6e91a6cd8","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/woodland.min.css","hash":"6b612b12f27af1a4d4eaf9461a49c8cce72b3e0a","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/xcode-dusk.min.css","hash":"6522364448934cedbf185589a92419cf4f2f7f96","modified":1700581396216},{"_id":"public/js/highlight/styles/base16/zenburn.min.css","hash":"df5d73017c2177ea3dfc02c17e7d64a2c72e19b4","modified":1700581396216},{"_id":"public/js/highlight/languages/apache.min.js","hash":"aa72c9430c87872e883a7a08f6d657f42b71ccd0","modified":1700581396216},{"_id":"public/js/highlight/languages/cpp.min.js","hash":"0b8ec2267399334eb821991049158c9112ebef79","modified":1700581396216},{"_id":"public/js/highlight/languages/bash.min.js","hash":"1bcc2708260fbef636b0b4b29025de1f67c1f4c5","modified":1700581396216},{"_id":"public/js/highlight/languages/glsl.min.js","hash":"806cbaf8a59003fb90bc214de54f83f2d5c99d69","modified":1700581396216},{"_id":"public/js/highlight/languages/css.min.js","hash":"ff03d6eb780025823b1e0136ddbe4ecea9f96043","modified":1700581396216},{"_id":"public/js/highlight/languages/csharp.min.js","hash":"ae7362eda4237d3be4716b629c11e25dda3f7523","modified":1700581396216},{"_id":"public/js/highlight/languages/javascript.min.js","hash":"4d0a58536910830b37f6fc308fc09fbfaeb35294","modified":1700581396216},{"_id":"public/js/highlight/languages/java.min.js","hash":"3bcab8df828c96fea20fc0b0fb2cc721ca553838","modified":1700581396216},{"_id":"public/js/highlight/languages/go.min.js","hash":"8083d0406e8302d02666436f981cbe5e625bac4a","modified":1700581396216},{"_id":"public/js/highlight/languages/ini.min.js","hash":"71a9d987c6de9642735433a258323e874bbce01d","modified":1700581396216},{"_id":"public/js/highlight/languages/http.min.js","hash":"1a6ce813b982701c19e72e80620d80d17179b171","modified":1700581396216},{"_id":"public/js/highlight/languages/json.min.js","hash":"475a21f3ebe8a2851287758e30f20bdb1cfc6ab3","modified":1700581396216},{"_id":"public/js/highlight/languages/less.min.js","hash":"d8dde07b62c91b57b445cf081ebbe524d17be917","modified":1700581396216},{"_id":"public/js/highlight/languages/lua.min.js","hash":"b1c62b503ddd68603647569305c5434c194f3966","modified":1700581396216},{"_id":"public/js/highlight/languages/markdown.min.js","hash":"39e3cfa22d44d96d5e803103099f51200f46d4a1","modified":1700581396216},{"_id":"public/js/highlight/languages/nginx.min.js","hash":"3858bddc87462d913822e1d392ab8c784dbb54e0","modified":1700581396216},{"_id":"public/js/highlight/languages/php.min.js","hash":"3635d4bc114e327b4aa361d5e21203d5fc4e32d5","modified":1700581396216},{"_id":"public/js/highlight/languages/python.min.js","hash":"f7c304c56d879ace3965ec0ab574a1fcab16a784","modified":1700581396216},{"_id":"public/js/highlight/languages/rust.min.js","hash":"37f2e093af1047fbd19b1bb3cf501aae9e821b24","modified":1700581396216},{"_id":"public/js/highlight/languages/scss.min.js","hash":"b3f98d42a6a511e0900beae90203daf94831e7e3","modified":1700581396216},{"_id":"public/js/highlight/languages/sql.min.js","hash":"97aa1e1e30cb02f1aabe6474e5bed9ba9073847d","modified":1700581396216},{"_id":"public/js/highlight/languages/shell.min.js","hash":"0f6a2aacb071dff4ea231ef4e209aac76e2286c9","modified":1700581396216},{"_id":"public/js/highlight/languages/typescript.min.js","hash":"6acb91fb781c6fc6ac382c566cb51f1e171a28aa","modified":1700581396216},{"_id":"public/js/highlight/languages/stylus.min.js","hash":"689725ddc0ee6c67d39a1d5500b8c0b572c6876d","modified":1700581396216},{"_id":"public/js/highlight/languages/xml.min.js","hash":"ddee5c5ec798232058f23309023884aaae661485","modified":1700581396216},{"_id":"public/js/highlight/languages/yaml.min.js","hash":"786b7f0e48747f7bd5660fb5ad371e23c1197901","modified":1700581396216},{"_id":"public/imgs/default-cover.jpeg","hash":"7c1ce642902faace50a6042fb603c4c4bf8df275","modified":1700581396216},{"_id":"public/imgs/bg-cover.jpeg","hash":"af30216fc80a250f79550b0968a9891f3a2518a6","modified":1700581396216},{"_id":"public/music/八连杀.mp3","hash":"cf8dc44d2157f30186f9bfb81d9618918eaf0a55","modified":1700581396216},{"_id":"public/imgs/log/coffee.jpg","hash":"e55ce98b933efffa738fbfc419e5cc2faa8ab4f1","modified":1700581396216},{"_id":"public/music/kabuda.mp3","hash":"800ac10c0c8db3db2751e4a8c1eef7424b149c74","modified":1700581396216},{"_id":"source/_posts/C语言练习7讲解.md","hash":"0822da96ed5d660a653796c292660dcb209fa3f9","modified":1701091361862},{"_id":"source/_posts/C语言练习7讲解/22cf517c3686de1119cf1f156160bd4.jpg","hash":"35301dbbba86602eeffc97fcade1eed91dac7de4","modified":1700828403550},{"_id":"public/2023/11/24/C语言练习7讲解/index.html","hash":"7543a7cd16e58f1376125013cdc82f4be616ada7","modified":1700834493602},{"_id":"public/2023/11/24/C语言练习7讲解/22cf517c3686de1119cf1f156160bd4.jpg","hash":"35301dbbba86602eeffc97fcade1eed91dac7de4","modified":1700833274983},{"_id":"source/img/22cf517c3686de1119cf1f156160bd4.jpg","hash":"35301dbbba86602eeffc97fcade1eed91dac7de4","modified":1700828403550},{"_id":"public/img/22cf517c3686de1119cf1f156160bd4.jpg","hash":"35301dbbba86602eeffc97fcade1eed91dac7de4","modified":1700834493602},{"_id":"source/_posts/findstr.c","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1704423883487},{"_id":"source/_posts/axis.c","hash":"bcdf4e8685217cb4be9c708470ec1a1040929d9f","modified":1705043355819},{"_id":"source/_posts/C-premier-plus-Chapter-1.md","hash":"236ae0847a55dac705b93974e2880fd81bab478a","modified":1701145413603},{"_id":"source/_posts/boyfriend.c","hash":"f8e1f2bf55858fccc4eb4c86354c3b6d1736a268","modified":1704972488177},{"_id":"source/_posts/C-premier-plus-Chapter-2.md","hash":"d300cd24eaa5e751b3512910828b00bcd9f0269d","modified":1701149339085},{"_id":"source/_posts/axis.exe","hash":"a58750088c4001ecdfb8247e2547fade6ba2b753","modified":1704860471071},{"_id":"source/_posts/cinema.exe","hash":"a172ced73e2b8dddb209ed700464660c0d7fbdb6","modified":1704976493276},{"_id":"source/_posts/cinema.c","hash":"e278e7264432468aa4cbc0cd555ba3778483fbb5","modified":1704976489103},{"_id":"source/_posts/fenban.exe","hash":"5ce3535f0e8c8c89c24c0429539d64e8bccdd7e5","modified":1704984271573},{"_id":"source/_posts/jiami.c","hash":"3c950f8851191b0172eb8a69b6878ea261c0151a","modified":1704697861484},{"_id":"source/_posts/fenban.c","hash":"b5cf13b6ecb3277cf01713b1c00c4fb503adeb19","modified":1705043347410},{"_id":"source/_posts/boyfriend.exe","hash":"b6de8108a4f163f2985d1f590cff5561c0fa29c5","modified":1704972494480},{"_id":"source/_posts/maxmin.c","hash":"4185a3b67644e432f89491c027bd4abe6ae4e8fe","modified":1704537763884},{"_id":"source/_posts/psort.c","hash":"6a79e512cb7996a79d17b9977e33399ddf7e394e","modified":1704981429112},{"_id":"source/_posts/jiami.exe","hash":"78371cb6b6d6ab6124f03f532f9d87e693a4d889","modified":1704697865278},{"_id":"source/_posts/mypow.c","hash":"90ce85c97fdb1715c0c10987f616ba073fe98f20","modified":1704719667709},{"_id":"source/_posts/mypow.exe","hash":"08a57c0746390dcd870bfc77efa4491dab4667e7","modified":1704719671297},{"_id":"source/_posts/maxmin.exe","hash":"984ffad9facef0b55e3bd8a6413ae27c6b3e5ea3","modified":1704537638344},{"_id":"source/_posts/statistics.c","hash":"1efe0d46ef697a0a1afe55644afe1e20062974e9","modified":1704966279021},{"_id":"source/_posts/psort.exe","hash":"52f355487bb28605cae5269bd7e5b86470be2e93","modified":1704981433581},{"_id":"source/_posts/qimo2.c","hash":"c48ba1fc9f124d85f8f66738b60ed85565dfac88","modified":1704723827753},{"_id":"source/_posts/teststr.py","hash":"97c2d412fb584684039ec1fc679b35fff36fff2c","modified":1704511050587},{"_id":"source/_posts/statistics.exe","hash":"8e5cf6031660cae30a338b8e567e14a660db65d4","modified":1704966281348},{"_id":"source/_posts/qimo2.exe","hash":"865b4d20701e5b4c5bdbb9d0bd5f34737a999f49","modified":1704723833684},{"_id":"source/HTML/girl.jpg","hash":"5c4a03fe07bab239d110d66c666f4b3a83aee62e","modified":1692185527326},{"_id":"source/_posts/xiaoshu.c","hash":"3c4cee176fc30508c8fb47c34f81637bc95f143e","modified":1705047050030},{"_id":"source/_posts/xiaoshu.exe","hash":"487837c0464e45b7ddb781e998ef3f0b3fa6e71b","modified":1705047052891},{"_id":"source/_posts/算法学习：分治法中的二分查找.md","hash":"1154f63b0a8ce8dd39463c03c2190547132703cf","modified":1705933230246},{"_id":"source/_posts/字符串函数.md","hash":"cc7a35bd5374e58a10ef09dc220196ffc4397563","modified":1704335862828},{"_id":"source/_posts/算法学习：归并排序以及插入排序.md","hash":"29ec33a5eaa86d1a690e5e04d711593833e1f50a","modified":1705714795852},{"_id":"source/_posts/如何使用结构体.md","hash":"28e57c27cb4e6c90aeeabbf4b06fb7a28c767729","modified":1704336464672},{"_id":"source/HTML/index.html","hash":"6498be8864137649cea372affc6e3993ded1a432","modified":1705934029030},{"_id":"source/HTML/girlsit.gif","hash":"4207d0f6e5f8045236f6c69f23e65fe5d024f8a4","modified":1697466165000},{"_id":"source/_posts/高等数学小整理.md","hash":"5f29df716008b75b3cb059e76cab51490305f75f","modified":1701090960831},{"_id":"source/_posts/算法学习：解递归式以及渐进符号.md","hash":"6de510b0ac5e382bb158955ef56c3e698cea769f","modified":1705764776592},{"_id":"source/img/C67.png","hash":"adaf3083d3084cf1c2e9c2bb325c327c1a377f59","modified":1702164612665},{"_id":"source/img/C99sup.png","hash":"0055cc389cd2c3662ecdfaac4419162f2d4f91e1","modified":1702169430806},{"_id":"source/img/Chapter1.3.png","hash":"1fa97ced15bb93afe0bd566f36f1d301e5b94a45","modified":1699665801641},{"_id":"source/img/C99.png","hash":"b1e0dc0118c6bf06af965b98ade426380f023d18","modified":1700463420852},{"_id":"source/img/C992.png","hash":"04485e02115ca4660bf9946987e3d7da90556682","modified":1700463437298},{"_id":"source/img/Chapter1.6.png","hash":"baee1266a1c4bd093858cb6b714fc5ce0229d9d1","modified":1699668086216},{"_id":"source/img/DefinenInitial.png","hash":"358f626dadde0ee97e3a1f72f3b511d2f3baf7e8","modified":1701489562342},{"_id":"source/img/ErrandWarn.png","hash":"53fe6ea633c6138e7d8e4c26dda127e2e28f2d2b","modified":1701232371651},{"_id":"source/img/Figure3.2.png","hash":"3bb9fae9abb4845b3103f2f6d27592a5412684c9","modified":1701407763847},{"_id":"source/img/Figure3.3.png","hash":"c912806a797ec62de153711a711567db5579ee1a","modified":1701410312464},{"_id":"source/img/Figure3.6.png","hash":"b0cc712c615769a4e3efc7d737e450042b5a2429","modified":1702165019789},{"_id":"source/img/Figure3.5.png","hash":"dcff6076e956c09f7675a42f4726d176f86bccdb","modified":1701913868095},{"_id":"source/img/INF.png","hash":"1fc8eddcd6786431426ba4b9dc0fd4a1394136f9","modified":1702356204141},{"_id":"source/img/Figure3.7.png","hash":"98dbbcacf3fa739d7f0b2b82453a50c476ba25cf","modified":1702268797732},{"_id":"source/img/Identifytypes1.png","hash":"0e04ea9a7930f4ffbddfd565c570d50eb850caee","modified":1703117790079},{"_id":"source/img/Identifytypes2.png","hash":"7ece2917a58939c33b14502eeca7f2b44100e0aa","modified":1703119747777},{"_id":"source/img/Listing3.10.png","hash":"b3ff13050dab0afd957ba36a55c12d84efbf4090","modified":1702687115479},{"_id":"source/img/Listing3.3.png","hash":"c275b4512c1e629771215e18749ec158ba2f2721","modified":1701566524755},{"_id":"source/img/Listing3.5.png","hash":"0ac5f463b7a03977d3991e43f93ddae55fba1c08","modified":1702016480998},{"_id":"source/img/Listing3.2.png","hash":"5f4802c5cca99698cf8f6a10e705923c4464c521","modified":1701490552275},{"_id":"source/img/Listing3.7.png","hash":"6cc2ac2f81853848207505d8e98f711044a82c4f","modified":1702355341604},{"_id":"source/img/Listing3.9.png","hash":"a7218454007872178d4f4182d62baf3886ff3dc1","modified":1702685691486},{"_id":"source/img/Olist3.1.png","hash":"3c1443d9c711ea004034ebd6cc9d4139ea60bf3d","modified":1701236846824},{"_id":"source/img/Pasted image 20231222083825.png","hash":"c957713877fe322f405be6b17a970e5cfdf578f3","modified":1703205505959},{"_id":"source/img/Perfect.png","hash":"c6cd00d1dd115381045497718f5f9f4ddab65af7","modified":1703120844328},{"_id":"source/img/Table3.1.png","hash":"da3005fdd53e23b4002cb527ade9d23c33a27e1c","modified":1701313397430},{"_id":"source/img/alldevices.png","hash":"7b1c10b01cb0d0fbc2a3415b0f0345122239d403","modified":1702357681469},{"_id":"source/img/Table3.2.png","hash":"4dab658d3da0911d2f23662c37c9ec0fdb905ee0","modified":1701909668548},{"_id":"source/img/assignments.png","hash":"1207ce82aee1ddde14919691207dd8b4df03be0f","modified":1701487098867},{"_id":"source/img/assignment.png","hash":"e851496838a0be305e2c38f145302e860b0a71fb","modified":1700626631410},{"_id":"source/img/alarming.png","hash":"495479b6c2d663c93b95994732132a8ded52b803","modified":1703203981785},{"_id":"source/img/charassign.png","hash":"1e4d076e59a8afd8a2856bc7faecbcdd8b475eb0","modified":1701859682718},{"_id":"source/img/calling.png","hash":"dd487668c58a1f646a6bc6381e867160615e8473","modified":1700627321662},{"_id":"source/img/codeline.png","hash":"6a8c0699cf0295ea8e3686aeb7403610c1fe9ac4","modified":1702270357012},{"_id":"source/img/chardef.png","hash":"4e537e5a7a10e52ddc96f94eaa887e32b8f76f7b","modified":1701859503285},{"_id":"source/img/chardeclare.png","hash":"33e086f1a508a133182fedeb8355a0c5941b760a","modified":1701859800151},{"_id":"source/img/cmtoinch.png","hash":"dc7252d000d167b7003084d8ecc62a2ed45949f8","modified":1703205610976},{"_id":"source/img/comment.png","hash":"5acf27b5f8c12754d10aacf4d2ac836e4e2ea87f","modified":1700291348653},{"_id":"source/img/drop4in5.png","hash":"1f084367e750f6a5ec5239d515f01bd625983a26","modified":1702357663080},{"_id":"source/img/decimalandexp.png","hash":"3ecff8b3a769e245aae4cf9d74de4f765e27eb32","modified":1703204221027},{"_id":"source/img/floatdeclare.png","hash":"b71c10d594fbbebbc2cdb93f4afcc6eaff210c17","modified":1702269643325},{"_id":"source/img/example.png","hash":"639cb76a97bab68b43c35737a750e0da28607d35","modified":1700186577570},{"_id":"source/img/example2.png","hash":"fcdd07747fb105d956c2627370cb289481bd76e7","modified":1700791272580},{"_id":"source/img/flowresult.png","hash":"8e9ff1864ff1314f235c437735a6a6983fed89d1","modified":1701575245910},{"_id":"source/img/four.png","hash":"51d9ee94391420746f023a2f839e1530d3625ac2","modified":1700975037438},{"_id":"source/img/gradeb.png","hash":"6658e235f0bc494369f6571b30e84f8c3abf02f0","modified":1701860460091},{"_id":"source/img/hopeagain.png","hash":"870d9f01eafee337246ddbb3fd2fb687147c3138","modified":1700292117226},{"_id":"source/img/function1.png","hash":"e1f0a524eb957dad37f1629ef640998e1c76a686","modified":1700699037730},{"_id":"source/img/ihope.png","hash":"ea4ef276dbebfbba4074b7a50a7cff8454c1a6ab","modified":1700291963498},{"_id":"source/img/four_kinds.png","hash":"d77d90aea46b9cf769aaff5e0e1ef9910577bbf1","modified":1700109144396},{"_id":"source/img/informc.png","hash":"fe910c80bd8c19e24949679febc342f4e53d10df","modified":1699873947240},{"_id":"source/img/last.png","hash":"01329e86010f44d92b6535276418eda9336fe7b7","modified":1700975443746},{"_id":"source/img/initialization.png","hash":"4865791805bdd39022b1f5cec87929f021729358","modified":1701489155878},{"_id":"source/img/inchtocm.png","hash":"fb1028851d822e261f0f80a6a87db639d9a3aa2f","modified":1703205540185},{"_id":"source/img/lifesecond.png","hash":"460091138a4058bf2f6c5e9844fd130726c31b64","modified":1703204555235},{"_id":"source/img/listing1.4.png","hash":"71cd63e889da8e88f9561ad9a3b7eb9816bb8c6f","modified":1699872906295},{"_id":"source/img/listing1.1.png","hash":"0f15c6d47cebfaffcd8b17eb54e9cd8a77b6408a","modified":1699670605995},{"_id":"source/img/keywords.png","hash":"37c2415633a2bb547813eea2898e1b80ac99fbf9","modified":1700965554365},{"_id":"source/img/listing1.2.png","hash":"558cc336d8dfff0e8ed322a0b915734bd0e98a50","modified":1699677827278},{"_id":"source/img/matchup.png","hash":"3088240b276e29126c6e06be7f9ed89c8648af2d","modified":1701660033355},{"_id":"source/img/lookslike.png","hash":"83730c6796925d66cdec7d159b3c4c7f308b940f","modified":1702271266339},{"_id":"source/img/morevalid.png","hash":"c14ead9fc5436a72c84e50dfabfd7e4f5cea0912","modified":1702270107448},{"_id":"source/img/newform.png","hash":"55dc41525a78becbf0e79db9f27fb5d406ded315","modified":1700291760980},{"_id":"source/img/nospaces.png","hash":"6ec05d2d55157bfd6f6b127144ca7dd7583dd71c","modified":1702270170313},{"_id":"source/img/nonsense.png","hash":"dbe1ab3ea51a4afab809d84b4fc74b73347cf1d5","modified":1701574052908},{"_id":"source/img/nogood.png","hash":"5149ff9ee7d4b0b2288c5a3aa9cf36d26c4b343c","modified":1700869117520},{"_id":"source/img/othertypes.png","hash":"503d1dd18172b78c543dd48a0c7cab5305754b3a","modified":1701568634292},{"_id":"source/img/numassign.png","hash":"fb3a6bc5523b669a7339365be73dd4b81163ab88","modified":1701859914053},{"_id":"source/img/out3.png","hash":"68e8424bf2877e84db7c3a84c7135deeff969958","modified":1702169318257},{"_id":"source/img/out1.png","hash":"81b8586509a42f6c913e456da2e743856095ec05","modified":1702355480375},{"_id":"source/img/output.png","hash":"db10e0a8f21d67f788b944924c791078d3db990d","modified":1700104589519},{"_id":"source/img/overflow.png","hash":"7e6031febe56efac6efc0a5f19e8e31ae8852452","modified":1701575056582},{"_id":"source/img/poorreadability.png","hash":"1b13933d05cae9b1be7a798e35bc18892a5b9057","modified":1700700255598},{"_id":"source/img/quest4.png","hash":"0dad597690c2d571292acb12aeda987c511af859","modified":1700972003904},{"_id":"source/img/process.png","hash":"c95d3f0aa09f7050c27ada93712ad14721449383","modified":1699935012594},{"_id":"source/img/result1.png","hash":"bee16bb33accde9bc9b88243dce816201d47ed7d","modified":1701490732663},{"_id":"source/img/quest5.png","hash":"7b8c4cb77b052734fb69c27ab5753eeed812afc5","modified":1700972574676},{"_id":"source/img/quest8.png","hash":"73e58cf87b13c7536301fcc8421e420eb0328ea4","modified":1700973207674},{"_id":"source/img/sciennotation.png","hash":"2687f5b82a8a957f1c48875f6e9c57453ad5017d","modified":1702267986753},{"_id":"source/img/result3.png","hash":"b34bb80db635391627e995aae43584c80e924897","modified":1701658365884},{"_id":"source/img/readable.png","hash":"59bf666780c4b1401666a72a79ea3b71a8f4b77b","modified":1700700374496},{"_id":"source/img/result2.png","hash":"a8f476cd6a9df31c3a32ab137f955e43132f0824","modified":1701566561385},{"_id":"source/img/six.png","hash":"ff0b57587d0b6fb585684aff7f44914d8d3d056f","modified":1700975049941},{"_id":"source/img/sizes.png","hash":"5e546d4567e78fe6cbc40aa8a0445fb5551e3950","modified":1702523028486},{"_id":"source/img/stillbad.png","hash":"2d46b1c7991379281d80e435ca0f48cc1ca9c7a2","modified":1700871802594},{"_id":"source/img/structure.png","hash":"2691bf90e8a867d8145ef1d948f580ecff235609","modified":1700698989848},{"_id":"source/img/toobig.png","hash":"d9c6bc55f93652da34b5343222fb67a8de9e5497","modified":1702355777074},{"_id":"source/img/tradition.png","hash":"32f6659711d7b6fb0e890b47c917e85c360bc40b","modified":1700463043456},{"_id":"source/img/turning1.png","hash":"1a3fda274d810e7bf6be7ab4fb82bf63daec3708","modified":1702169175159},{"_id":"source/img/twoexam.png","hash":"b87355dc5fcfa1a9f1d281144e69fb39d60ac999","modified":1702269859269},{"_id":"source/img/turning2.png","hash":"8f09306798d8dbd9e9708df2f321364d968854e5","modified":1702169254630},{"_id":"source/img/typeface.png","hash":"e406c982a3a0f061b5d8e4ea57468ae941784119","modified":1700104007214},{"_id":"source/img/valid_declaration.png","hash":"873c0e0af2a6ced8c4b718bdac02a0058fa9ea10","modified":1701486765031},{"_id":"source/img/twofunc.png","hash":"bb95384a031531769b381199bd92d84d3338fc88","modified":1700794217349},{"_id":"source/img/输出.png","hash":"7b519546e8c9c3fbf67515295a3db20eb8dac95a","modified":1700187463704},{"_id":"source/_posts/C-premier-plus-Chapter-3.md","hash":"5d784153c03c383e9b63233dc967fb7f530d3bf4","modified":1703228186135},{"_id":"source/img/valid.png","hash":"cbf2a476ac843f0c960b3d2184cdc101efa06e20","modified":1700574092454},{"_id":"source/img/Figure3.1.png","hash":"9a64943d9fabe1691ccc233e9ab30999e5d37614","modified":1701239585970},{"_id":"source/img/InsertionSort.png","hash":"5fd3df7309db3e4db4d204e452676f43ce325a2c","modified":1705708877333},{"_id":"source/img/Listing3.1.png","hash":"c5a011123a484e318bda3821ef7c348fd1380d92","modified":1701232358297},{"_id":"source/img/Listing3.4.png","hash":"594b7a37e242667703681d0bd0c94dfe2b31666f","modified":1701658343269},{"_id":"source/img/Listing3.6.png","hash":"d24b1a60a90d88504e5489da8626f57cc85e0a9f","modified":1702169023758},{"_id":"source/img/Listing3.8.png","hash":"124a731c15f7d5afa611810b492569fa82f819a2","modified":1702522005079},{"_id":"source/img/MergeSort.png","hash":"ba221d67ce79689ccfbd3da38884ed5f1974cab5","modified":1705710552561},{"_id":"source/img/Summary.png","hash":"b9ab6f8a2c4ac920f2744c06d2d09e8ff33c17a7","modified":1702521273264},{"_id":"source/img/Twotables.png","hash":"ec24c9577f2ae05cb599b12c8a1bad18f99ee7fa","modified":1702521903751},{"_id":"source/img/basicdata.png","hash":"1314397a0e1e2a169bc8d593a1dccf1dd3776393","modified":1702444095121},{"_id":"source/img/overnunder.png","hash":"6499674bb58df921b6e37ebf8b3792a82645894e","modified":1703202588952},{"_id":"source/img/original.png","hash":"68c25be9601ee079eb97d19f30aa69e72bf1dd89","modified":1700285241662},{"_id":"source/img/page3.png","hash":"cd7a0d3c6cf9bf6b657e4227010178c64dfb4d9e","modified":1701090376737},{"_id":"source/img/quartmol.png","hash":"3ad599c59a736719f57a41044fef232827928248","modified":1703205014052},{"_id":"source/img/tracer.png","hash":"1f7da8adb28468408411dc073f0db979f801f73c","modified":1700875810262},{"_id":"source/img/BinarySearch.gif","hash":"549b6ef8d85291e9e9f56f315fdcd5fc774669c2","modified":1705849368493},{"_id":"source/img/ASCIIout.png","hash":"381509ad5a09c4fb8646a6b098541ae82a73c4c8","modified":1703203527061},{"_id":"source/img/storingtypes.png","hash":"84806c0293b011f0e3f374ba25fb413f661e8071","modified":1701315379760},{"_id":"source/img/BinaryTreenum.png","hash":"8f039bf14a9f4b412dfd119ca476765e265e7aca","modified":1705848969435},{"_id":"source/img/Processes.png","hash":"52a6a73523a9b4d5d9de067e05c5a2c0ce2f89a0","modified":1705754895066},{"_id":"source/img/analysis.png","hash":"9261aa98221b621f1945b9b2d91683a591415471","modified":1700191269501},{"_id":"source/img/Treeexample.png","hash":"67745f1e80a9d055bcbef669c9944b81b9e10914","modified":1705763416745},{"_id":"source/img/page2.png","hash":"511e645ea6c474a8d9fbf9ca71e90342b8a7cba6","modified":1701090370579},{"_id":"source/img/page1.png","hash":"547431c3ef4398234cb6fbd02d64b807f32ca2b5","modified":1701090344551},{"_id":"source/img/Chapter1.2.png","hash":"8ea3c4ba92701fa4a93921e35ec6acd086961df4","modified":1699496068718},{"_id":"source/img/RecursionTree.png","hash":"32fc0b9c6f33c5ce52b6b1ddfe583d70dcbb59b6","modified":1705712426522}],"Category":[{"name":"python学习","_id":"clp6949ei000fh4ue70s29wmz"}],"Data":[],"Page":[{"title":"categories","date":"2023-08-30T09:46:13.000Z","type":"categories","layout":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-08-30 17:46:13\ntype: \"categories\"\nlayout: \"categories\"\n---\n\n","updated":"2023-08-30T10:51:24.244Z","path":"categories/index.html","comments":1,"_id":"clp6949e40000h4ue552lgvb5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-08-30T10:39:08.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-08-30 18:39:08\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-08-30T10:40:01.779Z","path":"tags/index.html","comments":1,"_id":"clp6949eb0002h4ueekr0cbxu","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，\n我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。\n\n1. 编译错误引火线\n+ 复制到做题平台上时复制漏了一些东西。 -不必多讲。\n+ if语句后加了分号，导致出现对于else语句的错误。\n+ 变量重名，或者没改完一些变量的名字。\n+ 忘了一些分号。\n+ int mian（int main）或者stdio打错了\n+ 修改程序的时候忘了关黑框，有时候会不能编译新的文件。\n+ for循环中分号用成逗号\n+ 函数声明与定义部分，都需要对于形式变量的数据类型进行设置。\n\n2. 运行错误引火线\n+ for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加\n\t死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。\n\n3. 程序结果错误引火线\n+ scanf没有加取址符，printf加了取址符\n\tscanf不加的话，就不会对于变量进行赋值操作\n\tprintf加的话，返回的是变量的储存地址，垃圾数据。\n\n+ 部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）\n\t数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。\n\n+ 循环完一次的结果归零。\n\t有些循环比如while进行多实例检测的时候，会执行多个循环，\n\t如果某些计数的变量没有归零，会导致数据很离谱。\n\n+ 判断相等运算符 == 写成赋值运算符 = \n\t建议把变量放后面，值放前面，这样如果犯这个错的话会报错\n\n+ 赋值运算符=的结合性不清楚。\n\t用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。\n\n+ double转int的坑\n\tdouble储存的数据是近似值，切去小数点后有可能数据-1\n\t届时答案对不对完全看你运气。\n\n+ 数据类型对应的格式化符在更改变量类型的时候没有改变。\n\n+ switch语句中漏写了一个break。\n\t直接不受控地向下面的case进发，全部执行，直到遇到新的break。\n\n+ scanf中的格式加空格就算了，别的不要轻易加。\n+ \n+ 多字符输入的时候，注意处理回车与空格，一般用getchar来解决\n\n检查的思路：\n1. 首先基本问题，不要出编译错误，对于一些常见符号要打对\n\t比如，scanf中的&符号，各个语句后面的分号，大括号不要漏一边。\n2. 然后，看修改变量的时候有没有注意类型，\n相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改\n3. 接着看循环，\n对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环\n对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。\n看分支，看if语句的限定是否满足自己想要的条件，是否存在== 写成=的情况。\n看switch语句的break。\n4. 最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。","source":"新建文件夹/OJ中的“小丑”行为.md","raw":"在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，\n我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。\n\n1. 编译错误引火线\n+ 复制到做题平台上时复制漏了一些东西。 -不必多讲。\n+ if语句后加了分号，导致出现对于else语句的错误。\n+ 变量重名，或者没改完一些变量的名字。\n+ 忘了一些分号。\n+ int mian（int main）或者stdio打错了\n+ 修改程序的时候忘了关黑框，有时候会不能编译新的文件。\n+ for循环中分号用成逗号\n+ 函数声明与定义部分，都需要对于形式变量的数据类型进行设置。\n\n2. 运行错误引火线\n+ for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加\n\t死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。\n\n3. 程序结果错误引火线\n+ scanf没有加取址符，printf加了取址符\n\tscanf不加的话，就不会对于变量进行赋值操作\n\tprintf加的话，返回的是变量的储存地址，垃圾数据。\n\n+ 部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）\n\t数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。\n\n+ 循环完一次的结果归零。\n\t有些循环比如while进行多实例检测的时候，会执行多个循环，\n\t如果某些计数的变量没有归零，会导致数据很离谱。\n\n+ 判断相等运算符 == 写成赋值运算符 = \n\t建议把变量放后面，值放前面，这样如果犯这个错的话会报错\n\n+ 赋值运算符=的结合性不清楚。\n\t用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。\n\n+ double转int的坑\n\tdouble储存的数据是近似值，切去小数点后有可能数据-1\n\t届时答案对不对完全看你运气。\n\n+ 数据类型对应的格式化符在更改变量类型的时候没有改变。\n\n+ switch语句中漏写了一个break。\n\t直接不受控地向下面的case进发，全部执行，直到遇到新的break。\n\n+ scanf中的格式加空格就算了，别的不要轻易加。\n+ \n+ 多字符输入的时候，注意处理回车与空格，一般用getchar来解决\n\n检查的思路：\n1. 首先基本问题，不要出编译错误，对于一些常见符号要打对\n\t比如，scanf中的&符号，各个语句后面的分号，大括号不要漏一边。\n2. 然后，看修改变量的时候有没有注意类型，\n相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改\n3. 接着看循环，\n对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环\n对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。\n看分支，看if语句的限定是否满足自己想要的条件，是否存在== 写成=的情况。\n看switch语句的break。\n4. 最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。","date":"2023-11-20T01:48:40.197Z","updated":"2023-11-20T01:48:40.197Z","path":"新建文件夹/OJ中的“小丑”行为.html","title":"","comments":1,"layout":"page","_id":"clp6949ee0005h4ue478b0r8o","content":"<p>在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，<br>我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。</p>\n<ol>\n<li>编译错误引火线</li>\n</ol>\n<ul>\n<li>复制到做题平台上时复制漏了一些东西。 -不必多讲。</li>\n<li>if语句后加了分号，导致出现对于else语句的错误。</li>\n<li>变量重名，或者没改完一些变量的名字。</li>\n<li>忘了一些分号。</li>\n<li>int mian（int main）或者stdio打错了</li>\n<li>修改程序的时候忘了关黑框，有时候会不能编译新的文件。</li>\n<li>for循环中分号用成逗号</li>\n<li>函数声明与定义部分，都需要对于形式变量的数据类型进行设置。</li>\n</ul>\n<ol start=\"2\">\n<li>运行错误引火线</li>\n</ol>\n<ul>\n<li>for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加<br>  死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。</li>\n</ul>\n<ol start=\"3\">\n<li>程序结果错误引火线</li>\n</ol>\n<ul>\n<li><p>scanf没有加取址符，printf加了取址符<br>  scanf不加的话，就不会对于变量进行赋值操作<br>  printf加的话，返回的是变量的储存地址，垃圾数据。</p>\n</li>\n<li><p>部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）<br>  数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。</p>\n</li>\n<li><p>循环完一次的结果归零。<br>  有些循环比如while进行多实例检测的时候，会执行多个循环，<br>  如果某些计数的变量没有归零，会导致数据很离谱。</p>\n</li>\n<li><p>判断相等运算符 &#x3D;&#x3D; 写成赋值运算符 &#x3D;<br>  建议把变量放后面，值放前面，这样如果犯这个错的话会报错</p>\n</li>\n<li><p>赋值运算符&#x3D;的结合性不清楚。<br>  用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。</p>\n</li>\n<li><p>double转int的坑<br>  double储存的数据是近似值，切去小数点后有可能数据-1<br>  届时答案对不对完全看你运气。</p>\n</li>\n<li><p>数据类型对应的格式化符在更改变量类型的时候没有改变。</p>\n</li>\n<li><p>switch语句中漏写了一个break。<br>  直接不受控地向下面的case进发，全部执行，直到遇到新的break。</p>\n</li>\n<li><p>scanf中的格式加空格就算了，别的不要轻易加。</p>\n</li>\n<li></li>\n<li><p>多字符输入的时候，注意处理回车与空格，一般用getchar来解决</p>\n</li>\n</ul>\n<p>检查的思路：</p>\n<ol>\n<li>首先基本问题，不要出编译错误，对于一些常见符号要打对<br> 比如，scanf中的&amp;符号，各个语句后面的分号，大括号不要漏一边。</li>\n<li>然后，看修改变量的时候有没有注意类型，<br>相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改</li>\n<li>接着看循环，<br>对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环<br>对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。<br>看分支，看if语句的限定是否满足自己想要的条件，是否存在&#x3D;&#x3D; 写成&#x3D;的情况。<br>看switch语句的break。</li>\n<li>最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，<br>我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。</p>\n<ol>\n<li>编译错误引火线</li>\n</ol>\n<ul>\n<li>复制到做题平台上时复制漏了一些东西。 -不必多讲。</li>\n<li>if语句后加了分号，导致出现对于else语句的错误。</li>\n<li>变量重名，或者没改完一些变量的名字。</li>\n<li>忘了一些分号。</li>\n<li>int mian（int main）或者stdio打错了</li>\n<li>修改程序的时候忘了关黑框，有时候会不能编译新的文件。</li>\n<li>for循环中分号用成逗号</li>\n<li>函数声明与定义部分，都需要对于形式变量的数据类型进行设置。</li>\n</ul>\n<ol start=\"2\">\n<li>运行错误引火线</li>\n</ol>\n<ul>\n<li>for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加<br>  死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。</li>\n</ul>\n<ol start=\"3\">\n<li>程序结果错误引火线</li>\n</ol>\n<ul>\n<li><p>scanf没有加取址符，printf加了取址符<br>  scanf不加的话，就不会对于变量进行赋值操作<br>  printf加的话，返回的是变量的储存地址，垃圾数据。</p>\n</li>\n<li><p>部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）<br>  数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。</p>\n</li>\n<li><p>循环完一次的结果归零。<br>  有些循环比如while进行多实例检测的时候，会执行多个循环，<br>  如果某些计数的变量没有归零，会导致数据很离谱。</p>\n</li>\n<li><p>判断相等运算符 &#x3D;&#x3D; 写成赋值运算符 &#x3D;<br>  建议把变量放后面，值放前面，这样如果犯这个错的话会报错</p>\n</li>\n<li><p>赋值运算符&#x3D;的结合性不清楚。<br>  用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。</p>\n</li>\n<li><p>double转int的坑<br>  double储存的数据是近似值，切去小数点后有可能数据-1<br>  届时答案对不对完全看你运气。</p>\n</li>\n<li><p>数据类型对应的格式化符在更改变量类型的时候没有改变。</p>\n</li>\n<li><p>switch语句中漏写了一个break。<br>  直接不受控地向下面的case进发，全部执行，直到遇到新的break。</p>\n</li>\n<li><p>scanf中的格式加空格就算了，别的不要轻易加。</p>\n</li>\n<li></li>\n<li><p>多字符输入的时候，注意处理回车与空格，一般用getchar来解决</p>\n</li>\n</ul>\n<p>检查的思路：</p>\n<ol>\n<li>首先基本问题，不要出编译错误，对于一些常见符号要打对<br> 比如，scanf中的&amp;符号，各个语句后面的分号，大括号不要漏一边。</li>\n<li>然后，看修改变量的时候有没有注意类型，<br>相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改</li>\n<li>接着看循环，<br>对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环<br>对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。<br>看分支，看if语句的限定是否满足自己想要的条件，是否存在&#x3D;&#x3D; 写成&#x3D;的情况。<br>看switch语句的break。</li>\n<li>最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。</li>\n</ol>\n"},{"_content":"从字符串那里，包括之前听C语言群里大佬说\n也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。\n今天也一并分享给大家。\n\n## 1.stdio.h中的更多的函数\n(关于stream与参数列表的不讲，还没学到。)\n\n类似的，应该你们也听说过，这里列一下。\n\n```C\nint sprintf(char *str, const char *format);\nint sscanf(const char *str, const char *format, ...);\n```\n### 一.函数定义读法\n\n这里是纯纯的函数函数定义，看起来可能很抽象，\n**没关系，我会出手。**\n\n总体上一讲，以后见到**前面带f**的一般是有关`stream`的\n**带v的**一般是有关`参数列表`的，\n以后看到学长写类似的函数就知道该多学习了!😂\n\n对于以后看这样的函数定义，首先看[返回值类型]，\n一般是，返回处理的结果或者返回一个数值（int/double)\n\n然后如果看不懂函数名的话，\n先看[括号中的形式参数]，知道我们需要输入的是什么东西。\n\n>比如这两个函数中\n>**const**是数据类型的修饰符，表示常量。\n>char* 表示字符串、后面的是形式参数名，不需要管。\n\n最后，通过[看实例]与函数的[概述]得知函数的作用。\n在菜鸟教程里都一条一条地列出来的，每一条都有实例。\n\n在最后一篇文章的最后会给大家列出来用过的这些网站。\n\n### 二.浅谈没讲过的sscanf()函数\n\n上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。\n现在就来讲一讲相对的sscanf函数。\n\n不多说，直接上函数定义。\n```C\nint sscanf(const char *str, const char *format, ...);\n```\n\n首先看**返回值**\n这个函数返回的是一个数值，也就像scanf一样\n函数返回的是成功赋值与匹配的个数。\n如果到达文件末尾或者错误返回EOF。\n\n然后看**形参**\n获取的是字符串常量(`const char *str`)，\n\t这个字符串，是包含着我们想要赋值数据的字符串。\n写入形式(`const char *format`)\n\t写入形式相当于格式化符，相当于赋值的顺序）\n\t尽量不要加新的形式。\n与参数列表(`...`)。\n\t对应之前的格式化符。\n关于参数列表，其实简单的说\n就是我们printf中标准符后边逗号中的内容\n见下方。\n\n```C\nint a,b,c;\nscanf(\"%d %d %d\",&a,&b,&c);\n//后面的a,b,c就是参数列表\n//%d的这个字符串就是写入形式的一种形式\n```\n\n所以这个函数的**功能**就是\n>1.从字符串中获取数据，\n>2.然后赋给格式化符的对应的变量。\n\nsscanf不需要我们自己输入，在字符串中有就好。\n\n所以更多的惯例自己去菜鸟教程上查就好，\n**建议立即行动，不然一定会忘记。**\n\n## 二.关于我们的输入输出\n\n>以下内容取自空梦大大的博客\n>[如何理解c/c++中的输入/输出函数？ | 山岳库博](https://kmar.top/posts/51c9b0a0/)\n>我们这里梳理的是，我们这个阶段可以用到的符号。\n\n### 1.关于格式化符与printf、scanf修饰符\n\n格式化符我们需要知道的如下，之前在题中也出过。\n\t1. %d/%lf/%f/%c 整数、字符、浮点数\n\t2. %s 字符串输入与输出。\n\t3. %x/%X - 十六进制整数 或者 %o 八进制整数\n\t4. %%两个百分号一起用可以输出%号，相当于转义了。\n%%\n掌握了这些我们就不太用怕需要的数据表示不出来了。\n现在看来老师教的还是不是很够，第一个都用过时了。\n\n## printf修饰符\n1. 加数字，右对齐字符宽度。-实例：`printf(\"%4d\",n);`\n2. .数字，对于小数表示小数后位数，比如`%.3lf`\n\t对于字符串是打印字符的最大数量\n\t只使用点%.f与%.0f相同。\n3. 使用ll表示long long `%lld`\n4. 使用l，对于整型表示long int，对于浮点型表示double\n5. 各种标记：\n\t1. 在数字前加符号为左对齐\n\t2. + 是为了把在有符号数开头加'+'或者'-'。\n\t3. 加0对于多于的字段宽度填充0，如`%04d`\n\t\t对于1，返回的是0001.\n\t\t4.加入 * 决定填入数字，\n\t\t需要在参数列表中新加入一个变量。\n\t\t 常见形式为`%*lf`\n\n## scanf修饰符\n1. * 只读取不赋值，这对于无用数据是有用处的 形式为类似`%*d`\n\td可以任意换，以下的所有实例中的d都可以换成其他类型\n2. 同样的加数字为取字段的宽，有多长取多长，别的截掉。\n\n这就是最近关于输入输出想和大家分享的内容。\n\n\n","source":"新建文件夹/关于更多的Printf与scanf知识.md","raw":"从字符串那里，包括之前听C语言群里大佬说\n也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。\n今天也一并分享给大家。\n\n## 1.stdio.h中的更多的函数\n(关于stream与参数列表的不讲，还没学到。)\n\n类似的，应该你们也听说过，这里列一下。\n\n```C\nint sprintf(char *str, const char *format);\nint sscanf(const char *str, const char *format, ...);\n```\n### 一.函数定义读法\n\n这里是纯纯的函数函数定义，看起来可能很抽象，\n**没关系，我会出手。**\n\n总体上一讲，以后见到**前面带f**的一般是有关`stream`的\n**带v的**一般是有关`参数列表`的，\n以后看到学长写类似的函数就知道该多学习了!😂\n\n对于以后看这样的函数定义，首先看[返回值类型]，\n一般是，返回处理的结果或者返回一个数值（int/double)\n\n然后如果看不懂函数名的话，\n先看[括号中的形式参数]，知道我们需要输入的是什么东西。\n\n>比如这两个函数中\n>**const**是数据类型的修饰符，表示常量。\n>char* 表示字符串、后面的是形式参数名，不需要管。\n\n最后，通过[看实例]与函数的[概述]得知函数的作用。\n在菜鸟教程里都一条一条地列出来的，每一条都有实例。\n\n在最后一篇文章的最后会给大家列出来用过的这些网站。\n\n### 二.浅谈没讲过的sscanf()函数\n\n上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。\n现在就来讲一讲相对的sscanf函数。\n\n不多说，直接上函数定义。\n```C\nint sscanf(const char *str, const char *format, ...);\n```\n\n首先看**返回值**\n这个函数返回的是一个数值，也就像scanf一样\n函数返回的是成功赋值与匹配的个数。\n如果到达文件末尾或者错误返回EOF。\n\n然后看**形参**\n获取的是字符串常量(`const char *str`)，\n\t这个字符串，是包含着我们想要赋值数据的字符串。\n写入形式(`const char *format`)\n\t写入形式相当于格式化符，相当于赋值的顺序）\n\t尽量不要加新的形式。\n与参数列表(`...`)。\n\t对应之前的格式化符。\n关于参数列表，其实简单的说\n就是我们printf中标准符后边逗号中的内容\n见下方。\n\n```C\nint a,b,c;\nscanf(\"%d %d %d\",&a,&b,&c);\n//后面的a,b,c就是参数列表\n//%d的这个字符串就是写入形式的一种形式\n```\n\n所以这个函数的**功能**就是\n>1.从字符串中获取数据，\n>2.然后赋给格式化符的对应的变量。\n\nsscanf不需要我们自己输入，在字符串中有就好。\n\n所以更多的惯例自己去菜鸟教程上查就好，\n**建议立即行动，不然一定会忘记。**\n\n## 二.关于我们的输入输出\n\n>以下内容取自空梦大大的博客\n>[如何理解c/c++中的输入/输出函数？ | 山岳库博](https://kmar.top/posts/51c9b0a0/)\n>我们这里梳理的是，我们这个阶段可以用到的符号。\n\n### 1.关于格式化符与printf、scanf修饰符\n\n格式化符我们需要知道的如下，之前在题中也出过。\n\t1. %d/%lf/%f/%c 整数、字符、浮点数\n\t2. %s 字符串输入与输出。\n\t3. %x/%X - 十六进制整数 或者 %o 八进制整数\n\t4. %%两个百分号一起用可以输出%号，相当于转义了。\n%%\n掌握了这些我们就不太用怕需要的数据表示不出来了。\n现在看来老师教的还是不是很够，第一个都用过时了。\n\n## printf修饰符\n1. 加数字，右对齐字符宽度。-实例：`printf(\"%4d\",n);`\n2. .数字，对于小数表示小数后位数，比如`%.3lf`\n\t对于字符串是打印字符的最大数量\n\t只使用点%.f与%.0f相同。\n3. 使用ll表示long long `%lld`\n4. 使用l，对于整型表示long int，对于浮点型表示double\n5. 各种标记：\n\t1. 在数字前加符号为左对齐\n\t2. + 是为了把在有符号数开头加'+'或者'-'。\n\t3. 加0对于多于的字段宽度填充0，如`%04d`\n\t\t对于1，返回的是0001.\n\t\t4.加入 * 决定填入数字，\n\t\t需要在参数列表中新加入一个变量。\n\t\t 常见形式为`%*lf`\n\n## scanf修饰符\n1. * 只读取不赋值，这对于无用数据是有用处的 形式为类似`%*d`\n\td可以任意换，以下的所有实例中的d都可以换成其他类型\n2. 同样的加数字为取字段的宽，有多长取多长，别的截掉。\n\n这就是最近关于输入输出想和大家分享的内容。\n\n\n","date":"2023-11-20T01:49:44.016Z","updated":"2023-11-19T04:28:53.380Z","path":"新建文件夹/关于更多的Printf与scanf知识.html","title":"","comments":1,"layout":"page","_id":"clp6949ef0007h4uee3mh35cx","content":"<p>从字符串那里，包括之前听C语言群里大佬说<br>也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。<br>今天也一并分享给大家。</p>\n<h2 id=\"1-stdio-h中的更多的函数\"><a href=\"#1-stdio-h中的更多的函数\" class=\"headerlink\" title=\"1.stdio.h中的更多的函数\"></a>1.stdio.h中的更多的函数</h2><p>(关于stream与参数列表的不讲，还没学到。)</p>\n<p>类似的，应该你们也听说过，这里列一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sprintf</span><span class=\"params\">(<span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一-函数定义读法\"><a href=\"#一-函数定义读法\" class=\"headerlink\" title=\"一.函数定义读法\"></a>一.函数定义读法</h3><p>这里是纯纯的函数函数定义，看起来可能很抽象，<br><strong>没关系，我会出手。</strong></p>\n<p>总体上一讲，以后见到<strong>前面带f</strong>的一般是有关<code>stream</code>的<br><strong>带v的</strong>一般是有关<code>参数列表</code>的，<br>以后看到学长写类似的函数就知道该多学习了!😂</p>\n<p>对于以后看这样的函数定义，首先看[返回值类型]，<br>一般是，返回处理的结果或者返回一个数值（int&#x2F;double)</p>\n<p>然后如果看不懂函数名的话，<br>先看[括号中的形式参数]，知道我们需要输入的是什么东西。</p>\n<blockquote>\n<p>比如这两个函数中<br><strong>const</strong>是数据类型的修饰符，表示常量。<br>char* 表示字符串、后面的是形式参数名，不需要管。</p>\n</blockquote>\n<p>最后，通过[看实例]与函数的[概述]得知函数的作用。<br>在菜鸟教程里都一条一条地列出来的，每一条都有实例。</p>\n<p>在最后一篇文章的最后会给大家列出来用过的这些网站。</p>\n<h3 id=\"二-浅谈没讲过的sscanf-函数\"><a href=\"#二-浅谈没讲过的sscanf-函数\" class=\"headerlink\" title=\"二.浅谈没讲过的sscanf()函数\"></a>二.浅谈没讲过的sscanf()函数</h3><p>上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。<br>现在就来讲一讲相对的sscanf函数。</p>\n<p>不多说，直接上函数定义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>首先看<strong>返回值</strong><br>这个函数返回的是一个数值，也就像scanf一样<br>函数返回的是成功赋值与匹配的个数。<br>如果到达文件末尾或者错误返回EOF。</p>\n<p>然后看<strong>形参</strong><br>获取的是字符串常量(<code>const char *str</code>)，<br>    这个字符串，是包含着我们想要赋值数据的字符串。<br>写入形式(<code>const char *format</code>)<br>    写入形式相当于格式化符，相当于赋值的顺序）<br>    尽量不要加新的形式。<br>与参数列表(<code>...</code>)。<br>    对应之前的格式化符。<br>关于参数列表，其实简单的说<br>就是我们printf中标准符后边逗号中的内容<br>见下方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\"><span class=\"comment\">//后面的a,b,c就是参数列表</span></span><br><span class=\"line\"><span class=\"comment\">//%d的这个字符串就是写入形式的一种形式</span></span><br></pre></td></tr></table></figure>\n\n<p>所以这个函数的<strong>功能</strong>就是</p>\n<blockquote>\n<p>1.从字符串中获取数据，<br>2.然后赋给格式化符的对应的变量。</p>\n</blockquote>\n<p>sscanf不需要我们自己输入，在字符串中有就好。</p>\n<p>所以更多的惯例自己去菜鸟教程上查就好，<br><strong>建议立即行动，不然一定会忘记。</strong></p>\n<h2 id=\"二-关于我们的输入输出\"><a href=\"#二-关于我们的输入输出\" class=\"headerlink\" title=\"二.关于我们的输入输出\"></a>二.关于我们的输入输出</h2><blockquote>\n<p>以下内容取自空梦大大的博客<br><a href=\"https://kmar.top/posts/51c9b0a0/\">如何理解c&#x2F;c++中的输入&#x2F;输出函数？ | 山岳库博</a><br>我们这里梳理的是，我们这个阶段可以用到的符号。</p>\n</blockquote>\n<h3 id=\"1-关于格式化符与printf、scanf修饰符\"><a href=\"#1-关于格式化符与printf、scanf修饰符\" class=\"headerlink\" title=\"1.关于格式化符与printf、scanf修饰符\"></a>1.关于格式化符与printf、scanf修饰符</h3><p>格式化符我们需要知道的如下，之前在题中也出过。<br>    1. %d&#x2F;%lf&#x2F;%f&#x2F;%c 整数、字符、浮点数<br>    2. %s 字符串输入与输出。<br>    3. %x&#x2F;%X - 十六进制整数 或者 %o 八进制整数<br>    4. %%两个百分号一起用可以输出%号，相当于转义了。<br>%%<br>掌握了这些我们就不太用怕需要的数据表示不出来了。<br>现在看来老师教的还是不是很够，第一个都用过时了。</p>\n<h2 id=\"printf修饰符\"><a href=\"#printf修饰符\" class=\"headerlink\" title=\"printf修饰符\"></a>printf修饰符</h2><ol>\n<li>加数字，右对齐字符宽度。-实例：<code>printf(&quot;%4d&quot;,n);</code></li>\n<li>.数字，对于小数表示小数后位数，比如<code>%.3lf</code><br> 对于字符串是打印字符的最大数量<br> 只使用点%.f与%.0f相同。</li>\n<li>使用ll表示long long <code>%lld</code></li>\n<li>使用l，对于整型表示long int，对于浮点型表示double</li>\n<li>各种标记：<ol>\n<li>在数字前加符号为左对齐</li>\n<li><ul>\n<li>是为了把在有符号数开头加’+’或者’-‘。</li>\n</ul>\n</li>\n<li>加0对于多于的字段宽度填充0，如<code>%04d</code><br> 对于1，返回的是0001.<br> 4.加入 * 决定填入数字，<br> 需要在参数列表中新加入一个变量。<br>  常见形式为<code>%*lf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"scanf修饰符\"><a href=\"#scanf修饰符\" class=\"headerlink\" title=\"scanf修饰符\"></a>scanf修饰符</h2><ol>\n<li><ul>\n<li>只读取不赋值，这对于无用数据是有用处的 形式为类似<code>%*d</code><br> d可以任意换，以下的所有实例中的d都可以换成其他类型</li>\n</ul>\n</li>\n<li>同样的加数字为取字段的宽，有多长取多长，别的截掉。</li>\n</ol>\n<p>这就是最近关于输入输出想和大家分享的内容。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>从字符串那里，包括之前听C语言群里大佬说<br>也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。<br>今天也一并分享给大家。</p>\n<h2 id=\"1-stdio-h中的更多的函数\"><a href=\"#1-stdio-h中的更多的函数\" class=\"headerlink\" title=\"1.stdio.h中的更多的函数\"></a>1.stdio.h中的更多的函数</h2><p>(关于stream与参数列表的不讲，还没学到。)</p>\n<p>类似的，应该你们也听说过，这里列一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sprintf</span><span class=\"params\">(<span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一-函数定义读法\"><a href=\"#一-函数定义读法\" class=\"headerlink\" title=\"一.函数定义读法\"></a>一.函数定义读法</h3><p>这里是纯纯的函数函数定义，看起来可能很抽象，<br><strong>没关系，我会出手。</strong></p>\n<p>总体上一讲，以后见到<strong>前面带f</strong>的一般是有关<code>stream</code>的<br><strong>带v的</strong>一般是有关<code>参数列表</code>的，<br>以后看到学长写类似的函数就知道该多学习了!😂</p>\n<p>对于以后看这样的函数定义，首先看[返回值类型]，<br>一般是，返回处理的结果或者返回一个数值（int&#x2F;double)</p>\n<p>然后如果看不懂函数名的话，<br>先看[括号中的形式参数]，知道我们需要输入的是什么东西。</p>\n<blockquote>\n<p>比如这两个函数中<br><strong>const</strong>是数据类型的修饰符，表示常量。<br>char* 表示字符串、后面的是形式参数名，不需要管。</p>\n</blockquote>\n<p>最后，通过[看实例]与函数的[概述]得知函数的作用。<br>在菜鸟教程里都一条一条地列出来的，每一条都有实例。</p>\n<p>在最后一篇文章的最后会给大家列出来用过的这些网站。</p>\n<h3 id=\"二-浅谈没讲过的sscanf-函数\"><a href=\"#二-浅谈没讲过的sscanf-函数\" class=\"headerlink\" title=\"二.浅谈没讲过的sscanf()函数\"></a>二.浅谈没讲过的sscanf()函数</h3><p>上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。<br>现在就来讲一讲相对的sscanf函数。</p>\n<p>不多说，直接上函数定义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>首先看<strong>返回值</strong><br>这个函数返回的是一个数值，也就像scanf一样<br>函数返回的是成功赋值与匹配的个数。<br>如果到达文件末尾或者错误返回EOF。</p>\n<p>然后看<strong>形参</strong><br>获取的是字符串常量(<code>const char *str</code>)，<br>    这个字符串，是包含着我们想要赋值数据的字符串。<br>写入形式(<code>const char *format</code>)<br>    写入形式相当于格式化符，相当于赋值的顺序）<br>    尽量不要加新的形式。<br>与参数列表(<code>...</code>)。<br>    对应之前的格式化符。<br>关于参数列表，其实简单的说<br>就是我们printf中标准符后边逗号中的内容<br>见下方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\"><span class=\"comment\">//后面的a,b,c就是参数列表</span></span><br><span class=\"line\"><span class=\"comment\">//%d的这个字符串就是写入形式的一种形式</span></span><br></pre></td></tr></table></figure>\n\n<p>所以这个函数的<strong>功能</strong>就是</p>\n<blockquote>\n<p>1.从字符串中获取数据，<br>2.然后赋给格式化符的对应的变量。</p>\n</blockquote>\n<p>sscanf不需要我们自己输入，在字符串中有就好。</p>\n<p>所以更多的惯例自己去菜鸟教程上查就好，<br><strong>建议立即行动，不然一定会忘记。</strong></p>\n<h2 id=\"二-关于我们的输入输出\"><a href=\"#二-关于我们的输入输出\" class=\"headerlink\" title=\"二.关于我们的输入输出\"></a>二.关于我们的输入输出</h2><blockquote>\n<p>以下内容取自空梦大大的博客<br><a href=\"https://kmar.top/posts/51c9b0a0/\">如何理解c&#x2F;c++中的输入&#x2F;输出函数？ | 山岳库博</a><br>我们这里梳理的是，我们这个阶段可以用到的符号。</p>\n</blockquote>\n<h3 id=\"1-关于格式化符与printf、scanf修饰符\"><a href=\"#1-关于格式化符与printf、scanf修饰符\" class=\"headerlink\" title=\"1.关于格式化符与printf、scanf修饰符\"></a>1.关于格式化符与printf、scanf修饰符</h3><p>格式化符我们需要知道的如下，之前在题中也出过。<br>    1. %d&#x2F;%lf&#x2F;%f&#x2F;%c 整数、字符、浮点数<br>    2. %s 字符串输入与输出。<br>    3. %x&#x2F;%X - 十六进制整数 或者 %o 八进制整数<br>    4. %%两个百分号一起用可以输出%号，相当于转义了。<br>%%<br>掌握了这些我们就不太用怕需要的数据表示不出来了。<br>现在看来老师教的还是不是很够，第一个都用过时了。</p>\n<h2 id=\"printf修饰符\"><a href=\"#printf修饰符\" class=\"headerlink\" title=\"printf修饰符\"></a>printf修饰符</h2><ol>\n<li>加数字，右对齐字符宽度。-实例：<code>printf(&quot;%4d&quot;,n);</code></li>\n<li>.数字，对于小数表示小数后位数，比如<code>%.3lf</code><br> 对于字符串是打印字符的最大数量<br> 只使用点%.f与%.0f相同。</li>\n<li>使用ll表示long long <code>%lld</code></li>\n<li>使用l，对于整型表示long int，对于浮点型表示double</li>\n<li>各种标记：<ol>\n<li>在数字前加符号为左对齐</li>\n<li><ul>\n<li>是为了把在有符号数开头加’+’或者’-‘。</li>\n</ul>\n</li>\n<li>加0对于多于的字段宽度填充0，如<code>%04d</code><br> 对于1，返回的是0001.<br> 4.加入 * 决定填入数字，<br> 需要在参数列表中新加入一个变量。<br>  常见形式为<code>%*lf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"scanf修饰符\"><a href=\"#scanf修饰符\" class=\"headerlink\" title=\"scanf修饰符\"></a>scanf修饰符</h2><ol>\n<li><ul>\n<li>只读取不赋值，这对于无用数据是有用处的 形式为类似<code>%*d</code><br> d可以任意换，以下的所有实例中的d都可以换成其他类型</li>\n</ul>\n</li>\n<li>同样的加数字为取字段的宽，有多长取多长，别的截掉。</li>\n</ol>\n<p>这就是最近关于输入输出想和大家分享的内容。</p>\n"},{"_content":"昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归\n我还需要再联系联系，不太能独立写出来。\n那就整理一下昨天晚上听到的一些点，\n\n## qsort函数的用法以及swap函数\n> 首先声明，需要添加stdlib库\n\n上定义\n```C\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\n```\n\n这个定义有点太复杂，我们可以把它特殊化处理\n\n```C\nvoid qsort(排序数组,排序个数，sizeof(数组数据类型)，排序规则(cmp));\n```\n\n这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。\n\n因为我们学习过全局变量，所以这个注意事项也好懂\n\n> 这个数组必须是全局的，即必须在预处理之后，主函数之前定义。\n\n因为这样数组才对qsort函数“可见“。\n\ncmp函数需要自己写，写的思路用到了指针，不过照抄就好。\n\n```C\nint cmp (const void * a, const void * b)  \n{  \n   return ( *(int*)a - *(int*)b );  \n}\n//先强转为对应类型的指针，然后再相减，\n//a-b为从小到大，b-a为从大到小\n```\n\n如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。\n\n所以这就是qsort库函数的用法。\n\n还有是swap函数，可以在我们写排序的时候用到。\n可以交换数组内的数据，非常好用。\n形式如下\n```C\nswap(&a,&b);\n```\n到用的时候可以把a和b换成数组的元素，如array[1].\n可以便捷地实现交换。\n这个函数实际上自己写也可以。\n\n这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。\n\n\n\n# 总体网站集合\n>1.菜鸟教程 www.runoob.com\n>2.空梦博客 www.kmar.top\n>3.昨日学长的B站号 [@zyoobn]\n>\t学长的CSDN [@郑轻大不知名]\n>4.编程爱好者协会 www.godyu.com\n>\tB站直播号 [@郑轻编程爱好者协会]\n\n看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了\n那网站上没法发帖子，所以我还是自己想办法建个博客吧。\n","source":"新建文件夹/对于昨天晚上学长讲的内容的复盘.md","raw":"昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归\n我还需要再联系联系，不太能独立写出来。\n那就整理一下昨天晚上听到的一些点，\n\n## qsort函数的用法以及swap函数\n> 首先声明，需要添加stdlib库\n\n上定义\n```C\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\n```\n\n这个定义有点太复杂，我们可以把它特殊化处理\n\n```C\nvoid qsort(排序数组,排序个数，sizeof(数组数据类型)，排序规则(cmp));\n```\n\n这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。\n\n因为我们学习过全局变量，所以这个注意事项也好懂\n\n> 这个数组必须是全局的，即必须在预处理之后，主函数之前定义。\n\n因为这样数组才对qsort函数“可见“。\n\ncmp函数需要自己写，写的思路用到了指针，不过照抄就好。\n\n```C\nint cmp (const void * a, const void * b)  \n{  \n   return ( *(int*)a - *(int*)b );  \n}\n//先强转为对应类型的指针，然后再相减，\n//a-b为从小到大，b-a为从大到小\n```\n\n如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。\n\n所以这就是qsort库函数的用法。\n\n还有是swap函数，可以在我们写排序的时候用到。\n可以交换数组内的数据，非常好用。\n形式如下\n```C\nswap(&a,&b);\n```\n到用的时候可以把a和b换成数组的元素，如array[1].\n可以便捷地实现交换。\n这个函数实际上自己写也可以。\n\n这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。\n\n\n\n# 总体网站集合\n>1.菜鸟教程 www.runoob.com\n>2.空梦博客 www.kmar.top\n>3.昨日学长的B站号 [@zyoobn]\n>\t学长的CSDN [@郑轻大不知名]\n>4.编程爱好者协会 www.godyu.com\n>\tB站直播号 [@郑轻编程爱好者协会]\n\n看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了\n那网站上没法发帖子，所以我还是自己想办法建个博客吧。\n","date":"2023-11-20T01:48:57.748Z","updated":"2023-11-19T05:08:43.887Z","path":"新建文件夹/对于昨天晚上学长讲的内容的复盘.html","title":"","comments":1,"layout":"page","_id":"clp6949eg0009h4ue5xlr7hcq","content":"<p>昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归<br>我还需要再联系联系，不太能独立写出来。<br>那就整理一下昨天晚上听到的一些点，</p>\n<h2 id=\"qsort函数的用法以及swap函数\"><a href=\"#qsort函数的用法以及swap函数\" class=\"headerlink\" title=\"qsort函数的用法以及swap函数\"></a>qsort函数的用法以及swap函数</h2><blockquote>\n<p>首先声明，需要添加stdlib库</p>\n</blockquote>\n<p>上定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">void</span> *base, <span class=\"type\">size_t</span> nitems, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> (*compar)(<span class=\"type\">const</span> <span class=\"type\">void</span> *, <span class=\"type\">const</span> <span class=\"type\">void</span>*))</span></span><br></pre></td></tr></table></figure>\n\n<p>这个定义有点太复杂，我们可以把它特殊化处理</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(排序数组,排序个数，<span class=\"keyword\">sizeof</span>(数组数据类型)，排序规则(cmp))</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。</p>\n<p>因为我们学习过全局变量，所以这个注意事项也好懂</p>\n<blockquote>\n<p>这个数组必须是全局的，即必须在预处理之后，主函数之前定义。</p>\n</blockquote>\n<p>因为这样数组才对qsort函数“可见“。</p>\n<p>cmp函数需要自己写，写的思路用到了指针，不过照抄就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cmp</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> * a, <span class=\"type\">const</span> <span class=\"type\">void</span> * b)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> ( *(<span class=\"type\">int</span>*)a - *(<span class=\"type\">int</span>*)b );  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先强转为对应类型的指针，然后再相减，</span></span><br><span class=\"line\"><span class=\"comment\">//a-b为从小到大，b-a为从大到小</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。</p>\n<p>所以这就是qsort库函数的用法。</p>\n<p>还有是swap函数，可以在我们写排序的时候用到。<br>可以交换数组内的数据，非常好用。<br>形式如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>\n<p>到用的时候可以把a和b换成数组的元素，如array[1].<br>可以便捷地实现交换。<br>这个函数实际上自己写也可以。</p>\n<p>这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。</p>\n<h1 id=\"总体网站集合\"><a href=\"#总体网站集合\" class=\"headerlink\" title=\"总体网站集合\"></a>总体网站集合</h1><blockquote>\n<p>1.菜鸟教程 <a href=\"http://www.runoob.com/\">www.runoob.com</a><br>2.空梦博客 <a href=\"http://www.kmar.top/\">www.kmar.top</a><br>3.昨日学长的B站号 [@zyoobn]<br>学长的CSDN [@郑轻大不知名]<br>4.编程爱好者协会 <a href=\"http://www.godyu.com/\">www.godyu.com</a><br>B站直播号 [@郑轻编程爱好者协会]</p>\n</blockquote>\n<p>看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了<br>那网站上没法发帖子，所以我还是自己想办法建个博客吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归<br>我还需要再联系联系，不太能独立写出来。<br>那就整理一下昨天晚上听到的一些点，</p>\n<h2 id=\"qsort函数的用法以及swap函数\"><a href=\"#qsort函数的用法以及swap函数\" class=\"headerlink\" title=\"qsort函数的用法以及swap函数\"></a>qsort函数的用法以及swap函数</h2><blockquote>\n<p>首先声明，需要添加stdlib库</p>\n</blockquote>\n<p>上定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">void</span> *base, <span class=\"type\">size_t</span> nitems, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> (*compar)(<span class=\"type\">const</span> <span class=\"type\">void</span> *, <span class=\"type\">const</span> <span class=\"type\">void</span>*))</span></span><br></pre></td></tr></table></figure>\n\n<p>这个定义有点太复杂，我们可以把它特殊化处理</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(排序数组,排序个数，<span class=\"keyword\">sizeof</span>(数组数据类型)，排序规则(cmp))</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。</p>\n<p>因为我们学习过全局变量，所以这个注意事项也好懂</p>\n<blockquote>\n<p>这个数组必须是全局的，即必须在预处理之后，主函数之前定义。</p>\n</blockquote>\n<p>因为这样数组才对qsort函数“可见“。</p>\n<p>cmp函数需要自己写，写的思路用到了指针，不过照抄就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cmp</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> * a, <span class=\"type\">const</span> <span class=\"type\">void</span> * b)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> ( *(<span class=\"type\">int</span>*)a - *(<span class=\"type\">int</span>*)b );  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先强转为对应类型的指针，然后再相减，</span></span><br><span class=\"line\"><span class=\"comment\">//a-b为从小到大，b-a为从大到小</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。</p>\n<p>所以这就是qsort库函数的用法。</p>\n<p>还有是swap函数，可以在我们写排序的时候用到。<br>可以交换数组内的数据，非常好用。<br>形式如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>\n<p>到用的时候可以把a和b换成数组的元素，如array[1].<br>可以便捷地实现交换。<br>这个函数实际上自己写也可以。</p>\n<p>这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。</p>\n<h1 id=\"总体网站集合\"><a href=\"#总体网站集合\" class=\"headerlink\" title=\"总体网站集合\"></a>总体网站集合</h1><blockquote>\n<p>1.菜鸟教程 <a href=\"http://www.runoob.com/\">www.runoob.com</a><br>2.空梦博客 <a href=\"http://www.kmar.top/\">www.kmar.top</a><br>3.昨日学长的B站号 [@zyoobn]<br>学长的CSDN [@郑轻大不知名]<br>4.编程爱好者协会 <a href=\"http://www.godyu.com/\">www.godyu.com</a><br>B站直播号 [@郑轻编程爱好者协会]</p>\n</blockquote>\n<p>看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了<br>那网站上没法发帖子，所以我还是自己想办法建个博客吧。</p>\n"},{"_content":"最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题\n今天学习了一些关于字符串、输入输出函数的知识，\n以及整理了一下昨天晚上直播的重点内容 @21级学长zyb\n希望能够帮到大家\n\n## 1.千奇百怪的字符串处理函数\n\n>首先声明，此处使用的函数（如图），需要加入**string.h**标准库\n>加入方式如下\n\n```C\n#include <string.h>\n```\n\n![[Pasted image 20231119081701.png]]\n\n\t 参考来自菜鸟教程\n\t(https://www.runoob.com/cprogramming/c-strings.html)\n\n这是我们在平时做题时常用的几个函数，比较易懂。\n除此之外我还在string.h中为大家多找了几个关于**搜索匹配字符**的。\n是下面这两个\n\n![[屏幕截图 2023-11-19 082223.png]]\n![[Pasted image 20231119082242.png]]\n（看起来可能参数与返回值都有点吓人，但也就那样。）\n\n\t 参考来自菜鸟教程\n\t (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n\n相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了\n要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：\n\n```C\n\t//定义方式\n\tchar 标识符[字符串长度];\n\t//标识符即为名字，字符串长度可以省略。\n\n\t//为字符串赋值的方式\n\tchar string[] = \"I'm a string!\";   //第一种方法\n\tchar string2[6] = \"Hello!\";        //第二种方法\n\t\n\tchar string3[10];                  //第三种方法\n\tgets(string3);\n\n\tint n;\n\tscanf(\"%d\",&n);                    //第四种，应该是最常用的一种方法\n\tchar string[1000];\n\tfor(int i = 0;i < n;i++)\n\t\tscanf(\"%c\",&string[i]);\n\n\t//sprintf(被写入字符串,\"写入字符串\"，格式化符列表)\n\t//括号的后半部分与printf类似，但是它不是为了输出的。\n\tint n;\n\tscanf(\"%d\",&n);\n\tsprintf(string1,\"%d\",n);\n\n\t//字符串输出的方式\n\tputs(string);\n\n\tfor(int i = 0;i < n;i++)\n\t\tputchar(string[i]);\n\t\t//此处n也可以不定义，在使用第一或者第二种方式时\n\t\t//可以使用strlen函数或者sizeof运算符 - 1来代替\n\t\t//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不\n\n\t\n```\n\n所谓的**字符串**，其实就是[由字符组成，以’ \\\\0‘为结束的一维数组]。\n’\\\\0'标志着字符串输出的结束，\\是**转义符号**，为了提示它不是数字0\n\n>注意，对于字符串的scanf都不需要加取地址符&。\n>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。\n>和字符串本身无关。\n\n上面的函数给出了几种给字符串赋值的方式，\n我觉得你们可能不太好理解的是以下内容：\n+ gets()与puts()函数的用法\n+ 1000是可以随机的吗\n+ strlen函数以及sizeof的用法\n\n这里简单一说\n1. gets()就是获取一段字符串，在括号中需要加入参数，\n\t参数为字符串（字符数组）\n\tputs是把字符串打印出来\n\t其实这两个相似于字符的getchar与putchar\n2. 1000看题目要求，看字符串的最大容量。\n3. strlen是返回字符串的长度，不包含结尾的\\\\0符号，\n\tsizeof运算符对于字符串来说，是返回包括\\\\0的长度。\n\t所以sizeof要减一。\n\n下面再说一下这些函数的效果。（看图也可。）\n\n> 1.strcpy(s1,s2);\n\ns1与s2是形式参数，代表两个字符串，\n通过这个函数我们能够覆盖式地把s2复制粘贴到s1上\n甚至长度不允许也没关系。\n\n关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。\n对于很多的函数是可以通过这种方式记忆的\n其实用多了就自然记住了。\n\n> 2.strcat(s1,s2);\n\ns1,s2作用不再赘述。\n把s2连接到s1的末尾，改变s1。\n可以通过输出看s1的变化，\n\n> 3.strlen(s1)\n> 返回s1的去掉结尾符号的长度，已经讲过。\n\n> 4.strcmp(s1,s2);\n> 从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。\n> 昨晚在直播中学长讲过了。\n> 大小与返回值的关系请见图。\n\n> 5.strpbrk(const char* str1, const char* str2);\n\n\t关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n\n分析第一个字符串的字符，与第二个字符串内的字符比对\n只要找出两个字符串都包含的字符就返回那个字符。\n\n\t很好理解。\n\t比如，\"AABB\"与\"BCDE\"，就会返回B。\n\n> 6.strspn(const char* str1, const char* str2);\n\n也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。\n返回那个字符的下标，注意不是字符。\n\n想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，\n比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。\n这在我刚开始学习C语言的时候就感觉到了。\nPython中的字符串处理有很多的内建函数，处理起来很方便。\n但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。\n所以学好字符串还是很有必要的。\n\n还有一个是 @空梦Kmar 的建议\n尽量使用C标准库函数，这样能够极大地优化程序的效率。\n详细的建议在他的博客里，第一条就是优先使用库函数。\n[关于C语言编码的一些建议 | 山岳库博 (kmar.top)](https://kmar.top/posts/51979312/)\n包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题\n还有用于交换数组排序的swap函数。\n所以学习C语言标准库而不是自己写还是很好的，而且很省事。\n\n\n","source":"新建文件夹/基于最近两次直播的知识调研.md","raw":"最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题\n今天学习了一些关于字符串、输入输出函数的知识，\n以及整理了一下昨天晚上直播的重点内容 @21级学长zyb\n希望能够帮到大家\n\n## 1.千奇百怪的字符串处理函数\n\n>首先声明，此处使用的函数（如图），需要加入**string.h**标准库\n>加入方式如下\n\n```C\n#include <string.h>\n```\n\n![[Pasted image 20231119081701.png]]\n\n\t 参考来自菜鸟教程\n\t(https://www.runoob.com/cprogramming/c-strings.html)\n\n这是我们在平时做题时常用的几个函数，比较易懂。\n除此之外我还在string.h中为大家多找了几个关于**搜索匹配字符**的。\n是下面这两个\n\n![[屏幕截图 2023-11-19 082223.png]]\n![[Pasted image 20231119082242.png]]\n（看起来可能参数与返回值都有点吓人，但也就那样。）\n\n\t 参考来自菜鸟教程\n\t (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n\n相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了\n要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：\n\n```C\n\t//定义方式\n\tchar 标识符[字符串长度];\n\t//标识符即为名字，字符串长度可以省略。\n\n\t//为字符串赋值的方式\n\tchar string[] = \"I'm a string!\";   //第一种方法\n\tchar string2[6] = \"Hello!\";        //第二种方法\n\t\n\tchar string3[10];                  //第三种方法\n\tgets(string3);\n\n\tint n;\n\tscanf(\"%d\",&n);                    //第四种，应该是最常用的一种方法\n\tchar string[1000];\n\tfor(int i = 0;i < n;i++)\n\t\tscanf(\"%c\",&string[i]);\n\n\t//sprintf(被写入字符串,\"写入字符串\"，格式化符列表)\n\t//括号的后半部分与printf类似，但是它不是为了输出的。\n\tint n;\n\tscanf(\"%d\",&n);\n\tsprintf(string1,\"%d\",n);\n\n\t//字符串输出的方式\n\tputs(string);\n\n\tfor(int i = 0;i < n;i++)\n\t\tputchar(string[i]);\n\t\t//此处n也可以不定义，在使用第一或者第二种方式时\n\t\t//可以使用strlen函数或者sizeof运算符 - 1来代替\n\t\t//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不\n\n\t\n```\n\n所谓的**字符串**，其实就是[由字符组成，以’ \\\\0‘为结束的一维数组]。\n’\\\\0'标志着字符串输出的结束，\\是**转义符号**，为了提示它不是数字0\n\n>注意，对于字符串的scanf都不需要加取地址符&。\n>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。\n>和字符串本身无关。\n\n上面的函数给出了几种给字符串赋值的方式，\n我觉得你们可能不太好理解的是以下内容：\n+ gets()与puts()函数的用法\n+ 1000是可以随机的吗\n+ strlen函数以及sizeof的用法\n\n这里简单一说\n1. gets()就是获取一段字符串，在括号中需要加入参数，\n\t参数为字符串（字符数组）\n\tputs是把字符串打印出来\n\t其实这两个相似于字符的getchar与putchar\n2. 1000看题目要求，看字符串的最大容量。\n3. strlen是返回字符串的长度，不包含结尾的\\\\0符号，\n\tsizeof运算符对于字符串来说，是返回包括\\\\0的长度。\n\t所以sizeof要减一。\n\n下面再说一下这些函数的效果。（看图也可。）\n\n> 1.strcpy(s1,s2);\n\ns1与s2是形式参数，代表两个字符串，\n通过这个函数我们能够覆盖式地把s2复制粘贴到s1上\n甚至长度不允许也没关系。\n\n关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。\n对于很多的函数是可以通过这种方式记忆的\n其实用多了就自然记住了。\n\n> 2.strcat(s1,s2);\n\ns1,s2作用不再赘述。\n把s2连接到s1的末尾，改变s1。\n可以通过输出看s1的变化，\n\n> 3.strlen(s1)\n> 返回s1的去掉结尾符号的长度，已经讲过。\n\n> 4.strcmp(s1,s2);\n> 从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。\n> 昨晚在直播中学长讲过了。\n> 大小与返回值的关系请见图。\n\n> 5.strpbrk(const char* str1, const char* str2);\n\n\t关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n\n分析第一个字符串的字符，与第二个字符串内的字符比对\n只要找出两个字符串都包含的字符就返回那个字符。\n\n\t很好理解。\n\t比如，\"AABB\"与\"BCDE\"，就会返回B。\n\n> 6.strspn(const char* str1, const char* str2);\n\n也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。\n返回那个字符的下标，注意不是字符。\n\n想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，\n比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。\n这在我刚开始学习C语言的时候就感觉到了。\nPython中的字符串处理有很多的内建函数，处理起来很方便。\n但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。\n所以学好字符串还是很有必要的。\n\n还有一个是 @空梦Kmar 的建议\n尽量使用C标准库函数，这样能够极大地优化程序的效率。\n详细的建议在他的博客里，第一条就是优先使用库函数。\n[关于C语言编码的一些建议 | 山岳库博 (kmar.top)](https://kmar.top/posts/51979312/)\n包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题\n还有用于交换数组排序的swap函数。\n所以学习C语言标准库而不是自己写还是很好的，而且很省事。\n\n\n","date":"2023-11-20T01:47:48.404Z","updated":"2023-11-19T03:51:29.134Z","path":"新建文件夹/基于最近两次直播的知识调研.html","title":"","comments":1,"layout":"page","_id":"clp6949eh000dh4ue8jrfdz3s","content":"<p>最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题<br>今天学习了一些关于字符串、输入输出函数的知识，<br>以及整理了一下昨天晚上直播的重点内容 @21级学长zyb<br>希望能够帮到大家</p>\n<h2 id=\"1-千奇百怪的字符串处理函数\"><a href=\"#1-千奇百怪的字符串处理函数\" class=\"headerlink\" title=\"1.千奇百怪的字符串处理函数\"></a>1.千奇百怪的字符串处理函数</h2><blockquote>\n<p>首先声明，此处使用的函数（如图），需要加入<strong>string.h</strong>标准库<br>加入方式如下</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>![[Pasted image 20231119081701.png]]</p>\n<pre><code> 参考来自菜鸟教程\n(https://www.runoob.com/cprogramming/c-strings.html)\n</code></pre>\n<p>这是我们在平时做题时常用的几个函数，比较易懂。<br>除此之外我还在string.h中为大家多找了几个关于<strong>搜索匹配字符</strong>的。<br>是下面这两个</p>\n<p>![[屏幕截图 2023-11-19 082223.png]]<br>![[Pasted image 20231119082242.png]]<br>（看起来可能参数与返回值都有点吓人，但也就那样。）</p>\n<pre><code> 参考来自菜鸟教程\n (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n</code></pre>\n<p>相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了<br>要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> 标识符[字符串长度];</span><br><span class=\"line\"><span class=\"comment\">//标识符即为名字，字符串长度可以省略。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为字符串赋值的方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[] = <span class=\"string\">&quot;I&#x27;m a string!&quot;</span>;   <span class=\"comment\">//第一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> string2[<span class=\"number\">6</span>] = <span class=\"string\">&quot;Hello!&quot;</span>;        <span class=\"comment\">//第二种方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> string3[<span class=\"number\">10</span>];                  <span class=\"comment\">//第三种方法</span></span><br><span class=\"line\">gets(string3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);                    <span class=\"comment\">//第四种，应该是最常用的一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sprintf(被写入字符串,&quot;写入字符串&quot;，格式化符列表)</span></span><br><span class=\"line\"><span class=\"comment\">//括号的后半部分与printf类似，但是它不是为了输出的。</span></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(string1,<span class=\"string\">&quot;%d&quot;</span>,n);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串输出的方式</span></span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"built_in\">string</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\">\t<span class=\"comment\">//此处n也可以不定义，在使用第一或者第二种方式时</span></span><br><span class=\"line\">\t<span class=\"comment\">//可以使用strlen函数或者sizeof运算符 - 1来代替</span></span><br><span class=\"line\">\t<span class=\"comment\">//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所谓的<strong>字符串</strong>，其实就是[由字符组成，以’ \\0‘为结束的一维数组]。<br>’\\0’标志着字符串输出的结束，\\是<strong>转义符号</strong>，为了提示它不是数字0</p>\n<blockquote>\n<p>注意，对于字符串的scanf都不需要加取地址符&amp;。<br>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。<br>和字符串本身无关。</p>\n</blockquote>\n<p>上面的函数给出了几种给字符串赋值的方式，<br>我觉得你们可能不太好理解的是以下内容：</p>\n<ul>\n<li>gets()与puts()函数的用法</li>\n<li>1000是可以随机的吗</li>\n<li>strlen函数以及sizeof的用法</li>\n</ul>\n<p>这里简单一说</p>\n<ol>\n<li>gets()就是获取一段字符串，在括号中需要加入参数，<br> 参数为字符串（字符数组）<br> puts是把字符串打印出来<br> 其实这两个相似于字符的getchar与putchar</li>\n<li>1000看题目要求，看字符串的最大容量。</li>\n<li>strlen是返回字符串的长度，不包含结尾的\\0符号，<br> sizeof运算符对于字符串来说，是返回包括\\0的长度。<br> 所以sizeof要减一。</li>\n</ol>\n<p>下面再说一下这些函数的效果。（看图也可。）</p>\n<blockquote>\n<p>1.strcpy(s1,s2);</p>\n</blockquote>\n<p>s1与s2是形式参数，代表两个字符串，<br>通过这个函数我们能够覆盖式地把s2复制粘贴到s1上<br>甚至长度不允许也没关系。</p>\n<p>关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。<br>对于很多的函数是可以通过这种方式记忆的<br>其实用多了就自然记住了。</p>\n<blockquote>\n<p>2.strcat(s1,s2);</p>\n</blockquote>\n<p>s1,s2作用不再赘述。<br>把s2连接到s1的末尾，改变s1。<br>可以通过输出看s1的变化，</p>\n<blockquote>\n<p>3.strlen(s1)<br>返回s1的去掉结尾符号的长度，已经讲过。</p>\n</blockquote>\n<blockquote>\n<p>4.strcmp(s1,s2);<br>从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。<br>昨晚在直播中学长讲过了。<br>大小与返回值的关系请见图。</p>\n</blockquote>\n<blockquote>\n<p>5.strpbrk(const char* str1, const char* str2);</p>\n</blockquote>\n<pre><code>关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n</code></pre>\n<p>分析第一个字符串的字符，与第二个字符串内的字符比对<br>只要找出两个字符串都包含的字符就返回那个字符。</p>\n<pre><code>很好理解。\n比如，&quot;AABB&quot;与&quot;BCDE&quot;，就会返回B。\n</code></pre>\n<blockquote>\n<p>6.strspn(const char* str1, const char* str2);</p>\n</blockquote>\n<p>也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。<br>返回那个字符的下标，注意不是字符。</p>\n<p>想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，<br>比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。<br>这在我刚开始学习C语言的时候就感觉到了。<br>Python中的字符串处理有很多的内建函数，处理起来很方便。<br>但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。<br>所以学好字符串还是很有必要的。</p>\n<p>还有一个是 @空梦Kmar 的建议<br>尽量使用C标准库函数，这样能够极大地优化程序的效率。<br>详细的建议在他的博客里，第一条就是优先使用库函数。<br><a href=\"https://kmar.top/posts/51979312/\">关于C语言编码的一些建议 | 山岳库博 (kmar.top)</a><br>包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题<br>还有用于交换数组排序的swap函数。<br>所以学习C语言标准库而不是自己写还是很好的，而且很省事。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题<br>今天学习了一些关于字符串、输入输出函数的知识，<br>以及整理了一下昨天晚上直播的重点内容 @21级学长zyb<br>希望能够帮到大家</p>\n<h2 id=\"1-千奇百怪的字符串处理函数\"><a href=\"#1-千奇百怪的字符串处理函数\" class=\"headerlink\" title=\"1.千奇百怪的字符串处理函数\"></a>1.千奇百怪的字符串处理函数</h2><blockquote>\n<p>首先声明，此处使用的函数（如图），需要加入<strong>string.h</strong>标准库<br>加入方式如下</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>![[Pasted image 20231119081701.png]]</p>\n<pre><code> 参考来自菜鸟教程\n(https://www.runoob.com/cprogramming/c-strings.html)\n</code></pre>\n<p>这是我们在平时做题时常用的几个函数，比较易懂。<br>除此之外我还在string.h中为大家多找了几个关于<strong>搜索匹配字符</strong>的。<br>是下面这两个</p>\n<p>![[屏幕截图 2023-11-19 082223.png]]<br>![[Pasted image 20231119082242.png]]<br>（看起来可能参数与返回值都有点吓人，但也就那样。）</p>\n<pre><code> 参考来自菜鸟教程\n (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n</code></pre>\n<p>相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了<br>要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> 标识符[字符串长度];</span><br><span class=\"line\"><span class=\"comment\">//标识符即为名字，字符串长度可以省略。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为字符串赋值的方式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[] = <span class=\"string\">&quot;I&#x27;m a string!&quot;</span>;   <span class=\"comment\">//第一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> string2[<span class=\"number\">6</span>] = <span class=\"string\">&quot;Hello!&quot;</span>;        <span class=\"comment\">//第二种方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> string3[<span class=\"number\">10</span>];                  <span class=\"comment\">//第三种方法</span></span><br><span class=\"line\">gets(string3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);                    <span class=\"comment\">//第四种，应该是最常用的一种方法</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"built_in\">string</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sprintf(被写入字符串,&quot;写入字符串&quot;，格式化符列表)</span></span><br><span class=\"line\"><span class=\"comment\">//括号的后半部分与printf类似，但是它不是为了输出的。</span></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(string1,<span class=\"string\">&quot;%d&quot;</span>,n);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串输出的方式</span></span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"built_in\">string</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"built_in\">string</span>[i]);</span><br><span class=\"line\">\t<span class=\"comment\">//此处n也可以不定义，在使用第一或者第二种方式时</span></span><br><span class=\"line\">\t<span class=\"comment\">//可以使用strlen函数或者sizeof运算符 - 1来代替</span></span><br><span class=\"line\">\t<span class=\"comment\">//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所谓的<strong>字符串</strong>，其实就是[由字符组成，以’ \\0‘为结束的一维数组]。<br>’\\0’标志着字符串输出的结束，\\是<strong>转义符号</strong>，为了提示它不是数字0</p>\n<blockquote>\n<p>注意，对于字符串的scanf都不需要加取地址符&amp;。<br>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。<br>和字符串本身无关。</p>\n</blockquote>\n<p>上面的函数给出了几种给字符串赋值的方式，<br>我觉得你们可能不太好理解的是以下内容：</p>\n<ul>\n<li>gets()与puts()函数的用法</li>\n<li>1000是可以随机的吗</li>\n<li>strlen函数以及sizeof的用法</li>\n</ul>\n<p>这里简单一说</p>\n<ol>\n<li>gets()就是获取一段字符串，在括号中需要加入参数，<br> 参数为字符串（字符数组）<br> puts是把字符串打印出来<br> 其实这两个相似于字符的getchar与putchar</li>\n<li>1000看题目要求，看字符串的最大容量。</li>\n<li>strlen是返回字符串的长度，不包含结尾的\\0符号，<br> sizeof运算符对于字符串来说，是返回包括\\0的长度。<br> 所以sizeof要减一。</li>\n</ol>\n<p>下面再说一下这些函数的效果。（看图也可。）</p>\n<blockquote>\n<p>1.strcpy(s1,s2);</p>\n</blockquote>\n<p>s1与s2是形式参数，代表两个字符串，<br>通过这个函数我们能够覆盖式地把s2复制粘贴到s1上<br>甚至长度不允许也没关系。</p>\n<p>关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。<br>对于很多的函数是可以通过这种方式记忆的<br>其实用多了就自然记住了。</p>\n<blockquote>\n<p>2.strcat(s1,s2);</p>\n</blockquote>\n<p>s1,s2作用不再赘述。<br>把s2连接到s1的末尾，改变s1。<br>可以通过输出看s1的变化，</p>\n<blockquote>\n<p>3.strlen(s1)<br>返回s1的去掉结尾符号的长度，已经讲过。</p>\n</blockquote>\n<blockquote>\n<p>4.strcmp(s1,s2);<br>从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。<br>昨晚在直播中学长讲过了。<br>大小与返回值的关系请见图。</p>\n</blockquote>\n<blockquote>\n<p>5.strpbrk(const char* str1, const char* str2);</p>\n</blockquote>\n<pre><code>关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n</code></pre>\n<p>分析第一个字符串的字符，与第二个字符串内的字符比对<br>只要找出两个字符串都包含的字符就返回那个字符。</p>\n<pre><code>很好理解。\n比如，&quot;AABB&quot;与&quot;BCDE&quot;，就会返回B。\n</code></pre>\n<blockquote>\n<p>6.strspn(const char* str1, const char* str2);</p>\n</blockquote>\n<p>也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。<br>返回那个字符的下标，注意不是字符。</p>\n<p>想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，<br>比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。<br>这在我刚开始学习C语言的时候就感觉到了。<br>Python中的字符串处理有很多的内建函数，处理起来很方便。<br>但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。<br>所以学好字符串还是很有必要的。</p>\n<p>还有一个是 @空梦Kmar 的建议<br>尽量使用C标准库函数，这样能够极大地优化程序的效率。<br>详细的建议在他的博客里，第一条就是优先使用库函数。<br><a href=\"https://kmar.top/posts/51979312/\">关于C语言编码的一些建议 | 山岳库博 (kmar.top)</a><br>包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题<br>还有用于交换数组排序的swap函数。<br>所以学习C语言标准库而不是自己写还是很好的，而且很省事。</p>\n"},{"_content":"<!DOCTYPE html>\n<html\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>MY First HTML Page</title>\n</head>\n<body>\n\n<script>\ndocument.write(\"<h1>Moniwarmth</h1>\");\ndocument.write(\"<p>And his little cute icon!:)</p>\");\nfunction clickfunction()\n{\n    x = document.getElementById(\"Greetings\");\n    if(x == null)\n      document.write(\"Oops! We don't find the expected text!\");\n    else \n    {\n      alert(\"Hahaha, any problems?\");\n      x.innerHTML = \"Hello Js World!!\";\n    }\n}\nfunction changeImage()\n{\n    element=document.getElementById('myimage')\n    if (element.src.match(\"sit\"))\n    {\n        element.src=\"girl.jpg\";\n    }\n    else\n    {\n        element.src=\"girlsit.gif\";\n    }\n}\n</script>\n\n<p id = \"Greetings\">\n  Hello, this is the first step of my webplaying.\n  Hope that I can stick to it!!\n</p>\n\n<img id=\"myimage\" onclick=\"changeImage()\" src=\"girl.jpg\" width=\"180\" height=\"180\">\n\n<button_type = \"button\" onclick = \"clickfunction()\">点我!(本来在HTML中可以点图片的, 然后会出现一张动态图, 这里被覆盖了 ToT)</button_type>\n\n<img id=\"gifgirl\" src = \"girlsit.gif\" width = \"180\" height = \"180\">\n\n<p>嘿嘿, 这是我的第一个HTML文件,Javascript学习的第一步!! </p>\n</body>\n</html>\n","source":"HTML/index.html","raw":"<!DOCTYPE html>\n<html\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>MY First HTML Page</title>\n</head>\n<body>\n\n<script>\ndocument.write(\"<h1>Moniwarmth</h1>\");\ndocument.write(\"<p>And his little cute icon!:)</p>\");\nfunction clickfunction()\n{\n    x = document.getElementById(\"Greetings\");\n    if(x == null)\n      document.write(\"Oops! We don't find the expected text!\");\n    else \n    {\n      alert(\"Hahaha, any problems?\");\n      x.innerHTML = \"Hello Js World!!\";\n    }\n}\nfunction changeImage()\n{\n    element=document.getElementById('myimage')\n    if (element.src.match(\"sit\"))\n    {\n        element.src=\"girl.jpg\";\n    }\n    else\n    {\n        element.src=\"girlsit.gif\";\n    }\n}\n</script>\n\n<p id = \"Greetings\">\n  Hello, this is the first step of my webplaying.\n  Hope that I can stick to it!!\n</p>\n\n<img id=\"myimage\" onclick=\"changeImage()\" src=\"girl.jpg\" width=\"180\" height=\"180\">\n\n<button_type = \"button\" onclick = \"clickfunction()\">点我!(本来在HTML中可以点图片的, 然后会出现一张动态图, 这里被覆盖了 ToT)</button_type>\n\n<img id=\"gifgirl\" src = \"girlsit.gif\" width = \"180\" height = \"180\">\n\n<p>嘿嘿, 这是我的第一个HTML文件,Javascript学习的第一步!! </p>\n</body>\n</html>\n","date":"2024-01-22T14:36:33.270Z","updated":"2024-01-22T14:36:33.270Z","path":"HTML/index.html","_id":"clrp133pa000058ue976bgz9y","title":"","comments":1,"layout":"page","content":"<!DOCTYPE html>\n<html\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>MY First HTML Page</title>\n</head>\n<body>\n\n<script>\ndocument.write(\"<h1>Moniwarmth</h1>\");\ndocument.write(\"<p>And his little cute icon!:)</p>\");\nfunction clickfunction()\n{\n    x = document.getElementById(\"Greetings\");\n    if(x == null)\n      document.write(\"Oops! We don't find the expected text!\");\n    else \n    {\n      alert(\"Hahaha, any problems?\");\n      x.innerHTML = \"Hello Js World!!\";\n    }\n}\nfunction changeImage()\n{\n    element=document.getElementById('myimage')\n    if (element.src.match(\"sit\"))\n    {\n        element.src=\"girl.jpg\";\n    }\n    else\n    {\n        element.src=\"girlsit.gif\";\n    }\n}\n</script>\n\n<p id = \"Greetings\">\n  Hello, this is the first step of my webplaying.\n  Hope that I can stick to it!!\n</p>\n\n<img id=\"myimage\" onclick=\"changeImage()\" src=\"girl.jpg\" width=\"180\" height=\"180\">\n\n<button_type = \"button\" onclick = \"clickfunction()\">点我!(本来在HTML中可以点图片的, 然后会出现一张动态图, 这里被覆盖了 ToT)</button_type>\n\n<img id=\"gifgirl\" src = \"girlsit.gif\" width = \"180\" height = \"180\">\n\n<p>嘿嘿, 这是我的第一个HTML文件,Javascript学习的第一步!! </p>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>MY First HTML Page</title>\n</head>\n<body>\n\n<script>\ndocument.write(\"<h1>Moniwarmth</h1>\");\ndocument.write(\"<p>And his little cute icon!:)</p>\");\nfunction clickfunction()\n{\n    x = document.getElementById(\"Greetings\");\n    if(x == null)\n      document.write(\"Oops! We don't find the expected text!\");\n    else \n    {\n      alert(\"Hahaha, any problems?\");\n      x.innerHTML = \"Hello Js World!!\";\n    }\n}\nfunction changeImage()\n{\n    element=document.getElementById('myimage')\n    if (element.src.match(\"sit\"))\n    {\n        element.src=\"girl.jpg\";\n    }\n    else\n    {\n        element.src=\"girlsit.gif\";\n    }\n}\n</script>\n\n<p id = \"Greetings\">\n  Hello, this is the first step of my webplaying.\n  Hope that I can stick to it!!\n</p>\n\n<img id=\"myimage\" onclick=\"changeImage()\" src=\"girl.jpg\" width=\"180\" height=\"180\">\n\n<button_type = \"button\" onclick = \"clickfunction()\">点我!(本来在HTML中可以点图片的, 然后会出现一张动态图, 这里被覆盖了 ToT)</button_type>\n\n<img id=\"gifgirl\" src = \"girlsit.gif\" width = \"180\" height = \"180\">\n\n<p>嘿嘿, 这是我的第一个HTML文件,Javascript学习的第一步!! </p>\n</body>\n</html>\n"}],"Post":[{"title":"OJ中的那些小丑行为","date":"2023-11-20T00:55:43.000Z","index_img":"/img/OJclown.png","_content":"在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，\n有些时候错得自己像小丑一样。\n\n![My feelings](/img/OJclown.png)\n\n我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。<!--more-->\n\n1. 编译错误引火线\n+ 复制到做题平台上时复制漏了一些东西。 -不必多讲。\n+ if语句后加了分号，导致出现对于else语句的错误。\n+ 变量重名，或者没改完一些变量的名字。\n+ 忘了一些分号。\n+ int mian（int main）或者stdio打错了\n+ 修改程序的时候忘了关黑框，有时候会不能编译新的文件。\n+ for循环中分号用成逗号\n+ 函数声明与定义部分，都需要对于形式变量的数据类型进行设置。\n\n2. 运行错误引火线\n+ for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加\n\t死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。\n\n3. 程序结果错误引火线\n+ scanf没有加取址符，printf加了取址符\n\tscanf不加的话，就不会对于变量进行赋值操作\n\tprintf加的话，返回的是变量的储存地址，垃圾数据。\n\n+ 部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）\n\t数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。\n\n+ 循环完一次的结果归零。\n\t有些循环比如while进行多实例检测的时候，会执行多个循环，\n\t如果某些计数的变量没有归零，会导致数据很离谱。\n\n+ 判断相等运算符 == 写成赋值运算符 = \n\t建议把变量放后面，值放前面，这样如果犯这个错的话会报错\n\n+ 赋值运算符=的结合性不清楚。\n\t用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。\n\n+ double转int的坑\n\tdouble储存的数据是近似值，切去小数点后有可能数据-1\n\t届时答案对不对完全看你运气。\n\n+ 数据类型对应的格式化符在更改变量类型的时候没有改变。\n\n+ switch语句中漏写了一个break。\n\t直接不受控地向下面的case进发，全部执行，直到遇到新的break。\n\n+ scanf中的格式加空格就算了，别的不要轻易加。\n+ \n+ 多字符输入的时候，注意处理回车与空格，一般用getchar来解决\n\n检查的思路：\n1. 首先基本问题，不要出编译错误，对于一些常见符号要打对\n\t比如，scanf中的&符号，各个语句后面的分号，大括号不要漏一边。\n2. 然后，看修改变量的时候有没有注意类型，\n相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改\n3. 接着看循环，\n对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环\n对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。\n看分支，看if语句的限定是否满足自己想要的条件，是否存在== 写成=的情况。\n看switch语句的break。\n4. 最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。","source":"_posts/OJ中的那些小丑行为.md","raw":"---\ntitle: OJ中的那些小丑行为\ndate: 2023-11-20 08:55:43\ntags: C语言学习\nindex_img: /img/OJclown.png\n---\n在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，\n有些时候错得自己像小丑一样。\n\n![My feelings](/img/OJclown.png)\n\n我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。<!--more-->\n\n1. 编译错误引火线\n+ 复制到做题平台上时复制漏了一些东西。 -不必多讲。\n+ if语句后加了分号，导致出现对于else语句的错误。\n+ 变量重名，或者没改完一些变量的名字。\n+ 忘了一些分号。\n+ int mian（int main）或者stdio打错了\n+ 修改程序的时候忘了关黑框，有时候会不能编译新的文件。\n+ for循环中分号用成逗号\n+ 函数声明与定义部分，都需要对于形式变量的数据类型进行设置。\n\n2. 运行错误引火线\n+ for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加\n\t死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。\n\n3. 程序结果错误引火线\n+ scanf没有加取址符，printf加了取址符\n\tscanf不加的话，就不会对于变量进行赋值操作\n\tprintf加的话，返回的是变量的储存地址，垃圾数据。\n\n+ 部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）\n\t数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。\n\n+ 循环完一次的结果归零。\n\t有些循环比如while进行多实例检测的时候，会执行多个循环，\n\t如果某些计数的变量没有归零，会导致数据很离谱。\n\n+ 判断相等运算符 == 写成赋值运算符 = \n\t建议把变量放后面，值放前面，这样如果犯这个错的话会报错\n\n+ 赋值运算符=的结合性不清楚。\n\t用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。\n\n+ double转int的坑\n\tdouble储存的数据是近似值，切去小数点后有可能数据-1\n\t届时答案对不对完全看你运气。\n\n+ 数据类型对应的格式化符在更改变量类型的时候没有改变。\n\n+ switch语句中漏写了一个break。\n\t直接不受控地向下面的case进发，全部执行，直到遇到新的break。\n\n+ scanf中的格式加空格就算了，别的不要轻易加。\n+ \n+ 多字符输入的时候，注意处理回车与空格，一般用getchar来解决\n\n检查的思路：\n1. 首先基本问题，不要出编译错误，对于一些常见符号要打对\n\t比如，scanf中的&符号，各个语句后面的分号，大括号不要漏一边。\n2. 然后，看修改变量的时候有没有注意类型，\n相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改\n3. 接着看循环，\n对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环\n对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。\n看分支，看if语句的限定是否满足自己想要的条件，是否存在== 写成=的情况。\n看switch语句的break。\n4. 最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。","slug":"OJ中的那些小丑行为","published":1,"updated":"2023-11-21T00:46:35.315Z","_id":"clp6949e90001h4ueadpxanhc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，<br>有些时候错得自己像小丑一样。</p>\n<p><img src=\"/img/OJclown.png\" alt=\"My feelings\"></p>\n<p>我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。<span id=\"more\"></span></p>\n<ol>\n<li>编译错误引火线</li>\n</ol>\n<ul>\n<li>复制到做题平台上时复制漏了一些东西。 -不必多讲。</li>\n<li>if语句后加了分号，导致出现对于else语句的错误。</li>\n<li>变量重名，或者没改完一些变量的名字。</li>\n<li>忘了一些分号。</li>\n<li>int mian（int main）或者stdio打错了</li>\n<li>修改程序的时候忘了关黑框，有时候会不能编译新的文件。</li>\n<li>for循环中分号用成逗号</li>\n<li>函数声明与定义部分，都需要对于形式变量的数据类型进行设置。</li>\n</ul>\n<ol start=\"2\">\n<li>运行错误引火线</li>\n</ol>\n<ul>\n<li>for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加<br>  死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。</li>\n</ul>\n<ol start=\"3\">\n<li>程序结果错误引火线</li>\n</ol>\n<ul>\n<li><p>scanf没有加取址符，printf加了取址符<br>  scanf不加的话，就不会对于变量进行赋值操作<br>  printf加的话，返回的是变量的储存地址，垃圾数据。</p>\n</li>\n<li><p>部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）<br>  数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。</p>\n</li>\n<li><p>循环完一次的结果归零。<br>  有些循环比如while进行多实例检测的时候，会执行多个循环，<br>  如果某些计数的变量没有归零，会导致数据很离谱。</p>\n</li>\n<li><p>判断相等运算符 &#x3D;&#x3D; 写成赋值运算符 &#x3D;<br>  建议把变量放后面，值放前面，这样如果犯这个错的话会报错</p>\n</li>\n<li><p>赋值运算符&#x3D;的结合性不清楚。<br>  用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。</p>\n</li>\n<li><p>double转int的坑<br>  double储存的数据是近似值，切去小数点后有可能数据-1<br>  届时答案对不对完全看你运气。</p>\n</li>\n<li><p>数据类型对应的格式化符在更改变量类型的时候没有改变。</p>\n</li>\n<li><p>switch语句中漏写了一个break。<br>  直接不受控地向下面的case进发，全部执行，直到遇到新的break。</p>\n</li>\n<li><p>scanf中的格式加空格就算了，别的不要轻易加。</p>\n</li>\n<li></li>\n<li><p>多字符输入的时候，注意处理回车与空格，一般用getchar来解决</p>\n</li>\n</ul>\n<p>检查的思路：</p>\n<ol>\n<li>首先基本问题，不要出编译错误，对于一些常见符号要打对<br> 比如，scanf中的&amp;符号，各个语句后面的分号，大括号不要漏一边。</li>\n<li>然后，看修改变量的时候有没有注意类型，<br>相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改</li>\n<li>接着看循环，<br>对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环<br>对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。<br>看分支，看if语句的限定是否满足自己想要的条件，是否存在&#x3D;&#x3D; 写成&#x3D;的情况。<br>看switch语句的break。</li>\n<li>最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，<br>有些时候错得自己像小丑一样。</p>\n<p><img src=\"/img/OJclown.png\" alt=\"My feelings\"></p>\n<p>我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。","more":"</p>\n<ol>\n<li>编译错误引火线</li>\n</ol>\n<ul>\n<li>复制到做题平台上时复制漏了一些东西。 -不必多讲。</li>\n<li>if语句后加了分号，导致出现对于else语句的错误。</li>\n<li>变量重名，或者没改完一些变量的名字。</li>\n<li>忘了一些分号。</li>\n<li>int mian（int main）或者stdio打错了</li>\n<li>修改程序的时候忘了关黑框，有时候会不能编译新的文件。</li>\n<li>for循环中分号用成逗号</li>\n<li>函数声明与定义部分，都需要对于形式变量的数据类型进行设置。</li>\n</ul>\n<ol start=\"2\">\n<li>运行错误引火线</li>\n</ol>\n<ul>\n<li>for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加<br>  死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。</li>\n</ul>\n<ol start=\"3\">\n<li>程序结果错误引火线</li>\n</ol>\n<ul>\n<li><p>scanf没有加取址符，printf加了取址符<br>  scanf不加的话，就不会对于变量进行赋值操作<br>  printf加的话，返回的是变量的储存地址，垃圾数据。</p>\n</li>\n<li><p>部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）<br>  数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。</p>\n</li>\n<li><p>循环完一次的结果归零。<br>  有些循环比如while进行多实例检测的时候，会执行多个循环，<br>  如果某些计数的变量没有归零，会导致数据很离谱。</p>\n</li>\n<li><p>判断相等运算符 &#x3D;&#x3D; 写成赋值运算符 &#x3D;<br>  建议把变量放后面，值放前面，这样如果犯这个错的话会报错</p>\n</li>\n<li><p>赋值运算符&#x3D;的结合性不清楚。<br>  用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。</p>\n</li>\n<li><p>double转int的坑<br>  double储存的数据是近似值，切去小数点后有可能数据-1<br>  届时答案对不对完全看你运气。</p>\n</li>\n<li><p>数据类型对应的格式化符在更改变量类型的时候没有改变。</p>\n</li>\n<li><p>switch语句中漏写了一个break。<br>  直接不受控地向下面的case进发，全部执行，直到遇到新的break。</p>\n</li>\n<li><p>scanf中的格式加空格就算了，别的不要轻易加。</p>\n</li>\n<li></li>\n<li><p>多字符输入的时候，注意处理回车与空格，一般用getchar来解决</p>\n</li>\n</ul>\n<p>检查的思路：</p>\n<ol>\n<li>首先基本问题，不要出编译错误，对于一些常见符号要打对<br> 比如，scanf中的&amp;符号，各个语句后面的分号，大括号不要漏一边。</li>\n<li>然后，看修改变量的时候有没有注意类型，<br>相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改</li>\n<li>接着看循环，<br>对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环<br>对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。<br>看分支，看if语句的限定是否满足自己想要的条件，是否存在&#x3D;&#x3D; 写成&#x3D;的情况。<br>看switch语句的break。</li>\n<li>最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。</li>\n</ol>"},{"title":"千奇百怪的字符串处理函数","date":"2023-11-20T01:46:11.000Z","_content":"最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题\n今天学习了一些关于字符串、输入输出函数的知识，\n以及整理了一下昨天晚上直播的重点内容 @21级学长zyb\n希望能够帮到大家\n<!--more-->\n\n## 千奇百怪的字符串处理函数\n\n>首先声明，此处使用的函数（如图），需要加入**string.h**标准库\n>加入方式如下\n\n```C\n#include <string.h>\n```\n\n![图片](/img/1.png)\n\n\t 参考来自菜鸟教程\n\t(https://www.runoob.com/cprogramming/c-strings.html)\n\n这是我们在平时做题时常用的几个函数，比较易懂。\n除此之外我还在string.h中为大家多找了几个关于**搜索匹配字符**的。\n是下面这两个\n\n![图片1](/img/2.png)\n![图片2](/img/3.png)\n（看起来可能参数与返回值都有点吓人，但也就那样。）\n\n\t 参考来自菜鸟教程\n\t (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n\n相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了\n要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：\n\n```C\n\t//定义方式\n\tchar 标识符[字符串长度];\n\t//标识符即为名字，字符串长度可以省略。\n\n\t//为字符串赋值的方式\n\tchar string[] = \"I'm a string!\";   //第一种方法\n\tchar string2[6] = \"Hello!\";        //第二种方法\n\t\n\tchar string3[10];                  //第三种方法\n\tgets(string3);\n\n\tint n;\n\tscanf(\"%d\",&n);                    //第四种，应该是最常用的一种方法\n\tchar string[1000];\n\tfor(int i = 0;i < n;i++)\n\t\tscanf(\"%c\",&string[i]);\n\n\t//sprintf(被写入字符串,\"写入字符串\"，格式化符列表)\n\t//括号的后半部分与printf类似，但是它不是为了输出的。\n\tint n;\n\tscanf(\"%d\",&n);\n\tsprintf(string1,\"%d\",n);\n\n\t//字符串输出的方式\n\tputs(string);\n\n\tfor(int i = 0;i < n;i++)\n\t\tputchar(string[i]);\n\t\t//此处n也可以不定义，在使用第一或者第二种方式时\n\t\t//可以使用strlen函数或者sizeof运算符 - 1来代替\n\t\t//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不\n\n\t\n```\n\n所谓的**字符串**，其实就是[由字符组成，以’ \\\\0‘为结束的一维数组]。\n’\\\\0'标志着字符串输出的结束，\\是**转义符号**，为了提示它不是数字0\n\n>注意，对于字符串的scanf都不需要加取地址符&。\n>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。\n>和字符串本身无关。\n\n上面的函数给出了几种给字符串赋值的方式，\n我觉得你们可能不太好理解的是以下内容：\n+ gets()与puts()函数的用法\n+ 1000是可以随机的吗\n+ strlen函数以及sizeof的用法\n\n这里简单一说\n1. gets()就是获取一段字符串，在括号中需要加入参数，\n\t参数为字符串（字符数组）\n\tputs是把字符串打印出来\n\t其实这两个相似于字符的getchar与putchar\n2. 1000看题目要求，看字符串的最大容量。\n3. strlen是返回字符串的长度，不包含结尾的\\\\0符号，\n\tsizeof运算符对于字符串来说，是返回包括\\\\0的长度。\n\t所以sizeof要减一。\n\n下面再说一下这些函数的效果。（看图也可。）\n\n> 1.strcpy(s1,s2);\n\ns1与s2是形式参数，代表两个字符串，\n通过这个函数我们能够覆盖式地把s2复制粘贴到s1上\n甚至长度不允许也没关系。\n\n关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。\n对于很多的函数是可以通过这种方式记忆的\n其实用多了就自然记住了。\n\n> 2.strcat(s1,s2);\n\ns1,s2作用不再赘述。\n把s2连接到s1的末尾，改变s1。\n可以通过输出看s1的变化，\n\n> 3.strlen(s1)\n> 返回s1的去掉结尾符号的长度，已经讲过。\n\n> 4.strcmp(s1,s2);\n> 从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。\n> 昨晚在直播中学长讲过了。\n> 大小与返回值的关系请见图。\n\n> 5.strpbrk(const char* str1, const char* str2);\n\n\t关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n\n分析第一个字符串的字符，与第二个字符串内的字符比对\n只要找出两个字符串都包含的字符就返回那个字符。\n\n\t很好理解。\n\t比如，\"AABB\"与\"BCDE\"，就会返回B。\n\n> 6.strspn(const char* str1, const char* str2);\n\n也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。\n返回那个字符的下标，注意不是字符。\n\n想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，\n比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。\n这在我刚开始学习C语言的时候就感觉到了。\nPython中的字符串处理有很多的内建函数，处理起来很方便。\n但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。\n所以学好字符串还是很有必要的。\n\n还有一个是 @空梦Kmar 的建议\n尽量使用C标准库函数，这样能够极大地优化程序的效率。\n详细的建议在他的博客里，第一条就是优先使用库函数。\n[关于C语言编码的一些建议 | 山岳库博 (kmar.top)](https://kmar.top/posts/51979312/)\n包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题\n还有用于交换数组排序的swap函数。\n所以学习C语言标准库而不是自己写还是很好的，而且很省事。\n\n\n","source":"_posts/千奇百怪的字符串处理函数.md","raw":"---\ntitle: 千奇百怪的字符串处理函数\ndate: 2023-11-20 09:46:11\ntags: C语言学习\n---\n最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题\n今天学习了一些关于字符串、输入输出函数的知识，\n以及整理了一下昨天晚上直播的重点内容 @21级学长zyb\n希望能够帮到大家\n<!--more-->\n\n## 千奇百怪的字符串处理函数\n\n>首先声明，此处使用的函数（如图），需要加入**string.h**标准库\n>加入方式如下\n\n```C\n#include <string.h>\n```\n\n![图片](/img/1.png)\n\n\t 参考来自菜鸟教程\n\t(https://www.runoob.com/cprogramming/c-strings.html)\n\n这是我们在平时做题时常用的几个函数，比较易懂。\n除此之外我还在string.h中为大家多找了几个关于**搜索匹配字符**的。\n是下面这两个\n\n![图片1](/img/2.png)\n![图片2](/img/3.png)\n（看起来可能参数与返回值都有点吓人，但也就那样。）\n\n\t 参考来自菜鸟教程\n\t (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n\n相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了\n要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：\n\n```C\n\t//定义方式\n\tchar 标识符[字符串长度];\n\t//标识符即为名字，字符串长度可以省略。\n\n\t//为字符串赋值的方式\n\tchar string[] = \"I'm a string!\";   //第一种方法\n\tchar string2[6] = \"Hello!\";        //第二种方法\n\t\n\tchar string3[10];                  //第三种方法\n\tgets(string3);\n\n\tint n;\n\tscanf(\"%d\",&n);                    //第四种，应该是最常用的一种方法\n\tchar string[1000];\n\tfor(int i = 0;i < n;i++)\n\t\tscanf(\"%c\",&string[i]);\n\n\t//sprintf(被写入字符串,\"写入字符串\"，格式化符列表)\n\t//括号的后半部分与printf类似，但是它不是为了输出的。\n\tint n;\n\tscanf(\"%d\",&n);\n\tsprintf(string1,\"%d\",n);\n\n\t//字符串输出的方式\n\tputs(string);\n\n\tfor(int i = 0;i < n;i++)\n\t\tputchar(string[i]);\n\t\t//此处n也可以不定义，在使用第一或者第二种方式时\n\t\t//可以使用strlen函数或者sizeof运算符 - 1来代替\n\t\t//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不\n\n\t\n```\n\n所谓的**字符串**，其实就是[由字符组成，以’ \\\\0‘为结束的一维数组]。\n’\\\\0'标志着字符串输出的结束，\\是**转义符号**，为了提示它不是数字0\n\n>注意，对于字符串的scanf都不需要加取地址符&。\n>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。\n>和字符串本身无关。\n\n上面的函数给出了几种给字符串赋值的方式，\n我觉得你们可能不太好理解的是以下内容：\n+ gets()与puts()函数的用法\n+ 1000是可以随机的吗\n+ strlen函数以及sizeof的用法\n\n这里简单一说\n1. gets()就是获取一段字符串，在括号中需要加入参数，\n\t参数为字符串（字符数组）\n\tputs是把字符串打印出来\n\t其实这两个相似于字符的getchar与putchar\n2. 1000看题目要求，看字符串的最大容量。\n3. strlen是返回字符串的长度，不包含结尾的\\\\0符号，\n\tsizeof运算符对于字符串来说，是返回包括\\\\0的长度。\n\t所以sizeof要减一。\n\n下面再说一下这些函数的效果。（看图也可。）\n\n> 1.strcpy(s1,s2);\n\ns1与s2是形式参数，代表两个字符串，\n通过这个函数我们能够覆盖式地把s2复制粘贴到s1上\n甚至长度不允许也没关系。\n\n关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。\n对于很多的函数是可以通过这种方式记忆的\n其实用多了就自然记住了。\n\n> 2.strcat(s1,s2);\n\ns1,s2作用不再赘述。\n把s2连接到s1的末尾，改变s1。\n可以通过输出看s1的变化，\n\n> 3.strlen(s1)\n> 返回s1的去掉结尾符号的长度，已经讲过。\n\n> 4.strcmp(s1,s2);\n> 从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。\n> 昨晚在直播中学长讲过了。\n> 大小与返回值的关系请见图。\n\n> 5.strpbrk(const char* str1, const char* str2);\n\n\t关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n\n分析第一个字符串的字符，与第二个字符串内的字符比对\n只要找出两个字符串都包含的字符就返回那个字符。\n\n\t很好理解。\n\t比如，\"AABB\"与\"BCDE\"，就会返回B。\n\n> 6.strspn(const char* str1, const char* str2);\n\n也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。\n返回那个字符的下标，注意不是字符。\n\n想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，\n比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。\n这在我刚开始学习C语言的时候就感觉到了。\nPython中的字符串处理有很多的内建函数，处理起来很方便。\n但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。\n所以学好字符串还是很有必要的。\n\n还有一个是 @空梦Kmar 的建议\n尽量使用C标准库函数，这样能够极大地优化程序的效率。\n详细的建议在他的博客里，第一条就是优先使用库函数。\n[关于C语言编码的一些建议 | 山岳库博 (kmar.top)](https://kmar.top/posts/51979312/)\n包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题\n还有用于交换数组排序的swap函数。\n所以学习C语言标准库而不是自己写还是很好的，而且很省事。\n\n\n","slug":"千奇百怪的字符串处理函数","published":1,"updated":"2023-11-21T00:49:22.634Z","_id":"clp6949ec0003h4ue1pmsf07d","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题<br>今天学习了一些关于字符串、输入输出函数的知识，<br>以及整理了一下昨天晚上直播的重点内容 @21级学长zyb<br>希望能够帮到大家</p>\n<span id=\"more\"></span>\n\n<h2 id=\"千奇百怪的字符串处理函数\"><a href=\"#千奇百怪的字符串处理函数\" class=\"headerlink\" title=\"千奇百怪的字符串处理函数\"></a>千奇百怪的字符串处理函数</h2><blockquote>\n<p>首先声明，此处使用的函数（如图），需要加入<strong>string.h</strong>标准库<br>加入方式如下</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.png\" alt=\"图片\"></p>\n<pre><code class=\"hljs\"> 参考来自菜鸟教程\n(https://www.runoob.com/cprogramming/c-strings.html)\n</code></pre>\n<p>这是我们在平时做题时常用的几个函数，比较易懂。<br>除此之外我还在string.h中为大家多找了几个关于<strong>搜索匹配字符</strong>的。<br>是下面这两个</p>\n<p><img src=\"/img/2.png\" alt=\"图片1\"><br><img src=\"/img/3.png\" alt=\"图片2\"><br>（看起来可能参数与返回值都有点吓人，但也就那样。）</p>\n<pre><code class=\"hljs\"> 参考来自菜鸟教程\n (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n</code></pre>\n<p>相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了<br>要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">//定义方式</span><br><span class=\"hljs-type\">char</span> 标识符[字符串长度];<br><span class=\"hljs-comment\">//标识符即为名字，字符串长度可以省略。</span><br><br><span class=\"hljs-comment\">//为字符串赋值的方式</span><br><span class=\"hljs-type\">char</span> <span class=\"hljs-built_in\">string</span>[] = <span class=\"hljs-string\">&quot;I&#x27;m a string!&quot;</span>;   <span class=\"hljs-comment\">//第一种方法</span><br><span class=\"hljs-type\">char</span> string2[<span class=\"hljs-number\">6</span>] = <span class=\"hljs-string\">&quot;Hello!&quot;</span>;        <span class=\"hljs-comment\">//第二种方法</span><br><br><span class=\"hljs-type\">char</span> string3[<span class=\"hljs-number\">10</span>];                  <span class=\"hljs-comment\">//第三种方法</span><br>gets(string3);<br><br><span class=\"hljs-type\">int</span> n;<br><span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);                    <span class=\"hljs-comment\">//第四种，应该是最常用的一种方法</span><br><span class=\"hljs-type\">char</span> <span class=\"hljs-built_in\">string</span>[<span class=\"hljs-number\">1000</span>];<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; n;i++)<br>\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,&amp;<span class=\"hljs-built_in\">string</span>[i]);<br><br><span class=\"hljs-comment\">//sprintf(被写入字符串,&quot;写入字符串&quot;，格式化符列表)</span><br><span class=\"hljs-comment\">//括号的后半部分与printf类似，但是它不是为了输出的。</span><br><span class=\"hljs-type\">int</span> n;<br><span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br><span class=\"hljs-built_in\">sprintf</span>(string1,<span class=\"hljs-string\">&quot;%d&quot;</span>,n);<br><br><span class=\"hljs-comment\">//字符串输出的方式</span><br><span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-built_in\">string</span>);<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; n;i++)<br>\t<span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-built_in\">string</span>[i]);<br>\t<span class=\"hljs-comment\">//此处n也可以不定义，在使用第一或者第二种方式时</span><br>\t<span class=\"hljs-comment\">//可以使用strlen函数或者sizeof运算符 - 1来代替</span><br>\t<span class=\"hljs-comment\">//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不</span><br><br><br></code></pre></td></tr></table></figure>\n\n<p>所谓的<strong>字符串</strong>，其实就是[由字符组成，以’ \\0‘为结束的一维数组]。<br>’\\0’标志着字符串输出的结束，\\是<strong>转义符号</strong>，为了提示它不是数字0</p>\n<blockquote>\n<p>注意，对于字符串的scanf都不需要加取地址符&amp;。<br>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。<br>和字符串本身无关。</p>\n</blockquote>\n<p>上面的函数给出了几种给字符串赋值的方式，<br>我觉得你们可能不太好理解的是以下内容：</p>\n<ul>\n<li>gets()与puts()函数的用法</li>\n<li>1000是可以随机的吗</li>\n<li>strlen函数以及sizeof的用法</li>\n</ul>\n<p>这里简单一说</p>\n<ol>\n<li>gets()就是获取一段字符串，在括号中需要加入参数，<br> 参数为字符串（字符数组）<br> puts是把字符串打印出来<br> 其实这两个相似于字符的getchar与putchar</li>\n<li>1000看题目要求，看字符串的最大容量。</li>\n<li>strlen是返回字符串的长度，不包含结尾的\\0符号，<br> sizeof运算符对于字符串来说，是返回包括\\0的长度。<br> 所以sizeof要减一。</li>\n</ol>\n<p>下面再说一下这些函数的效果。（看图也可。）</p>\n<blockquote>\n<p>1.strcpy(s1,s2);</p>\n</blockquote>\n<p>s1与s2是形式参数，代表两个字符串，<br>通过这个函数我们能够覆盖式地把s2复制粘贴到s1上<br>甚至长度不允许也没关系。</p>\n<p>关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。<br>对于很多的函数是可以通过这种方式记忆的<br>其实用多了就自然记住了。</p>\n<blockquote>\n<p>2.strcat(s1,s2);</p>\n</blockquote>\n<p>s1,s2作用不再赘述。<br>把s2连接到s1的末尾，改变s1。<br>可以通过输出看s1的变化，</p>\n<blockquote>\n<p>3.strlen(s1)<br>返回s1的去掉结尾符号的长度，已经讲过。</p>\n</blockquote>\n<blockquote>\n<p>4.strcmp(s1,s2);<br>从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。<br>昨晚在直播中学长讲过了。<br>大小与返回值的关系请见图。</p>\n</blockquote>\n<blockquote>\n<p>5.strpbrk(const char* str1, const char* str2);</p>\n</blockquote>\n<pre><code class=\"hljs\">关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n</code></pre>\n<p>分析第一个字符串的字符，与第二个字符串内的字符比对<br>只要找出两个字符串都包含的字符就返回那个字符。</p>\n<pre><code class=\"hljs\">很好理解。\n比如，&quot;AABB&quot;与&quot;BCDE&quot;，就会返回B。\n</code></pre>\n<blockquote>\n<p>6.strspn(const char* str1, const char* str2);</p>\n</blockquote>\n<p>也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。<br>返回那个字符的下标，注意不是字符。</p>\n<p>想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，<br>比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。<br>这在我刚开始学习C语言的时候就感觉到了。<br>Python中的字符串处理有很多的内建函数，处理起来很方便。<br>但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。<br>所以学好字符串还是很有必要的。</p>\n<p>还有一个是 @空梦Kmar 的建议<br>尽量使用C标准库函数，这样能够极大地优化程序的效率。<br>详细的建议在他的博客里，第一条就是优先使用库函数。<br><a href=\"https://kmar.top/posts/51979312/\">关于C语言编码的一些建议 | 山岳库博 (kmar.top)</a><br>包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题<br>还有用于交换数组排序的swap函数。<br>所以学习C语言标准库而不是自己写还是很好的，而且很省事。</p>\n","site":{"data":{}},"excerpt":"<p>最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题<br>今天学习了一些关于字符串、输入输出函数的知识，<br>以及整理了一下昨天晚上直播的重点内容 @21级学长zyb<br>希望能够帮到大家</p>","more":"<h2 id=\"千奇百怪的字符串处理函数\"><a href=\"#千奇百怪的字符串处理函数\" class=\"headerlink\" title=\"千奇百怪的字符串处理函数\"></a>千奇百怪的字符串处理函数</h2><blockquote>\n<p>首先声明，此处使用的函数（如图），需要加入<strong>string.h</strong>标准库<br>加入方式如下</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.png\" alt=\"图片\"></p>\n<pre><code> 参考来自菜鸟教程\n(https://www.runoob.com/cprogramming/c-strings.html)\n</code></pre>\n<p>这是我们在平时做题时常用的几个函数，比较易懂。<br>除此之外我还在string.h中为大家多找了几个关于<strong>搜索匹配字符</strong>的。<br>是下面这两个</p>\n<p><img src=\"/img/2.png\" alt=\"图片1\"><br><img src=\"/img/3.png\" alt=\"图片2\"><br>（看起来可能参数与返回值都有点吓人，但也就那样。）</p>\n<pre><code> 参考来自菜鸟教程\n (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)\n</code></pre>\n<p>相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了<br>要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">//定义方式</span><br><span class=\"hljs-type\">char</span> 标识符[字符串长度];<br><span class=\"hljs-comment\">//标识符即为名字，字符串长度可以省略。</span><br><br><span class=\"hljs-comment\">//为字符串赋值的方式</span><br><span class=\"hljs-type\">char</span> <span class=\"hljs-built_in\">string</span>[] = <span class=\"hljs-string\">&quot;I&#x27;m a string!&quot;</span>;   <span class=\"hljs-comment\">//第一种方法</span><br><span class=\"hljs-type\">char</span> string2[<span class=\"hljs-number\">6</span>] = <span class=\"hljs-string\">&quot;Hello!&quot;</span>;        <span class=\"hljs-comment\">//第二种方法</span><br><br><span class=\"hljs-type\">char</span> string3[<span class=\"hljs-number\">10</span>];                  <span class=\"hljs-comment\">//第三种方法</span><br>gets(string3);<br><br><span class=\"hljs-type\">int</span> n;<br><span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);                    <span class=\"hljs-comment\">//第四种，应该是最常用的一种方法</span><br><span class=\"hljs-type\">char</span> <span class=\"hljs-built_in\">string</span>[<span class=\"hljs-number\">1000</span>];<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; n;i++)<br>\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,&amp;<span class=\"hljs-built_in\">string</span>[i]);<br><br><span class=\"hljs-comment\">//sprintf(被写入字符串,&quot;写入字符串&quot;，格式化符列表)</span><br><span class=\"hljs-comment\">//括号的后半部分与printf类似，但是它不是为了输出的。</span><br><span class=\"hljs-type\">int</span> n;<br><span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br><span class=\"hljs-built_in\">sprintf</span>(string1,<span class=\"hljs-string\">&quot;%d&quot;</span>,n);<br><br><span class=\"hljs-comment\">//字符串输出的方式</span><br><span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-built_in\">string</span>);<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; n;i++)<br>\t<span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-built_in\">string</span>[i]);<br>\t<span class=\"hljs-comment\">//此处n也可以不定义，在使用第一或者第二种方式时</span><br>\t<span class=\"hljs-comment\">//可以使用strlen函数或者sizeof运算符 - 1来代替</span><br>\t<span class=\"hljs-comment\">//len代表length sizeof代表大小，sizeof包含最后的\\0，那个不</span><br><br><br></code></pre></td></tr></table></figure>\n\n<p>所谓的<strong>字符串</strong>，其实就是[由字符组成，以’ \\0‘为结束的一维数组]。<br>’\\0’标志着字符串输出的结束，\\是<strong>转义符号</strong>，为了提示它不是数字0</p>\n<blockquote>\n<p>注意，对于字符串的scanf都不需要加取地址符&amp;。<br>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。<br>和字符串本身无关。</p>\n</blockquote>\n<p>上面的函数给出了几种给字符串赋值的方式，<br>我觉得你们可能不太好理解的是以下内容：</p>\n<ul>\n<li>gets()与puts()函数的用法</li>\n<li>1000是可以随机的吗</li>\n<li>strlen函数以及sizeof的用法</li>\n</ul>\n<p>这里简单一说</p>\n<ol>\n<li>gets()就是获取一段字符串，在括号中需要加入参数，<br> 参数为字符串（字符数组）<br> puts是把字符串打印出来<br> 其实这两个相似于字符的getchar与putchar</li>\n<li>1000看题目要求，看字符串的最大容量。</li>\n<li>strlen是返回字符串的长度，不包含结尾的\\0符号，<br> sizeof运算符对于字符串来说，是返回包括\\0的长度。<br> 所以sizeof要减一。</li>\n</ol>\n<p>下面再说一下这些函数的效果。（看图也可。）</p>\n<blockquote>\n<p>1.strcpy(s1,s2);</p>\n</blockquote>\n<p>s1与s2是形式参数，代表两个字符串，<br>通过这个函数我们能够覆盖式地把s2复制粘贴到s1上<br>甚至长度不允许也没关系。</p>\n<p>关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。<br>对于很多的函数是可以通过这种方式记忆的<br>其实用多了就自然记住了。</p>\n<blockquote>\n<p>2.strcat(s1,s2);</p>\n</blockquote>\n<p>s1,s2作用不再赘述。<br>把s2连接到s1的末尾，改变s1。<br>可以通过输出看s1的变化，</p>\n<blockquote>\n<p>3.strlen(s1)<br>返回s1的去掉结尾符号的长度，已经讲过。</p>\n</blockquote>\n<blockquote>\n<p>4.strcmp(s1,s2);<br>从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。<br>昨晚在直播中学长讲过了。<br>大小与返回值的关系请见图。</p>\n</blockquote>\n<blockquote>\n<p>5.strpbrk(const char* str1, const char* str2);</p>\n</blockquote>\n<pre><code>关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。\n</code></pre>\n<p>分析第一个字符串的字符，与第二个字符串内的字符比对<br>只要找出两个字符串都包含的字符就返回那个字符。</p>\n<pre><code>很好理解。\n比如，&quot;AABB&quot;与&quot;BCDE&quot;，就会返回B。\n</code></pre>\n<blockquote>\n<p>6.strspn(const char* str1, const char* str2);</p>\n</blockquote>\n<p>也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。<br>返回那个字符的下标，注意不是字符。</p>\n<p>想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，<br>比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。<br>这在我刚开始学习C语言的时候就感觉到了。<br>Python中的字符串处理有很多的内建函数，处理起来很方便。<br>但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。<br>所以学好字符串还是很有必要的。</p>\n<p>还有一个是 @空梦Kmar 的建议<br>尽量使用C标准库函数，这样能够极大地优化程序的效率。<br>详细的建议在他的博客里，第一条就是优先使用库函数。<br><a href=\"https://kmar.top/posts/51979312/\">关于C语言编码的一些建议 | 山岳库博 (kmar.top)</a><br>包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题<br>还有用于交换数组排序的swap函数。<br>所以学习C语言标准库而不是自己写还是很好的，而且很省事。</p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-11-07T03:53:23.878Z","updated":"2023-08-30T07:41:06.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clp6949ee0006h4ue8elv9svd","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"数组","date":"2023-11-06T17:32:04.000Z","_content":"# 数组概论（Ver 2）\n\n战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。\n今天大体讲一下关于数组的内容，看完就可以使用来做题了。\n\n目录请见群里发送的图片\n<!--more-->\n\n## 1.数组基本用法\n### 1.1 数组的初始化 \n\n我们知道，要使用一个变量，我们需要先“声明”才能够使用，\n数组也是这样的，但作为一个数据容器，它还有大小这个参数。\n大体格式是这样的。\n\n```C\n\t<数据类型> <标识符>[长度];\n\t//也可以在长度后面加上={}，但是数组不确定的时候，没必要。\n```\n这里的**数据类型**就是我们常用的int,double,char等等，\n表示数组内元素的数据类型\n\n**标识符**是数组的名称，命名时也符合变量的命名规范\n比如这样\n\n>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，\n>不能使用关键字（会语法高亮的字比如int）\n>最好使用这种形式 数据类型的首字母加上名称，如iArray1\n\n**长度**是可以省略的，但只在数组完全确定的时候。\n但是我们在做题的过程中一般不使用确定的数组\n（数组可以预先指定好元素的值，如下例）\n一般是题目告诉我们最多的时候数据有多少个，\n我们一般取很大的数，如1000、10000等。\n像iArray0这样。\n\n```C\n\tint iArray0[1000]; //相信我，这会是你们用的频率最多的那种。\n\tint iArray1[5] = {1,2,3,4,5}; //确定数组\n\tint iArray2[5] = {1,2,3}      //int与double类型都是空位补零。\n\tint iArray3[] = {1,2,3,4,5}   //省略长度，相当于iArray1\n```\n\n其中，对于iArray3，规定了长度，但是没有确定完5个元素，\n其他的元素对于int类型数组用0填上\n但对于char类型的数组，用的是一个字符`\\0`，以后学字符串的时候会接触到\n这个字符提前，那么输出的时候就会提前结束。\n### 1.2 数组的数据储存输出\n\n已经声明完了，那么接下来就是往容器里加入数据\n方式依旧是我们惯用的scanf函数。\n但是这里就要到一个很容易错的点了：**下标**\n先看下面的演示，我们这样来写入数据\n\n```C\n\t//这也是一种惯用模式吧，像今天下午老师总结的那个\n\tfor(int i = 0;i <= n;i++)\n\t{\n\t\tscanf(\"%d\",&iArray0[i])\n\t}\n\t// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉\n```\n\n相信聪明的你已经看到了，我们的**i是从0开始取的**，\n那么`iArray0[0]`也就表示在`iArray0`数组里的第一项，所以最后的一项的下标是n - 1。\n这个特性一定要记好，要好好练习啊！\n（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）\n\n那么也像储存一样，我们也是用printf函数加上for循环来输出的\n（这比起某种语言真的太麻烦啦！差评）\n\n所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。\n## 2.多维数组\n\n也是简单一说，在平常做题的时候这种数组不会很频繁地用到。\n如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。\n就像下面这样\n    0   1   2\n0  \n1  \n2\n二维数组用两个参数确定一个值，\n也就是说在**scanf输入、声明、printf输出**的时候也需要两个括号。\n几维数组就是几个括号，其他的表示方式其实与一维数组差不多。\n\n> 1.空位自动补上对应的数值\n> 2.在数组确定的时候是可以省略长度参数的\n> 3.确定的时候稍有不同，可以有两种确定方式，如下。\n\n```C\n\tint iArray4[1000][1000];  //最常用的,等待输入\n\tint iArray5[2][5] = {{1,2,3,4,5},{2,3,4,5,6}};\n\t//或者int iArray5[2][5] = {1,2,3,4,5,2,3,4,5,6};\n```\n\n## 3.数组的应用场景\n\n从这几次周赛的题目来看，我们使用数组的目的是**储存数据**，\n也就是当我们**需要不止一次地遍历数据，而且数据很多**的时候，我们就可以使用数组。\n（不多的时候，两三个直接用变量存就好了）\n这里拿出两种题，\n一种是n个数求和，我们定义一个sum变量，\n直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。\n但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，\n这就需要遍历数组了，需要在输入之后再次使用所有数据。\n\n所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。\n我的分享到此结束！谢谢大家的时间！\n\n\n\n","source":"_posts/数组-1.md","raw":"---\ntitle: 数组\ndate: 2023-11-07 01:32:04\ntags: C语言学习\n---\n# 数组概论（Ver 2）\n\n战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。\n今天大体讲一下关于数组的内容，看完就可以使用来做题了。\n\n目录请见群里发送的图片\n<!--more-->\n\n## 1.数组基本用法\n### 1.1 数组的初始化 \n\n我们知道，要使用一个变量，我们需要先“声明”才能够使用，\n数组也是这样的，但作为一个数据容器，它还有大小这个参数。\n大体格式是这样的。\n\n```C\n\t<数据类型> <标识符>[长度];\n\t//也可以在长度后面加上={}，但是数组不确定的时候，没必要。\n```\n这里的**数据类型**就是我们常用的int,double,char等等，\n表示数组内元素的数据类型\n\n**标识符**是数组的名称，命名时也符合变量的命名规范\n比如这样\n\n>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，\n>不能使用关键字（会语法高亮的字比如int）\n>最好使用这种形式 数据类型的首字母加上名称，如iArray1\n\n**长度**是可以省略的，但只在数组完全确定的时候。\n但是我们在做题的过程中一般不使用确定的数组\n（数组可以预先指定好元素的值，如下例）\n一般是题目告诉我们最多的时候数据有多少个，\n我们一般取很大的数，如1000、10000等。\n像iArray0这样。\n\n```C\n\tint iArray0[1000]; //相信我，这会是你们用的频率最多的那种。\n\tint iArray1[5] = {1,2,3,4,5}; //确定数组\n\tint iArray2[5] = {1,2,3}      //int与double类型都是空位补零。\n\tint iArray3[] = {1,2,3,4,5}   //省略长度，相当于iArray1\n```\n\n其中，对于iArray3，规定了长度，但是没有确定完5个元素，\n其他的元素对于int类型数组用0填上\n但对于char类型的数组，用的是一个字符`\\0`，以后学字符串的时候会接触到\n这个字符提前，那么输出的时候就会提前结束。\n### 1.2 数组的数据储存输出\n\n已经声明完了，那么接下来就是往容器里加入数据\n方式依旧是我们惯用的scanf函数。\n但是这里就要到一个很容易错的点了：**下标**\n先看下面的演示，我们这样来写入数据\n\n```C\n\t//这也是一种惯用模式吧，像今天下午老师总结的那个\n\tfor(int i = 0;i <= n;i++)\n\t{\n\t\tscanf(\"%d\",&iArray0[i])\n\t}\n\t// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉\n```\n\n相信聪明的你已经看到了，我们的**i是从0开始取的**，\n那么`iArray0[0]`也就表示在`iArray0`数组里的第一项，所以最后的一项的下标是n - 1。\n这个特性一定要记好，要好好练习啊！\n（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）\n\n那么也像储存一样，我们也是用printf函数加上for循环来输出的\n（这比起某种语言真的太麻烦啦！差评）\n\n所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。\n## 2.多维数组\n\n也是简单一说，在平常做题的时候这种数组不会很频繁地用到。\n如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。\n就像下面这样\n    0   1   2\n0  \n1  \n2\n二维数组用两个参数确定一个值，\n也就是说在**scanf输入、声明、printf输出**的时候也需要两个括号。\n几维数组就是几个括号，其他的表示方式其实与一维数组差不多。\n\n> 1.空位自动补上对应的数值\n> 2.在数组确定的时候是可以省略长度参数的\n> 3.确定的时候稍有不同，可以有两种确定方式，如下。\n\n```C\n\tint iArray4[1000][1000];  //最常用的,等待输入\n\tint iArray5[2][5] = {{1,2,3,4,5},{2,3,4,5,6}};\n\t//或者int iArray5[2][5] = {1,2,3,4,5,2,3,4,5,6};\n```\n\n## 3.数组的应用场景\n\n从这几次周赛的题目来看，我们使用数组的目的是**储存数据**，\n也就是当我们**需要不止一次地遍历数据，而且数据很多**的时候，我们就可以使用数组。\n（不多的时候，两三个直接用变量存就好了）\n这里拿出两种题，\n一种是n个数求和，我们定义一个sum变量，\n直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。\n但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，\n这就需要遍历数组了，需要在输入之后再次使用所有数据。\n\n所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。\n我的分享到此结束！谢谢大家的时间！\n\n\n\n","slug":"数组-1","published":1,"updated":"2023-11-21T00:47:42.884Z","_id":"clp6949ef0008h4uefu7l3bey","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数组概论（Ver-2）\"><a href=\"#数组概论（Ver-2）\" class=\"headerlink\" title=\"数组概论（Ver 2）\"></a>数组概论（Ver 2）</h1><p>战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。<br>今天大体讲一下关于数组的内容，看完就可以使用来做题了。</p>\n<p>目录请见群里发送的图片</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-数组基本用法\"><a href=\"#1-数组基本用法\" class=\"headerlink\" title=\"1.数组基本用法\"></a>1.数组基本用法</h2><h3 id=\"1-1-数组的初始化\"><a href=\"#1-1-数组的初始化\" class=\"headerlink\" title=\"1.1 数组的初始化\"></a>1.1 数组的初始化</h3><p>我们知道，要使用一个变量，我们需要先“声明”才能够使用，<br>数组也是这样的，但作为一个数据容器，它还有大小这个参数。<br>大体格式是这样的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">&lt;数据类型&gt; &lt;标识符&gt;[长度];<br><span class=\"hljs-comment\">//也可以在长度后面加上=&#123;&#125;，但是数组不确定的时候，没必要。</span><br></code></pre></td></tr></table></figure>\n<p>这里的<strong>数据类型</strong>就是我们常用的int,double,char等等，<br>表示数组内元素的数据类型</p>\n<p><strong>标识符</strong>是数组的名称，命名时也符合变量的命名规范<br>比如这样</p>\n<blockquote>\n<p>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，<br>不能使用关键字（会语法高亮的字比如int）<br>最好使用这种形式 数据类型的首字母加上名称，如iArray1</p>\n</blockquote>\n<p><strong>长度</strong>是可以省略的，但只在数组完全确定的时候。<br>但是我们在做题的过程中一般不使用确定的数组<br>（数组可以预先指定好元素的值，如下例）<br>一般是题目告诉我们最多的时候数据有多少个，<br>我们一般取很大的数，如1000、10000等。<br>像iArray0这样。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> iArray0[<span class=\"hljs-number\">1000</span>]; <span class=\"hljs-comment\">//相信我，这会是你们用的频率最多的那种。</span><br><span class=\"hljs-type\">int</span> iArray1[<span class=\"hljs-number\">5</span>] = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;; <span class=\"hljs-comment\">//确定数组</span><br><span class=\"hljs-type\">int</span> iArray2[<span class=\"hljs-number\">5</span>] = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>&#125;      <span class=\"hljs-comment\">//int与double类型都是空位补零。</span><br><span class=\"hljs-type\">int</span> iArray3[] = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;   <span class=\"hljs-comment\">//省略长度，相当于iArray1</span><br></code></pre></td></tr></table></figure>\n\n<p>其中，对于iArray3，规定了长度，但是没有确定完5个元素，<br>其他的元素对于int类型数组用0填上<br>但对于char类型的数组，用的是一个字符<code>\\0</code>，以后学字符串的时候会接触到<br>这个字符提前，那么输出的时候就会提前结束。</p>\n<h3 id=\"1-2-数组的数据储存输出\"><a href=\"#1-2-数组的数据储存输出\" class=\"headerlink\" title=\"1.2 数组的数据储存输出\"></a>1.2 数组的数据储存输出</h3><p>已经声明完了，那么接下来就是往容器里加入数据<br>方式依旧是我们惯用的scanf函数。<br>但是这里就要到一个很容易错的点了：<strong>下标</strong><br>先看下面的演示，我们这样来写入数据</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">//这也是一种惯用模式吧，像今天下午老师总结的那个</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt;= n;i++)<br>&#123;<br>\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;iArray0[i])<br>&#125;<br><span class=\"hljs-comment\">// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉</span><br></code></pre></td></tr></table></figure>\n\n<p>相信聪明的你已经看到了，我们的<strong>i是从0开始取的</strong>，<br>那么<code>iArray0[0]</code>也就表示在<code>iArray0</code>数组里的第一项，所以最后的一项的下标是n - 1。<br>这个特性一定要记好，要好好练习啊！<br>（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）</p>\n<p>那么也像储存一样，我们也是用printf函数加上for循环来输出的<br>（这比起某种语言真的太麻烦啦！差评）</p>\n<p>所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。</p>\n<h2 id=\"2-多维数组\"><a href=\"#2-多维数组\" class=\"headerlink\" title=\"2.多维数组\"></a>2.多维数组</h2><p>也是简单一说，在平常做题的时候这种数组不会很频繁地用到。<br>如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。<br>就像下面这样<br>    0   1   2<br>0<br>1<br>2<br>二维数组用两个参数确定一个值，<br>也就是说在<strong>scanf输入、声明、printf输出</strong>的时候也需要两个括号。<br>几维数组就是几个括号，其他的表示方式其实与一维数组差不多。</p>\n<blockquote>\n<p>1.空位自动补上对应的数值<br>2.在数组确定的时候是可以省略长度参数的<br>3.确定的时候稍有不同，可以有两种确定方式，如下。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> iArray4[<span class=\"hljs-number\">1000</span>][<span class=\"hljs-number\">1000</span>];  <span class=\"hljs-comment\">//最常用的,等待输入</span><br><span class=\"hljs-type\">int</span> iArray5[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">5</span>] = &#123;&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;,&#123;<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>&#125;&#125;;<br><span class=\"hljs-comment\">//或者int iArray5[2][5] = &#123;1,2,3,4,5,2,3,4,5,6&#125;;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-数组的应用场景\"><a href=\"#3-数组的应用场景\" class=\"headerlink\" title=\"3.数组的应用场景\"></a>3.数组的应用场景</h2><p>从这几次周赛的题目来看，我们使用数组的目的是<strong>储存数据</strong>，<br>也就是当我们<strong>需要不止一次地遍历数据，而且数据很多</strong>的时候，我们就可以使用数组。<br>（不多的时候，两三个直接用变量存就好了）<br>这里拿出两种题，<br>一种是n个数求和，我们定义一个sum变量，<br>直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。<br>但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，<br>这就需要遍历数组了，需要在输入之后再次使用所有数据。</p>\n<p>所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。<br>我的分享到此结束！谢谢大家的时间！</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"数组概论（Ver-2）\"><a href=\"#数组概论（Ver-2）\" class=\"headerlink\" title=\"数组概论（Ver 2）\"></a>数组概论（Ver 2）</h1><p>战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。<br>今天大体讲一下关于数组的内容，看完就可以使用来做题了。</p>\n<p>目录请见群里发送的图片</p>","more":"<h2 id=\"1-数组基本用法\"><a href=\"#1-数组基本用法\" class=\"headerlink\" title=\"1.数组基本用法\"></a>1.数组基本用法</h2><h3 id=\"1-1-数组的初始化\"><a href=\"#1-1-数组的初始化\" class=\"headerlink\" title=\"1.1 数组的初始化\"></a>1.1 数组的初始化</h3><p>我们知道，要使用一个变量，我们需要先“声明”才能够使用，<br>数组也是这样的，但作为一个数据容器，它还有大小这个参数。<br>大体格式是这样的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">&lt;数据类型&gt; &lt;标识符&gt;[长度];<br><span class=\"hljs-comment\">//也可以在长度后面加上=&#123;&#125;，但是数组不确定的时候，没必要。</span><br></code></pre></td></tr></table></figure>\n<p>这里的<strong>数据类型</strong>就是我们常用的int,double,char等等，<br>表示数组内元素的数据类型</p>\n<p><strong>标识符</strong>是数组的名称，命名时也符合变量的命名规范<br>比如这样</p>\n<blockquote>\n<p>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，<br>不能使用关键字（会语法高亮的字比如int）<br>最好使用这种形式 数据类型的首字母加上名称，如iArray1</p>\n</blockquote>\n<p><strong>长度</strong>是可以省略的，但只在数组完全确定的时候。<br>但是我们在做题的过程中一般不使用确定的数组<br>（数组可以预先指定好元素的值，如下例）<br>一般是题目告诉我们最多的时候数据有多少个，<br>我们一般取很大的数，如1000、10000等。<br>像iArray0这样。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> iArray0[<span class=\"hljs-number\">1000</span>]; <span class=\"hljs-comment\">//相信我，这会是你们用的频率最多的那种。</span><br><span class=\"hljs-type\">int</span> iArray1[<span class=\"hljs-number\">5</span>] = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;; <span class=\"hljs-comment\">//确定数组</span><br><span class=\"hljs-type\">int</span> iArray2[<span class=\"hljs-number\">5</span>] = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>&#125;      <span class=\"hljs-comment\">//int与double类型都是空位补零。</span><br><span class=\"hljs-type\">int</span> iArray3[] = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;   <span class=\"hljs-comment\">//省略长度，相当于iArray1</span><br></code></pre></td></tr></table></figure>\n\n<p>其中，对于iArray3，规定了长度，但是没有确定完5个元素，<br>其他的元素对于int类型数组用0填上<br>但对于char类型的数组，用的是一个字符<code>\\0</code>，以后学字符串的时候会接触到<br>这个字符提前，那么输出的时候就会提前结束。</p>\n<h3 id=\"1-2-数组的数据储存输出\"><a href=\"#1-2-数组的数据储存输出\" class=\"headerlink\" title=\"1.2 数组的数据储存输出\"></a>1.2 数组的数据储存输出</h3><p>已经声明完了，那么接下来就是往容器里加入数据<br>方式依旧是我们惯用的scanf函数。<br>但是这里就要到一个很容易错的点了：<strong>下标</strong><br>先看下面的演示，我们这样来写入数据</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">//这也是一种惯用模式吧，像今天下午老师总结的那个</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt;= n;i++)<br>&#123;<br>\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;iArray0[i])<br>&#125;<br><span class=\"hljs-comment\">// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉</span><br></code></pre></td></tr></table></figure>\n\n<p>相信聪明的你已经看到了，我们的<strong>i是从0开始取的</strong>，<br>那么<code>iArray0[0]</code>也就表示在<code>iArray0</code>数组里的第一项，所以最后的一项的下标是n - 1。<br>这个特性一定要记好，要好好练习啊！<br>（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）</p>\n<p>那么也像储存一样，我们也是用printf函数加上for循环来输出的<br>（这比起某种语言真的太麻烦啦！差评）</p>\n<p>所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。</p>\n<h2 id=\"2-多维数组\"><a href=\"#2-多维数组\" class=\"headerlink\" title=\"2.多维数组\"></a>2.多维数组</h2><p>也是简单一说，在平常做题的时候这种数组不会很频繁地用到。<br>如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。<br>就像下面这样<br>    0   1   2<br>0<br>1<br>2<br>二维数组用两个参数确定一个值，<br>也就是说在<strong>scanf输入、声明、printf输出</strong>的时候也需要两个括号。<br>几维数组就是几个括号，其他的表示方式其实与一维数组差不多。</p>\n<blockquote>\n<p>1.空位自动补上对应的数值<br>2.在数组确定的时候是可以省略长度参数的<br>3.确定的时候稍有不同，可以有两种确定方式，如下。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> iArray4[<span class=\"hljs-number\">1000</span>][<span class=\"hljs-number\">1000</span>];  <span class=\"hljs-comment\">//最常用的,等待输入</span><br><span class=\"hljs-type\">int</span> iArray5[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">5</span>] = &#123;&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;,&#123;<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>&#125;&#125;;<br><span class=\"hljs-comment\">//或者int iArray5[2][5] = &#123;1,2,3,4,5,2,3,4,5,6&#125;;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-数组的应用场景\"><a href=\"#3-数组的应用场景\" class=\"headerlink\" title=\"3.数组的应用场景\"></a>3.数组的应用场景</h2><p>从这几次周赛的题目来看，我们使用数组的目的是<strong>储存数据</strong>，<br>也就是当我们<strong>需要不止一次地遍历数据，而且数据很多</strong>的时候，我们就可以使用数组。<br>（不多的时候，两三个直接用变量存就好了）<br>这里拿出两种题，<br>一种是n个数求和，我们定义一个sum变量，<br>直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。<br>但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，<br>这就需要遍历数组了，需要在输入之后再次使用所有数据。</p>\n<p>所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。<br>我的分享到此结束！谢谢大家的时间！</p>"},{"title":"流程控制方法","date":"2023-08-30T07:54:46.000Z","_content":"今天，在大多数编程语言中，都提供两种循环结构，一种是**以数据容器为基础的**，一种是**以条件为基础的**。\n<!--more-->\n\n\n**if语句**\n==\n你其实能发现，这一页可以构成一个粗略的if嵌套循环。\n\nif语句的最简单构成是\n```Python\nif expression:\n\tstatements\n```\n如果expression返回值为真，则执行statements，否则执行下面的语句。\n\n如果想让它对两种互补的情况操作，\n```Python\nif expression:\n\tstatements_for_true\nelse:\n\tstatements_for_false\n```\n如果有更多的情况\n```Python\nif expression1:\n\tstatements_for_expresson1_True\nelif expression2:\n\tstatements_for_expression2_True\nelif expression2:\n\tstatements_for_expression3_True\n```\n其中，*elif*是*else if*的缩写，用法相同。\n\n\n\n**for循环**\n==\n用来对于数据容器(**尤其是有序容器**)中的数据逐个操作的循环\nfor循环是以集合为基础的循环。\nfor后的‘for i in is’，如果`i in is`为*False*\n即**i无值或is为空的**\n则下面的语句不会被执行。\n\n#continue #break #pass\n\nContinue、Break和Pass语句\n==\n*Continue*语句将忽略其后的语句开始下一次循环。\n*Break*从此结束循环。\n*Pass*什么也不干，是用来占位的。\n\n\nwhile循环\n==\nwhile循环的格式如下\n```Python\nwhile expression:\n\tstatements\n```\n\n","source":"_posts/流程控制方法.md","raw":"---\ntitle: 流程控制方法\ndate: 2023-08-30 15:54:46\ntags:\ncategories:\n\tpython学习\n---\n今天，在大多数编程语言中，都提供两种循环结构，一种是**以数据容器为基础的**，一种是**以条件为基础的**。\n<!--more-->\n\n\n**if语句**\n==\n你其实能发现，这一页可以构成一个粗略的if嵌套循环。\n\nif语句的最简单构成是\n```Python\nif expression:\n\tstatements\n```\n如果expression返回值为真，则执行statements，否则执行下面的语句。\n\n如果想让它对两种互补的情况操作，\n```Python\nif expression:\n\tstatements_for_true\nelse:\n\tstatements_for_false\n```\n如果有更多的情况\n```Python\nif expression1:\n\tstatements_for_expresson1_True\nelif expression2:\n\tstatements_for_expression2_True\nelif expression2:\n\tstatements_for_expression3_True\n```\n其中，*elif*是*else if*的缩写，用法相同。\n\n\n\n**for循环**\n==\n用来对于数据容器(**尤其是有序容器**)中的数据逐个操作的循环\nfor循环是以集合为基础的循环。\nfor后的‘for i in is’，如果`i in is`为*False*\n即**i无值或is为空的**\n则下面的语句不会被执行。\n\n#continue #break #pass\n\nContinue、Break和Pass语句\n==\n*Continue*语句将忽略其后的语句开始下一次循环。\n*Break*从此结束循环。\n*Pass*什么也不干，是用来占位的。\n\n\nwhile循环\n==\nwhile循环的格式如下\n```Python\nwhile expression:\n\tstatements\n```\n\n","slug":"流程控制方法","published":1,"updated":"2023-11-20T12:08:07.183Z","_id":"clp6949eg000ah4ued9g5a9ch","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今天，在大多数编程语言中，都提供两种循环结构，一种是<strong>以数据容器为基础的</strong>，一种是<strong>以条件为基础的</strong>。</p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a><strong>if语句</strong></h1><p>你其实能发现，这一页可以构成一个粗略的if嵌套循环。</p>\n<p>if语句的最简单构成是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">if</span> expression:<br>\tstatements<br></code></pre></td></tr></table></figure>\n<p>如果expression返回值为真，则执行statements，否则执行下面的语句。</p>\n<p>如果想让它对两种互补的情况操作，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">if</span> expression:<br>\tstatements_for_true<br><span class=\"hljs-keyword\">else</span>:<br>\tstatements_for_false<br></code></pre></td></tr></table></figure>\n<p>如果有更多的情况</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">if</span> expression1:<br>\tstatements_for_expresson1_True<br><span class=\"hljs-keyword\">elif</span> expression2:<br>\tstatements_for_expression2_True<br><span class=\"hljs-keyword\">elif</span> expression2:<br>\tstatements_for_expression3_True<br></code></pre></td></tr></table></figure>\n<p>其中，<em>elif</em>是<em>else if</em>的缩写，用法相同。</p>\n<h1 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a><strong>for循环</strong></h1><p>用来对于数据容器(<strong>尤其是有序容器</strong>)中的数据逐个操作的循环<br>for循环是以集合为基础的循环。<br>for后的‘for i in is’，如果<code>i in is</code>为<em>False</em><br>即<strong>i无值或is为空的</strong><br>则下面的语句不会被执行。</p>\n<p>#continue #break #pass</p>\n<h1 id=\"Continue、Break和Pass语句\"><a href=\"#Continue、Break和Pass语句\" class=\"headerlink\" title=\"Continue、Break和Pass语句\"></a>Continue、Break和Pass语句</h1><p><em>Continue</em>语句将忽略其后的语句开始下一次循环。<br><em>Break</em>从此结束循环。<br><em>Pass</em>什么也不干，是用来占位的。</p>\n<h1 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h1><p>while循环的格式如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">while</span> expression:<br>\tstatements<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>今天，在大多数编程语言中，都提供两种循环结构，一种是<strong>以数据容器为基础的</strong>，一种是<strong>以条件为基础的</strong>。</p>","more":"<h1 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a><strong>if语句</strong></h1><p>你其实能发现，这一页可以构成一个粗略的if嵌套循环。</p>\n<p>if语句的最简单构成是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">if</span> expression:<br>\tstatements<br></code></pre></td></tr></table></figure>\n<p>如果expression返回值为真，则执行statements，否则执行下面的语句。</p>\n<p>如果想让它对两种互补的情况操作，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">if</span> expression:<br>\tstatements_for_true<br><span class=\"hljs-keyword\">else</span>:<br>\tstatements_for_false<br></code></pre></td></tr></table></figure>\n<p>如果有更多的情况</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">if</span> expression1:<br>\tstatements_for_expresson1_True<br><span class=\"hljs-keyword\">elif</span> expression2:<br>\tstatements_for_expression2_True<br><span class=\"hljs-keyword\">elif</span> expression2:<br>\tstatements_for_expression3_True<br></code></pre></td></tr></table></figure>\n<p>其中，<em>elif</em>是<em>else if</em>的缩写，用法相同。</p>\n<h1 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a><strong>for循环</strong></h1><p>用来对于数据容器(<strong>尤其是有序容器</strong>)中的数据逐个操作的循环<br>for循环是以集合为基础的循环。<br>for后的‘for i in is’，如果<code>i in is</code>为<em>False</em><br>即<strong>i无值或is为空的</strong><br>则下面的语句不会被执行。</p>\n<p>#continue #break #pass</p>\n<h1 id=\"Continue、Break和Pass语句\"><a href=\"#Continue、Break和Pass语句\" class=\"headerlink\" title=\"Continue、Break和Pass语句\"></a>Continue、Break和Pass语句</h1><p><em>Continue</em>语句将忽略其后的语句开始下一次循环。<br><em>Break</em>从此结束循环。<br><em>Pass</em>什么也不干，是用来占位的。</p>\n<h1 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h1><p>while循环的格式如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">while</span> expression:<br>\tstatements<br></code></pre></td></tr></table></figure>"},{"title":"网站集合","date":"2023-11-20T01:50:34.000Z","_content":"# 总体网站集合\n>1.菜鸟教程 www.runoob.com\n>2.空梦博客 www.kmar.top\n>3.昨日学长的B站号 [@zyoobn]\n>\t学长的CSDN [@郑轻大不知名]\n>4.编程爱好者协会 www.godyu.com\n>\tB站直播号 [@郑轻编程爱好者协会]\n\n看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了\n那网站上没法发帖子，所以我还是自己想办法建个博客吧。\n","source":"_posts/网站集合.md","raw":"---\ntitle: 网站集合\ndate: 2023-11-20 09:50:34\ntags: 学习资源\n---\n# 总体网站集合\n>1.菜鸟教程 www.runoob.com\n>2.空梦博客 www.kmar.top\n>3.昨日学长的B站号 [@zyoobn]\n>\t学长的CSDN [@郑轻大不知名]\n>4.编程爱好者协会 www.godyu.com\n>\tB站直播号 [@郑轻编程爱好者协会]\n\n看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了\n那网站上没法发帖子，所以我还是自己想办法建个博客吧。\n","slug":"网站集合","published":1,"updated":"2023-11-20T01:51:41.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clp6949ei000eh4ue5pz95jko","content":"<h1 id=\"总体网站集合\"><a href=\"#总体网站集合\" class=\"headerlink\" title=\"总体网站集合\"></a>总体网站集合</h1><blockquote>\n<p>1.菜鸟教程 <a href=\"http://www.runoob.com/\">www.runoob.com</a><br>2.空梦博客 <a href=\"http://www.kmar.top/\">www.kmar.top</a><br>3.昨日学长的B站号 [@zyoobn]<br>学长的CSDN [@郑轻大不知名]<br>4.编程爱好者协会 <a href=\"http://www.godyu.com/\">www.godyu.com</a><br>B站直播号 [@郑轻编程爱好者协会]</p>\n</blockquote>\n<p>看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了<br>那网站上没法发帖子，所以我还是自己想办法建个博客吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"总体网站集合\"><a href=\"#总体网站集合\" class=\"headerlink\" title=\"总体网站集合\"></a>总体网站集合</h1><blockquote>\n<p>1.菜鸟教程 <a href=\"http://www.runoob.com/\">www.runoob.com</a><br>2.空梦博客 <a href=\"http://www.kmar.top/\">www.kmar.top</a><br>3.昨日学长的B站号 [@zyoobn]<br>学长的CSDN [@郑轻大不知名]<br>4.编程爱好者协会 <a href=\"http://www.godyu.com/\">www.godyu.com</a><br>B站直播号 [@郑轻编程爱好者协会]</p>\n</blockquote>\n<p>看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了<br>那网站上没法发帖子，所以我还是自己想办法建个博客吧。</p>\n"},{"title":"直播内容复盘-排序与交换","date":"2023-11-20T01:47:02.000Z","_content":"昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归\n我还需要再联系联系，不太能独立写出来。\n那就整理一下昨天晚上听到的一些点.\n<!--more-->\n\n## qsort函数的用法以及swap函数\n> 首先声明，需要添加stdlib库\n\n上定义\n```C\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\n```\n\n这个定义有点太复杂，我们可以把它特殊化处理\n\n```C\nvoid qsort(排序数组,排序个数，sizeof(数组数据类型)，排序规则(cmp));\n```\n\n这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。\n\n因为我们学习过全局变量，所以这个注意事项也好懂\n\n> 这个数组必须是全局的，即必须在预处理之后，主函数之前定义。\n\n因为这样数组才对qsort函数“可见“。\n\ncmp函数需要自己写，写的思路用到了指针，不过照抄就好。\n\n```C\nint cmp (const void * a, const void * b)  \n{  \n   return ( *(int*)a - *(int*)b );  \n}\n//先强转为对应类型的指针，然后再相减，\n//a-b为从小到大，b-a为从大到小\n```\n\n如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。\n\n所以这就是qsort库函数的用法。\n\n还有是swap函数，可以在我们写排序的时候用到。\n可以交换数组内的数据，非常好用。\n形式如下\n```C\nswap(&a,&b);\n```\n到用的时候可以把a和b换成数组的元素，如array[1].\n可以便捷地实现交换。\n这个函数实际上自己写也可以。\n\n这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。\n\n","source":"_posts/直播内容复盘-排序与交换.md","raw":"---\ntitle: 直播内容复盘-排序与交换\ndate: 2023-11-20 09:47:02\ntags: C语言学习\n---\n昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归\n我还需要再联系联系，不太能独立写出来。\n那就整理一下昨天晚上听到的一些点.\n<!--more-->\n\n## qsort函数的用法以及swap函数\n> 首先声明，需要添加stdlib库\n\n上定义\n```C\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\n```\n\n这个定义有点太复杂，我们可以把它特殊化处理\n\n```C\nvoid qsort(排序数组,排序个数，sizeof(数组数据类型)，排序规则(cmp));\n```\n\n这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。\n\n因为我们学习过全局变量，所以这个注意事项也好懂\n\n> 这个数组必须是全局的，即必须在预处理之后，主函数之前定义。\n\n因为这样数组才对qsort函数“可见“。\n\ncmp函数需要自己写，写的思路用到了指针，不过照抄就好。\n\n```C\nint cmp (const void * a, const void * b)  \n{  \n   return ( *(int*)a - *(int*)b );  \n}\n//先强转为对应类型的指针，然后再相减，\n//a-b为从小到大，b-a为从大到小\n```\n\n如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。\n\n所以这就是qsort库函数的用法。\n\n还有是swap函数，可以在我们写排序的时候用到。\n可以交换数组内的数据，非常好用。\n形式如下\n```C\nswap(&a,&b);\n```\n到用的时候可以把a和b换成数组的元素，如array[1].\n可以便捷地实现交换。\n这个函数实际上自己写也可以。\n\n这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。\n\n","slug":"直播内容复盘-排序与交换","published":1,"updated":"2023-11-21T00:47:39.701Z","_id":"clp6949ej000hh4uehbf3397k","comments":1,"layout":"post","photos":[],"link":"","content":"<p>昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归<br>我还需要再联系联系，不太能独立写出来。<br>那就整理一下昨天晚上听到的一些点.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"qsort函数的用法以及swap函数\"><a href=\"#qsort函数的用法以及swap函数\" class=\"headerlink\" title=\"qsort函数的用法以及swap函数\"></a>qsort函数的用法以及swap函数</h2><blockquote>\n<p>首先声明，需要添加stdlib库</p>\n</blockquote>\n<p>上定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">qsort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *base, <span class=\"hljs-type\">size_t</span> nitems, <span class=\"hljs-type\">size_t</span> size, <span class=\"hljs-type\">int</span> (*compar)(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span> *, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span>*))</span><br></code></pre></td></tr></table></figure>\n\n<p>这个定义有点太复杂，我们可以把它特殊化处理</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">qsort</span><span class=\"hljs-params\">(排序数组,排序个数，<span class=\"hljs-keyword\">sizeof</span>(数组数据类型)，排序规则(cmp))</span>;<br></code></pre></td></tr></table></figure>\n\n<p>这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。</p>\n<p>因为我们学习过全局变量，所以这个注意事项也好懂</p>\n<blockquote>\n<p>这个数组必须是全局的，即必须在预处理之后，主函数之前定义。</p>\n</blockquote>\n<p>因为这样数组才对qsort函数“可见“。</p>\n<p>cmp函数需要自己写，写的思路用到了指针，不过照抄就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span> * a, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span> * b)</span>  <br>&#123;  <br>   <span class=\"hljs-keyword\">return</span> ( *(<span class=\"hljs-type\">int</span>*)a - *(<span class=\"hljs-type\">int</span>*)b );  <br>&#125;<br><span class=\"hljs-comment\">//先强转为对应类型的指针，然后再相减，</span><br><span class=\"hljs-comment\">//a-b为从小到大，b-a为从大到小</span><br></code></pre></td></tr></table></figure>\n\n<p>如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。</p>\n<p>所以这就是qsort库函数的用法。</p>\n<p>还有是swap函数，可以在我们写排序的时候用到。<br>可以交换数组内的数据，非常好用。<br>形式如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">swap(&amp;a,&amp;b);<br></code></pre></td></tr></table></figure>\n<p>到用的时候可以把a和b换成数组的元素，如array[1].<br>可以便捷地实现交换。<br>这个函数实际上自己写也可以。</p>\n<p>这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。</p>\n","site":{"data":{}},"excerpt":"<p>昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归<br>我还需要再联系联系，不太能独立写出来。<br>那就整理一下昨天晚上听到的一些点.</p>","more":"<h2 id=\"qsort函数的用法以及swap函数\"><a href=\"#qsort函数的用法以及swap函数\" class=\"headerlink\" title=\"qsort函数的用法以及swap函数\"></a>qsort函数的用法以及swap函数</h2><blockquote>\n<p>首先声明，需要添加stdlib库</p>\n</blockquote>\n<p>上定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">qsort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *base, <span class=\"hljs-type\">size_t</span> nitems, <span class=\"hljs-type\">size_t</span> size, <span class=\"hljs-type\">int</span> (*compar)(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span> *, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span>*))</span><br></code></pre></td></tr></table></figure>\n\n<p>这个定义有点太复杂，我们可以把它特殊化处理</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">qsort</span><span class=\"hljs-params\">(排序数组,排序个数，<span class=\"hljs-keyword\">sizeof</span>(数组数据类型)，排序规则(cmp))</span>;<br></code></pre></td></tr></table></figure>\n\n<p>这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。</p>\n<p>因为我们学习过全局变量，所以这个注意事项也好懂</p>\n<blockquote>\n<p>这个数组必须是全局的，即必须在预处理之后，主函数之前定义。</p>\n</blockquote>\n<p>因为这样数组才对qsort函数“可见“。</p>\n<p>cmp函数需要自己写，写的思路用到了指针，不过照抄就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span> * a, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span> * b)</span>  <br>&#123;  <br>   <span class=\"hljs-keyword\">return</span> ( *(<span class=\"hljs-type\">int</span>*)a - *(<span class=\"hljs-type\">int</span>*)b );  <br>&#125;<br><span class=\"hljs-comment\">//先强转为对应类型的指针，然后再相减，</span><br><span class=\"hljs-comment\">//a-b为从小到大，b-a为从大到小</span><br></code></pre></td></tr></table></figure>\n\n<p>如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。</p>\n<p>所以这就是qsort库函数的用法。</p>\n<p>还有是swap函数，可以在我们写排序的时候用到。<br>可以交换数组内的数据，非常好用。<br>形式如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">swap(&amp;a,&amp;b);<br></code></pre></td></tr></table></figure>\n<p>到用的时候可以把a和b换成数组的元素，如array[1].<br>可以便捷地实现交换。<br>这个函数实际上自己写也可以。</p>\n<p>这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。</p>"},{"title":"输入与输出","date":"2023-11-20T01:46:35.000Z","_content":"从字符串那里，包括之前听C语言群里大佬说\n也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。\n今天也一并分享给大家。<!--more-->\n\n## 1.stdio.h中的更多的函数\n(关于stream与参数列表的不讲，还没学到。)\n\n类似的，应该你们也听说过，这里列一下。\n\n```C\nint sprintf(char *str, const char *format);\nint sscanf(const char *str, const char *format, ...);\n```\n### 一.函数定义读法\n\n这里是纯纯的函数函数定义，看起来可能很抽象，\n**没关系，我会出手。**\n\n总体上一讲，以后见到**前面带f**的一般是有关`stream`的\n**带v的**一般是有关`参数列表`的，\n以后看到学长写类似的函数就知道该多学习了!😂\n\n对于以后看这样的函数定义，首先看[返回值类型]，\n一般是，返回处理的结果或者返回一个数值（int/double)\n\n然后如果看不懂函数名的话，\n先看[括号中的形式参数]，知道我们需要输入的是什么东西。\n\n>比如这两个函数中\n>**const**是数据类型的修饰符，表示常量。\n>char* 表示字符串、后面的是形式参数名，不需要管。\n\n最后，通过[看实例]与函数的[概述]得知函数的作用。\n在菜鸟教程里都一条一条地列出来的，每一条都有实例。\n\n在最后一篇文章的最后会给大家列出来用过的这些网站。\n\n### 二.浅谈没讲过的sscanf()函数\n\n上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。\n现在就来讲一讲相对的sscanf函数。\n\n不多说，直接上函数定义。\n```C\nint sscanf(const char *str, const char *format, ...);\n```\n\n首先看**返回值**\n这个函数返回的是一个数值，也就像scanf一样\n函数返回的是成功赋值与匹配的个数。\n如果到达文件末尾或者错误返回EOF。\n\n然后看**形参**\n获取的是字符串常量(`const char *str`)，\n\t这个字符串，是包含着我们想要赋值数据的字符串。\n写入形式(`const char *format`)\n\t写入形式相当于格式化符，相当于赋值的顺序）\n\t尽量不要加新的形式。\n与参数列表(`...`)。\n\t对应之前的格式化符。\n关于参数列表，其实简单的说\n就是我们printf中标准符后边逗号中的内容\n见下方。\n\n```C\nint a,b,c;\nscanf(\"%d %d %d\",&a,&b,&c);\n//后面的a,b,c就是参数列表\n//%d的这个字符串就是写入形式的一种形式\n```\n\n所以这个函数的**功能**就是\n>1.从字符串中获取数据，\n>2.然后赋给格式化符的对应的变量。\n\nsscanf不需要我们自己输入，在字符串中有就好。\n\n所以更多的惯例自己去菜鸟教程上查就好，\n**建议立即行动，不然一定会忘记。**\n\n## 二.关于我们的输入输出\n\n>以下内容取自空梦大大的博客\n>[如何理解c/c++中的输入/输出函数？ | 山岳库博](https://kmar.top/posts/51c9b0a0/)\n>我们这里梳理的是，我们这个阶段可以用到的符号。\n\n### 1.关于格式化符与printf、scanf修饰符\n\n格式化符我们需要知道的如下，之前在题中也出过。\n\t1. %d/%lf/%f/%c 整数、字符、浮点数\n\t2. %s 字符串输入与输出。\n\t3. %x/%X - 十六进制整数 或者 %o 八进制整数\n\t4. %%两个百分号一起用可以输出%号，相当于转义了。\n%%\n掌握了这些我们就不太用怕需要的数据表示不出来了。\n现在看来老师教的还是不是很够，第一个都用过时了。\n\n## printf修饰符\n1. 加数字，右对齐字符宽度。-实例：`printf(\"%4d\",n);`\n2. .数字，对于小数表示小数后位数，比如`%.3lf`\n\t对于字符串是打印字符的最大数量\n\t只使用点%.f与%.0f相同。\n3. 使用ll表示long long `%lld`\n4. 使用l，对于整型表示long int，对于浮点型表示double\n5. 各种标记：\n\t1. 在数字前加符号为左对齐\n\t2. + 是为了把在有符号数开头加'+'或者'-'。\n\t3. 加0对于多于的字段宽度填充0，如`%04d`\n\t\t对于1，返回的是0001.\n\t\t4.加入 * 决定填入数字，\n\t\t需要在参数列表中新加入一个变量。\n\t\t 常见形式为`%*lf`\n\n## scanf修饰符\n1. * 只读取不赋值，这对于无用数据是有用处的 形式为类似`%*d`\n\td可以任意换，以下的所有实例中的d都可以换成其他类型\n2. 同样的加数字为取字段的宽，有多长取多长，别的截掉。\n\n这就是最近关于输入输出想和大家分享的内容。\n\n\n\n","source":"_posts/输入与输出.md","raw":"---\ntitle: 输入与输出\ndate: 2023-11-20 09:46:35\ntags: C语言学习\n---\n从字符串那里，包括之前听C语言群里大佬说\n也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。\n今天也一并分享给大家。<!--more-->\n\n## 1.stdio.h中的更多的函数\n(关于stream与参数列表的不讲，还没学到。)\n\n类似的，应该你们也听说过，这里列一下。\n\n```C\nint sprintf(char *str, const char *format);\nint sscanf(const char *str, const char *format, ...);\n```\n### 一.函数定义读法\n\n这里是纯纯的函数函数定义，看起来可能很抽象，\n**没关系，我会出手。**\n\n总体上一讲，以后见到**前面带f**的一般是有关`stream`的\n**带v的**一般是有关`参数列表`的，\n以后看到学长写类似的函数就知道该多学习了!😂\n\n对于以后看这样的函数定义，首先看[返回值类型]，\n一般是，返回处理的结果或者返回一个数值（int/double)\n\n然后如果看不懂函数名的话，\n先看[括号中的形式参数]，知道我们需要输入的是什么东西。\n\n>比如这两个函数中\n>**const**是数据类型的修饰符，表示常量。\n>char* 表示字符串、后面的是形式参数名，不需要管。\n\n最后，通过[看实例]与函数的[概述]得知函数的作用。\n在菜鸟教程里都一条一条地列出来的，每一条都有实例。\n\n在最后一篇文章的最后会给大家列出来用过的这些网站。\n\n### 二.浅谈没讲过的sscanf()函数\n\n上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。\n现在就来讲一讲相对的sscanf函数。\n\n不多说，直接上函数定义。\n```C\nint sscanf(const char *str, const char *format, ...);\n```\n\n首先看**返回值**\n这个函数返回的是一个数值，也就像scanf一样\n函数返回的是成功赋值与匹配的个数。\n如果到达文件末尾或者错误返回EOF。\n\n然后看**形参**\n获取的是字符串常量(`const char *str`)，\n\t这个字符串，是包含着我们想要赋值数据的字符串。\n写入形式(`const char *format`)\n\t写入形式相当于格式化符，相当于赋值的顺序）\n\t尽量不要加新的形式。\n与参数列表(`...`)。\n\t对应之前的格式化符。\n关于参数列表，其实简单的说\n就是我们printf中标准符后边逗号中的内容\n见下方。\n\n```C\nint a,b,c;\nscanf(\"%d %d %d\",&a,&b,&c);\n//后面的a,b,c就是参数列表\n//%d的这个字符串就是写入形式的一种形式\n```\n\n所以这个函数的**功能**就是\n>1.从字符串中获取数据，\n>2.然后赋给格式化符的对应的变量。\n\nsscanf不需要我们自己输入，在字符串中有就好。\n\n所以更多的惯例自己去菜鸟教程上查就好，\n**建议立即行动，不然一定会忘记。**\n\n## 二.关于我们的输入输出\n\n>以下内容取自空梦大大的博客\n>[如何理解c/c++中的输入/输出函数？ | 山岳库博](https://kmar.top/posts/51c9b0a0/)\n>我们这里梳理的是，我们这个阶段可以用到的符号。\n\n### 1.关于格式化符与printf、scanf修饰符\n\n格式化符我们需要知道的如下，之前在题中也出过。\n\t1. %d/%lf/%f/%c 整数、字符、浮点数\n\t2. %s 字符串输入与输出。\n\t3. %x/%X - 十六进制整数 或者 %o 八进制整数\n\t4. %%两个百分号一起用可以输出%号，相当于转义了。\n%%\n掌握了这些我们就不太用怕需要的数据表示不出来了。\n现在看来老师教的还是不是很够，第一个都用过时了。\n\n## printf修饰符\n1. 加数字，右对齐字符宽度。-实例：`printf(\"%4d\",n);`\n2. .数字，对于小数表示小数后位数，比如`%.3lf`\n\t对于字符串是打印字符的最大数量\n\t只使用点%.f与%.0f相同。\n3. 使用ll表示long long `%lld`\n4. 使用l，对于整型表示long int，对于浮点型表示double\n5. 各种标记：\n\t1. 在数字前加符号为左对齐\n\t2. + 是为了把在有符号数开头加'+'或者'-'。\n\t3. 加0对于多于的字段宽度填充0，如`%04d`\n\t\t对于1，返回的是0001.\n\t\t4.加入 * 决定填入数字，\n\t\t需要在参数列表中新加入一个变量。\n\t\t 常见形式为`%*lf`\n\n## scanf修饰符\n1. * 只读取不赋值，这对于无用数据是有用处的 形式为类似`%*d`\n\td可以任意换，以下的所有实例中的d都可以换成其他类型\n2. 同样的加数字为取字段的宽，有多长取多长，别的截掉。\n\n这就是最近关于输入输出想和大家分享的内容。\n\n\n\n","slug":"输入与输出","published":1,"updated":"2023-11-20T12:08:42.375Z","_id":"clp6949ej000kh4ueecp51kz7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>从字符串那里，包括之前听C语言群里大佬说<br>也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。<br>今天也一并分享给大家。<span id=\"more\"></span></p>\n<h2 id=\"1-stdio-h中的更多的函数\"><a href=\"#1-stdio-h中的更多的函数\" class=\"headerlink\" title=\"1.stdio.h中的更多的函数\"></a>1.stdio.h中的更多的函数</h2><p>(关于stream与参数列表的不讲，还没学到。)</p>\n<p>类似的，应该你们也听说过，这里列一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sprintf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *format)</span>;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sscanf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *format, ...)</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"一-函数定义读法\"><a href=\"#一-函数定义读法\" class=\"headerlink\" title=\"一.函数定义读法\"></a>一.函数定义读法</h3><p>这里是纯纯的函数函数定义，看起来可能很抽象，<br><strong>没关系，我会出手。</strong></p>\n<p>总体上一讲，以后见到<strong>前面带f</strong>的一般是有关<code>stream</code>的<br><strong>带v的</strong>一般是有关<code>参数列表</code>的，<br>以后看到学长写类似的函数就知道该多学习了!😂</p>\n<p>对于以后看这样的函数定义，首先看[返回值类型]，<br>一般是，返回处理的结果或者返回一个数值（int&#x2F;double)</p>\n<p>然后如果看不懂函数名的话，<br>先看[括号中的形式参数]，知道我们需要输入的是什么东西。</p>\n<blockquote>\n<p>比如这两个函数中<br><strong>const</strong>是数据类型的修饰符，表示常量。<br>char* 表示字符串、后面的是形式参数名，不需要管。</p>\n</blockquote>\n<p>最后，通过[看实例]与函数的[概述]得知函数的作用。<br>在菜鸟教程里都一条一条地列出来的，每一条都有实例。</p>\n<p>在最后一篇文章的最后会给大家列出来用过的这些网站。</p>\n<h3 id=\"二-浅谈没讲过的sscanf-函数\"><a href=\"#二-浅谈没讲过的sscanf-函数\" class=\"headerlink\" title=\"二.浅谈没讲过的sscanf()函数\"></a>二.浅谈没讲过的sscanf()函数</h3><p>上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。<br>现在就来讲一讲相对的sscanf函数。</p>\n<p>不多说，直接上函数定义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sscanf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *format, ...)</span>;<br></code></pre></td></tr></table></figure>\n\n<p>首先看<strong>返回值</strong><br>这个函数返回的是一个数值，也就像scanf一样<br>函数返回的是成功赋值与匹配的个数。<br>如果到达文件末尾或者错误返回EOF。</p>\n<p>然后看<strong>形参</strong><br>获取的是字符串常量(<code>const char *str</code>)，<br>    这个字符串，是包含着我们想要赋值数据的字符串。<br>写入形式(<code>const char *format</code>)<br>    写入形式相当于格式化符，相当于赋值的顺序）<br>    尽量不要加新的形式。<br>与参数列表(<code>...</code>)。<br>    对应之前的格式化符。<br>关于参数列表，其实简单的说<br>就是我们printf中标准符后边逗号中的内容<br>见下方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> a,b,c;<br><span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);<br><span class=\"hljs-comment\">//后面的a,b,c就是参数列表</span><br><span class=\"hljs-comment\">//%d的这个字符串就是写入形式的一种形式</span><br></code></pre></td></tr></table></figure>\n\n<p>所以这个函数的<strong>功能</strong>就是</p>\n<blockquote>\n<p>1.从字符串中获取数据，<br>2.然后赋给格式化符的对应的变量。</p>\n</blockquote>\n<p>sscanf不需要我们自己输入，在字符串中有就好。</p>\n<p>所以更多的惯例自己去菜鸟教程上查就好，<br><strong>建议立即行动，不然一定会忘记。</strong></p>\n<h2 id=\"二-关于我们的输入输出\"><a href=\"#二-关于我们的输入输出\" class=\"headerlink\" title=\"二.关于我们的输入输出\"></a>二.关于我们的输入输出</h2><blockquote>\n<p>以下内容取自空梦大大的博客<br><a href=\"https://kmar.top/posts/51c9b0a0/\">如何理解c&#x2F;c++中的输入&#x2F;输出函数？ | 山岳库博</a><br>我们这里梳理的是，我们这个阶段可以用到的符号。</p>\n</blockquote>\n<h3 id=\"1-关于格式化符与printf、scanf修饰符\"><a href=\"#1-关于格式化符与printf、scanf修饰符\" class=\"headerlink\" title=\"1.关于格式化符与printf、scanf修饰符\"></a>1.关于格式化符与printf、scanf修饰符</h3><p>格式化符我们需要知道的如下，之前在题中也出过。<br>    1. %d&#x2F;%lf&#x2F;%f&#x2F;%c 整数、字符、浮点数<br>    2. %s 字符串输入与输出。<br>    3. %x&#x2F;%X - 十六进制整数 或者 %o 八进制整数<br>    4. %%两个百分号一起用可以输出%号，相当于转义了。<br>%%<br>掌握了这些我们就不太用怕需要的数据表示不出来了。<br>现在看来老师教的还是不是很够，第一个都用过时了。</p>\n<h2 id=\"printf修饰符\"><a href=\"#printf修饰符\" class=\"headerlink\" title=\"printf修饰符\"></a>printf修饰符</h2><ol>\n<li>加数字，右对齐字符宽度。-实例：<code>printf(&quot;%4d&quot;,n);</code></li>\n<li>.数字，对于小数表示小数后位数，比如<code>%.3lf</code><br> 对于字符串是打印字符的最大数量<br> 只使用点%.f与%.0f相同。</li>\n<li>使用ll表示long long <code>%lld</code></li>\n<li>使用l，对于整型表示long int，对于浮点型表示double</li>\n<li>各种标记：<ol>\n<li>在数字前加符号为左对齐</li>\n<li><ul>\n<li>是为了把在有符号数开头加’+’或者’-‘。</li>\n</ul>\n</li>\n<li>加0对于多于的字段宽度填充0，如<code>%04d</code><br> 对于1，返回的是0001.<br> 4.加入 * 决定填入数字，<br> 需要在参数列表中新加入一个变量。<br>  常见形式为<code>%*lf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"scanf修饰符\"><a href=\"#scanf修饰符\" class=\"headerlink\" title=\"scanf修饰符\"></a>scanf修饰符</h2><ol>\n<li><ul>\n<li>只读取不赋值，这对于无用数据是有用处的 形式为类似<code>%*d</code><br> d可以任意换，以下的所有实例中的d都可以换成其他类型</li>\n</ul>\n</li>\n<li>同样的加数字为取字段的宽，有多长取多长，别的截掉。</li>\n</ol>\n<p>这就是最近关于输入输出想和大家分享的内容。</p>\n","site":{"data":{}},"excerpt":"<p>从字符串那里，包括之前听C语言群里大佬说<br>也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。<br>今天也一并分享给大家。","more":"</p>\n<h2 id=\"1-stdio-h中的更多的函数\"><a href=\"#1-stdio-h中的更多的函数\" class=\"headerlink\" title=\"1.stdio.h中的更多的函数\"></a>1.stdio.h中的更多的函数</h2><p>(关于stream与参数列表的不讲，还没学到。)</p>\n<p>类似的，应该你们也听说过，这里列一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sprintf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *format)</span>;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sscanf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *format, ...)</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"一-函数定义读法\"><a href=\"#一-函数定义读法\" class=\"headerlink\" title=\"一.函数定义读法\"></a>一.函数定义读法</h3><p>这里是纯纯的函数函数定义，看起来可能很抽象，<br><strong>没关系，我会出手。</strong></p>\n<p>总体上一讲，以后见到<strong>前面带f</strong>的一般是有关<code>stream</code>的<br><strong>带v的</strong>一般是有关<code>参数列表</code>的，<br>以后看到学长写类似的函数就知道该多学习了!😂</p>\n<p>对于以后看这样的函数定义，首先看[返回值类型]，<br>一般是，返回处理的结果或者返回一个数值（int&#x2F;double)</p>\n<p>然后如果看不懂函数名的话，<br>先看[括号中的形式参数]，知道我们需要输入的是什么东西。</p>\n<blockquote>\n<p>比如这两个函数中<br><strong>const</strong>是数据类型的修饰符，表示常量。<br>char* 表示字符串、后面的是形式参数名，不需要管。</p>\n</blockquote>\n<p>最后，通过[看实例]与函数的[概述]得知函数的作用。<br>在菜鸟教程里都一条一条地列出来的，每一条都有实例。</p>\n<p>在最后一篇文章的最后会给大家列出来用过的这些网站。</p>\n<h3 id=\"二-浅谈没讲过的sscanf-函数\"><a href=\"#二-浅谈没讲过的sscanf-函数\" class=\"headerlink\" title=\"二.浅谈没讲过的sscanf()函数\"></a>二.浅谈没讲过的sscanf()函数</h3><p>上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。<br>现在就来讲一讲相对的sscanf函数。</p>\n<p>不多说，直接上函数定义。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sscanf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *format, ...)</span>;<br></code></pre></td></tr></table></figure>\n\n<p>首先看<strong>返回值</strong><br>这个函数返回的是一个数值，也就像scanf一样<br>函数返回的是成功赋值与匹配的个数。<br>如果到达文件末尾或者错误返回EOF。</p>\n<p>然后看<strong>形参</strong><br>获取的是字符串常量(<code>const char *str</code>)，<br>    这个字符串，是包含着我们想要赋值数据的字符串。<br>写入形式(<code>const char *format</code>)<br>    写入形式相当于格式化符，相当于赋值的顺序）<br>    尽量不要加新的形式。<br>与参数列表(<code>...</code>)。<br>    对应之前的格式化符。<br>关于参数列表，其实简单的说<br>就是我们printf中标准符后边逗号中的内容<br>见下方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> a,b,c;<br><span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);<br><span class=\"hljs-comment\">//后面的a,b,c就是参数列表</span><br><span class=\"hljs-comment\">//%d的这个字符串就是写入形式的一种形式</span><br></code></pre></td></tr></table></figure>\n\n<p>所以这个函数的<strong>功能</strong>就是</p>\n<blockquote>\n<p>1.从字符串中获取数据，<br>2.然后赋给格式化符的对应的变量。</p>\n</blockquote>\n<p>sscanf不需要我们自己输入，在字符串中有就好。</p>\n<p>所以更多的惯例自己去菜鸟教程上查就好，<br><strong>建议立即行动，不然一定会忘记。</strong></p>\n<h2 id=\"二-关于我们的输入输出\"><a href=\"#二-关于我们的输入输出\" class=\"headerlink\" title=\"二.关于我们的输入输出\"></a>二.关于我们的输入输出</h2><blockquote>\n<p>以下内容取自空梦大大的博客<br><a href=\"https://kmar.top/posts/51c9b0a0/\">如何理解c&#x2F;c++中的输入&#x2F;输出函数？ | 山岳库博</a><br>我们这里梳理的是，我们这个阶段可以用到的符号。</p>\n</blockquote>\n<h3 id=\"1-关于格式化符与printf、scanf修饰符\"><a href=\"#1-关于格式化符与printf、scanf修饰符\" class=\"headerlink\" title=\"1.关于格式化符与printf、scanf修饰符\"></a>1.关于格式化符与printf、scanf修饰符</h3><p>格式化符我们需要知道的如下，之前在题中也出过。<br>    1. %d&#x2F;%lf&#x2F;%f&#x2F;%c 整数、字符、浮点数<br>    2. %s 字符串输入与输出。<br>    3. %x&#x2F;%X - 十六进制整数 或者 %o 八进制整数<br>    4. %%两个百分号一起用可以输出%号，相当于转义了。<br>%%<br>掌握了这些我们就不太用怕需要的数据表示不出来了。<br>现在看来老师教的还是不是很够，第一个都用过时了。</p>\n<h2 id=\"printf修饰符\"><a href=\"#printf修饰符\" class=\"headerlink\" title=\"printf修饰符\"></a>printf修饰符</h2><ol>\n<li>加数字，右对齐字符宽度。-实例：<code>printf(&quot;%4d&quot;,n);</code></li>\n<li>.数字，对于小数表示小数后位数，比如<code>%.3lf</code><br> 对于字符串是打印字符的最大数量<br> 只使用点%.f与%.0f相同。</li>\n<li>使用ll表示long long <code>%lld</code></li>\n<li>使用l，对于整型表示long int，对于浮点型表示double</li>\n<li>各种标记：<ol>\n<li>在数字前加符号为左对齐</li>\n<li><ul>\n<li>是为了把在有符号数开头加’+’或者’-‘。</li>\n</ul>\n</li>\n<li>加0对于多于的字段宽度填充0，如<code>%04d</code><br> 对于1，返回的是0001.<br> 4.加入 * 决定填入数字，<br> 需要在参数列表中新加入一个变量。<br>  常见形式为<code>%*lf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"scanf修饰符\"><a href=\"#scanf修饰符\" class=\"headerlink\" title=\"scanf修饰符\"></a>scanf修饰符</h2><ol>\n<li><ul>\n<li>只读取不赋值，这对于无用数据是有用处的 形式为类似<code>%*d</code><br> d可以任意换，以下的所有实例中的d都可以换成其他类型</li>\n</ul>\n</li>\n<li>同样的加数字为取字段的宽，有多长取多长，别的截掉。</li>\n</ol>\n<p>这就是最近关于输入输出想和大家分享的内容。</p>"},{"title":"C语言练习7讲解","date":"2023-11-24T13:37:44.000Z","_content":"可能因为课题的深入吧，我们的题目难度也与日俱增。今天关于数组的题目有些很值得讲的，今天和大家分享一下我的看法。\n<!--more-->\n\n## 逆序\n\n因为今天上午已经学过并且讲过，所以这题没啥好说的。\n从0到n - 1输入数组，从n - 1到0输出数组。\n两个for循环搞定。\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tint array[11];     //1-10 略大一点，留有余地。\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\tfor(int i = n - 1;i > 0;i--)\n\t{\n\t\tprintf(\"%4d\",array[i]);\n\t}\n\treturn 0;\n}\n```\n\n## 数组最小值\n\n审题得：题目的要求是求最小值以及其下标，然后输出下标最小的一个\n最小值我们知道怎么求，一个for循环搞定。\n其实因为你找到了第一个值，把它设置为最小值之后，\n就算另一个值与它相等，我们找的是比它小的数，而不是相等，\n相当于没关系了。\n\n那么开写\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n, min, iPosit;\n\tint array[1001]\n\tscanf(\"%d\",&n);\n\t\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\tmin = array[0];\n\tfor(int i = 1;i < n;i++)\n\t{\n\t\tif(min > array[i])\n\t\t{\n\t\t\tmin = array[i];\n\t\t\tiPosit = i;\n\t\t}\n\t}\n\tprintf(\"%d %d\",min,iPosit);\n\treturn 0;\n}\n```\n\n数组n个输入的模版-仅供参考。\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n;\n\tint array[101]\n\tscanf(\"%d\",&n);\n\t\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\t//...\n\treturn 0;\n}\n```\n\n## 删除元素：\n\n在直播中我们只讲函数，思路今天上午已经讲过了。\n\n一个是PrintArr，相信不太用多说\n```C\nvoid PrintArr(int a[], int n)\n{\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tprint(\"%d\", a[i]);\n\t}\n}\n```\n\n另一个就是我们的del函数，用的是覆盖的思路。\n```C\nvoid del(int a[], int n, int i)\n{\n\tfor(int k = i;k < n - 1;k++)\n\t{\n\t\ta[k] = a[k + 1];\n\t}\n}\n```\n\n今天下午看到我们小伙伴有对调用时数组的形式不太理解的，\n这里说一下。\n我们调用函数的时候参数填入的是数组的名称\n比如我们调用del函数时，我们是这样写的。\n\n```C\n\tdel(array, n, k);\n\t//array为数组名，n为长度，k是要删除的下标。\n```\n\n不需要加中括号，那样的话指向的就是数组中的元素了。\n比如array[10]，甚至我们数组中没有这个元素，那样就会导致**运行错误**\n余下就执行函数就好，注意PrintArr在覆盖之后输出n - 1的值。\n因为数组在覆盖之后最后一个值与倒数第二个值是相等的。\n\n```C\n#include <stdio.h>\n \nvoid del(int a[], int n, int i);\nvoid PrintArr(int a[],int n);\n \nint main(void)\n{\n    int n, k;\n    int array[10];\n    scanf(\"%d\", &n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d\",&k);\n    del(array, n, k);\n    PrintArr(array, n - 1);\n    return 0;\n}\n \nvoid del(int a[], int n, int i)\n{\n    for(int k = i;k < n - 1;k++)\n    {\n        a[k] = a[k + 1]; \n    }\n}\n \nvoid PrintArr(int a[], int n)\n{\n    for(int i = 0;i < n;i++)\n    {\n        printf(\"%d \", a[i]);\n    }\n}\n```\n\n数组元素\n\n下一题，加入一个find函数，在主函数中加入一个if判断找不找的到就好\n找的到，返回i，找不到，返回-1.\n\n[find函数]\n```C\nint find(int a[], int n, int x)\n{\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tif(x == a[i]) return i; \n\t}\n\treturn -1;\n}\n```\n\n后面判断一下find的值是不是大于0即可。\n\n## 路旁的树\n\n一条数轴，相当于一个一维数组。\n维度这个概念其实是与数轴相关的。\n如果平面直角坐标系的话一般就会用二维数组，\n像天梯赛模拟题的炎爆那道题\n\n思路是，首先把每个元素初始化成2\n注意今天上午老师讲的那个错误，\n如\n```C\n\tint array[1001] = {2}\n```\n不要犯这种错误。\n正确的是用for循环把n个元素的值赋为2\n\n这题应该挺简单的。\n也就是多次下把这个区间上的元素全部**降为0**。\n（注意不是-2，这样区间重叠就成负的了。）\n\n然后再定义一个sum变量，再一个一个地加。\n最后输出值即可。\n代码如下。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, N, sum = 0, x, y;\n    int array[1001];\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&N);\n \n    for(int i = 0;i < n;i++)\n    {\n        array[i] = 2;\n    }\n \n    for(int i = 0;i < N;i++)\n    {\n        scanf(\"%d %d\",&x,&y);\n        for(int i = x - 1;i <= y - 1;i++)\n        {\n            array[i] = 0;\n        }\n    }\n    for(int i = 0;i < n;i++)\n    {\n        sum += array[i];\n    }\n    printf(\"%d\",sum);\n    return 0;\n}\n```\n\n## 按分数段统计学生人数\n\n简单的循环题，但是被强行地转成了数组题。\n如果输入的t在输入成绩之前这就是循环了，我们都比较擅长。\n直接输入数据，然后用for循环一个一个比对，\n造一个初始值为0的变量，然后如果大于等于那个值就加一。\n最后输出就好。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, gradelimit, num = 0;\n    int array[101];\n    scanf(\"%d\",&n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d\",&gradelimit);\n    for(int i = 0;i < n;i++)\n    {\n        if(array[i] >= gradelimit) num += 1;\n    }\n    printf(\"%d\",num);\n    return 0;\n}\n```\n\n# 两道比较难的题目\n\n## 1.区间元素和\n\n这道题难在判断的条件多，\n我在做的时候没有想到left与right小于0的情况，\n所以没有做对，但是后来结合志鹏的解答也给出了简单点的答案。\n但是不太好理解，你们要是觉得不好懂看志鹏的就好。\n虽然用的是C++，你们看条件就好。\n\n![志鹏同学的答案](/img/22cf517c3686de1119cf1f156160bd4.jpg)\n（std::cin就相当于我们的scanf，std::cout就相当于我们的printf）\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, left, right;\n    long long sum = 0;\n    int array[101];\n    scanf(\"%d\",&n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d %d\",&left, &right);\n    if(left < n)\n    {\n        for(int i = left;i <= right;i++)\n        {\n            if(i < n && i >= 0)\n                sum += array[i];\n        }\n        printf(\"%d\",sum);\n    }\n    else printf(\"%lld\",0);\n    return 0;\n}\n```\n\n确保left是小于n的，那么两个集合就一定有交集。\n然后保证加的是在0到n - 1上的元素（数组内的）。\n\n## 找出旷课的人\n\n先放代码，直播讲\n\n```C\n#include <stdio.h>\n \nvoid Sort(int a[], int n)\n{\n    int t;\n    for(int i = 0;i < n - 1;i++)\n    {\n        for(int j = i;j < n;j++)\n        {\n            if(a[i] > a[j])\n            {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}\n \nint main(void)\n{\n    int m, n, flag, count = 0, l = 0;\n    int array1[10001];\n    int array2[10001];\n    int array3[10001];\n    scanf(\"%d %d\",&m, &n);\n \n    for(int i = 0;i < m;i++)\n    {\n        scanf(\"%d\",&array1[i]);\n    }\n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array2[i]);\n    }\n \n    for(int i = 0;i < m;i++)\n    {\n        flag = 0;\n        for(int j = 0;j < n;j++)\n        {\n            if(array1[i] == array2[j])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0)\n        {\n            array3[l] = array1[i];\n            count += 1;\n            l++;\n        }\n    }\n     \n    if(count == 0) printf(\"good\\n\"); \n    else\n    {\n        Sort(array3, l);\n        for(int i = 0;i < l;i ++)\n        {\n            printf(\"%d \", array3[i]);\n        }\n    }\n    return 0;\n}\n```\n\n一次模块化的实践，但我当时很怕时间超限。。\n由几个部分组成\n判断相等-加入数组-排序（冒泡）-输出。\n\n## 宿舍的选择\n\n很简单的一道题，关于long long，只是为了防止越界吧。\n判断宿舍可住人数与目前的人数的差，然后与学长的人数相比就好。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int m,n,p,q;\n    long long count = 0;\n    scanf(\"%d\",&m);\n    scanf(\"%d\",&n);\n    for(int i = 0;i < m;i++)\n    {\n        scanf(\"%d %d\",&p,&q);\n        if((q - p) > n)\n            count += 1;\n    }\n \n    printf(\"%d\",count);\n    return 0;\n}\n```\n\n最后说说，这几道题还是很好地帮助我们锻炼了循环那边的知识\n也帮我们抓起来了现在刚学的数组，\n通过写题也得到了一些数学模型上的思考，挺好的。","source":"_posts/C语言练习7讲解.md","raw":"---\ntitle: C语言练习7讲解\ndate: 2023-11-24 21:37:44\ntags: C语言学习\n---\n可能因为课题的深入吧，我们的题目难度也与日俱增。今天关于数组的题目有些很值得讲的，今天和大家分享一下我的看法。\n<!--more-->\n\n## 逆序\n\n因为今天上午已经学过并且讲过，所以这题没啥好说的。\n从0到n - 1输入数组，从n - 1到0输出数组。\n两个for循环搞定。\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tint array[11];     //1-10 略大一点，留有余地。\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\tfor(int i = n - 1;i > 0;i--)\n\t{\n\t\tprintf(\"%4d\",array[i]);\n\t}\n\treturn 0;\n}\n```\n\n## 数组最小值\n\n审题得：题目的要求是求最小值以及其下标，然后输出下标最小的一个\n最小值我们知道怎么求，一个for循环搞定。\n其实因为你找到了第一个值，把它设置为最小值之后，\n就算另一个值与它相等，我们找的是比它小的数，而不是相等，\n相当于没关系了。\n\n那么开写\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n, min, iPosit;\n\tint array[1001]\n\tscanf(\"%d\",&n);\n\t\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\tmin = array[0];\n\tfor(int i = 1;i < n;i++)\n\t{\n\t\tif(min > array[i])\n\t\t{\n\t\t\tmin = array[i];\n\t\t\tiPosit = i;\n\t\t}\n\t}\n\tprintf(\"%d %d\",min,iPosit);\n\treturn 0;\n}\n```\n\n数组n个输入的模版-仅供参考。\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint n;\n\tint array[101]\n\tscanf(\"%d\",&n);\n\t\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tscanf(\"%d\",&array[i]);\n\t}\n\t//...\n\treturn 0;\n}\n```\n\n## 删除元素：\n\n在直播中我们只讲函数，思路今天上午已经讲过了。\n\n一个是PrintArr，相信不太用多说\n```C\nvoid PrintArr(int a[], int n)\n{\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tprint(\"%d\", a[i]);\n\t}\n}\n```\n\n另一个就是我们的del函数，用的是覆盖的思路。\n```C\nvoid del(int a[], int n, int i)\n{\n\tfor(int k = i;k < n - 1;k++)\n\t{\n\t\ta[k] = a[k + 1];\n\t}\n}\n```\n\n今天下午看到我们小伙伴有对调用时数组的形式不太理解的，\n这里说一下。\n我们调用函数的时候参数填入的是数组的名称\n比如我们调用del函数时，我们是这样写的。\n\n```C\n\tdel(array, n, k);\n\t//array为数组名，n为长度，k是要删除的下标。\n```\n\n不需要加中括号，那样的话指向的就是数组中的元素了。\n比如array[10]，甚至我们数组中没有这个元素，那样就会导致**运行错误**\n余下就执行函数就好，注意PrintArr在覆盖之后输出n - 1的值。\n因为数组在覆盖之后最后一个值与倒数第二个值是相等的。\n\n```C\n#include <stdio.h>\n \nvoid del(int a[], int n, int i);\nvoid PrintArr(int a[],int n);\n \nint main(void)\n{\n    int n, k;\n    int array[10];\n    scanf(\"%d\", &n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d\",&k);\n    del(array, n, k);\n    PrintArr(array, n - 1);\n    return 0;\n}\n \nvoid del(int a[], int n, int i)\n{\n    for(int k = i;k < n - 1;k++)\n    {\n        a[k] = a[k + 1]; \n    }\n}\n \nvoid PrintArr(int a[], int n)\n{\n    for(int i = 0;i < n;i++)\n    {\n        printf(\"%d \", a[i]);\n    }\n}\n```\n\n数组元素\n\n下一题，加入一个find函数，在主函数中加入一个if判断找不找的到就好\n找的到，返回i，找不到，返回-1.\n\n[find函数]\n```C\nint find(int a[], int n, int x)\n{\n\tfor(int i = 0;i < n;i++)\n\t{\n\t\tif(x == a[i]) return i; \n\t}\n\treturn -1;\n}\n```\n\n后面判断一下find的值是不是大于0即可。\n\n## 路旁的树\n\n一条数轴，相当于一个一维数组。\n维度这个概念其实是与数轴相关的。\n如果平面直角坐标系的话一般就会用二维数组，\n像天梯赛模拟题的炎爆那道题\n\n思路是，首先把每个元素初始化成2\n注意今天上午老师讲的那个错误，\n如\n```C\n\tint array[1001] = {2}\n```\n不要犯这种错误。\n正确的是用for循环把n个元素的值赋为2\n\n这题应该挺简单的。\n也就是多次下把这个区间上的元素全部**降为0**。\n（注意不是-2，这样区间重叠就成负的了。）\n\n然后再定义一个sum变量，再一个一个地加。\n最后输出值即可。\n代码如下。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, N, sum = 0, x, y;\n    int array[1001];\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&N);\n \n    for(int i = 0;i < n;i++)\n    {\n        array[i] = 2;\n    }\n \n    for(int i = 0;i < N;i++)\n    {\n        scanf(\"%d %d\",&x,&y);\n        for(int i = x - 1;i <= y - 1;i++)\n        {\n            array[i] = 0;\n        }\n    }\n    for(int i = 0;i < n;i++)\n    {\n        sum += array[i];\n    }\n    printf(\"%d\",sum);\n    return 0;\n}\n```\n\n## 按分数段统计学生人数\n\n简单的循环题，但是被强行地转成了数组题。\n如果输入的t在输入成绩之前这就是循环了，我们都比较擅长。\n直接输入数据，然后用for循环一个一个比对，\n造一个初始值为0的变量，然后如果大于等于那个值就加一。\n最后输出就好。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, gradelimit, num = 0;\n    int array[101];\n    scanf(\"%d\",&n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d\",&gradelimit);\n    for(int i = 0;i < n;i++)\n    {\n        if(array[i] >= gradelimit) num += 1;\n    }\n    printf(\"%d\",num);\n    return 0;\n}\n```\n\n# 两道比较难的题目\n\n## 1.区间元素和\n\n这道题难在判断的条件多，\n我在做的时候没有想到left与right小于0的情况，\n所以没有做对，但是后来结合志鹏的解答也给出了简单点的答案。\n但是不太好理解，你们要是觉得不好懂看志鹏的就好。\n虽然用的是C++，你们看条件就好。\n\n![志鹏同学的答案](/img/22cf517c3686de1119cf1f156160bd4.jpg)\n（std::cin就相当于我们的scanf，std::cout就相当于我们的printf）\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int n, left, right;\n    long long sum = 0;\n    int array[101];\n    scanf(\"%d\",&n);\n \n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n \n    scanf(\"%d %d\",&left, &right);\n    if(left < n)\n    {\n        for(int i = left;i <= right;i++)\n        {\n            if(i < n && i >= 0)\n                sum += array[i];\n        }\n        printf(\"%d\",sum);\n    }\n    else printf(\"%lld\",0);\n    return 0;\n}\n```\n\n确保left是小于n的，那么两个集合就一定有交集。\n然后保证加的是在0到n - 1上的元素（数组内的）。\n\n## 找出旷课的人\n\n先放代码，直播讲\n\n```C\n#include <stdio.h>\n \nvoid Sort(int a[], int n)\n{\n    int t;\n    for(int i = 0;i < n - 1;i++)\n    {\n        for(int j = i;j < n;j++)\n        {\n            if(a[i] > a[j])\n            {\n                t = a[i];\n                a[i] = a[j];\n                a[j] = t;\n            }\n        }\n    }\n}\n \nint main(void)\n{\n    int m, n, flag, count = 0, l = 0;\n    int array1[10001];\n    int array2[10001];\n    int array3[10001];\n    scanf(\"%d %d\",&m, &n);\n \n    for(int i = 0;i < m;i++)\n    {\n        scanf(\"%d\",&array1[i]);\n    }\n    for(int i = 0;i < n;i++)\n    {\n        scanf(\"%d\",&array2[i]);\n    }\n \n    for(int i = 0;i < m;i++)\n    {\n        flag = 0;\n        for(int j = 0;j < n;j++)\n        {\n            if(array1[i] == array2[j])\n            {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0)\n        {\n            array3[l] = array1[i];\n            count += 1;\n            l++;\n        }\n    }\n     \n    if(count == 0) printf(\"good\\n\"); \n    else\n    {\n        Sort(array3, l);\n        for(int i = 0;i < l;i ++)\n        {\n            printf(\"%d \", array3[i]);\n        }\n    }\n    return 0;\n}\n```\n\n一次模块化的实践，但我当时很怕时间超限。。\n由几个部分组成\n判断相等-加入数组-排序（冒泡）-输出。\n\n## 宿舍的选择\n\n很简单的一道题，关于long long，只是为了防止越界吧。\n判断宿舍可住人数与目前的人数的差，然后与学长的人数相比就好。\n\n```C\n#include <stdio.h>\n \nint main(void)\n{\n    int m,n,p,q;\n    long long count = 0;\n    scanf(\"%d\",&m);\n    scanf(\"%d\",&n);\n    for(int i = 0;i < m;i++)\n    {\n        scanf(\"%d %d\",&p,&q);\n        if((q - p) > n)\n            count += 1;\n    }\n \n    printf(\"%d\",count);\n    return 0;\n}\n```\n\n最后说说，这几道题还是很好地帮助我们锻炼了循环那边的知识\n也帮我们抓起来了现在刚学的数组，\n通过写题也得到了一些数学模型上的思考，挺好的。","slug":"C语言练习7讲解","published":1,"updated":"2023-11-27T13:22:41.862Z","_id":"clpco7urr0000q8ue7v140asa","comments":1,"layout":"post","photos":[],"link":"","content":"<p>可能因为课题的深入吧，我们的题目难度也与日俱增。今天关于数组的题目有些很值得讲的，今天和大家分享一下我的看法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"逆序\"><a href=\"#逆序\" class=\"headerlink\" title=\"逆序\"></a>逆序</h2><p>因为今天上午已经学过并且讲过，所以这题没啥好说的。<br>从0到n - 1输入数组，从n - 1到0输出数组。<br>两个for循环搞定。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">11</span>];     <span class=\"comment\">//1-10 略大一点，留有余地。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%4d&quot;</span>,<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组最小值\"><a href=\"#数组最小值\" class=\"headerlink\" title=\"数组最小值\"></a>数组最小值</h2><p>审题得：题目的要求是求最小值以及其下标，然后输出下标最小的一个<br>最小值我们知道怎么求，一个for循环搞定。<br>其实因为你找到了第一个值，把它设置为最小值之后，<br>就算另一个值与它相等，我们找的是比它小的数，而不是相等，<br>相当于没关系了。</p>\n<p>那么开写</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, min, iPosit;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>]</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmin = <span class=\"built_in\">array</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(min &gt; <span class=\"built_in\">array</span>[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmin = <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">\t\t\tiPosit = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,min,iPosit);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组n个输入的模版-仅供参考。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>]</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除元素：\"><a href=\"#删除元素：\" class=\"headerlink\" title=\"删除元素：\"></a>删除元素：</h2><p>在直播中我们只讲函数，思路今天上午已经讲过了。</p>\n<p>一个是PrintArr，相信不太用多说</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprint(<span class=\"string\">&quot;%d&quot;</span>, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个就是我们的del函数，用的是覆盖的思路。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i;k &lt; n - <span class=\"number\">1</span>;k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[k] = a[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>今天下午看到我们小伙伴有对调用时数组的形式不太理解的，<br>这里说一下。<br>我们调用函数的时候参数填入的是数组的名称<br>比如我们调用del函数时，我们是这样写的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del(<span class=\"built_in\">array</span>, n, k);</span><br><span class=\"line\"><span class=\"comment\">//array为数组名，n为长度，k是要删除的下标。</span></span><br></pre></td></tr></table></figure>\n\n<p>不需要加中括号，那样的话指向的就是数组中的元素了。<br>比如array[10]，甚至我们数组中没有这个元素，那样就会导致<strong>运行错误</strong><br>余下就执行函数就好，注意PrintArr在覆盖之后输出n - 1的值。<br>因为数组在覆盖之后最后一个值与倒数第二个值是相等的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[],<span class=\"type\">int</span> n)</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;k);</span><br><span class=\"line\">    del(<span class=\"built_in\">array</span>, n, k);</span><br><span class=\"line\">    PrintArr(<span class=\"built_in\">array</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i;k &lt; n - <span class=\"number\">1</span>;k++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[k] = a[k + <span class=\"number\">1</span>]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组元素</p>\n<p>下一题，加入一个find函数，在主函数中加入一个if判断找不找的到就好<br>找的到，返回i，找不到，返回-1.</p>\n<p>[find函数]</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x == a[i]) <span class=\"keyword\">return</span> i; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后面判断一下find的值是不是大于0即可。</p>\n<h2 id=\"路旁的树\"><a href=\"#路旁的树\" class=\"headerlink\" title=\"路旁的树\"></a>路旁的树</h2><p>一条数轴，相当于一个一维数组。<br>维度这个概念其实是与数轴相关的。<br>如果平面直角坐标系的话一般就会用二维数组，<br>像天梯赛模拟题的炎爆那道题</p>\n<p>思路是，首先把每个元素初始化成2<br>注意今天上午老师讲的那个错误，<br>如</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>] = &#123;<span class=\"number\">2</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>不要犯这种错误。<br>正确的是用for循环把n个元素的值赋为2</p>\n<p>这题应该挺简单的。<br>也就是多次下把这个区间上的元素全部<strong>降为0</strong>。<br>（注意不是-2，这样区间重叠就成负的了。）</p>\n<p>然后再定义一个sum变量，再一个一个地加。<br>最后输出值即可。<br>代码如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, N, sum = <span class=\"number\">0</span>, x, y;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;N);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">array</span>[i] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = x - <span class=\"number\">1</span>;i &lt;= y - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按分数段统计学生人数\"><a href=\"#按分数段统计学生人数\" class=\"headerlink\" title=\"按分数段统计学生人数\"></a>按分数段统计学生人数</h2><p>简单的循环题，但是被强行地转成了数组题。<br>如果输入的t在输入成绩之前这就是循环了，我们都比较擅长。<br>直接输入数据，然后用for循环一个一个比对，<br>造一个初始值为0的变量，然后如果大于等于那个值就加一。<br>最后输出就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, gradelimit, num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;gradelimit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">array</span>[i] &gt;= gradelimit) num += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,num);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"两道比较难的题目\"><a href=\"#两道比较难的题目\" class=\"headerlink\" title=\"两道比较难的题目\"></a>两道比较难的题目</h1><h2 id=\"1-区间元素和\"><a href=\"#1-区间元素和\" class=\"headerlink\" title=\"1.区间元素和\"></a>1.区间元素和</h2><p>这道题难在判断的条件多，<br>我在做的时候没有想到left与right小于0的情况，<br>所以没有做对，但是后来结合志鹏的解答也给出了简单点的答案。<br>但是不太好理解，你们要是觉得不好懂看志鹏的就好。<br>虽然用的是C++，你们看条件就好。</p>\n<p><img src=\"/img/22cf517c3686de1119cf1f156160bd4.jpg\" alt=\"志鹏同学的答案\"><br>（std::cin就相当于我们的scanf，std::cout就相当于我们的printf）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, left, right;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;left, &amp;right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &lt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = left;i &lt;= right;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; n &amp;&amp; i &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                sum += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>确保left是小于n的，那么两个集合就一定有交集。<br>然后保证加的是在0到n - 1上的元素（数组内的）。</p>\n<h2 id=\"找出旷课的人\"><a href=\"#找出旷课的人\" class=\"headerlink\" title=\"找出旷课的人\"></a>找出旷课的人</h2><p>先放代码，直播讲</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Sort</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i;j &lt; n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                t = a[i];</span><br><span class=\"line\">                a[i] = a[j];</span><br><span class=\"line\">                a[j] = t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, flag, count = <span class=\"number\">0</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> array1[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> array2[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> array3[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;m, &amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;array1[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;array2[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt; n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array1[i] == array2[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            array3[l] = array1[i];</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count == <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;good\\n&quot;</span>); </span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Sort(array3, l);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; l;i ++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, array3[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一次模块化的实践，但我当时很怕时间超限。。<br>由几个部分组成<br>判断相等-加入数组-排序（冒泡）-输出。</p>\n<h2 id=\"宿舍的选择\"><a href=\"#宿舍的选择\" class=\"headerlink\" title=\"宿舍的选择\"></a>宿舍的选择</h2><p>很简单的一道题，关于long long，只是为了防止越界吧。<br>判断宿舍可住人数与目前的人数的差，然后与学长的人数相比就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,n,p,q;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;p,&amp;q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((q - p) &gt; n)</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后说说，这几道题还是很好地帮助我们锻炼了循环那边的知识<br>也帮我们抓起来了现在刚学的数组，<br>通过写题也得到了一些数学模型上的思考，挺好的。</p>\n","site":{"data":{}},"excerpt":"<p>可能因为课题的深入吧，我们的题目难度也与日俱增。今天关于数组的题目有些很值得讲的，今天和大家分享一下我的看法。</p>","more":"<h2 id=\"逆序\"><a href=\"#逆序\" class=\"headerlink\" title=\"逆序\"></a>逆序</h2><p>因为今天上午已经学过并且讲过，所以这题没啥好说的。<br>从0到n - 1输入数组，从n - 1到0输出数组。<br>两个for循环搞定。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">11</span>];     <span class=\"comment\">//1-10 略大一点，留有余地。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%4d&quot;</span>,<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组最小值\"><a href=\"#数组最小值\" class=\"headerlink\" title=\"数组最小值\"></a>数组最小值</h2><p>审题得：题目的要求是求最小值以及其下标，然后输出下标最小的一个<br>最小值我们知道怎么求，一个for循环搞定。<br>其实因为你找到了第一个值，把它设置为最小值之后，<br>就算另一个值与它相等，我们找的是比它小的数，而不是相等，<br>相当于没关系了。</p>\n<p>那么开写</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, min, iPosit;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>]</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmin = <span class=\"built_in\">array</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(min &gt; <span class=\"built_in\">array</span>[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmin = <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">\t\t\tiPosit = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,min,iPosit);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组n个输入的模版-仅供参考。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>]</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除元素：\"><a href=\"#删除元素：\" class=\"headerlink\" title=\"删除元素：\"></a>删除元素：</h2><p>在直播中我们只讲函数，思路今天上午已经讲过了。</p>\n<p>一个是PrintArr，相信不太用多说</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprint(<span class=\"string\">&quot;%d&quot;</span>, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个就是我们的del函数，用的是覆盖的思路。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i;k &lt; n - <span class=\"number\">1</span>;k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[k] = a[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>今天下午看到我们小伙伴有对调用时数组的形式不太理解的，<br>这里说一下。<br>我们调用函数的时候参数填入的是数组的名称<br>比如我们调用del函数时，我们是这样写的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del(<span class=\"built_in\">array</span>, n, k);</span><br><span class=\"line\"><span class=\"comment\">//array为数组名，n为长度，k是要删除的下标。</span></span><br></pre></td></tr></table></figure>\n\n<p>不需要加中括号，那样的话指向的就是数组中的元素了。<br>比如array[10]，甚至我们数组中没有这个元素，那样就会导致<strong>运行错误</strong><br>余下就执行函数就好，注意PrintArr在覆盖之后输出n - 1的值。<br>因为数组在覆盖之后最后一个值与倒数第二个值是相等的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[],<span class=\"type\">int</span> n)</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;k);</span><br><span class=\"line\">    del(<span class=\"built_in\">array</span>, n, k);</span><br><span class=\"line\">    PrintArr(<span class=\"built_in\">array</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i;k &lt; n - <span class=\"number\">1</span>;k++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[k] = a[k + <span class=\"number\">1</span>]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintArr</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组元素</p>\n<p>下一题，加入一个find函数，在主函数中加入一个if判断找不找的到就好<br>找的到，返回i，找不到，返回-1.</p>\n<p>[find函数]</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x == a[i]) <span class=\"keyword\">return</span> i; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后面判断一下find的值是不是大于0即可。</p>\n<h2 id=\"路旁的树\"><a href=\"#路旁的树\" class=\"headerlink\" title=\"路旁的树\"></a>路旁的树</h2><p>一条数轴，相当于一个一维数组。<br>维度这个概念其实是与数轴相关的。<br>如果平面直角坐标系的话一般就会用二维数组，<br>像天梯赛模拟题的炎爆那道题</p>\n<p>思路是，首先把每个元素初始化成2<br>注意今天上午老师讲的那个错误，<br>如</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>] = &#123;<span class=\"number\">2</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>不要犯这种错误。<br>正确的是用for循环把n个元素的值赋为2</p>\n<p>这题应该挺简单的。<br>也就是多次下把这个区间上的元素全部<strong>降为0</strong>。<br>（注意不是-2，这样区间重叠就成负的了。）</p>\n<p>然后再定义一个sum变量，再一个一个地加。<br>最后输出值即可。<br>代码如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, N, sum = <span class=\"number\">0</span>, x, y;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1001</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;N);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">array</span>[i] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = x - <span class=\"number\">1</span>;i &lt;= y - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按分数段统计学生人数\"><a href=\"#按分数段统计学生人数\" class=\"headerlink\" title=\"按分数段统计学生人数\"></a>按分数段统计学生人数</h2><p>简单的循环题，但是被强行地转成了数组题。<br>如果输入的t在输入成绩之前这就是循环了，我们都比较擅长。<br>直接输入数据，然后用for循环一个一个比对，<br>造一个初始值为0的变量，然后如果大于等于那个值就加一。<br>最后输出就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, gradelimit, num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;gradelimit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">array</span>[i] &gt;= gradelimit) num += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,num);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"两道比较难的题目\"><a href=\"#两道比较难的题目\" class=\"headerlink\" title=\"两道比较难的题目\"></a>两道比较难的题目</h1><h2 id=\"1-区间元素和\"><a href=\"#1-区间元素和\" class=\"headerlink\" title=\"1.区间元素和\"></a>1.区间元素和</h2><p>这道题难在判断的条件多，<br>我在做的时候没有想到left与right小于0的情况，<br>所以没有做对，但是后来结合志鹏的解答也给出了简单点的答案。<br>但是不太好理解，你们要是觉得不好懂看志鹏的就好。<br>虽然用的是C++，你们看条件就好。</p>\n<p><img src=\"/img/22cf517c3686de1119cf1f156160bd4.jpg\" alt=\"志鹏同学的答案\"><br>（std::cin就相当于我们的scanf，std::cout就相当于我们的printf）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, left, right;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;left, &amp;right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &lt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = left;i &lt;= right;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; n &amp;&amp; i &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                sum += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>确保left是小于n的，那么两个集合就一定有交集。<br>然后保证加的是在0到n - 1上的元素（数组内的）。</p>\n<h2 id=\"找出旷课的人\"><a href=\"#找出旷课的人\" class=\"headerlink\" title=\"找出旷课的人\"></a>找出旷课的人</h2><p>先放代码，直播讲</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Sort</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i;j &lt; n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                t = a[i];</span><br><span class=\"line\">                a[i] = a[j];</span><br><span class=\"line\">                a[j] = t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, flag, count = <span class=\"number\">0</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> array1[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> array2[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> array3[<span class=\"number\">10001</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;m, &amp;n);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;array1[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;array2[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt; n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array1[i] == array2[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            array3[l] = array1[i];</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count == <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;good\\n&quot;</span>); </span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Sort(array3, l);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; l;i ++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, array3[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一次模块化的实践，但我当时很怕时间超限。。<br>由几个部分组成<br>判断相等-加入数组-排序（冒泡）-输出。</p>\n<h2 id=\"宿舍的选择\"><a href=\"#宿舍的选择\" class=\"headerlink\" title=\"宿舍的选择\"></a>宿舍的选择</h2><p>很简单的一道题，关于long long，只是为了防止越界吧。<br>判断宿舍可住人数与目前的人数的差，然后与学长的人数相比就好。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m,n,p,q;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;p,&amp;q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((q - p) &gt; n)</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后说说，这几道题还是很好地帮助我们锻炼了循环那边的知识<br>也帮我们抓起来了现在刚学的数组，<br>通过写题也得到了一些数学模型上的思考，挺好的。</p>"},{"title":"C premier plus Chapter 1","date":"2023-11-27T15:18:43.000Z","_content":"\n# 第一章 学习准备\n\n>**你将会在这一章学到：**\n> \t1. C的历史以及特点\n> \t2. 写程序的步骤\n> \t3. 关于代码连接器与编译器的一些知识\n> \t4. C标准\n\n欢迎来到C语言的世界！C语言是一种充满活力的高级编程语言，它受到业余与商用编程者的喜爱。\n这一章会为你学习与利用这种强大而又受欢迎的语言，而且会向你介绍几种你最有可能搭建C语言基础的环境。\n\n首先，我们看向C语言的来源和它的一些特点（优点以及缺点）。接着，我们会了解编程的起源，查看编程的总体规则。\n最终，我们会讨论如何在常见的系统中运行C程序。\n<!--more-->\n\n# 1.1 C语言的由来\n\n贝尔实验室的Dennis Richie在1972年创造了C语言，也就在那时，他和Ken Thompson正在致力于设计Unix系统。C语言的想法并不完全是在Richie的脑袋里冒出来的，而是来自Thompson的B语言，B语言来自哪里又是另一个故事了。重点是，C语言是作为工作中的编程人员的工具被创造出来的，所以它的首要目标就是成为一种有用易用的语言。\n\n很多编程语言都有着类似的目标，但是它们又经常会有其他的顾虑，举几个例子，Pascal语言的主要目标，就是为了教授编程规则提供良好的平台。BASIC语言，被设计得与英语很相像，从而可以方便地让不熟悉电脑的学生们学习。这些目标都是很重要的，但是并不与实际使用协调，也并不是普遍都很易用。相比之下，C语言是为了编程人员而生的，而且成功地成为了现代编程语言的一种选择。\n\n# 1.2 为什么使用C语言？\n\n在过去的30年来，C语言已经成为了最重要与最受欢迎的编程语言。它的成长，就是因为人们经过尝试之后，喜欢使用它。过去的10年里，许多人从C语言转到的更有规模的C++上，但C语言仍然是拥有权重的一种很重要的语言，C++也是从C语言迁移过来的。在学习C语言的过程中，你会意识到C语言的许多长处（见图1.1）让我们预先查看一下。\n![插图](/img/Chapter1.2.png)\n（上图，左上为强大的控制结构，右上运行速度快，左下小型代码-小程序，右下是可以传输到不同的电脑）\n\n## 1.2.1设计特点\nC语言是一种拥有在理论界以及计算机科学实践中令人满意的控制特色的现代编程语言。它的设计让它很自然地能自上而下地规划程序、结构化编程以及模块化设计，从而设计出的程序也更可靠，更易懂。\n\n## 1.2.2 效率\nC语言是一种高效的编程语言，它的设计很好地利用了现代电脑的性能。C语言编写的程序常常是小型的，并且运行速度很快。事实上，C表现了一些在汇编语言中好的控制方法，（汇编语言是对于特定的中央处理单元(Central Processing Unit,CPU)的内部指令设计的的助记语句，不同的CPU有着不同的汇编语言）。如果你选择C语言，你可以调节你的程序到达最快速度或者让程序对于内存的使用更有效。\n\n## 1.2.3 可传递性\nC语言是一种可传递的编程语言，那意味着在一个系统上的C语言程序也可以在其他系统经过少量的改动或者不改动运行。即使改动是必须的，也只是改动头文件与main程序里的几个词条而已。大多数也打算着有可传递性，但是任何想要把个人电脑IBM里的BASIC程序放到苹果BASIC（它们是近亲）或者尝试把主机上的IBM里的FORTRAN程序在Unix系统中运行都知道传递烦人透顶。C语言是可传递性的领头者。C语言的编译器（把你的C语言代码转换为电脑内部指令的程序）对于40种系统都是可以使用的。从微型处理器到超算。但需要注意的是，一部分程序对于不同的硬件设备是不一样的，比如显示器监控，或者因为在运算系统上的特殊点，比如WinXP与OS X，它们通常是不具有传递性的。\n\n因为C语言与Unix操作系统关系紧密，Unix系统的安装包是自带C语言的编译器的，Linux安装时也通常带有C语言编译器，一些C语言编译器是可以在个人电脑上使用的，包括运行着各种版本的Windows系统的电脑，还有Mac。所以不论你是正在使用着家里的电脑，还是使用专业的工作站或者大型电脑，你都是有很大可能获得一个适用于你的系统的C语言编译器的。\n\n## 1.2.4能力与灵活性\nC语言既强大又灵活（在计算机文献中最受喜欢的两个词）。\n举个例子，许多功能强大与灵活的操作系统是用C语言写的。许多的其他编程语言（如FORTRAN、Perl、Python、Pascal、LISP、Logo与BASIC）的编译器与翻译器是用C语言写的。结果，当你在Unix机上使用FORTRAN语言，最后是用C语言程序生成的exe文件。C语言程序被用作解决物理、工程问题甚至在电影如《角斗士》中栩栩如生地重现特殊的现象。\n\n## 1.2.5 以程序员为方向的\nC语言重视于满足程序员的需求，让我们轻松地触达硬件，而且让你独立地操纵内存中的每一个bit。它拥有非常多的运算符，能够让你简洁地表达自己。C语言比起，比如说Pascal语言就在限制着你可以做的事情。这种灵活性既是优势也很危险。优势在许多的任务，像是数据形式转换，在C语言中简单很多。危险就是用C语言，你有可能犯在其他语言中不可能犯的错误。C语言给予了你更大的自由，也让你承担了更多的责任。\n\n另外，大多数C语言的实施都有着大量有用的C语言库函数。这些函数能够应对很多编程人员通常的需求。\n\n## 1.2.6 缺点\nC确实有一些不足之处。通常，像人一样，不足与长处是同一个特点的两面。例如，我们提到了C语言的自由表达也需要更多的责任。C语言的指针（我们以后会学习到）使用特别地，意味着编程错误会更难跟踪到。曾经也提到了一台没有文字的电脑，解放的代价就是格外的警惕，\n\n有着大量的运算符，C的简明也让有可能让我们写出极其难以理解的代码。你可能并不是必须要写晦涩的代码，但是可能性总在那儿。毕竟，其他语言哪个有每年一次的混乱的编程比赛？\n\n还会有更多的长处，毫无疑问也会有更多的缺陷。与其在这个问题上挖的更深，还不如移到下一个话题。\n\n# 1.3 C语言的用处\n\n到 1980 年代初，C 语言已经是 Unix 系统小型计算机世界的主导语言了。从那时起，它就已经被传播到个人计算机（微型计算机）和大型主机（大型计算机）了。（参见图 1.2）许多软件公司把C语言作为制作文字处理程序、电子表格、编译器和其他产品的首选语言。它们知道C语言编写的程序代码量小而且高效。更重要的是，他们知道这些程序将易于修改，并易于适应新型号的计算机。\n![图片](/img/Chapter1.3.png)\n（以上，C语言被用作编程Unix操作系统，被用作电影如Star wars，在电脑游戏、电脑语言处理、嵌入式系统与机器人工程中都有显著的作用）\n\nC语言不仅对公司和老手有好处，对其他用户也有好处。越来越多的计算机用户已经开始使用 C 语言，它的优势也得到了确保。你不必是专业的计算机编程人员就可以使用C语言了。\n在 1990 年代，许多软件公司开始转向 C++ 语言进行大型编程项目。C++ 将面向对象的编程工具嫁接到 C 语言中。（面向对象编程是一种思想体系，它试图使语言来适应问题，而不是让问题来适应语言。）C++ 几乎是 C 语言的超集，这意味着任何 C程序也是，或者它几乎也是一个有效的C++程序。通过学习 C语言，您还学习了许多 C++。\n尽管 C++ 和 Java 等新型的编程语言很受欢迎，但 C语言在软件公司依然是核心技能，一直排在所需技能的前 10 名。特别的，C语言已成为在嵌入式系统编程中很受欢迎的一种语言，也就是说，它被用于编程越来越多的汽车、相机、DVD 播放器和其它现代便利设施中的常见的微型处理器。此外，C语言已经开始追赶在科技科学编程上具有长久的主导地位的FORTRAN语言。最后，作为为开发操作系统而生的语言，C语言在Linux系统的发展中发挥着重要作用。所以，在二十一世纪的第一个十年， C 语言的影响力仍然在变得更大。\n\n简而言之，C 是最重要的编程语言之一，并将继续如此。如果你想要一份编程软件的工作，这应该是你能够回答“是”的第一个问题中的一个，“嗯，比如说，你会C语言吗？“\n\n# 1.4 计算机的作用\n\n既然你已经要开始学习如何运行C语言程序了，你很可能需要了解一下电脑是怎么工作的，这些知识能够帮助你了解C语言程序与最终运行程序后发生的事情之间的关联。\n\n现代的电脑有几个组成部分，***中央处理器***，又叫***CPU***，做了电脑运转时的大部分工作。***随机存取器***，又叫***RAM***，作为保存文件与程序的工作区。永久存储器，比如硬盘，存储程序和文件，即使电脑已经关机。各种外设，比如键盘、鼠标还有显示器，在你与电脑交互中搭建了桥梁。CPU运行程序，所以我们集中于它的作用。\n\nCPU的自始至终的工作，简单来说，其实是非常简单的。它从内存中依次抓取一条条的指令，然后执行它。（千兆赫CPU可以在一秒钟执行这个过程百亿次，所以CPU可以以一种惊人的速度运作），CPU也有自己的小工作区，有几个储存数的***寄存器***。每一个寄存器保存下一条指令的内存地址，然后CPU就使用这些信息来抓取下一条指令。接下来，CPU再把指令储存在另一个寄存器中，然后把上一个寄存器的命令更新到下一条。CPU能够理解的指令（也叫指令集）是有限的。而且这些指令都是各自分明的。很多指令都是要求电脑去把数字从一个地方移动到另一个地方。---例如，从内存到寄存器。\n\n在这个过程中有几点很有趣。第一，在电脑中任何东西都是以数字的形式储存的，数字是以数字的形式储存的。字符（例如你在文本编辑中的英文字母），也是由数字的形式储存的，每一个字符都有一个数字编码。计算机储存进寄存器的指令也是数字的形式，指令集中的每一条指令都对应着一个数字编码。第二，电脑程序最终会被以数字指令的形式表达，这又叫***机器语言***。\n\n计算机运行的一种结果就是，如果你想让计算机做些事，你需要提供一系列的指令或者是程序，来明确地告诉它要做什么和怎么做。你必须创建一个电脑能够直接理解（使用机器语言）的程序。这是个精细、单调、费劲的任务。一些像两个数相加的简单的任务可能会被分解成几步，可能会像下面几步。\n\n>1.从内存区域2000把数字复制到寄存器1\n>2.从内存区域2004把数字复制到寄存器2\n>3.用数字二的数值加上数字一，在寄存器1留下答案。\n>4.把寄存器1中的数据复制到内存区域2008\n\n而且你还得把每一条指令用数字指令表述出来！\n\n如果你是喜欢以这种方式写程序的，你会很难过地了解到机器语言编程的黄金时期已经远远地过去了。但是如果你更喜欢那些更愉快的编程，那就对高级编程语言打开怀抱吧！\n\n# 1.5 高级计算机语言与编译器\n\n>高级编程语言，比如C语言，以很多方式简化了你的编程。\n\t第一，你不需要用数字的形式来表达你的指令。\n\t第二，你使用的指令与你对于程序的思考而不是与电脑使用的精确的指令\n\n与其关心某一个CPU为了完成某一个任务进行的某一步。你可以以一种更复杂的形式来表达你想做的事情，例如，你也许会写下面的东西。\n\n```C\n\ttotal = mine + yours;\n```\n\n看到这样的代码，你能够很明白它是干啥的，\n而看着机器语言以数字构成的替代指令，那就太不易读了。\n\n不幸的是，机器语言才是适合电脑的，对于电脑来说，高级语言完全无法理解。这就到了编译器上场的时候了，***编译器***是把高级语言程序详细地翻译成电脑需要的机器语言指令的程序。你以高级的方式思考，编译器做这些令人生厌的工作。\n\n编译器方法还有另一种好处。每台电脑都设计了各自的机器语言，所以比如说英特尔PentiumCPU的机器语言对于摩托罗拉PowerPC CPU可能没有任何意义，但是你可以根据特定的机器语言搭配编译器。所以，使用一系列的编译器或者合适的编译器，你就可以把同样的高级编程语言转化成一系列不同的机器语言程序。你只需要解决这个问题一次，然后让编译器把这个解法翻译成一系列机器语言程序。\n\n简短地说，高级的编程语言，比如C语言、Java还有Pascal，它们以一种更加抽象、与特定的CPU并不绑定的方式来表述程序行为。而且，对于机器语言来说，高级语言学习起来简单而且也更容易编程。\n\n# 1.6 使用C语言的七步走\n\nC语言，如你所见，是一种编译型的语言，如果你习惯于使用如Pascal或者FORTRAN的编译型语言，你应该已经对组成C语言程序的基本步骤很熟悉了。如果你的基础语言是如BASIC，或者面向接口的计算机图形语言（如Visual Basic）的翻译型语言，或者你还没有编程基础，你需要学习如何编译。我们一会就会研究那个过程，你会认识到这是很合理简单的。首先，为了让你宏观、大体上了解编程，让我们把编写C语言程序分解成7个步骤（见图1.3）。值得注意的是，这只是理想化的步骤，在编程实践中，你需要在步骤中来回切换，用后面一步了解到的来使之前的一步得到优化。\n![七步走](/img/Chapter1.6.png)\n\n## 1.6.1 确定程序目的\n\n很自然的，你需要明确地知道你想让程序做什么，思考你的程序需要什么信息，需要在计算与控制上完成什么样子的事情，而且程序内的信息需要对你有所反馈，在这一步的规划中，你应当以大体出发，而不是根据特定的编程语言来思考。\n\n## 1.6.2 设计程序\n\n在有了对于你的程序应该干啥的印象之后，你应该选择程序如何来运行它，用户的交互界面会是什么样子的？程序应该如何被组织起来？程序的目标人群是？你需要多长时间来做完这个程序？\n\n你还要决定在程序中呈现数据，而且很可能的，在辅助文件里也要。要决定用什么方式来处理数据。在刚开始学习C语言时，可能选择会很简单，但是随着你应对更多复杂的情况后，你就会知道这些选择是需要更多的思考的。选择一种好的方式来呈现数据经常会让设计程序与处理数据简单很多。\n\n再一次，你需要在大体层面上思考而不是在特定的代码上，但是有些选择可能是基于编程语言的大体特点的，举个例子，C语言编程人员就比，比如说，Pascal编程人员在数据呈现上拥有更多的选择。\n\n## 1.6.3 编写代码\n\n既然你已经对于你的程序有个清晰的设计了，你就可以通过写代码的方式来实现它了。也就是说，你可以把你的程序设计翻译为C语言。这就是你需要用上C语言知识的地方了，你可以在纸上画出你的想法，但最后你还是要把你的代码输入电脑。这个过程主要取决于你的编程环境，我们一会会呈现更多的常见的编程环境。总体上，你会使用文本编辑器来创造一份源码文件，它包含了你程序设计的C语言翻译，例1.1给出了C语言源码的一个例子。\n\n![图例1.1](/img/listing1.1.png)\n在这一步，你应该记录你的工作，最简单的方式是使用C语言的注释功能，它包含着你对于源码的解释，我们会在第二章详细讲到如何注释你的代码。\n\n## 1.6.4 编译\n下一步就是编译源码，再一次，细节上的问题是与你的编程环境相关的，我们马上会研究几种常见的环境了。现在，让我们以更概念化的方式看看发生了什么。\n\n我们已经知道编译器的工作就是把源码转化成可执行文件。***可执行文件***是以我们电脑的自然语言（或者说***机器语言***）写成的，这种语言是以精细的数字代码形式呈现的。而且你之前也了解到了，不同的电脑的机器语言是不一样的。C语言的编译器也包括着C语言库中的代码。C语言库包含着很多的基础的、日常使用的东西，比如**Printf**和**scanf**函数。（更精确地说，一个叫做连接器的程序把C语言库中的一组代码带到编译器，但是编译器在大多数系统都是可以运行连接器的），最终结果就是包含着电脑可理解的可执行文件的程序，你可以直接运行。\n\n编译器还会检查你的程序是不是使用了符合语法的C语言，如果编译器发现了错误，它就会汇报给你，而且不会生成可执行文件，理解编译器提示的错误信息也是你会很快习得的另一项技能。\n\n## 1.6.5 运行程序\n\n通常的，可执行文件是你可以运行的程序，你可以在很多常见的环境中，包括MS-DOS、Unix、Linux控制台、只需要打字写下可执行文件的名称。其他的环境，比如VMX、VAX可能需要一些运行指令或者其他的机制方法。***集成开发环境（IDE）***，像很多在Windows系统或者Mac系统上的，使你能够在IDE内部通过菜单选项或者按几个按键来编辑与运行你的C语言程序。最终生成的文件也可以通过双击文件名或者图标的方式从你的操作系统直接运行。\n\n## 1.6.6 测试与Debugging\n\n你的程序能够运行是个好迹象，但是有可能你的程序并没有正确地运行。因此，你应该检查下是否它做到了它应该做的事情。你会发现有些程序是会有问题（在计算机领域内的行话叫bugs）的。调试是查找与修复程序错误的过程，学习的过程中犯错误是自然且正常的。看起来编程“天生”需要调试，所以当你把学习到的与编程实际结合起来的时候，你最好准备好在犯错的时候提醒自己。随着你成为一个更加强大与巧妙的编程人员，你也会不断地犯错，但你也因此不断地变得更加强大与巧妙。\n\n你会有很多机会犯错，基础的设计层面错误，实现过程出错，忽略了可能会搞砸你的程序的输入。你可能会不恰当地使用C语言，你可能会拼写错误，可能会把括号放错了位置等等等等。你会有自己的错误方式来丰富这一列的。\n\n幸运的是，这种情况并不是无望的，即使有时候你会这样认为啦。\n编译器会捕捉到很多种类的错误，而且还会有工具来帮助你找到许多种编译器没有办法捕捉的错误。继续读下去，这本书也会给到你一些调试的建议。\n\n## 1.6.7 维护与修改程序\n\n当你为自己或者别人创造了一个程序，你可能会发现程序是可以有更多的用处的。如果是的，你可能会发现是有理由做出些修改的。可能有个小bug只有别人把名字以Z/z开头的时候才会发生，或者你会想出一种能够解决问题的更好的方式，可以聪明地加入一些的新功能，你可能需要改写程序以便它能够在不同电脑系统中运行。如果你明确地注释了这些程序，所有这些任务都会被极度地简化。\n\n## 1.6.8 注释\n\n编程的过程并不总是像这个过程描述的那样线性。有的时候你需要在步骤中前后切换。例如，当你在写代码的时候，你有可能发现你的计划并不实际。你有可能发现了一种更好的方式来做事，或者在看到程序是怎么运行的之后，你会想要改变你的设计，记录你的工作能够帮助你在不同的等级之间前后切换。\n\n许多学习者通常会忽略掉第一步与第二步（确定程序目的与设计程序）直接进入第三部（写程序），你写的第一个程序或许可以直接在脑中看到完全的流程，如果犯错也很好定位错误。但是随着你编写的程序越来越复杂，越来越冗长，心智的视觉化就开始失效了，而且错误也会更难以发现。最终，那些忽略了规划步骤的人就陷入数小时的时间浪费、困惑还有沮丧，因为他们写出的丑陋的，无法实现功能而又深奥的程序。这项工作越是复杂，需要的规划工作就越多。\n\n道理就是你需要养成在写代码之前做规划的习惯，使用这种古老但是可敬的笔尖技术来记下你程序的目的，给程序设计做出大纲。如果你这样做的话，你最终会收获节省时间与满足感的巨大红利。\n\n## 1.6.9 编程技术\n\n你生成程序的明确步骤是取决于你的电脑系统的，因为C语言是可传输的，它是可以适用于很多的系统环境的，包括Unix，Linux，MS-DOS（是的，很多人仍然在用），Windows与Mac OS，其实还有很多只不过没有足够的空间留给它们了，这尤其是因为各自的产品不是演化、消亡，就者被取代。\n\n首先，即使如此，让我们先来研究许多C语言运行环境的共有特点，包括我们刚才已经提到的五种系统，你不需要明确地知道是什么引导了C语言程序的运行，但这是良好的基础，它也能够帮助你更好地理解为什么你需要经历一些特定的步骤来得到一个C语言程序。\n\n当你在写C语言程序的时候，你会在源码文件中储存你在文本文件中写下的东西。大多数由C语言编程的系统，也包括我们提到的那一些，需要以`.c`结尾的文件（举个例子，`wordcount.c`与`budget.c`）在`.c`之前的那部分名字叫做***基准名（Basename）***\n在这一段后面的名称叫做***拓展名（Extension）***，因此，`budget`是基准名，`.c`是拓展名。它们的混合就是文件名。文件名也必须要复合特定的电脑操作系统的需要。例如，IBM-PC与[克隆机？]上的MS-DOS系统，它就要求你的文件名不能多于8个字符长。所以，`wordcount.c`在DOS系统中就不是合法的文件名。一些Unix系统在整个文件名上有14个字符的限制，包括拓展名，其他Unix系统也允许更长的名称，不多于255个字符即可。Linux、Windows与MacOS也允许更长的文件名。\n\n让我们假设我们拥有一份名字叫`Concrete.c`的源文件储存着例1.2的C语言源码。\n![Concrete.c](/img/listing1.2.png)\n不需要担心在源码文件中的一些细节，在第二章你会学到的。\n\n#\n\n## 1.7.1 目标代码文件、可执行文件和库\n\nC语言编程的一个基本本领就是把你的源代码文件转化成保存着即时就可运行的可执行文件。要实现这个过程需要两个步骤：编译与连接。编译器可以把源代码转换成中间代码，然后连接器再把中间代码与其他代码组合，由此创造出可执行文件。C语言利用这两部分结合的方法让程序易于模块化生成。你可以把每一个模块分开来编译，再用连接器把每一个编译过的模块结合起来。以那种方式，如果你想改变其中的一个模块，你就不需要再重新编译其他的模块，而且连接器也会把你的程序与预先编译好的库代码结合起来。\n\n要生成中间文件的方法还有几种，最流行的而且能够实施的在这里已经提到了，就是把源代码文件转化成机器语言代码，把结果放在目标代码文件中或者简短地说，目标文件。（假设你的源码是由单一文件组成的），虽然目标文件包括了机器语言代码，它还没准备好运行。目标文件包含了对于源代码的翻译版本，但是它还不完整。\n\n缺失的第一个部分就是起始代码，它作为你的程序与操作系统的接口。举个例子，你可以在在DOS或者Linux之下协调地运行BM PC，它们的硬件都是类似的，所以同样的目标文件对于两种系统都是可以起作用的，但是你需要在DOS与Linux不同的起始代码，因为不同的系统是以不同的方式处理程序的。\n\n第二个缺失的部分就是常用库的代码。几乎所有的C语言程序都需要利用C语言的库函数。比如`Concrete.c`使用的`printf()`。目标代码文件并不包括这个函数的代码。它只包含了`printf`函数的声明指令，实际的代码是在另一个文件中储存的，它叫***库文件***。库文件包含了很多函数的代码。\n\n连接器的作用就是把这三个部分连接在一起-你的目标代码、起始代码和库代码，然后把三者整合为一个文件，即可执行文件。对于库代码，连接器只提取需要使用的函数在C语言库中对应的代码。\n（见图1.4）\n![图1.4](/img/listing1.4.png)\n（可见，上图中，由源代码经过编译器生成目标代码文件，再由目标代码文件与起始代码、库代码通过连接器转化为可执行文件`concrete.exe`）.\n\n简短来说，一份目标文件与可执行文件都由机器语言指令组成。然而，可执行文件只把你使用的代码翻译为机器语言，但可执行文件还由常用库与起始代码的机器语言翻译组成。\n\n在一些系统中，你必须把编译与连接的过程分开。另外的一些系统中，编译器会自动启动连接器，所以你只需要编译即可。\n\n现在我们就针对于特定的系统来研究一下。\n\n## 1.7.2 Unix系统\n因为C的流行始于Unix系统，我们就从它开始。\n\n### 在Unix系统中进行编辑\nUnix系统并没有独立的C语言编译器。你反而需要一些多功能的Unix编辑器，例如emacs、jove、vi或者一个X Window系统文本编辑器。\n\n你的最主要的两个目的就是正确地书写程序，并且为储存程序的文件起个名字。正像已经提到的，文件的名称必须以`.c`。注意到Unix系统会以大小写来区分文件，所以`BUDGET.c`、`budget.c`还有`Budget.c`是三个各自不同的C源文件名称，但是`BUDGET.C`是不合法的，因为它的扩展名使用了大写。\n\n使用vi编辑器，我们把下面的程序保存在名叫`inform.c`的文件中。\n![inform.c](/img/informc.png)\n这些文本就是源代码，而`inform.c`是源文件，重点就在源文件只是一个过程的起点，而不是结尾。\n\n### 在Unix系统中进行编译\n我们的程序，虽然已经不可否认地很精致了，对于电脑仍然是一派胡言，电脑是不理解什么是`#include`和`printf`的（现在你可能也不理解，但是我们很快就会学习，然而电脑并不会），正像我们之前讨论过的。我们需要编译器的帮助来把我们的代码（源代码）翻译为电脑的代码（机器语言）。这些工作的结果就是可执行文件，它会包含所有可以让电脑完成工作的代码。\n\nUnixC编译器叫`cc`，为了编译`inform.c`程序，你需要把下面的指令打下来。\n```C\n\tcc inform.c\n```\n\n几秒之后，Unix系统的命令提示符就会给出反馈，告诉你这件事已经做完了，如果你没有正确地编写代码的话可能会得到警告或者错误信息，但我们先假设一切都是正确的。（如果你的编译器对于`void`这个词进行报错，那是你的编译器还没有更新到 **ANSI C** 的编译器，我们会在不久提到更多的标准，即使这样，你从例子中删掉void就好）。如果你使用`ls`指令来把你的文件列出来的话，你会发现产生了一个新文件叫`a.out`（见图1.5）这就是包含了程序中翻译后指令（或编译后指令）的可执行文件。想要运行的话直接打下`a.out`即可。\n\n然后，文件中的指令执行，智言倾泻而出。\n```Bash\nA .c is used to end a C program filename.\n```\n如果你想要吧可执行文件保存下来，你需要重新命名它，\n否则，这个文件在你下一次编译时就会被新的同名文件代替。\n![The process](/img/process.png)\n（从源码到程序的过程）\n\n## Linux 系统\nLinux也是个很受欢迎的开源的，与Unix类似的多平台操作系统，它包括IBM与Mac的兼容。在Linux上设计程序与Unix系统的过程大部分是相似的，除了你需要使用公用C语言编译器，它叫gcc，是由GNU提供的，在那里面，编译的指令是这样的：\n```Bash\ngcc inform.c\n```\n注意到在Linux安装的时候安装gcc的时候可能是可选的，所以你（或者其他人）有可能如果之前没装的话必须得自己安装gcc。通常这会让cc成为gcc的一个别名，所以你喜欢的话可以用cc来代替gcc。\n\n你可以在下面的网站中获取关于gcc获取更多的信息，包括最新的版本。\nhttp://www.gnu.org/software/gcc/gcc.html.\n\n## 集成开发环境（Windows）\n\nC编译器并不是Windows安装包中的一部分，所以你也有可能需要安装一个C语言编译器。很多供应商，比如Microsoft, Borland, Metrowerks, 还有Digital Mars, 提供了以Windows系统为基础的集成开发环境（***IDE***）（近来，很多已经把C语言与C++编译器结合在一起了。）它们都有快速且集成的环境，可以方便地生成C语言程序。值得注意的是，每一个程序都有一个嵌入式的编辑器，你可以用它来编写C语言程序。都有可以让你命名、保存、编译、运行的菜单。每一次编译运行如果编译器发现错误了你都可以回到编辑器，而且出错的代码行都会被突出显示出来，并搭配上适当的错误信息。\n\nWindows IDE通常是可以一同处理C与C++的，你需要声明你需要一个C++程序。使用一些产品，比如Metroworks或者CodeWarrior里你需要用项目类型来区分你使用的语言。其他的产品比如Visual C++你是使用`.c`的扩展名来表示你想要使用C语言而不是C++。然而，大多数C语言程序也作为C++程序运作，可以参考“Differences Between C and C++”，那里对C与C++进行了比较。\n\n你有可能遇到的一个问题是当程序停止的时候程序运行的窗口也随之关闭，如果你也遇到这种情况，你可以让程序直到你输入一个字符再结束。只要在代码结尾，return语句前加上一行代码即可。\n\n```C\n\tgetchar();\n```\n这一行代码读取一个键盘输入，所以直到你输入下一个字符之前程序都是暂停着的。一些时候，受到程序运行方式的影响，可能在最后已经有一个键入数据等待了，这种情况下你就得输入两次。\n\n```C\n\tgetchar();\n\tgetchar();\n```\n\n例如，如果程序做的最后一件事是要求你输入你的体重，你已经输入完体重了然后输入enter来输入数据，程序会读取你的体重，第一个`getchar`会读取回车符，第二个`getchar`直到你再打一个字符才会有，如果你现在还不太能够理解，你学习完C语言输入就会明白了。\n\n即使多种多样的IDEs普遍有着比较类似的标准，但是细节方面还是各自不同的，不仅在一行程序内，还在编译器的不同版本。你需要做些实验，来获知你的编译器是怎么工作的，你还有可能需要阅读使用手册或者尝试网上教程。\n\n## IBMPC上的DOS编译器\n对于很多人来说，在个人电脑上运行DOS是很过时的事情，但是它对于那些电脑资源与预算受限、喜欢更简单的，没有[响铃、哨音]与令人分心的事物的操作系统。很多Windows IDEs额外提供了命令行工具，这就然你能够在DOS命令行环境下编程。Comeau的C/C++编译器在很多系统中是适用的，包括几种Unix、Linux的变体，它就拥有一个命令行DOS的版本。并且，它还有免费与共享的DOS系统编译器，例如，GNU gcc编译器就有一个以DOS为基础的版本。\n\n源码文件应该以文本文件形式存在，而它们并不是文字处理文件。（文字处理文件包括了很多额外信息，比如字体和格式）你应该使用一个文本编辑器如Windows Notepad或者与一些版本的DOS一同发布的EDIT程序。文件的扩展名需要是`.c`，一些处理器会自动在文本文件后面加上`.txt`的扩展名。如果你遇到了这种情况，你需要改变文件名，把`.txt`改为`.c`。\n\n电脑上的C语言编译器通常，但并不总是，生成带有`.obj`后缀的中间目标代码，不像Unix编译器，C语言编译器通常不会在编译完成之后删除这些文件。有些编译器也会生成带有`.asm`扩展名的汇编语言文件，或者使用它们自己的特殊形式。\n\n## Mac上的C语言\n\n最广受闻名的Mac C/C++编译器就是Metrowerks CodeWarrior 编译器（Windows与Mac版本的CodeWarrior有相似的界面），它提供了与Windows编译器相似的以项目为基础的IDE。从文件菜单选择新文件开始，一系列的项目类型选择将会陈列在你眼前。在最新的CodeWarrior版本中，使用Std C控制台即可（不同的发布版本需要经过不同的步骤才到达选择这一步），你还有可能在68KB版本（适于摩托罗拉 680 * 0 系列的处理器），PPC版本（适于PowerPC处理器）或者Carbon版本（适于OS X系统）\n\n新的项目在最初项目中会有一个很小的源码文件，你可以尝试编译或者运行它来获知你的系统是否设置好了。\n\n# 1.8 语言标准\n\n现在，很多C语言实例都是可行的，理想化情况下，当你在写C语言程序时，在任何的实例中都是一样运作的（假设你没有使用特殊机器来编程），为了这件事情能够实现，不同的实例需要有一个确定的、可识别的标准。\n\n最初，C语言官方并没有语言标准，但是，由Brian Kernighan和Dennis Ritchie（1978）编纂的最初一版的***C Programming Language***确立了被接受的标准，它通常被称作为***K&R C***或者***classic C***。特别的是，那本书附录中的“C Reference Manual”作为了C语言实例的指导。但是，比如编译器，就会要求一个完整的K&R实例，因为即使附录中定义了C语言，它还没有定义C语言库。C比其他的大多数语言都要更加依赖于C语言库，所以库标准还需要确立。没有任何的官方标准的情况下，Unix实例中提供的库就成为了实际的标准。\n\n## 第一个ANSI/ISO C语言标准\n随着C语言的进步与在不同系统中的广泛使用，C语言社区意识到它需要一个更加综合、与时俱进并且严格的标准。为了满足这种需求，美国国家标准研究院在1983年成立了X3J11委员会，开发了一种新的标准，它在1989年被正式使用，这种新型标准（ANSI C）不仅定义了语言而且还定义了基础的C语言库，国际标准化组织采用了在1990年一种C语言标准（ISO C）。ISO C与ANSI C本质上是一样的标准。ANSI/ISO标准的最后一种版本通常被称作***C89***（因为那是ANSI同意的时候）或者***C90***（那是ISO同意的时候），而且因为ANSI版本是先推出的，人们更经常用的是ANSI C。\n\n这个协会有几项指导准则，可能最有趣的就是这一项：保持C语言的精神\n委员会在阐述这种精神的时候列出了以下的几点。\n\n+ 相信编程人员。\n+ 不要阻止编程人员做需要做的事情。\n+ 保证简单、小型地使用这种语言。\n+ 一项操作只提供一种方式。\n+ 即使传输性会下降，也要尽力让C语言程序运行变快。\n\n在最后一点中，委员会的意思是实例必须界定一种对于目标电脑的运转最好的操作，而不是试着强加抽象的、统一的定义。在学习语言的同时，你也会体会到这种哲学的。\n\n## C99标准\n在1994年，他们开始重新审视这个标准，这也导致了C99标准的产生，一个ASIO/ISO联合委员会，也被称作***C9X***委员会批准了C90标准的准则，包括保持语言的小型与简洁，委员会的目的并不是向语言中添加新的特性，而是按需去达到新的目标。其中一个主要目标就是，通过比如提供解决国际字符集的方法，来支持国际编程。另一个目标就是“把现存的实践编程化来解决明显的缺陷”。因此，当在达成把C语言移植到64位的处理器上的需要时，委员会 以在真实生活中应对过这种问题的人的经验为基础来添加标准。第三个目标就是改善C语言执行科学与工程项目时做关键数字运算时的合适度。\n\n这三点-国际化，纠正缺陷与对于计算可用度的改善是最主要的以改变为方向的目标，其他的改变计划自然更加保守，例如，把与C90与C++的不协调降到最低，并且让这个语言概念上是简洁的。用委员会人员的话来说，“委员会在让C++变得更加重要，更加有发展动力。\n\nC99改变的结果，就是它保持了C语言的必要的基本特征，C语言仍然是一个小型的，简洁并高效的语言，这本书指出了很多C99的变化，因为现在的大多数编译器还没有完全实现所有的C99的改变，你可能会发现有些在你的系统上不能实施，或者你会发现一些C99特征只有你改变了一些编译器的设置才可以实现。\n\n#注意 \n这本书将会使用ISO/ANSI C这些词来表示这些特征来表示均为两种标准均适用的特征，使用C99来指明新的特征。偶然的，当一种特性是第一次加入C语言时，它也指C90标准。 \n\n# 1.9 本书的组织架构\n\n组织信息的方式有很多。其中一种最直接的方式就是把每一个话题的所有相关信息全部列出来，这对于参考书是极其实用的，因为你就可以在一个地方找到所有关于给定主题的信息。但是它对于学习项目并不是最好的顺序。例如，如果你从开始学习名词开始学习英语，你的表达能力就会被严重地限制。当然，学习好了名词你随便找到某个东西就能说出它的名字，但是如果你能够学一些名词、动词、形容词等等，还有一些关于这些部分如何相互连接的规则，你就会有更大的能力来表达自己。\n\n为了让你能够更均衡地消化信息，这本书使用了一种螺旋上升的方式，在初期的时候先提到这个主题，然后在后文给予更充分的讨论。例如，对于理解C语言，理解函数是极其关键的，因此，在前面的几章就会包括对于函数的一些讲述，以便于你能够在第九章全面讲述函数的时候，已经能够使用函数获得到一些轻松了。相似的早期的篇章也会预先讲述字符串和循环，那样你就可以在还没有细致地地了解它们之前，在你的程序中先使用那些有用的工具。\n\n# 1.10 例子的使用\n\n我们已经差不多要开始学习C语言了，这一单元已经包括了我们在陈述材料的时候的一些例子了。\n\n## 字体 Typeface\n\n对于呈现文字的程序与电脑的输入输出，我们使用你很可能在屏幕上或者在输出的时候看到的相似的字体。我们已经使用过几次了。为了防止你没有注意到，字体看起来是下面这样的\n\n![字体示例](/img/typeface.png)\n\n相同的等宽字体也被用作是与编程相关的词汇，比如`main()`，也用作文件名，比如`stdio.h`，对于用来替换特殊词汇的占位字符，我们是用斜体的等宽字符来写的，比如下面的描述。\n*type_name variable_name;*\n例如，你有可能用*type_name*来替换`int`，用*variable_name*来替换*zebra_count*\n\n## 程序输出 Program Output\n\n电脑中的输出是以与我们书中相同的形式被印出来的，但输入是以粗体字被显示出来的。例如，下面就是在14章“结构体与其他数据类型”中的输出。\n\n![输出示例](/img/output.png)\n\n以正常电脑字体打印出来的是程序的输出，黑体字是用户的输入。\n你与你的电脑交互的方式有很多，我们假设你是用键盘在键入指令的，在屏幕上阅读反馈。\n\n## 特别的按键 Special Keystrokes\n\n通常，你会通过一个标签为Enter的按键，c/r，返回或者其他的方式输入一行指令，我们在文中称这些按键为***Enter key***，自然也就会默认你会在每一行输入之后按下Enter键。然而，为了阐明特定的观点，一些例子可能会明示出Enter键，以[enter]的形式来呈现它，这个括号就表示你需要按下一个按键而不是打字**enter**。\n\n控制字符中的特殊按键，比如CTRL+D，这种标记指在你按下Ctrl标志的按键（或者可能是Control）时按下D键。\n\n## 准备学习这本书使用的系统\n## Systems Used in Prepare This Book\n\nC语言的一些部分，比如储存数字时使用的空间，是取决于系统的。当我们举例子并且指的是我们的系统，“我们提的是一台在WinXP专业版下有奔腾处理器的电脑，并且使用Metrowork的CodeWarrior开发工作室9.2版本和微软的Visual C++ 7.1（这个版本Microsoft Visual Studio .NET 2003也开发完成）,或者gcc 3.3.3。在编写的时候，对C99的支持并不完全，而且没有编译器能够支持C99的全部特性。但是，在它们之间，这些编译器已经包含了许多的新标准下的东西了。大多数实例是在Mac G4上通过Metrowerks CodeWarrior Development Studio 9.2来测试的。\n\n这本书有的时候也参考在Unix系统中运行的结果，Unix系统是在Berkley's BSD 4.3 version的Unix系统中，在VAX 11/750电脑上运行的。而且，一些程序也是在Linux系统下使用gcc 3.3.1与Comeau 4.3.3在奔腾处理器的电脑上测试的。\n\n样本代码，对于在这本书中陈述的完整程序是可以在Sams网址 (www.samspublishing.com) 中找到的，搜索这本书的ISBN号（不带连字号）就会显示这本书的昵称，点击昵称，进入网址，你就可以下载代码了。你还可以在这个网站上找到编程训练的解决方法。\n\n## 你的系统-你需要的 Your System\n\n你需要有一个C语言编译器，或者至少可以使用一个。C可以在很多中电脑中运行，所以你有很多的选择。一定要确保使用的编译器是专门为了你的系统而设计的。这本书中的一些实例需要C99标准支持，但是大多数实例在C90标准下的编译器都是可以运行的。如果你使用的是在ANSI/ISO标准之前的，你就需要做出一些调整了，很可能得通常鼓励你去找寻些新的东西了。\n\n大多数编译器的供应商会为学生与教育者特价，如果你是那类人，那就看看供应商的网站。\n\n## 特殊元素 Special Element\n\n这本书包含了几部分特殊元素，强调了特别的重点：补充、建议、警告、笔记。\n\n![四种特殊信息类型](/img/four_kinds.png)\n\n+ Sidebar(补充) \n\t为阐明内容提供了更深刻的见解或者更多的背景信息\n+ Tip(建议)\n\t对于特定的编程情况提供了简短，使用的建议。\n+ Caution(警告)\n\t警告潜在的陷阱\n+ Note(笔记？)\n\t提供了综合的注释，不符合其他的特殊类型的信息。\n\n# 总结\nC语言是一种强大、简洁的编程语言。\n因为提供了使用的编程工具、对于硬件设备的控制良好，\n并且是最容易从一种设备传输到另一种设备的语言，\n它受到很多人的欢迎。\n\nC语言是一种编译型的语言，\n需要C语言编译器与连接器来把C语言源代码转化成可执行程序。\n\nC语言的编程可能是费力、困难甚至令人沮丧的，\n但是它也可以是有趣的、令人振奋与满足的。\n我们希望你能够像我们一样找到C语言的乐趣与魅力。\n\n# 回顾问题\n\n你会在**附录A-回顾问题答案**中找到问题的答案。\n(以下为我本人的想法)\n\n1.在编程中，***传输性***指的是什么?\n\t编程得到的文件在不同类型的操作系统中几乎不需要修改或者只需要修改一点就可以顺利地进行转移。\n2.解释源码文件、目标代码文件与可执行文件。\n\t源码文件是我们通过编辑器输入的代码，目标代码文件是源码文件经过编译器处理之后生成的包含库文件函数声明与我们输入的代码的机器语言翻译的文件，一般是asm的汇编文件或者obj，不具有执行的能力。\n\t可执行文件是把库文件与目标代码文件结合起来之后翻译成的最终文件，它包含了程序运行需要的一切函数声明、变量、指令的翻译。\n3.编程的七步走。\n\t首先在纸上想这个问题可以怎么解决，然后结合具体的语言来想实现方法，然后写代码，然后编译，然后运行，然后检查正误，进行修改与调试。\n\t×\n\t第一步，明确程序目的，你想要程序做什么\n\t第二步，设计程序，包括目标人群，用户界面与交互方式，实现时间，数据处理方式\n\t第三步，使用C语言知识写代码\n\t第四步，编译\n\t第五步，运行程序\n\t第六步，通过输出过程量等方法来调试，输入多个值来测试。\n\t第七步，维护与修改程序。\n4.编译器做了什么工作？\n\t把源码文件中你输入的代码转变为机器语言。\n5.连接器做了什么工作。\n\t把你代码中缺少的库函数内容补充完整，并且针对系统添加起始代码。\n\n# 编程训练\n\n我们现在还不期望你开始写C语言代码，所以这一次锻炼就集中于编程过程的早期阶段吧。\n\n1.你被MacroMusic公司录取了，这个公司正在进入欧洲市场，想要一个能够把英尺换算成厘米的程序（1 inch = 2.54cm）公司想要让这个程序能够提示使用者去输入一个英尺值，你的任务就是找出这个程序的目的，并且设计这个程序。\n\n程序目的：我想要设计一个通过乘除法来把输入的数值变作2.54倍的程序，输入是英尺值，2.54倍是厘米值。\n\n程序设计：\n首先输出一行：请输入英尺值\n然后向用户获取输入值。\n接着经过把值 * 2.54来获取厘米值\n然后在屏幕上输出数值。\n\n交互方式就是输入输出，因为目标人群是欧洲人，所以需要英语，需要更多的UI设计等。\n\n> END..","source":"_posts/C-premier-plus-Chapter-1.md","raw":"---\ntitle: C premier plus Chapter 1\ndate: 2023-11-27 23:18:43\ntags: C_premier_plus\n---\n\n# 第一章 学习准备\n\n>**你将会在这一章学到：**\n> \t1. C的历史以及特点\n> \t2. 写程序的步骤\n> \t3. 关于代码连接器与编译器的一些知识\n> \t4. C标准\n\n欢迎来到C语言的世界！C语言是一种充满活力的高级编程语言，它受到业余与商用编程者的喜爱。\n这一章会为你学习与利用这种强大而又受欢迎的语言，而且会向你介绍几种你最有可能搭建C语言基础的环境。\n\n首先，我们看向C语言的来源和它的一些特点（优点以及缺点）。接着，我们会了解编程的起源，查看编程的总体规则。\n最终，我们会讨论如何在常见的系统中运行C程序。\n<!--more-->\n\n# 1.1 C语言的由来\n\n贝尔实验室的Dennis Richie在1972年创造了C语言，也就在那时，他和Ken Thompson正在致力于设计Unix系统。C语言的想法并不完全是在Richie的脑袋里冒出来的，而是来自Thompson的B语言，B语言来自哪里又是另一个故事了。重点是，C语言是作为工作中的编程人员的工具被创造出来的，所以它的首要目标就是成为一种有用易用的语言。\n\n很多编程语言都有着类似的目标，但是它们又经常会有其他的顾虑，举几个例子，Pascal语言的主要目标，就是为了教授编程规则提供良好的平台。BASIC语言，被设计得与英语很相像，从而可以方便地让不熟悉电脑的学生们学习。这些目标都是很重要的，但是并不与实际使用协调，也并不是普遍都很易用。相比之下，C语言是为了编程人员而生的，而且成功地成为了现代编程语言的一种选择。\n\n# 1.2 为什么使用C语言？\n\n在过去的30年来，C语言已经成为了最重要与最受欢迎的编程语言。它的成长，就是因为人们经过尝试之后，喜欢使用它。过去的10年里，许多人从C语言转到的更有规模的C++上，但C语言仍然是拥有权重的一种很重要的语言，C++也是从C语言迁移过来的。在学习C语言的过程中，你会意识到C语言的许多长处（见图1.1）让我们预先查看一下。\n![插图](/img/Chapter1.2.png)\n（上图，左上为强大的控制结构，右上运行速度快，左下小型代码-小程序，右下是可以传输到不同的电脑）\n\n## 1.2.1设计特点\nC语言是一种拥有在理论界以及计算机科学实践中令人满意的控制特色的现代编程语言。它的设计让它很自然地能自上而下地规划程序、结构化编程以及模块化设计，从而设计出的程序也更可靠，更易懂。\n\n## 1.2.2 效率\nC语言是一种高效的编程语言，它的设计很好地利用了现代电脑的性能。C语言编写的程序常常是小型的，并且运行速度很快。事实上，C表现了一些在汇编语言中好的控制方法，（汇编语言是对于特定的中央处理单元(Central Processing Unit,CPU)的内部指令设计的的助记语句，不同的CPU有着不同的汇编语言）。如果你选择C语言，你可以调节你的程序到达最快速度或者让程序对于内存的使用更有效。\n\n## 1.2.3 可传递性\nC语言是一种可传递的编程语言，那意味着在一个系统上的C语言程序也可以在其他系统经过少量的改动或者不改动运行。即使改动是必须的，也只是改动头文件与main程序里的几个词条而已。大多数也打算着有可传递性，但是任何想要把个人电脑IBM里的BASIC程序放到苹果BASIC（它们是近亲）或者尝试把主机上的IBM里的FORTRAN程序在Unix系统中运行都知道传递烦人透顶。C语言是可传递性的领头者。C语言的编译器（把你的C语言代码转换为电脑内部指令的程序）对于40种系统都是可以使用的。从微型处理器到超算。但需要注意的是，一部分程序对于不同的硬件设备是不一样的，比如显示器监控，或者因为在运算系统上的特殊点，比如WinXP与OS X，它们通常是不具有传递性的。\n\n因为C语言与Unix操作系统关系紧密，Unix系统的安装包是自带C语言的编译器的，Linux安装时也通常带有C语言编译器，一些C语言编译器是可以在个人电脑上使用的，包括运行着各种版本的Windows系统的电脑，还有Mac。所以不论你是正在使用着家里的电脑，还是使用专业的工作站或者大型电脑，你都是有很大可能获得一个适用于你的系统的C语言编译器的。\n\n## 1.2.4能力与灵活性\nC语言既强大又灵活（在计算机文献中最受喜欢的两个词）。\n举个例子，许多功能强大与灵活的操作系统是用C语言写的。许多的其他编程语言（如FORTRAN、Perl、Python、Pascal、LISP、Logo与BASIC）的编译器与翻译器是用C语言写的。结果，当你在Unix机上使用FORTRAN语言，最后是用C语言程序生成的exe文件。C语言程序被用作解决物理、工程问题甚至在电影如《角斗士》中栩栩如生地重现特殊的现象。\n\n## 1.2.5 以程序员为方向的\nC语言重视于满足程序员的需求，让我们轻松地触达硬件，而且让你独立地操纵内存中的每一个bit。它拥有非常多的运算符，能够让你简洁地表达自己。C语言比起，比如说Pascal语言就在限制着你可以做的事情。这种灵活性既是优势也很危险。优势在许多的任务，像是数据形式转换，在C语言中简单很多。危险就是用C语言，你有可能犯在其他语言中不可能犯的错误。C语言给予了你更大的自由，也让你承担了更多的责任。\n\n另外，大多数C语言的实施都有着大量有用的C语言库函数。这些函数能够应对很多编程人员通常的需求。\n\n## 1.2.6 缺点\nC确实有一些不足之处。通常，像人一样，不足与长处是同一个特点的两面。例如，我们提到了C语言的自由表达也需要更多的责任。C语言的指针（我们以后会学习到）使用特别地，意味着编程错误会更难跟踪到。曾经也提到了一台没有文字的电脑，解放的代价就是格外的警惕，\n\n有着大量的运算符，C的简明也让有可能让我们写出极其难以理解的代码。你可能并不是必须要写晦涩的代码，但是可能性总在那儿。毕竟，其他语言哪个有每年一次的混乱的编程比赛？\n\n还会有更多的长处，毫无疑问也会有更多的缺陷。与其在这个问题上挖的更深，还不如移到下一个话题。\n\n# 1.3 C语言的用处\n\n到 1980 年代初，C 语言已经是 Unix 系统小型计算机世界的主导语言了。从那时起，它就已经被传播到个人计算机（微型计算机）和大型主机（大型计算机）了。（参见图 1.2）许多软件公司把C语言作为制作文字处理程序、电子表格、编译器和其他产品的首选语言。它们知道C语言编写的程序代码量小而且高效。更重要的是，他们知道这些程序将易于修改，并易于适应新型号的计算机。\n![图片](/img/Chapter1.3.png)\n（以上，C语言被用作编程Unix操作系统，被用作电影如Star wars，在电脑游戏、电脑语言处理、嵌入式系统与机器人工程中都有显著的作用）\n\nC语言不仅对公司和老手有好处，对其他用户也有好处。越来越多的计算机用户已经开始使用 C 语言，它的优势也得到了确保。你不必是专业的计算机编程人员就可以使用C语言了。\n在 1990 年代，许多软件公司开始转向 C++ 语言进行大型编程项目。C++ 将面向对象的编程工具嫁接到 C 语言中。（面向对象编程是一种思想体系，它试图使语言来适应问题，而不是让问题来适应语言。）C++ 几乎是 C 语言的超集，这意味着任何 C程序也是，或者它几乎也是一个有效的C++程序。通过学习 C语言，您还学习了许多 C++。\n尽管 C++ 和 Java 等新型的编程语言很受欢迎，但 C语言在软件公司依然是核心技能，一直排在所需技能的前 10 名。特别的，C语言已成为在嵌入式系统编程中很受欢迎的一种语言，也就是说，它被用于编程越来越多的汽车、相机、DVD 播放器和其它现代便利设施中的常见的微型处理器。此外，C语言已经开始追赶在科技科学编程上具有长久的主导地位的FORTRAN语言。最后，作为为开发操作系统而生的语言，C语言在Linux系统的发展中发挥着重要作用。所以，在二十一世纪的第一个十年， C 语言的影响力仍然在变得更大。\n\n简而言之，C 是最重要的编程语言之一，并将继续如此。如果你想要一份编程软件的工作，这应该是你能够回答“是”的第一个问题中的一个，“嗯，比如说，你会C语言吗？“\n\n# 1.4 计算机的作用\n\n既然你已经要开始学习如何运行C语言程序了，你很可能需要了解一下电脑是怎么工作的，这些知识能够帮助你了解C语言程序与最终运行程序后发生的事情之间的关联。\n\n现代的电脑有几个组成部分，***中央处理器***，又叫***CPU***，做了电脑运转时的大部分工作。***随机存取器***，又叫***RAM***，作为保存文件与程序的工作区。永久存储器，比如硬盘，存储程序和文件，即使电脑已经关机。各种外设，比如键盘、鼠标还有显示器，在你与电脑交互中搭建了桥梁。CPU运行程序，所以我们集中于它的作用。\n\nCPU的自始至终的工作，简单来说，其实是非常简单的。它从内存中依次抓取一条条的指令，然后执行它。（千兆赫CPU可以在一秒钟执行这个过程百亿次，所以CPU可以以一种惊人的速度运作），CPU也有自己的小工作区，有几个储存数的***寄存器***。每一个寄存器保存下一条指令的内存地址，然后CPU就使用这些信息来抓取下一条指令。接下来，CPU再把指令储存在另一个寄存器中，然后把上一个寄存器的命令更新到下一条。CPU能够理解的指令（也叫指令集）是有限的。而且这些指令都是各自分明的。很多指令都是要求电脑去把数字从一个地方移动到另一个地方。---例如，从内存到寄存器。\n\n在这个过程中有几点很有趣。第一，在电脑中任何东西都是以数字的形式储存的，数字是以数字的形式储存的。字符（例如你在文本编辑中的英文字母），也是由数字的形式储存的，每一个字符都有一个数字编码。计算机储存进寄存器的指令也是数字的形式，指令集中的每一条指令都对应着一个数字编码。第二，电脑程序最终会被以数字指令的形式表达，这又叫***机器语言***。\n\n计算机运行的一种结果就是，如果你想让计算机做些事，你需要提供一系列的指令或者是程序，来明确地告诉它要做什么和怎么做。你必须创建一个电脑能够直接理解（使用机器语言）的程序。这是个精细、单调、费劲的任务。一些像两个数相加的简单的任务可能会被分解成几步，可能会像下面几步。\n\n>1.从内存区域2000把数字复制到寄存器1\n>2.从内存区域2004把数字复制到寄存器2\n>3.用数字二的数值加上数字一，在寄存器1留下答案。\n>4.把寄存器1中的数据复制到内存区域2008\n\n而且你还得把每一条指令用数字指令表述出来！\n\n如果你是喜欢以这种方式写程序的，你会很难过地了解到机器语言编程的黄金时期已经远远地过去了。但是如果你更喜欢那些更愉快的编程，那就对高级编程语言打开怀抱吧！\n\n# 1.5 高级计算机语言与编译器\n\n>高级编程语言，比如C语言，以很多方式简化了你的编程。\n\t第一，你不需要用数字的形式来表达你的指令。\n\t第二，你使用的指令与你对于程序的思考而不是与电脑使用的精确的指令\n\n与其关心某一个CPU为了完成某一个任务进行的某一步。你可以以一种更复杂的形式来表达你想做的事情，例如，你也许会写下面的东西。\n\n```C\n\ttotal = mine + yours;\n```\n\n看到这样的代码，你能够很明白它是干啥的，\n而看着机器语言以数字构成的替代指令，那就太不易读了。\n\n不幸的是，机器语言才是适合电脑的，对于电脑来说，高级语言完全无法理解。这就到了编译器上场的时候了，***编译器***是把高级语言程序详细地翻译成电脑需要的机器语言指令的程序。你以高级的方式思考，编译器做这些令人生厌的工作。\n\n编译器方法还有另一种好处。每台电脑都设计了各自的机器语言，所以比如说英特尔PentiumCPU的机器语言对于摩托罗拉PowerPC CPU可能没有任何意义，但是你可以根据特定的机器语言搭配编译器。所以，使用一系列的编译器或者合适的编译器，你就可以把同样的高级编程语言转化成一系列不同的机器语言程序。你只需要解决这个问题一次，然后让编译器把这个解法翻译成一系列机器语言程序。\n\n简短地说，高级的编程语言，比如C语言、Java还有Pascal，它们以一种更加抽象、与特定的CPU并不绑定的方式来表述程序行为。而且，对于机器语言来说，高级语言学习起来简单而且也更容易编程。\n\n# 1.6 使用C语言的七步走\n\nC语言，如你所见，是一种编译型的语言，如果你习惯于使用如Pascal或者FORTRAN的编译型语言，你应该已经对组成C语言程序的基本步骤很熟悉了。如果你的基础语言是如BASIC，或者面向接口的计算机图形语言（如Visual Basic）的翻译型语言，或者你还没有编程基础，你需要学习如何编译。我们一会就会研究那个过程，你会认识到这是很合理简单的。首先，为了让你宏观、大体上了解编程，让我们把编写C语言程序分解成7个步骤（见图1.3）。值得注意的是，这只是理想化的步骤，在编程实践中，你需要在步骤中来回切换，用后面一步了解到的来使之前的一步得到优化。\n![七步走](/img/Chapter1.6.png)\n\n## 1.6.1 确定程序目的\n\n很自然的，你需要明确地知道你想让程序做什么，思考你的程序需要什么信息，需要在计算与控制上完成什么样子的事情，而且程序内的信息需要对你有所反馈，在这一步的规划中，你应当以大体出发，而不是根据特定的编程语言来思考。\n\n## 1.6.2 设计程序\n\n在有了对于你的程序应该干啥的印象之后，你应该选择程序如何来运行它，用户的交互界面会是什么样子的？程序应该如何被组织起来？程序的目标人群是？你需要多长时间来做完这个程序？\n\n你还要决定在程序中呈现数据，而且很可能的，在辅助文件里也要。要决定用什么方式来处理数据。在刚开始学习C语言时，可能选择会很简单，但是随着你应对更多复杂的情况后，你就会知道这些选择是需要更多的思考的。选择一种好的方式来呈现数据经常会让设计程序与处理数据简单很多。\n\n再一次，你需要在大体层面上思考而不是在特定的代码上，但是有些选择可能是基于编程语言的大体特点的，举个例子，C语言编程人员就比，比如说，Pascal编程人员在数据呈现上拥有更多的选择。\n\n## 1.6.3 编写代码\n\n既然你已经对于你的程序有个清晰的设计了，你就可以通过写代码的方式来实现它了。也就是说，你可以把你的程序设计翻译为C语言。这就是你需要用上C语言知识的地方了，你可以在纸上画出你的想法，但最后你还是要把你的代码输入电脑。这个过程主要取决于你的编程环境，我们一会会呈现更多的常见的编程环境。总体上，你会使用文本编辑器来创造一份源码文件，它包含了你程序设计的C语言翻译，例1.1给出了C语言源码的一个例子。\n\n![图例1.1](/img/listing1.1.png)\n在这一步，你应该记录你的工作，最简单的方式是使用C语言的注释功能，它包含着你对于源码的解释，我们会在第二章详细讲到如何注释你的代码。\n\n## 1.6.4 编译\n下一步就是编译源码，再一次，细节上的问题是与你的编程环境相关的，我们马上会研究几种常见的环境了。现在，让我们以更概念化的方式看看发生了什么。\n\n我们已经知道编译器的工作就是把源码转化成可执行文件。***可执行文件***是以我们电脑的自然语言（或者说***机器语言***）写成的，这种语言是以精细的数字代码形式呈现的。而且你之前也了解到了，不同的电脑的机器语言是不一样的。C语言的编译器也包括着C语言库中的代码。C语言库包含着很多的基础的、日常使用的东西，比如**Printf**和**scanf**函数。（更精确地说，一个叫做连接器的程序把C语言库中的一组代码带到编译器，但是编译器在大多数系统都是可以运行连接器的），最终结果就是包含着电脑可理解的可执行文件的程序，你可以直接运行。\n\n编译器还会检查你的程序是不是使用了符合语法的C语言，如果编译器发现了错误，它就会汇报给你，而且不会生成可执行文件，理解编译器提示的错误信息也是你会很快习得的另一项技能。\n\n## 1.6.5 运行程序\n\n通常的，可执行文件是你可以运行的程序，你可以在很多常见的环境中，包括MS-DOS、Unix、Linux控制台、只需要打字写下可执行文件的名称。其他的环境，比如VMX、VAX可能需要一些运行指令或者其他的机制方法。***集成开发环境（IDE）***，像很多在Windows系统或者Mac系统上的，使你能够在IDE内部通过菜单选项或者按几个按键来编辑与运行你的C语言程序。最终生成的文件也可以通过双击文件名或者图标的方式从你的操作系统直接运行。\n\n## 1.6.6 测试与Debugging\n\n你的程序能够运行是个好迹象，但是有可能你的程序并没有正确地运行。因此，你应该检查下是否它做到了它应该做的事情。你会发现有些程序是会有问题（在计算机领域内的行话叫bugs）的。调试是查找与修复程序错误的过程，学习的过程中犯错误是自然且正常的。看起来编程“天生”需要调试，所以当你把学习到的与编程实际结合起来的时候，你最好准备好在犯错的时候提醒自己。随着你成为一个更加强大与巧妙的编程人员，你也会不断地犯错，但你也因此不断地变得更加强大与巧妙。\n\n你会有很多机会犯错，基础的设计层面错误，实现过程出错，忽略了可能会搞砸你的程序的输入。你可能会不恰当地使用C语言，你可能会拼写错误，可能会把括号放错了位置等等等等。你会有自己的错误方式来丰富这一列的。\n\n幸运的是，这种情况并不是无望的，即使有时候你会这样认为啦。\n编译器会捕捉到很多种类的错误，而且还会有工具来帮助你找到许多种编译器没有办法捕捉的错误。继续读下去，这本书也会给到你一些调试的建议。\n\n## 1.6.7 维护与修改程序\n\n当你为自己或者别人创造了一个程序，你可能会发现程序是可以有更多的用处的。如果是的，你可能会发现是有理由做出些修改的。可能有个小bug只有别人把名字以Z/z开头的时候才会发生，或者你会想出一种能够解决问题的更好的方式，可以聪明地加入一些的新功能，你可能需要改写程序以便它能够在不同电脑系统中运行。如果你明确地注释了这些程序，所有这些任务都会被极度地简化。\n\n## 1.6.8 注释\n\n编程的过程并不总是像这个过程描述的那样线性。有的时候你需要在步骤中前后切换。例如，当你在写代码的时候，你有可能发现你的计划并不实际。你有可能发现了一种更好的方式来做事，或者在看到程序是怎么运行的之后，你会想要改变你的设计，记录你的工作能够帮助你在不同的等级之间前后切换。\n\n许多学习者通常会忽略掉第一步与第二步（确定程序目的与设计程序）直接进入第三部（写程序），你写的第一个程序或许可以直接在脑中看到完全的流程，如果犯错也很好定位错误。但是随着你编写的程序越来越复杂，越来越冗长，心智的视觉化就开始失效了，而且错误也会更难以发现。最终，那些忽略了规划步骤的人就陷入数小时的时间浪费、困惑还有沮丧，因为他们写出的丑陋的，无法实现功能而又深奥的程序。这项工作越是复杂，需要的规划工作就越多。\n\n道理就是你需要养成在写代码之前做规划的习惯，使用这种古老但是可敬的笔尖技术来记下你程序的目的，给程序设计做出大纲。如果你这样做的话，你最终会收获节省时间与满足感的巨大红利。\n\n## 1.6.9 编程技术\n\n你生成程序的明确步骤是取决于你的电脑系统的，因为C语言是可传输的，它是可以适用于很多的系统环境的，包括Unix，Linux，MS-DOS（是的，很多人仍然在用），Windows与Mac OS，其实还有很多只不过没有足够的空间留给它们了，这尤其是因为各自的产品不是演化、消亡，就者被取代。\n\n首先，即使如此，让我们先来研究许多C语言运行环境的共有特点，包括我们刚才已经提到的五种系统，你不需要明确地知道是什么引导了C语言程序的运行，但这是良好的基础，它也能够帮助你更好地理解为什么你需要经历一些特定的步骤来得到一个C语言程序。\n\n当你在写C语言程序的时候，你会在源码文件中储存你在文本文件中写下的东西。大多数由C语言编程的系统，也包括我们提到的那一些，需要以`.c`结尾的文件（举个例子，`wordcount.c`与`budget.c`）在`.c`之前的那部分名字叫做***基准名（Basename）***\n在这一段后面的名称叫做***拓展名（Extension）***，因此，`budget`是基准名，`.c`是拓展名。它们的混合就是文件名。文件名也必须要复合特定的电脑操作系统的需要。例如，IBM-PC与[克隆机？]上的MS-DOS系统，它就要求你的文件名不能多于8个字符长。所以，`wordcount.c`在DOS系统中就不是合法的文件名。一些Unix系统在整个文件名上有14个字符的限制，包括拓展名，其他Unix系统也允许更长的名称，不多于255个字符即可。Linux、Windows与MacOS也允许更长的文件名。\n\n让我们假设我们拥有一份名字叫`Concrete.c`的源文件储存着例1.2的C语言源码。\n![Concrete.c](/img/listing1.2.png)\n不需要担心在源码文件中的一些细节，在第二章你会学到的。\n\n#\n\n## 1.7.1 目标代码文件、可执行文件和库\n\nC语言编程的一个基本本领就是把你的源代码文件转化成保存着即时就可运行的可执行文件。要实现这个过程需要两个步骤：编译与连接。编译器可以把源代码转换成中间代码，然后连接器再把中间代码与其他代码组合，由此创造出可执行文件。C语言利用这两部分结合的方法让程序易于模块化生成。你可以把每一个模块分开来编译，再用连接器把每一个编译过的模块结合起来。以那种方式，如果你想改变其中的一个模块，你就不需要再重新编译其他的模块，而且连接器也会把你的程序与预先编译好的库代码结合起来。\n\n要生成中间文件的方法还有几种，最流行的而且能够实施的在这里已经提到了，就是把源代码文件转化成机器语言代码，把结果放在目标代码文件中或者简短地说，目标文件。（假设你的源码是由单一文件组成的），虽然目标文件包括了机器语言代码，它还没准备好运行。目标文件包含了对于源代码的翻译版本，但是它还不完整。\n\n缺失的第一个部分就是起始代码，它作为你的程序与操作系统的接口。举个例子，你可以在在DOS或者Linux之下协调地运行BM PC，它们的硬件都是类似的，所以同样的目标文件对于两种系统都是可以起作用的，但是你需要在DOS与Linux不同的起始代码，因为不同的系统是以不同的方式处理程序的。\n\n第二个缺失的部分就是常用库的代码。几乎所有的C语言程序都需要利用C语言的库函数。比如`Concrete.c`使用的`printf()`。目标代码文件并不包括这个函数的代码。它只包含了`printf`函数的声明指令，实际的代码是在另一个文件中储存的，它叫***库文件***。库文件包含了很多函数的代码。\n\n连接器的作用就是把这三个部分连接在一起-你的目标代码、起始代码和库代码，然后把三者整合为一个文件，即可执行文件。对于库代码，连接器只提取需要使用的函数在C语言库中对应的代码。\n（见图1.4）\n![图1.4](/img/listing1.4.png)\n（可见，上图中，由源代码经过编译器生成目标代码文件，再由目标代码文件与起始代码、库代码通过连接器转化为可执行文件`concrete.exe`）.\n\n简短来说，一份目标文件与可执行文件都由机器语言指令组成。然而，可执行文件只把你使用的代码翻译为机器语言，但可执行文件还由常用库与起始代码的机器语言翻译组成。\n\n在一些系统中，你必须把编译与连接的过程分开。另外的一些系统中，编译器会自动启动连接器，所以你只需要编译即可。\n\n现在我们就针对于特定的系统来研究一下。\n\n## 1.7.2 Unix系统\n因为C的流行始于Unix系统，我们就从它开始。\n\n### 在Unix系统中进行编辑\nUnix系统并没有独立的C语言编译器。你反而需要一些多功能的Unix编辑器，例如emacs、jove、vi或者一个X Window系统文本编辑器。\n\n你的最主要的两个目的就是正确地书写程序，并且为储存程序的文件起个名字。正像已经提到的，文件的名称必须以`.c`。注意到Unix系统会以大小写来区分文件，所以`BUDGET.c`、`budget.c`还有`Budget.c`是三个各自不同的C源文件名称，但是`BUDGET.C`是不合法的，因为它的扩展名使用了大写。\n\n使用vi编辑器，我们把下面的程序保存在名叫`inform.c`的文件中。\n![inform.c](/img/informc.png)\n这些文本就是源代码，而`inform.c`是源文件，重点就在源文件只是一个过程的起点，而不是结尾。\n\n### 在Unix系统中进行编译\n我们的程序，虽然已经不可否认地很精致了，对于电脑仍然是一派胡言，电脑是不理解什么是`#include`和`printf`的（现在你可能也不理解，但是我们很快就会学习，然而电脑并不会），正像我们之前讨论过的。我们需要编译器的帮助来把我们的代码（源代码）翻译为电脑的代码（机器语言）。这些工作的结果就是可执行文件，它会包含所有可以让电脑完成工作的代码。\n\nUnixC编译器叫`cc`，为了编译`inform.c`程序，你需要把下面的指令打下来。\n```C\n\tcc inform.c\n```\n\n几秒之后，Unix系统的命令提示符就会给出反馈，告诉你这件事已经做完了，如果你没有正确地编写代码的话可能会得到警告或者错误信息，但我们先假设一切都是正确的。（如果你的编译器对于`void`这个词进行报错，那是你的编译器还没有更新到 **ANSI C** 的编译器，我们会在不久提到更多的标准，即使这样，你从例子中删掉void就好）。如果你使用`ls`指令来把你的文件列出来的话，你会发现产生了一个新文件叫`a.out`（见图1.5）这就是包含了程序中翻译后指令（或编译后指令）的可执行文件。想要运行的话直接打下`a.out`即可。\n\n然后，文件中的指令执行，智言倾泻而出。\n```Bash\nA .c is used to end a C program filename.\n```\n如果你想要吧可执行文件保存下来，你需要重新命名它，\n否则，这个文件在你下一次编译时就会被新的同名文件代替。\n![The process](/img/process.png)\n（从源码到程序的过程）\n\n## Linux 系统\nLinux也是个很受欢迎的开源的，与Unix类似的多平台操作系统，它包括IBM与Mac的兼容。在Linux上设计程序与Unix系统的过程大部分是相似的，除了你需要使用公用C语言编译器，它叫gcc，是由GNU提供的，在那里面，编译的指令是这样的：\n```Bash\ngcc inform.c\n```\n注意到在Linux安装的时候安装gcc的时候可能是可选的，所以你（或者其他人）有可能如果之前没装的话必须得自己安装gcc。通常这会让cc成为gcc的一个别名，所以你喜欢的话可以用cc来代替gcc。\n\n你可以在下面的网站中获取关于gcc获取更多的信息，包括最新的版本。\nhttp://www.gnu.org/software/gcc/gcc.html.\n\n## 集成开发环境（Windows）\n\nC编译器并不是Windows安装包中的一部分，所以你也有可能需要安装一个C语言编译器。很多供应商，比如Microsoft, Borland, Metrowerks, 还有Digital Mars, 提供了以Windows系统为基础的集成开发环境（***IDE***）（近来，很多已经把C语言与C++编译器结合在一起了。）它们都有快速且集成的环境，可以方便地生成C语言程序。值得注意的是，每一个程序都有一个嵌入式的编辑器，你可以用它来编写C语言程序。都有可以让你命名、保存、编译、运行的菜单。每一次编译运行如果编译器发现错误了你都可以回到编辑器，而且出错的代码行都会被突出显示出来，并搭配上适当的错误信息。\n\nWindows IDE通常是可以一同处理C与C++的，你需要声明你需要一个C++程序。使用一些产品，比如Metroworks或者CodeWarrior里你需要用项目类型来区分你使用的语言。其他的产品比如Visual C++你是使用`.c`的扩展名来表示你想要使用C语言而不是C++。然而，大多数C语言程序也作为C++程序运作，可以参考“Differences Between C and C++”，那里对C与C++进行了比较。\n\n你有可能遇到的一个问题是当程序停止的时候程序运行的窗口也随之关闭，如果你也遇到这种情况，你可以让程序直到你输入一个字符再结束。只要在代码结尾，return语句前加上一行代码即可。\n\n```C\n\tgetchar();\n```\n这一行代码读取一个键盘输入，所以直到你输入下一个字符之前程序都是暂停着的。一些时候，受到程序运行方式的影响，可能在最后已经有一个键入数据等待了，这种情况下你就得输入两次。\n\n```C\n\tgetchar();\n\tgetchar();\n```\n\n例如，如果程序做的最后一件事是要求你输入你的体重，你已经输入完体重了然后输入enter来输入数据，程序会读取你的体重，第一个`getchar`会读取回车符，第二个`getchar`直到你再打一个字符才会有，如果你现在还不太能够理解，你学习完C语言输入就会明白了。\n\n即使多种多样的IDEs普遍有着比较类似的标准，但是细节方面还是各自不同的，不仅在一行程序内，还在编译器的不同版本。你需要做些实验，来获知你的编译器是怎么工作的，你还有可能需要阅读使用手册或者尝试网上教程。\n\n## IBMPC上的DOS编译器\n对于很多人来说，在个人电脑上运行DOS是很过时的事情，但是它对于那些电脑资源与预算受限、喜欢更简单的，没有[响铃、哨音]与令人分心的事物的操作系统。很多Windows IDEs额外提供了命令行工具，这就然你能够在DOS命令行环境下编程。Comeau的C/C++编译器在很多系统中是适用的，包括几种Unix、Linux的变体，它就拥有一个命令行DOS的版本。并且，它还有免费与共享的DOS系统编译器，例如，GNU gcc编译器就有一个以DOS为基础的版本。\n\n源码文件应该以文本文件形式存在，而它们并不是文字处理文件。（文字处理文件包括了很多额外信息，比如字体和格式）你应该使用一个文本编辑器如Windows Notepad或者与一些版本的DOS一同发布的EDIT程序。文件的扩展名需要是`.c`，一些处理器会自动在文本文件后面加上`.txt`的扩展名。如果你遇到了这种情况，你需要改变文件名，把`.txt`改为`.c`。\n\n电脑上的C语言编译器通常，但并不总是，生成带有`.obj`后缀的中间目标代码，不像Unix编译器，C语言编译器通常不会在编译完成之后删除这些文件。有些编译器也会生成带有`.asm`扩展名的汇编语言文件，或者使用它们自己的特殊形式。\n\n## Mac上的C语言\n\n最广受闻名的Mac C/C++编译器就是Metrowerks CodeWarrior 编译器（Windows与Mac版本的CodeWarrior有相似的界面），它提供了与Windows编译器相似的以项目为基础的IDE。从文件菜单选择新文件开始，一系列的项目类型选择将会陈列在你眼前。在最新的CodeWarrior版本中，使用Std C控制台即可（不同的发布版本需要经过不同的步骤才到达选择这一步），你还有可能在68KB版本（适于摩托罗拉 680 * 0 系列的处理器），PPC版本（适于PowerPC处理器）或者Carbon版本（适于OS X系统）\n\n新的项目在最初项目中会有一个很小的源码文件，你可以尝试编译或者运行它来获知你的系统是否设置好了。\n\n# 1.8 语言标准\n\n现在，很多C语言实例都是可行的，理想化情况下，当你在写C语言程序时，在任何的实例中都是一样运作的（假设你没有使用特殊机器来编程），为了这件事情能够实现，不同的实例需要有一个确定的、可识别的标准。\n\n最初，C语言官方并没有语言标准，但是，由Brian Kernighan和Dennis Ritchie（1978）编纂的最初一版的***C Programming Language***确立了被接受的标准，它通常被称作为***K&R C***或者***classic C***。特别的是，那本书附录中的“C Reference Manual”作为了C语言实例的指导。但是，比如编译器，就会要求一个完整的K&R实例，因为即使附录中定义了C语言，它还没有定义C语言库。C比其他的大多数语言都要更加依赖于C语言库，所以库标准还需要确立。没有任何的官方标准的情况下，Unix实例中提供的库就成为了实际的标准。\n\n## 第一个ANSI/ISO C语言标准\n随着C语言的进步与在不同系统中的广泛使用，C语言社区意识到它需要一个更加综合、与时俱进并且严格的标准。为了满足这种需求，美国国家标准研究院在1983年成立了X3J11委员会，开发了一种新的标准，它在1989年被正式使用，这种新型标准（ANSI C）不仅定义了语言而且还定义了基础的C语言库，国际标准化组织采用了在1990年一种C语言标准（ISO C）。ISO C与ANSI C本质上是一样的标准。ANSI/ISO标准的最后一种版本通常被称作***C89***（因为那是ANSI同意的时候）或者***C90***（那是ISO同意的时候），而且因为ANSI版本是先推出的，人们更经常用的是ANSI C。\n\n这个协会有几项指导准则，可能最有趣的就是这一项：保持C语言的精神\n委员会在阐述这种精神的时候列出了以下的几点。\n\n+ 相信编程人员。\n+ 不要阻止编程人员做需要做的事情。\n+ 保证简单、小型地使用这种语言。\n+ 一项操作只提供一种方式。\n+ 即使传输性会下降，也要尽力让C语言程序运行变快。\n\n在最后一点中，委员会的意思是实例必须界定一种对于目标电脑的运转最好的操作，而不是试着强加抽象的、统一的定义。在学习语言的同时，你也会体会到这种哲学的。\n\n## C99标准\n在1994年，他们开始重新审视这个标准，这也导致了C99标准的产生，一个ASIO/ISO联合委员会，也被称作***C9X***委员会批准了C90标准的准则，包括保持语言的小型与简洁，委员会的目的并不是向语言中添加新的特性，而是按需去达到新的目标。其中一个主要目标就是，通过比如提供解决国际字符集的方法，来支持国际编程。另一个目标就是“把现存的实践编程化来解决明显的缺陷”。因此，当在达成把C语言移植到64位的处理器上的需要时，委员会 以在真实生活中应对过这种问题的人的经验为基础来添加标准。第三个目标就是改善C语言执行科学与工程项目时做关键数字运算时的合适度。\n\n这三点-国际化，纠正缺陷与对于计算可用度的改善是最主要的以改变为方向的目标，其他的改变计划自然更加保守，例如，把与C90与C++的不协调降到最低，并且让这个语言概念上是简洁的。用委员会人员的话来说，“委员会在让C++变得更加重要，更加有发展动力。\n\nC99改变的结果，就是它保持了C语言的必要的基本特征，C语言仍然是一个小型的，简洁并高效的语言，这本书指出了很多C99的变化，因为现在的大多数编译器还没有完全实现所有的C99的改变，你可能会发现有些在你的系统上不能实施，或者你会发现一些C99特征只有你改变了一些编译器的设置才可以实现。\n\n#注意 \n这本书将会使用ISO/ANSI C这些词来表示这些特征来表示均为两种标准均适用的特征，使用C99来指明新的特征。偶然的，当一种特性是第一次加入C语言时，它也指C90标准。 \n\n# 1.9 本书的组织架构\n\n组织信息的方式有很多。其中一种最直接的方式就是把每一个话题的所有相关信息全部列出来，这对于参考书是极其实用的，因为你就可以在一个地方找到所有关于给定主题的信息。但是它对于学习项目并不是最好的顺序。例如，如果你从开始学习名词开始学习英语，你的表达能力就会被严重地限制。当然，学习好了名词你随便找到某个东西就能说出它的名字，但是如果你能够学一些名词、动词、形容词等等，还有一些关于这些部分如何相互连接的规则，你就会有更大的能力来表达自己。\n\n为了让你能够更均衡地消化信息，这本书使用了一种螺旋上升的方式，在初期的时候先提到这个主题，然后在后文给予更充分的讨论。例如，对于理解C语言，理解函数是极其关键的，因此，在前面的几章就会包括对于函数的一些讲述，以便于你能够在第九章全面讲述函数的时候，已经能够使用函数获得到一些轻松了。相似的早期的篇章也会预先讲述字符串和循环，那样你就可以在还没有细致地地了解它们之前，在你的程序中先使用那些有用的工具。\n\n# 1.10 例子的使用\n\n我们已经差不多要开始学习C语言了，这一单元已经包括了我们在陈述材料的时候的一些例子了。\n\n## 字体 Typeface\n\n对于呈现文字的程序与电脑的输入输出，我们使用你很可能在屏幕上或者在输出的时候看到的相似的字体。我们已经使用过几次了。为了防止你没有注意到，字体看起来是下面这样的\n\n![字体示例](/img/typeface.png)\n\n相同的等宽字体也被用作是与编程相关的词汇，比如`main()`，也用作文件名，比如`stdio.h`，对于用来替换特殊词汇的占位字符，我们是用斜体的等宽字符来写的，比如下面的描述。\n*type_name variable_name;*\n例如，你有可能用*type_name*来替换`int`，用*variable_name*来替换*zebra_count*\n\n## 程序输出 Program Output\n\n电脑中的输出是以与我们书中相同的形式被印出来的，但输入是以粗体字被显示出来的。例如，下面就是在14章“结构体与其他数据类型”中的输出。\n\n![输出示例](/img/output.png)\n\n以正常电脑字体打印出来的是程序的输出，黑体字是用户的输入。\n你与你的电脑交互的方式有很多，我们假设你是用键盘在键入指令的，在屏幕上阅读反馈。\n\n## 特别的按键 Special Keystrokes\n\n通常，你会通过一个标签为Enter的按键，c/r，返回或者其他的方式输入一行指令，我们在文中称这些按键为***Enter key***，自然也就会默认你会在每一行输入之后按下Enter键。然而，为了阐明特定的观点，一些例子可能会明示出Enter键，以[enter]的形式来呈现它，这个括号就表示你需要按下一个按键而不是打字**enter**。\n\n控制字符中的特殊按键，比如CTRL+D，这种标记指在你按下Ctrl标志的按键（或者可能是Control）时按下D键。\n\n## 准备学习这本书使用的系统\n## Systems Used in Prepare This Book\n\nC语言的一些部分，比如储存数字时使用的空间，是取决于系统的。当我们举例子并且指的是我们的系统，“我们提的是一台在WinXP专业版下有奔腾处理器的电脑，并且使用Metrowork的CodeWarrior开发工作室9.2版本和微软的Visual C++ 7.1（这个版本Microsoft Visual Studio .NET 2003也开发完成）,或者gcc 3.3.3。在编写的时候，对C99的支持并不完全，而且没有编译器能够支持C99的全部特性。但是，在它们之间，这些编译器已经包含了许多的新标准下的东西了。大多数实例是在Mac G4上通过Metrowerks CodeWarrior Development Studio 9.2来测试的。\n\n这本书有的时候也参考在Unix系统中运行的结果，Unix系统是在Berkley's BSD 4.3 version的Unix系统中，在VAX 11/750电脑上运行的。而且，一些程序也是在Linux系统下使用gcc 3.3.1与Comeau 4.3.3在奔腾处理器的电脑上测试的。\n\n样本代码，对于在这本书中陈述的完整程序是可以在Sams网址 (www.samspublishing.com) 中找到的，搜索这本书的ISBN号（不带连字号）就会显示这本书的昵称，点击昵称，进入网址，你就可以下载代码了。你还可以在这个网站上找到编程训练的解决方法。\n\n## 你的系统-你需要的 Your System\n\n你需要有一个C语言编译器，或者至少可以使用一个。C可以在很多中电脑中运行，所以你有很多的选择。一定要确保使用的编译器是专门为了你的系统而设计的。这本书中的一些实例需要C99标准支持，但是大多数实例在C90标准下的编译器都是可以运行的。如果你使用的是在ANSI/ISO标准之前的，你就需要做出一些调整了，很可能得通常鼓励你去找寻些新的东西了。\n\n大多数编译器的供应商会为学生与教育者特价，如果你是那类人，那就看看供应商的网站。\n\n## 特殊元素 Special Element\n\n这本书包含了几部分特殊元素，强调了特别的重点：补充、建议、警告、笔记。\n\n![四种特殊信息类型](/img/four_kinds.png)\n\n+ Sidebar(补充) \n\t为阐明内容提供了更深刻的见解或者更多的背景信息\n+ Tip(建议)\n\t对于特定的编程情况提供了简短，使用的建议。\n+ Caution(警告)\n\t警告潜在的陷阱\n+ Note(笔记？)\n\t提供了综合的注释，不符合其他的特殊类型的信息。\n\n# 总结\nC语言是一种强大、简洁的编程语言。\n因为提供了使用的编程工具、对于硬件设备的控制良好，\n并且是最容易从一种设备传输到另一种设备的语言，\n它受到很多人的欢迎。\n\nC语言是一种编译型的语言，\n需要C语言编译器与连接器来把C语言源代码转化成可执行程序。\n\nC语言的编程可能是费力、困难甚至令人沮丧的，\n但是它也可以是有趣的、令人振奋与满足的。\n我们希望你能够像我们一样找到C语言的乐趣与魅力。\n\n# 回顾问题\n\n你会在**附录A-回顾问题答案**中找到问题的答案。\n(以下为我本人的想法)\n\n1.在编程中，***传输性***指的是什么?\n\t编程得到的文件在不同类型的操作系统中几乎不需要修改或者只需要修改一点就可以顺利地进行转移。\n2.解释源码文件、目标代码文件与可执行文件。\n\t源码文件是我们通过编辑器输入的代码，目标代码文件是源码文件经过编译器处理之后生成的包含库文件函数声明与我们输入的代码的机器语言翻译的文件，一般是asm的汇编文件或者obj，不具有执行的能力。\n\t可执行文件是把库文件与目标代码文件结合起来之后翻译成的最终文件，它包含了程序运行需要的一切函数声明、变量、指令的翻译。\n3.编程的七步走。\n\t首先在纸上想这个问题可以怎么解决，然后结合具体的语言来想实现方法，然后写代码，然后编译，然后运行，然后检查正误，进行修改与调试。\n\t×\n\t第一步，明确程序目的，你想要程序做什么\n\t第二步，设计程序，包括目标人群，用户界面与交互方式，实现时间，数据处理方式\n\t第三步，使用C语言知识写代码\n\t第四步，编译\n\t第五步，运行程序\n\t第六步，通过输出过程量等方法来调试，输入多个值来测试。\n\t第七步，维护与修改程序。\n4.编译器做了什么工作？\n\t把源码文件中你输入的代码转变为机器语言。\n5.连接器做了什么工作。\n\t把你代码中缺少的库函数内容补充完整，并且针对系统添加起始代码。\n\n# 编程训练\n\n我们现在还不期望你开始写C语言代码，所以这一次锻炼就集中于编程过程的早期阶段吧。\n\n1.你被MacroMusic公司录取了，这个公司正在进入欧洲市场，想要一个能够把英尺换算成厘米的程序（1 inch = 2.54cm）公司想要让这个程序能够提示使用者去输入一个英尺值，你的任务就是找出这个程序的目的，并且设计这个程序。\n\n程序目的：我想要设计一个通过乘除法来把输入的数值变作2.54倍的程序，输入是英尺值，2.54倍是厘米值。\n\n程序设计：\n首先输出一行：请输入英尺值\n然后向用户获取输入值。\n接着经过把值 * 2.54来获取厘米值\n然后在屏幕上输出数值。\n\n交互方式就是输入输出，因为目标人群是欧洲人，所以需要英语，需要更多的UI设计等。\n\n> END..","slug":"C-premier-plus-Chapter-1","published":1,"updated":"2023-11-28T04:23:33.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrp133pd000158uebwwi77wl","content":"<h1 id=\"第一章-学习准备\"><a href=\"#第一章-学习准备\" class=\"headerlink\" title=\"第一章 学习准备\"></a>第一章 学习准备</h1><blockquote>\n<p><strong>你将会在这一章学到：</strong><br>    1. C的历史以及特点<br>    2. 写程序的步骤<br>    3. 关于代码连接器与编译器的一些知识<br>    4. C标准</p>\n</blockquote>\n<p>欢迎来到C语言的世界！C语言是一种充满活力的高级编程语言，它受到业余与商用编程者的喜爱。<br>这一章会为你学习与利用这种强大而又受欢迎的语言，而且会向你介绍几种你最有可能搭建C语言基础的环境。</p>\n<p>首先，我们看向C语言的来源和它的一些特点（优点以及缺点）。接着，我们会了解编程的起源，查看编程的总体规则。<br>最终，我们会讨论如何在常见的系统中运行C程序。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-1-C语言的由来\"><a href=\"#1-1-C语言的由来\" class=\"headerlink\" title=\"1.1 C语言的由来\"></a>1.1 C语言的由来</h1><p>贝尔实验室的Dennis Richie在1972年创造了C语言，也就在那时，他和Ken Thompson正在致力于设计Unix系统。C语言的想法并不完全是在Richie的脑袋里冒出来的，而是来自Thompson的B语言，B语言来自哪里又是另一个故事了。重点是，C语言是作为工作中的编程人员的工具被创造出来的，所以它的首要目标就是成为一种有用易用的语言。</p>\n<p>很多编程语言都有着类似的目标，但是它们又经常会有其他的顾虑，举几个例子，Pascal语言的主要目标，就是为了教授编程规则提供良好的平台。BASIC语言，被设计得与英语很相像，从而可以方便地让不熟悉电脑的学生们学习。这些目标都是很重要的，但是并不与实际使用协调，也并不是普遍都很易用。相比之下，C语言是为了编程人员而生的，而且成功地成为了现代编程语言的一种选择。</p>\n<h1 id=\"1-2-为什么使用C语言？\"><a href=\"#1-2-为什么使用C语言？\" class=\"headerlink\" title=\"1.2 为什么使用C语言？\"></a>1.2 为什么使用C语言？</h1><p>在过去的30年来，C语言已经成为了最重要与最受欢迎的编程语言。它的成长，就是因为人们经过尝试之后，喜欢使用它。过去的10年里，许多人从C语言转到的更有规模的C++上，但C语言仍然是拥有权重的一种很重要的语言，C++也是从C语言迁移过来的。在学习C语言的过程中，你会意识到C语言的许多长处（见图1.1）让我们预先查看一下。<br><img src=\"/img/Chapter1.2.png\" alt=\"插图\"><br>（上图，左上为强大的控制结构，右上运行速度快，左下小型代码-小程序，右下是可以传输到不同的电脑）</p>\n<h2 id=\"1-2-1设计特点\"><a href=\"#1-2-1设计特点\" class=\"headerlink\" title=\"1.2.1设计特点\"></a>1.2.1设计特点</h2><p>C语言是一种拥有在理论界以及计算机科学实践中令人满意的控制特色的现代编程语言。它的设计让它很自然地能自上而下地规划程序、结构化编程以及模块化设计，从而设计出的程序也更可靠，更易懂。</p>\n<h2 id=\"1-2-2-效率\"><a href=\"#1-2-2-效率\" class=\"headerlink\" title=\"1.2.2 效率\"></a>1.2.2 效率</h2><p>C语言是一种高效的编程语言，它的设计很好地利用了现代电脑的性能。C语言编写的程序常常是小型的，并且运行速度很快。事实上，C表现了一些在汇编语言中好的控制方法，（汇编语言是对于特定的中央处理单元(Central Processing Unit,CPU)的内部指令设计的的助记语句，不同的CPU有着不同的汇编语言）。如果你选择C语言，你可以调节你的程序到达最快速度或者让程序对于内存的使用更有效。</p>\n<h2 id=\"1-2-3-可传递性\"><a href=\"#1-2-3-可传递性\" class=\"headerlink\" title=\"1.2.3 可传递性\"></a>1.2.3 可传递性</h2><p>C语言是一种可传递的编程语言，那意味着在一个系统上的C语言程序也可以在其他系统经过少量的改动或者不改动运行。即使改动是必须的，也只是改动头文件与main程序里的几个词条而已。大多数也打算着有可传递性，但是任何想要把个人电脑IBM里的BASIC程序放到苹果BASIC（它们是近亲）或者尝试把主机上的IBM里的FORTRAN程序在Unix系统中运行都知道传递烦人透顶。C语言是可传递性的领头者。C语言的编译器（把你的C语言代码转换为电脑内部指令的程序）对于40种系统都是可以使用的。从微型处理器到超算。但需要注意的是，一部分程序对于不同的硬件设备是不一样的，比如显示器监控，或者因为在运算系统上的特殊点，比如WinXP与OS X，它们通常是不具有传递性的。</p>\n<p>因为C语言与Unix操作系统关系紧密，Unix系统的安装包是自带C语言的编译器的，Linux安装时也通常带有C语言编译器，一些C语言编译器是可以在个人电脑上使用的，包括运行着各种版本的Windows系统的电脑，还有Mac。所以不论你是正在使用着家里的电脑，还是使用专业的工作站或者大型电脑，你都是有很大可能获得一个适用于你的系统的C语言编译器的。</p>\n<h2 id=\"1-2-4能力与灵活性\"><a href=\"#1-2-4能力与灵活性\" class=\"headerlink\" title=\"1.2.4能力与灵活性\"></a>1.2.4能力与灵活性</h2><p>C语言既强大又灵活（在计算机文献中最受喜欢的两个词）。<br>举个例子，许多功能强大与灵活的操作系统是用C语言写的。许多的其他编程语言（如FORTRAN、Perl、Python、Pascal、LISP、Logo与BASIC）的编译器与翻译器是用C语言写的。结果，当你在Unix机上使用FORTRAN语言，最后是用C语言程序生成的exe文件。C语言程序被用作解决物理、工程问题甚至在电影如《角斗士》中栩栩如生地重现特殊的现象。</p>\n<h2 id=\"1-2-5-以程序员为方向的\"><a href=\"#1-2-5-以程序员为方向的\" class=\"headerlink\" title=\"1.2.5 以程序员为方向的\"></a>1.2.5 以程序员为方向的</h2><p>C语言重视于满足程序员的需求，让我们轻松地触达硬件，而且让你独立地操纵内存中的每一个bit。它拥有非常多的运算符，能够让你简洁地表达自己。C语言比起，比如说Pascal语言就在限制着你可以做的事情。这种灵活性既是优势也很危险。优势在许多的任务，像是数据形式转换，在C语言中简单很多。危险就是用C语言，你有可能犯在其他语言中不可能犯的错误。C语言给予了你更大的自由，也让你承担了更多的责任。</p>\n<p>另外，大多数C语言的实施都有着大量有用的C语言库函数。这些函数能够应对很多编程人员通常的需求。</p>\n<h2 id=\"1-2-6-缺点\"><a href=\"#1-2-6-缺点\" class=\"headerlink\" title=\"1.2.6 缺点\"></a>1.2.6 缺点</h2><p>C确实有一些不足之处。通常，像人一样，不足与长处是同一个特点的两面。例如，我们提到了C语言的自由表达也需要更多的责任。C语言的指针（我们以后会学习到）使用特别地，意味着编程错误会更难跟踪到。曾经也提到了一台没有文字的电脑，解放的代价就是格外的警惕，</p>\n<p>有着大量的运算符，C的简明也让有可能让我们写出极其难以理解的代码。你可能并不是必须要写晦涩的代码，但是可能性总在那儿。毕竟，其他语言哪个有每年一次的混乱的编程比赛？</p>\n<p>还会有更多的长处，毫无疑问也会有更多的缺陷。与其在这个问题上挖的更深，还不如移到下一个话题。</p>\n<h1 id=\"1-3-C语言的用处\"><a href=\"#1-3-C语言的用处\" class=\"headerlink\" title=\"1.3 C语言的用处\"></a>1.3 C语言的用处</h1><p>到 1980 年代初，C 语言已经是 Unix 系统小型计算机世界的主导语言了。从那时起，它就已经被传播到个人计算机（微型计算机）和大型主机（大型计算机）了。（参见图 1.2）许多软件公司把C语言作为制作文字处理程序、电子表格、编译器和其他产品的首选语言。它们知道C语言编写的程序代码量小而且高效。更重要的是，他们知道这些程序将易于修改，并易于适应新型号的计算机。<br><img src=\"/img/Chapter1.3.png\" alt=\"图片\"><br>（以上，C语言被用作编程Unix操作系统，被用作电影如Star wars，在电脑游戏、电脑语言处理、嵌入式系统与机器人工程中都有显著的作用）</p>\n<p>C语言不仅对公司和老手有好处，对其他用户也有好处。越来越多的计算机用户已经开始使用 C 语言，它的优势也得到了确保。你不必是专业的计算机编程人员就可以使用C语言了。<br>在 1990 年代，许多软件公司开始转向 C++ 语言进行大型编程项目。C++ 将面向对象的编程工具嫁接到 C 语言中。（面向对象编程是一种思想体系，它试图使语言来适应问题，而不是让问题来适应语言。）C++ 几乎是 C 语言的超集，这意味着任何 C程序也是，或者它几乎也是一个有效的C++程序。通过学习 C语言，您还学习了许多 C++。<br>尽管 C++ 和 Java 等新型的编程语言很受欢迎，但 C语言在软件公司依然是核心技能，一直排在所需技能的前 10 名。特别的，C语言已成为在嵌入式系统编程中很受欢迎的一种语言，也就是说，它被用于编程越来越多的汽车、相机、DVD 播放器和其它现代便利设施中的常见的微型处理器。此外，C语言已经开始追赶在科技科学编程上具有长久的主导地位的FORTRAN语言。最后，作为为开发操作系统而生的语言，C语言在Linux系统的发展中发挥着重要作用。所以，在二十一世纪的第一个十年， C 语言的影响力仍然在变得更大。</p>\n<p>简而言之，C 是最重要的编程语言之一，并将继续如此。如果你想要一份编程软件的工作，这应该是你能够回答“是”的第一个问题中的一个，“嗯，比如说，你会C语言吗？“</p>\n<h1 id=\"1-4-计算机的作用\"><a href=\"#1-4-计算机的作用\" class=\"headerlink\" title=\"1.4 计算机的作用\"></a>1.4 计算机的作用</h1><p>既然你已经要开始学习如何运行C语言程序了，你很可能需要了解一下电脑是怎么工作的，这些知识能够帮助你了解C语言程序与最终运行程序后发生的事情之间的关联。</p>\n<p>现代的电脑有几个组成部分，<em><strong>中央处理器</strong></em>，又叫<em><strong>CPU</strong></em>，做了电脑运转时的大部分工作。<em><strong>随机存取器</strong></em>，又叫<em><strong>RAM</strong></em>，作为保存文件与程序的工作区。永久存储器，比如硬盘，存储程序和文件，即使电脑已经关机。各种外设，比如键盘、鼠标还有显示器，在你与电脑交互中搭建了桥梁。CPU运行程序，所以我们集中于它的作用。</p>\n<p>CPU的自始至终的工作，简单来说，其实是非常简单的。它从内存中依次抓取一条条的指令，然后执行它。（千兆赫CPU可以在一秒钟执行这个过程百亿次，所以CPU可以以一种惊人的速度运作），CPU也有自己的小工作区，有几个储存数的<em><strong>寄存器</strong></em>。每一个寄存器保存下一条指令的内存地址，然后CPU就使用这些信息来抓取下一条指令。接下来，CPU再把指令储存在另一个寄存器中，然后把上一个寄存器的命令更新到下一条。CPU能够理解的指令（也叫指令集）是有限的。而且这些指令都是各自分明的。很多指令都是要求电脑去把数字从一个地方移动到另一个地方。—例如，从内存到寄存器。</p>\n<p>在这个过程中有几点很有趣。第一，在电脑中任何东西都是以数字的形式储存的，数字是以数字的形式储存的。字符（例如你在文本编辑中的英文字母），也是由数字的形式储存的，每一个字符都有一个数字编码。计算机储存进寄存器的指令也是数字的形式，指令集中的每一条指令都对应着一个数字编码。第二，电脑程序最终会被以数字指令的形式表达，这又叫<em><strong>机器语言</strong></em>。</p>\n<p>计算机运行的一种结果就是，如果你想让计算机做些事，你需要提供一系列的指令或者是程序，来明确地告诉它要做什么和怎么做。你必须创建一个电脑能够直接理解（使用机器语言）的程序。这是个精细、单调、费劲的任务。一些像两个数相加的简单的任务可能会被分解成几步，可能会像下面几步。</p>\n<blockquote>\n<p>1.从内存区域2000把数字复制到寄存器1<br>2.从内存区域2004把数字复制到寄存器2<br>3.用数字二的数值加上数字一，在寄存器1留下答案。<br>4.把寄存器1中的数据复制到内存区域2008</p>\n</blockquote>\n<p>而且你还得把每一条指令用数字指令表述出来！</p>\n<p>如果你是喜欢以这种方式写程序的，你会很难过地了解到机器语言编程的黄金时期已经远远地过去了。但是如果你更喜欢那些更愉快的编程，那就对高级编程语言打开怀抱吧！</p>\n<h1 id=\"1-5-高级计算机语言与编译器\"><a href=\"#1-5-高级计算机语言与编译器\" class=\"headerlink\" title=\"1.5 高级计算机语言与编译器\"></a>1.5 高级计算机语言与编译器</h1><blockquote>\n<p>高级编程语言，比如C语言，以很多方式简化了你的编程。<br>    第一，你不需要用数字的形式来表达你的指令。<br>    第二，你使用的指令与你对于程序的思考而不是与电脑使用的精确的指令</p>\n</blockquote>\n<p>与其关心某一个CPU为了完成某一个任务进行的某一步。你可以以一种更复杂的形式来表达你想做的事情，例如，你也许会写下面的东西。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = mine + yours;</span><br></pre></td></tr></table></figure>\n\n<p>看到这样的代码，你能够很明白它是干啥的，<br>而看着机器语言以数字构成的替代指令，那就太不易读了。</p>\n<p>不幸的是，机器语言才是适合电脑的，对于电脑来说，高级语言完全无法理解。这就到了编译器上场的时候了，<em><strong>编译器</strong></em>是把高级语言程序详细地翻译成电脑需要的机器语言指令的程序。你以高级的方式思考，编译器做这些令人生厌的工作。</p>\n<p>编译器方法还有另一种好处。每台电脑都设计了各自的机器语言，所以比如说英特尔PentiumCPU的机器语言对于摩托罗拉PowerPC CPU可能没有任何意义，但是你可以根据特定的机器语言搭配编译器。所以，使用一系列的编译器或者合适的编译器，你就可以把同样的高级编程语言转化成一系列不同的机器语言程序。你只需要解决这个问题一次，然后让编译器把这个解法翻译成一系列机器语言程序。</p>\n<p>简短地说，高级的编程语言，比如C语言、Java还有Pascal，它们以一种更加抽象、与特定的CPU并不绑定的方式来表述程序行为。而且，对于机器语言来说，高级语言学习起来简单而且也更容易编程。</p>\n<h1 id=\"1-6-使用C语言的七步走\"><a href=\"#1-6-使用C语言的七步走\" class=\"headerlink\" title=\"1.6 使用C语言的七步走\"></a>1.6 使用C语言的七步走</h1><p>C语言，如你所见，是一种编译型的语言，如果你习惯于使用如Pascal或者FORTRAN的编译型语言，你应该已经对组成C语言程序的基本步骤很熟悉了。如果你的基础语言是如BASIC，或者面向接口的计算机图形语言（如Visual Basic）的翻译型语言，或者你还没有编程基础，你需要学习如何编译。我们一会就会研究那个过程，你会认识到这是很合理简单的。首先，为了让你宏观、大体上了解编程，让我们把编写C语言程序分解成7个步骤（见图1.3）。值得注意的是，这只是理想化的步骤，在编程实践中，你需要在步骤中来回切换，用后面一步了解到的来使之前的一步得到优化。<br><img src=\"/img/Chapter1.6.png\" alt=\"七步走\"></p>\n<h2 id=\"1-6-1-确定程序目的\"><a href=\"#1-6-1-确定程序目的\" class=\"headerlink\" title=\"1.6.1 确定程序目的\"></a>1.6.1 确定程序目的</h2><p>很自然的，你需要明确地知道你想让程序做什么，思考你的程序需要什么信息，需要在计算与控制上完成什么样子的事情，而且程序内的信息需要对你有所反馈，在这一步的规划中，你应当以大体出发，而不是根据特定的编程语言来思考。</p>\n<h2 id=\"1-6-2-设计程序\"><a href=\"#1-6-2-设计程序\" class=\"headerlink\" title=\"1.6.2 设计程序\"></a>1.6.2 设计程序</h2><p>在有了对于你的程序应该干啥的印象之后，你应该选择程序如何来运行它，用户的交互界面会是什么样子的？程序应该如何被组织起来？程序的目标人群是？你需要多长时间来做完这个程序？</p>\n<p>你还要决定在程序中呈现数据，而且很可能的，在辅助文件里也要。要决定用什么方式来处理数据。在刚开始学习C语言时，可能选择会很简单，但是随着你应对更多复杂的情况后，你就会知道这些选择是需要更多的思考的。选择一种好的方式来呈现数据经常会让设计程序与处理数据简单很多。</p>\n<p>再一次，你需要在大体层面上思考而不是在特定的代码上，但是有些选择可能是基于编程语言的大体特点的，举个例子，C语言编程人员就比，比如说，Pascal编程人员在数据呈现上拥有更多的选择。</p>\n<h2 id=\"1-6-3-编写代码\"><a href=\"#1-6-3-编写代码\" class=\"headerlink\" title=\"1.6.3 编写代码\"></a>1.6.3 编写代码</h2><p>既然你已经对于你的程序有个清晰的设计了，你就可以通过写代码的方式来实现它了。也就是说，你可以把你的程序设计翻译为C语言。这就是你需要用上C语言知识的地方了，你可以在纸上画出你的想法，但最后你还是要把你的代码输入电脑。这个过程主要取决于你的编程环境，我们一会会呈现更多的常见的编程环境。总体上，你会使用文本编辑器来创造一份源码文件，它包含了你程序设计的C语言翻译，例1.1给出了C语言源码的一个例子。</p>\n<p><img src=\"/img/listing1.1.png\" alt=\"图例1.1\"><br>在这一步，你应该记录你的工作，最简单的方式是使用C语言的注释功能，它包含着你对于源码的解释，我们会在第二章详细讲到如何注释你的代码。</p>\n<h2 id=\"1-6-4-编译\"><a href=\"#1-6-4-编译\" class=\"headerlink\" title=\"1.6.4 编译\"></a>1.6.4 编译</h2><p>下一步就是编译源码，再一次，细节上的问题是与你的编程环境相关的，我们马上会研究几种常见的环境了。现在，让我们以更概念化的方式看看发生了什么。</p>\n<p>我们已经知道编译器的工作就是把源码转化成可执行文件。<em><strong>可执行文件</strong></em>是以我们电脑的自然语言（或者说<em><strong>机器语言</strong></em>）写成的，这种语言是以精细的数字代码形式呈现的。而且你之前也了解到了，不同的电脑的机器语言是不一样的。C语言的编译器也包括着C语言库中的代码。C语言库包含着很多的基础的、日常使用的东西，比如<strong>Printf</strong>和<strong>scanf</strong>函数。（更精确地说，一个叫做连接器的程序把C语言库中的一组代码带到编译器，但是编译器在大多数系统都是可以运行连接器的），最终结果就是包含着电脑可理解的可执行文件的程序，你可以直接运行。</p>\n<p>编译器还会检查你的程序是不是使用了符合语法的C语言，如果编译器发现了错误，它就会汇报给你，而且不会生成可执行文件，理解编译器提示的错误信息也是你会很快习得的另一项技能。</p>\n<h2 id=\"1-6-5-运行程序\"><a href=\"#1-6-5-运行程序\" class=\"headerlink\" title=\"1.6.5 运行程序\"></a>1.6.5 运行程序</h2><p>通常的，可执行文件是你可以运行的程序，你可以在很多常见的环境中，包括MS-DOS、Unix、Linux控制台、只需要打字写下可执行文件的名称。其他的环境，比如VMX、VAX可能需要一些运行指令或者其他的机制方法。<em><strong>集成开发环境（IDE）</strong></em>，像很多在Windows系统或者Mac系统上的，使你能够在IDE内部通过菜单选项或者按几个按键来编辑与运行你的C语言程序。最终生成的文件也可以通过双击文件名或者图标的方式从你的操作系统直接运行。</p>\n<h2 id=\"1-6-6-测试与Debugging\"><a href=\"#1-6-6-测试与Debugging\" class=\"headerlink\" title=\"1.6.6 测试与Debugging\"></a>1.6.6 测试与Debugging</h2><p>你的程序能够运行是个好迹象，但是有可能你的程序并没有正确地运行。因此，你应该检查下是否它做到了它应该做的事情。你会发现有些程序是会有问题（在计算机领域内的行话叫bugs）的。调试是查找与修复程序错误的过程，学习的过程中犯错误是自然且正常的。看起来编程“天生”需要调试，所以当你把学习到的与编程实际结合起来的时候，你最好准备好在犯错的时候提醒自己。随着你成为一个更加强大与巧妙的编程人员，你也会不断地犯错，但你也因此不断地变得更加强大与巧妙。</p>\n<p>你会有很多机会犯错，基础的设计层面错误，实现过程出错，忽略了可能会搞砸你的程序的输入。你可能会不恰当地使用C语言，你可能会拼写错误，可能会把括号放错了位置等等等等。你会有自己的错误方式来丰富这一列的。</p>\n<p>幸运的是，这种情况并不是无望的，即使有时候你会这样认为啦。<br>编译器会捕捉到很多种类的错误，而且还会有工具来帮助你找到许多种编译器没有办法捕捉的错误。继续读下去，这本书也会给到你一些调试的建议。</p>\n<h2 id=\"1-6-7-维护与修改程序\"><a href=\"#1-6-7-维护与修改程序\" class=\"headerlink\" title=\"1.6.7 维护与修改程序\"></a>1.6.7 维护与修改程序</h2><p>当你为自己或者别人创造了一个程序，你可能会发现程序是可以有更多的用处的。如果是的，你可能会发现是有理由做出些修改的。可能有个小bug只有别人把名字以Z&#x2F;z开头的时候才会发生，或者你会想出一种能够解决问题的更好的方式，可以聪明地加入一些的新功能，你可能需要改写程序以便它能够在不同电脑系统中运行。如果你明确地注释了这些程序，所有这些任务都会被极度地简化。</p>\n<h2 id=\"1-6-8-注释\"><a href=\"#1-6-8-注释\" class=\"headerlink\" title=\"1.6.8 注释\"></a>1.6.8 注释</h2><p>编程的过程并不总是像这个过程描述的那样线性。有的时候你需要在步骤中前后切换。例如，当你在写代码的时候，你有可能发现你的计划并不实际。你有可能发现了一种更好的方式来做事，或者在看到程序是怎么运行的之后，你会想要改变你的设计，记录你的工作能够帮助你在不同的等级之间前后切换。</p>\n<p>许多学习者通常会忽略掉第一步与第二步（确定程序目的与设计程序）直接进入第三部（写程序），你写的第一个程序或许可以直接在脑中看到完全的流程，如果犯错也很好定位错误。但是随着你编写的程序越来越复杂，越来越冗长，心智的视觉化就开始失效了，而且错误也会更难以发现。最终，那些忽略了规划步骤的人就陷入数小时的时间浪费、困惑还有沮丧，因为他们写出的丑陋的，无法实现功能而又深奥的程序。这项工作越是复杂，需要的规划工作就越多。</p>\n<p>道理就是你需要养成在写代码之前做规划的习惯，使用这种古老但是可敬的笔尖技术来记下你程序的目的，给程序设计做出大纲。如果你这样做的话，你最终会收获节省时间与满足感的巨大红利。</p>\n<h2 id=\"1-6-9-编程技术\"><a href=\"#1-6-9-编程技术\" class=\"headerlink\" title=\"1.6.9 编程技术\"></a>1.6.9 编程技术</h2><p>你生成程序的明确步骤是取决于你的电脑系统的，因为C语言是可传输的，它是可以适用于很多的系统环境的，包括Unix，Linux，MS-DOS（是的，很多人仍然在用），Windows与Mac OS，其实还有很多只不过没有足够的空间留给它们了，这尤其是因为各自的产品不是演化、消亡，就者被取代。</p>\n<p>首先，即使如此，让我们先来研究许多C语言运行环境的共有特点，包括我们刚才已经提到的五种系统，你不需要明确地知道是什么引导了C语言程序的运行，但这是良好的基础，它也能够帮助你更好地理解为什么你需要经历一些特定的步骤来得到一个C语言程序。</p>\n<p>当你在写C语言程序的时候，你会在源码文件中储存你在文本文件中写下的东西。大多数由C语言编程的系统，也包括我们提到的那一些，需要以<code>.c</code>结尾的文件（举个例子，<code>wordcount.c</code>与<code>budget.c</code>）在<code>.c</code>之前的那部分名字叫做<em><strong>基准名（Basename）</strong></em><br>在这一段后面的名称叫做<em><strong>拓展名（Extension）</strong></em>，因此，<code>budget</code>是基准名，<code>.c</code>是拓展名。它们的混合就是文件名。文件名也必须要复合特定的电脑操作系统的需要。例如，IBM-PC与[克隆机？]上的MS-DOS系统，它就要求你的文件名不能多于8个字符长。所以，<code>wordcount.c</code>在DOS系统中就不是合法的文件名。一些Unix系统在整个文件名上有14个字符的限制，包括拓展名，其他Unix系统也允许更长的名称，不多于255个字符即可。Linux、Windows与MacOS也允许更长的文件名。</p>\n<p>让我们假设我们拥有一份名字叫<code>Concrete.c</code>的源文件储存着例1.2的C语言源码。<br><img src=\"/img/listing1.2.png\" alt=\"Concrete.c\"><br>不需要担心在源码文件中的一些细节，在第二章你会学到的。</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h2 id=\"1-7-1-目标代码文件、可执行文件和库\"><a href=\"#1-7-1-目标代码文件、可执行文件和库\" class=\"headerlink\" title=\"1.7.1 目标代码文件、可执行文件和库\"></a>1.7.1 目标代码文件、可执行文件和库</h2><p>C语言编程的一个基本本领就是把你的源代码文件转化成保存着即时就可运行的可执行文件。要实现这个过程需要两个步骤：编译与连接。编译器可以把源代码转换成中间代码，然后连接器再把中间代码与其他代码组合，由此创造出可执行文件。C语言利用这两部分结合的方法让程序易于模块化生成。你可以把每一个模块分开来编译，再用连接器把每一个编译过的模块结合起来。以那种方式，如果你想改变其中的一个模块，你就不需要再重新编译其他的模块，而且连接器也会把你的程序与预先编译好的库代码结合起来。</p>\n<p>要生成中间文件的方法还有几种，最流行的而且能够实施的在这里已经提到了，就是把源代码文件转化成机器语言代码，把结果放在目标代码文件中或者简短地说，目标文件。（假设你的源码是由单一文件组成的），虽然目标文件包括了机器语言代码，它还没准备好运行。目标文件包含了对于源代码的翻译版本，但是它还不完整。</p>\n<p>缺失的第一个部分就是起始代码，它作为你的程序与操作系统的接口。举个例子，你可以在在DOS或者Linux之下协调地运行BM PC，它们的硬件都是类似的，所以同样的目标文件对于两种系统都是可以起作用的，但是你需要在DOS与Linux不同的起始代码，因为不同的系统是以不同的方式处理程序的。</p>\n<p>第二个缺失的部分就是常用库的代码。几乎所有的C语言程序都需要利用C语言的库函数。比如<code>Concrete.c</code>使用的<code>printf()</code>。目标代码文件并不包括这个函数的代码。它只包含了<code>printf</code>函数的声明指令，实际的代码是在另一个文件中储存的，它叫<em><strong>库文件</strong></em>。库文件包含了很多函数的代码。</p>\n<p>连接器的作用就是把这三个部分连接在一起-你的目标代码、起始代码和库代码，然后把三者整合为一个文件，即可执行文件。对于库代码，连接器只提取需要使用的函数在C语言库中对应的代码。<br>（见图1.4）<br><img src=\"/img/listing1.4.png\" alt=\"图1.4\"><br>（可见，上图中，由源代码经过编译器生成目标代码文件，再由目标代码文件与起始代码、库代码通过连接器转化为可执行文件<code>concrete.exe</code>）.</p>\n<p>简短来说，一份目标文件与可执行文件都由机器语言指令组成。然而，可执行文件只把你使用的代码翻译为机器语言，但可执行文件还由常用库与起始代码的机器语言翻译组成。</p>\n<p>在一些系统中，你必须把编译与连接的过程分开。另外的一些系统中，编译器会自动启动连接器，所以你只需要编译即可。</p>\n<p>现在我们就针对于特定的系统来研究一下。</p>\n<h2 id=\"1-7-2-Unix系统\"><a href=\"#1-7-2-Unix系统\" class=\"headerlink\" title=\"1.7.2 Unix系统\"></a>1.7.2 Unix系统</h2><p>因为C的流行始于Unix系统，我们就从它开始。</p>\n<h3 id=\"在Unix系统中进行编辑\"><a href=\"#在Unix系统中进行编辑\" class=\"headerlink\" title=\"在Unix系统中进行编辑\"></a>在Unix系统中进行编辑</h3><p>Unix系统并没有独立的C语言编译器。你反而需要一些多功能的Unix编辑器，例如emacs、jove、vi或者一个X Window系统文本编辑器。</p>\n<p>你的最主要的两个目的就是正确地书写程序，并且为储存程序的文件起个名字。正像已经提到的，文件的名称必须以<code>.c</code>。注意到Unix系统会以大小写来区分文件，所以<code>BUDGET.c</code>、<code>budget.c</code>还有<code>Budget.c</code>是三个各自不同的C源文件名称，但是<code>BUDGET.C</code>是不合法的，因为它的扩展名使用了大写。</p>\n<p>使用vi编辑器，我们把下面的程序保存在名叫<code>inform.c</code>的文件中。<br><img src=\"/img/informc.png\" alt=\"inform.c\"><br>这些文本就是源代码，而<code>inform.c</code>是源文件，重点就在源文件只是一个过程的起点，而不是结尾。</p>\n<h3 id=\"在Unix系统中进行编译\"><a href=\"#在Unix系统中进行编译\" class=\"headerlink\" title=\"在Unix系统中进行编译\"></a>在Unix系统中进行编译</h3><p>我们的程序，虽然已经不可否认地很精致了，对于电脑仍然是一派胡言，电脑是不理解什么是<code>#include</code>和<code>printf</code>的（现在你可能也不理解，但是我们很快就会学习，然而电脑并不会），正像我们之前讨论过的。我们需要编译器的帮助来把我们的代码（源代码）翻译为电脑的代码（机器语言）。这些工作的结果就是可执行文件，它会包含所有可以让电脑完成工作的代码。</p>\n<p>UnixC编译器叫<code>cc</code>，为了编译<code>inform.c</code>程序，你需要把下面的指令打下来。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc inform.c</span><br></pre></td></tr></table></figure>\n\n<p>几秒之后，Unix系统的命令提示符就会给出反馈，告诉你这件事已经做完了，如果你没有正确地编写代码的话可能会得到警告或者错误信息，但我们先假设一切都是正确的。（如果你的编译器对于<code>void</code>这个词进行报错，那是你的编译器还没有更新到 <strong>ANSI C</strong> 的编译器，我们会在不久提到更多的标准，即使这样，你从例子中删掉void就好）。如果你使用<code>ls</code>指令来把你的文件列出来的话，你会发现产生了一个新文件叫<code>a.out</code>（见图1.5）这就是包含了程序中翻译后指令（或编译后指令）的可执行文件。想要运行的话直接打下<code>a.out</code>即可。</p>\n<p>然后，文件中的指令执行，智言倾泻而出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A .c is used to end a C program filename.</span><br></pre></td></tr></table></figure>\n<p>如果你想要吧可执行文件保存下来，你需要重新命名它，<br>否则，这个文件在你下一次编译时就会被新的同名文件代替。<br><img src=\"/img/process.png\" alt=\"The process\"><br>（从源码到程序的过程）</p>\n<h2 id=\"Linux-系统\"><a href=\"#Linux-系统\" class=\"headerlink\" title=\"Linux 系统\"></a>Linux 系统</h2><p>Linux也是个很受欢迎的开源的，与Unix类似的多平台操作系统，它包括IBM与Mac的兼容。在Linux上设计程序与Unix系统的过程大部分是相似的，除了你需要使用公用C语言编译器，它叫gcc，是由GNU提供的，在那里面，编译的指令是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc inform.c</span><br></pre></td></tr></table></figure>\n<p>注意到在Linux安装的时候安装gcc的时候可能是可选的，所以你（或者其他人）有可能如果之前没装的话必须得自己安装gcc。通常这会让cc成为gcc的一个别名，所以你喜欢的话可以用cc来代替gcc。</p>\n<p>你可以在下面的网站中获取关于gcc获取更多的信息，包括最新的版本。<br><a href=\"http://www.gnu.org/software/gcc/gcc.html\">http://www.gnu.org/software/gcc/gcc.html</a>.</p>\n<h2 id=\"集成开发环境（Windows）\"><a href=\"#集成开发环境（Windows）\" class=\"headerlink\" title=\"集成开发环境（Windows）\"></a>集成开发环境（Windows）</h2><p>C编译器并不是Windows安装包中的一部分，所以你也有可能需要安装一个C语言编译器。很多供应商，比如Microsoft, Borland, Metrowerks, 还有Digital Mars, 提供了以Windows系统为基础的集成开发环境（<em><strong>IDE</strong></em>）（近来，很多已经把C语言与C++编译器结合在一起了。）它们都有快速且集成的环境，可以方便地生成C语言程序。值得注意的是，每一个程序都有一个嵌入式的编辑器，你可以用它来编写C语言程序。都有可以让你命名、保存、编译、运行的菜单。每一次编译运行如果编译器发现错误了你都可以回到编辑器，而且出错的代码行都会被突出显示出来，并搭配上适当的错误信息。</p>\n<p>Windows IDE通常是可以一同处理C与C++的，你需要声明你需要一个C++程序。使用一些产品，比如Metroworks或者CodeWarrior里你需要用项目类型来区分你使用的语言。其他的产品比如Visual C++你是使用<code>.c</code>的扩展名来表示你想要使用C语言而不是C++。然而，大多数C语言程序也作为C++程序运作，可以参考“Differences Between C and C++”，那里对C与C++进行了比较。</p>\n<p>你有可能遇到的一个问题是当程序停止的时候程序运行的窗口也随之关闭，如果你也遇到这种情况，你可以让程序直到你输入一个字符再结束。只要在代码结尾，return语句前加上一行代码即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getchar();</span><br></pre></td></tr></table></figure>\n<p>这一行代码读取一个键盘输入，所以直到你输入下一个字符之前程序都是暂停着的。一些时候，受到程序运行方式的影响，可能在最后已经有一个键入数据等待了，这种情况下你就得输入两次。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getchar();</span><br><span class=\"line\">getchar();</span><br></pre></td></tr></table></figure>\n\n<p>例如，如果程序做的最后一件事是要求你输入你的体重，你已经输入完体重了然后输入enter来输入数据，程序会读取你的体重，第一个<code>getchar</code>会读取回车符，第二个<code>getchar</code>直到你再打一个字符才会有，如果你现在还不太能够理解，你学习完C语言输入就会明白了。</p>\n<p>即使多种多样的IDEs普遍有着比较类似的标准，但是细节方面还是各自不同的，不仅在一行程序内，还在编译器的不同版本。你需要做些实验，来获知你的编译器是怎么工作的，你还有可能需要阅读使用手册或者尝试网上教程。</p>\n<h2 id=\"IBMPC上的DOS编译器\"><a href=\"#IBMPC上的DOS编译器\" class=\"headerlink\" title=\"IBMPC上的DOS编译器\"></a>IBMPC上的DOS编译器</h2><p>对于很多人来说，在个人电脑上运行DOS是很过时的事情，但是它对于那些电脑资源与预算受限、喜欢更简单的，没有[响铃、哨音]与令人分心的事物的操作系统。很多Windows IDEs额外提供了命令行工具，这就然你能够在DOS命令行环境下编程。Comeau的C&#x2F;C++编译器在很多系统中是适用的，包括几种Unix、Linux的变体，它就拥有一个命令行DOS的版本。并且，它还有免费与共享的DOS系统编译器，例如，GNU gcc编译器就有一个以DOS为基础的版本。</p>\n<p>源码文件应该以文本文件形式存在，而它们并不是文字处理文件。（文字处理文件包括了很多额外信息，比如字体和格式）你应该使用一个文本编辑器如Windows Notepad或者与一些版本的DOS一同发布的EDIT程序。文件的扩展名需要是<code>.c</code>，一些处理器会自动在文本文件后面加上<code>.txt</code>的扩展名。如果你遇到了这种情况，你需要改变文件名，把<code>.txt</code>改为<code>.c</code>。</p>\n<p>电脑上的C语言编译器通常，但并不总是，生成带有<code>.obj</code>后缀的中间目标代码，不像Unix编译器，C语言编译器通常不会在编译完成之后删除这些文件。有些编译器也会生成带有<code>.asm</code>扩展名的汇编语言文件，或者使用它们自己的特殊形式。</p>\n<h2 id=\"Mac上的C语言\"><a href=\"#Mac上的C语言\" class=\"headerlink\" title=\"Mac上的C语言\"></a>Mac上的C语言</h2><p>最广受闻名的Mac C&#x2F;C++编译器就是Metrowerks CodeWarrior 编译器（Windows与Mac版本的CodeWarrior有相似的界面），它提供了与Windows编译器相似的以项目为基础的IDE。从文件菜单选择新文件开始，一系列的项目类型选择将会陈列在你眼前。在最新的CodeWarrior版本中，使用Std C控制台即可（不同的发布版本需要经过不同的步骤才到达选择这一步），你还有可能在68KB版本（适于摩托罗拉 680 * 0 系列的处理器），PPC版本（适于PowerPC处理器）或者Carbon版本（适于OS X系统）</p>\n<p>新的项目在最初项目中会有一个很小的源码文件，你可以尝试编译或者运行它来获知你的系统是否设置好了。</p>\n<h1 id=\"1-8-语言标准\"><a href=\"#1-8-语言标准\" class=\"headerlink\" title=\"1.8 语言标准\"></a>1.8 语言标准</h1><p>现在，很多C语言实例都是可行的，理想化情况下，当你在写C语言程序时，在任何的实例中都是一样运作的（假设你没有使用特殊机器来编程），为了这件事情能够实现，不同的实例需要有一个确定的、可识别的标准。</p>\n<p>最初，C语言官方并没有语言标准，但是，由Brian Kernighan和Dennis Ritchie（1978）编纂的最初一版的<em><strong>C Programming Language</strong></em>确立了被接受的标准，它通常被称作为<em><strong>K&amp;R C</strong></em>或者<em><strong>classic C</strong></em>。特别的是，那本书附录中的“C Reference Manual”作为了C语言实例的指导。但是，比如编译器，就会要求一个完整的K&amp;R实例，因为即使附录中定义了C语言，它还没有定义C语言库。C比其他的大多数语言都要更加依赖于C语言库，所以库标准还需要确立。没有任何的官方标准的情况下，Unix实例中提供的库就成为了实际的标准。</p>\n<h2 id=\"第一个ANSI-ISO-C语言标准\"><a href=\"#第一个ANSI-ISO-C语言标准\" class=\"headerlink\" title=\"第一个ANSI&#x2F;ISO C语言标准\"></a>第一个ANSI&#x2F;ISO C语言标准</h2><p>随着C语言的进步与在不同系统中的广泛使用，C语言社区意识到它需要一个更加综合、与时俱进并且严格的标准。为了满足这种需求，美国国家标准研究院在1983年成立了X3J11委员会，开发了一种新的标准，它在1989年被正式使用，这种新型标准（ANSI C）不仅定义了语言而且还定义了基础的C语言库，国际标准化组织采用了在1990年一种C语言标准（ISO C）。ISO C与ANSI C本质上是一样的标准。ANSI&#x2F;ISO标准的最后一种版本通常被称作<em><strong>C89</strong></em>（因为那是ANSI同意的时候）或者<em><strong>C90</strong></em>（那是ISO同意的时候），而且因为ANSI版本是先推出的，人们更经常用的是ANSI C。</p>\n<p>这个协会有几项指导准则，可能最有趣的就是这一项：保持C语言的精神<br>委员会在阐述这种精神的时候列出了以下的几点。</p>\n<ul>\n<li>相信编程人员。</li>\n<li>不要阻止编程人员做需要做的事情。</li>\n<li>保证简单、小型地使用这种语言。</li>\n<li>一项操作只提供一种方式。</li>\n<li>即使传输性会下降，也要尽力让C语言程序运行变快。</li>\n</ul>\n<p>在最后一点中，委员会的意思是实例必须界定一种对于目标电脑的运转最好的操作，而不是试着强加抽象的、统一的定义。在学习语言的同时，你也会体会到这种哲学的。</p>\n<h2 id=\"C99标准\"><a href=\"#C99标准\" class=\"headerlink\" title=\"C99标准\"></a>C99标准</h2><p>在1994年，他们开始重新审视这个标准，这也导致了C99标准的产生，一个ASIO&#x2F;ISO联合委员会，也被称作<em><strong>C9X</strong></em>委员会批准了C90标准的准则，包括保持语言的小型与简洁，委员会的目的并不是向语言中添加新的特性，而是按需去达到新的目标。其中一个主要目标就是，通过比如提供解决国际字符集的方法，来支持国际编程。另一个目标就是“把现存的实践编程化来解决明显的缺陷”。因此，当在达成把C语言移植到64位的处理器上的需要时，委员会 以在真实生活中应对过这种问题的人的经验为基础来添加标准。第三个目标就是改善C语言执行科学与工程项目时做关键数字运算时的合适度。</p>\n<p>这三点-国际化，纠正缺陷与对于计算可用度的改善是最主要的以改变为方向的目标，其他的改变计划自然更加保守，例如，把与C90与C++的不协调降到最低，并且让这个语言概念上是简洁的。用委员会人员的话来说，“委员会在让C++变得更加重要，更加有发展动力。</p>\n<p>C99改变的结果，就是它保持了C语言的必要的基本特征，C语言仍然是一个小型的，简洁并高效的语言，这本书指出了很多C99的变化，因为现在的大多数编译器还没有完全实现所有的C99的改变，你可能会发现有些在你的系统上不能实施，或者你会发现一些C99特征只有你改变了一些编译器的设置才可以实现。</p>\n<p>#注意<br>这本书将会使用ISO&#x2F;ANSI C这些词来表示这些特征来表示均为两种标准均适用的特征，使用C99来指明新的特征。偶然的，当一种特性是第一次加入C语言时，它也指C90标准。 </p>\n<h1 id=\"1-9-本书的组织架构\"><a href=\"#1-9-本书的组织架构\" class=\"headerlink\" title=\"1.9 本书的组织架构\"></a>1.9 本书的组织架构</h1><p>组织信息的方式有很多。其中一种最直接的方式就是把每一个话题的所有相关信息全部列出来，这对于参考书是极其实用的，因为你就可以在一个地方找到所有关于给定主题的信息。但是它对于学习项目并不是最好的顺序。例如，如果你从开始学习名词开始学习英语，你的表达能力就会被严重地限制。当然，学习好了名词你随便找到某个东西就能说出它的名字，但是如果你能够学一些名词、动词、形容词等等，还有一些关于这些部分如何相互连接的规则，你就会有更大的能力来表达自己。</p>\n<p>为了让你能够更均衡地消化信息，这本书使用了一种螺旋上升的方式，在初期的时候先提到这个主题，然后在后文给予更充分的讨论。例如，对于理解C语言，理解函数是极其关键的，因此，在前面的几章就会包括对于函数的一些讲述，以便于你能够在第九章全面讲述函数的时候，已经能够使用函数获得到一些轻松了。相似的早期的篇章也会预先讲述字符串和循环，那样你就可以在还没有细致地地了解它们之前，在你的程序中先使用那些有用的工具。</p>\n<h1 id=\"1-10-例子的使用\"><a href=\"#1-10-例子的使用\" class=\"headerlink\" title=\"1.10 例子的使用\"></a>1.10 例子的使用</h1><p>我们已经差不多要开始学习C语言了，这一单元已经包括了我们在陈述材料的时候的一些例子了。</p>\n<h2 id=\"字体-Typeface\"><a href=\"#字体-Typeface\" class=\"headerlink\" title=\"字体 Typeface\"></a>字体 Typeface</h2><p>对于呈现文字的程序与电脑的输入输出，我们使用你很可能在屏幕上或者在输出的时候看到的相似的字体。我们已经使用过几次了。为了防止你没有注意到，字体看起来是下面这样的</p>\n<p><img src=\"/img/typeface.png\" alt=\"字体示例\"></p>\n<p>相同的等宽字体也被用作是与编程相关的词汇，比如<code>main()</code>，也用作文件名，比如<code>stdio.h</code>，对于用来替换特殊词汇的占位字符，我们是用斜体的等宽字符来写的，比如下面的描述。<br><em>type_name variable_name;</em><br>例如，你有可能用<em>type_name</em>来替换<code>int</code>，用<em>variable_name</em>来替换<em>zebra_count</em></p>\n<h2 id=\"程序输出-Program-Output\"><a href=\"#程序输出-Program-Output\" class=\"headerlink\" title=\"程序输出 Program Output\"></a>程序输出 Program Output</h2><p>电脑中的输出是以与我们书中相同的形式被印出来的，但输入是以粗体字被显示出来的。例如，下面就是在14章“结构体与其他数据类型”中的输出。</p>\n<p><img src=\"/img/output.png\" alt=\"输出示例\"></p>\n<p>以正常电脑字体打印出来的是程序的输出，黑体字是用户的输入。<br>你与你的电脑交互的方式有很多，我们假设你是用键盘在键入指令的，在屏幕上阅读反馈。</p>\n<h2 id=\"特别的按键-Special-Keystrokes\"><a href=\"#特别的按键-Special-Keystrokes\" class=\"headerlink\" title=\"特别的按键 Special Keystrokes\"></a>特别的按键 Special Keystrokes</h2><p>通常，你会通过一个标签为Enter的按键，c&#x2F;r，返回或者其他的方式输入一行指令，我们在文中称这些按键为<em><strong>Enter key</strong></em>，自然也就会默认你会在每一行输入之后按下Enter键。然而，为了阐明特定的观点，一些例子可能会明示出Enter键，以[enter]的形式来呈现它，这个括号就表示你需要按下一个按键而不是打字<strong>enter</strong>。</p>\n<p>控制字符中的特殊按键，比如CTRL+D，这种标记指在你按下Ctrl标志的按键（或者可能是Control）时按下D键。</p>\n<h2 id=\"准备学习这本书使用的系统\"><a href=\"#准备学习这本书使用的系统\" class=\"headerlink\" title=\"准备学习这本书使用的系统\"></a>准备学习这本书使用的系统</h2><h2 id=\"Systems-Used-in-Prepare-This-Book\"><a href=\"#Systems-Used-in-Prepare-This-Book\" class=\"headerlink\" title=\"Systems Used in Prepare This Book\"></a>Systems Used in Prepare This Book</h2><p>C语言的一些部分，比如储存数字时使用的空间，是取决于系统的。当我们举例子并且指的是我们的系统，“我们提的是一台在WinXP专业版下有奔腾处理器的电脑，并且使用Metrowork的CodeWarrior开发工作室9.2版本和微软的Visual C++ 7.1（这个版本Microsoft Visual Studio .NET 2003也开发完成）,或者gcc 3.3.3。在编写的时候，对C99的支持并不完全，而且没有编译器能够支持C99的全部特性。但是，在它们之间，这些编译器已经包含了许多的新标准下的东西了。大多数实例是在Mac G4上通过Metrowerks CodeWarrior Development Studio 9.2来测试的。</p>\n<p>这本书有的时候也参考在Unix系统中运行的结果，Unix系统是在Berkley’s BSD 4.3 version的Unix系统中，在VAX 11&#x2F;750电脑上运行的。而且，一些程序也是在Linux系统下使用gcc 3.3.1与Comeau 4.3.3在奔腾处理器的电脑上测试的。</p>\n<p>样本代码，对于在这本书中陈述的完整程序是可以在Sams网址 (<a href=\"http://www.samspublishing.com/\">www.samspublishing.com</a>) 中找到的，搜索这本书的ISBN号（不带连字号）就会显示这本书的昵称，点击昵称，进入网址，你就可以下载代码了。你还可以在这个网站上找到编程训练的解决方法。</p>\n<h2 id=\"你的系统-你需要的-Your-System\"><a href=\"#你的系统-你需要的-Your-System\" class=\"headerlink\" title=\"你的系统-你需要的 Your System\"></a>你的系统-你需要的 Your System</h2><p>你需要有一个C语言编译器，或者至少可以使用一个。C可以在很多中电脑中运行，所以你有很多的选择。一定要确保使用的编译器是专门为了你的系统而设计的。这本书中的一些实例需要C99标准支持，但是大多数实例在C90标准下的编译器都是可以运行的。如果你使用的是在ANSI&#x2F;ISO标准之前的，你就需要做出一些调整了，很可能得通常鼓励你去找寻些新的东西了。</p>\n<p>大多数编译器的供应商会为学生与教育者特价，如果你是那类人，那就看看供应商的网站。</p>\n<h2 id=\"特殊元素-Special-Element\"><a href=\"#特殊元素-Special-Element\" class=\"headerlink\" title=\"特殊元素 Special Element\"></a>特殊元素 Special Element</h2><p>这本书包含了几部分特殊元素，强调了特别的重点：补充、建议、警告、笔记。</p>\n<p><img src=\"/img/four_kinds.png\" alt=\"四种特殊信息类型\"></p>\n<ul>\n<li>Sidebar(补充)<br>  为阐明内容提供了更深刻的见解或者更多的背景信息</li>\n<li>Tip(建议)<br>  对于特定的编程情况提供了简短，使用的建议。</li>\n<li>Caution(警告)<br>  警告潜在的陷阱</li>\n<li>Note(笔记？)<br>  提供了综合的注释，不符合其他的特殊类型的信息。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>C语言是一种强大、简洁的编程语言。<br>因为提供了使用的编程工具、对于硬件设备的控制良好，<br>并且是最容易从一种设备传输到另一种设备的语言，<br>它受到很多人的欢迎。</p>\n<p>C语言是一种编译型的语言，<br>需要C语言编译器与连接器来把C语言源代码转化成可执行程序。</p>\n<p>C语言的编程可能是费力、困难甚至令人沮丧的，<br>但是它也可以是有趣的、令人振奋与满足的。<br>我们希望你能够像我们一样找到C语言的乐趣与魅力。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><p>你会在<strong>附录A-回顾问题答案</strong>中找到问题的答案。<br>(以下为我本人的想法)</p>\n<p>1.在编程中，<em><strong>传输性</strong></em>指的是什么?<br>    编程得到的文件在不同类型的操作系统中几乎不需要修改或者只需要修改一点就可以顺利地进行转移。<br>2.解释源码文件、目标代码文件与可执行文件。<br>    源码文件是我们通过编辑器输入的代码，目标代码文件是源码文件经过编译器处理之后生成的包含库文件函数声明与我们输入的代码的机器语言翻译的文件，一般是asm的汇编文件或者obj，不具有执行的能力。<br>    可执行文件是把库文件与目标代码文件结合起来之后翻译成的最终文件，它包含了程序运行需要的一切函数声明、变量、指令的翻译。<br>3.编程的七步走。<br>    首先在纸上想这个问题可以怎么解决，然后结合具体的语言来想实现方法，然后写代码，然后编译，然后运行，然后检查正误，进行修改与调试。<br>    ×<br>    第一步，明确程序目的，你想要程序做什么<br>    第二步，设计程序，包括目标人群，用户界面与交互方式，实现时间，数据处理方式<br>    第三步，使用C语言知识写代码<br>    第四步，编译<br>    第五步，运行程序<br>    第六步，通过输出过程量等方法来调试，输入多个值来测试。<br>    第七步，维护与修改程序。<br>4.编译器做了什么工作？<br>    把源码文件中你输入的代码转变为机器语言。<br>5.连接器做了什么工作。<br>    把你代码中缺少的库函数内容补充完整，并且针对系统添加起始代码。</p>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>我们现在还不期望你开始写C语言代码，所以这一次锻炼就集中于编程过程的早期阶段吧。</p>\n<p>1.你被MacroMusic公司录取了，这个公司正在进入欧洲市场，想要一个能够把英尺换算成厘米的程序（1 inch &#x3D; 2.54cm）公司想要让这个程序能够提示使用者去输入一个英尺值，你的任务就是找出这个程序的目的，并且设计这个程序。</p>\n<p>程序目的：我想要设计一个通过乘除法来把输入的数值变作2.54倍的程序，输入是英尺值，2.54倍是厘米值。</p>\n<p>程序设计：<br>首先输出一行：请输入英尺值<br>然后向用户获取输入值。<br>接着经过把值 * 2.54来获取厘米值<br>然后在屏幕上输出数值。</p>\n<p>交互方式就是输入输出，因为目标人群是欧洲人，所以需要英语，需要更多的UI设计等。</p>\n<blockquote>\n<p>END..</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"第一章-学习准备\"><a href=\"#第一章-学习准备\" class=\"headerlink\" title=\"第一章 学习准备\"></a>第一章 学习准备</h1><blockquote>\n<p><strong>你将会在这一章学到：</strong><br>    1. C的历史以及特点<br>    2. 写程序的步骤<br>    3. 关于代码连接器与编译器的一些知识<br>    4. C标准</p>\n</blockquote>\n<p>欢迎来到C语言的世界！C语言是一种充满活力的高级编程语言，它受到业余与商用编程者的喜爱。<br>这一章会为你学习与利用这种强大而又受欢迎的语言，而且会向你介绍几种你最有可能搭建C语言基础的环境。</p>\n<p>首先，我们看向C语言的来源和它的一些特点（优点以及缺点）。接着，我们会了解编程的起源，查看编程的总体规则。<br>最终，我们会讨论如何在常见的系统中运行C程序。</p>","more":"<h1 id=\"1-1-C语言的由来\"><a href=\"#1-1-C语言的由来\" class=\"headerlink\" title=\"1.1 C语言的由来\"></a>1.1 C语言的由来</h1><p>贝尔实验室的Dennis Richie在1972年创造了C语言，也就在那时，他和Ken Thompson正在致力于设计Unix系统。C语言的想法并不完全是在Richie的脑袋里冒出来的，而是来自Thompson的B语言，B语言来自哪里又是另一个故事了。重点是，C语言是作为工作中的编程人员的工具被创造出来的，所以它的首要目标就是成为一种有用易用的语言。</p>\n<p>很多编程语言都有着类似的目标，但是它们又经常会有其他的顾虑，举几个例子，Pascal语言的主要目标，就是为了教授编程规则提供良好的平台。BASIC语言，被设计得与英语很相像，从而可以方便地让不熟悉电脑的学生们学习。这些目标都是很重要的，但是并不与实际使用协调，也并不是普遍都很易用。相比之下，C语言是为了编程人员而生的，而且成功地成为了现代编程语言的一种选择。</p>\n<h1 id=\"1-2-为什么使用C语言？\"><a href=\"#1-2-为什么使用C语言？\" class=\"headerlink\" title=\"1.2 为什么使用C语言？\"></a>1.2 为什么使用C语言？</h1><p>在过去的30年来，C语言已经成为了最重要与最受欢迎的编程语言。它的成长，就是因为人们经过尝试之后，喜欢使用它。过去的10年里，许多人从C语言转到的更有规模的C++上，但C语言仍然是拥有权重的一种很重要的语言，C++也是从C语言迁移过来的。在学习C语言的过程中，你会意识到C语言的许多长处（见图1.1）让我们预先查看一下。<br><img src=\"/img/Chapter1.2.png\" alt=\"插图\"><br>（上图，左上为强大的控制结构，右上运行速度快，左下小型代码-小程序，右下是可以传输到不同的电脑）</p>\n<h2 id=\"1-2-1设计特点\"><a href=\"#1-2-1设计特点\" class=\"headerlink\" title=\"1.2.1设计特点\"></a>1.2.1设计特点</h2><p>C语言是一种拥有在理论界以及计算机科学实践中令人满意的控制特色的现代编程语言。它的设计让它很自然地能自上而下地规划程序、结构化编程以及模块化设计，从而设计出的程序也更可靠，更易懂。</p>\n<h2 id=\"1-2-2-效率\"><a href=\"#1-2-2-效率\" class=\"headerlink\" title=\"1.2.2 效率\"></a>1.2.2 效率</h2><p>C语言是一种高效的编程语言，它的设计很好地利用了现代电脑的性能。C语言编写的程序常常是小型的，并且运行速度很快。事实上，C表现了一些在汇编语言中好的控制方法，（汇编语言是对于特定的中央处理单元(Central Processing Unit,CPU)的内部指令设计的的助记语句，不同的CPU有着不同的汇编语言）。如果你选择C语言，你可以调节你的程序到达最快速度或者让程序对于内存的使用更有效。</p>\n<h2 id=\"1-2-3-可传递性\"><a href=\"#1-2-3-可传递性\" class=\"headerlink\" title=\"1.2.3 可传递性\"></a>1.2.3 可传递性</h2><p>C语言是一种可传递的编程语言，那意味着在一个系统上的C语言程序也可以在其他系统经过少量的改动或者不改动运行。即使改动是必须的，也只是改动头文件与main程序里的几个词条而已。大多数也打算着有可传递性，但是任何想要把个人电脑IBM里的BASIC程序放到苹果BASIC（它们是近亲）或者尝试把主机上的IBM里的FORTRAN程序在Unix系统中运行都知道传递烦人透顶。C语言是可传递性的领头者。C语言的编译器（把你的C语言代码转换为电脑内部指令的程序）对于40种系统都是可以使用的。从微型处理器到超算。但需要注意的是，一部分程序对于不同的硬件设备是不一样的，比如显示器监控，或者因为在运算系统上的特殊点，比如WinXP与OS X，它们通常是不具有传递性的。</p>\n<p>因为C语言与Unix操作系统关系紧密，Unix系统的安装包是自带C语言的编译器的，Linux安装时也通常带有C语言编译器，一些C语言编译器是可以在个人电脑上使用的，包括运行着各种版本的Windows系统的电脑，还有Mac。所以不论你是正在使用着家里的电脑，还是使用专业的工作站或者大型电脑，你都是有很大可能获得一个适用于你的系统的C语言编译器的。</p>\n<h2 id=\"1-2-4能力与灵活性\"><a href=\"#1-2-4能力与灵活性\" class=\"headerlink\" title=\"1.2.4能力与灵活性\"></a>1.2.4能力与灵活性</h2><p>C语言既强大又灵活（在计算机文献中最受喜欢的两个词）。<br>举个例子，许多功能强大与灵活的操作系统是用C语言写的。许多的其他编程语言（如FORTRAN、Perl、Python、Pascal、LISP、Logo与BASIC）的编译器与翻译器是用C语言写的。结果，当你在Unix机上使用FORTRAN语言，最后是用C语言程序生成的exe文件。C语言程序被用作解决物理、工程问题甚至在电影如《角斗士》中栩栩如生地重现特殊的现象。</p>\n<h2 id=\"1-2-5-以程序员为方向的\"><a href=\"#1-2-5-以程序员为方向的\" class=\"headerlink\" title=\"1.2.5 以程序员为方向的\"></a>1.2.5 以程序员为方向的</h2><p>C语言重视于满足程序员的需求，让我们轻松地触达硬件，而且让你独立地操纵内存中的每一个bit。它拥有非常多的运算符，能够让你简洁地表达自己。C语言比起，比如说Pascal语言就在限制着你可以做的事情。这种灵活性既是优势也很危险。优势在许多的任务，像是数据形式转换，在C语言中简单很多。危险就是用C语言，你有可能犯在其他语言中不可能犯的错误。C语言给予了你更大的自由，也让你承担了更多的责任。</p>\n<p>另外，大多数C语言的实施都有着大量有用的C语言库函数。这些函数能够应对很多编程人员通常的需求。</p>\n<h2 id=\"1-2-6-缺点\"><a href=\"#1-2-6-缺点\" class=\"headerlink\" title=\"1.2.6 缺点\"></a>1.2.6 缺点</h2><p>C确实有一些不足之处。通常，像人一样，不足与长处是同一个特点的两面。例如，我们提到了C语言的自由表达也需要更多的责任。C语言的指针（我们以后会学习到）使用特别地，意味着编程错误会更难跟踪到。曾经也提到了一台没有文字的电脑，解放的代价就是格外的警惕，</p>\n<p>有着大量的运算符，C的简明也让有可能让我们写出极其难以理解的代码。你可能并不是必须要写晦涩的代码，但是可能性总在那儿。毕竟，其他语言哪个有每年一次的混乱的编程比赛？</p>\n<p>还会有更多的长处，毫无疑问也会有更多的缺陷。与其在这个问题上挖的更深，还不如移到下一个话题。</p>\n<h1 id=\"1-3-C语言的用处\"><a href=\"#1-3-C语言的用处\" class=\"headerlink\" title=\"1.3 C语言的用处\"></a>1.3 C语言的用处</h1><p>到 1980 年代初，C 语言已经是 Unix 系统小型计算机世界的主导语言了。从那时起，它就已经被传播到个人计算机（微型计算机）和大型主机（大型计算机）了。（参见图 1.2）许多软件公司把C语言作为制作文字处理程序、电子表格、编译器和其他产品的首选语言。它们知道C语言编写的程序代码量小而且高效。更重要的是，他们知道这些程序将易于修改，并易于适应新型号的计算机。<br><img src=\"/img/Chapter1.3.png\" alt=\"图片\"><br>（以上，C语言被用作编程Unix操作系统，被用作电影如Star wars，在电脑游戏、电脑语言处理、嵌入式系统与机器人工程中都有显著的作用）</p>\n<p>C语言不仅对公司和老手有好处，对其他用户也有好处。越来越多的计算机用户已经开始使用 C 语言，它的优势也得到了确保。你不必是专业的计算机编程人员就可以使用C语言了。<br>在 1990 年代，许多软件公司开始转向 C++ 语言进行大型编程项目。C++ 将面向对象的编程工具嫁接到 C 语言中。（面向对象编程是一种思想体系，它试图使语言来适应问题，而不是让问题来适应语言。）C++ 几乎是 C 语言的超集，这意味着任何 C程序也是，或者它几乎也是一个有效的C++程序。通过学习 C语言，您还学习了许多 C++。<br>尽管 C++ 和 Java 等新型的编程语言很受欢迎，但 C语言在软件公司依然是核心技能，一直排在所需技能的前 10 名。特别的，C语言已成为在嵌入式系统编程中很受欢迎的一种语言，也就是说，它被用于编程越来越多的汽车、相机、DVD 播放器和其它现代便利设施中的常见的微型处理器。此外，C语言已经开始追赶在科技科学编程上具有长久的主导地位的FORTRAN语言。最后，作为为开发操作系统而生的语言，C语言在Linux系统的发展中发挥着重要作用。所以，在二十一世纪的第一个十年， C 语言的影响力仍然在变得更大。</p>\n<p>简而言之，C 是最重要的编程语言之一，并将继续如此。如果你想要一份编程软件的工作，这应该是你能够回答“是”的第一个问题中的一个，“嗯，比如说，你会C语言吗？“</p>\n<h1 id=\"1-4-计算机的作用\"><a href=\"#1-4-计算机的作用\" class=\"headerlink\" title=\"1.4 计算机的作用\"></a>1.4 计算机的作用</h1><p>既然你已经要开始学习如何运行C语言程序了，你很可能需要了解一下电脑是怎么工作的，这些知识能够帮助你了解C语言程序与最终运行程序后发生的事情之间的关联。</p>\n<p>现代的电脑有几个组成部分，<em><strong>中央处理器</strong></em>，又叫<em><strong>CPU</strong></em>，做了电脑运转时的大部分工作。<em><strong>随机存取器</strong></em>，又叫<em><strong>RAM</strong></em>，作为保存文件与程序的工作区。永久存储器，比如硬盘，存储程序和文件，即使电脑已经关机。各种外设，比如键盘、鼠标还有显示器，在你与电脑交互中搭建了桥梁。CPU运行程序，所以我们集中于它的作用。</p>\n<p>CPU的自始至终的工作，简单来说，其实是非常简单的。它从内存中依次抓取一条条的指令，然后执行它。（千兆赫CPU可以在一秒钟执行这个过程百亿次，所以CPU可以以一种惊人的速度运作），CPU也有自己的小工作区，有几个储存数的<em><strong>寄存器</strong></em>。每一个寄存器保存下一条指令的内存地址，然后CPU就使用这些信息来抓取下一条指令。接下来，CPU再把指令储存在另一个寄存器中，然后把上一个寄存器的命令更新到下一条。CPU能够理解的指令（也叫指令集）是有限的。而且这些指令都是各自分明的。很多指令都是要求电脑去把数字从一个地方移动到另一个地方。—例如，从内存到寄存器。</p>\n<p>在这个过程中有几点很有趣。第一，在电脑中任何东西都是以数字的形式储存的，数字是以数字的形式储存的。字符（例如你在文本编辑中的英文字母），也是由数字的形式储存的，每一个字符都有一个数字编码。计算机储存进寄存器的指令也是数字的形式，指令集中的每一条指令都对应着一个数字编码。第二，电脑程序最终会被以数字指令的形式表达，这又叫<em><strong>机器语言</strong></em>。</p>\n<p>计算机运行的一种结果就是，如果你想让计算机做些事，你需要提供一系列的指令或者是程序，来明确地告诉它要做什么和怎么做。你必须创建一个电脑能够直接理解（使用机器语言）的程序。这是个精细、单调、费劲的任务。一些像两个数相加的简单的任务可能会被分解成几步，可能会像下面几步。</p>\n<blockquote>\n<p>1.从内存区域2000把数字复制到寄存器1<br>2.从内存区域2004把数字复制到寄存器2<br>3.用数字二的数值加上数字一，在寄存器1留下答案。<br>4.把寄存器1中的数据复制到内存区域2008</p>\n</blockquote>\n<p>而且你还得把每一条指令用数字指令表述出来！</p>\n<p>如果你是喜欢以这种方式写程序的，你会很难过地了解到机器语言编程的黄金时期已经远远地过去了。但是如果你更喜欢那些更愉快的编程，那就对高级编程语言打开怀抱吧！</p>\n<h1 id=\"1-5-高级计算机语言与编译器\"><a href=\"#1-5-高级计算机语言与编译器\" class=\"headerlink\" title=\"1.5 高级计算机语言与编译器\"></a>1.5 高级计算机语言与编译器</h1><blockquote>\n<p>高级编程语言，比如C语言，以很多方式简化了你的编程。<br>    第一，你不需要用数字的形式来表达你的指令。<br>    第二，你使用的指令与你对于程序的思考而不是与电脑使用的精确的指令</p>\n</blockquote>\n<p>与其关心某一个CPU为了完成某一个任务进行的某一步。你可以以一种更复杂的形式来表达你想做的事情，例如，你也许会写下面的东西。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = mine + yours;</span><br></pre></td></tr></table></figure>\n\n<p>看到这样的代码，你能够很明白它是干啥的，<br>而看着机器语言以数字构成的替代指令，那就太不易读了。</p>\n<p>不幸的是，机器语言才是适合电脑的，对于电脑来说，高级语言完全无法理解。这就到了编译器上场的时候了，<em><strong>编译器</strong></em>是把高级语言程序详细地翻译成电脑需要的机器语言指令的程序。你以高级的方式思考，编译器做这些令人生厌的工作。</p>\n<p>编译器方法还有另一种好处。每台电脑都设计了各自的机器语言，所以比如说英特尔PentiumCPU的机器语言对于摩托罗拉PowerPC CPU可能没有任何意义，但是你可以根据特定的机器语言搭配编译器。所以，使用一系列的编译器或者合适的编译器，你就可以把同样的高级编程语言转化成一系列不同的机器语言程序。你只需要解决这个问题一次，然后让编译器把这个解法翻译成一系列机器语言程序。</p>\n<p>简短地说，高级的编程语言，比如C语言、Java还有Pascal，它们以一种更加抽象、与特定的CPU并不绑定的方式来表述程序行为。而且，对于机器语言来说，高级语言学习起来简单而且也更容易编程。</p>\n<h1 id=\"1-6-使用C语言的七步走\"><a href=\"#1-6-使用C语言的七步走\" class=\"headerlink\" title=\"1.6 使用C语言的七步走\"></a>1.6 使用C语言的七步走</h1><p>C语言，如你所见，是一种编译型的语言，如果你习惯于使用如Pascal或者FORTRAN的编译型语言，你应该已经对组成C语言程序的基本步骤很熟悉了。如果你的基础语言是如BASIC，或者面向接口的计算机图形语言（如Visual Basic）的翻译型语言，或者你还没有编程基础，你需要学习如何编译。我们一会就会研究那个过程，你会认识到这是很合理简单的。首先，为了让你宏观、大体上了解编程，让我们把编写C语言程序分解成7个步骤（见图1.3）。值得注意的是，这只是理想化的步骤，在编程实践中，你需要在步骤中来回切换，用后面一步了解到的来使之前的一步得到优化。<br><img src=\"/img/Chapter1.6.png\" alt=\"七步走\"></p>\n<h2 id=\"1-6-1-确定程序目的\"><a href=\"#1-6-1-确定程序目的\" class=\"headerlink\" title=\"1.6.1 确定程序目的\"></a>1.6.1 确定程序目的</h2><p>很自然的，你需要明确地知道你想让程序做什么，思考你的程序需要什么信息，需要在计算与控制上完成什么样子的事情，而且程序内的信息需要对你有所反馈，在这一步的规划中，你应当以大体出发，而不是根据特定的编程语言来思考。</p>\n<h2 id=\"1-6-2-设计程序\"><a href=\"#1-6-2-设计程序\" class=\"headerlink\" title=\"1.6.2 设计程序\"></a>1.6.2 设计程序</h2><p>在有了对于你的程序应该干啥的印象之后，你应该选择程序如何来运行它，用户的交互界面会是什么样子的？程序应该如何被组织起来？程序的目标人群是？你需要多长时间来做完这个程序？</p>\n<p>你还要决定在程序中呈现数据，而且很可能的，在辅助文件里也要。要决定用什么方式来处理数据。在刚开始学习C语言时，可能选择会很简单，但是随着你应对更多复杂的情况后，你就会知道这些选择是需要更多的思考的。选择一种好的方式来呈现数据经常会让设计程序与处理数据简单很多。</p>\n<p>再一次，你需要在大体层面上思考而不是在特定的代码上，但是有些选择可能是基于编程语言的大体特点的，举个例子，C语言编程人员就比，比如说，Pascal编程人员在数据呈现上拥有更多的选择。</p>\n<h2 id=\"1-6-3-编写代码\"><a href=\"#1-6-3-编写代码\" class=\"headerlink\" title=\"1.6.3 编写代码\"></a>1.6.3 编写代码</h2><p>既然你已经对于你的程序有个清晰的设计了，你就可以通过写代码的方式来实现它了。也就是说，你可以把你的程序设计翻译为C语言。这就是你需要用上C语言知识的地方了，你可以在纸上画出你的想法，但最后你还是要把你的代码输入电脑。这个过程主要取决于你的编程环境，我们一会会呈现更多的常见的编程环境。总体上，你会使用文本编辑器来创造一份源码文件，它包含了你程序设计的C语言翻译，例1.1给出了C语言源码的一个例子。</p>\n<p><img src=\"/img/listing1.1.png\" alt=\"图例1.1\"><br>在这一步，你应该记录你的工作，最简单的方式是使用C语言的注释功能，它包含着你对于源码的解释，我们会在第二章详细讲到如何注释你的代码。</p>\n<h2 id=\"1-6-4-编译\"><a href=\"#1-6-4-编译\" class=\"headerlink\" title=\"1.6.4 编译\"></a>1.6.4 编译</h2><p>下一步就是编译源码，再一次，细节上的问题是与你的编程环境相关的，我们马上会研究几种常见的环境了。现在，让我们以更概念化的方式看看发生了什么。</p>\n<p>我们已经知道编译器的工作就是把源码转化成可执行文件。<em><strong>可执行文件</strong></em>是以我们电脑的自然语言（或者说<em><strong>机器语言</strong></em>）写成的，这种语言是以精细的数字代码形式呈现的。而且你之前也了解到了，不同的电脑的机器语言是不一样的。C语言的编译器也包括着C语言库中的代码。C语言库包含着很多的基础的、日常使用的东西，比如<strong>Printf</strong>和<strong>scanf</strong>函数。（更精确地说，一个叫做连接器的程序把C语言库中的一组代码带到编译器，但是编译器在大多数系统都是可以运行连接器的），最终结果就是包含着电脑可理解的可执行文件的程序，你可以直接运行。</p>\n<p>编译器还会检查你的程序是不是使用了符合语法的C语言，如果编译器发现了错误，它就会汇报给你，而且不会生成可执行文件，理解编译器提示的错误信息也是你会很快习得的另一项技能。</p>\n<h2 id=\"1-6-5-运行程序\"><a href=\"#1-6-5-运行程序\" class=\"headerlink\" title=\"1.6.5 运行程序\"></a>1.6.5 运行程序</h2><p>通常的，可执行文件是你可以运行的程序，你可以在很多常见的环境中，包括MS-DOS、Unix、Linux控制台、只需要打字写下可执行文件的名称。其他的环境，比如VMX、VAX可能需要一些运行指令或者其他的机制方法。<em><strong>集成开发环境（IDE）</strong></em>，像很多在Windows系统或者Mac系统上的，使你能够在IDE内部通过菜单选项或者按几个按键来编辑与运行你的C语言程序。最终生成的文件也可以通过双击文件名或者图标的方式从你的操作系统直接运行。</p>\n<h2 id=\"1-6-6-测试与Debugging\"><a href=\"#1-6-6-测试与Debugging\" class=\"headerlink\" title=\"1.6.6 测试与Debugging\"></a>1.6.6 测试与Debugging</h2><p>你的程序能够运行是个好迹象，但是有可能你的程序并没有正确地运行。因此，你应该检查下是否它做到了它应该做的事情。你会发现有些程序是会有问题（在计算机领域内的行话叫bugs）的。调试是查找与修复程序错误的过程，学习的过程中犯错误是自然且正常的。看起来编程“天生”需要调试，所以当你把学习到的与编程实际结合起来的时候，你最好准备好在犯错的时候提醒自己。随着你成为一个更加强大与巧妙的编程人员，你也会不断地犯错，但你也因此不断地变得更加强大与巧妙。</p>\n<p>你会有很多机会犯错，基础的设计层面错误，实现过程出错，忽略了可能会搞砸你的程序的输入。你可能会不恰当地使用C语言，你可能会拼写错误，可能会把括号放错了位置等等等等。你会有自己的错误方式来丰富这一列的。</p>\n<p>幸运的是，这种情况并不是无望的，即使有时候你会这样认为啦。<br>编译器会捕捉到很多种类的错误，而且还会有工具来帮助你找到许多种编译器没有办法捕捉的错误。继续读下去，这本书也会给到你一些调试的建议。</p>\n<h2 id=\"1-6-7-维护与修改程序\"><a href=\"#1-6-7-维护与修改程序\" class=\"headerlink\" title=\"1.6.7 维护与修改程序\"></a>1.6.7 维护与修改程序</h2><p>当你为自己或者别人创造了一个程序，你可能会发现程序是可以有更多的用处的。如果是的，你可能会发现是有理由做出些修改的。可能有个小bug只有别人把名字以Z&#x2F;z开头的时候才会发生，或者你会想出一种能够解决问题的更好的方式，可以聪明地加入一些的新功能，你可能需要改写程序以便它能够在不同电脑系统中运行。如果你明确地注释了这些程序，所有这些任务都会被极度地简化。</p>\n<h2 id=\"1-6-8-注释\"><a href=\"#1-6-8-注释\" class=\"headerlink\" title=\"1.6.8 注释\"></a>1.6.8 注释</h2><p>编程的过程并不总是像这个过程描述的那样线性。有的时候你需要在步骤中前后切换。例如，当你在写代码的时候，你有可能发现你的计划并不实际。你有可能发现了一种更好的方式来做事，或者在看到程序是怎么运行的之后，你会想要改变你的设计，记录你的工作能够帮助你在不同的等级之间前后切换。</p>\n<p>许多学习者通常会忽略掉第一步与第二步（确定程序目的与设计程序）直接进入第三部（写程序），你写的第一个程序或许可以直接在脑中看到完全的流程，如果犯错也很好定位错误。但是随着你编写的程序越来越复杂，越来越冗长，心智的视觉化就开始失效了，而且错误也会更难以发现。最终，那些忽略了规划步骤的人就陷入数小时的时间浪费、困惑还有沮丧，因为他们写出的丑陋的，无法实现功能而又深奥的程序。这项工作越是复杂，需要的规划工作就越多。</p>\n<p>道理就是你需要养成在写代码之前做规划的习惯，使用这种古老但是可敬的笔尖技术来记下你程序的目的，给程序设计做出大纲。如果你这样做的话，你最终会收获节省时间与满足感的巨大红利。</p>\n<h2 id=\"1-6-9-编程技术\"><a href=\"#1-6-9-编程技术\" class=\"headerlink\" title=\"1.6.9 编程技术\"></a>1.6.9 编程技术</h2><p>你生成程序的明确步骤是取决于你的电脑系统的，因为C语言是可传输的，它是可以适用于很多的系统环境的，包括Unix，Linux，MS-DOS（是的，很多人仍然在用），Windows与Mac OS，其实还有很多只不过没有足够的空间留给它们了，这尤其是因为各自的产品不是演化、消亡，就者被取代。</p>\n<p>首先，即使如此，让我们先来研究许多C语言运行环境的共有特点，包括我们刚才已经提到的五种系统，你不需要明确地知道是什么引导了C语言程序的运行，但这是良好的基础，它也能够帮助你更好地理解为什么你需要经历一些特定的步骤来得到一个C语言程序。</p>\n<p>当你在写C语言程序的时候，你会在源码文件中储存你在文本文件中写下的东西。大多数由C语言编程的系统，也包括我们提到的那一些，需要以<code>.c</code>结尾的文件（举个例子，<code>wordcount.c</code>与<code>budget.c</code>）在<code>.c</code>之前的那部分名字叫做<em><strong>基准名（Basename）</strong></em><br>在这一段后面的名称叫做<em><strong>拓展名（Extension）</strong></em>，因此，<code>budget</code>是基准名，<code>.c</code>是拓展名。它们的混合就是文件名。文件名也必须要复合特定的电脑操作系统的需要。例如，IBM-PC与[克隆机？]上的MS-DOS系统，它就要求你的文件名不能多于8个字符长。所以，<code>wordcount.c</code>在DOS系统中就不是合法的文件名。一些Unix系统在整个文件名上有14个字符的限制，包括拓展名，其他Unix系统也允许更长的名称，不多于255个字符即可。Linux、Windows与MacOS也允许更长的文件名。</p>\n<p>让我们假设我们拥有一份名字叫<code>Concrete.c</code>的源文件储存着例1.2的C语言源码。<br><img src=\"/img/listing1.2.png\" alt=\"Concrete.c\"><br>不需要担心在源码文件中的一些细节，在第二章你会学到的。</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h2 id=\"1-7-1-目标代码文件、可执行文件和库\"><a href=\"#1-7-1-目标代码文件、可执行文件和库\" class=\"headerlink\" title=\"1.7.1 目标代码文件、可执行文件和库\"></a>1.7.1 目标代码文件、可执行文件和库</h2><p>C语言编程的一个基本本领就是把你的源代码文件转化成保存着即时就可运行的可执行文件。要实现这个过程需要两个步骤：编译与连接。编译器可以把源代码转换成中间代码，然后连接器再把中间代码与其他代码组合，由此创造出可执行文件。C语言利用这两部分结合的方法让程序易于模块化生成。你可以把每一个模块分开来编译，再用连接器把每一个编译过的模块结合起来。以那种方式，如果你想改变其中的一个模块，你就不需要再重新编译其他的模块，而且连接器也会把你的程序与预先编译好的库代码结合起来。</p>\n<p>要生成中间文件的方法还有几种，最流行的而且能够实施的在这里已经提到了，就是把源代码文件转化成机器语言代码，把结果放在目标代码文件中或者简短地说，目标文件。（假设你的源码是由单一文件组成的），虽然目标文件包括了机器语言代码，它还没准备好运行。目标文件包含了对于源代码的翻译版本，但是它还不完整。</p>\n<p>缺失的第一个部分就是起始代码，它作为你的程序与操作系统的接口。举个例子，你可以在在DOS或者Linux之下协调地运行BM PC，它们的硬件都是类似的，所以同样的目标文件对于两种系统都是可以起作用的，但是你需要在DOS与Linux不同的起始代码，因为不同的系统是以不同的方式处理程序的。</p>\n<p>第二个缺失的部分就是常用库的代码。几乎所有的C语言程序都需要利用C语言的库函数。比如<code>Concrete.c</code>使用的<code>printf()</code>。目标代码文件并不包括这个函数的代码。它只包含了<code>printf</code>函数的声明指令，实际的代码是在另一个文件中储存的，它叫<em><strong>库文件</strong></em>。库文件包含了很多函数的代码。</p>\n<p>连接器的作用就是把这三个部分连接在一起-你的目标代码、起始代码和库代码，然后把三者整合为一个文件，即可执行文件。对于库代码，连接器只提取需要使用的函数在C语言库中对应的代码。<br>（见图1.4）<br><img src=\"/img/listing1.4.png\" alt=\"图1.4\"><br>（可见，上图中，由源代码经过编译器生成目标代码文件，再由目标代码文件与起始代码、库代码通过连接器转化为可执行文件<code>concrete.exe</code>）.</p>\n<p>简短来说，一份目标文件与可执行文件都由机器语言指令组成。然而，可执行文件只把你使用的代码翻译为机器语言，但可执行文件还由常用库与起始代码的机器语言翻译组成。</p>\n<p>在一些系统中，你必须把编译与连接的过程分开。另外的一些系统中，编译器会自动启动连接器，所以你只需要编译即可。</p>\n<p>现在我们就针对于特定的系统来研究一下。</p>\n<h2 id=\"1-7-2-Unix系统\"><a href=\"#1-7-2-Unix系统\" class=\"headerlink\" title=\"1.7.2 Unix系统\"></a>1.7.2 Unix系统</h2><p>因为C的流行始于Unix系统，我们就从它开始。</p>\n<h3 id=\"在Unix系统中进行编辑\"><a href=\"#在Unix系统中进行编辑\" class=\"headerlink\" title=\"在Unix系统中进行编辑\"></a>在Unix系统中进行编辑</h3><p>Unix系统并没有独立的C语言编译器。你反而需要一些多功能的Unix编辑器，例如emacs、jove、vi或者一个X Window系统文本编辑器。</p>\n<p>你的最主要的两个目的就是正确地书写程序，并且为储存程序的文件起个名字。正像已经提到的，文件的名称必须以<code>.c</code>。注意到Unix系统会以大小写来区分文件，所以<code>BUDGET.c</code>、<code>budget.c</code>还有<code>Budget.c</code>是三个各自不同的C源文件名称，但是<code>BUDGET.C</code>是不合法的，因为它的扩展名使用了大写。</p>\n<p>使用vi编辑器，我们把下面的程序保存在名叫<code>inform.c</code>的文件中。<br><img src=\"/img/informc.png\" alt=\"inform.c\"><br>这些文本就是源代码，而<code>inform.c</code>是源文件，重点就在源文件只是一个过程的起点，而不是结尾。</p>\n<h3 id=\"在Unix系统中进行编译\"><a href=\"#在Unix系统中进行编译\" class=\"headerlink\" title=\"在Unix系统中进行编译\"></a>在Unix系统中进行编译</h3><p>我们的程序，虽然已经不可否认地很精致了，对于电脑仍然是一派胡言，电脑是不理解什么是<code>#include</code>和<code>printf</code>的（现在你可能也不理解，但是我们很快就会学习，然而电脑并不会），正像我们之前讨论过的。我们需要编译器的帮助来把我们的代码（源代码）翻译为电脑的代码（机器语言）。这些工作的结果就是可执行文件，它会包含所有可以让电脑完成工作的代码。</p>\n<p>UnixC编译器叫<code>cc</code>，为了编译<code>inform.c</code>程序，你需要把下面的指令打下来。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc inform.c</span><br></pre></td></tr></table></figure>\n\n<p>几秒之后，Unix系统的命令提示符就会给出反馈，告诉你这件事已经做完了，如果你没有正确地编写代码的话可能会得到警告或者错误信息，但我们先假设一切都是正确的。（如果你的编译器对于<code>void</code>这个词进行报错，那是你的编译器还没有更新到 <strong>ANSI C</strong> 的编译器，我们会在不久提到更多的标准，即使这样，你从例子中删掉void就好）。如果你使用<code>ls</code>指令来把你的文件列出来的话，你会发现产生了一个新文件叫<code>a.out</code>（见图1.5）这就是包含了程序中翻译后指令（或编译后指令）的可执行文件。想要运行的话直接打下<code>a.out</code>即可。</p>\n<p>然后，文件中的指令执行，智言倾泻而出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A .c is used to end a C program filename.</span><br></pre></td></tr></table></figure>\n<p>如果你想要吧可执行文件保存下来，你需要重新命名它，<br>否则，这个文件在你下一次编译时就会被新的同名文件代替。<br><img src=\"/img/process.png\" alt=\"The process\"><br>（从源码到程序的过程）</p>\n<h2 id=\"Linux-系统\"><a href=\"#Linux-系统\" class=\"headerlink\" title=\"Linux 系统\"></a>Linux 系统</h2><p>Linux也是个很受欢迎的开源的，与Unix类似的多平台操作系统，它包括IBM与Mac的兼容。在Linux上设计程序与Unix系统的过程大部分是相似的，除了你需要使用公用C语言编译器，它叫gcc，是由GNU提供的，在那里面，编译的指令是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc inform.c</span><br></pre></td></tr></table></figure>\n<p>注意到在Linux安装的时候安装gcc的时候可能是可选的，所以你（或者其他人）有可能如果之前没装的话必须得自己安装gcc。通常这会让cc成为gcc的一个别名，所以你喜欢的话可以用cc来代替gcc。</p>\n<p>你可以在下面的网站中获取关于gcc获取更多的信息，包括最新的版本。<br><a href=\"http://www.gnu.org/software/gcc/gcc.html\">http://www.gnu.org/software/gcc/gcc.html</a>.</p>\n<h2 id=\"集成开发环境（Windows）\"><a href=\"#集成开发环境（Windows）\" class=\"headerlink\" title=\"集成开发环境（Windows）\"></a>集成开发环境（Windows）</h2><p>C编译器并不是Windows安装包中的一部分，所以你也有可能需要安装一个C语言编译器。很多供应商，比如Microsoft, Borland, Metrowerks, 还有Digital Mars, 提供了以Windows系统为基础的集成开发环境（<em><strong>IDE</strong></em>）（近来，很多已经把C语言与C++编译器结合在一起了。）它们都有快速且集成的环境，可以方便地生成C语言程序。值得注意的是，每一个程序都有一个嵌入式的编辑器，你可以用它来编写C语言程序。都有可以让你命名、保存、编译、运行的菜单。每一次编译运行如果编译器发现错误了你都可以回到编辑器，而且出错的代码行都会被突出显示出来，并搭配上适当的错误信息。</p>\n<p>Windows IDE通常是可以一同处理C与C++的，你需要声明你需要一个C++程序。使用一些产品，比如Metroworks或者CodeWarrior里你需要用项目类型来区分你使用的语言。其他的产品比如Visual C++你是使用<code>.c</code>的扩展名来表示你想要使用C语言而不是C++。然而，大多数C语言程序也作为C++程序运作，可以参考“Differences Between C and C++”，那里对C与C++进行了比较。</p>\n<p>你有可能遇到的一个问题是当程序停止的时候程序运行的窗口也随之关闭，如果你也遇到这种情况，你可以让程序直到你输入一个字符再结束。只要在代码结尾，return语句前加上一行代码即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getchar();</span><br></pre></td></tr></table></figure>\n<p>这一行代码读取一个键盘输入，所以直到你输入下一个字符之前程序都是暂停着的。一些时候，受到程序运行方式的影响，可能在最后已经有一个键入数据等待了，这种情况下你就得输入两次。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getchar();</span><br><span class=\"line\">getchar();</span><br></pre></td></tr></table></figure>\n\n<p>例如，如果程序做的最后一件事是要求你输入你的体重，你已经输入完体重了然后输入enter来输入数据，程序会读取你的体重，第一个<code>getchar</code>会读取回车符，第二个<code>getchar</code>直到你再打一个字符才会有，如果你现在还不太能够理解，你学习完C语言输入就会明白了。</p>\n<p>即使多种多样的IDEs普遍有着比较类似的标准，但是细节方面还是各自不同的，不仅在一行程序内，还在编译器的不同版本。你需要做些实验，来获知你的编译器是怎么工作的，你还有可能需要阅读使用手册或者尝试网上教程。</p>\n<h2 id=\"IBMPC上的DOS编译器\"><a href=\"#IBMPC上的DOS编译器\" class=\"headerlink\" title=\"IBMPC上的DOS编译器\"></a>IBMPC上的DOS编译器</h2><p>对于很多人来说，在个人电脑上运行DOS是很过时的事情，但是它对于那些电脑资源与预算受限、喜欢更简单的，没有[响铃、哨音]与令人分心的事物的操作系统。很多Windows IDEs额外提供了命令行工具，这就然你能够在DOS命令行环境下编程。Comeau的C&#x2F;C++编译器在很多系统中是适用的，包括几种Unix、Linux的变体，它就拥有一个命令行DOS的版本。并且，它还有免费与共享的DOS系统编译器，例如，GNU gcc编译器就有一个以DOS为基础的版本。</p>\n<p>源码文件应该以文本文件形式存在，而它们并不是文字处理文件。（文字处理文件包括了很多额外信息，比如字体和格式）你应该使用一个文本编辑器如Windows Notepad或者与一些版本的DOS一同发布的EDIT程序。文件的扩展名需要是<code>.c</code>，一些处理器会自动在文本文件后面加上<code>.txt</code>的扩展名。如果你遇到了这种情况，你需要改变文件名，把<code>.txt</code>改为<code>.c</code>。</p>\n<p>电脑上的C语言编译器通常，但并不总是，生成带有<code>.obj</code>后缀的中间目标代码，不像Unix编译器，C语言编译器通常不会在编译完成之后删除这些文件。有些编译器也会生成带有<code>.asm</code>扩展名的汇编语言文件，或者使用它们自己的特殊形式。</p>\n<h2 id=\"Mac上的C语言\"><a href=\"#Mac上的C语言\" class=\"headerlink\" title=\"Mac上的C语言\"></a>Mac上的C语言</h2><p>最广受闻名的Mac C&#x2F;C++编译器就是Metrowerks CodeWarrior 编译器（Windows与Mac版本的CodeWarrior有相似的界面），它提供了与Windows编译器相似的以项目为基础的IDE。从文件菜单选择新文件开始，一系列的项目类型选择将会陈列在你眼前。在最新的CodeWarrior版本中，使用Std C控制台即可（不同的发布版本需要经过不同的步骤才到达选择这一步），你还有可能在68KB版本（适于摩托罗拉 680 * 0 系列的处理器），PPC版本（适于PowerPC处理器）或者Carbon版本（适于OS X系统）</p>\n<p>新的项目在最初项目中会有一个很小的源码文件，你可以尝试编译或者运行它来获知你的系统是否设置好了。</p>\n<h1 id=\"1-8-语言标准\"><a href=\"#1-8-语言标准\" class=\"headerlink\" title=\"1.8 语言标准\"></a>1.8 语言标准</h1><p>现在，很多C语言实例都是可行的，理想化情况下，当你在写C语言程序时，在任何的实例中都是一样运作的（假设你没有使用特殊机器来编程），为了这件事情能够实现，不同的实例需要有一个确定的、可识别的标准。</p>\n<p>最初，C语言官方并没有语言标准，但是，由Brian Kernighan和Dennis Ritchie（1978）编纂的最初一版的<em><strong>C Programming Language</strong></em>确立了被接受的标准，它通常被称作为<em><strong>K&amp;R C</strong></em>或者<em><strong>classic C</strong></em>。特别的是，那本书附录中的“C Reference Manual”作为了C语言实例的指导。但是，比如编译器，就会要求一个完整的K&amp;R实例，因为即使附录中定义了C语言，它还没有定义C语言库。C比其他的大多数语言都要更加依赖于C语言库，所以库标准还需要确立。没有任何的官方标准的情况下，Unix实例中提供的库就成为了实际的标准。</p>\n<h2 id=\"第一个ANSI-ISO-C语言标准\"><a href=\"#第一个ANSI-ISO-C语言标准\" class=\"headerlink\" title=\"第一个ANSI&#x2F;ISO C语言标准\"></a>第一个ANSI&#x2F;ISO C语言标准</h2><p>随着C语言的进步与在不同系统中的广泛使用，C语言社区意识到它需要一个更加综合、与时俱进并且严格的标准。为了满足这种需求，美国国家标准研究院在1983年成立了X3J11委员会，开发了一种新的标准，它在1989年被正式使用，这种新型标准（ANSI C）不仅定义了语言而且还定义了基础的C语言库，国际标准化组织采用了在1990年一种C语言标准（ISO C）。ISO C与ANSI C本质上是一样的标准。ANSI&#x2F;ISO标准的最后一种版本通常被称作<em><strong>C89</strong></em>（因为那是ANSI同意的时候）或者<em><strong>C90</strong></em>（那是ISO同意的时候），而且因为ANSI版本是先推出的，人们更经常用的是ANSI C。</p>\n<p>这个协会有几项指导准则，可能最有趣的就是这一项：保持C语言的精神<br>委员会在阐述这种精神的时候列出了以下的几点。</p>\n<ul>\n<li>相信编程人员。</li>\n<li>不要阻止编程人员做需要做的事情。</li>\n<li>保证简单、小型地使用这种语言。</li>\n<li>一项操作只提供一种方式。</li>\n<li>即使传输性会下降，也要尽力让C语言程序运行变快。</li>\n</ul>\n<p>在最后一点中，委员会的意思是实例必须界定一种对于目标电脑的运转最好的操作，而不是试着强加抽象的、统一的定义。在学习语言的同时，你也会体会到这种哲学的。</p>\n<h2 id=\"C99标准\"><a href=\"#C99标准\" class=\"headerlink\" title=\"C99标准\"></a>C99标准</h2><p>在1994年，他们开始重新审视这个标准，这也导致了C99标准的产生，一个ASIO&#x2F;ISO联合委员会，也被称作<em><strong>C9X</strong></em>委员会批准了C90标准的准则，包括保持语言的小型与简洁，委员会的目的并不是向语言中添加新的特性，而是按需去达到新的目标。其中一个主要目标就是，通过比如提供解决国际字符集的方法，来支持国际编程。另一个目标就是“把现存的实践编程化来解决明显的缺陷”。因此，当在达成把C语言移植到64位的处理器上的需要时，委员会 以在真实生活中应对过这种问题的人的经验为基础来添加标准。第三个目标就是改善C语言执行科学与工程项目时做关键数字运算时的合适度。</p>\n<p>这三点-国际化，纠正缺陷与对于计算可用度的改善是最主要的以改变为方向的目标，其他的改变计划自然更加保守，例如，把与C90与C++的不协调降到最低，并且让这个语言概念上是简洁的。用委员会人员的话来说，“委员会在让C++变得更加重要，更加有发展动力。</p>\n<p>C99改变的结果，就是它保持了C语言的必要的基本特征，C语言仍然是一个小型的，简洁并高效的语言，这本书指出了很多C99的变化，因为现在的大多数编译器还没有完全实现所有的C99的改变，你可能会发现有些在你的系统上不能实施，或者你会发现一些C99特征只有你改变了一些编译器的设置才可以实现。</p>\n<p>#注意<br>这本书将会使用ISO&#x2F;ANSI C这些词来表示这些特征来表示均为两种标准均适用的特征，使用C99来指明新的特征。偶然的，当一种特性是第一次加入C语言时，它也指C90标准。 </p>\n<h1 id=\"1-9-本书的组织架构\"><a href=\"#1-9-本书的组织架构\" class=\"headerlink\" title=\"1.9 本书的组织架构\"></a>1.9 本书的组织架构</h1><p>组织信息的方式有很多。其中一种最直接的方式就是把每一个话题的所有相关信息全部列出来，这对于参考书是极其实用的，因为你就可以在一个地方找到所有关于给定主题的信息。但是它对于学习项目并不是最好的顺序。例如，如果你从开始学习名词开始学习英语，你的表达能力就会被严重地限制。当然，学习好了名词你随便找到某个东西就能说出它的名字，但是如果你能够学一些名词、动词、形容词等等，还有一些关于这些部分如何相互连接的规则，你就会有更大的能力来表达自己。</p>\n<p>为了让你能够更均衡地消化信息，这本书使用了一种螺旋上升的方式，在初期的时候先提到这个主题，然后在后文给予更充分的讨论。例如，对于理解C语言，理解函数是极其关键的，因此，在前面的几章就会包括对于函数的一些讲述，以便于你能够在第九章全面讲述函数的时候，已经能够使用函数获得到一些轻松了。相似的早期的篇章也会预先讲述字符串和循环，那样你就可以在还没有细致地地了解它们之前，在你的程序中先使用那些有用的工具。</p>\n<h1 id=\"1-10-例子的使用\"><a href=\"#1-10-例子的使用\" class=\"headerlink\" title=\"1.10 例子的使用\"></a>1.10 例子的使用</h1><p>我们已经差不多要开始学习C语言了，这一单元已经包括了我们在陈述材料的时候的一些例子了。</p>\n<h2 id=\"字体-Typeface\"><a href=\"#字体-Typeface\" class=\"headerlink\" title=\"字体 Typeface\"></a>字体 Typeface</h2><p>对于呈现文字的程序与电脑的输入输出，我们使用你很可能在屏幕上或者在输出的时候看到的相似的字体。我们已经使用过几次了。为了防止你没有注意到，字体看起来是下面这样的</p>\n<p><img src=\"/img/typeface.png\" alt=\"字体示例\"></p>\n<p>相同的等宽字体也被用作是与编程相关的词汇，比如<code>main()</code>，也用作文件名，比如<code>stdio.h</code>，对于用来替换特殊词汇的占位字符，我们是用斜体的等宽字符来写的，比如下面的描述。<br><em>type_name variable_name;</em><br>例如，你有可能用<em>type_name</em>来替换<code>int</code>，用<em>variable_name</em>来替换<em>zebra_count</em></p>\n<h2 id=\"程序输出-Program-Output\"><a href=\"#程序输出-Program-Output\" class=\"headerlink\" title=\"程序输出 Program Output\"></a>程序输出 Program Output</h2><p>电脑中的输出是以与我们书中相同的形式被印出来的，但输入是以粗体字被显示出来的。例如，下面就是在14章“结构体与其他数据类型”中的输出。</p>\n<p><img src=\"/img/output.png\" alt=\"输出示例\"></p>\n<p>以正常电脑字体打印出来的是程序的输出，黑体字是用户的输入。<br>你与你的电脑交互的方式有很多，我们假设你是用键盘在键入指令的，在屏幕上阅读反馈。</p>\n<h2 id=\"特别的按键-Special-Keystrokes\"><a href=\"#特别的按键-Special-Keystrokes\" class=\"headerlink\" title=\"特别的按键 Special Keystrokes\"></a>特别的按键 Special Keystrokes</h2><p>通常，你会通过一个标签为Enter的按键，c&#x2F;r，返回或者其他的方式输入一行指令，我们在文中称这些按键为<em><strong>Enter key</strong></em>，自然也就会默认你会在每一行输入之后按下Enter键。然而，为了阐明特定的观点，一些例子可能会明示出Enter键，以[enter]的形式来呈现它，这个括号就表示你需要按下一个按键而不是打字<strong>enter</strong>。</p>\n<p>控制字符中的特殊按键，比如CTRL+D，这种标记指在你按下Ctrl标志的按键（或者可能是Control）时按下D键。</p>\n<h2 id=\"准备学习这本书使用的系统\"><a href=\"#准备学习这本书使用的系统\" class=\"headerlink\" title=\"准备学习这本书使用的系统\"></a>准备学习这本书使用的系统</h2><h2 id=\"Systems-Used-in-Prepare-This-Book\"><a href=\"#Systems-Used-in-Prepare-This-Book\" class=\"headerlink\" title=\"Systems Used in Prepare This Book\"></a>Systems Used in Prepare This Book</h2><p>C语言的一些部分，比如储存数字时使用的空间，是取决于系统的。当我们举例子并且指的是我们的系统，“我们提的是一台在WinXP专业版下有奔腾处理器的电脑，并且使用Metrowork的CodeWarrior开发工作室9.2版本和微软的Visual C++ 7.1（这个版本Microsoft Visual Studio .NET 2003也开发完成）,或者gcc 3.3.3。在编写的时候，对C99的支持并不完全，而且没有编译器能够支持C99的全部特性。但是，在它们之间，这些编译器已经包含了许多的新标准下的东西了。大多数实例是在Mac G4上通过Metrowerks CodeWarrior Development Studio 9.2来测试的。</p>\n<p>这本书有的时候也参考在Unix系统中运行的结果，Unix系统是在Berkley’s BSD 4.3 version的Unix系统中，在VAX 11&#x2F;750电脑上运行的。而且，一些程序也是在Linux系统下使用gcc 3.3.1与Comeau 4.3.3在奔腾处理器的电脑上测试的。</p>\n<p>样本代码，对于在这本书中陈述的完整程序是可以在Sams网址 (<a href=\"http://www.samspublishing.com/\">www.samspublishing.com</a>) 中找到的，搜索这本书的ISBN号（不带连字号）就会显示这本书的昵称，点击昵称，进入网址，你就可以下载代码了。你还可以在这个网站上找到编程训练的解决方法。</p>\n<h2 id=\"你的系统-你需要的-Your-System\"><a href=\"#你的系统-你需要的-Your-System\" class=\"headerlink\" title=\"你的系统-你需要的 Your System\"></a>你的系统-你需要的 Your System</h2><p>你需要有一个C语言编译器，或者至少可以使用一个。C可以在很多中电脑中运行，所以你有很多的选择。一定要确保使用的编译器是专门为了你的系统而设计的。这本书中的一些实例需要C99标准支持，但是大多数实例在C90标准下的编译器都是可以运行的。如果你使用的是在ANSI&#x2F;ISO标准之前的，你就需要做出一些调整了，很可能得通常鼓励你去找寻些新的东西了。</p>\n<p>大多数编译器的供应商会为学生与教育者特价，如果你是那类人，那就看看供应商的网站。</p>\n<h2 id=\"特殊元素-Special-Element\"><a href=\"#特殊元素-Special-Element\" class=\"headerlink\" title=\"特殊元素 Special Element\"></a>特殊元素 Special Element</h2><p>这本书包含了几部分特殊元素，强调了特别的重点：补充、建议、警告、笔记。</p>\n<p><img src=\"/img/four_kinds.png\" alt=\"四种特殊信息类型\"></p>\n<ul>\n<li>Sidebar(补充)<br>  为阐明内容提供了更深刻的见解或者更多的背景信息</li>\n<li>Tip(建议)<br>  对于特定的编程情况提供了简短，使用的建议。</li>\n<li>Caution(警告)<br>  警告潜在的陷阱</li>\n<li>Note(笔记？)<br>  提供了综合的注释，不符合其他的特殊类型的信息。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>C语言是一种强大、简洁的编程语言。<br>因为提供了使用的编程工具、对于硬件设备的控制良好，<br>并且是最容易从一种设备传输到另一种设备的语言，<br>它受到很多人的欢迎。</p>\n<p>C语言是一种编译型的语言，<br>需要C语言编译器与连接器来把C语言源代码转化成可执行程序。</p>\n<p>C语言的编程可能是费力、困难甚至令人沮丧的，<br>但是它也可以是有趣的、令人振奋与满足的。<br>我们希望你能够像我们一样找到C语言的乐趣与魅力。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><p>你会在<strong>附录A-回顾问题答案</strong>中找到问题的答案。<br>(以下为我本人的想法)</p>\n<p>1.在编程中，<em><strong>传输性</strong></em>指的是什么?<br>    编程得到的文件在不同类型的操作系统中几乎不需要修改或者只需要修改一点就可以顺利地进行转移。<br>2.解释源码文件、目标代码文件与可执行文件。<br>    源码文件是我们通过编辑器输入的代码，目标代码文件是源码文件经过编译器处理之后生成的包含库文件函数声明与我们输入的代码的机器语言翻译的文件，一般是asm的汇编文件或者obj，不具有执行的能力。<br>    可执行文件是把库文件与目标代码文件结合起来之后翻译成的最终文件，它包含了程序运行需要的一切函数声明、变量、指令的翻译。<br>3.编程的七步走。<br>    首先在纸上想这个问题可以怎么解决，然后结合具体的语言来想实现方法，然后写代码，然后编译，然后运行，然后检查正误，进行修改与调试。<br>    ×<br>    第一步，明确程序目的，你想要程序做什么<br>    第二步，设计程序，包括目标人群，用户界面与交互方式，实现时间，数据处理方式<br>    第三步，使用C语言知识写代码<br>    第四步，编译<br>    第五步，运行程序<br>    第六步，通过输出过程量等方法来调试，输入多个值来测试。<br>    第七步，维护与修改程序。<br>4.编译器做了什么工作？<br>    把源码文件中你输入的代码转变为机器语言。<br>5.连接器做了什么工作。<br>    把你代码中缺少的库函数内容补充完整，并且针对系统添加起始代码。</p>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>我们现在还不期望你开始写C语言代码，所以这一次锻炼就集中于编程过程的早期阶段吧。</p>\n<p>1.你被MacroMusic公司录取了，这个公司正在进入欧洲市场，想要一个能够把英尺换算成厘米的程序（1 inch &#x3D; 2.54cm）公司想要让这个程序能够提示使用者去输入一个英尺值，你的任务就是找出这个程序的目的，并且设计这个程序。</p>\n<p>程序目的：我想要设计一个通过乘除法来把输入的数值变作2.54倍的程序，输入是英尺值，2.54倍是厘米值。</p>\n<p>程序设计：<br>首先输出一行：请输入英尺值<br>然后向用户获取输入值。<br>接着经过把值 * 2.54来获取厘米值<br>然后在屏幕上输出数值。</p>\n<p>交互方式就是输入输出，因为目标人群是欧洲人，所以需要英语，需要更多的UI设计等。</p>\n<blockquote>\n<p>END..</p>\n</blockquote>"},{"title":"C premier plus Chapter 2","date":"2023-11-28T04:36:23.000Z","_content":"\n# 第二章 C语言介绍\n\n> **你将会在这一章学到**\n> \t1.赋值运算符\n> \t2.函数main()与printf()\n> \t3.一个简单C语言程序的构成\n> \t4.创造整型变量，赋值并在屏幕上显示它们的值\n> \t5.换行符`'\\n'`\n> \t6.如何在程序中添加注释，让你的程序中同时拥有多个函数\n> \t\t并能找出程序中的错误。\n> \t7.关键字是什么\n\nC语言的程序是什么样子的？如果你大体浏览过这本书，你会看到很多的例子的。几乎一致的是，你会觉得C语言程序看起来很怪异，有些需要用到类似`{，cp->tort,*ptr`这样的符号。随着你通读完这本书，你就会慢慢觉得这些符号不是那么陌生了，会变得更加熟悉，甚至有可能会很高兴遇见它们。在这一章中，我们从给出并解释一个简单的实例起步。同时，我们也会强调一些C语言的基本特征。\n\n# 2.1 一个简单的例子\n\n让我们先研究一个简单的C语言程序。在图2.1展示的这个程序，专门为了突出一些C语言编程的特征。在你将要读接下来对于程序的逐行解释之前，先看看图2.1，试试你是不是能够靠自己搞明白它会做什么事情。\n![小例子](/img/example.png)\n>1.#include <stdio.h> 包含头文件\n>2.int main(void) 定义一个返回值为整数，输入值为空的主函数\n>{\n>\tint num; 定义一个名为num的整型变量\n>\tnum = 1; 给num赋值1\n>\t\n> \tprintf(\"I am a simple \"); 输出一行字\n> \tprintf(\"computer. \\n\");\n> \t输出一个词，接在刚才的一句话之后，并换行\n> \tprintf(\"My favorite number is %d because it is first.\\n\",num);\n> \treturn 0; 返回值0，表示结束。\n>}\n>\n>注释中的三个部分：1.定义变量 2.赋值 3.使用函数\n\n如果你认为这个函数将会在你的屏幕上打印一些东西。是的，你是对的。但对于明确的什么东西将会被打印到屏幕上可能并不明显，所以我们运行这个程序，看看会发生什么。\n+ 第一步，使用你最喜欢的编辑器\n\t或者你的编译器中最喜欢的编辑器\n+ 第二步，创造一个包括了图2.1中文本的文件，\n\t并且以`.c`为结尾，从而满足你的系统对于文件名的需要。\n\t举个例子`first.c`就是合法的名称。\n+ 第三步，编译并运行程序。\n\t查看第一章来得知这方面的详细过程。\n\n如果一切都运转良好的话，你会在屏幕上看到这样的输出。\n![输出](/img/输出.png)\n\n总之，这个结果并不是很惊人，但是`\\n`与`%d`的作用是什么呢？\n程序中有几行也看起来很陌生，这就到解释的时候了。\n\n# 2.2 解释这个例子\n\n我们会对这个例子解释两遍，第一遍（Pass1：速览大纲），强调了每一行的意义，从而你能够大体上得知发生了什么。第二遍（Pass2：程序细节），探索了特定部分的含义，并且给出了细节以便你能够更深刻地理解。\n\n图2.1总结了C语言程序的每一个部分，\n除了我们第一个例子使用的，它们还包含着更多要素与步骤。\n\n## Pass1：速览大纲：\n这一部分包括了对于程序每一行的简短解释。\n下一部分会更加充分地探索这些主题的内容。\n\n>#include <stdio.h> 包含另一个文件。\n\n这一行告诉编译器要从文件`stdio.h`中收集信息，这个文件是所有C语言编译器安装包的基础部分，提供了对于键盘输入与显示输出的支持。\n\n>int main(void) 一个函数名\n\n![对C语言程序的分析](/img/analysis.png)\n\nC语言包括一个或者多个***函数***，它是C语言程序的基本模块。这个程序由一个叫做`main`的函数组成，圆括号表示了`main()`是个函数的名字。`int`表明了`main()`函数会返回一个整数，`void`表明`main()`不会获取任何的参数，这些都是我们过会会深入研究的事情。现在，接受`void`与`int`是在ISO/ANSI标准下定义`main()`函数的方法（如果你有在ISO/ANSI标准之前的编译器，省略`void`就好，但你可能也想获取更新的版本来避免不协调。）\n\n> /* a simple program*/ 一条注释。\n\n`/*`与`*/`符号框定了一条能够帮助阐明一个程序的注释，它们是只为阅读者准备的，会被编译器忽略掉。\n\n>{    函数体的开头\n\n起始大括号`{`标志着函数中语句的开始，\n函数的定义由终止大括号`}`结束。\n\n> int num; 一个声明语句\n\n这个语句声明了你正在使用一个叫做`num`的变量，而且`num`会是`int`（integer-十进制整数）类型。\n\n> num = 1; 一个赋值语句\n\n这个语句`num = 1`把值`1`赋给叫做`num`的变量。\n\n> printf(\"I am a simple \"); 一个调用函数的语句\n\n第一句使用了`printf()`函数来在屏幕上显示`I am a simple `这句话，把光标留在了同一行。这里的`printf()`函数是标准C语言库的一部分。它被称作一个***函数***，而在程序中使用一个函数叫***调用函数***。\n\n> printf(\"computer.\\n\");  另一个函数调用语句\n\n第二次调用`printf()`函数是在上一句打印下来的话后面添加了`computer`，`\\n`符号是告诉电脑要另起一行-也就是说把光标移到下一行的起始。\n\n> printf(\"My favorite number is %d because it is first.\\n\");\n\n最后一次使用`printf()`是基于引用的语句把`num`的数值(1)打印到屏幕上，`%d`指示电脑从哪里，以什么方式输出`num`的数值。\n\n> return 0;\n\n一个C语言函数是可以提供，或者说***return(返回)***，一个数值\n\n> } 结束。\n\n正像说过的，程序以终止大括号结束。\n\n## Pass2：程序细节\n\n既然你已经大体了解了图2.1中的内容，我们要更详尽地研究一下它了。再一次，我们将会逐行地查看程序，为了能够培养一种更宏观的C语言编程视角，这一句我们会以每一行代码作为起点，然后一步步深入代码之后的细节。\n### # include **指示与头文件**\n#### # include <stdio.h>\n这是一个程序的开始行，**#include <stdio.h>** 的作用就和你把`stdio.h`中所有的内容都打字写在程序#include的位置是一样的。因此，这是一个剪切粘贴的操作，在共享对于很多程序都一样的信息上，**include**文件提供了一种便利的方式。\n\n`#include`语句是C语言**预处理指令**的一个范例。大体上，C语言编译器会在编译之前对于源码做一些准备工作，这在术语中称为***预处理***\n\n在大部分上，头文件包含着编译器制作最终的可执行文件需要使用的信息。例如，它们可能会定义一些常量或者声明一些函数的名字，与它们应该被怎样使用，但是库中函数真正的代码-编译前代码，不是在头文件中的。编译器的一部分-连接器会负责找到你需要的这一部分库代码。简单地说，头文件会帮助引导编译器来正确地把程序组装起来。\n\nISO/ANSI标准下的C语言必须提供头文件，有些程序需要包含`stdio.h`头文件，有些不需要。对于C语言实例的记录应该包含使用的C语言标准库函数的描述，这些函数描述就确认了需要什么头文件。例如对于`printf()`的描述就表明了需要使用`stdio.h`，省略恰当的头文件可能并不会影响特定的程序，但是最好不要依赖它。这本书每一次使用库函数时，我们都会为函数使用`include`来把ISO/ANSI标准制定的的文件包括在程序内。\n\n![为什么输入输出不是内建函数？](/img/original.png)\n\n为什么输入输出并不是内建函数？\n你有可能想知道为什么像输入输出这样基本的东西并不会被自动包含进程序中。一种回答是，并不是所有的程序都要使用I/O（input/output）包，而且C语言的哲学中也说到要避免承担不必要的重量。这个经济学上资源利用的准则让C语言受到嵌入式编程的欢迎-例如，为控制自动燃油系统编写代码。顺带一说，#include这一行甚至不是C语言的语句。#符号阐述了这一行是在编译器之前被预处理器处理的代码。你会在后面学习预处理指令时遇到很多例子，而且在第16章对这个主题还有更加充分的讲述。\n\n### `main`函数\n#### int main(void)\n程序的下一行声明了一个名字为`main`的函数，`main`是个挺普通的程序，但是它是唯一的选择。一个C语言程序（有些我们无需担心的例外），通常是以名叫`main`的函数开始运行的，其他函数的名字是可以随意选择的，但是作为一切的开端，`main`函数必须存在。那么圆括号呢？它们是为了确定`main()`是个函数，你会很快学习学到关于函数的更多内容。现在，记住这个函数是C语言程序的基础模块。\n\n`int`是`main()`函数的返回值类型，它意味着`main()`返回的数值种类必须是十进制整数(integer)。那么返回到哪里？返回到操作系统-我们会在第六章讨论循环的时候回到这个问题上来。\n\n跟随在函数名后面的圆括号大体上囊括了需要传递给函数的信息，举个简单的例子，没有东西被传递，那么这个括号就包含着`void`-空类型（在第11章，“字符指针与字符串函数”介绍了第二种从操作系统把信息传递给`main()`函数的形式）\n\n如果你查看过很久以前的C语言代码，你会经常看到程序是以下面的形式开始的:\n\n```C\nmain()\n```\n\nC90标准勉强地包容了这个形式，但是C99没有，所以即使你现在的编译器让你写成这个样子，不要听。\n\n下面是另一种你可能会看见的形式\n\n```C\nvoid main()\n```\n\n有一些编译器是允许这样写的，但是没有一个标准把它列为一种选择，\n因此，编译器也没有必要接受这个形式，有几种确实也没有。再一次，坚守标准的形式，你就不会在更换编译器的时候陷入困境。\n\n### 注释\n\n```C\n/*a simple program*/\n```\n\n这一部分由/ *  * /符号框定起来的内容就是注释，使用注释可以让一些人（包括你自己）更好地理解你的程序。C语言的一个很好的特点就是注释可以放在任何地方，甚至与它们解释的“原文内容”放在一行。长一点的知识可以放在一行甚至延伸至多行，以/ * 开始并以 * /结束的内容都会被编译器忽略。下面是注释的合法与非法写法。\n\n![注释示例](/img/comment.png)\n# 翻译\n>（1.这是一行C语言注释）\n>（2.这个注释延伸到了两行）\n>（3.你也可以这样做）\n>（4.但是这是不合法的因为没有结束符号）\n\nC99添加了注释的另一种形式，它在C++与Java中很受欢迎，这种新形式使用`//`符号来生成只在一行内的注释。\n\n![新形式](/img/newform.png)\n\n因为一行的结束标志这这行注释的结束，这种方式需要在注释开始的时候添加注释符号。\n\n新形式的出现是为了响应旧形式的潜在问题，假设你有下面的代码。\n\n![我希望这可以运行...](/img/ihope.png)\n\n下一次，我推断你要删除第四行\n然后意外地把第三行删掉了，\n然后这代码就会变成这个样子\n\n![哦不...](/img/hopeagain.png)\n\n现在编译器把第一行的起始符与第四行的结束符进行配对，结果使这四行全部成为了注释，包括那本应该是代码的一部分的一行。因为`//`并不会延伸到另一行，它不会引起代码的“消失”。\n\n一些编译器有可能并不支持C99的这个特点，还有些有可能需要改变一些编译器的设置才能够应用C99的特性。\n\n### 大括号、函数体与代码块\n\n```C\n{\n...\n}\n```\n\n在图2.1，大括号划定了`main()`的界限。大体上，所有的C语言函数都需要使用大括号来标志着函数体的起始与结束。它们是必须出现的，所以一定不要漏了。只有大括号是起这个作用的，不要使用圆括号或者中括号。\n\n大括号还可以被用来把语句聚集在一个函数中，形成一个单元或者语句块。如果你对于Pascal，ADA，Modula-2或者Algol熟悉的话，你就会意识到大括号划定起始与结束在这些语言里也是相似的。\n\n### 声明\n\n```C\nint num;\n```\n\n程序的这一行术语中称为***声明语句***，声明语句是C语言的其中一个最重要的特点。这个特例声明了两件事，一是在函数的某一个部分有一个叫`num`的变量（好好笑啊哈哈，在那遥远的函数中，有个小变量。）第二，`int`声明了`num`是一个十进制整数-也就是说，没有十进制小数点。（`int`是***数据类型***的一个例子），编译器使用这些信息为`num`变量准备合适的内存空间。结尾的分号标志了这一行是C语言的语句或者指令。分号也是这个语句的一部分，并不只是像在Pascal里的语句之间的分隔符。\n\nC语言中，`int`是一个确定了一种数据类型的*关键字*，关键字是我们用来表达语言的单词，而且你不能把它们强占用于其他目的。例如，你不能把`int`作为函数或者是变量的名称。这些限制在语言之外就会失去作用，反而你把一只猫或者你最喜欢的孩子叫做`int`是没有问题的。（除非本地官员或者法律不准用这个名字）。\n\n`num`是*标识符*的一个例子，也就是你为变量、函数或者其他实型取的名字。从而声明把特定的标识符与电脑的特定的内存区联系在了一起，而且它也建立了信息的类型，或者说数据的类型，来放在那个区域里。\n\n在C语言中，*所有的*变量都需要在被使用之前先*声明*，这也就意味着你必须对于所有在一个程序中使用的变量列出包括数据类型的声明。人们也认为声明变量是一个优秀的编程技巧，而且，在C语言中，它是必须进行的。\n\n通常来说，C语言要求在代码块的起始部分声明变量，而且其他的语句是不允许放在这之前的。也就是说，`main()`函数的函数体会是这个样子。\n\n![传统方式](/img/tradition.png)\n\n\nC99标准学习了C++的时间，现在可以让你在代码块的任何地方声明变量。然而，你还是需要在第一次使用变量之前声明它。所以如果你的编译器支持的话，你就可以像下面这样写：\n\n![C99新方式(1)](/img/C99.png)\n![C99新方式(2)](/img/C992.png)\n\n为了能够和更旧的系统兼容，这本书还是会坚持原来的标准。（一些更新的编译器只有当你设置之后才会支持C99的特点）。\n\n就此，你很可能有三个问题：\n+ 1.数据类型是什么？\n+ 2.在取名的时候我们可以怎么选择？\n+ 3.为什么你需要把变量全部声明出来。\n那就让我们探究这些问题的答案吧。\n\n### 数据类型\n\nC语言主要处理的是这几种数据：十进制整数、字符、浮点数，仅举几例。声明一个整型或者字符类型变量可以使电脑恰当地储存、抓取与翻译数据。你会在下一章研究到更多可用的数据类型。\n\n### 名字的选择\n\n你应该为变量使用有意义的名字（像是`sheep_count`而不是`x3`如果你的程序是数羊的），如果名字不能达到表意的需求，那么就使用注释来解释变量代表了什么。以这种方式为程序做记录是其中一种优秀的编程技巧。\n\n你可以使用的字符要视实际情况而定。C99标准要求不多于63个字符，除非是外部的标识符。（在第12章“内存分级、链接性与储存管理”中会提到），相比于分别只能识别31个字符与6个字符的C90，这是一个巨大的提升，而且老的C语言编译器最多只能接受8个字符。事实上你可以使用更多的字符的，但是编译器会忽略它们。因此，当一个系统有着8个字符的限制时，`shakespeare`与`shakespencil`就会被认为是一样的了，因为它们的前八个字符是一样的。（如果你想要63个字符的例子，可以自己造一个）。\n\n你可以在大写字母、小写字母与下划线之间任意选择。第一个字符必须是一个字母或者一个下划线。下面是一些示范。\n![示范](/img/valid.png)\n操作系统与C语言标准库通常会使用1或2个下划线字符，比如`_kcab`，所以最好避免自己使用它。以一个或者两个下划线字符开始的，标准的标签，比如库中的标识符，会被***储存***起来，也就是说，即使使用它们作为名字并没有任何的语义错误，它是会造成一些名字冲突的。\n\nC的标识符是***区分大小写***的，也就意味着大学字母是被看做与对应的小写字母字符不同的。因此，`stars`与`Stars`和`STARS`是不同的。\n\n为了让C语言能够更加国际化，C99使用通用字符名称机制(UCN)进行了巨大的扩充，在附录B中的参考单元VII“更广大的字符支持”，我们讨论了这些加入的部分。\n\n### 声明变量的四个好处\n\n一些年代更远的语言，比如FORTRAN与BASIC语言的原型版本，可以让你在没有声明的情况下使用变量。那么为什么我们不能在C语言中使用这种简单易行的方法呢？这里就是一些原因：\n+ 把所有的变量放在一个地方能够让阅读者更容易地知道程序是关于什么的。这点好处在你给变量取有意义的名称的时候尤其明显，（就像`taxrate`与`r`），如果名字不能达意就使用注释来解释，以这种方式给程序做记录是一种良好的编程技巧。\n+ 通过思考声明变量是为了什么鼓励你全心投入地去写程序之前做一些准备。程序开始需要什么类型的信息？我到底想要程序输出什么？呈现数据的最好方式是什么？\n+ 声明变量有助于我们预防编程中更多难以发现又狡猾的错误之一-也就是拼错了变量的名字。举个例子，假设在一些没有声明的语言中，你写下了这个语句。\n\n```C\nradius1 = 20.4;\n```\n\n然后在另一个地方，你拼错了变量名。\n\n```C\n> circum = 6.28 * radiusl;\n```\n\n你无意地把数字`1`换成了`l`，那种语言也会创造一个`radiusl`的变量，然后用未知的值（或许是0，或许是垃圾值），`circum`就会被给予一个错误的值，而且你可能需要极其多的时间来搞清楚为什么，这在C语言是不可能出现的（除非你确实是笨到家了去定义两个这样相似的变量名），因为编译器会在radiusl出现的时候报错。\n\n+ 如果你不声明变量的话，你的C语言程序是不会进行编译的。如果先前的原因没有动摇你的话，对于这一点你可就得好好想想了。\n\n既然你需要声明需要使用的变量，它们会到哪里呢？就像上文提过的，C语言在C99之前就要求声明需要在代码块之前完成，遵循这种把声明放在一起的做法，你就可以更容易地得知程序正在做什么。当然，把你的声明分布在各个地方也是有好处的，正像现在C99所允许的。这也就是在你赋值之前先声明变量。那让你更难以忘记给他们赋值。作为关键性的事情，许多的编译器还不支持C99的这个规则。\n\n### 赋值\n```C\nnum = 1;\n```\n\n下一行的程序是一个***赋值语句***，C语言中的其中一种基础运算。这个例子的意思是“把值`1`赋给变量`num`，之前的`int num`”这一行在电脑内存中为`num`分配了空间，这一行也就在这个空间中储存值。如果想要的的话你可以过会给`num`赋另一个值，那也就是`num`被叫做***变量***的原因。需要注意的是赋值语句会把值从右边到左边传递。\n同时，这一句也是以分号结尾的，就像图2.2中显示的。\n![赋值图示](/img/assignment.png)\n\n## `printf()`函数\n\n```C\nprintf(\"I am a simple \");\nprintf(\"computer.\\n\");\nprintf(\"My favorite number is %d because it is first.\\n\",num);\n```\n这些行使用了一个C标准库中叫`printf`的函数，圆括号表明了`printf`是一个函数的名字，在圆括号之中的内容就是`main()`函数向`printf()`函数传递的信息。例如，第一行就传递了这句话 `I am a simple`这样的信息叫做***参数***，或者更加充分地，叫做函数的***实际参数***（见图2.3），那么`printf()`函数会对对这种语句做些什么呢？它会抓取在双引号之间的一切，然后把文本打印在屏幕上。\n\n![函数调用](/img/calling.png)\n\n第一行`printf()`是你调用函数的一个很好的例子，你只需要打字写下函数的名称，把需要的参数放在圆括号内。当程序运行到这一行时，控制流就转换到已经定义的函数（在这个例子中是`printf()`）中，然后当函数已经完成了它需要做的事情之后，控制流就又回到原来的（***调用***）函数-在这个例子中是`main()`。\n\n下一行的`printf`呢？它在引号中包含了`\\n`这个字符，而且它并没有被打印下来？发生了什么？`\\n`的作用其实是另起一行，`\\n`的组合体（打印下来是两个字符）就组成了`\\n`这个叫***换行符***的新字符。对于`printf()`它意味着“在左下角再起一行”。也就是说，打印换行符和你在常规键盘上按下`enter`键的作用是差不多的。那么为什么不在打字写`printf`的时候用`Enter`键呢？那是因为因为那只会被认为是对于你的编译器的即时的指令，而不是对于源码的指令，也就是说，当你按下`enter`键时编辑器会退出当前的行，然后另起一行。换行符，影响着程序是如何显示的。\n\n换行符是***转义字符***的范例，***转义字符***是用来呈现难以或者几乎不能通过打印显示出来的字符的。其他的还有`\\t`对应着`Tab`、`\\b`对应着`Backspace`，每一个转义字符都会由`\\`来起始，我们会在第三章：C语言与数据再回到这个话题深入研究。\n\n这也就解释了为什么三个`printf`却只有两行文字了，第一个`printf()`命令没有换行符，但是第二个与第三个是有的。\n\n最后的`printf()`又带来了另外一个异样的地方：当这行文字被打印的时候`%d`发生了什么？你应该还记得，输出是这个样子的。\n\n```Bash\nMy favorite number is 1 because it is first.\n```\n啊哈，当被打印出来的时候，数字`1`就是`%d`的替换物，而且变量`num`的值就是`1`，`%d`是展示`num`的值在什么时候被打印的占位符，这一行与下面的BASIC语句是相似的：\n\n```BASIC\nPRINT \"My favorite number is \"; num; because it is first.\"\n```\n事实上，C语言的版本比这个做的工作还要多一点，`%`告诉程序有一个变量需要在这个区域被输出，`d`表达了要把这个变量以十进制整数的方式输出。`printf`还可以以其他变量形式进行输出，包括十六进制数、带有十进制小数点的数。事实上，`printf()`中的`f`表明了它是一个***格式化***打印函数。每种数据类型都有自己的指示符，这本书也会在介绍新的数据类型的同时引入对应的指示符。\n\n### 返回语句\n```C\nreturn 0;\n```\n\n返回语句是这个程序的最后一个语句，在`int main(void)`中的`int`意味着`main()`函数应该返回一个十进制整数。`main()`函数这样返回是C语言标准要求的。返回值的C语言函数都会使用return语句来进行这个操作，return语句包含着关键字`return`与返回的值，以一个分号结束。如果你遗漏了这一句，大多数编译器会报错，但是它们仍然会对程序进行编译。这样的话，你可以把return语句看成为了增加逻辑的连贯性的东西，但是它对于一些操作系统是由实际用处的，包括DOS和Unix，我们在第11章会更深入地对于这个话题给出解释。\n\n# 2.3 简单程序的结构\n\n既然你已经看过了具体的例子，你已经准备好了解C语言程序的一些基本规则了。***程序***由包含一个函数或者多个函数的组组成，其中一个必须叫`main()`对于函数的描述包括函数头与函数体，***函数头***包括预处理语句，如`#include`，与函数的名字。你可以通过看圆括号的方式来得知这是个函数，即使圆括号可能是空的。***函数体***是由大括号框定的，它包括了一系列的语句，每一个都是由一个分号结尾的（见图2.4）。在例子中有***声明语句***，它是用来声明变量的类型与名字的，还有***赋值语句***，它给予变量一个值。然后还有三个***print语句***，每一个都调用了`printf()`函数，这些print语句是***函数调用语句***的一些示范。最后`main()`函数以返回值结束。\n\n简单来说，一个简单的、标准的C语言程序应该使用下面的格式。\n![图2.4](/img/function1.png)\n![标准格式](/img/structure.png)\n\n# 2.4 可读性建议\n\n使你的程序变得更可读是一种优秀的编程实践。可读性高的程序很容易理解，也就很容易去修改、纠正。让一个程序变得可读的过程也帮助你理清你对于程序执行自己的概念。\n\n你已经看过两种可以增加可读性的技巧了：选择变量名与使用注释。注意这两种技巧是相互补充的。如果你给一个变量注名`width`，你就不需要对于这个变量表示什么做任何解释了。但是叫做`video_routine_4`的变量就需要对于video routine 4的解释。\n\n另一个技巧是使用空行来分隔函数中的概念模块。例如，简单的实例程序就使用了空行分开了声明部分与行动部分。C语言不需要空行，但是它能够提高可读性。\n\n第四个技巧就是每行使用一个语句。再一次，这是一个针对于可读性的惯例，并不是C语言的要求。C语言的格式是***形式自由***的，你可以把几句话放在一行或者一直延伸到第二行。下面的代码是合法的，但是看起来很丑。\n![丑](/img/poorreadability.png)\n分号向编译器指示了一个语句什么时候结束和下一句什么时候开始。但是如果你能够遵从这种在本章的例子中使用的传统手法，程序的逻辑会清晰很多。（见图2.5）\n![可读性规范](/img/readable.png)\n\n# 2.5 更进一步\n\n我们的第一个C语言例子还是很简单的，接下来的图2.2就是第二个例子，但也并不是非常难。\n\n![例子](/img/example2.png)\n\n新在哪里呢？代码中提供了对于程序的描述（在注释中），声明了很多变量，做了一些乘法运算，然后把这两个变量的值打印下来，让我们把这些点深入地了解一下。\n\n## 记录 Documentation\n\n第一，程序是以注释开始的（使用的是新的注释形式），它确定了文件名与程序的目的。这种程序的记录只花费一分钟就可以做，而且之后会在你浏览多个文件并打印它们的时候起到很大帮助。\n\n## 多行声明 Multiple Declarations\n\n然后，程序在一行中声明了两个而不是一个变量。为了达成这个目的，可以把两个变量（`feet`与`fathoms`）的声明使用一个逗号隔开，也就是下面这样。\n\n```C\nint feet, fathoms;\n```\n\n它和下面的形式是等价的。\n\n```C\nint feet;\nint fathoms;\n```\n\n## 运算 Multiplication\n\n第三步，程序进行运算，它利用了计算机系统庞大的算力来计算2乘6。\n在C语言中，同样也在很多语言中，`*`是乘法运算的符号。\n因此，下面的语句：\n\n```C\nfeet = 6 * fathoms;\n```\n\n它的意思就是：查看`fathoms`的值，乘以6，然后把这个运算的结果的值赋给变量`feet`。\n\n## 打印多个值 Printing Multiple Values\n\n最终，程序更多样地使用了`printf()`如果你编译运行过这个例子，输出应该是这个样子的。\n\n```Bash\nThere are 12 feet in 2 fathoms！\nYes, I said 12 feet!\n```\n\n这一次，代码在第一次使用`printf()`的时候，使用了两次替代符，在双引号中的第一个`%d`被在后面引用列表的第一个变量的值替换了(`feet`)然后第二个`%d`被第二个变量代替了。要注意的是待打印变量列表是在双引号部分后面，另外也注意每一个都是用括号分开的。\n\n第二次使用`printf()`表明了打印的值并不一定是变量的，只是必须要指定一个值，就像`6 * fathoms`这样，可以是恰当类型的值。\n\n这个程序受篇幅不长，但是它可以呈现把fathoms转换到feet的核心。我们需要的就是动态地去赋其他的值给`feet`我们会在以后的章节解释如何做。\n\n# 2.6 顺便一提：多重函数\n\n目前为止，这些程序已经使用过了基本的`printf()`函数。图2.3向你展示了如何把自己的函数-除了`main()`以外的函数-加到程序里。\n\n![两个函数的程序](/img/twofunc.png)\n\n输出是这个样子的。\n\n```Bash\nI will summon the butler function.\nYou rang, sir?\nYes,Bring me some tea and writeable CD-ROMS.\n```\n\n`butler()`函数在程序中出现了三次，第一次出现是在***原型***中，那告诉了编译器要使用的函数。第二次出现是在`main()`函数中，在***函数调用***中出现，最终，程序呈现了***函数的定义***过程，那是函数本身的源码。让我们再来看看这三次出现。\n\nC90标准添加了原型，老翻译器可能并不能识别它们（我们将会讲到当你使用那种编译器的时候要怎么做。）原型就是一种告诉编译器你正在使用一个特定的函数的声明。它也指定了函数的属性。例如，`butler()`函数的第一个词`void`指明了它没有返回值。（大体上，函数可以为了使用值而返回这些值，但`butler`没有），第二个`void`-在`butler(void)`-的意思是它没有参数。因此，当编译到达`main()`函数中`butler`被使用的这一行时，它会检查是否`butler`是被恰当地使用的。需要注意，`void`是被用来表示empty（空），而不是invalid（不合法、无效）。\n\n早先的C语言支持的函数声明类型有限，那时你只能定下返回值的类型，但是对于参数的描述就被省略。\n\n```C\nvoid butler();\n```\n\n那时的C语言代码使用的函数声明就像是上述的样子，而不是函数原型，C90与C99标准都能够辨认出这种更老的形式，但是它们表示这种形式会随着时间被淘汰，所以不要用。如果你从一些更老的地方拿到了C语言代码，你有可能想要把老式的声明变成原型。以后的章节会回到原型制作、函数声明与返回值上。\n\n接下来，你通过给出`butler`的名字与圆括号来援引函数。（调用），当`butler`完成了它的工作，程序就会移向`main()`函数中的下一行。\n\n最终，函数`butler()`以与`main()`函数一样的形式被定义，有函数头与用大括号框定的函数体。函数头重复了你在原型中提供的信息：`butler`不使用信息，而且不返回值。对于老旧的编译器，省略第二个`void`。\n\n有一点需要注意的，就是在`main()`函数中`butler()`被调用的位置-而不是`butler()`函数被定义的位置-决定了`butler()`函数的运行位置。比如，你可以把`butler()`函数的定义放在`main()`函数的前面，程序还是会照旧那样把`butler()`放在两个`printf()`中间运行。记住，所有的C语言程序都是以`main()`函数开始的，无论`main()`函数在程序文件的什么位置。然而，C语言实际上是先把`main()`函数列出来，因为它通常提供了基本的程序框架。\n\nC语言标准建议你为所有你使用的函数提供原型，标准的`include`文件为标准库函数做这个工作，例如，在标准C语言下，`stdio.h`文件就有`printf()`函数的原型，第六章的最后一个例子会告诉你如何去更广泛地为非`void`的函数制作原型，第九章会全面地讲述函数。\n\n# 2.7 调试引入\n\n现在你已经可以写一个简单的C语言程序了，你有可能海域犯些简单的错误。程序的错误通常被叫做***bugs***，寻找与修复它们就叫做***调试***，图2.4就展现了有些bugs的程序，看看你是否能够找到。\n\n![找找吧，有几处？](/img/nogood.png)\n\n## 语法错误 Syntax Errors\n\n图2.4的例子犯了几个语法错误，当你没有遵循C语言的规则，你就会犯***语法错误***，这也可以类比到英语的语法错误。例如，思考一下这句话：***Bugs frustrate be can.*** 这句话使用的单词是正确的，但是并没有遵循单词顺序的规律，而且使用的单词形式也不太对，不管怎样，C语言的语法错误就是在错误的地方使用了正确的C语言标志。\n\n所以`nogood.c`这个程序究竟犯了什么错误呢？第一，它使用的是括号而不是大括号来标记函数体，也是把正确的C语言符号用在了错误的地方，第二，声明应该是这个样子的\n\n```C\n\tint n, n2, n3;\n```\n\n或者这样\n\n```C\n\tint n;\n\tint n2;\n\tint n3;\n```\n\n而且，这个例子遗漏了安置一条注释必须要使用的`*/`符号对（作为替换，你可以用`//`形式替换`/*`），最后，它遗漏了`printf()`后的本应作为语句结束标志的分号。\n\n你如何来检查语法错误呢？第一，在编译之前，浏览你的源码，看你是否看到一些明显的错误。第二，你可以检查编译器找到的错误，因为它的一部分工作就是检查语义错误。当你编译程序的时候，编译器会反馈找到的所有错误，并且会明确错误类型与出错的位置。\n\n然而，编译器有时也会混乱，实际上的一个区域内的语义错误有可能会让编译器错误地认为它找到了其他种类的错误。例如，因为这个例子没有恰当地声明`n2`与`n3`，所以编译器会认为它在被使用的地方找到了错误。事实上，与其试图一次把所有报告的错误修正过来，不如只修改一两个然后重新编译，这样的话有些其他种类的错误就会消失。继续这样做，直到程序正常运行。另一个常见的编译器“诡计”是它会在后面的行报错，但其实出错是在前面的行里。例如，编译器有可能直到下一行才能判断出上一行遗漏了分号。所以如果编译器报错说缺少分号，那么在这一行之前进行检查。\n\n## 语义错误 Semantic Errors\n\n语义错误是在意义上的错误，例如，思考这一句话: ***Furry inflation thinks greenly.***  语法上是正确的，因为形容词、名词、动词、还有副词都在合适的位置上，但这句话就是一派胡言。在C语言中，当你遵循了C语言的规则但是导致了不合适的结果，这个例子中就有这样的错误。\n\n```C\nn3 = n2 * n2;\n```\n\nn3本应该是用来展现`n`的3次方的，结果程序把它算成了`n`的4次方。编译器是检测不出来语义错误的，因为它们并不违背C语言的规则。编译器没有能力去猜测你程序的意图。那也就只能由你来找到这些种类的错误了。一种方式是把程序做的事情与程序应该做的事情进行对比。例如，假定你已经找到了例子中的语法错误，那么它现在看起来是这个图2.5样子的。\n\n![还是错的...](/img/stillbad.png)\n\n它的输出是\n\n```Bash\nn = 5, n squared = 25, n cubed = 625 \n```\n\n如果你可以口算立方的话，那么你就会注意到625是个错误的值。下一阶段就是找到你是如何陷入这个错误的。例如，你有可能会通过观察找到错误。大体上，然而你还需要一些系统的方法。一种方法是假装你是电脑，然后一步步地跟着程序走，让我们现在就尝试一下那个方法。\n\n程序体以声明三个变量`n1, n2与n3`开始，你可以通过画三个盒子并把它们各自标注名称来模拟这个情况。（看图2.6）然后，程序会把5赋给`n`，通过把数字5写在盒子里来模拟，然后，程序用`n`乘`n`然后把它的值赋给`n2`，所以看向盒子`n`，看着5乘5得到了25，然后把25放在盒子里。为了模拟下一句，也是同样，看向盒子2，然后用25乘25，然后把这个值给予`n3`，啊哈，你做乘法的时候使用的是`n`的平方而不是用`n`。\n\n嗯，有可能这个过程对于这个程序有点过了，但是以这种方式一步步地浏览程序总会是得知发生了什么最好的方法。\n\n## 程序状态\n\n通过手工地一步步地追踪程序，追踪每一个变量，你监视了程序的状态，**程序状态**就是所有变量在一个时间点上被给予的一组值。它是运算状态的快照。\n\n![追踪程序状态](/img/tracer.png)\n\n我们刚刚讨论了一种追踪程序状态的方法：通过自己一步一步地运行程序。在一个进行1000次迭代的程序中，你可能觉得并不能完成那个工作。然而，你还是可以经历一些迭代过程，看看你的程序是不是按你想要的方式来运行的。然而，通常是会有这种情况的，你会按照你想要的方式去“执行”它们，而不是真正把它们写下来，所以在写真正的代码的时候要努力做到正确。\n\n另一个方法就是通过在程序的自始至终放置几个`printf`语句来定位语义问题。在程序运行的关键点监测选定变量的数值。看看数值是怎么变化的可以让你知道正在发生什么。在你让程序按照你满意的方式运行之后，你就可以去掉多余的语句去重新编译了。\n\n第三种监测的方法就是使用调试器。***Debugger***是一种能够让你一步一步地运行程序并且查看程序变量的值的程序。它们使用的难易程度与复杂度都各有不同。更高级的编译器可以显示哪一行代码正在被运行。这对于多路径的程序是非常方便的，因为可以很容易地看到走的是哪一条路径。如果你的编译器中有调试器，那么花谢时间学学则呢么使用吧。比如像图2.4那样尝试使用它。\n\n# 2.8 关键字与内置标识符\n\n关键字就是C语言中的词汇，因为它们对于C语言是特别的，所以你不能把它们作为标识符来使用。有一些关键字分别了多种多样的类型，比如说`int`，其他的比如说`if`是被用来控制程序运行语句的顺序的。在以下的C语言关键字的列表中，黑体表示在ISO/ANSI C90标准下的关键字，斜体的是C99标准加入的新关键字\n\n![关键字](/img/keywords.png)\n\n如果你尝试把关键字用于变量的名字，编译器会把它识别为语法错误，还有其他的标识符，它们叫做***内建标识符***，你也是不应该使用的，他们不会导致语法错误，因为它们是合法的名称，但是语言已经使用过或者还保留着使用它们的权利，所以如果你使用这些标识符来表示其他的东西会引起问题。内置的标识符包括以下划线开始的词还有库函数的名称，就像`printf()`.\n\n# 关键概念\n\n电脑编程是一项有挑战性的活动，它需要复杂与概念化的思考，而且还需要对于细节格外注意。你会发现编译器会强制你去注意细节。当你对朋友说话的时候，你可能会把几个词用错，犯几个语法错误，可能话没有说完，但是你的朋友仍然能够理解你在说什么。但是编译器不会允许这种情况。对于编译器来说，几乎对了也是错的。\n\n编译器并不能在概念问题帮到你多少，比如在这里说的这些东西。所以这本书会尽力通过给出每一章关键概念的大纲来弥合那个差距。\n\n对这一章，你的目标是你需要理解C语言程序是什么，你可以认为程序就是你对于想让电脑干什么的描述。编译器精细化地解决把你的描述变为含蓄的机器语言。（对于编译器做多少工作的测量显示，它可以从你1KB的源码文件创造出来60KB的可执行程序）即使一个简单的C语言程序也需要很多的机器语言来代表它们。）因为编译器并没有智能，你必须使用编译器的词汇来描述你的意思，而且这些词汇是由C语言标准设立的正规规则。（即使很受限制，还是比直接用机器语言来表达强的多了！）\n\n编译器期望着收到以独特的形式写出的指令，这一章已经详细地描述了。你作为编程人员的工作就是表达在编译器框架下你对于程序应该如何运作的想法-由C语言标准所引导就可以正确地运行。\n\n# 回顾问题\n\n4. Indiana Sloth准备了如下的程序，让你看一看是不是正确，请帮帮他吧。\n\n![问题4](/img/quest4.png)\n\nmain函数用了{}来括起来，函数体用的是括号，是错的。\n声明语句没加分号，赋值只需要一个=号即可。\n是printf而不是print。没加双引号，没加引用列表。最后没结束。stdio.h打错了而且#和<>，注释另一边写反了，导致全文为注释。\n\n5.假设下面的每一个例子都是完整程序的一部分，它们每一个会打印什么呢?\n\n![问题5](/img/quest5.png)\n\n```Bash\n#a.\nBaa Baa Black Sheep.Have you any wool?\n\n#b.\nBegone!\ncreature of lard!\n#c.\nWhat?\nNo/nBonzo?\n\n#d.\n2 + 2 = 4\n```\n\n6. 下面哪些是C语言关键字？ `main, int, function, char, =`\nint、char\n\n7. 你会如何把**行数**与**字数**打印出来？\n在以下的形式中`There were 3020 words and 350 lines.`\n\n```C\nword = 3020;\nline = 350;\nprintf(\"There were %d words and %d lines.\", word, line);\n```\n\n8. 思考下面的程序\n![问题8](/img/quest8.png)\n在第7行之后的程序状态是什么？\n第八与第九行呢？\n\n> 第7行 a = 5，b = 2\n\n> 第8行 a = 5， b = 5\n\n> 第9行 a = 5， b = 5\n\n# 编程训练\n\n只是阅读是不够的，你得尝试写一两个简单的程序来看看是不是写程序和你看这一章的感觉一样流畅。下面有一些建议，但是你也确实需要独立思考一些问题。你会在网站上找到下面选出问题的答案。\n\n1. 调用一次printf，把你的姓与名在一行中输出\n\t再调用一次printf，把你的姓与名在两行中输出。\n\t使用两次printf把你的姓和名在一行中输出。\n\n```C\n//简略一写\nprintf(\"Mike Smith\\n\");\nprintf(\"Mike\\nSmith\\n\");\nprintf(\"Mike\");\nprintf(\"Smith\\n\");\n```\n\n2. 写一个打印你的姓名与地址的程序\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tprintf(\"My name is Ywx\\n\");\n\tprintf(\"Address: Zhengzhou city in Henan province\");\n\treturn 0;\n}\n```\n\n3. 写一个把你的年龄转换成天数的程序，展示两者的值。不必关心闰年和平年。\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint age, days;\n\tscanf(\"%d\", &age);\n\tdays = age * 365;\n\tprintf(\"%d %d\", age, days);\n\treturn 0;\n}\n```\n\n4.写一个会打印出以下语句的程序\n\n![语句](/img/four.png)\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tfor(int i = 0;i < 3;i++)\n\t\tprintf(\"For he's a jolly good fellow!\\n\");\n\tprintf(\"Which nobody can deny!\");\n\treturn 0;\n}\n```\n\n5.写一个程序，创建一个叫做`toes`的变量，把`toes`设为10，\n计算toes的二倍和平方分别是什么，并把它们打印下来\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\ttoes = 10;\n\tprintf(\"%d %d %d\", toes, toes * 2, toes * toes);\n\treturn 0;\n}\n```\n\n6.写一个会打印出如下的输出的程序\n\n![Smile!](/img/six.png)\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tfor(int i = 3;i >= 1;i--)\n\t{\n\t\tfor(int j = 0;j < i;j++)\n\t\t{\n\t\t\tprintf(\"Smile\");\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n\n7.写一个叫做`one_three()`的函数，这个函数应该在一行内展现文字`one`然后调用函数`two()`，接着在另一行内显示文字`three`。\n`two()`把文字`two`在一行输出。以Stating now开始，像这样。\n\n![数数](/img/last.png)\n\n```C\n#include <stdio.h>\n\nvoid two()\n{\n\tprintf(\"two\\n\");\n}\n\nvoid one_three()\n{\n\tprintf(\"one\\n\");\n\ttwo();\n\tprintf(\"three\\n\")l\n}\n\nint main(void)\n{\n\tprintf(\"starting now:\\n\");\n\tone_three();\n\treturn 0;\n}\n```\n\n> End...","source":"_posts/C-premier-plus-Chapter-2.md","raw":"---\ntitle: C premier plus Chapter 2\ndate: 2023-11-28 12:36:23\ntags: C_premier_plus\n---\n\n# 第二章 C语言介绍\n\n> **你将会在这一章学到**\n> \t1.赋值运算符\n> \t2.函数main()与printf()\n> \t3.一个简单C语言程序的构成\n> \t4.创造整型变量，赋值并在屏幕上显示它们的值\n> \t5.换行符`'\\n'`\n> \t6.如何在程序中添加注释，让你的程序中同时拥有多个函数\n> \t\t并能找出程序中的错误。\n> \t7.关键字是什么\n\nC语言的程序是什么样子的？如果你大体浏览过这本书，你会看到很多的例子的。几乎一致的是，你会觉得C语言程序看起来很怪异，有些需要用到类似`{，cp->tort,*ptr`这样的符号。随着你通读完这本书，你就会慢慢觉得这些符号不是那么陌生了，会变得更加熟悉，甚至有可能会很高兴遇见它们。在这一章中，我们从给出并解释一个简单的实例起步。同时，我们也会强调一些C语言的基本特征。\n\n# 2.1 一个简单的例子\n\n让我们先研究一个简单的C语言程序。在图2.1展示的这个程序，专门为了突出一些C语言编程的特征。在你将要读接下来对于程序的逐行解释之前，先看看图2.1，试试你是不是能够靠自己搞明白它会做什么事情。\n![小例子](/img/example.png)\n>1.#include <stdio.h> 包含头文件\n>2.int main(void) 定义一个返回值为整数，输入值为空的主函数\n>{\n>\tint num; 定义一个名为num的整型变量\n>\tnum = 1; 给num赋值1\n>\t\n> \tprintf(\"I am a simple \"); 输出一行字\n> \tprintf(\"computer. \\n\");\n> \t输出一个词，接在刚才的一句话之后，并换行\n> \tprintf(\"My favorite number is %d because it is first.\\n\",num);\n> \treturn 0; 返回值0，表示结束。\n>}\n>\n>注释中的三个部分：1.定义变量 2.赋值 3.使用函数\n\n如果你认为这个函数将会在你的屏幕上打印一些东西。是的，你是对的。但对于明确的什么东西将会被打印到屏幕上可能并不明显，所以我们运行这个程序，看看会发生什么。\n+ 第一步，使用你最喜欢的编辑器\n\t或者你的编译器中最喜欢的编辑器\n+ 第二步，创造一个包括了图2.1中文本的文件，\n\t并且以`.c`为结尾，从而满足你的系统对于文件名的需要。\n\t举个例子`first.c`就是合法的名称。\n+ 第三步，编译并运行程序。\n\t查看第一章来得知这方面的详细过程。\n\n如果一切都运转良好的话，你会在屏幕上看到这样的输出。\n![输出](/img/输出.png)\n\n总之，这个结果并不是很惊人，但是`\\n`与`%d`的作用是什么呢？\n程序中有几行也看起来很陌生，这就到解释的时候了。\n\n# 2.2 解释这个例子\n\n我们会对这个例子解释两遍，第一遍（Pass1：速览大纲），强调了每一行的意义，从而你能够大体上得知发生了什么。第二遍（Pass2：程序细节），探索了特定部分的含义，并且给出了细节以便你能够更深刻地理解。\n\n图2.1总结了C语言程序的每一个部分，\n除了我们第一个例子使用的，它们还包含着更多要素与步骤。\n\n## Pass1：速览大纲：\n这一部分包括了对于程序每一行的简短解释。\n下一部分会更加充分地探索这些主题的内容。\n\n>#include <stdio.h> 包含另一个文件。\n\n这一行告诉编译器要从文件`stdio.h`中收集信息，这个文件是所有C语言编译器安装包的基础部分，提供了对于键盘输入与显示输出的支持。\n\n>int main(void) 一个函数名\n\n![对C语言程序的分析](/img/analysis.png)\n\nC语言包括一个或者多个***函数***，它是C语言程序的基本模块。这个程序由一个叫做`main`的函数组成，圆括号表示了`main()`是个函数的名字。`int`表明了`main()`函数会返回一个整数，`void`表明`main()`不会获取任何的参数，这些都是我们过会会深入研究的事情。现在，接受`void`与`int`是在ISO/ANSI标准下定义`main()`函数的方法（如果你有在ISO/ANSI标准之前的编译器，省略`void`就好，但你可能也想获取更新的版本来避免不协调。）\n\n> /* a simple program*/ 一条注释。\n\n`/*`与`*/`符号框定了一条能够帮助阐明一个程序的注释，它们是只为阅读者准备的，会被编译器忽略掉。\n\n>{    函数体的开头\n\n起始大括号`{`标志着函数中语句的开始，\n函数的定义由终止大括号`}`结束。\n\n> int num; 一个声明语句\n\n这个语句声明了你正在使用一个叫做`num`的变量，而且`num`会是`int`（integer-十进制整数）类型。\n\n> num = 1; 一个赋值语句\n\n这个语句`num = 1`把值`1`赋给叫做`num`的变量。\n\n> printf(\"I am a simple \"); 一个调用函数的语句\n\n第一句使用了`printf()`函数来在屏幕上显示`I am a simple `这句话，把光标留在了同一行。这里的`printf()`函数是标准C语言库的一部分。它被称作一个***函数***，而在程序中使用一个函数叫***调用函数***。\n\n> printf(\"computer.\\n\");  另一个函数调用语句\n\n第二次调用`printf()`函数是在上一句打印下来的话后面添加了`computer`，`\\n`符号是告诉电脑要另起一行-也就是说把光标移到下一行的起始。\n\n> printf(\"My favorite number is %d because it is first.\\n\");\n\n最后一次使用`printf()`是基于引用的语句把`num`的数值(1)打印到屏幕上，`%d`指示电脑从哪里，以什么方式输出`num`的数值。\n\n> return 0;\n\n一个C语言函数是可以提供，或者说***return(返回)***，一个数值\n\n> } 结束。\n\n正像说过的，程序以终止大括号结束。\n\n## Pass2：程序细节\n\n既然你已经大体了解了图2.1中的内容，我们要更详尽地研究一下它了。再一次，我们将会逐行地查看程序，为了能够培养一种更宏观的C语言编程视角，这一句我们会以每一行代码作为起点，然后一步步深入代码之后的细节。\n### # include **指示与头文件**\n#### # include <stdio.h>\n这是一个程序的开始行，**#include <stdio.h>** 的作用就和你把`stdio.h`中所有的内容都打字写在程序#include的位置是一样的。因此，这是一个剪切粘贴的操作，在共享对于很多程序都一样的信息上，**include**文件提供了一种便利的方式。\n\n`#include`语句是C语言**预处理指令**的一个范例。大体上，C语言编译器会在编译之前对于源码做一些准备工作，这在术语中称为***预处理***\n\n在大部分上，头文件包含着编译器制作最终的可执行文件需要使用的信息。例如，它们可能会定义一些常量或者声明一些函数的名字，与它们应该被怎样使用，但是库中函数真正的代码-编译前代码，不是在头文件中的。编译器的一部分-连接器会负责找到你需要的这一部分库代码。简单地说，头文件会帮助引导编译器来正确地把程序组装起来。\n\nISO/ANSI标准下的C语言必须提供头文件，有些程序需要包含`stdio.h`头文件，有些不需要。对于C语言实例的记录应该包含使用的C语言标准库函数的描述，这些函数描述就确认了需要什么头文件。例如对于`printf()`的描述就表明了需要使用`stdio.h`，省略恰当的头文件可能并不会影响特定的程序，但是最好不要依赖它。这本书每一次使用库函数时，我们都会为函数使用`include`来把ISO/ANSI标准制定的的文件包括在程序内。\n\n![为什么输入输出不是内建函数？](/img/original.png)\n\n为什么输入输出并不是内建函数？\n你有可能想知道为什么像输入输出这样基本的东西并不会被自动包含进程序中。一种回答是，并不是所有的程序都要使用I/O（input/output）包，而且C语言的哲学中也说到要避免承担不必要的重量。这个经济学上资源利用的准则让C语言受到嵌入式编程的欢迎-例如，为控制自动燃油系统编写代码。顺带一说，#include这一行甚至不是C语言的语句。#符号阐述了这一行是在编译器之前被预处理器处理的代码。你会在后面学习预处理指令时遇到很多例子，而且在第16章对这个主题还有更加充分的讲述。\n\n### `main`函数\n#### int main(void)\n程序的下一行声明了一个名字为`main`的函数，`main`是个挺普通的程序，但是它是唯一的选择。一个C语言程序（有些我们无需担心的例外），通常是以名叫`main`的函数开始运行的，其他函数的名字是可以随意选择的，但是作为一切的开端，`main`函数必须存在。那么圆括号呢？它们是为了确定`main()`是个函数，你会很快学习学到关于函数的更多内容。现在，记住这个函数是C语言程序的基础模块。\n\n`int`是`main()`函数的返回值类型，它意味着`main()`返回的数值种类必须是十进制整数(integer)。那么返回到哪里？返回到操作系统-我们会在第六章讨论循环的时候回到这个问题上来。\n\n跟随在函数名后面的圆括号大体上囊括了需要传递给函数的信息，举个简单的例子，没有东西被传递，那么这个括号就包含着`void`-空类型（在第11章，“字符指针与字符串函数”介绍了第二种从操作系统把信息传递给`main()`函数的形式）\n\n如果你查看过很久以前的C语言代码，你会经常看到程序是以下面的形式开始的:\n\n```C\nmain()\n```\n\nC90标准勉强地包容了这个形式，但是C99没有，所以即使你现在的编译器让你写成这个样子，不要听。\n\n下面是另一种你可能会看见的形式\n\n```C\nvoid main()\n```\n\n有一些编译器是允许这样写的，但是没有一个标准把它列为一种选择，\n因此，编译器也没有必要接受这个形式，有几种确实也没有。再一次，坚守标准的形式，你就不会在更换编译器的时候陷入困境。\n\n### 注释\n\n```C\n/*a simple program*/\n```\n\n这一部分由/ *  * /符号框定起来的内容就是注释，使用注释可以让一些人（包括你自己）更好地理解你的程序。C语言的一个很好的特点就是注释可以放在任何地方，甚至与它们解释的“原文内容”放在一行。长一点的知识可以放在一行甚至延伸至多行，以/ * 开始并以 * /结束的内容都会被编译器忽略。下面是注释的合法与非法写法。\n\n![注释示例](/img/comment.png)\n# 翻译\n>（1.这是一行C语言注释）\n>（2.这个注释延伸到了两行）\n>（3.你也可以这样做）\n>（4.但是这是不合法的因为没有结束符号）\n\nC99添加了注释的另一种形式，它在C++与Java中很受欢迎，这种新形式使用`//`符号来生成只在一行内的注释。\n\n![新形式](/img/newform.png)\n\n因为一行的结束标志这这行注释的结束，这种方式需要在注释开始的时候添加注释符号。\n\n新形式的出现是为了响应旧形式的潜在问题，假设你有下面的代码。\n\n![我希望这可以运行...](/img/ihope.png)\n\n下一次，我推断你要删除第四行\n然后意外地把第三行删掉了，\n然后这代码就会变成这个样子\n\n![哦不...](/img/hopeagain.png)\n\n现在编译器把第一行的起始符与第四行的结束符进行配对，结果使这四行全部成为了注释，包括那本应该是代码的一部分的一行。因为`//`并不会延伸到另一行，它不会引起代码的“消失”。\n\n一些编译器有可能并不支持C99的这个特点，还有些有可能需要改变一些编译器的设置才能够应用C99的特性。\n\n### 大括号、函数体与代码块\n\n```C\n{\n...\n}\n```\n\n在图2.1，大括号划定了`main()`的界限。大体上，所有的C语言函数都需要使用大括号来标志着函数体的起始与结束。它们是必须出现的，所以一定不要漏了。只有大括号是起这个作用的，不要使用圆括号或者中括号。\n\n大括号还可以被用来把语句聚集在一个函数中，形成一个单元或者语句块。如果你对于Pascal，ADA，Modula-2或者Algol熟悉的话，你就会意识到大括号划定起始与结束在这些语言里也是相似的。\n\n### 声明\n\n```C\nint num;\n```\n\n程序的这一行术语中称为***声明语句***，声明语句是C语言的其中一个最重要的特点。这个特例声明了两件事，一是在函数的某一个部分有一个叫`num`的变量（好好笑啊哈哈，在那遥远的函数中，有个小变量。）第二，`int`声明了`num`是一个十进制整数-也就是说，没有十进制小数点。（`int`是***数据类型***的一个例子），编译器使用这些信息为`num`变量准备合适的内存空间。结尾的分号标志了这一行是C语言的语句或者指令。分号也是这个语句的一部分，并不只是像在Pascal里的语句之间的分隔符。\n\nC语言中，`int`是一个确定了一种数据类型的*关键字*，关键字是我们用来表达语言的单词，而且你不能把它们强占用于其他目的。例如，你不能把`int`作为函数或者是变量的名称。这些限制在语言之外就会失去作用，反而你把一只猫或者你最喜欢的孩子叫做`int`是没有问题的。（除非本地官员或者法律不准用这个名字）。\n\n`num`是*标识符*的一个例子，也就是你为变量、函数或者其他实型取的名字。从而声明把特定的标识符与电脑的特定的内存区联系在了一起，而且它也建立了信息的类型，或者说数据的类型，来放在那个区域里。\n\n在C语言中，*所有的*变量都需要在被使用之前先*声明*，这也就意味着你必须对于所有在一个程序中使用的变量列出包括数据类型的声明。人们也认为声明变量是一个优秀的编程技巧，而且，在C语言中，它是必须进行的。\n\n通常来说，C语言要求在代码块的起始部分声明变量，而且其他的语句是不允许放在这之前的。也就是说，`main()`函数的函数体会是这个样子。\n\n![传统方式](/img/tradition.png)\n\n\nC99标准学习了C++的时间，现在可以让你在代码块的任何地方声明变量。然而，你还是需要在第一次使用变量之前声明它。所以如果你的编译器支持的话，你就可以像下面这样写：\n\n![C99新方式(1)](/img/C99.png)\n![C99新方式(2)](/img/C992.png)\n\n为了能够和更旧的系统兼容，这本书还是会坚持原来的标准。（一些更新的编译器只有当你设置之后才会支持C99的特点）。\n\n就此，你很可能有三个问题：\n+ 1.数据类型是什么？\n+ 2.在取名的时候我们可以怎么选择？\n+ 3.为什么你需要把变量全部声明出来。\n那就让我们探究这些问题的答案吧。\n\n### 数据类型\n\nC语言主要处理的是这几种数据：十进制整数、字符、浮点数，仅举几例。声明一个整型或者字符类型变量可以使电脑恰当地储存、抓取与翻译数据。你会在下一章研究到更多可用的数据类型。\n\n### 名字的选择\n\n你应该为变量使用有意义的名字（像是`sheep_count`而不是`x3`如果你的程序是数羊的），如果名字不能达到表意的需求，那么就使用注释来解释变量代表了什么。以这种方式为程序做记录是其中一种优秀的编程技巧。\n\n你可以使用的字符要视实际情况而定。C99标准要求不多于63个字符，除非是外部的标识符。（在第12章“内存分级、链接性与储存管理”中会提到），相比于分别只能识别31个字符与6个字符的C90，这是一个巨大的提升，而且老的C语言编译器最多只能接受8个字符。事实上你可以使用更多的字符的，但是编译器会忽略它们。因此，当一个系统有着8个字符的限制时，`shakespeare`与`shakespencil`就会被认为是一样的了，因为它们的前八个字符是一样的。（如果你想要63个字符的例子，可以自己造一个）。\n\n你可以在大写字母、小写字母与下划线之间任意选择。第一个字符必须是一个字母或者一个下划线。下面是一些示范。\n![示范](/img/valid.png)\n操作系统与C语言标准库通常会使用1或2个下划线字符，比如`_kcab`，所以最好避免自己使用它。以一个或者两个下划线字符开始的，标准的标签，比如库中的标识符，会被***储存***起来，也就是说，即使使用它们作为名字并没有任何的语义错误，它是会造成一些名字冲突的。\n\nC的标识符是***区分大小写***的，也就意味着大学字母是被看做与对应的小写字母字符不同的。因此，`stars`与`Stars`和`STARS`是不同的。\n\n为了让C语言能够更加国际化，C99使用通用字符名称机制(UCN)进行了巨大的扩充，在附录B中的参考单元VII“更广大的字符支持”，我们讨论了这些加入的部分。\n\n### 声明变量的四个好处\n\n一些年代更远的语言，比如FORTRAN与BASIC语言的原型版本，可以让你在没有声明的情况下使用变量。那么为什么我们不能在C语言中使用这种简单易行的方法呢？这里就是一些原因：\n+ 把所有的变量放在一个地方能够让阅读者更容易地知道程序是关于什么的。这点好处在你给变量取有意义的名称的时候尤其明显，（就像`taxrate`与`r`），如果名字不能达意就使用注释来解释，以这种方式给程序做记录是一种良好的编程技巧。\n+ 通过思考声明变量是为了什么鼓励你全心投入地去写程序之前做一些准备。程序开始需要什么类型的信息？我到底想要程序输出什么？呈现数据的最好方式是什么？\n+ 声明变量有助于我们预防编程中更多难以发现又狡猾的错误之一-也就是拼错了变量的名字。举个例子，假设在一些没有声明的语言中，你写下了这个语句。\n\n```C\nradius1 = 20.4;\n```\n\n然后在另一个地方，你拼错了变量名。\n\n```C\n> circum = 6.28 * radiusl;\n```\n\n你无意地把数字`1`换成了`l`，那种语言也会创造一个`radiusl`的变量，然后用未知的值（或许是0，或许是垃圾值），`circum`就会被给予一个错误的值，而且你可能需要极其多的时间来搞清楚为什么，这在C语言是不可能出现的（除非你确实是笨到家了去定义两个这样相似的变量名），因为编译器会在radiusl出现的时候报错。\n\n+ 如果你不声明变量的话，你的C语言程序是不会进行编译的。如果先前的原因没有动摇你的话，对于这一点你可就得好好想想了。\n\n既然你需要声明需要使用的变量，它们会到哪里呢？就像上文提过的，C语言在C99之前就要求声明需要在代码块之前完成，遵循这种把声明放在一起的做法，你就可以更容易地得知程序正在做什么。当然，把你的声明分布在各个地方也是有好处的，正像现在C99所允许的。这也就是在你赋值之前先声明变量。那让你更难以忘记给他们赋值。作为关键性的事情，许多的编译器还不支持C99的这个规则。\n\n### 赋值\n```C\nnum = 1;\n```\n\n下一行的程序是一个***赋值语句***，C语言中的其中一种基础运算。这个例子的意思是“把值`1`赋给变量`num`，之前的`int num`”这一行在电脑内存中为`num`分配了空间，这一行也就在这个空间中储存值。如果想要的的话你可以过会给`num`赋另一个值，那也就是`num`被叫做***变量***的原因。需要注意的是赋值语句会把值从右边到左边传递。\n同时，这一句也是以分号结尾的，就像图2.2中显示的。\n![赋值图示](/img/assignment.png)\n\n## `printf()`函数\n\n```C\nprintf(\"I am a simple \");\nprintf(\"computer.\\n\");\nprintf(\"My favorite number is %d because it is first.\\n\",num);\n```\n这些行使用了一个C标准库中叫`printf`的函数，圆括号表明了`printf`是一个函数的名字，在圆括号之中的内容就是`main()`函数向`printf()`函数传递的信息。例如，第一行就传递了这句话 `I am a simple`这样的信息叫做***参数***，或者更加充分地，叫做函数的***实际参数***（见图2.3），那么`printf()`函数会对对这种语句做些什么呢？它会抓取在双引号之间的一切，然后把文本打印在屏幕上。\n\n![函数调用](/img/calling.png)\n\n第一行`printf()`是你调用函数的一个很好的例子，你只需要打字写下函数的名称，把需要的参数放在圆括号内。当程序运行到这一行时，控制流就转换到已经定义的函数（在这个例子中是`printf()`）中，然后当函数已经完成了它需要做的事情之后，控制流就又回到原来的（***调用***）函数-在这个例子中是`main()`。\n\n下一行的`printf`呢？它在引号中包含了`\\n`这个字符，而且它并没有被打印下来？发生了什么？`\\n`的作用其实是另起一行，`\\n`的组合体（打印下来是两个字符）就组成了`\\n`这个叫***换行符***的新字符。对于`printf()`它意味着“在左下角再起一行”。也就是说，打印换行符和你在常规键盘上按下`enter`键的作用是差不多的。那么为什么不在打字写`printf`的时候用`Enter`键呢？那是因为因为那只会被认为是对于你的编译器的即时的指令，而不是对于源码的指令，也就是说，当你按下`enter`键时编辑器会退出当前的行，然后另起一行。换行符，影响着程序是如何显示的。\n\n换行符是***转义字符***的范例，***转义字符***是用来呈现难以或者几乎不能通过打印显示出来的字符的。其他的还有`\\t`对应着`Tab`、`\\b`对应着`Backspace`，每一个转义字符都会由`\\`来起始，我们会在第三章：C语言与数据再回到这个话题深入研究。\n\n这也就解释了为什么三个`printf`却只有两行文字了，第一个`printf()`命令没有换行符，但是第二个与第三个是有的。\n\n最后的`printf()`又带来了另外一个异样的地方：当这行文字被打印的时候`%d`发生了什么？你应该还记得，输出是这个样子的。\n\n```Bash\nMy favorite number is 1 because it is first.\n```\n啊哈，当被打印出来的时候，数字`1`就是`%d`的替换物，而且变量`num`的值就是`1`，`%d`是展示`num`的值在什么时候被打印的占位符，这一行与下面的BASIC语句是相似的：\n\n```BASIC\nPRINT \"My favorite number is \"; num; because it is first.\"\n```\n事实上，C语言的版本比这个做的工作还要多一点，`%`告诉程序有一个变量需要在这个区域被输出，`d`表达了要把这个变量以十进制整数的方式输出。`printf`还可以以其他变量形式进行输出，包括十六进制数、带有十进制小数点的数。事实上，`printf()`中的`f`表明了它是一个***格式化***打印函数。每种数据类型都有自己的指示符，这本书也会在介绍新的数据类型的同时引入对应的指示符。\n\n### 返回语句\n```C\nreturn 0;\n```\n\n返回语句是这个程序的最后一个语句，在`int main(void)`中的`int`意味着`main()`函数应该返回一个十进制整数。`main()`函数这样返回是C语言标准要求的。返回值的C语言函数都会使用return语句来进行这个操作，return语句包含着关键字`return`与返回的值，以一个分号结束。如果你遗漏了这一句，大多数编译器会报错，但是它们仍然会对程序进行编译。这样的话，你可以把return语句看成为了增加逻辑的连贯性的东西，但是它对于一些操作系统是由实际用处的，包括DOS和Unix，我们在第11章会更深入地对于这个话题给出解释。\n\n# 2.3 简单程序的结构\n\n既然你已经看过了具体的例子，你已经准备好了解C语言程序的一些基本规则了。***程序***由包含一个函数或者多个函数的组组成，其中一个必须叫`main()`对于函数的描述包括函数头与函数体，***函数头***包括预处理语句，如`#include`，与函数的名字。你可以通过看圆括号的方式来得知这是个函数，即使圆括号可能是空的。***函数体***是由大括号框定的，它包括了一系列的语句，每一个都是由一个分号结尾的（见图2.4）。在例子中有***声明语句***，它是用来声明变量的类型与名字的，还有***赋值语句***，它给予变量一个值。然后还有三个***print语句***，每一个都调用了`printf()`函数，这些print语句是***函数调用语句***的一些示范。最后`main()`函数以返回值结束。\n\n简单来说，一个简单的、标准的C语言程序应该使用下面的格式。\n![图2.4](/img/function1.png)\n![标准格式](/img/structure.png)\n\n# 2.4 可读性建议\n\n使你的程序变得更可读是一种优秀的编程实践。可读性高的程序很容易理解，也就很容易去修改、纠正。让一个程序变得可读的过程也帮助你理清你对于程序执行自己的概念。\n\n你已经看过两种可以增加可读性的技巧了：选择变量名与使用注释。注意这两种技巧是相互补充的。如果你给一个变量注名`width`，你就不需要对于这个变量表示什么做任何解释了。但是叫做`video_routine_4`的变量就需要对于video routine 4的解释。\n\n另一个技巧是使用空行来分隔函数中的概念模块。例如，简单的实例程序就使用了空行分开了声明部分与行动部分。C语言不需要空行，但是它能够提高可读性。\n\n第四个技巧就是每行使用一个语句。再一次，这是一个针对于可读性的惯例，并不是C语言的要求。C语言的格式是***形式自由***的，你可以把几句话放在一行或者一直延伸到第二行。下面的代码是合法的，但是看起来很丑。\n![丑](/img/poorreadability.png)\n分号向编译器指示了一个语句什么时候结束和下一句什么时候开始。但是如果你能够遵从这种在本章的例子中使用的传统手法，程序的逻辑会清晰很多。（见图2.5）\n![可读性规范](/img/readable.png)\n\n# 2.5 更进一步\n\n我们的第一个C语言例子还是很简单的，接下来的图2.2就是第二个例子，但也并不是非常难。\n\n![例子](/img/example2.png)\n\n新在哪里呢？代码中提供了对于程序的描述（在注释中），声明了很多变量，做了一些乘法运算，然后把这两个变量的值打印下来，让我们把这些点深入地了解一下。\n\n## 记录 Documentation\n\n第一，程序是以注释开始的（使用的是新的注释形式），它确定了文件名与程序的目的。这种程序的记录只花费一分钟就可以做，而且之后会在你浏览多个文件并打印它们的时候起到很大帮助。\n\n## 多行声明 Multiple Declarations\n\n然后，程序在一行中声明了两个而不是一个变量。为了达成这个目的，可以把两个变量（`feet`与`fathoms`）的声明使用一个逗号隔开，也就是下面这样。\n\n```C\nint feet, fathoms;\n```\n\n它和下面的形式是等价的。\n\n```C\nint feet;\nint fathoms;\n```\n\n## 运算 Multiplication\n\n第三步，程序进行运算，它利用了计算机系统庞大的算力来计算2乘6。\n在C语言中，同样也在很多语言中，`*`是乘法运算的符号。\n因此，下面的语句：\n\n```C\nfeet = 6 * fathoms;\n```\n\n它的意思就是：查看`fathoms`的值，乘以6，然后把这个运算的结果的值赋给变量`feet`。\n\n## 打印多个值 Printing Multiple Values\n\n最终，程序更多样地使用了`printf()`如果你编译运行过这个例子，输出应该是这个样子的。\n\n```Bash\nThere are 12 feet in 2 fathoms！\nYes, I said 12 feet!\n```\n\n这一次，代码在第一次使用`printf()`的时候，使用了两次替代符，在双引号中的第一个`%d`被在后面引用列表的第一个变量的值替换了(`feet`)然后第二个`%d`被第二个变量代替了。要注意的是待打印变量列表是在双引号部分后面，另外也注意每一个都是用括号分开的。\n\n第二次使用`printf()`表明了打印的值并不一定是变量的，只是必须要指定一个值，就像`6 * fathoms`这样，可以是恰当类型的值。\n\n这个程序受篇幅不长，但是它可以呈现把fathoms转换到feet的核心。我们需要的就是动态地去赋其他的值给`feet`我们会在以后的章节解释如何做。\n\n# 2.6 顺便一提：多重函数\n\n目前为止，这些程序已经使用过了基本的`printf()`函数。图2.3向你展示了如何把自己的函数-除了`main()`以外的函数-加到程序里。\n\n![两个函数的程序](/img/twofunc.png)\n\n输出是这个样子的。\n\n```Bash\nI will summon the butler function.\nYou rang, sir?\nYes,Bring me some tea and writeable CD-ROMS.\n```\n\n`butler()`函数在程序中出现了三次，第一次出现是在***原型***中，那告诉了编译器要使用的函数。第二次出现是在`main()`函数中，在***函数调用***中出现，最终，程序呈现了***函数的定义***过程，那是函数本身的源码。让我们再来看看这三次出现。\n\nC90标准添加了原型，老翻译器可能并不能识别它们（我们将会讲到当你使用那种编译器的时候要怎么做。）原型就是一种告诉编译器你正在使用一个特定的函数的声明。它也指定了函数的属性。例如，`butler()`函数的第一个词`void`指明了它没有返回值。（大体上，函数可以为了使用值而返回这些值，但`butler`没有），第二个`void`-在`butler(void)`-的意思是它没有参数。因此，当编译到达`main()`函数中`butler`被使用的这一行时，它会检查是否`butler`是被恰当地使用的。需要注意，`void`是被用来表示empty（空），而不是invalid（不合法、无效）。\n\n早先的C语言支持的函数声明类型有限，那时你只能定下返回值的类型，但是对于参数的描述就被省略。\n\n```C\nvoid butler();\n```\n\n那时的C语言代码使用的函数声明就像是上述的样子，而不是函数原型，C90与C99标准都能够辨认出这种更老的形式，但是它们表示这种形式会随着时间被淘汰，所以不要用。如果你从一些更老的地方拿到了C语言代码，你有可能想要把老式的声明变成原型。以后的章节会回到原型制作、函数声明与返回值上。\n\n接下来，你通过给出`butler`的名字与圆括号来援引函数。（调用），当`butler`完成了它的工作，程序就会移向`main()`函数中的下一行。\n\n最终，函数`butler()`以与`main()`函数一样的形式被定义，有函数头与用大括号框定的函数体。函数头重复了你在原型中提供的信息：`butler`不使用信息，而且不返回值。对于老旧的编译器，省略第二个`void`。\n\n有一点需要注意的，就是在`main()`函数中`butler()`被调用的位置-而不是`butler()`函数被定义的位置-决定了`butler()`函数的运行位置。比如，你可以把`butler()`函数的定义放在`main()`函数的前面，程序还是会照旧那样把`butler()`放在两个`printf()`中间运行。记住，所有的C语言程序都是以`main()`函数开始的，无论`main()`函数在程序文件的什么位置。然而，C语言实际上是先把`main()`函数列出来，因为它通常提供了基本的程序框架。\n\nC语言标准建议你为所有你使用的函数提供原型，标准的`include`文件为标准库函数做这个工作，例如，在标准C语言下，`stdio.h`文件就有`printf()`函数的原型，第六章的最后一个例子会告诉你如何去更广泛地为非`void`的函数制作原型，第九章会全面地讲述函数。\n\n# 2.7 调试引入\n\n现在你已经可以写一个简单的C语言程序了，你有可能海域犯些简单的错误。程序的错误通常被叫做***bugs***，寻找与修复它们就叫做***调试***，图2.4就展现了有些bugs的程序，看看你是否能够找到。\n\n![找找吧，有几处？](/img/nogood.png)\n\n## 语法错误 Syntax Errors\n\n图2.4的例子犯了几个语法错误，当你没有遵循C语言的规则，你就会犯***语法错误***，这也可以类比到英语的语法错误。例如，思考一下这句话：***Bugs frustrate be can.*** 这句话使用的单词是正确的，但是并没有遵循单词顺序的规律，而且使用的单词形式也不太对，不管怎样，C语言的语法错误就是在错误的地方使用了正确的C语言标志。\n\n所以`nogood.c`这个程序究竟犯了什么错误呢？第一，它使用的是括号而不是大括号来标记函数体，也是把正确的C语言符号用在了错误的地方，第二，声明应该是这个样子的\n\n```C\n\tint n, n2, n3;\n```\n\n或者这样\n\n```C\n\tint n;\n\tint n2;\n\tint n3;\n```\n\n而且，这个例子遗漏了安置一条注释必须要使用的`*/`符号对（作为替换，你可以用`//`形式替换`/*`），最后，它遗漏了`printf()`后的本应作为语句结束标志的分号。\n\n你如何来检查语法错误呢？第一，在编译之前，浏览你的源码，看你是否看到一些明显的错误。第二，你可以检查编译器找到的错误，因为它的一部分工作就是检查语义错误。当你编译程序的时候，编译器会反馈找到的所有错误，并且会明确错误类型与出错的位置。\n\n然而，编译器有时也会混乱，实际上的一个区域内的语义错误有可能会让编译器错误地认为它找到了其他种类的错误。例如，因为这个例子没有恰当地声明`n2`与`n3`，所以编译器会认为它在被使用的地方找到了错误。事实上，与其试图一次把所有报告的错误修正过来，不如只修改一两个然后重新编译，这样的话有些其他种类的错误就会消失。继续这样做，直到程序正常运行。另一个常见的编译器“诡计”是它会在后面的行报错，但其实出错是在前面的行里。例如，编译器有可能直到下一行才能判断出上一行遗漏了分号。所以如果编译器报错说缺少分号，那么在这一行之前进行检查。\n\n## 语义错误 Semantic Errors\n\n语义错误是在意义上的错误，例如，思考这一句话: ***Furry inflation thinks greenly.***  语法上是正确的，因为形容词、名词、动词、还有副词都在合适的位置上，但这句话就是一派胡言。在C语言中，当你遵循了C语言的规则但是导致了不合适的结果，这个例子中就有这样的错误。\n\n```C\nn3 = n2 * n2;\n```\n\nn3本应该是用来展现`n`的3次方的，结果程序把它算成了`n`的4次方。编译器是检测不出来语义错误的，因为它们并不违背C语言的规则。编译器没有能力去猜测你程序的意图。那也就只能由你来找到这些种类的错误了。一种方式是把程序做的事情与程序应该做的事情进行对比。例如，假定你已经找到了例子中的语法错误，那么它现在看起来是这个图2.5样子的。\n\n![还是错的...](/img/stillbad.png)\n\n它的输出是\n\n```Bash\nn = 5, n squared = 25, n cubed = 625 \n```\n\n如果你可以口算立方的话，那么你就会注意到625是个错误的值。下一阶段就是找到你是如何陷入这个错误的。例如，你有可能会通过观察找到错误。大体上，然而你还需要一些系统的方法。一种方法是假装你是电脑，然后一步步地跟着程序走，让我们现在就尝试一下那个方法。\n\n程序体以声明三个变量`n1, n2与n3`开始，你可以通过画三个盒子并把它们各自标注名称来模拟这个情况。（看图2.6）然后，程序会把5赋给`n`，通过把数字5写在盒子里来模拟，然后，程序用`n`乘`n`然后把它的值赋给`n2`，所以看向盒子`n`，看着5乘5得到了25，然后把25放在盒子里。为了模拟下一句，也是同样，看向盒子2，然后用25乘25，然后把这个值给予`n3`，啊哈，你做乘法的时候使用的是`n`的平方而不是用`n`。\n\n嗯，有可能这个过程对于这个程序有点过了，但是以这种方式一步步地浏览程序总会是得知发生了什么最好的方法。\n\n## 程序状态\n\n通过手工地一步步地追踪程序，追踪每一个变量，你监视了程序的状态，**程序状态**就是所有变量在一个时间点上被给予的一组值。它是运算状态的快照。\n\n![追踪程序状态](/img/tracer.png)\n\n我们刚刚讨论了一种追踪程序状态的方法：通过自己一步一步地运行程序。在一个进行1000次迭代的程序中，你可能觉得并不能完成那个工作。然而，你还是可以经历一些迭代过程，看看你的程序是不是按你想要的方式来运行的。然而，通常是会有这种情况的，你会按照你想要的方式去“执行”它们，而不是真正把它们写下来，所以在写真正的代码的时候要努力做到正确。\n\n另一个方法就是通过在程序的自始至终放置几个`printf`语句来定位语义问题。在程序运行的关键点监测选定变量的数值。看看数值是怎么变化的可以让你知道正在发生什么。在你让程序按照你满意的方式运行之后，你就可以去掉多余的语句去重新编译了。\n\n第三种监测的方法就是使用调试器。***Debugger***是一种能够让你一步一步地运行程序并且查看程序变量的值的程序。它们使用的难易程度与复杂度都各有不同。更高级的编译器可以显示哪一行代码正在被运行。这对于多路径的程序是非常方便的，因为可以很容易地看到走的是哪一条路径。如果你的编译器中有调试器，那么花谢时间学学则呢么使用吧。比如像图2.4那样尝试使用它。\n\n# 2.8 关键字与内置标识符\n\n关键字就是C语言中的词汇，因为它们对于C语言是特别的，所以你不能把它们作为标识符来使用。有一些关键字分别了多种多样的类型，比如说`int`，其他的比如说`if`是被用来控制程序运行语句的顺序的。在以下的C语言关键字的列表中，黑体表示在ISO/ANSI C90标准下的关键字，斜体的是C99标准加入的新关键字\n\n![关键字](/img/keywords.png)\n\n如果你尝试把关键字用于变量的名字，编译器会把它识别为语法错误，还有其他的标识符，它们叫做***内建标识符***，你也是不应该使用的，他们不会导致语法错误，因为它们是合法的名称，但是语言已经使用过或者还保留着使用它们的权利，所以如果你使用这些标识符来表示其他的东西会引起问题。内置的标识符包括以下划线开始的词还有库函数的名称，就像`printf()`.\n\n# 关键概念\n\n电脑编程是一项有挑战性的活动，它需要复杂与概念化的思考，而且还需要对于细节格外注意。你会发现编译器会强制你去注意细节。当你对朋友说话的时候，你可能会把几个词用错，犯几个语法错误，可能话没有说完，但是你的朋友仍然能够理解你在说什么。但是编译器不会允许这种情况。对于编译器来说，几乎对了也是错的。\n\n编译器并不能在概念问题帮到你多少，比如在这里说的这些东西。所以这本书会尽力通过给出每一章关键概念的大纲来弥合那个差距。\n\n对这一章，你的目标是你需要理解C语言程序是什么，你可以认为程序就是你对于想让电脑干什么的描述。编译器精细化地解决把你的描述变为含蓄的机器语言。（对于编译器做多少工作的测量显示，它可以从你1KB的源码文件创造出来60KB的可执行程序）即使一个简单的C语言程序也需要很多的机器语言来代表它们。）因为编译器并没有智能，你必须使用编译器的词汇来描述你的意思，而且这些词汇是由C语言标准设立的正规规则。（即使很受限制，还是比直接用机器语言来表达强的多了！）\n\n编译器期望着收到以独特的形式写出的指令，这一章已经详细地描述了。你作为编程人员的工作就是表达在编译器框架下你对于程序应该如何运作的想法-由C语言标准所引导就可以正确地运行。\n\n# 回顾问题\n\n4. Indiana Sloth准备了如下的程序，让你看一看是不是正确，请帮帮他吧。\n\n![问题4](/img/quest4.png)\n\nmain函数用了{}来括起来，函数体用的是括号，是错的。\n声明语句没加分号，赋值只需要一个=号即可。\n是printf而不是print。没加双引号，没加引用列表。最后没结束。stdio.h打错了而且#和<>，注释另一边写反了，导致全文为注释。\n\n5.假设下面的每一个例子都是完整程序的一部分，它们每一个会打印什么呢?\n\n![问题5](/img/quest5.png)\n\n```Bash\n#a.\nBaa Baa Black Sheep.Have you any wool?\n\n#b.\nBegone!\ncreature of lard!\n#c.\nWhat?\nNo/nBonzo?\n\n#d.\n2 + 2 = 4\n```\n\n6. 下面哪些是C语言关键字？ `main, int, function, char, =`\nint、char\n\n7. 你会如何把**行数**与**字数**打印出来？\n在以下的形式中`There were 3020 words and 350 lines.`\n\n```C\nword = 3020;\nline = 350;\nprintf(\"There were %d words and %d lines.\", word, line);\n```\n\n8. 思考下面的程序\n![问题8](/img/quest8.png)\n在第7行之后的程序状态是什么？\n第八与第九行呢？\n\n> 第7行 a = 5，b = 2\n\n> 第8行 a = 5， b = 5\n\n> 第9行 a = 5， b = 5\n\n# 编程训练\n\n只是阅读是不够的，你得尝试写一两个简单的程序来看看是不是写程序和你看这一章的感觉一样流畅。下面有一些建议，但是你也确实需要独立思考一些问题。你会在网站上找到下面选出问题的答案。\n\n1. 调用一次printf，把你的姓与名在一行中输出\n\t再调用一次printf，把你的姓与名在两行中输出。\n\t使用两次printf把你的姓和名在一行中输出。\n\n```C\n//简略一写\nprintf(\"Mike Smith\\n\");\nprintf(\"Mike\\nSmith\\n\");\nprintf(\"Mike\");\nprintf(\"Smith\\n\");\n```\n\n2. 写一个打印你的姓名与地址的程序\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tprintf(\"My name is Ywx\\n\");\n\tprintf(\"Address: Zhengzhou city in Henan province\");\n\treturn 0;\n}\n```\n\n3. 写一个把你的年龄转换成天数的程序，展示两者的值。不必关心闰年和平年。\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tint age, days;\n\tscanf(\"%d\", &age);\n\tdays = age * 365;\n\tprintf(\"%d %d\", age, days);\n\treturn 0;\n}\n```\n\n4.写一个会打印出以下语句的程序\n\n![语句](/img/four.png)\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tfor(int i = 0;i < 3;i++)\n\t\tprintf(\"For he's a jolly good fellow!\\n\");\n\tprintf(\"Which nobody can deny!\");\n\treturn 0;\n}\n```\n\n5.写一个程序，创建一个叫做`toes`的变量，把`toes`设为10，\n计算toes的二倍和平方分别是什么，并把它们打印下来\n\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\ttoes = 10;\n\tprintf(\"%d %d %d\", toes, toes * 2, toes * toes);\n\treturn 0;\n}\n```\n\n6.写一个会打印出如下的输出的程序\n\n![Smile!](/img/six.png)\n```C\n#include <stdio.h>\n\nint main(void)\n{\n\tfor(int i = 3;i >= 1;i--)\n\t{\n\t\tfor(int j = 0;j < i;j++)\n\t\t{\n\t\t\tprintf(\"Smile\");\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n\n7.写一个叫做`one_three()`的函数，这个函数应该在一行内展现文字`one`然后调用函数`two()`，接着在另一行内显示文字`three`。\n`two()`把文字`two`在一行输出。以Stating now开始，像这样。\n\n![数数](/img/last.png)\n\n```C\n#include <stdio.h>\n\nvoid two()\n{\n\tprintf(\"two\\n\");\n}\n\nvoid one_three()\n{\n\tprintf(\"one\\n\");\n\ttwo();\n\tprintf(\"three\\n\")l\n}\n\nint main(void)\n{\n\tprintf(\"starting now:\\n\");\n\tone_three();\n\treturn 0;\n}\n```\n\n> End...","slug":"C-premier-plus-Chapter-2","published":1,"updated":"2023-11-28T05:28:59.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrp133pf000258uegkhc1fbr","content":"<h1 id=\"第二章-C语言介绍\"><a href=\"#第二章-C语言介绍\" class=\"headerlink\" title=\"第二章 C语言介绍\"></a>第二章 C语言介绍</h1><blockquote>\n<p><strong>你将会在这一章学到</strong><br>    1.赋值运算符<br>    2.函数main()与printf()<br>    3.一个简单C语言程序的构成<br>    4.创造整型变量，赋值并在屏幕上显示它们的值<br>    5.换行符<code>&#39;\\n&#39;</code><br>    6.如何在程序中添加注释，让你的程序中同时拥有多个函数<br>        并能找出程序中的错误。<br>    7.关键字是什么</p>\n</blockquote>\n<p>C语言的程序是什么样子的？如果你大体浏览过这本书，你会看到很多的例子的。几乎一致的是，你会觉得C语言程序看起来很怪异，有些需要用到类似<code>&#123;，cp-&gt;tort,*ptr</code>这样的符号。随着你通读完这本书，你就会慢慢觉得这些符号不是那么陌生了，会变得更加熟悉，甚至有可能会很高兴遇见它们。在这一章中，我们从给出并解释一个简单的实例起步。同时，我们也会强调一些C语言的基本特征。</p>\n<h1 id=\"2-1-一个简单的例子\"><a href=\"#2-1-一个简单的例子\" class=\"headerlink\" title=\"2.1 一个简单的例子\"></a>2.1 一个简单的例子</h1><p>让我们先研究一个简单的C语言程序。在图2.1展示的这个程序，专门为了突出一些C语言编程的特征。在你将要读接下来对于程序的逐行解释之前，先看看图2.1，试试你是不是能够靠自己搞明白它会做什么事情。<br><img src=\"/img/example.png\" alt=\"小例子\"></p>\n<blockquote>\n<p>1.#include &lt;stdio.h&gt; 包含头文件<br>2.int main(void) 定义一个返回值为整数，输入值为空的主函数<br>{<br>int num; 定义一个名为num的整型变量<br>num &#x3D; 1; 给num赋值1</p>\n<pre><code>printf(&quot;I am a simple &quot;); 输出一行字\nprintf(&quot;computer. \\n&quot;);\n输出一个词，接在刚才的一句话之后，并换行\nprintf(&quot;My favorite number is %d because it is first.\\n&quot;,num);\nreturn 0; 返回值0，表示结束。\n</code></pre>\n<p>}</p>\n<p>注释中的三个部分：1.定义变量 2.赋值 3.使用函数</p>\n</blockquote>\n<p>如果你认为这个函数将会在你的屏幕上打印一些东西。是的，你是对的。但对于明确的什么东西将会被打印到屏幕上可能并不明显，所以我们运行这个程序，看看会发生什么。</p>\n<ul>\n<li>第一步，使用你最喜欢的编辑器<br>  或者你的编译器中最喜欢的编辑器</li>\n<li>第二步，创造一个包括了图2.1中文本的文件，<br>  并且以<code>.c</code>为结尾，从而满足你的系统对于文件名的需要。<br>  举个例子<code>first.c</code>就是合法的名称。</li>\n<li>第三步，编译并运行程序。<br>  查看第一章来得知这方面的详细过程。</li>\n</ul>\n<p>如果一切都运转良好的话，你会在屏幕上看到这样的输出。<br><img src=\"/img/%E8%BE%93%E5%87%BA.png\" alt=\"输出\"></p>\n<p>总之，这个结果并不是很惊人，但是<code>\\n</code>与<code>%d</code>的作用是什么呢？<br>程序中有几行也看起来很陌生，这就到解释的时候了。</p>\n<h1 id=\"2-2-解释这个例子\"><a href=\"#2-2-解释这个例子\" class=\"headerlink\" title=\"2.2 解释这个例子\"></a>2.2 解释这个例子</h1><p>我们会对这个例子解释两遍，第一遍（Pass1：速览大纲），强调了每一行的意义，从而你能够大体上得知发生了什么。第二遍（Pass2：程序细节），探索了特定部分的含义，并且给出了细节以便你能够更深刻地理解。</p>\n<p>图2.1总结了C语言程序的每一个部分，<br>除了我们第一个例子使用的，它们还包含着更多要素与步骤。</p>\n<h2 id=\"Pass1：速览大纲：\"><a href=\"#Pass1：速览大纲：\" class=\"headerlink\" title=\"Pass1：速览大纲：\"></a>Pass1：速览大纲：</h2><p>这一部分包括了对于程序每一行的简短解释。<br>下一部分会更加充分地探索这些主题的内容。</p>\n<blockquote>\n<p>#include &lt;stdio.h&gt; 包含另一个文件。</p>\n</blockquote>\n<p>这一行告诉编译器要从文件<code>stdio.h</code>中收集信息，这个文件是所有C语言编译器安装包的基础部分，提供了对于键盘输入与显示输出的支持。</p>\n<blockquote>\n<p>int main(void) 一个函数名</p>\n</blockquote>\n<p><img src=\"/img/analysis.png\" alt=\"对C语言程序的分析\"></p>\n<p>C语言包括一个或者多个<em><strong>函数</strong></em>，它是C语言程序的基本模块。这个程序由一个叫做<code>main</code>的函数组成，圆括号表示了<code>main()</code>是个函数的名字。<code>int</code>表明了<code>main()</code>函数会返回一个整数，<code>void</code>表明<code>main()</code>不会获取任何的参数，这些都是我们过会会深入研究的事情。现在，接受<code>void</code>与<code>int</code>是在ISO&#x2F;ANSI标准下定义<code>main()</code>函数的方法（如果你有在ISO&#x2F;ANSI标准之前的编译器，省略<code>void</code>就好，但你可能也想获取更新的版本来避免不协调。）</p>\n<blockquote>\n<p>&#x2F;* a simple program*&#x2F; 一条注释。</p>\n</blockquote>\n<p><code>/*</code>与<code>*/</code>符号框定了一条能够帮助阐明一个程序的注释，它们是只为阅读者准备的，会被编译器忽略掉。</p>\n<blockquote>\n<p>{    函数体的开头</p>\n</blockquote>\n<p>起始大括号<code>&#123;</code>标志着函数中语句的开始，<br>函数的定义由终止大括号<code>&#125;</code>结束。</p>\n<blockquote>\n<p>int num; 一个声明语句</p>\n</blockquote>\n<p>这个语句声明了你正在使用一个叫做<code>num</code>的变量，而且<code>num</code>会是<code>int</code>（integer-十进制整数）类型。</p>\n<blockquote>\n<p>num &#x3D; 1; 一个赋值语句</p>\n</blockquote>\n<p>这个语句<code>num = 1</code>把值<code>1</code>赋给叫做<code>num</code>的变量。</p>\n<blockquote>\n<p>printf(“I am a simple “); 一个调用函数的语句</p>\n</blockquote>\n<p>第一句使用了<code>printf()</code>函数来在屏幕上显示<code>I am a simple </code>这句话，把光标留在了同一行。这里的<code>printf()</code>函数是标准C语言库的一部分。它被称作一个<em><strong>函数</strong></em>，而在程序中使用一个函数叫<em><strong>调用函数</strong></em>。</p>\n<blockquote>\n<p>printf(“computer.\\n”);  另一个函数调用语句</p>\n</blockquote>\n<p>第二次调用<code>printf()</code>函数是在上一句打印下来的话后面添加了<code>computer</code>，<code>\\n</code>符号是告诉电脑要另起一行-也就是说把光标移到下一行的起始。</p>\n<blockquote>\n<p>printf(“My favorite number is %d because it is first.\\n”);</p>\n</blockquote>\n<p>最后一次使用<code>printf()</code>是基于引用的语句把<code>num</code>的数值(1)打印到屏幕上，<code>%d</code>指示电脑从哪里，以什么方式输出<code>num</code>的数值。</p>\n<blockquote>\n<p>return 0;</p>\n</blockquote>\n<p>一个C语言函数是可以提供，或者说***return(返回)***，一个数值</p>\n<blockquote>\n<p>} 结束。</p>\n</blockquote>\n<p>正像说过的，程序以终止大括号结束。</p>\n<h2 id=\"Pass2：程序细节\"><a href=\"#Pass2：程序细节\" class=\"headerlink\" title=\"Pass2：程序细节\"></a>Pass2：程序细节</h2><p>既然你已经大体了解了图2.1中的内容，我们要更详尽地研究一下它了。再一次，我们将会逐行地查看程序，为了能够培养一种更宏观的C语言编程视角，这一句我们会以每一行代码作为起点，然后一步步深入代码之后的细节。</p>\n<h3 id=\"include-指示与头文件\"><a href=\"#include-指示与头文件\" class=\"headerlink\" title=\"# include 指示与头文件\"></a># include <strong>指示与头文件</strong></h3><h4 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"# include &lt;stdio.h&gt;\"></a># include &lt;stdio.h&gt;</h4><p>这是一个程序的开始行，**#include &lt;stdio.h&gt;** 的作用就和你把<code>stdio.h</code>中所有的内容都打字写在程序#include的位置是一样的。因此，这是一个剪切粘贴的操作，在共享对于很多程序都一样的信息上，<strong>include</strong>文件提供了一种便利的方式。</p>\n<p><code>#include</code>语句是C语言<strong>预处理指令</strong>的一个范例。大体上，C语言编译器会在编译之前对于源码做一些准备工作，这在术语中称为<em><strong>预处理</strong></em></p>\n<p>在大部分上，头文件包含着编译器制作最终的可执行文件需要使用的信息。例如，它们可能会定义一些常量或者声明一些函数的名字，与它们应该被怎样使用，但是库中函数真正的代码-编译前代码，不是在头文件中的。编译器的一部分-连接器会负责找到你需要的这一部分库代码。简单地说，头文件会帮助引导编译器来正确地把程序组装起来。</p>\n<p>ISO&#x2F;ANSI标准下的C语言必须提供头文件，有些程序需要包含<code>stdio.h</code>头文件，有些不需要。对于C语言实例的记录应该包含使用的C语言标准库函数的描述，这些函数描述就确认了需要什么头文件。例如对于<code>printf()</code>的描述就表明了需要使用<code>stdio.h</code>，省略恰当的头文件可能并不会影响特定的程序，但是最好不要依赖它。这本书每一次使用库函数时，我们都会为函数使用<code>include</code>来把ISO&#x2F;ANSI标准制定的的文件包括在程序内。</p>\n<p><img src=\"/img/original.png\" alt=\"为什么输入输出不是内建函数？\"></p>\n<p>为什么输入输出并不是内建函数？<br>你有可能想知道为什么像输入输出这样基本的东西并不会被自动包含进程序中。一种回答是，并不是所有的程序都要使用I&#x2F;O（input&#x2F;output）包，而且C语言的哲学中也说到要避免承担不必要的重量。这个经济学上资源利用的准则让C语言受到嵌入式编程的欢迎-例如，为控制自动燃油系统编写代码。顺带一说，#include这一行甚至不是C语言的语句。#符号阐述了这一行是在编译器之前被预处理器处理的代码。你会在后面学习预处理指令时遇到很多例子，而且在第16章对这个主题还有更加充分的讲述。</p>\n<h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a><code>main</code>函数</h3><h4 id=\"int-main-void\"><a href=\"#int-main-void\" class=\"headerlink\" title=\"int main(void)\"></a>int main(void)</h4><p>程序的下一行声明了一个名字为<code>main</code>的函数，<code>main</code>是个挺普通的程序，但是它是唯一的选择。一个C语言程序（有些我们无需担心的例外），通常是以名叫<code>main</code>的函数开始运行的，其他函数的名字是可以随意选择的，但是作为一切的开端，<code>main</code>函数必须存在。那么圆括号呢？它们是为了确定<code>main()</code>是个函数，你会很快学习学到关于函数的更多内容。现在，记住这个函数是C语言程序的基础模块。</p>\n<p><code>int</code>是<code>main()</code>函数的返回值类型，它意味着<code>main()</code>返回的数值种类必须是十进制整数(integer)。那么返回到哪里？返回到操作系统-我们会在第六章讨论循环的时候回到这个问题上来。</p>\n<p>跟随在函数名后面的圆括号大体上囊括了需要传递给函数的信息，举个简单的例子，没有东西被传递，那么这个括号就包含着<code>void</code>-空类型（在第11章，“字符指针与字符串函数”介绍了第二种从操作系统把信息传递给<code>main()</code>函数的形式）</p>\n<p>如果你查看过很久以前的C语言代码，你会经常看到程序是以下面的形式开始的:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>C90标准勉强地包容了这个形式，但是C99没有，所以即使你现在的编译器让你写成这个样子，不要听。</p>\n<p>下面是另一种你可能会看见的形式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<p>有一些编译器是允许这样写的，但是没有一个标准把它列为一种选择，<br>因此，编译器也没有必要接受这个形式，有几种确实也没有。再一次，坚守标准的形式，你就不会在更换编译器的时候陷入困境。</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*a simple program*/</span></span><br></pre></td></tr></table></figure>\n\n<p>这一部分由&#x2F; *  * &#x2F;符号框定起来的内容就是注释，使用注释可以让一些人（包括你自己）更好地理解你的程序。C语言的一个很好的特点就是注释可以放在任何地方，甚至与它们解释的“原文内容”放在一行。长一点的知识可以放在一行甚至延伸至多行，以&#x2F; * 开始并以 * &#x2F;结束的内容都会被编译器忽略。下面是注释的合法与非法写法。</p>\n<p><img src=\"/img/comment.png\" alt=\"注释示例\"></p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><blockquote>\n<p>（1.这是一行C语言注释）<br>（2.这个注释延伸到了两行）<br>（3.你也可以这样做）<br>（4.但是这是不合法的因为没有结束符号）</p>\n</blockquote>\n<p>C99添加了注释的另一种形式，它在C++与Java中很受欢迎，这种新形式使用<code>//</code>符号来生成只在一行内的注释。</p>\n<p><img src=\"/img/newform.png\" alt=\"新形式\"></p>\n<p>因为一行的结束标志这这行注释的结束，这种方式需要在注释开始的时候添加注释符号。</p>\n<p>新形式的出现是为了响应旧形式的潜在问题，假设你有下面的代码。</p>\n<p><img src=\"/img/ihope.png\" alt=\"我希望这可以运行...\"></p>\n<p>下一次，我推断你要删除第四行<br>然后意外地把第三行删掉了，<br>然后这代码就会变成这个样子</p>\n<p><img src=\"/img/hopeagain.png\" alt=\"哦不...\"></p>\n<p>现在编译器把第一行的起始符与第四行的结束符进行配对，结果使这四行全部成为了注释，包括那本应该是代码的一部分的一行。因为<code>//</code>并不会延伸到另一行，它不会引起代码的“消失”。</p>\n<p>一些编译器有可能并不支持C99的这个特点，还有些有可能需要改变一些编译器的设置才能够应用C99的特性。</p>\n<h3 id=\"大括号、函数体与代码块\"><a href=\"#大括号、函数体与代码块\" class=\"headerlink\" title=\"大括号、函数体与代码块\"></a>大括号、函数体与代码块</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在图2.1，大括号划定了<code>main()</code>的界限。大体上，所有的C语言函数都需要使用大括号来标志着函数体的起始与结束。它们是必须出现的，所以一定不要漏了。只有大括号是起这个作用的，不要使用圆括号或者中括号。</p>\n<p>大括号还可以被用来把语句聚集在一个函数中，形成一个单元或者语句块。如果你对于Pascal，ADA，Modula-2或者Algol熟悉的话，你就会意识到大括号划定起始与结束在这些语言里也是相似的。</p>\n<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num;</span><br></pre></td></tr></table></figure>\n\n<p>程序的这一行术语中称为<em><strong>声明语句</strong></em>，声明语句是C语言的其中一个最重要的特点。这个特例声明了两件事，一是在函数的某一个部分有一个叫<code>num</code>的变量（好好笑啊哈哈，在那遥远的函数中，有个小变量。）第二，<code>int</code>声明了<code>num</code>是一个十进制整数-也就是说，没有十进制小数点。（<code>int</code>是<em><strong>数据类型</strong></em>的一个例子），编译器使用这些信息为<code>num</code>变量准备合适的内存空间。结尾的分号标志了这一行是C语言的语句或者指令。分号也是这个语句的一部分，并不只是像在Pascal里的语句之间的分隔符。</p>\n<p>C语言中，<code>int</code>是一个确定了一种数据类型的<em>关键字</em>，关键字是我们用来表达语言的单词，而且你不能把它们强占用于其他目的。例如，你不能把<code>int</code>作为函数或者是变量的名称。这些限制在语言之外就会失去作用，反而你把一只猫或者你最喜欢的孩子叫做<code>int</code>是没有问题的。（除非本地官员或者法律不准用这个名字）。</p>\n<p><code>num</code>是<em>标识符</em>的一个例子，也就是你为变量、函数或者其他实型取的名字。从而声明把特定的标识符与电脑的特定的内存区联系在了一起，而且它也建立了信息的类型，或者说数据的类型，来放在那个区域里。</p>\n<p>在C语言中，<em>所有的</em>变量都需要在被使用之前先<em>声明</em>，这也就意味着你必须对于所有在一个程序中使用的变量列出包括数据类型的声明。人们也认为声明变量是一个优秀的编程技巧，而且，在C语言中，它是必须进行的。</p>\n<p>通常来说，C语言要求在代码块的起始部分声明变量，而且其他的语句是不允许放在这之前的。也就是说，<code>main()</code>函数的函数体会是这个样子。</p>\n<p><img src=\"/img/tradition.png\" alt=\"传统方式\"></p>\n<p>C99标准学习了C++的时间，现在可以让你在代码块的任何地方声明变量。然而，你还是需要在第一次使用变量之前声明它。所以如果你的编译器支持的话，你就可以像下面这样写：</p>\n<p><img src=\"/img/C99.png\" alt=\"C99新方式(1)\"><br><img src=\"/img/C992.png\" alt=\"C99新方式(2)\"></p>\n<p>为了能够和更旧的系统兼容，这本书还是会坚持原来的标准。（一些更新的编译器只有当你设置之后才会支持C99的特点）。</p>\n<p>就此，你很可能有三个问题：</p>\n<ul>\n<li>1.数据类型是什么？</li>\n<li>2.在取名的时候我们可以怎么选择？</li>\n<li>3.为什么你需要把变量全部声明出来。<br>那就让我们探究这些问题的答案吧。</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>C语言主要处理的是这几种数据：十进制整数、字符、浮点数，仅举几例。声明一个整型或者字符类型变量可以使电脑恰当地储存、抓取与翻译数据。你会在下一章研究到更多可用的数据类型。</p>\n<h3 id=\"名字的选择\"><a href=\"#名字的选择\" class=\"headerlink\" title=\"名字的选择\"></a>名字的选择</h3><p>你应该为变量使用有意义的名字（像是<code>sheep_count</code>而不是<code>x3</code>如果你的程序是数羊的），如果名字不能达到表意的需求，那么就使用注释来解释变量代表了什么。以这种方式为程序做记录是其中一种优秀的编程技巧。</p>\n<p>你可以使用的字符要视实际情况而定。C99标准要求不多于63个字符，除非是外部的标识符。（在第12章“内存分级、链接性与储存管理”中会提到），相比于分别只能识别31个字符与6个字符的C90，这是一个巨大的提升，而且老的C语言编译器最多只能接受8个字符。事实上你可以使用更多的字符的，但是编译器会忽略它们。因此，当一个系统有着8个字符的限制时，<code>shakespeare</code>与<code>shakespencil</code>就会被认为是一样的了，因为它们的前八个字符是一样的。（如果你想要63个字符的例子，可以自己造一个）。</p>\n<p>你可以在大写字母、小写字母与下划线之间任意选择。第一个字符必须是一个字母或者一个下划线。下面是一些示范。<br><img src=\"/img/valid.png\" alt=\"示范\"><br>操作系统与C语言标准库通常会使用1或2个下划线字符，比如<code>_kcab</code>，所以最好避免自己使用它。以一个或者两个下划线字符开始的，标准的标签，比如库中的标识符，会被<em><strong>储存</strong></em>起来，也就是说，即使使用它们作为名字并没有任何的语义错误，它是会造成一些名字冲突的。</p>\n<p>C的标识符是<em><strong>区分大小写</strong></em>的，也就意味着大学字母是被看做与对应的小写字母字符不同的。因此，<code>stars</code>与<code>Stars</code>和<code>STARS</code>是不同的。</p>\n<p>为了让C语言能够更加国际化，C99使用通用字符名称机制(UCN)进行了巨大的扩充，在附录B中的参考单元VII“更广大的字符支持”，我们讨论了这些加入的部分。</p>\n<h3 id=\"声明变量的四个好处\"><a href=\"#声明变量的四个好处\" class=\"headerlink\" title=\"声明变量的四个好处\"></a>声明变量的四个好处</h3><p>一些年代更远的语言，比如FORTRAN与BASIC语言的原型版本，可以让你在没有声明的情况下使用变量。那么为什么我们不能在C语言中使用这种简单易行的方法呢？这里就是一些原因：</p>\n<ul>\n<li>把所有的变量放在一个地方能够让阅读者更容易地知道程序是关于什么的。这点好处在你给变量取有意义的名称的时候尤其明显，（就像<code>taxrate</code>与<code>r</code>），如果名字不能达意就使用注释来解释，以这种方式给程序做记录是一种良好的编程技巧。</li>\n<li>通过思考声明变量是为了什么鼓励你全心投入地去写程序之前做一些准备。程序开始需要什么类型的信息？我到底想要程序输出什么？呈现数据的最好方式是什么？</li>\n<li>声明变量有助于我们预防编程中更多难以发现又狡猾的错误之一-也就是拼错了变量的名字。举个例子，假设在一些没有声明的语言中，你写下了这个语句。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">radius1 = <span class=\"number\">20.4</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后在另一个地方，你拼错了变量名。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; circum = <span class=\"number\">6.28</span> * radiusl;</span><br></pre></td></tr></table></figure>\n\n<p>你无意地把数字<code>1</code>换成了<code>l</code>，那种语言也会创造一个<code>radiusl</code>的变量，然后用未知的值（或许是0，或许是垃圾值），<code>circum</code>就会被给予一个错误的值，而且你可能需要极其多的时间来搞清楚为什么，这在C语言是不可能出现的（除非你确实是笨到家了去定义两个这样相似的变量名），因为编译器会在radiusl出现的时候报错。</p>\n<ul>\n<li>如果你不声明变量的话，你的C语言程序是不会进行编译的。如果先前的原因没有动摇你的话，对于这一点你可就得好好想想了。</li>\n</ul>\n<p>既然你需要声明需要使用的变量，它们会到哪里呢？就像上文提过的，C语言在C99之前就要求声明需要在代码块之前完成，遵循这种把声明放在一起的做法，你就可以更容易地得知程序正在做什么。当然，把你的声明分布在各个地方也是有好处的，正像现在C99所允许的。这也就是在你赋值之前先声明变量。那让你更难以忘记给他们赋值。作为关键性的事情，许多的编译器还不支持C99的这个规则。</p>\n<h3 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>下一行的程序是一个<em><strong>赋值语句</strong></em>，C语言中的其中一种基础运算。这个例子的意思是“把值<code>1</code>赋给变量<code>num</code>，之前的<code>int num</code>”这一行在电脑内存中为<code>num</code>分配了空间，这一行也就在这个空间中储存值。如果想要的的话你可以过会给<code>num</code>赋另一个值，那也就是<code>num</code>被叫做<em><strong>变量</strong></em>的原因。需要注意的是赋值语句会把值从右边到左边传递。<br>同时，这一句也是以分号结尾的，就像图2.2中显示的。<br><img src=\"/img/assignment.png\" alt=\"赋值图示\"></p>\n<h2 id=\"printf-函数\"><a href=\"#printf-函数\" class=\"headerlink\" title=\"printf()函数\"></a><code>printf()</code>函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I am a simple &quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;computer.\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;My favorite number is %d because it is first.\\n&quot;</span>,num);</span><br></pre></td></tr></table></figure>\n<p>这些行使用了一个C标准库中叫<code>printf</code>的函数，圆括号表明了<code>printf</code>是一个函数的名字，在圆括号之中的内容就是<code>main()</code>函数向<code>printf()</code>函数传递的信息。例如，第一行就传递了这句话 <code>I am a simple</code>这样的信息叫做<em><strong>参数</strong></em>，或者更加充分地，叫做函数的<em><strong>实际参数</strong></em>（见图2.3），那么<code>printf()</code>函数会对对这种语句做些什么呢？它会抓取在双引号之间的一切，然后把文本打印在屏幕上。</p>\n<p><img src=\"/img/calling.png\" alt=\"函数调用\"></p>\n<p>第一行<code>printf()</code>是你调用函数的一个很好的例子，你只需要打字写下函数的名称，把需要的参数放在圆括号内。当程序运行到这一行时，控制流就转换到已经定义的函数（在这个例子中是<code>printf()</code>）中，然后当函数已经完成了它需要做的事情之后，控制流就又回到原来的（<em><strong>调用</strong></em>）函数-在这个例子中是<code>main()</code>。</p>\n<p>下一行的<code>printf</code>呢？它在引号中包含了<code>\\n</code>这个字符，而且它并没有被打印下来？发生了什么？<code>\\n</code>的作用其实是另起一行，<code>\\n</code>的组合体（打印下来是两个字符）就组成了<code>\\n</code>这个叫<em><strong>换行符</strong></em>的新字符。对于<code>printf()</code>它意味着“在左下角再起一行”。也就是说，打印换行符和你在常规键盘上按下<code>enter</code>键的作用是差不多的。那么为什么不在打字写<code>printf</code>的时候用<code>Enter</code>键呢？那是因为因为那只会被认为是对于你的编译器的即时的指令，而不是对于源码的指令，也就是说，当你按下<code>enter</code>键时编辑器会退出当前的行，然后另起一行。换行符，影响着程序是如何显示的。</p>\n<p>换行符是<em><strong>转义字符</strong></em>的范例，<em><strong>转义字符</strong></em>是用来呈现难以或者几乎不能通过打印显示出来的字符的。其他的还有<code>\\t</code>对应着<code>Tab</code>、<code>\\b</code>对应着<code>Backspace</code>，每一个转义字符都会由<code>\\</code>来起始，我们会在第三章：C语言与数据再回到这个话题深入研究。</p>\n<p>这也就解释了为什么三个<code>printf</code>却只有两行文字了，第一个<code>printf()</code>命令没有换行符，但是第二个与第三个是有的。</p>\n<p>最后的<code>printf()</code>又带来了另外一个异样的地方：当这行文字被打印的时候<code>%d</code>发生了什么？你应该还记得，输出是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">My favorite number is 1 because it is first.</span><br></pre></td></tr></table></figure>\n<p>啊哈，当被打印出来的时候，数字<code>1</code>就是<code>%d</code>的替换物，而且变量<code>num</code>的值就是<code>1</code>，<code>%d</code>是展示<code>num</code>的值在什么时候被打印的占位符，这一行与下面的BASIC语句是相似的：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PRINT</span> <span class=\"string\">&quot;My favorite number is &quot;</span>; num; because it is first.<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<p>事实上，C语言的版本比这个做的工作还要多一点，<code>%</code>告诉程序有一个变量需要在这个区域被输出，<code>d</code>表达了要把这个变量以十进制整数的方式输出。<code>printf</code>还可以以其他变量形式进行输出，包括十六进制数、带有十进制小数点的数。事实上，<code>printf()</code>中的<code>f</code>表明了它是一个<em><strong>格式化</strong></em>打印函数。每种数据类型都有自己的指示符，这本书也会在介绍新的数据类型的同时引入对应的指示符。</p>\n<h3 id=\"返回语句\"><a href=\"#返回语句\" class=\"headerlink\" title=\"返回语句\"></a>返回语句</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>返回语句是这个程序的最后一个语句，在<code>int main(void)</code>中的<code>int</code>意味着<code>main()</code>函数应该返回一个十进制整数。<code>main()</code>函数这样返回是C语言标准要求的。返回值的C语言函数都会使用return语句来进行这个操作，return语句包含着关键字<code>return</code>与返回的值，以一个分号结束。如果你遗漏了这一句，大多数编译器会报错，但是它们仍然会对程序进行编译。这样的话，你可以把return语句看成为了增加逻辑的连贯性的东西，但是它对于一些操作系统是由实际用处的，包括DOS和Unix，我们在第11章会更深入地对于这个话题给出解释。</p>\n<h1 id=\"2-3-简单程序的结构\"><a href=\"#2-3-简单程序的结构\" class=\"headerlink\" title=\"2.3 简单程序的结构\"></a>2.3 简单程序的结构</h1><p>既然你已经看过了具体的例子，你已经准备好了解C语言程序的一些基本规则了。<em><strong>程序</strong></em>由包含一个函数或者多个函数的组组成，其中一个必须叫<code>main()</code>对于函数的描述包括函数头与函数体，<em><strong>函数头</strong></em>包括预处理语句，如<code>#include</code>，与函数的名字。你可以通过看圆括号的方式来得知这是个函数，即使圆括号可能是空的。<em><strong>函数体</strong></em>是由大括号框定的，它包括了一系列的语句，每一个都是由一个分号结尾的（见图2.4）。在例子中有<em><strong>声明语句</strong></em>，它是用来声明变量的类型与名字的，还有<em><strong>赋值语句</strong></em>，它给予变量一个值。然后还有三个<em><strong>print语句</strong></em>，每一个都调用了<code>printf()</code>函数，这些print语句是<em><strong>函数调用语句</strong></em>的一些示范。最后<code>main()</code>函数以返回值结束。</p>\n<p>简单来说，一个简单的、标准的C语言程序应该使用下面的格式。<br><img src=\"/img/function1.png\" alt=\"图2.4\"><br><img src=\"/img/structure.png\" alt=\"标准格式\"></p>\n<h1 id=\"2-4-可读性建议\"><a href=\"#2-4-可读性建议\" class=\"headerlink\" title=\"2.4 可读性建议\"></a>2.4 可读性建议</h1><p>使你的程序变得更可读是一种优秀的编程实践。可读性高的程序很容易理解，也就很容易去修改、纠正。让一个程序变得可读的过程也帮助你理清你对于程序执行自己的概念。</p>\n<p>你已经看过两种可以增加可读性的技巧了：选择变量名与使用注释。注意这两种技巧是相互补充的。如果你给一个变量注名<code>width</code>，你就不需要对于这个变量表示什么做任何解释了。但是叫做<code>video_routine_4</code>的变量就需要对于video routine 4的解释。</p>\n<p>另一个技巧是使用空行来分隔函数中的概念模块。例如，简单的实例程序就使用了空行分开了声明部分与行动部分。C语言不需要空行，但是它能够提高可读性。</p>\n<p>第四个技巧就是每行使用一个语句。再一次，这是一个针对于可读性的惯例，并不是C语言的要求。C语言的格式是<em><strong>形式自由</strong></em>的，你可以把几句话放在一行或者一直延伸到第二行。下面的代码是合法的，但是看起来很丑。<br><img src=\"/img/poorreadability.png\" alt=\"丑\"><br>分号向编译器指示了一个语句什么时候结束和下一句什么时候开始。但是如果你能够遵从这种在本章的例子中使用的传统手法，程序的逻辑会清晰很多。（见图2.5）<br><img src=\"/img/readable.png\" alt=\"可读性规范\"></p>\n<h1 id=\"2-5-更进一步\"><a href=\"#2-5-更进一步\" class=\"headerlink\" title=\"2.5 更进一步\"></a>2.5 更进一步</h1><p>我们的第一个C语言例子还是很简单的，接下来的图2.2就是第二个例子，但也并不是非常难。</p>\n<p><img src=\"/img/example2.png\" alt=\"例子\"></p>\n<p>新在哪里呢？代码中提供了对于程序的描述（在注释中），声明了很多变量，做了一些乘法运算，然后把这两个变量的值打印下来，让我们把这些点深入地了解一下。</p>\n<h2 id=\"记录-Documentation\"><a href=\"#记录-Documentation\" class=\"headerlink\" title=\"记录 Documentation\"></a>记录 Documentation</h2><p>第一，程序是以注释开始的（使用的是新的注释形式），它确定了文件名与程序的目的。这种程序的记录只花费一分钟就可以做，而且之后会在你浏览多个文件并打印它们的时候起到很大帮助。</p>\n<h2 id=\"多行声明-Multiple-Declarations\"><a href=\"#多行声明-Multiple-Declarations\" class=\"headerlink\" title=\"多行声明 Multiple Declarations\"></a>多行声明 Multiple Declarations</h2><p>然后，程序在一行中声明了两个而不是一个变量。为了达成这个目的，可以把两个变量（<code>feet</code>与<code>fathoms</code>）的声明使用一个逗号隔开，也就是下面这样。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> feet, fathoms;</span><br></pre></td></tr></table></figure>\n\n<p>它和下面的形式是等价的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> feet;</span><br><span class=\"line\"><span class=\"type\">int</span> fathoms;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运算-Multiplication\"><a href=\"#运算-Multiplication\" class=\"headerlink\" title=\"运算 Multiplication\"></a>运算 Multiplication</h2><p>第三步，程序进行运算，它利用了计算机系统庞大的算力来计算2乘6。<br>在C语言中，同样也在很多语言中，<code>*</code>是乘法运算的符号。<br>因此，下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feet = <span class=\"number\">6</span> * fathoms;</span><br></pre></td></tr></table></figure>\n\n<p>它的意思就是：查看<code>fathoms</code>的值，乘以6，然后把这个运算的结果的值赋给变量<code>feet</code>。</p>\n<h2 id=\"打印多个值-Printing-Multiple-Values\"><a href=\"#打印多个值-Printing-Multiple-Values\" class=\"headerlink\" title=\"打印多个值 Printing Multiple Values\"></a>打印多个值 Printing Multiple Values</h2><p>最终，程序更多样地使用了<code>printf()</code>如果你编译运行过这个例子，输出应该是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">There are 12 feet <span class=\"keyword\">in</span> 2 fathoms！</span><br><span class=\"line\">Yes, I said 12 feet!</span><br></pre></td></tr></table></figure>\n\n<p>这一次，代码在第一次使用<code>printf()</code>的时候，使用了两次替代符，在双引号中的第一个<code>%d</code>被在后面引用列表的第一个变量的值替换了(<code>feet</code>)然后第二个<code>%d</code>被第二个变量代替了。要注意的是待打印变量列表是在双引号部分后面，另外也注意每一个都是用括号分开的。</p>\n<p>第二次使用<code>printf()</code>表明了打印的值并不一定是变量的，只是必须要指定一个值，就像<code>6 * fathoms</code>这样，可以是恰当类型的值。</p>\n<p>这个程序受篇幅不长，但是它可以呈现把fathoms转换到feet的核心。我们需要的就是动态地去赋其他的值给<code>feet</code>我们会在以后的章节解释如何做。</p>\n<h1 id=\"2-6-顺便一提：多重函数\"><a href=\"#2-6-顺便一提：多重函数\" class=\"headerlink\" title=\"2.6 顺便一提：多重函数\"></a>2.6 顺便一提：多重函数</h1><p>目前为止，这些程序已经使用过了基本的<code>printf()</code>函数。图2.3向你展示了如何把自己的函数-除了<code>main()</code>以外的函数-加到程序里。</p>\n<p><img src=\"/img/twofunc.png\" alt=\"两个函数的程序\"></p>\n<p>输出是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I will summon the butler <span class=\"keyword\">function</span>.</span><br><span class=\"line\">You rang, sir?</span><br><span class=\"line\">Yes,Bring me some tea and writeable CD-ROMS.</span><br></pre></td></tr></table></figure>\n\n<p><code>butler()</code>函数在程序中出现了三次，第一次出现是在<em><strong>原型</strong></em>中，那告诉了编译器要使用的函数。第二次出现是在<code>main()</code>函数中，在<em><strong>函数调用</strong></em>中出现，最终，程序呈现了<em><strong>函数的定义</strong></em>过程，那是函数本身的源码。让我们再来看看这三次出现。</p>\n<p>C90标准添加了原型，老翻译器可能并不能识别它们（我们将会讲到当你使用那种编译器的时候要怎么做。）原型就是一种告诉编译器你正在使用一个特定的函数的声明。它也指定了函数的属性。例如，<code>butler()</code>函数的第一个词<code>void</code>指明了它没有返回值。（大体上，函数可以为了使用值而返回这些值，但<code>butler</code>没有），第二个<code>void</code>-在<code>butler(void)</code>-的意思是它没有参数。因此，当编译到达<code>main()</code>函数中<code>butler</code>被使用的这一行时，它会检查是否<code>butler</code>是被恰当地使用的。需要注意，<code>void</code>是被用来表示empty（空），而不是invalid（不合法、无效）。</p>\n<p>早先的C语言支持的函数声明类型有限，那时你只能定下返回值的类型，但是对于参数的描述就被省略。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">butler</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<p>那时的C语言代码使用的函数声明就像是上述的样子，而不是函数原型，C90与C99标准都能够辨认出这种更老的形式，但是它们表示这种形式会随着时间被淘汰，所以不要用。如果你从一些更老的地方拿到了C语言代码，你有可能想要把老式的声明变成原型。以后的章节会回到原型制作、函数声明与返回值上。</p>\n<p>接下来，你通过给出<code>butler</code>的名字与圆括号来援引函数。（调用），当<code>butler</code>完成了它的工作，程序就会移向<code>main()</code>函数中的下一行。</p>\n<p>最终，函数<code>butler()</code>以与<code>main()</code>函数一样的形式被定义，有函数头与用大括号框定的函数体。函数头重复了你在原型中提供的信息：<code>butler</code>不使用信息，而且不返回值。对于老旧的编译器，省略第二个<code>void</code>。</p>\n<p>有一点需要注意的，就是在<code>main()</code>函数中<code>butler()</code>被调用的位置-而不是<code>butler()</code>函数被定义的位置-决定了<code>butler()</code>函数的运行位置。比如，你可以把<code>butler()</code>函数的定义放在<code>main()</code>函数的前面，程序还是会照旧那样把<code>butler()</code>放在两个<code>printf()</code>中间运行。记住，所有的C语言程序都是以<code>main()</code>函数开始的，无论<code>main()</code>函数在程序文件的什么位置。然而，C语言实际上是先把<code>main()</code>函数列出来，因为它通常提供了基本的程序框架。</p>\n<p>C语言标准建议你为所有你使用的函数提供原型，标准的<code>include</code>文件为标准库函数做这个工作，例如，在标准C语言下，<code>stdio.h</code>文件就有<code>printf()</code>函数的原型，第六章的最后一个例子会告诉你如何去更广泛地为非<code>void</code>的函数制作原型，第九章会全面地讲述函数。</p>\n<h1 id=\"2-7-调试引入\"><a href=\"#2-7-调试引入\" class=\"headerlink\" title=\"2.7 调试引入\"></a>2.7 调试引入</h1><p>现在你已经可以写一个简单的C语言程序了，你有可能海域犯些简单的错误。程序的错误通常被叫做<em><strong>bugs</strong></em>，寻找与修复它们就叫做<em><strong>调试</strong></em>，图2.4就展现了有些bugs的程序，看看你是否能够找到。</p>\n<p><img src=\"/img/nogood.png\" alt=\"找找吧，有几处？\"></p>\n<h2 id=\"语法错误-Syntax-Errors\"><a href=\"#语法错误-Syntax-Errors\" class=\"headerlink\" title=\"语法错误 Syntax Errors\"></a>语法错误 Syntax Errors</h2><p>图2.4的例子犯了几个语法错误，当你没有遵循C语言的规则，你就会犯<em><strong>语法错误</strong></em>，这也可以类比到英语的语法错误。例如，思考一下这句话：<em><strong>Bugs frustrate be can.</strong></em> 这句话使用的单词是正确的，但是并没有遵循单词顺序的规律，而且使用的单词形式也不太对，不管怎样，C语言的语法错误就是在错误的地方使用了正确的C语言标志。</p>\n<p>所以<code>nogood.c</code>这个程序究竟犯了什么错误呢？第一，它使用的是括号而不是大括号来标记函数体，也是把正确的C语言符号用在了错误的地方，第二，声明应该是这个样子的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, n2, n3;</span><br></pre></td></tr></table></figure>\n\n<p>或者这样</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> n2;</span><br><span class=\"line\"><span class=\"type\">int</span> n3;</span><br></pre></td></tr></table></figure>\n\n<p>而且，这个例子遗漏了安置一条注释必须要使用的<code>*/</code>符号对（作为替换，你可以用<code>//</code>形式替换<code>/*</code>），最后，它遗漏了<code>printf()</code>后的本应作为语句结束标志的分号。</p>\n<p>你如何来检查语法错误呢？第一，在编译之前，浏览你的源码，看你是否看到一些明显的错误。第二，你可以检查编译器找到的错误，因为它的一部分工作就是检查语义错误。当你编译程序的时候，编译器会反馈找到的所有错误，并且会明确错误类型与出错的位置。</p>\n<p>然而，编译器有时也会混乱，实际上的一个区域内的语义错误有可能会让编译器错误地认为它找到了其他种类的错误。例如，因为这个例子没有恰当地声明<code>n2</code>与<code>n3</code>，所以编译器会认为它在被使用的地方找到了错误。事实上，与其试图一次把所有报告的错误修正过来，不如只修改一两个然后重新编译，这样的话有些其他种类的错误就会消失。继续这样做，直到程序正常运行。另一个常见的编译器“诡计”是它会在后面的行报错，但其实出错是在前面的行里。例如，编译器有可能直到下一行才能判断出上一行遗漏了分号。所以如果编译器报错说缺少分号，那么在这一行之前进行检查。</p>\n<h2 id=\"语义错误-Semantic-Errors\"><a href=\"#语义错误-Semantic-Errors\" class=\"headerlink\" title=\"语义错误 Semantic Errors\"></a>语义错误 Semantic Errors</h2><p>语义错误是在意义上的错误，例如，思考这一句话: <em><strong>Furry inflation thinks greenly.</strong></em>  语法上是正确的，因为形容词、名词、动词、还有副词都在合适的位置上，但这句话就是一派胡言。在C语言中，当你遵循了C语言的规则但是导致了不合适的结果，这个例子中就有这样的错误。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n3 = n2 * n2;</span><br></pre></td></tr></table></figure>\n\n<p>n3本应该是用来展现<code>n</code>的3次方的，结果程序把它算成了<code>n</code>的4次方。编译器是检测不出来语义错误的，因为它们并不违背C语言的规则。编译器没有能力去猜测你程序的意图。那也就只能由你来找到这些种类的错误了。一种方式是把程序做的事情与程序应该做的事情进行对比。例如，假定你已经找到了例子中的语法错误，那么它现在看起来是这个图2.5样子的。</p>\n<p><img src=\"/img/stillbad.png\" alt=\"还是错的...\"></p>\n<p>它的输出是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = 5, n squared = 25, n cubed = 625 </span><br></pre></td></tr></table></figure>\n\n<p>如果你可以口算立方的话，那么你就会注意到625是个错误的值。下一阶段就是找到你是如何陷入这个错误的。例如，你有可能会通过观察找到错误。大体上，然而你还需要一些系统的方法。一种方法是假装你是电脑，然后一步步地跟着程序走，让我们现在就尝试一下那个方法。</p>\n<p>程序体以声明三个变量<code>n1, n2与n3</code>开始，你可以通过画三个盒子并把它们各自标注名称来模拟这个情况。（看图2.6）然后，程序会把5赋给<code>n</code>，通过把数字5写在盒子里来模拟，然后，程序用<code>n</code>乘<code>n</code>然后把它的值赋给<code>n2</code>，所以看向盒子<code>n</code>，看着5乘5得到了25，然后把25放在盒子里。为了模拟下一句，也是同样，看向盒子2，然后用25乘25，然后把这个值给予<code>n3</code>，啊哈，你做乘法的时候使用的是<code>n</code>的平方而不是用<code>n</code>。</p>\n<p>嗯，有可能这个过程对于这个程序有点过了，但是以这种方式一步步地浏览程序总会是得知发生了什么最好的方法。</p>\n<h2 id=\"程序状态\"><a href=\"#程序状态\" class=\"headerlink\" title=\"程序状态\"></a>程序状态</h2><p>通过手工地一步步地追踪程序，追踪每一个变量，你监视了程序的状态，<strong>程序状态</strong>就是所有变量在一个时间点上被给予的一组值。它是运算状态的快照。</p>\n<p><img src=\"/img/tracer.png\" alt=\"追踪程序状态\"></p>\n<p>我们刚刚讨论了一种追踪程序状态的方法：通过自己一步一步地运行程序。在一个进行1000次迭代的程序中，你可能觉得并不能完成那个工作。然而，你还是可以经历一些迭代过程，看看你的程序是不是按你想要的方式来运行的。然而，通常是会有这种情况的，你会按照你想要的方式去“执行”它们，而不是真正把它们写下来，所以在写真正的代码的时候要努力做到正确。</p>\n<p>另一个方法就是通过在程序的自始至终放置几个<code>printf</code>语句来定位语义问题。在程序运行的关键点监测选定变量的数值。看看数值是怎么变化的可以让你知道正在发生什么。在你让程序按照你满意的方式运行之后，你就可以去掉多余的语句去重新编译了。</p>\n<p>第三种监测的方法就是使用调试器。<em><strong>Debugger</strong></em>是一种能够让你一步一步地运行程序并且查看程序变量的值的程序。它们使用的难易程度与复杂度都各有不同。更高级的编译器可以显示哪一行代码正在被运行。这对于多路径的程序是非常方便的，因为可以很容易地看到走的是哪一条路径。如果你的编译器中有调试器，那么花谢时间学学则呢么使用吧。比如像图2.4那样尝试使用它。</p>\n<h1 id=\"2-8-关键字与内置标识符\"><a href=\"#2-8-关键字与内置标识符\" class=\"headerlink\" title=\"2.8 关键字与内置标识符\"></a>2.8 关键字与内置标识符</h1><p>关键字就是C语言中的词汇，因为它们对于C语言是特别的，所以你不能把它们作为标识符来使用。有一些关键字分别了多种多样的类型，比如说<code>int</code>，其他的比如说<code>if</code>是被用来控制程序运行语句的顺序的。在以下的C语言关键字的列表中，黑体表示在ISO&#x2F;ANSI C90标准下的关键字，斜体的是C99标准加入的新关键字</p>\n<p><img src=\"/img/keywords.png\" alt=\"关键字\"></p>\n<p>如果你尝试把关键字用于变量的名字，编译器会把它识别为语法错误，还有其他的标识符，它们叫做<em><strong>内建标识符</strong></em>，你也是不应该使用的，他们不会导致语法错误，因为它们是合法的名称，但是语言已经使用过或者还保留着使用它们的权利，所以如果你使用这些标识符来表示其他的东西会引起问题。内置的标识符包括以下划线开始的词还有库函数的名称，就像<code>printf()</code>.</p>\n<h1 id=\"关键概念\"><a href=\"#关键概念\" class=\"headerlink\" title=\"关键概念\"></a>关键概念</h1><p>电脑编程是一项有挑战性的活动，它需要复杂与概念化的思考，而且还需要对于细节格外注意。你会发现编译器会强制你去注意细节。当你对朋友说话的时候，你可能会把几个词用错，犯几个语法错误，可能话没有说完，但是你的朋友仍然能够理解你在说什么。但是编译器不会允许这种情况。对于编译器来说，几乎对了也是错的。</p>\n<p>编译器并不能在概念问题帮到你多少，比如在这里说的这些东西。所以这本书会尽力通过给出每一章关键概念的大纲来弥合那个差距。</p>\n<p>对这一章，你的目标是你需要理解C语言程序是什么，你可以认为程序就是你对于想让电脑干什么的描述。编译器精细化地解决把你的描述变为含蓄的机器语言。（对于编译器做多少工作的测量显示，它可以从你1KB的源码文件创造出来60KB的可执行程序）即使一个简单的C语言程序也需要很多的机器语言来代表它们。）因为编译器并没有智能，你必须使用编译器的词汇来描述你的意思，而且这些词汇是由C语言标准设立的正规规则。（即使很受限制，还是比直接用机器语言来表达强的多了！）</p>\n<p>编译器期望着收到以独特的形式写出的指令，这一章已经详细地描述了。你作为编程人员的工作就是表达在编译器框架下你对于程序应该如何运作的想法-由C语言标准所引导就可以正确地运行。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><ol start=\"4\">\n<li>Indiana Sloth准备了如下的程序，让你看一看是不是正确，请帮帮他吧。</li>\n</ol>\n<p><img src=\"/img/quest4.png\" alt=\"问题4\"></p>\n<p>main函数用了{}来括起来，函数体用的是括号，是错的。<br>声明语句没加分号，赋值只需要一个&#x3D;号即可。<br>是printf而不是print。没加双引号，没加引用列表。最后没结束。stdio.h打错了而且#和&lt;&gt;，注释另一边写反了，导致全文为注释。</p>\n<p>5.假设下面的每一个例子都是完整程序的一部分，它们每一个会打印什么呢?</p>\n<p><img src=\"/img/quest5.png\" alt=\"问题5\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#a.</span></span><br><span class=\"line\">Baa Baa Black Sheep.Have you any wool?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#b.</span></span><br><span class=\"line\">Begone!</span><br><span class=\"line\">creature of lard!</span><br><span class=\"line\"><span class=\"comment\">#c.</span></span><br><span class=\"line\">What?</span><br><span class=\"line\">No/nBonzo?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#d.</span></span><br><span class=\"line\">2 + 2 = 4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><p>下面哪些是C语言关键字？ <code>main, int, function, char, =</code><br>int、char</p>\n</li>\n<li><p>你会如何把<strong>行数</strong>与<strong>字数</strong>打印出来？<br>在以下的形式中<code>There were 3020 words and 350 lines.</code></p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">word = <span class=\"number\">3020</span>;</span><br><span class=\"line\">line = <span class=\"number\">350</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;There were %d words and %d lines.&quot;</span>, word, line);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>思考下面的程序<br><img src=\"/img/quest8.png\" alt=\"问题8\"><br>在第7行之后的程序状态是什么？<br>第八与第九行呢？</li>\n</ol>\n<blockquote>\n<p>第7行 a &#x3D; 5，b &#x3D; 2</p>\n</blockquote>\n<blockquote>\n<p>第8行 a &#x3D; 5， b &#x3D; 5</p>\n</blockquote>\n<blockquote>\n<p>第9行 a &#x3D; 5， b &#x3D; 5</p>\n</blockquote>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>只是阅读是不够的，你得尝试写一两个简单的程序来看看是不是写程序和你看这一章的感觉一样流畅。下面有一些建议，但是你也确实需要独立思考一些问题。你会在网站上找到下面选出问题的答案。</p>\n<ol>\n<li>调用一次printf，把你的姓与名在一行中输出<br> 再调用一次printf，把你的姓与名在两行中输出。<br> 使用两次printf把你的姓和名在一行中输出。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简略一写</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike Smith\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike\\nSmith\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Smith\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>写一个打印你的姓名与地址的程序</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;My name is Ywx\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Address: Zhengzhou city in Henan province&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>写一个把你的年龄转换成天数的程序，展示两者的值。不必关心闰年和平年。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age, days;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;age);</span><br><span class=\"line\">\tdays = age * <span class=\"number\">365</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, age, days);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.写一个会打印出以下语句的程序</p>\n<p><img src=\"/img/four.png\" alt=\"语句\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;For he&#x27;s a jolly good fellow!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Which nobody can deny!&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.写一个程序，创建一个叫做<code>toes</code>的变量，把<code>toes</code>设为10，<br>计算toes的二倍和平方分别是什么，并把它们打印下来</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttoes = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, toes, toes * <span class=\"number\">2</span>, toes * toes);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.写一个会打印出如下的输出的程序</p>\n<p><img src=\"/img/six.png\" alt=\"Smile!\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">3</span>;i &gt;= <span class=\"number\">1</span>;i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt; i;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Smile&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7.写一个叫做<code>one_three()</code>的函数，这个函数应该在一行内展现文字<code>one</code>然后调用函数<code>two()</code>，接着在另一行内显示文字<code>three</code>。<br><code>two()</code>把文字<code>two</code>在一行输出。以Stating now开始，像这样。</p>\n<p><img src=\"/img/last.png\" alt=\"数数\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">two</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;two\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">one_three</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;one\\n&quot;</span>);</span><br><span class=\"line\">\ttwo();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;three\\n&quot;</span>)l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;starting now:\\n&quot;</span>);</span><br><span class=\"line\">\tone_three();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>End…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第二章-C语言介绍\"><a href=\"#第二章-C语言介绍\" class=\"headerlink\" title=\"第二章 C语言介绍\"></a>第二章 C语言介绍</h1><blockquote>\n<p><strong>你将会在这一章学到</strong><br>    1.赋值运算符<br>    2.函数main()与printf()<br>    3.一个简单C语言程序的构成<br>    4.创造整型变量，赋值并在屏幕上显示它们的值<br>    5.换行符<code>&#39;\\n&#39;</code><br>    6.如何在程序中添加注释，让你的程序中同时拥有多个函数<br>        并能找出程序中的错误。<br>    7.关键字是什么</p>\n</blockquote>\n<p>C语言的程序是什么样子的？如果你大体浏览过这本书，你会看到很多的例子的。几乎一致的是，你会觉得C语言程序看起来很怪异，有些需要用到类似<code>&#123;，cp-&gt;tort,*ptr</code>这样的符号。随着你通读完这本书，你就会慢慢觉得这些符号不是那么陌生了，会变得更加熟悉，甚至有可能会很高兴遇见它们。在这一章中，我们从给出并解释一个简单的实例起步。同时，我们也会强调一些C语言的基本特征。</p>\n<h1 id=\"2-1-一个简单的例子\"><a href=\"#2-1-一个简单的例子\" class=\"headerlink\" title=\"2.1 一个简单的例子\"></a>2.1 一个简单的例子</h1><p>让我们先研究一个简单的C语言程序。在图2.1展示的这个程序，专门为了突出一些C语言编程的特征。在你将要读接下来对于程序的逐行解释之前，先看看图2.1，试试你是不是能够靠自己搞明白它会做什么事情。<br><img src=\"/img/example.png\" alt=\"小例子\"></p>\n<blockquote>\n<p>1.#include &lt;stdio.h&gt; 包含头文件<br>2.int main(void) 定义一个返回值为整数，输入值为空的主函数<br>{<br>int num; 定义一个名为num的整型变量<br>num &#x3D; 1; 给num赋值1</p>\n<pre><code>printf(&quot;I am a simple &quot;); 输出一行字\nprintf(&quot;computer. \\n&quot;);\n输出一个词，接在刚才的一句话之后，并换行\nprintf(&quot;My favorite number is %d because it is first.\\n&quot;,num);\nreturn 0; 返回值0，表示结束。\n</code></pre>\n<p>}</p>\n<p>注释中的三个部分：1.定义变量 2.赋值 3.使用函数</p>\n</blockquote>\n<p>如果你认为这个函数将会在你的屏幕上打印一些东西。是的，你是对的。但对于明确的什么东西将会被打印到屏幕上可能并不明显，所以我们运行这个程序，看看会发生什么。</p>\n<ul>\n<li>第一步，使用你最喜欢的编辑器<br>  或者你的编译器中最喜欢的编辑器</li>\n<li>第二步，创造一个包括了图2.1中文本的文件，<br>  并且以<code>.c</code>为结尾，从而满足你的系统对于文件名的需要。<br>  举个例子<code>first.c</code>就是合法的名称。</li>\n<li>第三步，编译并运行程序。<br>  查看第一章来得知这方面的详细过程。</li>\n</ul>\n<p>如果一切都运转良好的话，你会在屏幕上看到这样的输出。<br><img src=\"/img/%E8%BE%93%E5%87%BA.png\" alt=\"输出\"></p>\n<p>总之，这个结果并不是很惊人，但是<code>\\n</code>与<code>%d</code>的作用是什么呢？<br>程序中有几行也看起来很陌生，这就到解释的时候了。</p>\n<h1 id=\"2-2-解释这个例子\"><a href=\"#2-2-解释这个例子\" class=\"headerlink\" title=\"2.2 解释这个例子\"></a>2.2 解释这个例子</h1><p>我们会对这个例子解释两遍，第一遍（Pass1：速览大纲），强调了每一行的意义，从而你能够大体上得知发生了什么。第二遍（Pass2：程序细节），探索了特定部分的含义，并且给出了细节以便你能够更深刻地理解。</p>\n<p>图2.1总结了C语言程序的每一个部分，<br>除了我们第一个例子使用的，它们还包含着更多要素与步骤。</p>\n<h2 id=\"Pass1：速览大纲：\"><a href=\"#Pass1：速览大纲：\" class=\"headerlink\" title=\"Pass1：速览大纲：\"></a>Pass1：速览大纲：</h2><p>这一部分包括了对于程序每一行的简短解释。<br>下一部分会更加充分地探索这些主题的内容。</p>\n<blockquote>\n<p>#include &lt;stdio.h&gt; 包含另一个文件。</p>\n</blockquote>\n<p>这一行告诉编译器要从文件<code>stdio.h</code>中收集信息，这个文件是所有C语言编译器安装包的基础部分，提供了对于键盘输入与显示输出的支持。</p>\n<blockquote>\n<p>int main(void) 一个函数名</p>\n</blockquote>\n<p><img src=\"/img/analysis.png\" alt=\"对C语言程序的分析\"></p>\n<p>C语言包括一个或者多个<em><strong>函数</strong></em>，它是C语言程序的基本模块。这个程序由一个叫做<code>main</code>的函数组成，圆括号表示了<code>main()</code>是个函数的名字。<code>int</code>表明了<code>main()</code>函数会返回一个整数，<code>void</code>表明<code>main()</code>不会获取任何的参数，这些都是我们过会会深入研究的事情。现在，接受<code>void</code>与<code>int</code>是在ISO&#x2F;ANSI标准下定义<code>main()</code>函数的方法（如果你有在ISO&#x2F;ANSI标准之前的编译器，省略<code>void</code>就好，但你可能也想获取更新的版本来避免不协调。）</p>\n<blockquote>\n<p>&#x2F;* a simple program*&#x2F; 一条注释。</p>\n</blockquote>\n<p><code>/*</code>与<code>*/</code>符号框定了一条能够帮助阐明一个程序的注释，它们是只为阅读者准备的，会被编译器忽略掉。</p>\n<blockquote>\n<p>{    函数体的开头</p>\n</blockquote>\n<p>起始大括号<code>&#123;</code>标志着函数中语句的开始，<br>函数的定义由终止大括号<code>&#125;</code>结束。</p>\n<blockquote>\n<p>int num; 一个声明语句</p>\n</blockquote>\n<p>这个语句声明了你正在使用一个叫做<code>num</code>的变量，而且<code>num</code>会是<code>int</code>（integer-十进制整数）类型。</p>\n<blockquote>\n<p>num &#x3D; 1; 一个赋值语句</p>\n</blockquote>\n<p>这个语句<code>num = 1</code>把值<code>1</code>赋给叫做<code>num</code>的变量。</p>\n<blockquote>\n<p>printf(“I am a simple “); 一个调用函数的语句</p>\n</blockquote>\n<p>第一句使用了<code>printf()</code>函数来在屏幕上显示<code>I am a simple </code>这句话，把光标留在了同一行。这里的<code>printf()</code>函数是标准C语言库的一部分。它被称作一个<em><strong>函数</strong></em>，而在程序中使用一个函数叫<em><strong>调用函数</strong></em>。</p>\n<blockquote>\n<p>printf(“computer.\\n”);  另一个函数调用语句</p>\n</blockquote>\n<p>第二次调用<code>printf()</code>函数是在上一句打印下来的话后面添加了<code>computer</code>，<code>\\n</code>符号是告诉电脑要另起一行-也就是说把光标移到下一行的起始。</p>\n<blockquote>\n<p>printf(“My favorite number is %d because it is first.\\n”);</p>\n</blockquote>\n<p>最后一次使用<code>printf()</code>是基于引用的语句把<code>num</code>的数值(1)打印到屏幕上，<code>%d</code>指示电脑从哪里，以什么方式输出<code>num</code>的数值。</p>\n<blockquote>\n<p>return 0;</p>\n</blockquote>\n<p>一个C语言函数是可以提供，或者说***return(返回)***，一个数值</p>\n<blockquote>\n<p>} 结束。</p>\n</blockquote>\n<p>正像说过的，程序以终止大括号结束。</p>\n<h2 id=\"Pass2：程序细节\"><a href=\"#Pass2：程序细节\" class=\"headerlink\" title=\"Pass2：程序细节\"></a>Pass2：程序细节</h2><p>既然你已经大体了解了图2.1中的内容，我们要更详尽地研究一下它了。再一次，我们将会逐行地查看程序，为了能够培养一种更宏观的C语言编程视角，这一句我们会以每一行代码作为起点，然后一步步深入代码之后的细节。</p>\n<h3 id=\"include-指示与头文件\"><a href=\"#include-指示与头文件\" class=\"headerlink\" title=\"# include 指示与头文件\"></a># include <strong>指示与头文件</strong></h3><h4 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"# include &lt;stdio.h&gt;\"></a># include &lt;stdio.h&gt;</h4><p>这是一个程序的开始行，**#include &lt;stdio.h&gt;** 的作用就和你把<code>stdio.h</code>中所有的内容都打字写在程序#include的位置是一样的。因此，这是一个剪切粘贴的操作，在共享对于很多程序都一样的信息上，<strong>include</strong>文件提供了一种便利的方式。</p>\n<p><code>#include</code>语句是C语言<strong>预处理指令</strong>的一个范例。大体上，C语言编译器会在编译之前对于源码做一些准备工作，这在术语中称为<em><strong>预处理</strong></em></p>\n<p>在大部分上，头文件包含着编译器制作最终的可执行文件需要使用的信息。例如，它们可能会定义一些常量或者声明一些函数的名字，与它们应该被怎样使用，但是库中函数真正的代码-编译前代码，不是在头文件中的。编译器的一部分-连接器会负责找到你需要的这一部分库代码。简单地说，头文件会帮助引导编译器来正确地把程序组装起来。</p>\n<p>ISO&#x2F;ANSI标准下的C语言必须提供头文件，有些程序需要包含<code>stdio.h</code>头文件，有些不需要。对于C语言实例的记录应该包含使用的C语言标准库函数的描述，这些函数描述就确认了需要什么头文件。例如对于<code>printf()</code>的描述就表明了需要使用<code>stdio.h</code>，省略恰当的头文件可能并不会影响特定的程序，但是最好不要依赖它。这本书每一次使用库函数时，我们都会为函数使用<code>include</code>来把ISO&#x2F;ANSI标准制定的的文件包括在程序内。</p>\n<p><img src=\"/img/original.png\" alt=\"为什么输入输出不是内建函数？\"></p>\n<p>为什么输入输出并不是内建函数？<br>你有可能想知道为什么像输入输出这样基本的东西并不会被自动包含进程序中。一种回答是，并不是所有的程序都要使用I&#x2F;O（input&#x2F;output）包，而且C语言的哲学中也说到要避免承担不必要的重量。这个经济学上资源利用的准则让C语言受到嵌入式编程的欢迎-例如，为控制自动燃油系统编写代码。顺带一说，#include这一行甚至不是C语言的语句。#符号阐述了这一行是在编译器之前被预处理器处理的代码。你会在后面学习预处理指令时遇到很多例子，而且在第16章对这个主题还有更加充分的讲述。</p>\n<h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a><code>main</code>函数</h3><h4 id=\"int-main-void\"><a href=\"#int-main-void\" class=\"headerlink\" title=\"int main(void)\"></a>int main(void)</h4><p>程序的下一行声明了一个名字为<code>main</code>的函数，<code>main</code>是个挺普通的程序，但是它是唯一的选择。一个C语言程序（有些我们无需担心的例外），通常是以名叫<code>main</code>的函数开始运行的，其他函数的名字是可以随意选择的，但是作为一切的开端，<code>main</code>函数必须存在。那么圆括号呢？它们是为了确定<code>main()</code>是个函数，你会很快学习学到关于函数的更多内容。现在，记住这个函数是C语言程序的基础模块。</p>\n<p><code>int</code>是<code>main()</code>函数的返回值类型，它意味着<code>main()</code>返回的数值种类必须是十进制整数(integer)。那么返回到哪里？返回到操作系统-我们会在第六章讨论循环的时候回到这个问题上来。</p>\n<p>跟随在函数名后面的圆括号大体上囊括了需要传递给函数的信息，举个简单的例子，没有东西被传递，那么这个括号就包含着<code>void</code>-空类型（在第11章，“字符指针与字符串函数”介绍了第二种从操作系统把信息传递给<code>main()</code>函数的形式）</p>\n<p>如果你查看过很久以前的C语言代码，你会经常看到程序是以下面的形式开始的:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>C90标准勉强地包容了这个形式，但是C99没有，所以即使你现在的编译器让你写成这个样子，不要听。</p>\n<p>下面是另一种你可能会看见的形式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<p>有一些编译器是允许这样写的，但是没有一个标准把它列为一种选择，<br>因此，编译器也没有必要接受这个形式，有几种确实也没有。再一次，坚守标准的形式，你就不会在更换编译器的时候陷入困境。</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*a simple program*/</span></span><br></pre></td></tr></table></figure>\n\n<p>这一部分由&#x2F; *  * &#x2F;符号框定起来的内容就是注释，使用注释可以让一些人（包括你自己）更好地理解你的程序。C语言的一个很好的特点就是注释可以放在任何地方，甚至与它们解释的“原文内容”放在一行。长一点的知识可以放在一行甚至延伸至多行，以&#x2F; * 开始并以 * &#x2F;结束的内容都会被编译器忽略。下面是注释的合法与非法写法。</p>\n<p><img src=\"/img/comment.png\" alt=\"注释示例\"></p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><blockquote>\n<p>（1.这是一行C语言注释）<br>（2.这个注释延伸到了两行）<br>（3.你也可以这样做）<br>（4.但是这是不合法的因为没有结束符号）</p>\n</blockquote>\n<p>C99添加了注释的另一种形式，它在C++与Java中很受欢迎，这种新形式使用<code>//</code>符号来生成只在一行内的注释。</p>\n<p><img src=\"/img/newform.png\" alt=\"新形式\"></p>\n<p>因为一行的结束标志这这行注释的结束，这种方式需要在注释开始的时候添加注释符号。</p>\n<p>新形式的出现是为了响应旧形式的潜在问题，假设你有下面的代码。</p>\n<p><img src=\"/img/ihope.png\" alt=\"我希望这可以运行...\"></p>\n<p>下一次，我推断你要删除第四行<br>然后意外地把第三行删掉了，<br>然后这代码就会变成这个样子</p>\n<p><img src=\"/img/hopeagain.png\" alt=\"哦不...\"></p>\n<p>现在编译器把第一行的起始符与第四行的结束符进行配对，结果使这四行全部成为了注释，包括那本应该是代码的一部分的一行。因为<code>//</code>并不会延伸到另一行，它不会引起代码的“消失”。</p>\n<p>一些编译器有可能并不支持C99的这个特点，还有些有可能需要改变一些编译器的设置才能够应用C99的特性。</p>\n<h3 id=\"大括号、函数体与代码块\"><a href=\"#大括号、函数体与代码块\" class=\"headerlink\" title=\"大括号、函数体与代码块\"></a>大括号、函数体与代码块</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在图2.1，大括号划定了<code>main()</code>的界限。大体上，所有的C语言函数都需要使用大括号来标志着函数体的起始与结束。它们是必须出现的，所以一定不要漏了。只有大括号是起这个作用的，不要使用圆括号或者中括号。</p>\n<p>大括号还可以被用来把语句聚集在一个函数中，形成一个单元或者语句块。如果你对于Pascal，ADA，Modula-2或者Algol熟悉的话，你就会意识到大括号划定起始与结束在这些语言里也是相似的。</p>\n<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num;</span><br></pre></td></tr></table></figure>\n\n<p>程序的这一行术语中称为<em><strong>声明语句</strong></em>，声明语句是C语言的其中一个最重要的特点。这个特例声明了两件事，一是在函数的某一个部分有一个叫<code>num</code>的变量（好好笑啊哈哈，在那遥远的函数中，有个小变量。）第二，<code>int</code>声明了<code>num</code>是一个十进制整数-也就是说，没有十进制小数点。（<code>int</code>是<em><strong>数据类型</strong></em>的一个例子），编译器使用这些信息为<code>num</code>变量准备合适的内存空间。结尾的分号标志了这一行是C语言的语句或者指令。分号也是这个语句的一部分，并不只是像在Pascal里的语句之间的分隔符。</p>\n<p>C语言中，<code>int</code>是一个确定了一种数据类型的<em>关键字</em>，关键字是我们用来表达语言的单词，而且你不能把它们强占用于其他目的。例如，你不能把<code>int</code>作为函数或者是变量的名称。这些限制在语言之外就会失去作用，反而你把一只猫或者你最喜欢的孩子叫做<code>int</code>是没有问题的。（除非本地官员或者法律不准用这个名字）。</p>\n<p><code>num</code>是<em>标识符</em>的一个例子，也就是你为变量、函数或者其他实型取的名字。从而声明把特定的标识符与电脑的特定的内存区联系在了一起，而且它也建立了信息的类型，或者说数据的类型，来放在那个区域里。</p>\n<p>在C语言中，<em>所有的</em>变量都需要在被使用之前先<em>声明</em>，这也就意味着你必须对于所有在一个程序中使用的变量列出包括数据类型的声明。人们也认为声明变量是一个优秀的编程技巧，而且，在C语言中，它是必须进行的。</p>\n<p>通常来说，C语言要求在代码块的起始部分声明变量，而且其他的语句是不允许放在这之前的。也就是说，<code>main()</code>函数的函数体会是这个样子。</p>\n<p><img src=\"/img/tradition.png\" alt=\"传统方式\"></p>\n<p>C99标准学习了C++的时间，现在可以让你在代码块的任何地方声明变量。然而，你还是需要在第一次使用变量之前声明它。所以如果你的编译器支持的话，你就可以像下面这样写：</p>\n<p><img src=\"/img/C99.png\" alt=\"C99新方式(1)\"><br><img src=\"/img/C992.png\" alt=\"C99新方式(2)\"></p>\n<p>为了能够和更旧的系统兼容，这本书还是会坚持原来的标准。（一些更新的编译器只有当你设置之后才会支持C99的特点）。</p>\n<p>就此，你很可能有三个问题：</p>\n<ul>\n<li>1.数据类型是什么？</li>\n<li>2.在取名的时候我们可以怎么选择？</li>\n<li>3.为什么你需要把变量全部声明出来。<br>那就让我们探究这些问题的答案吧。</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>C语言主要处理的是这几种数据：十进制整数、字符、浮点数，仅举几例。声明一个整型或者字符类型变量可以使电脑恰当地储存、抓取与翻译数据。你会在下一章研究到更多可用的数据类型。</p>\n<h3 id=\"名字的选择\"><a href=\"#名字的选择\" class=\"headerlink\" title=\"名字的选择\"></a>名字的选择</h3><p>你应该为变量使用有意义的名字（像是<code>sheep_count</code>而不是<code>x3</code>如果你的程序是数羊的），如果名字不能达到表意的需求，那么就使用注释来解释变量代表了什么。以这种方式为程序做记录是其中一种优秀的编程技巧。</p>\n<p>你可以使用的字符要视实际情况而定。C99标准要求不多于63个字符，除非是外部的标识符。（在第12章“内存分级、链接性与储存管理”中会提到），相比于分别只能识别31个字符与6个字符的C90，这是一个巨大的提升，而且老的C语言编译器最多只能接受8个字符。事实上你可以使用更多的字符的，但是编译器会忽略它们。因此，当一个系统有着8个字符的限制时，<code>shakespeare</code>与<code>shakespencil</code>就会被认为是一样的了，因为它们的前八个字符是一样的。（如果你想要63个字符的例子，可以自己造一个）。</p>\n<p>你可以在大写字母、小写字母与下划线之间任意选择。第一个字符必须是一个字母或者一个下划线。下面是一些示范。<br><img src=\"/img/valid.png\" alt=\"示范\"><br>操作系统与C语言标准库通常会使用1或2个下划线字符，比如<code>_kcab</code>，所以最好避免自己使用它。以一个或者两个下划线字符开始的，标准的标签，比如库中的标识符，会被<em><strong>储存</strong></em>起来，也就是说，即使使用它们作为名字并没有任何的语义错误，它是会造成一些名字冲突的。</p>\n<p>C的标识符是<em><strong>区分大小写</strong></em>的，也就意味着大学字母是被看做与对应的小写字母字符不同的。因此，<code>stars</code>与<code>Stars</code>和<code>STARS</code>是不同的。</p>\n<p>为了让C语言能够更加国际化，C99使用通用字符名称机制(UCN)进行了巨大的扩充，在附录B中的参考单元VII“更广大的字符支持”，我们讨论了这些加入的部分。</p>\n<h3 id=\"声明变量的四个好处\"><a href=\"#声明变量的四个好处\" class=\"headerlink\" title=\"声明变量的四个好处\"></a>声明变量的四个好处</h3><p>一些年代更远的语言，比如FORTRAN与BASIC语言的原型版本，可以让你在没有声明的情况下使用变量。那么为什么我们不能在C语言中使用这种简单易行的方法呢？这里就是一些原因：</p>\n<ul>\n<li>把所有的变量放在一个地方能够让阅读者更容易地知道程序是关于什么的。这点好处在你给变量取有意义的名称的时候尤其明显，（就像<code>taxrate</code>与<code>r</code>），如果名字不能达意就使用注释来解释，以这种方式给程序做记录是一种良好的编程技巧。</li>\n<li>通过思考声明变量是为了什么鼓励你全心投入地去写程序之前做一些准备。程序开始需要什么类型的信息？我到底想要程序输出什么？呈现数据的最好方式是什么？</li>\n<li>声明变量有助于我们预防编程中更多难以发现又狡猾的错误之一-也就是拼错了变量的名字。举个例子，假设在一些没有声明的语言中，你写下了这个语句。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">radius1 = <span class=\"number\">20.4</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后在另一个地方，你拼错了变量名。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; circum = <span class=\"number\">6.28</span> * radiusl;</span><br></pre></td></tr></table></figure>\n\n<p>你无意地把数字<code>1</code>换成了<code>l</code>，那种语言也会创造一个<code>radiusl</code>的变量，然后用未知的值（或许是0，或许是垃圾值），<code>circum</code>就会被给予一个错误的值，而且你可能需要极其多的时间来搞清楚为什么，这在C语言是不可能出现的（除非你确实是笨到家了去定义两个这样相似的变量名），因为编译器会在radiusl出现的时候报错。</p>\n<ul>\n<li>如果你不声明变量的话，你的C语言程序是不会进行编译的。如果先前的原因没有动摇你的话，对于这一点你可就得好好想想了。</li>\n</ul>\n<p>既然你需要声明需要使用的变量，它们会到哪里呢？就像上文提过的，C语言在C99之前就要求声明需要在代码块之前完成，遵循这种把声明放在一起的做法，你就可以更容易地得知程序正在做什么。当然，把你的声明分布在各个地方也是有好处的，正像现在C99所允许的。这也就是在你赋值之前先声明变量。那让你更难以忘记给他们赋值。作为关键性的事情，许多的编译器还不支持C99的这个规则。</p>\n<h3 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>下一行的程序是一个<em><strong>赋值语句</strong></em>，C语言中的其中一种基础运算。这个例子的意思是“把值<code>1</code>赋给变量<code>num</code>，之前的<code>int num</code>”这一行在电脑内存中为<code>num</code>分配了空间，这一行也就在这个空间中储存值。如果想要的的话你可以过会给<code>num</code>赋另一个值，那也就是<code>num</code>被叫做<em><strong>变量</strong></em>的原因。需要注意的是赋值语句会把值从右边到左边传递。<br>同时，这一句也是以分号结尾的，就像图2.2中显示的。<br><img src=\"/img/assignment.png\" alt=\"赋值图示\"></p>\n<h2 id=\"printf-函数\"><a href=\"#printf-函数\" class=\"headerlink\" title=\"printf()函数\"></a><code>printf()</code>函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I am a simple &quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;computer.\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;My favorite number is %d because it is first.\\n&quot;</span>,num);</span><br></pre></td></tr></table></figure>\n<p>这些行使用了一个C标准库中叫<code>printf</code>的函数，圆括号表明了<code>printf</code>是一个函数的名字，在圆括号之中的内容就是<code>main()</code>函数向<code>printf()</code>函数传递的信息。例如，第一行就传递了这句话 <code>I am a simple</code>这样的信息叫做<em><strong>参数</strong></em>，或者更加充分地，叫做函数的<em><strong>实际参数</strong></em>（见图2.3），那么<code>printf()</code>函数会对对这种语句做些什么呢？它会抓取在双引号之间的一切，然后把文本打印在屏幕上。</p>\n<p><img src=\"/img/calling.png\" alt=\"函数调用\"></p>\n<p>第一行<code>printf()</code>是你调用函数的一个很好的例子，你只需要打字写下函数的名称，把需要的参数放在圆括号内。当程序运行到这一行时，控制流就转换到已经定义的函数（在这个例子中是<code>printf()</code>）中，然后当函数已经完成了它需要做的事情之后，控制流就又回到原来的（<em><strong>调用</strong></em>）函数-在这个例子中是<code>main()</code>。</p>\n<p>下一行的<code>printf</code>呢？它在引号中包含了<code>\\n</code>这个字符，而且它并没有被打印下来？发生了什么？<code>\\n</code>的作用其实是另起一行，<code>\\n</code>的组合体（打印下来是两个字符）就组成了<code>\\n</code>这个叫<em><strong>换行符</strong></em>的新字符。对于<code>printf()</code>它意味着“在左下角再起一行”。也就是说，打印换行符和你在常规键盘上按下<code>enter</code>键的作用是差不多的。那么为什么不在打字写<code>printf</code>的时候用<code>Enter</code>键呢？那是因为因为那只会被认为是对于你的编译器的即时的指令，而不是对于源码的指令，也就是说，当你按下<code>enter</code>键时编辑器会退出当前的行，然后另起一行。换行符，影响着程序是如何显示的。</p>\n<p>换行符是<em><strong>转义字符</strong></em>的范例，<em><strong>转义字符</strong></em>是用来呈现难以或者几乎不能通过打印显示出来的字符的。其他的还有<code>\\t</code>对应着<code>Tab</code>、<code>\\b</code>对应着<code>Backspace</code>，每一个转义字符都会由<code>\\</code>来起始，我们会在第三章：C语言与数据再回到这个话题深入研究。</p>\n<p>这也就解释了为什么三个<code>printf</code>却只有两行文字了，第一个<code>printf()</code>命令没有换行符，但是第二个与第三个是有的。</p>\n<p>最后的<code>printf()</code>又带来了另外一个异样的地方：当这行文字被打印的时候<code>%d</code>发生了什么？你应该还记得，输出是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">My favorite number is 1 because it is first.</span><br></pre></td></tr></table></figure>\n<p>啊哈，当被打印出来的时候，数字<code>1</code>就是<code>%d</code>的替换物，而且变量<code>num</code>的值就是<code>1</code>，<code>%d</code>是展示<code>num</code>的值在什么时候被打印的占位符，这一行与下面的BASIC语句是相似的：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PRINT</span> <span class=\"string\">&quot;My favorite number is &quot;</span>; num; because it is first.<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<p>事实上，C语言的版本比这个做的工作还要多一点，<code>%</code>告诉程序有一个变量需要在这个区域被输出，<code>d</code>表达了要把这个变量以十进制整数的方式输出。<code>printf</code>还可以以其他变量形式进行输出，包括十六进制数、带有十进制小数点的数。事实上，<code>printf()</code>中的<code>f</code>表明了它是一个<em><strong>格式化</strong></em>打印函数。每种数据类型都有自己的指示符，这本书也会在介绍新的数据类型的同时引入对应的指示符。</p>\n<h3 id=\"返回语句\"><a href=\"#返回语句\" class=\"headerlink\" title=\"返回语句\"></a>返回语句</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>返回语句是这个程序的最后一个语句，在<code>int main(void)</code>中的<code>int</code>意味着<code>main()</code>函数应该返回一个十进制整数。<code>main()</code>函数这样返回是C语言标准要求的。返回值的C语言函数都会使用return语句来进行这个操作，return语句包含着关键字<code>return</code>与返回的值，以一个分号结束。如果你遗漏了这一句，大多数编译器会报错，但是它们仍然会对程序进行编译。这样的话，你可以把return语句看成为了增加逻辑的连贯性的东西，但是它对于一些操作系统是由实际用处的，包括DOS和Unix，我们在第11章会更深入地对于这个话题给出解释。</p>\n<h1 id=\"2-3-简单程序的结构\"><a href=\"#2-3-简单程序的结构\" class=\"headerlink\" title=\"2.3 简单程序的结构\"></a>2.3 简单程序的结构</h1><p>既然你已经看过了具体的例子，你已经准备好了解C语言程序的一些基本规则了。<em><strong>程序</strong></em>由包含一个函数或者多个函数的组组成，其中一个必须叫<code>main()</code>对于函数的描述包括函数头与函数体，<em><strong>函数头</strong></em>包括预处理语句，如<code>#include</code>，与函数的名字。你可以通过看圆括号的方式来得知这是个函数，即使圆括号可能是空的。<em><strong>函数体</strong></em>是由大括号框定的，它包括了一系列的语句，每一个都是由一个分号结尾的（见图2.4）。在例子中有<em><strong>声明语句</strong></em>，它是用来声明变量的类型与名字的，还有<em><strong>赋值语句</strong></em>，它给予变量一个值。然后还有三个<em><strong>print语句</strong></em>，每一个都调用了<code>printf()</code>函数，这些print语句是<em><strong>函数调用语句</strong></em>的一些示范。最后<code>main()</code>函数以返回值结束。</p>\n<p>简单来说，一个简单的、标准的C语言程序应该使用下面的格式。<br><img src=\"/img/function1.png\" alt=\"图2.4\"><br><img src=\"/img/structure.png\" alt=\"标准格式\"></p>\n<h1 id=\"2-4-可读性建议\"><a href=\"#2-4-可读性建议\" class=\"headerlink\" title=\"2.4 可读性建议\"></a>2.4 可读性建议</h1><p>使你的程序变得更可读是一种优秀的编程实践。可读性高的程序很容易理解，也就很容易去修改、纠正。让一个程序变得可读的过程也帮助你理清你对于程序执行自己的概念。</p>\n<p>你已经看过两种可以增加可读性的技巧了：选择变量名与使用注释。注意这两种技巧是相互补充的。如果你给一个变量注名<code>width</code>，你就不需要对于这个变量表示什么做任何解释了。但是叫做<code>video_routine_4</code>的变量就需要对于video routine 4的解释。</p>\n<p>另一个技巧是使用空行来分隔函数中的概念模块。例如，简单的实例程序就使用了空行分开了声明部分与行动部分。C语言不需要空行，但是它能够提高可读性。</p>\n<p>第四个技巧就是每行使用一个语句。再一次，这是一个针对于可读性的惯例，并不是C语言的要求。C语言的格式是<em><strong>形式自由</strong></em>的，你可以把几句话放在一行或者一直延伸到第二行。下面的代码是合法的，但是看起来很丑。<br><img src=\"/img/poorreadability.png\" alt=\"丑\"><br>分号向编译器指示了一个语句什么时候结束和下一句什么时候开始。但是如果你能够遵从这种在本章的例子中使用的传统手法，程序的逻辑会清晰很多。（见图2.5）<br><img src=\"/img/readable.png\" alt=\"可读性规范\"></p>\n<h1 id=\"2-5-更进一步\"><a href=\"#2-5-更进一步\" class=\"headerlink\" title=\"2.5 更进一步\"></a>2.5 更进一步</h1><p>我们的第一个C语言例子还是很简单的，接下来的图2.2就是第二个例子，但也并不是非常难。</p>\n<p><img src=\"/img/example2.png\" alt=\"例子\"></p>\n<p>新在哪里呢？代码中提供了对于程序的描述（在注释中），声明了很多变量，做了一些乘法运算，然后把这两个变量的值打印下来，让我们把这些点深入地了解一下。</p>\n<h2 id=\"记录-Documentation\"><a href=\"#记录-Documentation\" class=\"headerlink\" title=\"记录 Documentation\"></a>记录 Documentation</h2><p>第一，程序是以注释开始的（使用的是新的注释形式），它确定了文件名与程序的目的。这种程序的记录只花费一分钟就可以做，而且之后会在你浏览多个文件并打印它们的时候起到很大帮助。</p>\n<h2 id=\"多行声明-Multiple-Declarations\"><a href=\"#多行声明-Multiple-Declarations\" class=\"headerlink\" title=\"多行声明 Multiple Declarations\"></a>多行声明 Multiple Declarations</h2><p>然后，程序在一行中声明了两个而不是一个变量。为了达成这个目的，可以把两个变量（<code>feet</code>与<code>fathoms</code>）的声明使用一个逗号隔开，也就是下面这样。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> feet, fathoms;</span><br></pre></td></tr></table></figure>\n\n<p>它和下面的形式是等价的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> feet;</span><br><span class=\"line\"><span class=\"type\">int</span> fathoms;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运算-Multiplication\"><a href=\"#运算-Multiplication\" class=\"headerlink\" title=\"运算 Multiplication\"></a>运算 Multiplication</h2><p>第三步，程序进行运算，它利用了计算机系统庞大的算力来计算2乘6。<br>在C语言中，同样也在很多语言中，<code>*</code>是乘法运算的符号。<br>因此，下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feet = <span class=\"number\">6</span> * fathoms;</span><br></pre></td></tr></table></figure>\n\n<p>它的意思就是：查看<code>fathoms</code>的值，乘以6，然后把这个运算的结果的值赋给变量<code>feet</code>。</p>\n<h2 id=\"打印多个值-Printing-Multiple-Values\"><a href=\"#打印多个值-Printing-Multiple-Values\" class=\"headerlink\" title=\"打印多个值 Printing Multiple Values\"></a>打印多个值 Printing Multiple Values</h2><p>最终，程序更多样地使用了<code>printf()</code>如果你编译运行过这个例子，输出应该是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">There are 12 feet <span class=\"keyword\">in</span> 2 fathoms！</span><br><span class=\"line\">Yes, I said 12 feet!</span><br></pre></td></tr></table></figure>\n\n<p>这一次，代码在第一次使用<code>printf()</code>的时候，使用了两次替代符，在双引号中的第一个<code>%d</code>被在后面引用列表的第一个变量的值替换了(<code>feet</code>)然后第二个<code>%d</code>被第二个变量代替了。要注意的是待打印变量列表是在双引号部分后面，另外也注意每一个都是用括号分开的。</p>\n<p>第二次使用<code>printf()</code>表明了打印的值并不一定是变量的，只是必须要指定一个值，就像<code>6 * fathoms</code>这样，可以是恰当类型的值。</p>\n<p>这个程序受篇幅不长，但是它可以呈现把fathoms转换到feet的核心。我们需要的就是动态地去赋其他的值给<code>feet</code>我们会在以后的章节解释如何做。</p>\n<h1 id=\"2-6-顺便一提：多重函数\"><a href=\"#2-6-顺便一提：多重函数\" class=\"headerlink\" title=\"2.6 顺便一提：多重函数\"></a>2.6 顺便一提：多重函数</h1><p>目前为止，这些程序已经使用过了基本的<code>printf()</code>函数。图2.3向你展示了如何把自己的函数-除了<code>main()</code>以外的函数-加到程序里。</p>\n<p><img src=\"/img/twofunc.png\" alt=\"两个函数的程序\"></p>\n<p>输出是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I will summon the butler <span class=\"keyword\">function</span>.</span><br><span class=\"line\">You rang, sir?</span><br><span class=\"line\">Yes,Bring me some tea and writeable CD-ROMS.</span><br></pre></td></tr></table></figure>\n\n<p><code>butler()</code>函数在程序中出现了三次，第一次出现是在<em><strong>原型</strong></em>中，那告诉了编译器要使用的函数。第二次出现是在<code>main()</code>函数中，在<em><strong>函数调用</strong></em>中出现，最终，程序呈现了<em><strong>函数的定义</strong></em>过程，那是函数本身的源码。让我们再来看看这三次出现。</p>\n<p>C90标准添加了原型，老翻译器可能并不能识别它们（我们将会讲到当你使用那种编译器的时候要怎么做。）原型就是一种告诉编译器你正在使用一个特定的函数的声明。它也指定了函数的属性。例如，<code>butler()</code>函数的第一个词<code>void</code>指明了它没有返回值。（大体上，函数可以为了使用值而返回这些值，但<code>butler</code>没有），第二个<code>void</code>-在<code>butler(void)</code>-的意思是它没有参数。因此，当编译到达<code>main()</code>函数中<code>butler</code>被使用的这一行时，它会检查是否<code>butler</code>是被恰当地使用的。需要注意，<code>void</code>是被用来表示empty（空），而不是invalid（不合法、无效）。</p>\n<p>早先的C语言支持的函数声明类型有限，那时你只能定下返回值的类型，但是对于参数的描述就被省略。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">butler</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<p>那时的C语言代码使用的函数声明就像是上述的样子，而不是函数原型，C90与C99标准都能够辨认出这种更老的形式，但是它们表示这种形式会随着时间被淘汰，所以不要用。如果你从一些更老的地方拿到了C语言代码，你有可能想要把老式的声明变成原型。以后的章节会回到原型制作、函数声明与返回值上。</p>\n<p>接下来，你通过给出<code>butler</code>的名字与圆括号来援引函数。（调用），当<code>butler</code>完成了它的工作，程序就会移向<code>main()</code>函数中的下一行。</p>\n<p>最终，函数<code>butler()</code>以与<code>main()</code>函数一样的形式被定义，有函数头与用大括号框定的函数体。函数头重复了你在原型中提供的信息：<code>butler</code>不使用信息，而且不返回值。对于老旧的编译器，省略第二个<code>void</code>。</p>\n<p>有一点需要注意的，就是在<code>main()</code>函数中<code>butler()</code>被调用的位置-而不是<code>butler()</code>函数被定义的位置-决定了<code>butler()</code>函数的运行位置。比如，你可以把<code>butler()</code>函数的定义放在<code>main()</code>函数的前面，程序还是会照旧那样把<code>butler()</code>放在两个<code>printf()</code>中间运行。记住，所有的C语言程序都是以<code>main()</code>函数开始的，无论<code>main()</code>函数在程序文件的什么位置。然而，C语言实际上是先把<code>main()</code>函数列出来，因为它通常提供了基本的程序框架。</p>\n<p>C语言标准建议你为所有你使用的函数提供原型，标准的<code>include</code>文件为标准库函数做这个工作，例如，在标准C语言下，<code>stdio.h</code>文件就有<code>printf()</code>函数的原型，第六章的最后一个例子会告诉你如何去更广泛地为非<code>void</code>的函数制作原型，第九章会全面地讲述函数。</p>\n<h1 id=\"2-7-调试引入\"><a href=\"#2-7-调试引入\" class=\"headerlink\" title=\"2.7 调试引入\"></a>2.7 调试引入</h1><p>现在你已经可以写一个简单的C语言程序了，你有可能海域犯些简单的错误。程序的错误通常被叫做<em><strong>bugs</strong></em>，寻找与修复它们就叫做<em><strong>调试</strong></em>，图2.4就展现了有些bugs的程序，看看你是否能够找到。</p>\n<p><img src=\"/img/nogood.png\" alt=\"找找吧，有几处？\"></p>\n<h2 id=\"语法错误-Syntax-Errors\"><a href=\"#语法错误-Syntax-Errors\" class=\"headerlink\" title=\"语法错误 Syntax Errors\"></a>语法错误 Syntax Errors</h2><p>图2.4的例子犯了几个语法错误，当你没有遵循C语言的规则，你就会犯<em><strong>语法错误</strong></em>，这也可以类比到英语的语法错误。例如，思考一下这句话：<em><strong>Bugs frustrate be can.</strong></em> 这句话使用的单词是正确的，但是并没有遵循单词顺序的规律，而且使用的单词形式也不太对，不管怎样，C语言的语法错误就是在错误的地方使用了正确的C语言标志。</p>\n<p>所以<code>nogood.c</code>这个程序究竟犯了什么错误呢？第一，它使用的是括号而不是大括号来标记函数体，也是把正确的C语言符号用在了错误的地方，第二，声明应该是这个样子的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, n2, n3;</span><br></pre></td></tr></table></figure>\n\n<p>或者这样</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> n2;</span><br><span class=\"line\"><span class=\"type\">int</span> n3;</span><br></pre></td></tr></table></figure>\n\n<p>而且，这个例子遗漏了安置一条注释必须要使用的<code>*/</code>符号对（作为替换，你可以用<code>//</code>形式替换<code>/*</code>），最后，它遗漏了<code>printf()</code>后的本应作为语句结束标志的分号。</p>\n<p>你如何来检查语法错误呢？第一，在编译之前，浏览你的源码，看你是否看到一些明显的错误。第二，你可以检查编译器找到的错误，因为它的一部分工作就是检查语义错误。当你编译程序的时候，编译器会反馈找到的所有错误，并且会明确错误类型与出错的位置。</p>\n<p>然而，编译器有时也会混乱，实际上的一个区域内的语义错误有可能会让编译器错误地认为它找到了其他种类的错误。例如，因为这个例子没有恰当地声明<code>n2</code>与<code>n3</code>，所以编译器会认为它在被使用的地方找到了错误。事实上，与其试图一次把所有报告的错误修正过来，不如只修改一两个然后重新编译，这样的话有些其他种类的错误就会消失。继续这样做，直到程序正常运行。另一个常见的编译器“诡计”是它会在后面的行报错，但其实出错是在前面的行里。例如，编译器有可能直到下一行才能判断出上一行遗漏了分号。所以如果编译器报错说缺少分号，那么在这一行之前进行检查。</p>\n<h2 id=\"语义错误-Semantic-Errors\"><a href=\"#语义错误-Semantic-Errors\" class=\"headerlink\" title=\"语义错误 Semantic Errors\"></a>语义错误 Semantic Errors</h2><p>语义错误是在意义上的错误，例如，思考这一句话: <em><strong>Furry inflation thinks greenly.</strong></em>  语法上是正确的，因为形容词、名词、动词、还有副词都在合适的位置上，但这句话就是一派胡言。在C语言中，当你遵循了C语言的规则但是导致了不合适的结果，这个例子中就有这样的错误。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n3 = n2 * n2;</span><br></pre></td></tr></table></figure>\n\n<p>n3本应该是用来展现<code>n</code>的3次方的，结果程序把它算成了<code>n</code>的4次方。编译器是检测不出来语义错误的，因为它们并不违背C语言的规则。编译器没有能力去猜测你程序的意图。那也就只能由你来找到这些种类的错误了。一种方式是把程序做的事情与程序应该做的事情进行对比。例如，假定你已经找到了例子中的语法错误，那么它现在看起来是这个图2.5样子的。</p>\n<p><img src=\"/img/stillbad.png\" alt=\"还是错的...\"></p>\n<p>它的输出是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = 5, n squared = 25, n cubed = 625 </span><br></pre></td></tr></table></figure>\n\n<p>如果你可以口算立方的话，那么你就会注意到625是个错误的值。下一阶段就是找到你是如何陷入这个错误的。例如，你有可能会通过观察找到错误。大体上，然而你还需要一些系统的方法。一种方法是假装你是电脑，然后一步步地跟着程序走，让我们现在就尝试一下那个方法。</p>\n<p>程序体以声明三个变量<code>n1, n2与n3</code>开始，你可以通过画三个盒子并把它们各自标注名称来模拟这个情况。（看图2.6）然后，程序会把5赋给<code>n</code>，通过把数字5写在盒子里来模拟，然后，程序用<code>n</code>乘<code>n</code>然后把它的值赋给<code>n2</code>，所以看向盒子<code>n</code>，看着5乘5得到了25，然后把25放在盒子里。为了模拟下一句，也是同样，看向盒子2，然后用25乘25，然后把这个值给予<code>n3</code>，啊哈，你做乘法的时候使用的是<code>n</code>的平方而不是用<code>n</code>。</p>\n<p>嗯，有可能这个过程对于这个程序有点过了，但是以这种方式一步步地浏览程序总会是得知发生了什么最好的方法。</p>\n<h2 id=\"程序状态\"><a href=\"#程序状态\" class=\"headerlink\" title=\"程序状态\"></a>程序状态</h2><p>通过手工地一步步地追踪程序，追踪每一个变量，你监视了程序的状态，<strong>程序状态</strong>就是所有变量在一个时间点上被给予的一组值。它是运算状态的快照。</p>\n<p><img src=\"/img/tracer.png\" alt=\"追踪程序状态\"></p>\n<p>我们刚刚讨论了一种追踪程序状态的方法：通过自己一步一步地运行程序。在一个进行1000次迭代的程序中，你可能觉得并不能完成那个工作。然而，你还是可以经历一些迭代过程，看看你的程序是不是按你想要的方式来运行的。然而，通常是会有这种情况的，你会按照你想要的方式去“执行”它们，而不是真正把它们写下来，所以在写真正的代码的时候要努力做到正确。</p>\n<p>另一个方法就是通过在程序的自始至终放置几个<code>printf</code>语句来定位语义问题。在程序运行的关键点监测选定变量的数值。看看数值是怎么变化的可以让你知道正在发生什么。在你让程序按照你满意的方式运行之后，你就可以去掉多余的语句去重新编译了。</p>\n<p>第三种监测的方法就是使用调试器。<em><strong>Debugger</strong></em>是一种能够让你一步一步地运行程序并且查看程序变量的值的程序。它们使用的难易程度与复杂度都各有不同。更高级的编译器可以显示哪一行代码正在被运行。这对于多路径的程序是非常方便的，因为可以很容易地看到走的是哪一条路径。如果你的编译器中有调试器，那么花谢时间学学则呢么使用吧。比如像图2.4那样尝试使用它。</p>\n<h1 id=\"2-8-关键字与内置标识符\"><a href=\"#2-8-关键字与内置标识符\" class=\"headerlink\" title=\"2.8 关键字与内置标识符\"></a>2.8 关键字与内置标识符</h1><p>关键字就是C语言中的词汇，因为它们对于C语言是特别的，所以你不能把它们作为标识符来使用。有一些关键字分别了多种多样的类型，比如说<code>int</code>，其他的比如说<code>if</code>是被用来控制程序运行语句的顺序的。在以下的C语言关键字的列表中，黑体表示在ISO&#x2F;ANSI C90标准下的关键字，斜体的是C99标准加入的新关键字</p>\n<p><img src=\"/img/keywords.png\" alt=\"关键字\"></p>\n<p>如果你尝试把关键字用于变量的名字，编译器会把它识别为语法错误，还有其他的标识符，它们叫做<em><strong>内建标识符</strong></em>，你也是不应该使用的，他们不会导致语法错误，因为它们是合法的名称，但是语言已经使用过或者还保留着使用它们的权利，所以如果你使用这些标识符来表示其他的东西会引起问题。内置的标识符包括以下划线开始的词还有库函数的名称，就像<code>printf()</code>.</p>\n<h1 id=\"关键概念\"><a href=\"#关键概念\" class=\"headerlink\" title=\"关键概念\"></a>关键概念</h1><p>电脑编程是一项有挑战性的活动，它需要复杂与概念化的思考，而且还需要对于细节格外注意。你会发现编译器会强制你去注意细节。当你对朋友说话的时候，你可能会把几个词用错，犯几个语法错误，可能话没有说完，但是你的朋友仍然能够理解你在说什么。但是编译器不会允许这种情况。对于编译器来说，几乎对了也是错的。</p>\n<p>编译器并不能在概念问题帮到你多少，比如在这里说的这些东西。所以这本书会尽力通过给出每一章关键概念的大纲来弥合那个差距。</p>\n<p>对这一章，你的目标是你需要理解C语言程序是什么，你可以认为程序就是你对于想让电脑干什么的描述。编译器精细化地解决把你的描述变为含蓄的机器语言。（对于编译器做多少工作的测量显示，它可以从你1KB的源码文件创造出来60KB的可执行程序）即使一个简单的C语言程序也需要很多的机器语言来代表它们。）因为编译器并没有智能，你必须使用编译器的词汇来描述你的意思，而且这些词汇是由C语言标准设立的正规规则。（即使很受限制，还是比直接用机器语言来表达强的多了！）</p>\n<p>编译器期望着收到以独特的形式写出的指令，这一章已经详细地描述了。你作为编程人员的工作就是表达在编译器框架下你对于程序应该如何运作的想法-由C语言标准所引导就可以正确地运行。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><ol start=\"4\">\n<li>Indiana Sloth准备了如下的程序，让你看一看是不是正确，请帮帮他吧。</li>\n</ol>\n<p><img src=\"/img/quest4.png\" alt=\"问题4\"></p>\n<p>main函数用了{}来括起来，函数体用的是括号，是错的。<br>声明语句没加分号，赋值只需要一个&#x3D;号即可。<br>是printf而不是print。没加双引号，没加引用列表。最后没结束。stdio.h打错了而且#和&lt;&gt;，注释另一边写反了，导致全文为注释。</p>\n<p>5.假设下面的每一个例子都是完整程序的一部分，它们每一个会打印什么呢?</p>\n<p><img src=\"/img/quest5.png\" alt=\"问题5\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#a.</span></span><br><span class=\"line\">Baa Baa Black Sheep.Have you any wool?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#b.</span></span><br><span class=\"line\">Begone!</span><br><span class=\"line\">creature of lard!</span><br><span class=\"line\"><span class=\"comment\">#c.</span></span><br><span class=\"line\">What?</span><br><span class=\"line\">No/nBonzo?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#d.</span></span><br><span class=\"line\">2 + 2 = 4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><p>下面哪些是C语言关键字？ <code>main, int, function, char, =</code><br>int、char</p>\n</li>\n<li><p>你会如何把<strong>行数</strong>与<strong>字数</strong>打印出来？<br>在以下的形式中<code>There were 3020 words and 350 lines.</code></p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">word = <span class=\"number\">3020</span>;</span><br><span class=\"line\">line = <span class=\"number\">350</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;There were %d words and %d lines.&quot;</span>, word, line);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>思考下面的程序<br><img src=\"/img/quest8.png\" alt=\"问题8\"><br>在第7行之后的程序状态是什么？<br>第八与第九行呢？</li>\n</ol>\n<blockquote>\n<p>第7行 a &#x3D; 5，b &#x3D; 2</p>\n</blockquote>\n<blockquote>\n<p>第8行 a &#x3D; 5， b &#x3D; 5</p>\n</blockquote>\n<blockquote>\n<p>第9行 a &#x3D; 5， b &#x3D; 5</p>\n</blockquote>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>只是阅读是不够的，你得尝试写一两个简单的程序来看看是不是写程序和你看这一章的感觉一样流畅。下面有一些建议，但是你也确实需要独立思考一些问题。你会在网站上找到下面选出问题的答案。</p>\n<ol>\n<li>调用一次printf，把你的姓与名在一行中输出<br> 再调用一次printf，把你的姓与名在两行中输出。<br> 使用两次printf把你的姓和名在一行中输出。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简略一写</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike Smith\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike\\nSmith\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Mike&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Smith\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>写一个打印你的姓名与地址的程序</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;My name is Ywx\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Address: Zhengzhou city in Henan province&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>写一个把你的年龄转换成天数的程序，展示两者的值。不必关心闰年和平年。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age, days;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;age);</span><br><span class=\"line\">\tdays = age * <span class=\"number\">365</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, age, days);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.写一个会打印出以下语句的程序</p>\n<p><img src=\"/img/four.png\" alt=\"语句\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;For he&#x27;s a jolly good fellow!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Which nobody can deny!&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.写一个程序，创建一个叫做<code>toes</code>的变量，把<code>toes</code>设为10，<br>计算toes的二倍和平方分别是什么，并把它们打印下来</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttoes = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, toes, toes * <span class=\"number\">2</span>, toes * toes);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.写一个会打印出如下的输出的程序</p>\n<p><img src=\"/img/six.png\" alt=\"Smile!\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">3</span>;i &gt;= <span class=\"number\">1</span>;i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt; i;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Smile&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7.写一个叫做<code>one_three()</code>的函数，这个函数应该在一行内展现文字<code>one</code>然后调用函数<code>two()</code>，接着在另一行内显示文字<code>three</code>。<br><code>two()</code>把文字<code>two</code>在一行输出。以Stating now开始，像这样。</p>\n<p><img src=\"/img/last.png\" alt=\"数数\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">two</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;two\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">one_three</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;one\\n&quot;</span>);</span><br><span class=\"line\">\ttwo();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;three\\n&quot;</span>)l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;starting now:\\n&quot;</span>);</span><br><span class=\"line\">\tone_three();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>End…</p>\n</blockquote>\n"},{"title":"字符串函数","date":"2024-01-04T02:34:07.000Z","_content":"\n下为老师上课时讲过的字符串函数。\n\n# >>字符串函数\n> #include <string.h> 这是一个前提\n\n1. `strlen()`,求字符串长度。\n与`sizeof`有区别，它不算`'\\0'`这个字符。\n\n2. `strcpy(s1, s2)`，将s2拷贝到s1 (%% s1 = s2 %%) 。\n用赋值运算符`=`不行，编译错误，数组名为地址常量，不能被赋值。\n挨个覆盖直到结束符，然后后面的依然保存，\n但因为结束符的存在而，提早输出。\n\n3. `strcmp(s1, s2)` 字符串比较\n\n\t逐字符比较，\n\t`s1 < s2`就返回`-1`。\n\t`s1 > s2`返回`1`\n\t相等返回`0`.\n>一般用来判断字符串是否相等。\n\n4. `strrev(s1)` 字符串反置\n\t会修改原字符串。\n\t我们的OJ不支持，PTA支持（有待商榷）。\n\t自己写。\n\n5. `strcat(s1, s2)` 字符串连接，把s2连到s1后。\n\n>两个参数总是第一个被修改。\n\n6. `strchr(s1, ch)` 查找第一次出现的位置。\n位置是指针。通过寻址符。\n没有的话，返回地址为空NULL。\n减去首元素地址（数组名）就可以得到下标。\n`strchr(s1, ch) - s1`\n\n7. `strstr(s1, s2)` 在一个字符串中找另一个字符串。\n\n> 在s1中找s2（s2为字符串）\n\t找到返回地址，找不到返回NULL。\n\t则显示字符串第一次出现的第一个字符地址，\n\t减去d，则是它的下标。","source":"_posts/字符串函数.md","raw":"---\ntitle: 字符串函数\ndate: 2024-01-04 10:34:07\ntags: C语言学习\n---\n\n下为老师上课时讲过的字符串函数。\n\n# >>字符串函数\n> #include <string.h> 这是一个前提\n\n1. `strlen()`,求字符串长度。\n与`sizeof`有区别，它不算`'\\0'`这个字符。\n\n2. `strcpy(s1, s2)`，将s2拷贝到s1 (%% s1 = s2 %%) 。\n用赋值运算符`=`不行，编译错误，数组名为地址常量，不能被赋值。\n挨个覆盖直到结束符，然后后面的依然保存，\n但因为结束符的存在而，提早输出。\n\n3. `strcmp(s1, s2)` 字符串比较\n\n\t逐字符比较，\n\t`s1 < s2`就返回`-1`。\n\t`s1 > s2`返回`1`\n\t相等返回`0`.\n>一般用来判断字符串是否相等。\n\n4. `strrev(s1)` 字符串反置\n\t会修改原字符串。\n\t我们的OJ不支持，PTA支持（有待商榷）。\n\t自己写。\n\n5. `strcat(s1, s2)` 字符串连接，把s2连到s1后。\n\n>两个参数总是第一个被修改。\n\n6. `strchr(s1, ch)` 查找第一次出现的位置。\n位置是指针。通过寻址符。\n没有的话，返回地址为空NULL。\n减去首元素地址（数组名）就可以得到下标。\n`strchr(s1, ch) - s1`\n\n7. `strstr(s1, s2)` 在一个字符串中找另一个字符串。\n\n> 在s1中找s2（s2为字符串）\n\t找到返回地址，找不到返回NULL。\n\t则显示字符串第一次出现的第一个字符地址，\n\t减去d，则是它的下标。","slug":"字符串函数","published":1,"updated":"2024-01-04T02:37:42.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrp133pm000458ue2a464xuc","content":"<p>下为老师上课时讲过的字符串函数。</p>\n<h1 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"&gt;&gt;字符串函数\"></a>&gt;&gt;字符串函数</h1><blockquote>\n<p>#include &lt;string.h&gt; 这是一个前提</p>\n</blockquote>\n<ol>\n<li><p><code>strlen()</code>,求字符串长度。<br>与<code>sizeof</code>有区别，它不算<code>&#39;\\0&#39;</code>这个字符。</p>\n</li>\n<li><p><code>strcpy(s1, s2)</code>，将s2拷贝到s1 (%% s1 &#x3D; s2 %%) 。<br>用赋值运算符<code>=</code>不行，编译错误，数组名为地址常量，不能被赋值。<br>挨个覆盖直到结束符，然后后面的依然保存，<br>但因为结束符的存在而，提早输出。</p>\n</li>\n<li><p><code>strcmp(s1, s2)</code> 字符串比较</p>\n<p> 逐字符比较，<br> <code>s1 &lt; s2</code>就返回<code>-1</code>。<br> <code>s1 &gt; s2</code>返回<code>1</code><br> 相等返回<code>0</code>.</p>\n</li>\n</ol>\n<blockquote>\n<p>一般用来判断字符串是否相等。</p>\n</blockquote>\n<ol start=\"4\">\n<li><p><code>strrev(s1)</code> 字符串反置<br> 会修改原字符串。<br> 我们的OJ不支持，PTA支持（有待商榷）。<br> 自己写。</p>\n</li>\n<li><p><code>strcat(s1, s2)</code> 字符串连接，把s2连到s1后。</p>\n</li>\n</ol>\n<blockquote>\n<p>两个参数总是第一个被修改。</p>\n</blockquote>\n<ol start=\"6\">\n<li><p><code>strchr(s1, ch)</code> 查找第一次出现的位置。<br>位置是指针。通过寻址符。<br>没有的话，返回地址为空NULL。<br>减去首元素地址（数组名）就可以得到下标。<br><code>strchr(s1, ch) - s1</code></p>\n</li>\n<li><p><code>strstr(s1, s2)</code> 在一个字符串中找另一个字符串。</p>\n</li>\n</ol>\n<blockquote>\n<p>在s1中找s2（s2为字符串）<br>    找到返回地址，找不到返回NULL。<br>    则显示字符串第一次出现的第一个字符地址，<br>    减去d，则是它的下标。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>下为老师上课时讲过的字符串函数。</p>\n<h1 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"&gt;&gt;字符串函数\"></a>&gt;&gt;字符串函数</h1><blockquote>\n<p>#include &lt;string.h&gt; 这是一个前提</p>\n</blockquote>\n<ol>\n<li><p><code>strlen()</code>,求字符串长度。<br>与<code>sizeof</code>有区别，它不算<code>&#39;\\0&#39;</code>这个字符。</p>\n</li>\n<li><p><code>strcpy(s1, s2)</code>，将s2拷贝到s1 (%% s1 &#x3D; s2 %%) 。<br>用赋值运算符<code>=</code>不行，编译错误，数组名为地址常量，不能被赋值。<br>挨个覆盖直到结束符，然后后面的依然保存，<br>但因为结束符的存在而，提早输出。</p>\n</li>\n<li><p><code>strcmp(s1, s2)</code> 字符串比较</p>\n<p> 逐字符比较，<br> <code>s1 &lt; s2</code>就返回<code>-1</code>。<br> <code>s1 &gt; s2</code>返回<code>1</code><br> 相等返回<code>0</code>.</p>\n</li>\n</ol>\n<blockquote>\n<p>一般用来判断字符串是否相等。</p>\n</blockquote>\n<ol start=\"4\">\n<li><p><code>strrev(s1)</code> 字符串反置<br> 会修改原字符串。<br> 我们的OJ不支持，PTA支持（有待商榷）。<br> 自己写。</p>\n</li>\n<li><p><code>strcat(s1, s2)</code> 字符串连接，把s2连到s1后。</p>\n</li>\n</ol>\n<blockquote>\n<p>两个参数总是第一个被修改。</p>\n</blockquote>\n<ol start=\"6\">\n<li><p><code>strchr(s1, ch)</code> 查找第一次出现的位置。<br>位置是指针。通过寻址符。<br>没有的话，返回地址为空NULL。<br>减去首元素地址（数组名）就可以得到下标。<br><code>strchr(s1, ch) - s1</code></p>\n</li>\n<li><p><code>strstr(s1, s2)</code> 在一个字符串中找另一个字符串。</p>\n</li>\n</ol>\n<blockquote>\n<p>在s1中找s2（s2为字符串）<br>    找到返回地址，找不到返回NULL。<br>    则显示字符串第一次出现的第一个字符地址，<br>    减去d，则是它的下标。</p>\n</blockquote>\n"},{"title":"如何使用结构体","date":"2024-01-04T02:34:40.000Z","_content":"\n 结构体，是构造类型的一种，也就是由基本类型构造的类型。\n 构造类型：结构体struct、联合体union、枚举类型enum。\n\n## 1. 定性：\n新的“数据类型”。\n\n## 2. 意义：\n有些信息的组成数据并不止一种，\n囊括我们想要描述的大多数数据。(复合类型信息)。\n数据形成一体。\n\n## 3. 定义方式：\n### 1. 类型定义（注意最后的分号）\n```C\nstruct 结构体类型名\n{\n\t类型名 成员名;\n};//别忘了分号\n\n//最近学到的\ntypedef struct 结构体类型名\n{\n\t类型名 成员名;\n} 你想要的简化名;\n\ntypedef 类型名 简化名;\n//typedef就是为了给类型起别名用的\n```\n\n内部的单个变量类型叫做**成员**。 \n**主要创建在主函数外部**。\n\n### 2. 变量定义\n```C\n//变量定义方式\nstruct 结构体类型名 变量名;\n\n//定义并赋初值（初始化）\nstruct 结构体类型名 变量名 = {常量1, 常量2...};\n//常量的顺序对应定义类型的顺序。\n```\n\n## 4. 数据存储与读取\n使用索引对应成员的运算符： ->(指针，左边是地址，右边是成员名) / .（左边，索引成员名）\n其他一样\n\n > 额外提醒: 数组不能用=，结构体可以。--数组是类型不是地址。\n \n## 参考-典型例子\n\n```C\n#include <stdio.h>\n#include <string.h>\n// 结构体。\n//构造类型：结构体struct、联合体union、枚举类型enum。\nstruct student\n{\n\tchar name[50];\n\tint age;\n};typedef struct student stud;\n//typedef 给类型起别名。\n//typedef 已经存在的名 新类型名;\n\nint main(void)\n{\n\tint n, minage;\n\tstud stu1;\n\tscanf(\"%d\", &n);\n\tgetchar();\n\tchar minname[55] = {0};\n\n\tfor(int i = 0; i < n;i++)\n\t{\n\t\tscanf(\"%s %d\",stu1.name, &stu1.age);\n\t\tif(i == 0)\n\t\t{\n\t\t\tstrcpy(minname, stu1.name);\n\t\t\tminage = stu1.age;\n\t\t}\n\t\telse if(stu1.age < minage)\n\t\t{\n\t\t\tminage = stu1.age;\n\t\t\tstrcpy(minname, stu1.name);\n\t\t}\n\t}\n\tprintf(\"%s\", minname);\n\treturn 0;\n}\n```\n\n一般在一个东西的多个方面给予数据，用这些数据来排序比大小等等。\n","source":"_posts/如何使用结构体.md","raw":"---\ntitle: 如何使用结构体\ndate: 2024-01-04 10:34:40\ntags: C语言学习\n---\n\n 结构体，是构造类型的一种，也就是由基本类型构造的类型。\n 构造类型：结构体struct、联合体union、枚举类型enum。\n\n## 1. 定性：\n新的“数据类型”。\n\n## 2. 意义：\n有些信息的组成数据并不止一种，\n囊括我们想要描述的大多数数据。(复合类型信息)。\n数据形成一体。\n\n## 3. 定义方式：\n### 1. 类型定义（注意最后的分号）\n```C\nstruct 结构体类型名\n{\n\t类型名 成员名;\n};//别忘了分号\n\n//最近学到的\ntypedef struct 结构体类型名\n{\n\t类型名 成员名;\n} 你想要的简化名;\n\ntypedef 类型名 简化名;\n//typedef就是为了给类型起别名用的\n```\n\n内部的单个变量类型叫做**成员**。 \n**主要创建在主函数外部**。\n\n### 2. 变量定义\n```C\n//变量定义方式\nstruct 结构体类型名 变量名;\n\n//定义并赋初值（初始化）\nstruct 结构体类型名 变量名 = {常量1, 常量2...};\n//常量的顺序对应定义类型的顺序。\n```\n\n## 4. 数据存储与读取\n使用索引对应成员的运算符： ->(指针，左边是地址，右边是成员名) / .（左边，索引成员名）\n其他一样\n\n > 额外提醒: 数组不能用=，结构体可以。--数组是类型不是地址。\n \n## 参考-典型例子\n\n```C\n#include <stdio.h>\n#include <string.h>\n// 结构体。\n//构造类型：结构体struct、联合体union、枚举类型enum。\nstruct student\n{\n\tchar name[50];\n\tint age;\n};typedef struct student stud;\n//typedef 给类型起别名。\n//typedef 已经存在的名 新类型名;\n\nint main(void)\n{\n\tint n, minage;\n\tstud stu1;\n\tscanf(\"%d\", &n);\n\tgetchar();\n\tchar minname[55] = {0};\n\n\tfor(int i = 0; i < n;i++)\n\t{\n\t\tscanf(\"%s %d\",stu1.name, &stu1.age);\n\t\tif(i == 0)\n\t\t{\n\t\t\tstrcpy(minname, stu1.name);\n\t\t\tminage = stu1.age;\n\t\t}\n\t\telse if(stu1.age < minage)\n\t\t{\n\t\t\tminage = stu1.age;\n\t\t\tstrcpy(minname, stu1.name);\n\t\t}\n\t}\n\tprintf(\"%s\", minname);\n\treturn 0;\n}\n```\n\n一般在一个东西的多个方面给予数据，用这些数据来排序比大小等等。\n","slug":"如何使用结构体","published":1,"updated":"2024-01-04T02:47:44.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrp133pn000558ueexbb7mji","content":"<p> 结构体，是构造类型的一种，也就是由基本类型构造的类型。<br> 构造类型：结构体struct、联合体union、枚举类型enum。</p>\n<h2 id=\"1-定性：\"><a href=\"#1-定性：\" class=\"headerlink\" title=\"1. 定性：\"></a>1. 定性：</h2><p>新的“数据类型”。</p>\n<h2 id=\"2-意义：\"><a href=\"#2-意义：\" class=\"headerlink\" title=\"2. 意义：\"></a>2. 意义：</h2><p>有些信息的组成数据并不止一种，<br>囊括我们想要描述的大多数数据。(复合类型信息)。<br>数据形成一体。</p>\n<h2 id=\"3-定义方式：\"><a href=\"#3-定义方式：\" class=\"headerlink\" title=\"3. 定义方式：\"></a>3. 定义方式：</h2><h3 id=\"1-类型定义（注意最后的分号）\"><a href=\"#1-类型定义（注意最后的分号）\" class=\"headerlink\" title=\"1. 类型定义（注意最后的分号）\"></a>1. 类型定义（注意最后的分号）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t类型名 成员名;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//别忘了分号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最近学到的</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t类型名 成员名;</span><br><span class=\"line\">&#125; 你想要的简化名;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> 类型名 简化名;</span><br><span class=\"line\"><span class=\"comment\">//typedef就是为了给类型起别名用的</span></span><br></pre></td></tr></table></figure>\n\n<p>内部的单个变量类型叫做<strong>成员</strong>。<br><strong>主要创建在主函数外部</strong>。</p>\n<h3 id=\"2-变量定义\"><a href=\"#2-变量定义\" class=\"headerlink\" title=\"2. 变量定义\"></a>2. 变量定义</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//变量定义方式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名 变量名;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义并赋初值（初始化）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名 变量名 =</span> &#123;常量<span class=\"number\">1</span>, 常量<span class=\"number\">2.</span>..&#125;;</span><br><span class=\"line\"><span class=\"comment\">//常量的顺序对应定义类型的顺序。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-数据存储与读取\"><a href=\"#4-数据存储与读取\" class=\"headerlink\" title=\"4. 数据存储与读取\"></a>4. 数据存储与读取</h2><p>使用索引对应成员的运算符： -&gt;(指针，左边是地址，右边是成员名) &#x2F; .（左边，索引成员名）<br>其他一样</p>\n<blockquote>\n<p>额外提醒: 数组不能用&#x3D;，结构体可以。–数组是类型不是地址。</p>\n</blockquote>\n<h2 id=\"参考-典型例子\"><a href=\"#参考-典型例子\" class=\"headerlink\" title=\"参考-典型例子\"></a>参考-典型例子</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 结构体。</span></span><br><span class=\"line\"><span class=\"comment\">//构造类型：结构体struct、联合体union、枚举类型enum。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> name[<span class=\"number\">50</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">stud</span>;</span></span><br><span class=\"line\"><span class=\"comment\">//typedef 给类型起别名。</span></span><br><span class=\"line\"><span class=\"comment\">//typedef 已经存在的名 新类型名;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, minage;</span><br><span class=\"line\">\tstud stu1;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"type\">char</span> minname[<span class=\"number\">55</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s %d&quot;</span>,stu1.name, &amp;stu1.age);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">strcpy</span>(minname, stu1.name);</span><br><span class=\"line\">\t\t\tminage = stu1.age;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stu1.age &lt; minage)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tminage = stu1.age;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">strcpy</span>(minname, stu1.name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, minname);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般在一个东西的多个方面给予数据，用这些数据来排序比大小等等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p> 结构体，是构造类型的一种，也就是由基本类型构造的类型。<br> 构造类型：结构体struct、联合体union、枚举类型enum。</p>\n<h2 id=\"1-定性：\"><a href=\"#1-定性：\" class=\"headerlink\" title=\"1. 定性：\"></a>1. 定性：</h2><p>新的“数据类型”。</p>\n<h2 id=\"2-意义：\"><a href=\"#2-意义：\" class=\"headerlink\" title=\"2. 意义：\"></a>2. 意义：</h2><p>有些信息的组成数据并不止一种，<br>囊括我们想要描述的大多数数据。(复合类型信息)。<br>数据形成一体。</p>\n<h2 id=\"3-定义方式：\"><a href=\"#3-定义方式：\" class=\"headerlink\" title=\"3. 定义方式：\"></a>3. 定义方式：</h2><h3 id=\"1-类型定义（注意最后的分号）\"><a href=\"#1-类型定义（注意最后的分号）\" class=\"headerlink\" title=\"1. 类型定义（注意最后的分号）\"></a>1. 类型定义（注意最后的分号）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t类型名 成员名;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//别忘了分号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最近学到的</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t类型名 成员名;</span><br><span class=\"line\">&#125; 你想要的简化名;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> 类型名 简化名;</span><br><span class=\"line\"><span class=\"comment\">//typedef就是为了给类型起别名用的</span></span><br></pre></td></tr></table></figure>\n\n<p>内部的单个变量类型叫做<strong>成员</strong>。<br><strong>主要创建在主函数外部</strong>。</p>\n<h3 id=\"2-变量定义\"><a href=\"#2-变量定义\" class=\"headerlink\" title=\"2. 变量定义\"></a>2. 变量定义</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//变量定义方式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名 变量名;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义并赋初值（初始化）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体类型名 变量名 =</span> &#123;常量<span class=\"number\">1</span>, 常量<span class=\"number\">2.</span>..&#125;;</span><br><span class=\"line\"><span class=\"comment\">//常量的顺序对应定义类型的顺序。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-数据存储与读取\"><a href=\"#4-数据存储与读取\" class=\"headerlink\" title=\"4. 数据存储与读取\"></a>4. 数据存储与读取</h2><p>使用索引对应成员的运算符： -&gt;(指针，左边是地址，右边是成员名) &#x2F; .（左边，索引成员名）<br>其他一样</p>\n<blockquote>\n<p>额外提醒: 数组不能用&#x3D;，结构体可以。–数组是类型不是地址。</p>\n</blockquote>\n<h2 id=\"参考-典型例子\"><a href=\"#参考-典型例子\" class=\"headerlink\" title=\"参考-典型例子\"></a>参考-典型例子</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 结构体。</span></span><br><span class=\"line\"><span class=\"comment\">//构造类型：结构体struct、联合体union、枚举类型enum。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> name[<span class=\"number\">50</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;<span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">stud</span>;</span></span><br><span class=\"line\"><span class=\"comment\">//typedef 给类型起别名。</span></span><br><span class=\"line\"><span class=\"comment\">//typedef 已经存在的名 新类型名;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, minage;</span><br><span class=\"line\">\tstud stu1;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"type\">char</span> minname[<span class=\"number\">55</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s %d&quot;</span>,stu1.name, &amp;stu1.age);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">strcpy</span>(minname, stu1.name);</span><br><span class=\"line\">\t\t\tminage = stu1.age;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stu1.age &lt; minage)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tminage = stu1.age;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">strcpy</span>(minname, stu1.name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, minname);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般在一个东西的多个方面给予数据，用这些数据来排序比大小等等。</p>\n"},{"title":"C-premier-plus-Chapter-3","date":"2023-12-22T04:11:38.000Z","_content":"# 第三章 数据处理\n\n>你会在这一章学到下面的东西：\n>1. 关键字\n>\t`int,short,long,unsigned,char,float,double,_Bool,_Complex\n>2. 运算符\n>\t`sizeof`\n>3. 函数\n>\t`scanf()`\n>4. 整型与浮点型的区别\n>5. 书写常量与声明这些类型的变量\n>6. 如何使用`printf()`与`scanf()`函数来读写不同类型的值\n\n程序依靠数据来工作。你会向电脑输入数字、字母或者单词，然后期望它能够利用这些数据做些事情。例如，你可能想要电脑去计算支付利润或者展示一个排过序的酒商列表。在这一章，你将会不只阅读数据，而且练习着去操纵数据，那是挺有趣的一件事。\n\n这一章还会让你了解到两大类数据类型：整数与浮点数。C语言提供了这些类型的几种变体。这一章会告诉你类型是什么，如何声明它们并且如何利用它们。而且，你会发现变量与常量之间的区别，作为额外奖励，你的第一个交互式的小程序就要诞生了！\n<!--more-->\n\n## 3.1 一个例子\n\n再一次，我们还是从一个样例程序来开始，像以往一样，你会发现一些不熟悉的东西，我们待会就会为你解释。程序的总体目的应该清晰，那么就尝试把图3.1中的源码编译运行下吧。\n为了节省时间，你可以省略注释。\n\n![图3.1](/img/Listing3.1.png)\n\n![错误与警告](/img/ErrandWarn.png)\n【错误与警告】\n如果你把程序的某些部分打错了，还有，比如说，遗漏了一个分号，编译器就会给予你一条语法错误信息。即使你没打错，编译器也有可能给予你一条警告信息，“Warning-conversion from ‘double’ to ‘float’ , possible loss of data.” 错误信息指的是你有可能把某些事做错了，它阻止程序的编译。警告，意思是你写的代码是合法的但是有可能做的并不是你想的那样。警告并不会阻止编译过程。上文中的这条信息就会在C语言在处理像770.0这样的数时出现，但并不是这个例子的问题，这一章过会会解释这条警告。\n\n当你在打字写这个程序的时候，你有可能会把`770.0`改成这种珍贵金属的当前价格。但是不要改变14.5833，那代表着一磅对应的盎司数。（盎司金衡制，是对于贵重金属使用的，常规衡制是给人们使用的，不论是珍贵的物品或是其他的东西。）\n\n需要注意的是“输入”你的体重意味着把你的体重打字写入电脑，并且敲下Enter或者Return键（不要输入完了你的体重就等着。）按下Enter键这个动作告诉了电脑你已经完成了你的应答。这个程序想要你输入一个数字，如`150`而不是单词，比如`too much`，如果你写的是字母而不是数字，那是会导致问题的，而这个问题需要之后学习的`if`语句来解决。（第七章，“C语言控制语句：分支结构与跳跃结构”会讲到），所以请先平静一些，输入一个数字，这里就是一个简单的输出示例。\n\n![输出](/img/Olist3.1.png)\n\n### 3.1.1 例子中的新知识\n\n在这个C语言程序中有这么几个新接触的要素。\n+ 可以注意到的是，代码在变量声明中使用了新的数据类型，前面提到的例子只使用了十进制整数类型(`int`)，但是现在的这个例子使用了一个浮点类型的变量类型，这样的话你就可以处理更大范围的数据了。`float`类型就可以保存含有十进制小数点的数字。\n+ 这个程序给出了书写常量的一些更新的方式，你现在可以书写浮点型的常量了。\n+ 为了对程序提供输入信息，你需要使用`scanf()`函数，`%f`命令`scanf()`从键盘输入中读入一个浮点数，`&weight`告知了`scanf()`函数把输入的值赋给名字叫做`weight`的变量，`scanf()`函数会用`&`符号来寻找在哪里可以找到叫做`weight`的变量，下一章我们会进一步地阐述`&`符号，现在，只需要相信我们你需要在这里添加一个`&`符号。\n+ 可能最突出的新特性就是程序变为交互性的了。电脑会要求你输入信息，并使用你输入的数值。一个交互性的程序是比不能交互的更有趣的。更重要的是，交互的方法让程序更加的灵活。举个例子，样例程序就可以用于所有合理的体重了，而不只是150磅，你不需要换一个人就再把程序重写一遍。`scanf()`函数会从键盘中获取数据，并把数据传递到你的程序，`printf()`函数会从程序中获取数据，然后把数据传递到你的屏幕上。这两个函数在一起就可以让你建立电脑与你的双向联系（见图3,1），这就让电脑使用更加有趣了。\n\n我们会在这一章讲述这些新特点中的前两条，后面的三条内容会在第四章-字符串与格式化输入输出完整地讲到，但是这一章还是会少量地使用`print()`与`scanf()`函数。\n\n![输入输出函数的工作](/img/Figure3.1.png)\n\n## 3.2 变常类型\n\n一台电脑，在程序的指导之下，可以做到很多的事情。可以做加法，可以给名称排序，可以指示讲话者或者屏幕的演出顺序，可以计算彗星的轨道，可以编排你的邮寄列表，拨叫电话号码、画出由小棒组成的人物，得出结论或者其他你可以想象到的可以被创造的东西。为了完成这些任务，程序需要处理***数据***，也就是你使用的保存在程序中的所有数字与字符信息。一些数据类型需要在程序使用之前进行预设，而且保证它们的值是不变的，这些就是***常量***。其他的数据类型的值或许会随着程序运行改变或者被赋给，这些就是***变量***。在这个样例程序中，`weight`就是一个变量，而`14.5833`就是一个常量。那么`770.0`呢？虽然铑金属在真实生活中的价格并不是个常量，但是这个程序把它作为一个常量来处理。变量与常量的区别就在值可不可以随着程序运行发生改变上。\n\n## 3.3 数据类型关键字\n\n讲完了变量与常量的区别之后，我们需要了解一下不同数据***类型***之间的区别。一些数据是数字形式，一些是字母，或者更加普遍的，它们是字符。电脑需要一种方式来确定与使用这些不同的类型。C语言通过对于基本的数据类型的定义完成了这个工作。如果数据是一个常量，编译器通常是可以通过它看起来的样子来区分它的。`42`是一个十进制整数，`42.100`是一个浮点数，在另一面，变量就需要声明语句来声明它的类型。随着学习进行下去，你会了解到关于声明变量的更多细节。但是还是让我们首先先研究一下C语言可以识别的基本类型，K&R C确立了有关于类型的七个关键字，C90标准增加了两个，C99标准又增加了三个。（见表3.1）\n![表3.1](/img/Table3.1.png)\n\n`int`关键字提供了C语言中基本的十进制整数类型，下面的三个关键字(`long, short, unsigned`)还有ANSI添加的`signed`提供了基本类型的变体。接着，`char`关键字指明了用于字母与其他字符的类型，如`%, $, #`等，`char`类型还可以被用来代表大于0与小于10的十进制整数。然后是`float`与`double`，还有两者的混合`long double`是用来代表带有十进制小数点的数字的。`_Bool`类型是为布尔类型提供的(`true`和`false`)，最后是分别代表着复数与虚数的``_Complex``与`_Imaginary`.\n\n由这些关键字创造的类型又可以基于在电脑中的储存类型分为两种，***十进制整数类型***与***浮点数类型***。\n\n![Bits, Bytes and Words](/img/storingtypes.png)\n【Bit（位）、字节与字】\n\n*bit*、*字节*与*字*可以被用来描述电脑的数据单元或者内存单元。我们会集中于第二种用法。\n\n内存的最小单元叫做***bit***，它可以保存`0`与`1`之间的其中一种数值（或者你可以说，这个字节被设为“关”或者“开”）你并不能在一个bit中储存太多的信息，但是电脑可以储存很多的字节，bit就是电脑内存的基础组成模块。\n\n*字节*是电脑内存的一般单元。对于大多数的机器来说，一个字节是8个bi，那是标准的定义，至少当测量内存的时候（C语言有不同的定义，我们会在“使用字符：`char`类型”这一节讲到）因为一个bit不是0就是1，那么在8位的字节中，就可以有256种可能（2的8次方），这些可能的模式就可以被用作比如代表0到255的数字或者代表一系列的字符。在二进制代码下，这种一对一的映射是可以被建立的，而且使用0与1来代表数字也使机器便利的。（在第15章-位运算，会讲述二进制代码，但是如果你想的话现在就可以去读一下）。\n\n*字*是电脑固定设计下的内存自然单元，对于8位的微型计算机，比如原来的苹果电脑来说，一个字就只是8个bit。早期的IBM兼容器使用的80286处理器是16位的机器，这也就是说他们把字长增加到了16bit。还有例如以Pentinum为基础的计算机，还有Mactonish PowerPC的字长是32bit。还有更强大的电脑的字长是64位的或者更大。\n\n### 3.3.1 整型与浮点型\n整型？浮点型？如果你感觉这些词非常不熟悉以至于干扰了你的阅读进度，我们这就要简要描述它们的意义了。如果你对位、字节还有字还是不熟悉的话，你可能需要阅读一下最近描述过的附加栏。你真的需要了解所有的细节吗？并不是，不只了解内燃机驱动车子的工作原理，而多了解一些电脑或者引擎内部发生的事情有时候可以帮到你。\n\n对于一个人来说，整型与浮点型的区别体现在它们是怎么被写下的。对于电脑来说，那就体现在它们是怎么被储存的。让我们依次来研究一下这两种类型。\n\n### 3.3.2 整数类型\n\n***整型***是没有小数部分的数字。在C语言中，整型是没有小数点的数字。比如说-2、-23还有2456。像3.14, 0.22, 还有2.00这些数就不是整型。整型是以二进制数字的形式被储存起来的。比如7就是被储存为二进制数111的。因此，为了在8位字节中储存这个数字，会把前五个位设置为0，然后把后三个位设置为1。    \n\n![用二进制码储存7](/img/Figure3.2.png)\n\n### 3.3.3 浮点数类型\n\n***浮点***数多多少少是对应着数学概念中的***实数***，实数包含着整数之间的这些数字，浮点数基本是这些样子：2.75、3.16E7、7.00、2e-8，需要注意的是，只要有小数点就会把整型数字转换为浮点数，比如7.00是一个浮点数，而7就是一个十进制整数。很明显，书写浮点数的方式不止一种，我们会在之后更充分地讨论用e符号表示的形式。但是简单来说，3.16E7的表示方式意思就是3.16乘10的7次方，也就是1后面添7个0，7也就是10的***指数***。\n\n关键就是储存浮点数的方式与整数不一样。浮点数的表示涉及到把一个数字分开为小数部分与整数部分，然后分别储存。因此，7.00这个数字不会与整数7同样储存，即使它们的值都是一样的。十进制类比起来也就是把7.0写为0.7E1。这里，0.7就是小数部分，1就是指数部分，图3.3展示了浮点数储存的另一个例子。一台电脑当然会使用二进制数与二进制而不是十进制来储存。你会在第十五章了解关于这个话题的更多信息。现在我们先集中精力于在实用上区别吧。\n\n+ 整型没有小数部分，浮点数可以有小数部分。\n+ 浮点数比整数代表的数字更多，可以看一下这一篇结尾的图表3.3。\n+ 对于一些算术运算符，比如一个数减去另一个数，浮点类型的精确度会有更大可能下降。\n+ 因为在任何一个范围之间都有着无数的浮点数，比如在1.0与2.0之间，电脑就不能完全地代替这些值，它用实数的大概值来估计浮点数的值。比如7.0有可能被储存为6.99999的`float`值，过会会讲到更多有关于精确度的知识。\n+ 浮点运算符的优先级通常是比整型运算符要低的，然而用来处理浮点运算的特殊微型处理器已经可用了，这个问题也就得到了解决。\n\n![十进制浮点储存方式](/img/Figure3.3.png)\n\n现在就让我们研究一下C语言中各种数据类型的特点吧。对于每一种类型，我们会描述如何声明一个变量，如何用变量代表一个常量，还有一些特殊的用法。一些年代较早的C语言编译器可能不能支持下文全部的类型，所以你可以查看一下你的编译器的说明书，看一看哪些数据类型是可用的。\n\n## 基本数据类型\n\n### 3.4.1 `int`类型\n\nC语言提供了很多的整数类型，你可能想知道为什么只有一种还不够，答案就是这样C语言就可以让你将特定的变量用在特定的地方。具体来说，C语言的各个整数类型不同在值域的大小与是否含有负数上。`int`是最基本的整数类型，但是你要是为了满足机器任务的特定需求的话，其他的类型也都是可用的。\n\n`int`类型是一种有符号的整数类型，有符号意味着`int`类型的整数可以是正数、也可以是负数，或者是0。`int`类型的值域是取决于计算机系统的，通常一个`int`类型的整数的大小就是内存的一个字长。因此，旧版的16位IBMPC适配器，就可以使用16个位来储存整数，也就是从-**32768**到**32767**。现在的个人电脑一般是使用32位的整数大小，在这张结尾的表3.3可以看到一些个例子。现在个人电脑产业也正在向64位处理器发展，那样也就可以使用更大的整数了。ISO/ANSI C语言特别指出`int`的最小范围应该是-**32767**到**32767**，通常系统会专门拿出一个位来保存符号，第十五章描述这种了一般的方法。\n\n#### 3.4.1.1 声明`int`类型\n\n正像你在第二章看到的，关键字`int`可以用来声明一个基本的整型变量。声明，首先是`int`，然后是变量的名称，最后是一个分号。要是声明多个变量的话，可以分别声明，也可以用逗号分隔，把一系列的变量名列出来，下面的声明方法都是合法的。\n\n![](/img/valid_declaration.png)\n\n你可能已经使用过分别声明变量的方法了，或者你已经尝试在一行中声明全部的变量了。效果都是一样的：就是对四个`int`大小的变量分配空间并与变量名相联系。\n\n这些声明语句创造了变量，但并没有给它们赋值，变量要如何得到值呢？你已经见过两种方法了，第一种是赋值语句\n\n![](/img/assignments.png)\n\n第二，变量也可以使用函数来赋值，比如说`scanf`函数。\n现在我们来了解一下第三种方法吧。\n\n#### 3.4.1.2 变量初始化\n\n对变量进行***初始化***也就是给变量赋起始值，或者初值。在C语言中，这可以作为声明的一部分，只需要在变量名后加上赋值运算符还有你想要赋给这个变量的值就可以了。下面是一些例子。\n\n![](/img/initialization.png)\n\n在最后一行，只有`cats`被初始化了，速读一遍，你有可能觉得dogs也会被赋值为94，所以还是最好避免把未赋值与已赋值的变量放在一行之中吧。\n\n简单来说，这些声明会为变量创造空间，并为它们贴上变量类型的标签，而且还可以给赋变量起始值。（见图3.4）\n\n![图3.4](/img/DefinenInitial.png)\n\n#### 3.4.1.3 `int`型常量\n\n在上一个例子中各种各样的整数（21、32、14、94等），就是整型常量。当你书写一个没有十进制小数点并且没有指数的数时，C就会将这个数认作整型常量。因此，22与-44都是十进制整型常量，但是`22.0`与`2.2E1`就不是。C语言会把大多数整型认作`int`类型常量。但很大的数会有区别。看最后对于long常量与long long常量的描述就知道了。\n\n#### 3.4.1.4 打印`int`值\n\n你可以使用`printf()`函数来打印`int`类型的值，正像你在第二章看到的，%d符号可以在十进制整数被打印出来的地方作为占位符。%d的名称叫格式化符，因为它声明了`printf()`打印值的类型每一个在格式化字符串中的每一个`%d`都代表着一个`int`类型的值，它就在字符串后面的列表中。那个值可以是一个`int`类型变量代表的，也可以是一个`int`类型常量代表的，或者任何有`int`值的表达式。这样，你就有责任让格式化符与之后的列表中的值一致了，编译器并不会报出这种错误。图3.2就表示了一个初始化并且打印变量值，常量的值，还有简单表达式的值的程序，它也提示了你如果你不小心的话会发生什么。\n\n![图3.2](/img/Listing3.2.png)\n\n编译完运行这个程序的结果是这样的。\n\n![](/img/result1.png)\n\n第一行输出，第一个`%d`代表着一个`int`类型变量`ten`第二个代表着常量2，第三个呈现的是`ten` - `two`的值。但第二行，使用的是`ten`这个变量代替了第一个`%d`但是之后的值全都是随机的，是从最近的两个内存空间中获取的值！（你回去的值有可能与这里显示的值相差很多，不仅内容不一样，而且不同的编译器对于这些内存区的管理方法也不一样。）\n\n你有可能对编译器为啥并不会捕捉到这个很明显的错误，还是怪`printf()`函数的原始设计吧。大多数函数都会获取一个值作为参数，编译器可以检查出来你使用的值是不是恰当，但是`printf()`可以获取一个、两个、三个或者更多的参数，那就让编译器无法使用常用的错误检测方法了。记住，一定要检查格式化符是不是与被显示的值匹配。\n\n#### 3.4.1.5 八进制与十六进制\n\n通常来说，C语言会认为整型常量是十进制数。但是八进制与十六进制也受到许多编程人员的欢迎。因为8与16都是2的幂，但10并不是，这些进制系统有时会为与计算机相关的值的表达提供便利。例如，数字65536经常会出现在16位的机器中，它只是10000的十六进制数，十六进制数中的每一位数都对应着实际的四个位。例如，十六进制数3就对应着0011，5就对应着0101，所以35就对应着0011 0101，53就对应着0101 0011。这种对应就会使十六进制与二进制的转换非常简单。但是电脑是怎么判断10000是什么进制的数字的呢？在C语言中，数字不同的前缀就显示了不同的进制，0x（0X）就意味着你正在使用十六进制值，所以16在十六进制下会被写作0x10或0X10。相似地，前缀0就表示你正在使用的是八进制值。例如，十进制数16在八进制数中就写为020，在15章我们会更加充分地讨论不同的数制。\n\n要知道的是不同的数制系统是为你提供便利的，它并不会影响数值的储存方式，也就是说，你可以写16、020或者0x10，这个数还是会以二进制的方式储存起来。\n\n#### 3.4.1.6 展示八进制与十六进制数\n\n正像C语言能够让你以三种方式书写数字一样，它也可以让你以三种方式的任意一种展示数字。展示一个八进制整数可以使用%o，十六进制使用%x，如果你想显示前缀，你可以使用修饰符#，比如`%#o`，`%#x`，`%#X`，有了它们你就可以在数字前面显示0，0x，0X前缀。图3.3给出了一个小小的例子（想到你有可能必须加上一个`getchar()`，它会在一些IDE中防止程序立即关闭）。\n\n![图3.3](/img/Listing3.3.png)\n\n编译运行过后结果是这样的。\n\n![](/img/result2.png)\n\n你可以看到相同的数字被以三种不同的数制打印出来了，`printf()`函数可以实现这种转化。\n注意前缀只有加上#时才会出现。\n\n### 3.4.2 其他整型\n\n当你正在学习C语言时，`int`类型有可能已经满足了你大部分的整型需求了。但为了内容的完整，我们会研究其他的类型。如果你喜欢的话，你可以只大体浏览一下这一部分，然后跳到对于`char`类型那一部分，然后如果有啥需要的可以再回来复习。\n\nC语言使用三个形容词关键字来修饰基本整型：`short, long, unsigned`下面是需要记住的一些点。\n\n+ `short int`类型，或者直接`short`，会比`int`使用的内存更少，由此也就可以在只使用小的数字的时候节省一些空间。像`int`一样，`short`为有符号类型。\n+ `long int`类型，或者直接写`long`，占用的内存会比`int`更多，因此可以让你表示更大范围的数字，像`int`一样，`long`为有符号类型。\n+ `long long int`类型，或者`long long`（都是在C99标准下被引入的），会比`long`类型占用的内存更多，也就让你可以使用比`long`范围更大的数字。像`int`一样，`long long`是一个有符号的类型。\n+ `unsigned`类型，或者写成`unsigned`，是为非负的变量而设置的，这种类型改变了可储存数字的范围，例如，16位的`unsigned int`可以表示0-65535的数字，就不是-32768-32767了，用来表示符号的那一位在无符号类型这变成了另一个可以表示数字的位，也就让数字的表示范围扩大了。\n+ `unsigned long int`类型，或者`unsigned long`还有`unsigned short int`，或者`unsigned short`，在C90标准下都是可以被识别的，在C99标准下又添加了`unsigned long long int`类型，或者`unsigned long long`。\n+ 为了让你的意图明显，关键字`signed`可以被用在任何有符号类型上，例如`short`, `short int`, `signed short`,`signed short int`都是一种类型。\n\n#### 3.4.2.1 声明其他整型\n\n其他整型与`int`类型的声明方式是相似的，\n下面就展示了一些例子。\n并不是所有的编译器都能识别最后三种类型，最后一个例子是C99标准新加进去的。\n\n![其他整型](/img/othertypes.png)\n\n#### 3.4.2.2 为什么要用多种整型？\n\n为什么说`long`与`short`与`int`相比会使用不同的内存呢？因为C语言会确保`short`不会长过`int`，`int`也不会长过`long`，主要的目的就是为了适应不同类型的机器。例如在运行着Windows 3.1的IBM PC上，`int`与`short`都是16位的，而`long`是32位的，而在Mactonish Power PC上，`short`类型是16位的，而`int`和`long`类型是32位的。PowerPC G3/G4中的Pentium芯片的字长是32位，因为这就可以让整型超过20亿（见表3.3），C语言在处理器/操作系统的实现没有必要超出这个数值。因此，`long`与`int`大小是一样的。对于许多的使用过程，那个大小的整数是不需要的，所以节省内存的`short`就被创造了。但另一方面，原本的IBM PC只有16位的字长，那就意味着需要更长的`long`类型。\n\n现在64位的处理器都变得很常见了，比如IBM Itantium，AMD Opteron，还有PowerPC G5。因为64位整型的需要，`long long`类型也就应运而生。\n\n现在最常见的实践是把`long long`设置为64位，把`long`设置为32位，把`short`设置为16位，把`int`设置为16位或者32位，它的大小取决于电脑的自然字长。原则上，这四种类型可以代表四种不同的大小。\n\nC语言标准为确定每一种基本数据类型的最小尺寸提供了指引。`short`与`int`的最小范围是从-32,767到32,767，对应着16位的单元，而`long`类型的最小范围是-2,147,483,647到2,147,483,647，对应着32位的单元。（注意，为了易读，我们使用了逗号分开，但是C语言代码是不能写成这样的）。对于`unsigned short`与`unsigned int`，最小的范围是0到65535，而`unsigned long`的最小范围是0-4,294,967,295/,`long long`类型为了迎合64位的需求，它的最小范围很大，是-9,223,372,036,854,775,807到9,223,372,036,854,775,807，而`unsigned long long`就是0到18,446,744,073,709,551,615.（对于那些检查写的对不对的人，下面是它的英文表示，但是谁要计数呢？）\n\n![(一脸认真)](/img/nonsense.png)\n\n你会在什么时候使用这些不同的`int`类型呢？第一，考虑`unsigned`类型，使用它们计数是很好的，因为你不需要负数，而且`unsigned`类型比`signed`类型的范围更大，可以得到更大的整数范围。\n\n如果你需要处理超过了`int`类型的范围的数字，使用`long`类型，但是在`long`比`int`长的系统中，使用`long`会让计算变慢，所以没必要的话就不要用`long`，进一步说，如果你正在一个`int`与`long`类型长度一样的系统上写代码，而你又需要32位的整数，你就需要使用`long`而不是`int`了，那样程序才可以在转到16位机的时候正常运转。\n\n相似地，如果你需要64位整型数的时候就使用`long long`吧，一些电脑已经使用着64位的处理器，而且并且正在服务器、工作站甚至桌面的64位处理也正在变得越来越普遍。\n\n如果你需要节省内存空间的话，使用`short`来节省内存空间，比如如果你在一台`int`类型是32位的机器上，需要16位的值这种情况。通常只有当你的程序使用整型数组这种与系统的可用内存极其相关的情况下节省内存才是必须的。另一个使用`short`的原因是它有可能与被电脑的特定部分使用的硬件寄存器的大小相同。\n\n> ![](/img/overflow.png)\n> 整型溢出。\n> 当一个整型相对于它的类型太大了会怎么样呢？让我们把一个整型变量设置到它可能的最大值，并用它加一些数，看看会发生什么。`unsigned`与`\tsigned`类型都可以试试（`unsigned int`的格式化符是`%u`）\n> 这就是系统给出的结果\n> ![](/img/flowresult.png)\n> `unsigned`类型好像汽车的里程计一样，当它到达了最大值，它就会返回到它的最小值，变量i也很相似，主要的区别是`unsigned`类型的`j`\t是以0开始的，但是`int`类型的`i`是以-2147483647开始的。\n> 注意的是，你如果没有被告诉这个数据已经溢出了，你还是会不断地在这个问题上打转。\n> 这里描述的行为是由C语言`unsigned`类型的规范控制的，标准并不规定`signed`应该行为如何，这里展示的行为也是通常会发生的，但是你以后会找到不一样的东西的。\n\n#### 3.4.2.3 `long`常量与`long long`常量\n\n一般地，当你在代码中使用2345这样的数字时，它会被储存为一个`int`类型的常量。那么如果你使用1000000这样不能被`int`储存下来的数字呢？编译器就会将它识别为`long int`，如果认为这个类型已经足够大了的话。如果比`long`类型的最大值还要大的话，C语言会将它当做`unsigned long`类型，如果那还不够的话，它就会把它当做`long long`类型或者`unsigned long long`，如果这些类型可以满足要求的话。\n\n八进制与十六进制的常量会被认作`int`类型，除非这个值太大，然后还是以上文的顺序依次递加。\n\n有些时候你有可能想让编译器把一个小点的数储存为`long`类型。如果你在编程的过程中需要外显地使用内存地址，例如在IBM PC上，就有可能有这样的问题。而且，一些基本的C语言函数是需要`long`类型的值的，你可以在数值加上后缀`l`或者`L`，第二种方式更好，因为看起来不像数字`1`。因此，一个有着16位大小的`int`与32位大小的`long`，会将`7`这个数储存在16位中，而将`7L`储存为32位中，而且这两个后缀对于八进制与十六进制都是适用的，像是020L与0x10L。\n\n相似地，在那些有`long long`类型的系统中，你就可以使用`ll`或者`LL`后缀，比如`3LL`，而且还可以使用`u`或者`U`来表示`unsigned long long`类型，就像`5ull`或者`10LLU`或者`9Ull`。\n\n#### 3.4.2.4 打印`short, long, long long`与`unsigned`类型\n\n要打印一个`unsigned int`类型的数字，只需使用`%u`符号，`long`类型可以使用`%ld`，但如果你的机器中`int`与`long`是大小一致的，那`%d`就可以了，但是代码有可能在别的系统中就不能正常运作了，所以对`long`来说最好还是使用`%ld`吧，对于`x`与`o`都可以在前面加上`l`。因此对于十六进制的`long`类型数你会使用`%lx`，类似在八进制会使用`%lo`，需要注意的是即时C语言提供了大写的`L`后缀，但是在格式化符中，只能使用小写。\n\nC语言有几种额外的`printf()`格式，首先，你可以在使用`short`类型时在`%d`的`d`前加`h`来表示十进制的`short`整型，同理`%ho`也是可以的，而且`h`与`l`是可以再加上`u`表示无符号的。例如，你会使用`%lu`符号表示`unsigned long`类型，图3.4就提供了一个例子。支持`long long`的系统也可以使用`%lld`或者`%llu`分别表示有符号与无符号的`long long`整型，第四章会对格式化符进行更充分的阐述。\n\n![图3.4](/img/Listing3.4.png)\n\n这是系统的输出：\n\n![](/img/result3.png)\n\n这个例子就显示出了使用错误的格式化符会有意想不到的后果。第一，注意到对于变量`un`使用的`%d`格式化符结果输出了一个负值，原因就是无符号与有符号数实际上是以相同的二进制排列被储存起来的（第15张会更详细地谈论这种属性），所以如果你告诉`printf()`函数这个数是没有符号的，与告诉它这个数是有符号的输出结果是不一样的。这种行为常会在你输入一个超限的数值时出现。小的整数，在两种格式化符之下都是一样的。\n\n第二，注意到无论你告诉`printf()`是`short`还是`int`类型，`short`变量`end`都是可以打印出正常值的。这就是因为当向函数输入一个参数的时候会自动将它转化为`int`类型，那么你就会问了:1.为什么这种转化会发生？2.`h`修饰符的用处在哪里？第一个问题的答案是`int`类型可以被电脑更加高效地处理。所以在`short`与`int`类型大小不同的机器上，有可能传递一个`int`值会更快。第二个问题的答案是你可以看看一个更加长的整型数如果被缩短为`short`类型了会看起来怎样。第三行的输出也为这一点提供了例证，当65537被写为32位二进制数时，它看起来是`00000000000000010000000000000001`这样子的，使用`%hd`格式化符会迫使`printf()`只看向最后的16个位，因此它会只打印`1`，相似的，最后一行的`verybig`使用`%ld`就会只看向最后的32位，而不是完全的位数。\n\n早些时候你已经了解标识符的数量与显示数字的数量匹配的重要性了，现下你也知晓了标识符的种类也要匹配。\n\n![](/img/matchup.png)\n\n匹配`printf()`函数的格式化符\n记着要去检查一下你是不是对于每一个要在`printf()`中打印的值都给予了一个格式化符，并检查是不是每一个的格式化符都与显示的值的类型相互对应。\n\n### 3.4.3 字符 char\n\n`char`类型是用来储存像字母、标点符号这样的字符的，但是严格来讲它其实是一个整数类型。为什么？`char`这个类型实际上储存的是整数而不是字符，为了处理字符，电脑会使用数字编码来让某一个整数代表某一个字符。在美国最常用的字符编码表是ASCII编码表，它已经在书的前封的背面给出来了，是这本书使用的编码表。举些例子，`65`在ASCII码表中代表的是大写的`A`，所以如果需要储存字母`A`，只需要储存数字`65`即可，（许多IBM主机用的是不一样的编码系统，它叫做EBCDIC，但是准则都是一样的。但在美国以外的计算机系统使用的编码表有可能是完全不同的。）\n\n基础的ASCII码是从0到127的，这个范围小到一个字节就可以保存下来，`char`类型通常会被定义成8位的内存单元，所以它不仅仅可以储存下来基础的ASCII码。许多系统，如IBM PC与苹果公司的Macintosh，可以提供更大的ASCII码表（这两个系统是不一样的），但是还是在8位范围之内。更加普遍的，C语言会确保`char`类型的大小是足够储存系统中C语言实现的需要的基础字符的。\n\n许多的字符集会有不只127而是255分值，例如日本的kanji字符集，商业的Unicode协议为代表全世界的各种字符创造了一个系统，现在已经有96000个字符了。ISO（国际标准组织）与IEC（国际电子委员会）为字符集创造了ISO/IEC10646标准。幸运的是，Unicode标准与ISO/IEC10646标准是始终协调的。\n\n使用这些字符集的平台有可能会使用16位或者32位的`char`类型代表，C语言定义下`char`的长度是1个字节，现在在C语言的记录中，一个字节会是16位或者32位，而不是那些系统上的8位。\n\n#### 3.4.3.1 定义`char`类型变量\n\n正像你会期望的，`char`类型变量与其他变量的定义方式相同，这里就是一些例子。\n\n![](/img/chardef.png)\n\n这几行代码创造了三个`char`类型的变量：`response`，`itable`与`latan`。\n\n#### 3.4.3.2 字符常量及其初始化\n\n假定你想要初始化一个字符常量为大写字母A，电脑语言是要让事情变得简单起来的，你不需要记忆ASCII码，你也不会，你可以直接以下面的方式给`grade`变量赋值`'A'`\n\n![](/img/charassign.png)\n\n被双单引号框定的单一字符就是C语言中的***字符常量***，当编译器看到了`'A'`，它会将A字符转化成相应的字符编码值，单引号是必须的，下面就是例子。\n\n![](/img/chardeclare.png)\n\n如果你遗漏了引号，那么编译器就会认为`T`是一个变量名，如果你使用双引号的话，它会认为你正在使用字符串，我们会在第四章讲解字符串。\n\n因为字符确实是以数字的形式被储存起来的，你还是可以使用数字编码为`char`类型变量赋值。\n\n![](/img/numassign.png)\n\n在这个例子中`65`是一个`int`类型的，但是因为这个值是小于最大的`char`类型值的，所以可以无误地赋给`grade`变量，因为65对应着ASCII码中的字母`A`，所以`A`就被赋给了`grade`变量。但注意，这个例子只是为了表示系统用的是ASCII码系统，但用`65`与`'A'`都是一样的，因此，使用字符常量要比使用数字编码是要好的。\n\n有点奇怪的是，C语言会将字符常量当做`int`类型常量而不是`char`来看待。例如，在32位使用ASCII字符编码，`char`类型为8位的系统中，这一行代码：\n\n![](/img/gradeb.png)\n\n就会将`'B'`呈现为66这个值储存起来，但是`grade`是以8位单元储存的66，这种特点就会使字符常量不能存放多个字符，像`'FATE'`这样，因为4个单独的ASCII码被储存在32位的单元中，但是试图将这样一个字符常量赋给`char`类型变量会导致只有最后的8位被使用，也就是变量被赋给的是`'E'`。\n\n#### 3.4.3.3 不会被打印出来的字符\n\n单引号对符号、数字还有标点符号都是适用的，但是如果你浏览过这本书前封里的那张表，你会看到一些ASCII字符是打印不出来的。例如，一些代表着回车或者跳到下一行，又或是会让终止铃响的符号，这些符号是怎么被表示的呢？C语言提供了三种方法：\n\n第一种方法就是我们已经提到过的，使用ASCII表编码的方法。例如，蜂鸣符对应的值就是7，所以你可以这样写。\n\n```C\n\tchar beep = 7;\n```\n\n表示这些字符的第二种方法是使用特殊的符号序列，它们叫做***转义序列***，表3.2给出了转义序列与它们的含义。\n\n![表3.2](/img/Table3.2)\n\n在赋值给字符常量的时候，转义序列必须要由单引号框定，例如，你可以这样赋值：\n\n```C\n\tchar nerf = '\\n';\n```\n\n然后打印变量`nerf`，打印器或者屏幕上的行就会往前一行（回车）。\n\n现在我们可以看看每一个转义序列是做什么的，警告符`\\a`是在C90标准中添加的，它会生成一条有声有色的警告，警告的类型因硬件而定，一般蜂鸣声是最常见的（在有些系统中，警告符是没有用的。）ANSI标准规定了警告符是不能改变活跃位置的。活跃位置这个概念指的是在显示设备（如屏幕、电报机、打印机等等）上下一个字符会出现的地方。简单来说，它就是屏幕上你已经用惯了的光标的总称。在程序中使用警告符最终只会发出蜂鸣声，但并不会移动屏幕上的光标。\n\n然后，是`\\b, \\f, \\n, \\r, \\t`还有`\\v`这些转义序列，它们都是常见的输出设备的控制符，它们在影响活跃位置上很出色，回车(`\\b`)，会将活跃位置往前挪一个空格。换页符(`\\f`)会将活跃位置转移到下一页的开头。换行符(`\\n`)会将活跃位置切换到下一行的开始，(`\\r`)，回车符(`\\r`)会让活跃位置回到一行的开头位置，水平制表符(`\\t`)会将活跃位置向右移动一个`Tab`键的位置（通常，这些是以字符位置1、9、17、25这样的格式），垂直制表符(`\\v`)，会让活跃位置移动到下一个垂向的`tab`位置。\n\n这些转义序列并不一定在所有的显示设备中起作用。例如，换页符与垂直制表符在电脑屏幕上只会打印出来一个奇怪的字符，并没有任何光标的移动。但是如果在打印机上使用就可以按照描述工作了。\n\n最后的三个转义序列（`\\\\, \\', \\\"`），能够以字符常量的形式让你使用`\\, ', \"`（因为这些符号是作为`printf()`函数的一部分用来定义字符常量的，如果你要把它们字面上打印出来，那将会非常令编译器困惑。）假设你想要打印下来下面的这一行字。\n\n```Bash\nGramps sez, \"a \\ is a backslash.\"\n```\n\n就需要用下面代码的形式来写。\n\n```C\nprintf(\"Gramps sez, \\\" a \\\\ is a backslash.\\\"\\n\");\n```\n\n最后的两种形式（`\\0oo, \\xhh`）是ASCII码的特殊标识，是要以八进制ASCII码的形式来代表字符，在前面需要加上`\\`然后用单引号来框定整个字符，例如，如果你的编译器不能识别警告符，你就可以使用下面的ASCII码：\n\n```C\n\tbeep = '\\007';\n```\n\n你也可以省略前面的0，所以`'\\07'`与`'\\7'`都是可以的。这个符号会让数字被理解成八进制，尽管前面没有0。\n\n从C90开始，C语言提供了第三种选择，使用十六进制的字符常量，这样说来，斜杠后面是`x`或者`X`与1到3位的十六进制数。例如，Ctrl+P符号在ASCII十六进制符码里就是10（十进制下就是16），所以它是可以被表达为`'\\x10'`或者`\\'x010'`的，图3.5展示了一些整型的代表。\n\n![图3.5](/img/Figure3.5.png)\n\n当你使用ASCII码的时候，要注意数字与字符之间的差异。例如，字符4在ASCII中的值是52,`'4'`是一个符号而不是一个数字。\n\n现下，你可能有这几个问题：\n+ ***为什么转义序列在最后一个例子中没有用单引号括起来？***\n（***最后一个例子`printf(\"Gramps sez, \\\" a \\\\ is a backslash.\\\"\\n\");`***）。\n\t只要是一个字符，不管它是不是转义字符，当它是字符串的一部分的时候，都是需要用双引号框起来的，而不是单引号，但单个字符是无一例外由单引号括起来的。由双引号括起来的是***字符串***。（第四章会讲到）相似地，不属于转义字符的数字会被当做一般字符打印出来（如`printf(\"Hello!7\\n\");`打印出来的是`Hello7`，但`printf(\"Hello!\\007\");`输出的是一行`Hello！`加上一声警告）。\n+ ***我应该什么时候使用转义序列？什么时候使用对应的ASCII码？***\n\t如果你需要使用其中一个转义序列，比如说`'\\f'`，或者作为替代的`'\\014'`，最好使用前者。首先，这种表示方法更容易记忆：其次，它更容易在机器之间转移，如果其他系统不适用ASCII码，`'\\f'`还是可以使用。\n+ 如果我需要使用数字变啊，为什么使用的是`'\\032'`而不是`032`？\n\t第一，使用转义字符的方式会让阅读你代码的人轻松地知道这是一个字符编码。第二，如`\\037`这样的转义序列是可以内嵌于C语言字符串的（？[就像`\\007`一样])。\n\n#### 3.4.3.4 打印字符\n\n`printf()`函数可以使用格式化符`%c`表示一个字符将要在这个位置被打印。你想到字符常量是1位的整型值，因此你也可以用`%d`符号，那样的话你就会得到一个整数，`%c`格式化符会告诉`printf()`函数来打印那个编码值对应的字符，例3.5就以两种方式展示了`char`类型变量。\n\n![例3.5](/img/Listing3.5.png)\n\n尝试运行，输出是这样的。\n\n![](/img/C67.png)\n\n当你使用程序的时候，不要忘记在写完了字符之后按下回车键。`scanf`函数会接收你写下的字符，然后取地址符(`&`)会将字符赋给字符变量`ch`。接下来，`printf()`函数会打印两次`ch`这个变量，第一次是以字符的形式打印的（使用`%c`格式化符的效果），第二次是以十进制整数的形式（同理，`%d`的效果）。需要注意，`printf()`的标识符会决定数据被如何呈现，呈现方式与数据的储存方式没有关系。\n\n![数据储存与输出](/img/Figure3.6.png)\n\n#### 3.4.3.5 有符号还是无符号？\n\n有的C语言实现里会使`char`是一个有符号的类型，那也就意味着`char`可以接受从-128到127的值。其他的C语言实现会让`char`是一个无符号的类型，那么它的范围就变成了0到255，你的编译器的使用手册应该会告诉你`char`是什么类型，或者你可以看看`limits.h`头文件，下一章会讲述。\n\n在C90标准下，C语言允许你使用关键字`unsigned`与`signed`来修饰`char`，那样的话不管原本的`char`是有符号还是无符号。你都可以任意变化它们的类型。它们在处理小范围的十进制整数时是很有用的。要是只是为了使用字符，只使用`char`就可以了。\n\n### 3.4.4 `_Bool`类型\n\n`_Bool`类型是C99标准添加的，它们是被用来代表布尔值的，也就是逻辑上的`true`与`false`。因为C语言是使用0表示`false`，用1表示`true`的，所以布尔类型实际上只是一个整型，但是只需要一位的内存，因为要储存0与1一位就足够了。\n\n程序会使用布尔值来选择下一步运行哪个代码，代码执行会在第六章（C语言控制语句：循环）与第七章（C语言控制语句：分支结构与跳跃结构）更详细地讲到，所以我们到那个时候再讨论这个问题。\n\n### 3.4.5 可转移的类型：`inttypes.h`\n\n还有更多的整数类型吗？没有了，但是还有更多你可以使用与已经存在的类型的名字。你或许会认为你已经看到的整型名已经很多了，但是原本的名字确实存在问题。知晓一个变量是`int`并不会让你了解它会占用多少内存，除非你检查了系统的描述文件。为了解决这个问题，`int16_t`可以声明一个16位的有符号整型，`uint32_t`声明了一个32位的无符号类型。\n\n要让这些名字可用，你需要包含一个`inttypes.h`头文件（注意在这一版时候已经有了，但是一些编译器上还不支持这个功能），这个文件使用了`typedef`（第一次讲到是在第五章：运算符、表达式与语句），来创造新的类型名。例如，它会让`uint32_t`成为基本类型的一种别名或者同义替换，有可能是`unsigned int`也有可能是`unsigned long`。你的编译器会提供一个与你的计算机系统协调的头文件，这些新的设计被称为***精确长度类型***，例如，`int_least8_t`会是最小的类型，它可以承载8位的有符号整型值。如果某个系统上最小的类型是8位的。`int8_t`类型是不会被定义的，但`int_least8_int`是可以被定义的，或许会被实现为16位的整型。\n\n当然，一些编程人员会更关心速度而不是空间。对于它们，C99定义了允许快速计算的一系列类型，它们被称为***最快最小长度类型***，例如，`int_fast8_t`会被定义为你的系统上能够最快运算的8位有符号值。\n\n最后，对于其他的编程人员，只有系统上最大的一些整型才有用，`intmax_t`就代表了那种类型，它可以储存任何合法的有符号整型值，同样，`uintmax_t`会代表可用的最大的无符号类型。这些类型有时是比`long long`或者`unsigned long`还要长的，因为C语言实现是准许定义超过需要的类型的。\n\nC99不仅提供了这些新的而且可运输的类型名，它还有有利于输入输出的符号表示。比如说，`printf()`对于每一种类型都需要特别的修饰符，所以你要打印`int32`，你要使用的是`%d`还是`%ld`？不同的机器的标识符并不一样，但没问题，C99标准下是有字符串宏命令来打印这些值的，我们会在第四章详细讲述的。例如，`inttype.h`头文件会将字符中的`PRId16`作为对于不同对应的类型的合适的格式化符。（例如hd（`short`）或者d），例3.6是一个讲述了如何使用可运输类型与相对应的格式化符的简单的例子。\n\n![例3.6](/img/Listing3.6.png)\n\n在最后的`printf`语句中，`PRId16`被`inttypes.h`对`hd`的类型定义替换了，把这一行代码变成了这个样子。\n\n![](/img/turning1.png)\n\n但是C语言需要连贯的字符串，所以引号需要是连续的，然后这一行就变成了这个样子。\n\n![](/img/turning2.png)\n\n这就是输出，注意这个例子也使用了`\\\"`转义字符来打印双引号。\n\n![](/img/out3.png)\n\n参考单元VI“更多的整型”提供了`inttypes.h`头文件添加的内容的完整解释，也列举了所有的格式化宏。\n\n![](/img/C99sup.png)\n【C99支持】\n编译器供应商已经开始以不同的速度与顺序开始实现C99的新特性了，但在这本书出来的时候，一些编译器还没有实现`inttypes.h`的头文件与特征。\n\n### 3.4.6 `float, double`与`long double`类型\n对于大多数的软件开发项目来说，这些多种多样的整型已经能够很好地满足要求了。但是，对于财务或者面向数学的程序，我们通常会使用***浮点数值***，在C语言中，这些数字就对应着`float, double, long double`这几种类型，对应着FORTRAN与Pascal语言中的`real`类型。使用浮点数，正像上文所说，能够让你呈现更大范围的数字。包括十进制小数值。浮点数值的表示与***科学计数法***是很相似的，那是科学家用来表示非常大或者非常小的数字的一种体系。\n\n在科学计数法中，数字会被表示成十进制数乘10的整数幂，这里就是一些例子。\n\n![](/img/sciennotation.png)\n\n第一列是通常的表示方法，第二列是科学计数法的表示，第三列是质数的表示方法，或者说是***e - notation（e表示法）***，通常是给计算机或者计算机写的，在e的后面是10的指数，图3.7展示了更多的浮点表示法。\n\nC语言标准规定了`float`类型应该至少能够代表6位有效数字并且范围在10的-37次方到37次方。第一个要求的意思是，比如一个`float`必须要精确地表示至少前六位有效数字，就像33.333333。如果你喜欢使用较大或者较小数字（2.0e30（太阳质量）或1.6e-19（元电荷））的话，第二条要求会为你提供方便。通常，系统会使用32位类储存一个浮点类型的数字，8位用来给予指数值与符号，24位来表示非指数部分，叫尾数或者有效数字与它的符号。\n\n![一些浮点数表示](/img/Figure3.7.png)\n\nC语言也有一个`double`（双（double）精度）浮点型，`double`类型与`float`类型需要的最小值是一样的，但是它把最小值的有效数字位数拓展到了10位。通常的`double`表示会使用64位而不是32位，一些系统会使用32个位来表示非指数部分，这也就增加了数字有效的有效数字位数，减少了取整错误。其他的系统会使用一些位储存更大的指数，这也就增加了可以容纳数字的范围。每一张方法都至少有13位的有效数字，不只能满足最小标准的要求。\n\nC语言还允许你使用一种浮点类型：`long double`，目的就是进一步增加`double`类型的准确度。但是C语言只保证`long double`至少与`double`类型的精度是一样的。\n\n#### 3.4.6.1 声明浮点变量\n\n浮点变量与它们的整型兄弟的声明与定义的方式相似，这里是一些例子，\n\n![](/img/floatdeclare.png)\n\n#### 3.4.6.2 浮点常量\n\n当你书写一个浮点常量时，你会有很多的选择，形式是很多，有符号的一串数字。包括十进制的小数点，或是由e或者E跟着的10的指数。这里是两个合法的声明浮点类型的例子。。\n\n![](/img/twoexam.png)\n\n你可以遗漏正号，没有关系（2E5）或者可以遗漏指数部分（19.28），但是并不能同时存在。你可以遗漏小数部分或者整数部分，但也不能全都没有（那也不剩什么了。）下面是更多的合法的浮点常量。\n\n![](/img/morevalid.png)\n\n在使用浮点常量的时候，不要乱添加空格。\n\n![错的](/img/nospaces.png)\n\n一般来说，编译器会认为浮点常量都是`double`精度的，假设`some`是一个`float`类型的变量，并且你有下面的一行代码。\n\n![](/img/codeline.png)\n\n`4.0`与`2.0`都是以`double`类型储存起来的，一般每一个使用64位，结果是使用浮点运算获得的，而且只有结果转换成了正常的`float`大小范围内才可以使用`float`。这也就为运算提供了准确度，但是会让你的程序变慢。\n\nC语言还是你能够超越默认方法，你可以使用f或者F后缀来让编译器把一个浮点常量储存为`float`类型，比如`2.3f`与`9.11E9F`还有`l`或者`L`后缀，可以储存为`long double`类型，例如`54.3l`，`4.23e4L`。注意的是，比起`l`，`L`更不容易被看成`1`，如果浮点数没有后缀，它的类型就是`double`。\n\nC99添加了表示浮点数的另一种方式，它是使用十六进制来表达的（0x或者0X加上十六进制数）。那样指数就是`p`或者`P`而不是`e`或者`E`了，指数是2的，也不再是10的了。这就是数字看起来的样子。\n\n![](/img/lookslike.png)\n\n`a`是十进制的10，`.1f`是1/16加上15/256，然后`p10`是2的10次方，或者1024，用十进制表示这就是10364.0。\n\n并不是所有的编译器都已经支持C99的特性了。\n\n#### 3.4.6.3 打印浮点数值\n\n`printf()`函数会使用`%f`格式化符来打印`float`与`double`类型的数值，这个符号使用的是十进制小数符的表示方法，还可以使用`%e`来使用指数表示法来打印它们，如果你的系统支持C99中提供的小数的十六进制格式，你就可以使用`a`或者`A`代替`e`与`E`。`long double`类型是以`%Lf`或者`%Le`与`%La`标识符来分别使用这三种方式的。需要注意的是，`float`与`double`都可以使用`%f, %e, %a`标识符来输出。这是因为当一个`float`类型的变量作为语句传递到任何函数时，C语言会自动把它转化成`double`类型，而不是它本来的类型，比如说`printf()`函数就是一个例子。例3.7说明了这种行为。\n\n![例3.7](/img/Listing3.7)\n\n这里是输出：\n\n![](/img/out1.png)\n\n这个例子说给出了默认的输出，下一章会讨论如何通过设置输出域长度与十进制的位权数，控制输出的外形。\n\n#### 3.4.6.4 浮点上溢与下溢\n\n可能最大的`float`类型就是值大概是3.4E38，然后你执行了下面的代码。\n\n![](/img/toobig.png)\n\n输出（个人测试）\n\n![](/img/INF.png)\n\n发生了什么？这就是***溢出***的一个例子-运算得出的结果大到无法表示。对于这种情况，这种行为之前是没有被定义的，但是现在C语言指定`toobig`是一个几乎代表***无限***的数字，`printf()`就会显示`inf`（infinity）（或者那个样子的一些变体）\n\n那么如果是要分辨非常小的数字呢？这是会遇到更多的情况。你可以记起`float`是以指数部分与数字部分（或尾数）来储存的。如果会有一个数字有着最小的指数与最小的值，而且仍然可以使用所有可以使用的位来表达尾数，在`float`的精度范围内表示，这就是`float`类型下的最小值。现在我们把它除2，一般地，这会减少指数，但是指数也是能够表达的最小值了。所以就要到尾数的空余位那里减了，把第一位清空，然后丢掉最后的二进制值，类比一下就是，用四位有效数字的10进制值，比如`0.1234E-10`，除10，结果就是`0.01234E-10`，你就可以得到答案了，但是你会在这个过程中丢掉一个数字。这种情况就叫做下溢，C语言对于失去完全精度的浮点数值叫做***subnormal***（反常值）。所以把最小的正常浮点值除2就会有反常值。如果你除了一个太大的数字，你就会失去所有的精度，最后只剩下0，C语言库现在提供了函数来检查是否你的运算产生了反常数值。\n\n这里还有另一种特别的浮点值，`NaN`。例如你给予`asin()`函数一个名字它会返回所给数值的sin值，但是sin的数值并不能大于1，所以函数对于大于1的数值是未定义的，在这种情况下函数就会返回`NaN`值，那会被`printf`打印为`nan`、`NaN`或者相似的东西。\n\n![四舍五入问题](/img/drop4in5.png)\n拿一个数字，加1，然后减去原来的数，你会得到几？肯定是1是吧？像下面的浮点运算给予了你不同的答案。\n\n输出是这个样子的：\n\n![](/img/alldevices.png)\n\n这三种奇怪的结果的原因是电脑并不能够跟踪需要多少十进制空间来进行恰当的运算，2.0e20是2后面跟着20个0，通过加1的操作，你要改变这个数字的第21位数字，要正确地执行这个操作，程序需要能够储存21位数字的类型，`float`类型数通常只是六位或者七位数带着指数这个范围（最后的一位只能是0，不能改变）所以这种尝试在劫难逃。另一方面，如果你使用2.0e4的话你就可以得到正确的结果，因为你改变的是第5位数，`float`类型的精度允许你这样做。\n\n### 3.4.7 复数与虚数类型\n\n许多科学与工程运算会使用复数与虚数，C99为这些数提供了支持，（with some reservations），它是一个独立的实现，就像内置预处理命令一样，不需要其他类型的支持。（VCR芯片很可能并不需要复数来工作）。并且，更一般地。虚数类型是可选择的。简单来说，有三种复数类型，`float_Conplex，_Complex`与`long double _Complex`，举个例子，一个`float _Complex`变量，会包含两个`float`类型的值，一个代表复数的实部，另一个代表虚部。相思地，有三种虚数类型，它们叫做`float _Imaginary, double _Imaginary`与`long double _Imaginary`。\n\n包含`complex.h`头文件可以使你把`_Complex`与`_Imaginary`分别更换为`complex`与`imaginary`。而且还能够让你使用I来代表-1的平方根。\n\n### 3.4.8 超越基本类型\n\n这样我们已经讲完了一系列基本的数据类型了，对于你们其中一些人来说，数据类型可能很多，还有一些人可能会想着还需要其他的类型，比如说字符串类型。但C语言并没有。但是还是能够很好的处理字符串，你会在第四章第一次见到字符串。\n\nC语言确实有其他的类型，他们是从基本类型中衍生出来的。这些类型包括数组、指针、结构体、联合体。即使它们都是后面章节才要讲到的，我们已经在这一章的例子中已经偷摸添加了一些关于指针的东西了。（指针会指向变量或者其他数据对象的地址，`scanf()`中使用的`&`前缀就会创造一个指针，他会告诉`scanf()`在哪储存信息）\n\n![](/img/basicdata.png)\n**总结：基本数据类型**\n\t**关键字**：\n\t基本的数据类型是由11个关键字组成的：`int, long, short, unsigned, char, float, double, signed, _Bool, _Complex, _Imaginary`\n\t**有符号整型**：\n\t可以是整数值也可以是负值\n\t1. `int`- 系统给定的基本整型。C语言保证`int`至少有16位。\n\t2. `short`或`short int` - 最大的短整型不大于最大的`int`，并有可能更小，C语言保证`short`类型至少有16位。\n\t3. `long`或`long int` - 能够保存至少`int`的最大值大小的数，可以更大。C语言会确保`long long`类型至少有32位。\n\t4. `long long`或`long long int` - 这个类型至少能够保存`long`类型数的最大范围，可以更大，`long long`类型最小64位。\n\n通常，`long`类型是比`short`类型更短的，`int`会与他们之中的一个一样大。例如，以DOS系统为基础的PC系统，`short`是16位长的，而`int`是32位长的，以Windows 95为基础的系统会提供16位的\n`short`，而`long`与`int`类型是32位的。\n\n如果你喜欢的话，你可以在任何有符号类型前使用`signed`关键字，将它们有符号这个事实显露出来。\n**无符号整型：**\n\t这些类型只能从0到整数，因为去掉了符号位，这种类型的范围得到了扩大，使用关键字`unsigned`可以把你想要的类型变为无符号类型：比如`unsigned int, unsigned long, unisgned short.`单个的`unsigned`与`unisgned int`是一样的。\n**字符：**\n\t它们是像`A, &`这样的印刷字符。在定义上，字符类型会使用1个字节的内存来代表一个字符。在以往，字符字节大多数是8位，但现在它可以是16位或者更大，可以迎合使用的基准字符集的大小。\n\t\t**char** - 这种类型的关键字，一些实现中会使用有符号的`signed char`，但其他还是使用无符号字符。C语言允许你使用`signed`或者`unsigned`来划定你想要的类型。\n**布尔类型：**\n\t布尔值代表`true`与`false`，C语言会使用0与1代表这两个值。\n\t\t**_ Bool** - 是这种类型的关键字，它是一个无符号整型，只需要保存0与1这两个值的内存。\n**实数浮点型：**\n\t可以正数、负数或者零。\n\t\t[`float`] 是系统的基本浮点类型，可以至少呈现6位精确的有效数字。\n\t\t[`double`] 一种（可能是）更大的浮点储存单元，允许更大的有效数字位数（至少10位，通常会更多。）而且有可能比float也有更多的指数位数。\n\t\t[`long double`] 一种（可能是）更大的浮点储存单元，它可能允许更多的有效数字位数，也有可能有着比`double`类型更大的指数部分。\n**复数与虚数浮点型：**\n\t虚数类型是可以选择的，实部与虚部是基于实数类型的：\n\t\t`float _Complex`\n\t\t`double _Complex`\n\t\t`long double _Complex`\n\t\t`float _Imaginary`\n\t\t`double _Imaginary`\n\t\t`long double _Imaginary`\n\n![](/img/Summary.png)\n\n**总结：如何声明一个简单的变量**\n1. 选择你需要的类型\n2. 使用允许的字符为你的变量起个名字\n3. 使用以下形式的声明语句\n```C\n\t//type-specifier variable-name;\n\t//类型标识符 变量名;\n\tint Iint1;\n```\n4. 你可以通过用逗号把变量名隔开来声明多个变量，下面就是一个例子。\n```C\n\tchar ch, init, ans;\n```\n5. 你可以在声明语句中对变量进行初始化：\n```C\n\tfloat mass = 6.0E24;\n```\n\n### 3.4.9 类型大小\n\n表3.3与3.4展示了一些C语言环境下的类型大小（在一些环境中，你可以选择）你的系统是什么样子的？尝试运行例3.8中的程序，你会弄明白的。\n\n![表3.3与3.4](/img/Twotables.png)\n（分别是整型与浮点型的大小。）\n\n对于每一种类型，最上面的一行是有效数字的位数，第二行是指数的范围（十进制）。\n\n```C\n//(例 3.8)\n#include <stdio.h>\n\nint main(void)\n{\n\t/*C99为大小提供了%zd格式化符*/\n\tprintf(\"Type int has a size of %u bytes.\\n\", sizeof(int));\n\tprintf(\"Type char has a size of %u bytes.\\n\", sizeof(char));\n\tprintf(\"Type long has a size of %u bytes.\\n\", sizeof(long));\n\tprintf(\"Type double has a size of %u bytes.\\n\", sizeof(double));\n\treturn 0;\n}\n```\n\nC语言有一种内置的运算符，它叫`sizeof()`，它会给出以比特为单位的大小范围。（一些编译器需要`%lu`而不是`%u`来打印`sizeof`数值，这是因为C语言对于`sizeof`用来报告的真实的无符号整型是有多个范围的。C99对于这种类型给出了`%zd`标识符，如果编译器支持的话你应该使用这个。）例3.8的输出是这个样子的。\n\n![](/img/sizes.png)\n\n这个程序只发现了4种类型的范围，但是你可以简单修改一下这个程序来找寻你感兴趣的任何一种类型，要注意的是`char`类型的大小一定是1个字节，因为C语言对于`char`类型定义的就是一个字节。所以在有16位的`char`与64位的`double`的系统上，`sizeof`会报告`double`类型有4个字节的大小。你可以看看limits.h与float.h头文件来获取更多关于类型最大最小值的细节信息。（下一章会进一步阐述这两个文件。）\n\n顺便一说。看看最后一行`printf()`是如何延伸到两行的，只要不是在双引号部分或者在一个单词的中间断开，你可以这样做。\n### 3.4.10 可用数据类型\n\n当你正在开发一个程序时，需要注意你需要的变量与它们应该使用的类型。大多数情况，你可以使用`int`或者`float`来表示一个数，用`char`来表示字符，在使用它们的函数的开头先声明好它们。为变量取一个能够暗示它们的意义的名字。初始化一个变量时，也要让变量类型与赋给的常量类型匹配。这里就是两个例子。\n\n```C\n\tint apples = 3;\n\tint oranges = 3.0;\n```\n\nC语言对于类型不搭配比起Pascal是很宽容的，C语言的编译器允许你进行二次初始化，但是它们有可能会引起报错，尤其是当你触发了一个高级警告时。最好不要养成这种马马虎虎的习惯。\n\n当你使用其他类型的值给一个数字类型的值初始化时，C语言会将这个值进行转化，来让它与这个变量的类型相配。这也就意味着你有可能会失去一些数据，比如思考一下下面的初始化过程。\n\n```C\nint cost = 12.99;        /*使用double值来初始化int*/\nfloat pi = 3.1415926536; /*使用double值来初始化float*/\n```\n\n第一个声明语句会将12赋给`cost`变量，当把浮点数转换为整数值时，C语言简单地把小数部分丢掉（截断），而不是四舍五入。第二行的声明会失去精度，因为`float`类型是只能呈现小数点后6位精确数的。如果进行这样的初始化，编译器有可能会发出一个警告（但不是一定会发），你有可能在编译例3.1的时候遇到这个问题。\n\n许多的编程者与组织人员拥有设置变量名称的体系化传统方法，按照这种方式就可以显示出变量的类型。例如你可以使用`i_prefix`来表示这是个`int`类型变量，同理`us_`来表示`unsigned_short`，这样的话对于类型就好辨认一些。\n\n### 3.4.11 参数陷阱\n\n在这一章的前半部分，有一个关于`printf()`使用的警告还是很值得重复强调的。你可能还记得传递给函数的信息在术语上称为参数。例如，`printf(\"Hello, pal.\")`就有一个参数：`\"Hello, Pal.\"`。我们把在双引号中的一系列字符叫做***字符串***，我们会在第四章讨论。现在的重点是，一个字符串，即使包含着好几个单词与标点符号，也仍然被算作是一个参数。\n\n相似地，`scanf(\"%d\", weight)`有两个参数：`\"%d\"`与`&weight`。C语言会使用逗号来分开函数中的各个参数，`printf()`与`scanf()`函数还挺不寻常的，它的参数数量是不限的。例如，我们曾经在使用`printf()`时传递过一个、两个甚至是三个参数。对于一个恰当运行的程序，它需要知道参数的数量。`printf()`与`scanf()`函数会使用第一个参数来表达之后会有多少个其他的参数。这里的诀窍就是在最前的字符串中的每一个格式化符都代表着后面有一个参数，例如下面的语句就有两个格式化符：`%d`与`%d`：\n\n```C\nprintf(\"%d cats ate %d cans of tuna\\n\", cats, cans);\n```\n\n这也就告诉程序后面要接收两个额外的参数，而且后面确实有两个——`cats`与`cans`。\n\n作为一个编程人员，你的责任就是确保格式化符的数量与其他的参数的数量相同，类型相同。C语言现在已经有函数原型机制了，它能够检查一次函数调用是否使用了正确的数字与正确的参数类型，但是对于`printf()`与`scanf()`是不适用的，因为它们参数的数量是可变的。当你并没有接收程序员的负担会怎样呢？举个例子，假设你写了例3.9那样的程序。\n\n![例3.9](/img/Listing3.9.png)\n\n下面是从微软VisualC++ 7.1（WinXP系统）上运行的结果\n\n```Bash\n4\n4 34603777\n0 0.000000\n```\n\n这是在Digital Mars（WinXP系统）上运行的结果\n\n```Bash\n4\n4 4239476\n0 0.000000\n```\n\n这是在Metrowerks Codewarrior Development Studio 9（MacOSX系统）\n\n```Bash\n4\n4 3327456\n1075052544 0.000000\n```\n\n你可以看到，使用`%d`来表示一个`float`类型的值并不会将它变成最近的`int`类型值，而是直接输出垃圾值。相似地，使用`%f`来表示一个`int`类型的值也并不会将整数转化为浮点数值。参数太少或者类型不对得到的结果不同的平台也不一样。\n\n没有一个编译器对于这个代码有报错或者警告，在运行时也没有。一些编译器确实会捕捉到这种错误，但是C语言标准并没有要求它们这样做。因此，电脑就不一定能够补货到这种类型的错误，因为程序反而还能够正常地运行，你也不一定能够注意到这种错误。如果程序并没有打印正确的数值数量或者是数值，那就回去看看`printf()`的参数数量与类型是否使用正确。（顺便一说，Unix语法检测程序lint，它比Unix编译器检查得更加细致，能够对于`printf()`的参数错误进行报错）。\n\n## 3.5 又一个例子：转义序列。\n\n让我们在程序中打印更多东西吧，这一次我们会使用C语言中的一些针对于字符的特殊转义序列。尤其地，例3.10中的程序显示了回车符(`\\b`)，水平制表符(`\\t`)以及回行符（`\\r`）是怎么工作的。这些概念要追溯到电脑还在使用电传打字机的时代，它们并不总是会在现代的图形界面上正确地翻译。例如，例3.10在一些Mac系统的实现上就不能够按照想要的方式来运行。\n\n![例3.10](/img/Listing3.10.png)\n\n### 3.5.1 当程序运行的时候发生了什么？\n\n让我们一步步地浏览这个程序，好让它能够在ANSI实现下运行。第一个`printf()`函数语句（标`1`的那个）会发出警告信号（由`\\a`引起），然后会打印如下的句子：\n\n```Bash\nEnter your desired monthly salary:\n```\n因为在字符串最后没有`\\n`符号，所以光标还是在冒号后面。\n\n第二个`printf()`语句会接着第一句结束的地方开始，所以当它执行完毕时，屏幕上看起来是这个样子的。\n\n```Bash\nEnter your desired monthly salary: $______\n```\n\n在冒号与美元符号之间有一个空格，因为第二个`printf()`的字符串是以空格开始的，7个退格符的作用是把光标向左移动7个单位。这就会将光标移到下划线字符前面，正好放在美元符号后面。通常地，退格符并不会移除前面的字符，但是有一些实现是有可能移除的，那样这个小练习就没有用了。\n\n现在，你会输入你的回答，比如说你输入了`2000.00`，那么这一行看起来就会是这个样子。\n\n```Bash\nEnter your desired monthly salary: $2000.00\n```\n\n你输入的字符将会覆盖换行符，而且当你点`Enter`键（或者`Return`）来输入你的回答时，光标就会跳转到下一行。\n\n第三个`printf()`语句是以`\\n\\t`开始的，换行符将会将光标移动到下一行的最开始，而tab键通常会将光标移动到那一行的下一个制表位（但并不是一定），也就是第9列。然后字符串的剩余部分就会被打印下来。在这个语句执行之后，屏幕上看起来就会变成这样。\n\n```Bash\nEnter your desired monthly salary: $2000.00\n\t$2000.00 a month is $24000.00 a year.\n```\n因为这个`printf()`语句并没有使用换行符，光标还是在这一句的最后位置。\n\n第四个`printf()`使用了`\\r`符号，它会将光标移动到一行的开头位置，这个语句执行之后屏幕上就成了这样。\n\n```Bash\nEnter your desired monthly salary $2000.00\nGee!    $2000.00 a month is $24000.00 a year.\n```\n\n### 3.5.2 输出清理\n\n`printf()`函数什么时候才会将输出发送到屏幕上呢？首先，`printf()`语句会将输出发送到***缓冲区***，时不时地，在缓冲区的内容就会被发送到屏幕上。对于输出什么时候从缓冲区发送到屏幕上，基础的C语言规则已经很清晰了：当缓冲区被充满时，当遇到一个换行符的时候，以及当有即将发生的输出行为时。（从缓冲区发送输出信息到屏幕或者是文件上叫做***刷新缓冲区***），例如，最先的两个`printf()`函数语句并不会填充缓冲区，也并没有包含换行符。在那种情况下，你可以使用一个换行符来刷新缓冲区，那样的话代码就可以写成这个样子：\n\n```C\nprintf(\"Enter your desired monthly salary: \\n\");\nscanf(\"%f\", &salary);\n```\n\n 不管即将到来的输入信息是不是会刷新缓冲区，这几行代码都是可以正常工作的。但是，它也会将光标移到下一行，防止你把数据与提示字符串写到一行。另一种方式是使用`fflush()`函数，它会在第13章，文件输入与输出中讲到。\n\n# 关键概念\n\nC语言有着许多种数字类型，这也反映了C语言避免让编程人员陷入障碍的目的。比起用一种类型包管全部数字类型，C语言尽力给予编程人员对于数字的特定种类（比如说有符号与无符号），以及最能够适合特定程序的数字范围大小的选择。\n\n在一台电脑上，浮点数与整型的基础是不一样的。它们会被以不同的形式储存于处理。两个32位的内存单元能够保存相同的位形式（二进制数表示是一样的。）但是如果其中一个被理解为`float`而另一个被理解为`long`，这两个内存单元就会代表完全不同也不相关的两个数，例如在个人电脑上，如果你使用代表256.0的浮点储存单元，但是让它被理解为long，你就会得到113246208这个数。C语言确实允许你使用多种数据类型来书写表达式，但是它会自动进行类型转换，所以真正的运算只有一种数据类型。\n\n在电脑内存中，字符是以数字编码的形式呈现的，ASCII码是美国最常用的数字代码标准，但是C语言也支持其他代码集。字符常量是电脑上数字编码的符号表示-它是由单引号框定的单字符，比如`'A'`。\n\n# 总结\n\nC语言有各种各样的数据类型，基本的数据类型可以分为两类：整型与浮点型，对于整型，两个最鲜明的区分就是分配给不同类型的储存空间，还有是否有符号。最小的整型是`char`，它可以有符号，也可以没有，这取决于不同的C语言实现，你可以根据自己的需求来选择`signed char`与`unsigned char`，但是那通常是在你使用范围比较小的数字的情况下，而不是使用字符编码时。其他的整型还有`short, int, long, long long`等。C语言确保了所有的类型都至少会与它前面的类型一样大，它们都是有符号类型，但你还是可以加上`unsigned`修饰符来创造相应的无符号类型：`unsigned short, unsigned int, unsigned long, unsigned long long`或者你也可以使用`signed`修饰符来明显地写出它是有符号的。最后，还有`_Bool`类型，一种无符号类型，它只能保存0与1，分别代表着`false`与`true`。\n\n浮点类型有三种，分别是`float, double`与在ANSI C中的`long double`，每一个类型也是至少比它前面的那个类型一样大的。要是想的话，你也可以用`_Complex`与`_Imaginary`与浮点类型关键字连用，来使用虚数与复数类型。例如，有`double _Complex`与`float _Imaginary`类型。\n\n整型可以被以十进制、八进制与十六进制的形式被输出，开头写0可以使一个数变为八进制数，写0x或者0X可以变为十六进制数。例如`32, 040`还有`0x20`就分别是十进制、八进制与十六进制的数字，但是它们代表的都是同一个值。另外使用`l`或者`L`符号可以声明一个`long`类型的常量值，`ll`或者`LL`可以声明一个`long long`类型的值。\n\n字符常量是由单引号及其中的字符代表的：比如`'Q', '8'`。字符还包括转义序列，比如`\\n`，它们代表着不会被打印出来的特定字符，你可以使用类似`\\007`的形式来使用ASCII码的形式来代表字符。\n\n浮点数可以以十进制小数点的形式来表示，也可以以指数符号的形式来表示，例如`7.38E10`。\n\n`printf()`函数能够让你利用格式化转换符，以最简洁的方式打印各种各样的数值，它由一个百分号符`%`与一个表示类型的字符组成，比如`%d`或者`%f`。\n\n# 回顾问题\n\n你会在附录A中找到这些问题的答案。\n1.你对于这几种数据你会使用哪种数据类型？\n\n>1.东斯普尔顿的人数 -- int类型（16位即可）\n>2.在DVD上电影的价格--float类型\n>3.这一章最常见的字母--char类型\n>4.一个字母在这一章中出现的次数。-- int类型（。）\n\n2.为什么有时候你会使用`long`而不是`int`。\n\n>有些时候表示的范围会更大，但是并没有超过`long`，使用`long`类型可以保证数据因为存放不下而溢出，从而导致不同机型显示不一而且不会报错的问题。\n\n3.如果你想要得到一个32位有符号的整型，你会使用哪种可转移的类型，请写出所有类型，并说说每一种的合理性。\n\n>1.在`<inttypes.h>`中的`int32_t`类型\n>2.基本类型中的`long`或者`int`类型（对于`int`来说不一定）\n\n`long`合理，因为关键字更简洁容易记，格式化符也不容易弄错\n（`int32_t`为`PRId32`,`long`为`%ld`）\n`int32_t`能够让编程人员选择适合的大小范围来进行编程，便于大小的记忆。\n\n4.确认每种类型与它的含义。\n\n>1.`'\\b'`回车符（转义序列）\n>2.`1066`一个整数，一千零六十六\n>3.`99.44` 一个两位小数，九十九点四四\n>4.`0XAA`，十六进制数，10 * 16 + 10 = 170.\n>5.`2.0e30`，指数形式的小数，2 * 10^30(10的30次方)\n\n5.Dottie Cawm 编造了这个满是错误的程序，请找到这个程序中问题。\n\n```C\ninclude <stdio.h>\n\nmain\n{\n\tfloat g; h;\n\tfloat tax, rate;\n\n\tg = e21;\n\ttax = rate * g;\n}\n```\n\n（实在是太明显了啊。。）\n1.include前面忘了#\n2.main。。。（int main(void)，或者void main()）\n3.g后面用了分号来分隔，相当于h未规定类型。\n4.应该是1e21，e21啥也不是。\n5.tax类型与g的类型大小都太小了，应该用double，float表示不了精确的21位数，或者直接使用long long也可以，反正是整型。\n6.忘了写`return 0;`\n\n6.确定下面几种常量数据的类型，与打印他们所使用的格式化标识符。\n![](/img/Identifytypes1.png)\n\n>·····12为整型，（int（作为常量，默认为int）），输出可以使用`%d`,`%hd`,`%u`,`%LLu`,`%lu`。\n>·····`0X3`，十六进制数，`%X`\n>·····`'C'`，字符常量，`%c`\n>·····`2.34E07`,后面看成八进制，但仍然是7，小数的指数形式，用`%f`或者`%lf`都可以。\n>·····`\\040`,十进制的040为32，此即`32`,即`' '`（空格字符）\n>·····`7.0`，一位小数，可以使用`%f`或者`%lf`\n>·····`6L`,为`long`形式整型，可以使用`%ld`输出。\n>·····`6.0f`,为`float`形式小数，可以使用`%f`。\n\n7.同上\n![](/img/Identifytypes2.png)\n>·····012，八进制数，十进制下为10，可以用`%o`输出。\n>·····2.9e05L，`long double`，2.9 * 10^5.\n>·····`'s'`,字符常量，用`%c`.\n>·····`100000`,`32`位的`int`，`%ld`，或者`%lu`或者更大的类型`long long`。\n>·····`'\\n'`,转义序列换行符，直接打印即可。\n>·····20.0f，`float`类型，`%f`。\n>·····0x44，十六进制数，68.用`%x`输出。\n\n8.假设你的程序是以这几行声明语句开头的。\n```C\nint imate = 2;\nlong shot = 53456;\nchar grade = 'A';\nfloat log = 2.71828;\n```\n\n在下面的`printf()`函数语句中填入适当的格式化符。\n```C\nprintf(\"The odds against the %__ were %__ to 1.\\n\",imate, shot);\nprintf(\"A score of %__ is not an %__ grade.\\n\", log, grade);\n```\n\n```C\nprintf(\"The odds against the %d were %ld to 1.\\n\",imate, shot);\nprintf(\"A score of %f is not an %c grade.\\n\", log, grade);\n```\n\n9.假设`ch`是一个字符变量，展示一下如何将回行符通过转义序列、十进制数值与八进制及十六进制字符常量的形式赋给ch的。\n\n```C\nchar ch;\n\nch = '\\r';\nch = 13;\nch = '\\0x0D';\nch = '\\015';\n```\n\n10.纠正这个愚蠢的程序。\n![\"Perfect...\"](/img/Perfect.png)\n（在C语言中`\\`表示除）\n\n1.未指定形式参数的变量名。（main(int a)）\n2.注释符号没用对（要么`//`,要么`/**/`.)\n3.声明变量使用关键字。（`int cows, legs;`）\n4.`printf()`字符串缺少了右边的引号。\n5.`scanf()`少了取地址符`&`，而且legs的输入形式写错了，为`'%d'`\n6.`printf()`格式化符为`%d`。\n\n11.说说下面的转义序列代表啥意思？\n\n1. `\\n`,换行符，10.\n2. `\\\\`,相当于`\\`.\n3. `\\\"`,相当于`\"`.\n4. `\\t`,相当于tab键。\n\n# 编程训练\n\n1.通过实验方式，弄清你的电脑是如何处理整型上溢、浮点数上溢以及浮点下溢的，也就是写一个拥有数据溢出问题的程序。\n\n![](/img/overnunder.png)\n\n这个肯定会溢出，可以修改程序看看会发生什么。\n我观察到的是：整型溢出会直接跳到它的最小范围开始加\n比如2146483650 = - 2147483646 \n\n浮点上溢，会失去精度，但是只要未超过位数仍然可以表示，如果把指数调到40就会出INF（infinity），具体可以看上文对于浮点溢出的讲解。。\n\n浮点下溢，会直接被看成0。\n\n2.写一个能够根据你输入的ASCII码值返回对应字符的程序。\n\n![](/img/ASCIIout.png)\n\n包含了转义序列，使用了`switch`与`if`嵌套的结构。\n\n3.写一个能够发出警报声，并且能够打印以下句子的程序。\n\n```Bash\nStartled by the sudden sound, Sally shouted, \"By the Great Pumpkin,\nwhat was that!\"\n```\n\n重点有两个，一个是掌握好换行，可以用一个printf加上一个换行符实现，也可以用两个。\n另一个是如何在字符串内输出\"，这也是我们周赛第一道题的考点\n\n![](/img/alarming.png)\n\n4.书写一个能够读入浮点数据，然后将它先以十进制小数的形式输出，再以指数形式输出。输出类似下方，但指数形式的实数部分是视系统而变的。\n\n![](/img/decimalandexp.png)\n\n5.一年大概有3.156 * 10^7秒，写一个要求你输入以年计数的年龄并将它转化为秒数的程序。\n\n![My life...](/img/lifesecond.png)\n\n6.一分子水大概是3.0 * 10^23克， 一夸脱水是950克。写一个要求你输入夸脱单位的水量，返回水的分子数的程序。\n\n![Too much...](/img/quartmol.png)\n\n7.一英寸是2.54厘米， 写一个要求你输入英寸高度，返回厘米高度的程序。你要是想的话也可以反过来转换。\n\n1.inch to cm\n![](/img/inchtocm.png)\n\n2.cm to inch\n![](/img/cmtoinch.png)\n\n\tEnd...\n\n\n\n\n\n","source":"_posts/C-premier-plus-Chapter-3.md","raw":"---\ntitle: C-premier-plus-Chapter-3\ndate: 2023-12-22 12:11:38\ntags: C_premier_plus\n---\n# 第三章 数据处理\n\n>你会在这一章学到下面的东西：\n>1. 关键字\n>\t`int,short,long,unsigned,char,float,double,_Bool,_Complex\n>2. 运算符\n>\t`sizeof`\n>3. 函数\n>\t`scanf()`\n>4. 整型与浮点型的区别\n>5. 书写常量与声明这些类型的变量\n>6. 如何使用`printf()`与`scanf()`函数来读写不同类型的值\n\n程序依靠数据来工作。你会向电脑输入数字、字母或者单词，然后期望它能够利用这些数据做些事情。例如，你可能想要电脑去计算支付利润或者展示一个排过序的酒商列表。在这一章，你将会不只阅读数据，而且练习着去操纵数据，那是挺有趣的一件事。\n\n这一章还会让你了解到两大类数据类型：整数与浮点数。C语言提供了这些类型的几种变体。这一章会告诉你类型是什么，如何声明它们并且如何利用它们。而且，你会发现变量与常量之间的区别，作为额外奖励，你的第一个交互式的小程序就要诞生了！\n<!--more-->\n\n## 3.1 一个例子\n\n再一次，我们还是从一个样例程序来开始，像以往一样，你会发现一些不熟悉的东西，我们待会就会为你解释。程序的总体目的应该清晰，那么就尝试把图3.1中的源码编译运行下吧。\n为了节省时间，你可以省略注释。\n\n![图3.1](/img/Listing3.1.png)\n\n![错误与警告](/img/ErrandWarn.png)\n【错误与警告】\n如果你把程序的某些部分打错了，还有，比如说，遗漏了一个分号，编译器就会给予你一条语法错误信息。即使你没打错，编译器也有可能给予你一条警告信息，“Warning-conversion from ‘double’ to ‘float’ , possible loss of data.” 错误信息指的是你有可能把某些事做错了，它阻止程序的编译。警告，意思是你写的代码是合法的但是有可能做的并不是你想的那样。警告并不会阻止编译过程。上文中的这条信息就会在C语言在处理像770.0这样的数时出现，但并不是这个例子的问题，这一章过会会解释这条警告。\n\n当你在打字写这个程序的时候，你有可能会把`770.0`改成这种珍贵金属的当前价格。但是不要改变14.5833，那代表着一磅对应的盎司数。（盎司金衡制，是对于贵重金属使用的，常规衡制是给人们使用的，不论是珍贵的物品或是其他的东西。）\n\n需要注意的是“输入”你的体重意味着把你的体重打字写入电脑，并且敲下Enter或者Return键（不要输入完了你的体重就等着。）按下Enter键这个动作告诉了电脑你已经完成了你的应答。这个程序想要你输入一个数字，如`150`而不是单词，比如`too much`，如果你写的是字母而不是数字，那是会导致问题的，而这个问题需要之后学习的`if`语句来解决。（第七章，“C语言控制语句：分支结构与跳跃结构”会讲到），所以请先平静一些，输入一个数字，这里就是一个简单的输出示例。\n\n![输出](/img/Olist3.1.png)\n\n### 3.1.1 例子中的新知识\n\n在这个C语言程序中有这么几个新接触的要素。\n+ 可以注意到的是，代码在变量声明中使用了新的数据类型，前面提到的例子只使用了十进制整数类型(`int`)，但是现在的这个例子使用了一个浮点类型的变量类型，这样的话你就可以处理更大范围的数据了。`float`类型就可以保存含有十进制小数点的数字。\n+ 这个程序给出了书写常量的一些更新的方式，你现在可以书写浮点型的常量了。\n+ 为了对程序提供输入信息，你需要使用`scanf()`函数，`%f`命令`scanf()`从键盘输入中读入一个浮点数，`&weight`告知了`scanf()`函数把输入的值赋给名字叫做`weight`的变量，`scanf()`函数会用`&`符号来寻找在哪里可以找到叫做`weight`的变量，下一章我们会进一步地阐述`&`符号，现在，只需要相信我们你需要在这里添加一个`&`符号。\n+ 可能最突出的新特性就是程序变为交互性的了。电脑会要求你输入信息，并使用你输入的数值。一个交互性的程序是比不能交互的更有趣的。更重要的是，交互的方法让程序更加的灵活。举个例子，样例程序就可以用于所有合理的体重了，而不只是150磅，你不需要换一个人就再把程序重写一遍。`scanf()`函数会从键盘中获取数据，并把数据传递到你的程序，`printf()`函数会从程序中获取数据，然后把数据传递到你的屏幕上。这两个函数在一起就可以让你建立电脑与你的双向联系（见图3,1），这就让电脑使用更加有趣了。\n\n我们会在这一章讲述这些新特点中的前两条，后面的三条内容会在第四章-字符串与格式化输入输出完整地讲到，但是这一章还是会少量地使用`print()`与`scanf()`函数。\n\n![输入输出函数的工作](/img/Figure3.1.png)\n\n## 3.2 变常类型\n\n一台电脑，在程序的指导之下，可以做到很多的事情。可以做加法，可以给名称排序，可以指示讲话者或者屏幕的演出顺序，可以计算彗星的轨道，可以编排你的邮寄列表，拨叫电话号码、画出由小棒组成的人物，得出结论或者其他你可以想象到的可以被创造的东西。为了完成这些任务，程序需要处理***数据***，也就是你使用的保存在程序中的所有数字与字符信息。一些数据类型需要在程序使用之前进行预设，而且保证它们的值是不变的，这些就是***常量***。其他的数据类型的值或许会随着程序运行改变或者被赋给，这些就是***变量***。在这个样例程序中，`weight`就是一个变量，而`14.5833`就是一个常量。那么`770.0`呢？虽然铑金属在真实生活中的价格并不是个常量，但是这个程序把它作为一个常量来处理。变量与常量的区别就在值可不可以随着程序运行发生改变上。\n\n## 3.3 数据类型关键字\n\n讲完了变量与常量的区别之后，我们需要了解一下不同数据***类型***之间的区别。一些数据是数字形式，一些是字母，或者更加普遍的，它们是字符。电脑需要一种方式来确定与使用这些不同的类型。C语言通过对于基本的数据类型的定义完成了这个工作。如果数据是一个常量，编译器通常是可以通过它看起来的样子来区分它的。`42`是一个十进制整数，`42.100`是一个浮点数，在另一面，变量就需要声明语句来声明它的类型。随着学习进行下去，你会了解到关于声明变量的更多细节。但是还是让我们首先先研究一下C语言可以识别的基本类型，K&R C确立了有关于类型的七个关键字，C90标准增加了两个，C99标准又增加了三个。（见表3.1）\n![表3.1](/img/Table3.1.png)\n\n`int`关键字提供了C语言中基本的十进制整数类型，下面的三个关键字(`long, short, unsigned`)还有ANSI添加的`signed`提供了基本类型的变体。接着，`char`关键字指明了用于字母与其他字符的类型，如`%, $, #`等，`char`类型还可以被用来代表大于0与小于10的十进制整数。然后是`float`与`double`，还有两者的混合`long double`是用来代表带有十进制小数点的数字的。`_Bool`类型是为布尔类型提供的(`true`和`false`)，最后是分别代表着复数与虚数的``_Complex``与`_Imaginary`.\n\n由这些关键字创造的类型又可以基于在电脑中的储存类型分为两种，***十进制整数类型***与***浮点数类型***。\n\n![Bits, Bytes and Words](/img/storingtypes.png)\n【Bit（位）、字节与字】\n\n*bit*、*字节*与*字*可以被用来描述电脑的数据单元或者内存单元。我们会集中于第二种用法。\n\n内存的最小单元叫做***bit***，它可以保存`0`与`1`之间的其中一种数值（或者你可以说，这个字节被设为“关”或者“开”）你并不能在一个bit中储存太多的信息，但是电脑可以储存很多的字节，bit就是电脑内存的基础组成模块。\n\n*字节*是电脑内存的一般单元。对于大多数的机器来说，一个字节是8个bi，那是标准的定义，至少当测量内存的时候（C语言有不同的定义，我们会在“使用字符：`char`类型”这一节讲到）因为一个bit不是0就是1，那么在8位的字节中，就可以有256种可能（2的8次方），这些可能的模式就可以被用作比如代表0到255的数字或者代表一系列的字符。在二进制代码下，这种一对一的映射是可以被建立的，而且使用0与1来代表数字也使机器便利的。（在第15章-位运算，会讲述二进制代码，但是如果你想的话现在就可以去读一下）。\n\n*字*是电脑固定设计下的内存自然单元，对于8位的微型计算机，比如原来的苹果电脑来说，一个字就只是8个bit。早期的IBM兼容器使用的80286处理器是16位的机器，这也就是说他们把字长增加到了16bit。还有例如以Pentinum为基础的计算机，还有Mactonish PowerPC的字长是32bit。还有更强大的电脑的字长是64位的或者更大。\n\n### 3.3.1 整型与浮点型\n整型？浮点型？如果你感觉这些词非常不熟悉以至于干扰了你的阅读进度，我们这就要简要描述它们的意义了。如果你对位、字节还有字还是不熟悉的话，你可能需要阅读一下最近描述过的附加栏。你真的需要了解所有的细节吗？并不是，不只了解内燃机驱动车子的工作原理，而多了解一些电脑或者引擎内部发生的事情有时候可以帮到你。\n\n对于一个人来说，整型与浮点型的区别体现在它们是怎么被写下的。对于电脑来说，那就体现在它们是怎么被储存的。让我们依次来研究一下这两种类型。\n\n### 3.3.2 整数类型\n\n***整型***是没有小数部分的数字。在C语言中，整型是没有小数点的数字。比如说-2、-23还有2456。像3.14, 0.22, 还有2.00这些数就不是整型。整型是以二进制数字的形式被储存起来的。比如7就是被储存为二进制数111的。因此，为了在8位字节中储存这个数字，会把前五个位设置为0，然后把后三个位设置为1。    \n\n![用二进制码储存7](/img/Figure3.2.png)\n\n### 3.3.3 浮点数类型\n\n***浮点***数多多少少是对应着数学概念中的***实数***，实数包含着整数之间的这些数字，浮点数基本是这些样子：2.75、3.16E7、7.00、2e-8，需要注意的是，只要有小数点就会把整型数字转换为浮点数，比如7.00是一个浮点数，而7就是一个十进制整数。很明显，书写浮点数的方式不止一种，我们会在之后更充分地讨论用e符号表示的形式。但是简单来说，3.16E7的表示方式意思就是3.16乘10的7次方，也就是1后面添7个0，7也就是10的***指数***。\n\n关键就是储存浮点数的方式与整数不一样。浮点数的表示涉及到把一个数字分开为小数部分与整数部分，然后分别储存。因此，7.00这个数字不会与整数7同样储存，即使它们的值都是一样的。十进制类比起来也就是把7.0写为0.7E1。这里，0.7就是小数部分，1就是指数部分，图3.3展示了浮点数储存的另一个例子。一台电脑当然会使用二进制数与二进制而不是十进制来储存。你会在第十五章了解关于这个话题的更多信息。现在我们先集中精力于在实用上区别吧。\n\n+ 整型没有小数部分，浮点数可以有小数部分。\n+ 浮点数比整数代表的数字更多，可以看一下这一篇结尾的图表3.3。\n+ 对于一些算术运算符，比如一个数减去另一个数，浮点类型的精确度会有更大可能下降。\n+ 因为在任何一个范围之间都有着无数的浮点数，比如在1.0与2.0之间，电脑就不能完全地代替这些值，它用实数的大概值来估计浮点数的值。比如7.0有可能被储存为6.99999的`float`值，过会会讲到更多有关于精确度的知识。\n+ 浮点运算符的优先级通常是比整型运算符要低的，然而用来处理浮点运算的特殊微型处理器已经可用了，这个问题也就得到了解决。\n\n![十进制浮点储存方式](/img/Figure3.3.png)\n\n现在就让我们研究一下C语言中各种数据类型的特点吧。对于每一种类型，我们会描述如何声明一个变量，如何用变量代表一个常量，还有一些特殊的用法。一些年代较早的C语言编译器可能不能支持下文全部的类型，所以你可以查看一下你的编译器的说明书，看一看哪些数据类型是可用的。\n\n## 基本数据类型\n\n### 3.4.1 `int`类型\n\nC语言提供了很多的整数类型，你可能想知道为什么只有一种还不够，答案就是这样C语言就可以让你将特定的变量用在特定的地方。具体来说，C语言的各个整数类型不同在值域的大小与是否含有负数上。`int`是最基本的整数类型，但是你要是为了满足机器任务的特定需求的话，其他的类型也都是可用的。\n\n`int`类型是一种有符号的整数类型，有符号意味着`int`类型的整数可以是正数、也可以是负数，或者是0。`int`类型的值域是取决于计算机系统的，通常一个`int`类型的整数的大小就是内存的一个字长。因此，旧版的16位IBMPC适配器，就可以使用16个位来储存整数，也就是从-**32768**到**32767**。现在的个人电脑一般是使用32位的整数大小，在这张结尾的表3.3可以看到一些个例子。现在个人电脑产业也正在向64位处理器发展，那样也就可以使用更大的整数了。ISO/ANSI C语言特别指出`int`的最小范围应该是-**32767**到**32767**，通常系统会专门拿出一个位来保存符号，第十五章描述这种了一般的方法。\n\n#### 3.4.1.1 声明`int`类型\n\n正像你在第二章看到的，关键字`int`可以用来声明一个基本的整型变量。声明，首先是`int`，然后是变量的名称，最后是一个分号。要是声明多个变量的话，可以分别声明，也可以用逗号分隔，把一系列的变量名列出来，下面的声明方法都是合法的。\n\n![](/img/valid_declaration.png)\n\n你可能已经使用过分别声明变量的方法了，或者你已经尝试在一行中声明全部的变量了。效果都是一样的：就是对四个`int`大小的变量分配空间并与变量名相联系。\n\n这些声明语句创造了变量，但并没有给它们赋值，变量要如何得到值呢？你已经见过两种方法了，第一种是赋值语句\n\n![](/img/assignments.png)\n\n第二，变量也可以使用函数来赋值，比如说`scanf`函数。\n现在我们来了解一下第三种方法吧。\n\n#### 3.4.1.2 变量初始化\n\n对变量进行***初始化***也就是给变量赋起始值，或者初值。在C语言中，这可以作为声明的一部分，只需要在变量名后加上赋值运算符还有你想要赋给这个变量的值就可以了。下面是一些例子。\n\n![](/img/initialization.png)\n\n在最后一行，只有`cats`被初始化了，速读一遍，你有可能觉得dogs也会被赋值为94，所以还是最好避免把未赋值与已赋值的变量放在一行之中吧。\n\n简单来说，这些声明会为变量创造空间，并为它们贴上变量类型的标签，而且还可以给赋变量起始值。（见图3.4）\n\n![图3.4](/img/DefinenInitial.png)\n\n#### 3.4.1.3 `int`型常量\n\n在上一个例子中各种各样的整数（21、32、14、94等），就是整型常量。当你书写一个没有十进制小数点并且没有指数的数时，C就会将这个数认作整型常量。因此，22与-44都是十进制整型常量，但是`22.0`与`2.2E1`就不是。C语言会把大多数整型认作`int`类型常量。但很大的数会有区别。看最后对于long常量与long long常量的描述就知道了。\n\n#### 3.4.1.4 打印`int`值\n\n你可以使用`printf()`函数来打印`int`类型的值，正像你在第二章看到的，%d符号可以在十进制整数被打印出来的地方作为占位符。%d的名称叫格式化符，因为它声明了`printf()`打印值的类型每一个在格式化字符串中的每一个`%d`都代表着一个`int`类型的值，它就在字符串后面的列表中。那个值可以是一个`int`类型变量代表的，也可以是一个`int`类型常量代表的，或者任何有`int`值的表达式。这样，你就有责任让格式化符与之后的列表中的值一致了，编译器并不会报出这种错误。图3.2就表示了一个初始化并且打印变量值，常量的值，还有简单表达式的值的程序，它也提示了你如果你不小心的话会发生什么。\n\n![图3.2](/img/Listing3.2.png)\n\n编译完运行这个程序的结果是这样的。\n\n![](/img/result1.png)\n\n第一行输出，第一个`%d`代表着一个`int`类型变量`ten`第二个代表着常量2，第三个呈现的是`ten` - `two`的值。但第二行，使用的是`ten`这个变量代替了第一个`%d`但是之后的值全都是随机的，是从最近的两个内存空间中获取的值！（你回去的值有可能与这里显示的值相差很多，不仅内容不一样，而且不同的编译器对于这些内存区的管理方法也不一样。）\n\n你有可能对编译器为啥并不会捕捉到这个很明显的错误，还是怪`printf()`函数的原始设计吧。大多数函数都会获取一个值作为参数，编译器可以检查出来你使用的值是不是恰当，但是`printf()`可以获取一个、两个、三个或者更多的参数，那就让编译器无法使用常用的错误检测方法了。记住，一定要检查格式化符是不是与被显示的值匹配。\n\n#### 3.4.1.5 八进制与十六进制\n\n通常来说，C语言会认为整型常量是十进制数。但是八进制与十六进制也受到许多编程人员的欢迎。因为8与16都是2的幂，但10并不是，这些进制系统有时会为与计算机相关的值的表达提供便利。例如，数字65536经常会出现在16位的机器中，它只是10000的十六进制数，十六进制数中的每一位数都对应着实际的四个位。例如，十六进制数3就对应着0011，5就对应着0101，所以35就对应着0011 0101，53就对应着0101 0011。这种对应就会使十六进制与二进制的转换非常简单。但是电脑是怎么判断10000是什么进制的数字的呢？在C语言中，数字不同的前缀就显示了不同的进制，0x（0X）就意味着你正在使用十六进制值，所以16在十六进制下会被写作0x10或0X10。相似地，前缀0就表示你正在使用的是八进制值。例如，十进制数16在八进制数中就写为020，在15章我们会更加充分地讨论不同的数制。\n\n要知道的是不同的数制系统是为你提供便利的，它并不会影响数值的储存方式，也就是说，你可以写16、020或者0x10，这个数还是会以二进制的方式储存起来。\n\n#### 3.4.1.6 展示八进制与十六进制数\n\n正像C语言能够让你以三种方式书写数字一样，它也可以让你以三种方式的任意一种展示数字。展示一个八进制整数可以使用%o，十六进制使用%x，如果你想显示前缀，你可以使用修饰符#，比如`%#o`，`%#x`，`%#X`，有了它们你就可以在数字前面显示0，0x，0X前缀。图3.3给出了一个小小的例子（想到你有可能必须加上一个`getchar()`，它会在一些IDE中防止程序立即关闭）。\n\n![图3.3](/img/Listing3.3.png)\n\n编译运行过后结果是这样的。\n\n![](/img/result2.png)\n\n你可以看到相同的数字被以三种不同的数制打印出来了，`printf()`函数可以实现这种转化。\n注意前缀只有加上#时才会出现。\n\n### 3.4.2 其他整型\n\n当你正在学习C语言时，`int`类型有可能已经满足了你大部分的整型需求了。但为了内容的完整，我们会研究其他的类型。如果你喜欢的话，你可以只大体浏览一下这一部分，然后跳到对于`char`类型那一部分，然后如果有啥需要的可以再回来复习。\n\nC语言使用三个形容词关键字来修饰基本整型：`short, long, unsigned`下面是需要记住的一些点。\n\n+ `short int`类型，或者直接`short`，会比`int`使用的内存更少，由此也就可以在只使用小的数字的时候节省一些空间。像`int`一样，`short`为有符号类型。\n+ `long int`类型，或者直接写`long`，占用的内存会比`int`更多，因此可以让你表示更大范围的数字，像`int`一样，`long`为有符号类型。\n+ `long long int`类型，或者`long long`（都是在C99标准下被引入的），会比`long`类型占用的内存更多，也就让你可以使用比`long`范围更大的数字。像`int`一样，`long long`是一个有符号的类型。\n+ `unsigned`类型，或者写成`unsigned`，是为非负的变量而设置的，这种类型改变了可储存数字的范围，例如，16位的`unsigned int`可以表示0-65535的数字，就不是-32768-32767了，用来表示符号的那一位在无符号类型这变成了另一个可以表示数字的位，也就让数字的表示范围扩大了。\n+ `unsigned long int`类型，或者`unsigned long`还有`unsigned short int`，或者`unsigned short`，在C90标准下都是可以被识别的，在C99标准下又添加了`unsigned long long int`类型，或者`unsigned long long`。\n+ 为了让你的意图明显，关键字`signed`可以被用在任何有符号类型上，例如`short`, `short int`, `signed short`,`signed short int`都是一种类型。\n\n#### 3.4.2.1 声明其他整型\n\n其他整型与`int`类型的声明方式是相似的，\n下面就展示了一些例子。\n并不是所有的编译器都能识别最后三种类型，最后一个例子是C99标准新加进去的。\n\n![其他整型](/img/othertypes.png)\n\n#### 3.4.2.2 为什么要用多种整型？\n\n为什么说`long`与`short`与`int`相比会使用不同的内存呢？因为C语言会确保`short`不会长过`int`，`int`也不会长过`long`，主要的目的就是为了适应不同类型的机器。例如在运行着Windows 3.1的IBM PC上，`int`与`short`都是16位的，而`long`是32位的，而在Mactonish Power PC上，`short`类型是16位的，而`int`和`long`类型是32位的。PowerPC G3/G4中的Pentium芯片的字长是32位，因为这就可以让整型超过20亿（见表3.3），C语言在处理器/操作系统的实现没有必要超出这个数值。因此，`long`与`int`大小是一样的。对于许多的使用过程，那个大小的整数是不需要的，所以节省内存的`short`就被创造了。但另一方面，原本的IBM PC只有16位的字长，那就意味着需要更长的`long`类型。\n\n现在64位的处理器都变得很常见了，比如IBM Itantium，AMD Opteron，还有PowerPC G5。因为64位整型的需要，`long long`类型也就应运而生。\n\n现在最常见的实践是把`long long`设置为64位，把`long`设置为32位，把`short`设置为16位，把`int`设置为16位或者32位，它的大小取决于电脑的自然字长。原则上，这四种类型可以代表四种不同的大小。\n\nC语言标准为确定每一种基本数据类型的最小尺寸提供了指引。`short`与`int`的最小范围是从-32,767到32,767，对应着16位的单元，而`long`类型的最小范围是-2,147,483,647到2,147,483,647，对应着32位的单元。（注意，为了易读，我们使用了逗号分开，但是C语言代码是不能写成这样的）。对于`unsigned short`与`unsigned int`，最小的范围是0到65535，而`unsigned long`的最小范围是0-4,294,967,295/,`long long`类型为了迎合64位的需求，它的最小范围很大，是-9,223,372,036,854,775,807到9,223,372,036,854,775,807，而`unsigned long long`就是0到18,446,744,073,709,551,615.（对于那些检查写的对不对的人，下面是它的英文表示，但是谁要计数呢？）\n\n![(一脸认真)](/img/nonsense.png)\n\n你会在什么时候使用这些不同的`int`类型呢？第一，考虑`unsigned`类型，使用它们计数是很好的，因为你不需要负数，而且`unsigned`类型比`signed`类型的范围更大，可以得到更大的整数范围。\n\n如果你需要处理超过了`int`类型的范围的数字，使用`long`类型，但是在`long`比`int`长的系统中，使用`long`会让计算变慢，所以没必要的话就不要用`long`，进一步说，如果你正在一个`int`与`long`类型长度一样的系统上写代码，而你又需要32位的整数，你就需要使用`long`而不是`int`了，那样程序才可以在转到16位机的时候正常运转。\n\n相似地，如果你需要64位整型数的时候就使用`long long`吧，一些电脑已经使用着64位的处理器，而且并且正在服务器、工作站甚至桌面的64位处理也正在变得越来越普遍。\n\n如果你需要节省内存空间的话，使用`short`来节省内存空间，比如如果你在一台`int`类型是32位的机器上，需要16位的值这种情况。通常只有当你的程序使用整型数组这种与系统的可用内存极其相关的情况下节省内存才是必须的。另一个使用`short`的原因是它有可能与被电脑的特定部分使用的硬件寄存器的大小相同。\n\n> ![](/img/overflow.png)\n> 整型溢出。\n> 当一个整型相对于它的类型太大了会怎么样呢？让我们把一个整型变量设置到它可能的最大值，并用它加一些数，看看会发生什么。`unsigned`与`\tsigned`类型都可以试试（`unsigned int`的格式化符是`%u`）\n> 这就是系统给出的结果\n> ![](/img/flowresult.png)\n> `unsigned`类型好像汽车的里程计一样，当它到达了最大值，它就会返回到它的最小值，变量i也很相似，主要的区别是`unsigned`类型的`j`\t是以0开始的，但是`int`类型的`i`是以-2147483647开始的。\n> 注意的是，你如果没有被告诉这个数据已经溢出了，你还是会不断地在这个问题上打转。\n> 这里描述的行为是由C语言`unsigned`类型的规范控制的，标准并不规定`signed`应该行为如何，这里展示的行为也是通常会发生的，但是你以后会找到不一样的东西的。\n\n#### 3.4.2.3 `long`常量与`long long`常量\n\n一般地，当你在代码中使用2345这样的数字时，它会被储存为一个`int`类型的常量。那么如果你使用1000000这样不能被`int`储存下来的数字呢？编译器就会将它识别为`long int`，如果认为这个类型已经足够大了的话。如果比`long`类型的最大值还要大的话，C语言会将它当做`unsigned long`类型，如果那还不够的话，它就会把它当做`long long`类型或者`unsigned long long`，如果这些类型可以满足要求的话。\n\n八进制与十六进制的常量会被认作`int`类型，除非这个值太大，然后还是以上文的顺序依次递加。\n\n有些时候你有可能想让编译器把一个小点的数储存为`long`类型。如果你在编程的过程中需要外显地使用内存地址，例如在IBM PC上，就有可能有这样的问题。而且，一些基本的C语言函数是需要`long`类型的值的，你可以在数值加上后缀`l`或者`L`，第二种方式更好，因为看起来不像数字`1`。因此，一个有着16位大小的`int`与32位大小的`long`，会将`7`这个数储存在16位中，而将`7L`储存为32位中，而且这两个后缀对于八进制与十六进制都是适用的，像是020L与0x10L。\n\n相似地，在那些有`long long`类型的系统中，你就可以使用`ll`或者`LL`后缀，比如`3LL`，而且还可以使用`u`或者`U`来表示`unsigned long long`类型，就像`5ull`或者`10LLU`或者`9Ull`。\n\n#### 3.4.2.4 打印`short, long, long long`与`unsigned`类型\n\n要打印一个`unsigned int`类型的数字，只需使用`%u`符号，`long`类型可以使用`%ld`，但如果你的机器中`int`与`long`是大小一致的，那`%d`就可以了，但是代码有可能在别的系统中就不能正常运作了，所以对`long`来说最好还是使用`%ld`吧，对于`x`与`o`都可以在前面加上`l`。因此对于十六进制的`long`类型数你会使用`%lx`，类似在八进制会使用`%lo`，需要注意的是即时C语言提供了大写的`L`后缀，但是在格式化符中，只能使用小写。\n\nC语言有几种额外的`printf()`格式，首先，你可以在使用`short`类型时在`%d`的`d`前加`h`来表示十进制的`short`整型，同理`%ho`也是可以的，而且`h`与`l`是可以再加上`u`表示无符号的。例如，你会使用`%lu`符号表示`unsigned long`类型，图3.4就提供了一个例子。支持`long long`的系统也可以使用`%lld`或者`%llu`分别表示有符号与无符号的`long long`整型，第四章会对格式化符进行更充分的阐述。\n\n![图3.4](/img/Listing3.4.png)\n\n这是系统的输出：\n\n![](/img/result3.png)\n\n这个例子就显示出了使用错误的格式化符会有意想不到的后果。第一，注意到对于变量`un`使用的`%d`格式化符结果输出了一个负值，原因就是无符号与有符号数实际上是以相同的二进制排列被储存起来的（第15张会更详细地谈论这种属性），所以如果你告诉`printf()`函数这个数是没有符号的，与告诉它这个数是有符号的输出结果是不一样的。这种行为常会在你输入一个超限的数值时出现。小的整数，在两种格式化符之下都是一样的。\n\n第二，注意到无论你告诉`printf()`是`short`还是`int`类型，`short`变量`end`都是可以打印出正常值的。这就是因为当向函数输入一个参数的时候会自动将它转化为`int`类型，那么你就会问了:1.为什么这种转化会发生？2.`h`修饰符的用处在哪里？第一个问题的答案是`int`类型可以被电脑更加高效地处理。所以在`short`与`int`类型大小不同的机器上，有可能传递一个`int`值会更快。第二个问题的答案是你可以看看一个更加长的整型数如果被缩短为`short`类型了会看起来怎样。第三行的输出也为这一点提供了例证，当65537被写为32位二进制数时，它看起来是`00000000000000010000000000000001`这样子的，使用`%hd`格式化符会迫使`printf()`只看向最后的16个位，因此它会只打印`1`，相似的，最后一行的`verybig`使用`%ld`就会只看向最后的32位，而不是完全的位数。\n\n早些时候你已经了解标识符的数量与显示数字的数量匹配的重要性了，现下你也知晓了标识符的种类也要匹配。\n\n![](/img/matchup.png)\n\n匹配`printf()`函数的格式化符\n记着要去检查一下你是不是对于每一个要在`printf()`中打印的值都给予了一个格式化符，并检查是不是每一个的格式化符都与显示的值的类型相互对应。\n\n### 3.4.3 字符 char\n\n`char`类型是用来储存像字母、标点符号这样的字符的，但是严格来讲它其实是一个整数类型。为什么？`char`这个类型实际上储存的是整数而不是字符，为了处理字符，电脑会使用数字编码来让某一个整数代表某一个字符。在美国最常用的字符编码表是ASCII编码表，它已经在书的前封的背面给出来了，是这本书使用的编码表。举些例子，`65`在ASCII码表中代表的是大写的`A`，所以如果需要储存字母`A`，只需要储存数字`65`即可，（许多IBM主机用的是不一样的编码系统，它叫做EBCDIC，但是准则都是一样的。但在美国以外的计算机系统使用的编码表有可能是完全不同的。）\n\n基础的ASCII码是从0到127的，这个范围小到一个字节就可以保存下来，`char`类型通常会被定义成8位的内存单元，所以它不仅仅可以储存下来基础的ASCII码。许多系统，如IBM PC与苹果公司的Macintosh，可以提供更大的ASCII码表（这两个系统是不一样的），但是还是在8位范围之内。更加普遍的，C语言会确保`char`类型的大小是足够储存系统中C语言实现的需要的基础字符的。\n\n许多的字符集会有不只127而是255分值，例如日本的kanji字符集，商业的Unicode协议为代表全世界的各种字符创造了一个系统，现在已经有96000个字符了。ISO（国际标准组织）与IEC（国际电子委员会）为字符集创造了ISO/IEC10646标准。幸运的是，Unicode标准与ISO/IEC10646标准是始终协调的。\n\n使用这些字符集的平台有可能会使用16位或者32位的`char`类型代表，C语言定义下`char`的长度是1个字节，现在在C语言的记录中，一个字节会是16位或者32位，而不是那些系统上的8位。\n\n#### 3.4.3.1 定义`char`类型变量\n\n正像你会期望的，`char`类型变量与其他变量的定义方式相同，这里就是一些例子。\n\n![](/img/chardef.png)\n\n这几行代码创造了三个`char`类型的变量：`response`，`itable`与`latan`。\n\n#### 3.4.3.2 字符常量及其初始化\n\n假定你想要初始化一个字符常量为大写字母A，电脑语言是要让事情变得简单起来的，你不需要记忆ASCII码，你也不会，你可以直接以下面的方式给`grade`变量赋值`'A'`\n\n![](/img/charassign.png)\n\n被双单引号框定的单一字符就是C语言中的***字符常量***，当编译器看到了`'A'`，它会将A字符转化成相应的字符编码值，单引号是必须的，下面就是例子。\n\n![](/img/chardeclare.png)\n\n如果你遗漏了引号，那么编译器就会认为`T`是一个变量名，如果你使用双引号的话，它会认为你正在使用字符串，我们会在第四章讲解字符串。\n\n因为字符确实是以数字的形式被储存起来的，你还是可以使用数字编码为`char`类型变量赋值。\n\n![](/img/numassign.png)\n\n在这个例子中`65`是一个`int`类型的，但是因为这个值是小于最大的`char`类型值的，所以可以无误地赋给`grade`变量，因为65对应着ASCII码中的字母`A`，所以`A`就被赋给了`grade`变量。但注意，这个例子只是为了表示系统用的是ASCII码系统，但用`65`与`'A'`都是一样的，因此，使用字符常量要比使用数字编码是要好的。\n\n有点奇怪的是，C语言会将字符常量当做`int`类型常量而不是`char`来看待。例如，在32位使用ASCII字符编码，`char`类型为8位的系统中，这一行代码：\n\n![](/img/gradeb.png)\n\n就会将`'B'`呈现为66这个值储存起来，但是`grade`是以8位单元储存的66，这种特点就会使字符常量不能存放多个字符，像`'FATE'`这样，因为4个单独的ASCII码被储存在32位的单元中，但是试图将这样一个字符常量赋给`char`类型变量会导致只有最后的8位被使用，也就是变量被赋给的是`'E'`。\n\n#### 3.4.3.3 不会被打印出来的字符\n\n单引号对符号、数字还有标点符号都是适用的，但是如果你浏览过这本书前封里的那张表，你会看到一些ASCII字符是打印不出来的。例如，一些代表着回车或者跳到下一行，又或是会让终止铃响的符号，这些符号是怎么被表示的呢？C语言提供了三种方法：\n\n第一种方法就是我们已经提到过的，使用ASCII表编码的方法。例如，蜂鸣符对应的值就是7，所以你可以这样写。\n\n```C\n\tchar beep = 7;\n```\n\n表示这些字符的第二种方法是使用特殊的符号序列，它们叫做***转义序列***，表3.2给出了转义序列与它们的含义。\n\n![表3.2](/img/Table3.2)\n\n在赋值给字符常量的时候，转义序列必须要由单引号框定，例如，你可以这样赋值：\n\n```C\n\tchar nerf = '\\n';\n```\n\n然后打印变量`nerf`，打印器或者屏幕上的行就会往前一行（回车）。\n\n现在我们可以看看每一个转义序列是做什么的，警告符`\\a`是在C90标准中添加的，它会生成一条有声有色的警告，警告的类型因硬件而定，一般蜂鸣声是最常见的（在有些系统中，警告符是没有用的。）ANSI标准规定了警告符是不能改变活跃位置的。活跃位置这个概念指的是在显示设备（如屏幕、电报机、打印机等等）上下一个字符会出现的地方。简单来说，它就是屏幕上你已经用惯了的光标的总称。在程序中使用警告符最终只会发出蜂鸣声，但并不会移动屏幕上的光标。\n\n然后，是`\\b, \\f, \\n, \\r, \\t`还有`\\v`这些转义序列，它们都是常见的输出设备的控制符，它们在影响活跃位置上很出色，回车(`\\b`)，会将活跃位置往前挪一个空格。换页符(`\\f`)会将活跃位置转移到下一页的开头。换行符(`\\n`)会将活跃位置切换到下一行的开始，(`\\r`)，回车符(`\\r`)会让活跃位置回到一行的开头位置，水平制表符(`\\t`)会将活跃位置向右移动一个`Tab`键的位置（通常，这些是以字符位置1、9、17、25这样的格式），垂直制表符(`\\v`)，会让活跃位置移动到下一个垂向的`tab`位置。\n\n这些转义序列并不一定在所有的显示设备中起作用。例如，换页符与垂直制表符在电脑屏幕上只会打印出来一个奇怪的字符，并没有任何光标的移动。但是如果在打印机上使用就可以按照描述工作了。\n\n最后的三个转义序列（`\\\\, \\', \\\"`），能够以字符常量的形式让你使用`\\, ', \"`（因为这些符号是作为`printf()`函数的一部分用来定义字符常量的，如果你要把它们字面上打印出来，那将会非常令编译器困惑。）假设你想要打印下来下面的这一行字。\n\n```Bash\nGramps sez, \"a \\ is a backslash.\"\n```\n\n就需要用下面代码的形式来写。\n\n```C\nprintf(\"Gramps sez, \\\" a \\\\ is a backslash.\\\"\\n\");\n```\n\n最后的两种形式（`\\0oo, \\xhh`）是ASCII码的特殊标识，是要以八进制ASCII码的形式来代表字符，在前面需要加上`\\`然后用单引号来框定整个字符，例如，如果你的编译器不能识别警告符，你就可以使用下面的ASCII码：\n\n```C\n\tbeep = '\\007';\n```\n\n你也可以省略前面的0，所以`'\\07'`与`'\\7'`都是可以的。这个符号会让数字被理解成八进制，尽管前面没有0。\n\n从C90开始，C语言提供了第三种选择，使用十六进制的字符常量，这样说来，斜杠后面是`x`或者`X`与1到3位的十六进制数。例如，Ctrl+P符号在ASCII十六进制符码里就是10（十进制下就是16），所以它是可以被表达为`'\\x10'`或者`\\'x010'`的，图3.5展示了一些整型的代表。\n\n![图3.5](/img/Figure3.5.png)\n\n当你使用ASCII码的时候，要注意数字与字符之间的差异。例如，字符4在ASCII中的值是52,`'4'`是一个符号而不是一个数字。\n\n现下，你可能有这几个问题：\n+ ***为什么转义序列在最后一个例子中没有用单引号括起来？***\n（***最后一个例子`printf(\"Gramps sez, \\\" a \\\\ is a backslash.\\\"\\n\");`***）。\n\t只要是一个字符，不管它是不是转义字符，当它是字符串的一部分的时候，都是需要用双引号框起来的，而不是单引号，但单个字符是无一例外由单引号括起来的。由双引号括起来的是***字符串***。（第四章会讲到）相似地，不属于转义字符的数字会被当做一般字符打印出来（如`printf(\"Hello!7\\n\");`打印出来的是`Hello7`，但`printf(\"Hello!\\007\");`输出的是一行`Hello！`加上一声警告）。\n+ ***我应该什么时候使用转义序列？什么时候使用对应的ASCII码？***\n\t如果你需要使用其中一个转义序列，比如说`'\\f'`，或者作为替代的`'\\014'`，最好使用前者。首先，这种表示方法更容易记忆：其次，它更容易在机器之间转移，如果其他系统不适用ASCII码，`'\\f'`还是可以使用。\n+ 如果我需要使用数字变啊，为什么使用的是`'\\032'`而不是`032`？\n\t第一，使用转义字符的方式会让阅读你代码的人轻松地知道这是一个字符编码。第二，如`\\037`这样的转义序列是可以内嵌于C语言字符串的（？[就像`\\007`一样])。\n\n#### 3.4.3.4 打印字符\n\n`printf()`函数可以使用格式化符`%c`表示一个字符将要在这个位置被打印。你想到字符常量是1位的整型值，因此你也可以用`%d`符号，那样的话你就会得到一个整数，`%c`格式化符会告诉`printf()`函数来打印那个编码值对应的字符，例3.5就以两种方式展示了`char`类型变量。\n\n![例3.5](/img/Listing3.5.png)\n\n尝试运行，输出是这样的。\n\n![](/img/C67.png)\n\n当你使用程序的时候，不要忘记在写完了字符之后按下回车键。`scanf`函数会接收你写下的字符，然后取地址符(`&`)会将字符赋给字符变量`ch`。接下来，`printf()`函数会打印两次`ch`这个变量，第一次是以字符的形式打印的（使用`%c`格式化符的效果），第二次是以十进制整数的形式（同理，`%d`的效果）。需要注意，`printf()`的标识符会决定数据被如何呈现，呈现方式与数据的储存方式没有关系。\n\n![数据储存与输出](/img/Figure3.6.png)\n\n#### 3.4.3.5 有符号还是无符号？\n\n有的C语言实现里会使`char`是一个有符号的类型，那也就意味着`char`可以接受从-128到127的值。其他的C语言实现会让`char`是一个无符号的类型，那么它的范围就变成了0到255，你的编译器的使用手册应该会告诉你`char`是什么类型，或者你可以看看`limits.h`头文件，下一章会讲述。\n\n在C90标准下，C语言允许你使用关键字`unsigned`与`signed`来修饰`char`，那样的话不管原本的`char`是有符号还是无符号。你都可以任意变化它们的类型。它们在处理小范围的十进制整数时是很有用的。要是只是为了使用字符，只使用`char`就可以了。\n\n### 3.4.4 `_Bool`类型\n\n`_Bool`类型是C99标准添加的，它们是被用来代表布尔值的，也就是逻辑上的`true`与`false`。因为C语言是使用0表示`false`，用1表示`true`的，所以布尔类型实际上只是一个整型，但是只需要一位的内存，因为要储存0与1一位就足够了。\n\n程序会使用布尔值来选择下一步运行哪个代码，代码执行会在第六章（C语言控制语句：循环）与第七章（C语言控制语句：分支结构与跳跃结构）更详细地讲到，所以我们到那个时候再讨论这个问题。\n\n### 3.4.5 可转移的类型：`inttypes.h`\n\n还有更多的整数类型吗？没有了，但是还有更多你可以使用与已经存在的类型的名字。你或许会认为你已经看到的整型名已经很多了，但是原本的名字确实存在问题。知晓一个变量是`int`并不会让你了解它会占用多少内存，除非你检查了系统的描述文件。为了解决这个问题，`int16_t`可以声明一个16位的有符号整型，`uint32_t`声明了一个32位的无符号类型。\n\n要让这些名字可用，你需要包含一个`inttypes.h`头文件（注意在这一版时候已经有了，但是一些编译器上还不支持这个功能），这个文件使用了`typedef`（第一次讲到是在第五章：运算符、表达式与语句），来创造新的类型名。例如，它会让`uint32_t`成为基本类型的一种别名或者同义替换，有可能是`unsigned int`也有可能是`unsigned long`。你的编译器会提供一个与你的计算机系统协调的头文件，这些新的设计被称为***精确长度类型***，例如，`int_least8_t`会是最小的类型，它可以承载8位的有符号整型值。如果某个系统上最小的类型是8位的。`int8_t`类型是不会被定义的，但`int_least8_int`是可以被定义的，或许会被实现为16位的整型。\n\n当然，一些编程人员会更关心速度而不是空间。对于它们，C99定义了允许快速计算的一系列类型，它们被称为***最快最小长度类型***，例如，`int_fast8_t`会被定义为你的系统上能够最快运算的8位有符号值。\n\n最后，对于其他的编程人员，只有系统上最大的一些整型才有用，`intmax_t`就代表了那种类型，它可以储存任何合法的有符号整型值，同样，`uintmax_t`会代表可用的最大的无符号类型。这些类型有时是比`long long`或者`unsigned long`还要长的，因为C语言实现是准许定义超过需要的类型的。\n\nC99不仅提供了这些新的而且可运输的类型名，它还有有利于输入输出的符号表示。比如说，`printf()`对于每一种类型都需要特别的修饰符，所以你要打印`int32`，你要使用的是`%d`还是`%ld`？不同的机器的标识符并不一样，但没问题，C99标准下是有字符串宏命令来打印这些值的，我们会在第四章详细讲述的。例如，`inttype.h`头文件会将字符中的`PRId16`作为对于不同对应的类型的合适的格式化符。（例如hd（`short`）或者d），例3.6是一个讲述了如何使用可运输类型与相对应的格式化符的简单的例子。\n\n![例3.6](/img/Listing3.6.png)\n\n在最后的`printf`语句中，`PRId16`被`inttypes.h`对`hd`的类型定义替换了，把这一行代码变成了这个样子。\n\n![](/img/turning1.png)\n\n但是C语言需要连贯的字符串，所以引号需要是连续的，然后这一行就变成了这个样子。\n\n![](/img/turning2.png)\n\n这就是输出，注意这个例子也使用了`\\\"`转义字符来打印双引号。\n\n![](/img/out3.png)\n\n参考单元VI“更多的整型”提供了`inttypes.h`头文件添加的内容的完整解释，也列举了所有的格式化宏。\n\n![](/img/C99sup.png)\n【C99支持】\n编译器供应商已经开始以不同的速度与顺序开始实现C99的新特性了，但在这本书出来的时候，一些编译器还没有实现`inttypes.h`的头文件与特征。\n\n### 3.4.6 `float, double`与`long double`类型\n对于大多数的软件开发项目来说，这些多种多样的整型已经能够很好地满足要求了。但是，对于财务或者面向数学的程序，我们通常会使用***浮点数值***，在C语言中，这些数字就对应着`float, double, long double`这几种类型，对应着FORTRAN与Pascal语言中的`real`类型。使用浮点数，正像上文所说，能够让你呈现更大范围的数字。包括十进制小数值。浮点数值的表示与***科学计数法***是很相似的，那是科学家用来表示非常大或者非常小的数字的一种体系。\n\n在科学计数法中，数字会被表示成十进制数乘10的整数幂，这里就是一些例子。\n\n![](/img/sciennotation.png)\n\n第一列是通常的表示方法，第二列是科学计数法的表示，第三列是质数的表示方法，或者说是***e - notation（e表示法）***，通常是给计算机或者计算机写的，在e的后面是10的指数，图3.7展示了更多的浮点表示法。\n\nC语言标准规定了`float`类型应该至少能够代表6位有效数字并且范围在10的-37次方到37次方。第一个要求的意思是，比如一个`float`必须要精确地表示至少前六位有效数字，就像33.333333。如果你喜欢使用较大或者较小数字（2.0e30（太阳质量）或1.6e-19（元电荷））的话，第二条要求会为你提供方便。通常，系统会使用32位类储存一个浮点类型的数字，8位用来给予指数值与符号，24位来表示非指数部分，叫尾数或者有效数字与它的符号。\n\n![一些浮点数表示](/img/Figure3.7.png)\n\nC语言也有一个`double`（双（double）精度）浮点型，`double`类型与`float`类型需要的最小值是一样的，但是它把最小值的有效数字位数拓展到了10位。通常的`double`表示会使用64位而不是32位，一些系统会使用32个位来表示非指数部分，这也就增加了数字有效的有效数字位数，减少了取整错误。其他的系统会使用一些位储存更大的指数，这也就增加了可以容纳数字的范围。每一张方法都至少有13位的有效数字，不只能满足最小标准的要求。\n\nC语言还允许你使用一种浮点类型：`long double`，目的就是进一步增加`double`类型的准确度。但是C语言只保证`long double`至少与`double`类型的精度是一样的。\n\n#### 3.4.6.1 声明浮点变量\n\n浮点变量与它们的整型兄弟的声明与定义的方式相似，这里是一些例子，\n\n![](/img/floatdeclare.png)\n\n#### 3.4.6.2 浮点常量\n\n当你书写一个浮点常量时，你会有很多的选择，形式是很多，有符号的一串数字。包括十进制的小数点，或是由e或者E跟着的10的指数。这里是两个合法的声明浮点类型的例子。。\n\n![](/img/twoexam.png)\n\n你可以遗漏正号，没有关系（2E5）或者可以遗漏指数部分（19.28），但是并不能同时存在。你可以遗漏小数部分或者整数部分，但也不能全都没有（那也不剩什么了。）下面是更多的合法的浮点常量。\n\n![](/img/morevalid.png)\n\n在使用浮点常量的时候，不要乱添加空格。\n\n![错的](/img/nospaces.png)\n\n一般来说，编译器会认为浮点常量都是`double`精度的，假设`some`是一个`float`类型的变量，并且你有下面的一行代码。\n\n![](/img/codeline.png)\n\n`4.0`与`2.0`都是以`double`类型储存起来的，一般每一个使用64位，结果是使用浮点运算获得的，而且只有结果转换成了正常的`float`大小范围内才可以使用`float`。这也就为运算提供了准确度，但是会让你的程序变慢。\n\nC语言还是你能够超越默认方法，你可以使用f或者F后缀来让编译器把一个浮点常量储存为`float`类型，比如`2.3f`与`9.11E9F`还有`l`或者`L`后缀，可以储存为`long double`类型，例如`54.3l`，`4.23e4L`。注意的是，比起`l`，`L`更不容易被看成`1`，如果浮点数没有后缀，它的类型就是`double`。\n\nC99添加了表示浮点数的另一种方式，它是使用十六进制来表达的（0x或者0X加上十六进制数）。那样指数就是`p`或者`P`而不是`e`或者`E`了，指数是2的，也不再是10的了。这就是数字看起来的样子。\n\n![](/img/lookslike.png)\n\n`a`是十进制的10，`.1f`是1/16加上15/256，然后`p10`是2的10次方，或者1024，用十进制表示这就是10364.0。\n\n并不是所有的编译器都已经支持C99的特性了。\n\n#### 3.4.6.3 打印浮点数值\n\n`printf()`函数会使用`%f`格式化符来打印`float`与`double`类型的数值，这个符号使用的是十进制小数符的表示方法，还可以使用`%e`来使用指数表示法来打印它们，如果你的系统支持C99中提供的小数的十六进制格式，你就可以使用`a`或者`A`代替`e`与`E`。`long double`类型是以`%Lf`或者`%Le`与`%La`标识符来分别使用这三种方式的。需要注意的是，`float`与`double`都可以使用`%f, %e, %a`标识符来输出。这是因为当一个`float`类型的变量作为语句传递到任何函数时，C语言会自动把它转化成`double`类型，而不是它本来的类型，比如说`printf()`函数就是一个例子。例3.7说明了这种行为。\n\n![例3.7](/img/Listing3.7)\n\n这里是输出：\n\n![](/img/out1.png)\n\n这个例子说给出了默认的输出，下一章会讨论如何通过设置输出域长度与十进制的位权数，控制输出的外形。\n\n#### 3.4.6.4 浮点上溢与下溢\n\n可能最大的`float`类型就是值大概是3.4E38，然后你执行了下面的代码。\n\n![](/img/toobig.png)\n\n输出（个人测试）\n\n![](/img/INF.png)\n\n发生了什么？这就是***溢出***的一个例子-运算得出的结果大到无法表示。对于这种情况，这种行为之前是没有被定义的，但是现在C语言指定`toobig`是一个几乎代表***无限***的数字，`printf()`就会显示`inf`（infinity）（或者那个样子的一些变体）\n\n那么如果是要分辨非常小的数字呢？这是会遇到更多的情况。你可以记起`float`是以指数部分与数字部分（或尾数）来储存的。如果会有一个数字有着最小的指数与最小的值，而且仍然可以使用所有可以使用的位来表达尾数，在`float`的精度范围内表示，这就是`float`类型下的最小值。现在我们把它除2，一般地，这会减少指数，但是指数也是能够表达的最小值了。所以就要到尾数的空余位那里减了，把第一位清空，然后丢掉最后的二进制值，类比一下就是，用四位有效数字的10进制值，比如`0.1234E-10`，除10，结果就是`0.01234E-10`，你就可以得到答案了，但是你会在这个过程中丢掉一个数字。这种情况就叫做下溢，C语言对于失去完全精度的浮点数值叫做***subnormal***（反常值）。所以把最小的正常浮点值除2就会有反常值。如果你除了一个太大的数字，你就会失去所有的精度，最后只剩下0，C语言库现在提供了函数来检查是否你的运算产生了反常数值。\n\n这里还有另一种特别的浮点值，`NaN`。例如你给予`asin()`函数一个名字它会返回所给数值的sin值，但是sin的数值并不能大于1，所以函数对于大于1的数值是未定义的，在这种情况下函数就会返回`NaN`值，那会被`printf`打印为`nan`、`NaN`或者相似的东西。\n\n![四舍五入问题](/img/drop4in5.png)\n拿一个数字，加1，然后减去原来的数，你会得到几？肯定是1是吧？像下面的浮点运算给予了你不同的答案。\n\n输出是这个样子的：\n\n![](/img/alldevices.png)\n\n这三种奇怪的结果的原因是电脑并不能够跟踪需要多少十进制空间来进行恰当的运算，2.0e20是2后面跟着20个0，通过加1的操作，你要改变这个数字的第21位数字，要正确地执行这个操作，程序需要能够储存21位数字的类型，`float`类型数通常只是六位或者七位数带着指数这个范围（最后的一位只能是0，不能改变）所以这种尝试在劫难逃。另一方面，如果你使用2.0e4的话你就可以得到正确的结果，因为你改变的是第5位数，`float`类型的精度允许你这样做。\n\n### 3.4.7 复数与虚数类型\n\n许多科学与工程运算会使用复数与虚数，C99为这些数提供了支持，（with some reservations），它是一个独立的实现，就像内置预处理命令一样，不需要其他类型的支持。（VCR芯片很可能并不需要复数来工作）。并且，更一般地。虚数类型是可选择的。简单来说，有三种复数类型，`float_Conplex，_Complex`与`long double _Complex`，举个例子，一个`float _Complex`变量，会包含两个`float`类型的值，一个代表复数的实部，另一个代表虚部。相思地，有三种虚数类型，它们叫做`float _Imaginary, double _Imaginary`与`long double _Imaginary`。\n\n包含`complex.h`头文件可以使你把`_Complex`与`_Imaginary`分别更换为`complex`与`imaginary`。而且还能够让你使用I来代表-1的平方根。\n\n### 3.4.8 超越基本类型\n\n这样我们已经讲完了一系列基本的数据类型了，对于你们其中一些人来说，数据类型可能很多，还有一些人可能会想着还需要其他的类型，比如说字符串类型。但C语言并没有。但是还是能够很好的处理字符串，你会在第四章第一次见到字符串。\n\nC语言确实有其他的类型，他们是从基本类型中衍生出来的。这些类型包括数组、指针、结构体、联合体。即使它们都是后面章节才要讲到的，我们已经在这一章的例子中已经偷摸添加了一些关于指针的东西了。（指针会指向变量或者其他数据对象的地址，`scanf()`中使用的`&`前缀就会创造一个指针，他会告诉`scanf()`在哪储存信息）\n\n![](/img/basicdata.png)\n**总结：基本数据类型**\n\t**关键字**：\n\t基本的数据类型是由11个关键字组成的：`int, long, short, unsigned, char, float, double, signed, _Bool, _Complex, _Imaginary`\n\t**有符号整型**：\n\t可以是整数值也可以是负值\n\t1. `int`- 系统给定的基本整型。C语言保证`int`至少有16位。\n\t2. `short`或`short int` - 最大的短整型不大于最大的`int`，并有可能更小，C语言保证`short`类型至少有16位。\n\t3. `long`或`long int` - 能够保存至少`int`的最大值大小的数，可以更大。C语言会确保`long long`类型至少有32位。\n\t4. `long long`或`long long int` - 这个类型至少能够保存`long`类型数的最大范围，可以更大，`long long`类型最小64位。\n\n通常，`long`类型是比`short`类型更短的，`int`会与他们之中的一个一样大。例如，以DOS系统为基础的PC系统，`short`是16位长的，而`int`是32位长的，以Windows 95为基础的系统会提供16位的\n`short`，而`long`与`int`类型是32位的。\n\n如果你喜欢的话，你可以在任何有符号类型前使用`signed`关键字，将它们有符号这个事实显露出来。\n**无符号整型：**\n\t这些类型只能从0到整数，因为去掉了符号位，这种类型的范围得到了扩大，使用关键字`unsigned`可以把你想要的类型变为无符号类型：比如`unsigned int, unsigned long, unisgned short.`单个的`unsigned`与`unisgned int`是一样的。\n**字符：**\n\t它们是像`A, &`这样的印刷字符。在定义上，字符类型会使用1个字节的内存来代表一个字符。在以往，字符字节大多数是8位，但现在它可以是16位或者更大，可以迎合使用的基准字符集的大小。\n\t\t**char** - 这种类型的关键字，一些实现中会使用有符号的`signed char`，但其他还是使用无符号字符。C语言允许你使用`signed`或者`unsigned`来划定你想要的类型。\n**布尔类型：**\n\t布尔值代表`true`与`false`，C语言会使用0与1代表这两个值。\n\t\t**_ Bool** - 是这种类型的关键字，它是一个无符号整型，只需要保存0与1这两个值的内存。\n**实数浮点型：**\n\t可以正数、负数或者零。\n\t\t[`float`] 是系统的基本浮点类型，可以至少呈现6位精确的有效数字。\n\t\t[`double`] 一种（可能是）更大的浮点储存单元，允许更大的有效数字位数（至少10位，通常会更多。）而且有可能比float也有更多的指数位数。\n\t\t[`long double`] 一种（可能是）更大的浮点储存单元，它可能允许更多的有效数字位数，也有可能有着比`double`类型更大的指数部分。\n**复数与虚数浮点型：**\n\t虚数类型是可以选择的，实部与虚部是基于实数类型的：\n\t\t`float _Complex`\n\t\t`double _Complex`\n\t\t`long double _Complex`\n\t\t`float _Imaginary`\n\t\t`double _Imaginary`\n\t\t`long double _Imaginary`\n\n![](/img/Summary.png)\n\n**总结：如何声明一个简单的变量**\n1. 选择你需要的类型\n2. 使用允许的字符为你的变量起个名字\n3. 使用以下形式的声明语句\n```C\n\t//type-specifier variable-name;\n\t//类型标识符 变量名;\n\tint Iint1;\n```\n4. 你可以通过用逗号把变量名隔开来声明多个变量，下面就是一个例子。\n```C\n\tchar ch, init, ans;\n```\n5. 你可以在声明语句中对变量进行初始化：\n```C\n\tfloat mass = 6.0E24;\n```\n\n### 3.4.9 类型大小\n\n表3.3与3.4展示了一些C语言环境下的类型大小（在一些环境中，你可以选择）你的系统是什么样子的？尝试运行例3.8中的程序，你会弄明白的。\n\n![表3.3与3.4](/img/Twotables.png)\n（分别是整型与浮点型的大小。）\n\n对于每一种类型，最上面的一行是有效数字的位数，第二行是指数的范围（十进制）。\n\n```C\n//(例 3.8)\n#include <stdio.h>\n\nint main(void)\n{\n\t/*C99为大小提供了%zd格式化符*/\n\tprintf(\"Type int has a size of %u bytes.\\n\", sizeof(int));\n\tprintf(\"Type char has a size of %u bytes.\\n\", sizeof(char));\n\tprintf(\"Type long has a size of %u bytes.\\n\", sizeof(long));\n\tprintf(\"Type double has a size of %u bytes.\\n\", sizeof(double));\n\treturn 0;\n}\n```\n\nC语言有一种内置的运算符，它叫`sizeof()`，它会给出以比特为单位的大小范围。（一些编译器需要`%lu`而不是`%u`来打印`sizeof`数值，这是因为C语言对于`sizeof`用来报告的真实的无符号整型是有多个范围的。C99对于这种类型给出了`%zd`标识符，如果编译器支持的话你应该使用这个。）例3.8的输出是这个样子的。\n\n![](/img/sizes.png)\n\n这个程序只发现了4种类型的范围，但是你可以简单修改一下这个程序来找寻你感兴趣的任何一种类型，要注意的是`char`类型的大小一定是1个字节，因为C语言对于`char`类型定义的就是一个字节。所以在有16位的`char`与64位的`double`的系统上，`sizeof`会报告`double`类型有4个字节的大小。你可以看看limits.h与float.h头文件来获取更多关于类型最大最小值的细节信息。（下一章会进一步阐述这两个文件。）\n\n顺便一说。看看最后一行`printf()`是如何延伸到两行的，只要不是在双引号部分或者在一个单词的中间断开，你可以这样做。\n### 3.4.10 可用数据类型\n\n当你正在开发一个程序时，需要注意你需要的变量与它们应该使用的类型。大多数情况，你可以使用`int`或者`float`来表示一个数，用`char`来表示字符，在使用它们的函数的开头先声明好它们。为变量取一个能够暗示它们的意义的名字。初始化一个变量时，也要让变量类型与赋给的常量类型匹配。这里就是两个例子。\n\n```C\n\tint apples = 3;\n\tint oranges = 3.0;\n```\n\nC语言对于类型不搭配比起Pascal是很宽容的，C语言的编译器允许你进行二次初始化，但是它们有可能会引起报错，尤其是当你触发了一个高级警告时。最好不要养成这种马马虎虎的习惯。\n\n当你使用其他类型的值给一个数字类型的值初始化时，C语言会将这个值进行转化，来让它与这个变量的类型相配。这也就意味着你有可能会失去一些数据，比如思考一下下面的初始化过程。\n\n```C\nint cost = 12.99;        /*使用double值来初始化int*/\nfloat pi = 3.1415926536; /*使用double值来初始化float*/\n```\n\n第一个声明语句会将12赋给`cost`变量，当把浮点数转换为整数值时，C语言简单地把小数部分丢掉（截断），而不是四舍五入。第二行的声明会失去精度，因为`float`类型是只能呈现小数点后6位精确数的。如果进行这样的初始化，编译器有可能会发出一个警告（但不是一定会发），你有可能在编译例3.1的时候遇到这个问题。\n\n许多的编程者与组织人员拥有设置变量名称的体系化传统方法，按照这种方式就可以显示出变量的类型。例如你可以使用`i_prefix`来表示这是个`int`类型变量，同理`us_`来表示`unsigned_short`，这样的话对于类型就好辨认一些。\n\n### 3.4.11 参数陷阱\n\n在这一章的前半部分，有一个关于`printf()`使用的警告还是很值得重复强调的。你可能还记得传递给函数的信息在术语上称为参数。例如，`printf(\"Hello, pal.\")`就有一个参数：`\"Hello, Pal.\"`。我们把在双引号中的一系列字符叫做***字符串***，我们会在第四章讨论。现在的重点是，一个字符串，即使包含着好几个单词与标点符号，也仍然被算作是一个参数。\n\n相似地，`scanf(\"%d\", weight)`有两个参数：`\"%d\"`与`&weight`。C语言会使用逗号来分开函数中的各个参数，`printf()`与`scanf()`函数还挺不寻常的，它的参数数量是不限的。例如，我们曾经在使用`printf()`时传递过一个、两个甚至是三个参数。对于一个恰当运行的程序，它需要知道参数的数量。`printf()`与`scanf()`函数会使用第一个参数来表达之后会有多少个其他的参数。这里的诀窍就是在最前的字符串中的每一个格式化符都代表着后面有一个参数，例如下面的语句就有两个格式化符：`%d`与`%d`：\n\n```C\nprintf(\"%d cats ate %d cans of tuna\\n\", cats, cans);\n```\n\n这也就告诉程序后面要接收两个额外的参数，而且后面确实有两个——`cats`与`cans`。\n\n作为一个编程人员，你的责任就是确保格式化符的数量与其他的参数的数量相同，类型相同。C语言现在已经有函数原型机制了，它能够检查一次函数调用是否使用了正确的数字与正确的参数类型，但是对于`printf()`与`scanf()`是不适用的，因为它们参数的数量是可变的。当你并没有接收程序员的负担会怎样呢？举个例子，假设你写了例3.9那样的程序。\n\n![例3.9](/img/Listing3.9.png)\n\n下面是从微软VisualC++ 7.1（WinXP系统）上运行的结果\n\n```Bash\n4\n4 34603777\n0 0.000000\n```\n\n这是在Digital Mars（WinXP系统）上运行的结果\n\n```Bash\n4\n4 4239476\n0 0.000000\n```\n\n这是在Metrowerks Codewarrior Development Studio 9（MacOSX系统）\n\n```Bash\n4\n4 3327456\n1075052544 0.000000\n```\n\n你可以看到，使用`%d`来表示一个`float`类型的值并不会将它变成最近的`int`类型值，而是直接输出垃圾值。相似地，使用`%f`来表示一个`int`类型的值也并不会将整数转化为浮点数值。参数太少或者类型不对得到的结果不同的平台也不一样。\n\n没有一个编译器对于这个代码有报错或者警告，在运行时也没有。一些编译器确实会捕捉到这种错误，但是C语言标准并没有要求它们这样做。因此，电脑就不一定能够补货到这种类型的错误，因为程序反而还能够正常地运行，你也不一定能够注意到这种错误。如果程序并没有打印正确的数值数量或者是数值，那就回去看看`printf()`的参数数量与类型是否使用正确。（顺便一说，Unix语法检测程序lint，它比Unix编译器检查得更加细致，能够对于`printf()`的参数错误进行报错）。\n\n## 3.5 又一个例子：转义序列。\n\n让我们在程序中打印更多东西吧，这一次我们会使用C语言中的一些针对于字符的特殊转义序列。尤其地，例3.10中的程序显示了回车符(`\\b`)，水平制表符(`\\t`)以及回行符（`\\r`）是怎么工作的。这些概念要追溯到电脑还在使用电传打字机的时代，它们并不总是会在现代的图形界面上正确地翻译。例如，例3.10在一些Mac系统的实现上就不能够按照想要的方式来运行。\n\n![例3.10](/img/Listing3.10.png)\n\n### 3.5.1 当程序运行的时候发生了什么？\n\n让我们一步步地浏览这个程序，好让它能够在ANSI实现下运行。第一个`printf()`函数语句（标`1`的那个）会发出警告信号（由`\\a`引起），然后会打印如下的句子：\n\n```Bash\nEnter your desired monthly salary:\n```\n因为在字符串最后没有`\\n`符号，所以光标还是在冒号后面。\n\n第二个`printf()`语句会接着第一句结束的地方开始，所以当它执行完毕时，屏幕上看起来是这个样子的。\n\n```Bash\nEnter your desired monthly salary: $______\n```\n\n在冒号与美元符号之间有一个空格，因为第二个`printf()`的字符串是以空格开始的，7个退格符的作用是把光标向左移动7个单位。这就会将光标移到下划线字符前面，正好放在美元符号后面。通常地，退格符并不会移除前面的字符，但是有一些实现是有可能移除的，那样这个小练习就没有用了。\n\n现在，你会输入你的回答，比如说你输入了`2000.00`，那么这一行看起来就会是这个样子。\n\n```Bash\nEnter your desired monthly salary: $2000.00\n```\n\n你输入的字符将会覆盖换行符，而且当你点`Enter`键（或者`Return`）来输入你的回答时，光标就会跳转到下一行。\n\n第三个`printf()`语句是以`\\n\\t`开始的，换行符将会将光标移动到下一行的最开始，而tab键通常会将光标移动到那一行的下一个制表位（但并不是一定），也就是第9列。然后字符串的剩余部分就会被打印下来。在这个语句执行之后，屏幕上看起来就会变成这样。\n\n```Bash\nEnter your desired monthly salary: $2000.00\n\t$2000.00 a month is $24000.00 a year.\n```\n因为这个`printf()`语句并没有使用换行符，光标还是在这一句的最后位置。\n\n第四个`printf()`使用了`\\r`符号，它会将光标移动到一行的开头位置，这个语句执行之后屏幕上就成了这样。\n\n```Bash\nEnter your desired monthly salary $2000.00\nGee!    $2000.00 a month is $24000.00 a year.\n```\n\n### 3.5.2 输出清理\n\n`printf()`函数什么时候才会将输出发送到屏幕上呢？首先，`printf()`语句会将输出发送到***缓冲区***，时不时地，在缓冲区的内容就会被发送到屏幕上。对于输出什么时候从缓冲区发送到屏幕上，基础的C语言规则已经很清晰了：当缓冲区被充满时，当遇到一个换行符的时候，以及当有即将发生的输出行为时。（从缓冲区发送输出信息到屏幕或者是文件上叫做***刷新缓冲区***），例如，最先的两个`printf()`函数语句并不会填充缓冲区，也并没有包含换行符。在那种情况下，你可以使用一个换行符来刷新缓冲区，那样的话代码就可以写成这个样子：\n\n```C\nprintf(\"Enter your desired monthly salary: \\n\");\nscanf(\"%f\", &salary);\n```\n\n 不管即将到来的输入信息是不是会刷新缓冲区，这几行代码都是可以正常工作的。但是，它也会将光标移到下一行，防止你把数据与提示字符串写到一行。另一种方式是使用`fflush()`函数，它会在第13章，文件输入与输出中讲到。\n\n# 关键概念\n\nC语言有着许多种数字类型，这也反映了C语言避免让编程人员陷入障碍的目的。比起用一种类型包管全部数字类型，C语言尽力给予编程人员对于数字的特定种类（比如说有符号与无符号），以及最能够适合特定程序的数字范围大小的选择。\n\n在一台电脑上，浮点数与整型的基础是不一样的。它们会被以不同的形式储存于处理。两个32位的内存单元能够保存相同的位形式（二进制数表示是一样的。）但是如果其中一个被理解为`float`而另一个被理解为`long`，这两个内存单元就会代表完全不同也不相关的两个数，例如在个人电脑上，如果你使用代表256.0的浮点储存单元，但是让它被理解为long，你就会得到113246208这个数。C语言确实允许你使用多种数据类型来书写表达式，但是它会自动进行类型转换，所以真正的运算只有一种数据类型。\n\n在电脑内存中，字符是以数字编码的形式呈现的，ASCII码是美国最常用的数字代码标准，但是C语言也支持其他代码集。字符常量是电脑上数字编码的符号表示-它是由单引号框定的单字符，比如`'A'`。\n\n# 总结\n\nC语言有各种各样的数据类型，基本的数据类型可以分为两类：整型与浮点型，对于整型，两个最鲜明的区分就是分配给不同类型的储存空间，还有是否有符号。最小的整型是`char`，它可以有符号，也可以没有，这取决于不同的C语言实现，你可以根据自己的需求来选择`signed char`与`unsigned char`，但是那通常是在你使用范围比较小的数字的情况下，而不是使用字符编码时。其他的整型还有`short, int, long, long long`等。C语言确保了所有的类型都至少会与它前面的类型一样大，它们都是有符号类型，但你还是可以加上`unsigned`修饰符来创造相应的无符号类型：`unsigned short, unsigned int, unsigned long, unsigned long long`或者你也可以使用`signed`修饰符来明显地写出它是有符号的。最后，还有`_Bool`类型，一种无符号类型，它只能保存0与1，分别代表着`false`与`true`。\n\n浮点类型有三种，分别是`float, double`与在ANSI C中的`long double`，每一个类型也是至少比它前面的那个类型一样大的。要是想的话，你也可以用`_Complex`与`_Imaginary`与浮点类型关键字连用，来使用虚数与复数类型。例如，有`double _Complex`与`float _Imaginary`类型。\n\n整型可以被以十进制、八进制与十六进制的形式被输出，开头写0可以使一个数变为八进制数，写0x或者0X可以变为十六进制数。例如`32, 040`还有`0x20`就分别是十进制、八进制与十六进制的数字，但是它们代表的都是同一个值。另外使用`l`或者`L`符号可以声明一个`long`类型的常量值，`ll`或者`LL`可以声明一个`long long`类型的值。\n\n字符常量是由单引号及其中的字符代表的：比如`'Q', '8'`。字符还包括转义序列，比如`\\n`，它们代表着不会被打印出来的特定字符，你可以使用类似`\\007`的形式来使用ASCII码的形式来代表字符。\n\n浮点数可以以十进制小数点的形式来表示，也可以以指数符号的形式来表示，例如`7.38E10`。\n\n`printf()`函数能够让你利用格式化转换符，以最简洁的方式打印各种各样的数值，它由一个百分号符`%`与一个表示类型的字符组成，比如`%d`或者`%f`。\n\n# 回顾问题\n\n你会在附录A中找到这些问题的答案。\n1.你对于这几种数据你会使用哪种数据类型？\n\n>1.东斯普尔顿的人数 -- int类型（16位即可）\n>2.在DVD上电影的价格--float类型\n>3.这一章最常见的字母--char类型\n>4.一个字母在这一章中出现的次数。-- int类型（。）\n\n2.为什么有时候你会使用`long`而不是`int`。\n\n>有些时候表示的范围会更大，但是并没有超过`long`，使用`long`类型可以保证数据因为存放不下而溢出，从而导致不同机型显示不一而且不会报错的问题。\n\n3.如果你想要得到一个32位有符号的整型，你会使用哪种可转移的类型，请写出所有类型，并说说每一种的合理性。\n\n>1.在`<inttypes.h>`中的`int32_t`类型\n>2.基本类型中的`long`或者`int`类型（对于`int`来说不一定）\n\n`long`合理，因为关键字更简洁容易记，格式化符也不容易弄错\n（`int32_t`为`PRId32`,`long`为`%ld`）\n`int32_t`能够让编程人员选择适合的大小范围来进行编程，便于大小的记忆。\n\n4.确认每种类型与它的含义。\n\n>1.`'\\b'`回车符（转义序列）\n>2.`1066`一个整数，一千零六十六\n>3.`99.44` 一个两位小数，九十九点四四\n>4.`0XAA`，十六进制数，10 * 16 + 10 = 170.\n>5.`2.0e30`，指数形式的小数，2 * 10^30(10的30次方)\n\n5.Dottie Cawm 编造了这个满是错误的程序，请找到这个程序中问题。\n\n```C\ninclude <stdio.h>\n\nmain\n{\n\tfloat g; h;\n\tfloat tax, rate;\n\n\tg = e21;\n\ttax = rate * g;\n}\n```\n\n（实在是太明显了啊。。）\n1.include前面忘了#\n2.main。。。（int main(void)，或者void main()）\n3.g后面用了分号来分隔，相当于h未规定类型。\n4.应该是1e21，e21啥也不是。\n5.tax类型与g的类型大小都太小了，应该用double，float表示不了精确的21位数，或者直接使用long long也可以，反正是整型。\n6.忘了写`return 0;`\n\n6.确定下面几种常量数据的类型，与打印他们所使用的格式化标识符。\n![](/img/Identifytypes1.png)\n\n>·····12为整型，（int（作为常量，默认为int）），输出可以使用`%d`,`%hd`,`%u`,`%LLu`,`%lu`。\n>·····`0X3`，十六进制数，`%X`\n>·····`'C'`，字符常量，`%c`\n>·····`2.34E07`,后面看成八进制，但仍然是7，小数的指数形式，用`%f`或者`%lf`都可以。\n>·····`\\040`,十进制的040为32，此即`32`,即`' '`（空格字符）\n>·····`7.0`，一位小数，可以使用`%f`或者`%lf`\n>·····`6L`,为`long`形式整型，可以使用`%ld`输出。\n>·····`6.0f`,为`float`形式小数，可以使用`%f`。\n\n7.同上\n![](/img/Identifytypes2.png)\n>·····012，八进制数，十进制下为10，可以用`%o`输出。\n>·····2.9e05L，`long double`，2.9 * 10^5.\n>·····`'s'`,字符常量，用`%c`.\n>·····`100000`,`32`位的`int`，`%ld`，或者`%lu`或者更大的类型`long long`。\n>·····`'\\n'`,转义序列换行符，直接打印即可。\n>·····20.0f，`float`类型，`%f`。\n>·····0x44，十六进制数，68.用`%x`输出。\n\n8.假设你的程序是以这几行声明语句开头的。\n```C\nint imate = 2;\nlong shot = 53456;\nchar grade = 'A';\nfloat log = 2.71828;\n```\n\n在下面的`printf()`函数语句中填入适当的格式化符。\n```C\nprintf(\"The odds against the %__ were %__ to 1.\\n\",imate, shot);\nprintf(\"A score of %__ is not an %__ grade.\\n\", log, grade);\n```\n\n```C\nprintf(\"The odds against the %d were %ld to 1.\\n\",imate, shot);\nprintf(\"A score of %f is not an %c grade.\\n\", log, grade);\n```\n\n9.假设`ch`是一个字符变量，展示一下如何将回行符通过转义序列、十进制数值与八进制及十六进制字符常量的形式赋给ch的。\n\n```C\nchar ch;\n\nch = '\\r';\nch = 13;\nch = '\\0x0D';\nch = '\\015';\n```\n\n10.纠正这个愚蠢的程序。\n![\"Perfect...\"](/img/Perfect.png)\n（在C语言中`\\`表示除）\n\n1.未指定形式参数的变量名。（main(int a)）\n2.注释符号没用对（要么`//`,要么`/**/`.)\n3.声明变量使用关键字。（`int cows, legs;`）\n4.`printf()`字符串缺少了右边的引号。\n5.`scanf()`少了取地址符`&`，而且legs的输入形式写错了，为`'%d'`\n6.`printf()`格式化符为`%d`。\n\n11.说说下面的转义序列代表啥意思？\n\n1. `\\n`,换行符，10.\n2. `\\\\`,相当于`\\`.\n3. `\\\"`,相当于`\"`.\n4. `\\t`,相当于tab键。\n\n# 编程训练\n\n1.通过实验方式，弄清你的电脑是如何处理整型上溢、浮点数上溢以及浮点下溢的，也就是写一个拥有数据溢出问题的程序。\n\n![](/img/overnunder.png)\n\n这个肯定会溢出，可以修改程序看看会发生什么。\n我观察到的是：整型溢出会直接跳到它的最小范围开始加\n比如2146483650 = - 2147483646 \n\n浮点上溢，会失去精度，但是只要未超过位数仍然可以表示，如果把指数调到40就会出INF（infinity），具体可以看上文对于浮点溢出的讲解。。\n\n浮点下溢，会直接被看成0。\n\n2.写一个能够根据你输入的ASCII码值返回对应字符的程序。\n\n![](/img/ASCIIout.png)\n\n包含了转义序列，使用了`switch`与`if`嵌套的结构。\n\n3.写一个能够发出警报声，并且能够打印以下句子的程序。\n\n```Bash\nStartled by the sudden sound, Sally shouted, \"By the Great Pumpkin,\nwhat was that!\"\n```\n\n重点有两个，一个是掌握好换行，可以用一个printf加上一个换行符实现，也可以用两个。\n另一个是如何在字符串内输出\"，这也是我们周赛第一道题的考点\n\n![](/img/alarming.png)\n\n4.书写一个能够读入浮点数据，然后将它先以十进制小数的形式输出，再以指数形式输出。输出类似下方，但指数形式的实数部分是视系统而变的。\n\n![](/img/decimalandexp.png)\n\n5.一年大概有3.156 * 10^7秒，写一个要求你输入以年计数的年龄并将它转化为秒数的程序。\n\n![My life...](/img/lifesecond.png)\n\n6.一分子水大概是3.0 * 10^23克， 一夸脱水是950克。写一个要求你输入夸脱单位的水量，返回水的分子数的程序。\n\n![Too much...](/img/quartmol.png)\n\n7.一英寸是2.54厘米， 写一个要求你输入英寸高度，返回厘米高度的程序。你要是想的话也可以反过来转换。\n\n1.inch to cm\n![](/img/inchtocm.png)\n\n2.cm to inch\n![](/img/cmtoinch.png)\n\n\tEnd...\n\n\n\n\n\n","slug":"C-premier-plus-Chapter-3","published":1,"updated":"2023-12-22T06:56:26.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrp133pq000858uebigvai7o","content":"<h1 id=\"第三章-数据处理\"><a href=\"#第三章-数据处理\" class=\"headerlink\" title=\"第三章 数据处理\"></a>第三章 数据处理</h1><blockquote>\n<p>你会在这一章学到下面的东西：</p>\n<ol>\n<li>关键字<br>&#96;int,short,long,unsigned,char,float,double,_Bool,_Complex</li>\n<li>运算符<br><code>sizeof</code></li>\n<li>函数<br><code>scanf()</code></li>\n<li>整型与浮点型的区别</li>\n<li>书写常量与声明这些类型的变量</li>\n<li>如何使用<code>printf()</code>与<code>scanf()</code>函数来读写不同类型的值</li>\n</ol>\n</blockquote>\n<p>程序依靠数据来工作。你会向电脑输入数字、字母或者单词，然后期望它能够利用这些数据做些事情。例如，你可能想要电脑去计算支付利润或者展示一个排过序的酒商列表。在这一章，你将会不只阅读数据，而且练习着去操纵数据，那是挺有趣的一件事。</p>\n<p>这一章还会让你了解到两大类数据类型：整数与浮点数。C语言提供了这些类型的几种变体。这一章会告诉你类型是什么，如何声明它们并且如何利用它们。而且，你会发现变量与常量之间的区别，作为额外奖励，你的第一个交互式的小程序就要诞生了！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"3-1-一个例子\"><a href=\"#3-1-一个例子\" class=\"headerlink\" title=\"3.1 一个例子\"></a>3.1 一个例子</h2><p>再一次，我们还是从一个样例程序来开始，像以往一样，你会发现一些不熟悉的东西，我们待会就会为你解释。程序的总体目的应该清晰，那么就尝试把图3.1中的源码编译运行下吧。<br>为了节省时间，你可以省略注释。</p>\n<p><img src=\"/img/Listing3.1.png\" alt=\"图3.1\"></p>\n<p><img src=\"/img/ErrandWarn.png\" alt=\"错误与警告\"><br>【错误与警告】<br>如果你把程序的某些部分打错了，还有，比如说，遗漏了一个分号，编译器就会给予你一条语法错误信息。即使你没打错，编译器也有可能给予你一条警告信息，“Warning-conversion from ‘double’ to ‘float’ , possible loss of data.” 错误信息指的是你有可能把某些事做错了，它阻止程序的编译。警告，意思是你写的代码是合法的但是有可能做的并不是你想的那样。警告并不会阻止编译过程。上文中的这条信息就会在C语言在处理像770.0这样的数时出现，但并不是这个例子的问题，这一章过会会解释这条警告。</p>\n<p>当你在打字写这个程序的时候，你有可能会把<code>770.0</code>改成这种珍贵金属的当前价格。但是不要改变14.5833，那代表着一磅对应的盎司数。（盎司金衡制，是对于贵重金属使用的，常规衡制是给人们使用的，不论是珍贵的物品或是其他的东西。）</p>\n<p>需要注意的是“输入”你的体重意味着把你的体重打字写入电脑，并且敲下Enter或者Return键（不要输入完了你的体重就等着。）按下Enter键这个动作告诉了电脑你已经完成了你的应答。这个程序想要你输入一个数字，如<code>150</code>而不是单词，比如<code>too much</code>，如果你写的是字母而不是数字，那是会导致问题的，而这个问题需要之后学习的<code>if</code>语句来解决。（第七章，“C语言控制语句：分支结构与跳跃结构”会讲到），所以请先平静一些，输入一个数字，这里就是一个简单的输出示例。</p>\n<p><img src=\"/img/Olist3.1.png\" alt=\"输出\"></p>\n<h3 id=\"3-1-1-例子中的新知识\"><a href=\"#3-1-1-例子中的新知识\" class=\"headerlink\" title=\"3.1.1 例子中的新知识\"></a>3.1.1 例子中的新知识</h3><p>在这个C语言程序中有这么几个新接触的要素。</p>\n<ul>\n<li>可以注意到的是，代码在变量声明中使用了新的数据类型，前面提到的例子只使用了十进制整数类型(<code>int</code>)，但是现在的这个例子使用了一个浮点类型的变量类型，这样的话你就可以处理更大范围的数据了。<code>float</code>类型就可以保存含有十进制小数点的数字。</li>\n<li>这个程序给出了书写常量的一些更新的方式，你现在可以书写浮点型的常量了。</li>\n<li>为了对程序提供输入信息，你需要使用<code>scanf()</code>函数，<code>%f</code>命令<code>scanf()</code>从键盘输入中读入一个浮点数，<code>&amp;weight</code>告知了<code>scanf()</code>函数把输入的值赋给名字叫做<code>weight</code>的变量，<code>scanf()</code>函数会用<code>&amp;</code>符号来寻找在哪里可以找到叫做<code>weight</code>的变量，下一章我们会进一步地阐述<code>&amp;</code>符号，现在，只需要相信我们你需要在这里添加一个<code>&amp;</code>符号。</li>\n<li>可能最突出的新特性就是程序变为交互性的了。电脑会要求你输入信息，并使用你输入的数值。一个交互性的程序是比不能交互的更有趣的。更重要的是，交互的方法让程序更加的灵活。举个例子，样例程序就可以用于所有合理的体重了，而不只是150磅，你不需要换一个人就再把程序重写一遍。<code>scanf()</code>函数会从键盘中获取数据，并把数据传递到你的程序，<code>printf()</code>函数会从程序中获取数据，然后把数据传递到你的屏幕上。这两个函数在一起就可以让你建立电脑与你的双向联系（见图3,1），这就让电脑使用更加有趣了。</li>\n</ul>\n<p>我们会在这一章讲述这些新特点中的前两条，后面的三条内容会在第四章-字符串与格式化输入输出完整地讲到，但是这一章还是会少量地使用<code>print()</code>与<code>scanf()</code>函数。</p>\n<p><img src=\"/img/Figure3.1.png\" alt=\"输入输出函数的工作\"></p>\n<h2 id=\"3-2-变常类型\"><a href=\"#3-2-变常类型\" class=\"headerlink\" title=\"3.2 变常类型\"></a>3.2 变常类型</h2><p>一台电脑，在程序的指导之下，可以做到很多的事情。可以做加法，可以给名称排序，可以指示讲话者或者屏幕的演出顺序，可以计算彗星的轨道，可以编排你的邮寄列表，拨叫电话号码、画出由小棒组成的人物，得出结论或者其他你可以想象到的可以被创造的东西。为了完成这些任务，程序需要处理<em><strong>数据</strong></em>，也就是你使用的保存在程序中的所有数字与字符信息。一些数据类型需要在程序使用之前进行预设，而且保证它们的值是不变的，这些就是<em><strong>常量</strong></em>。其他的数据类型的值或许会随着程序运行改变或者被赋给，这些就是<em><strong>变量</strong></em>。在这个样例程序中，<code>weight</code>就是一个变量，而<code>14.5833</code>就是一个常量。那么<code>770.0</code>呢？虽然铑金属在真实生活中的价格并不是个常量，但是这个程序把它作为一个常量来处理。变量与常量的区别就在值可不可以随着程序运行发生改变上。</p>\n<h2 id=\"3-3-数据类型关键字\"><a href=\"#3-3-数据类型关键字\" class=\"headerlink\" title=\"3.3 数据类型关键字\"></a>3.3 数据类型关键字</h2><p>讲完了变量与常量的区别之后，我们需要了解一下不同数据<em><strong>类型</strong></em>之间的区别。一些数据是数字形式，一些是字母，或者更加普遍的，它们是字符。电脑需要一种方式来确定与使用这些不同的类型。C语言通过对于基本的数据类型的定义完成了这个工作。如果数据是一个常量，编译器通常是可以通过它看起来的样子来区分它的。<code>42</code>是一个十进制整数，<code>42.100</code>是一个浮点数，在另一面，变量就需要声明语句来声明它的类型。随着学习进行下去，你会了解到关于声明变量的更多细节。但是还是让我们首先先研究一下C语言可以识别的基本类型，K&amp;R C确立了有关于类型的七个关键字，C90标准增加了两个，C99标准又增加了三个。（见表3.1）<br><img src=\"/img/Table3.1.png\" alt=\"表3.1\"></p>\n<p><code>int</code>关键字提供了C语言中基本的十进制整数类型，下面的三个关键字(<code>long, short, unsigned</code>)还有ANSI添加的<code>signed</code>提供了基本类型的变体。接着，<code>char</code>关键字指明了用于字母与其他字符的类型，如<code>%, $, #</code>等，<code>char</code>类型还可以被用来代表大于0与小于10的十进制整数。然后是<code>float</code>与<code>double</code>，还有两者的混合<code>long double</code>是用来代表带有十进制小数点的数字的。<code>_Bool</code>类型是为布尔类型提供的(<code>true</code>和<code>false</code>)，最后是分别代表着复数与虚数的<code>_Complex</code>与<code>_Imaginary</code>.</p>\n<p>由这些关键字创造的类型又可以基于在电脑中的储存类型分为两种，<em><strong>十进制整数类型</strong></em>与<em><strong>浮点数类型</strong></em>。</p>\n<p><img src=\"/img/storingtypes.png\" alt=\"Bits, Bytes and Words\"><br>【Bit（位）、字节与字】</p>\n<p><em>bit</em>、<em>字节</em>与<em>字</em>可以被用来描述电脑的数据单元或者内存单元。我们会集中于第二种用法。</p>\n<p>内存的最小单元叫做<em><strong>bit</strong></em>，它可以保存<code>0</code>与<code>1</code>之间的其中一种数值（或者你可以说，这个字节被设为“关”或者“开”）你并不能在一个bit中储存太多的信息，但是电脑可以储存很多的字节，bit就是电脑内存的基础组成模块。</p>\n<p><em>字节</em>是电脑内存的一般单元。对于大多数的机器来说，一个字节是8个bi，那是标准的定义，至少当测量内存的时候（C语言有不同的定义，我们会在“使用字符：<code>char</code>类型”这一节讲到）因为一个bit不是0就是1，那么在8位的字节中，就可以有256种可能（2的8次方），这些可能的模式就可以被用作比如代表0到255的数字或者代表一系列的字符。在二进制代码下，这种一对一的映射是可以被建立的，而且使用0与1来代表数字也使机器便利的。（在第15章-位运算，会讲述二进制代码，但是如果你想的话现在就可以去读一下）。</p>\n<p><em>字</em>是电脑固定设计下的内存自然单元，对于8位的微型计算机，比如原来的苹果电脑来说，一个字就只是8个bit。早期的IBM兼容器使用的80286处理器是16位的机器，这也就是说他们把字长增加到了16bit。还有例如以Pentinum为基础的计算机，还有Mactonish PowerPC的字长是32bit。还有更强大的电脑的字长是64位的或者更大。</p>\n<h3 id=\"3-3-1-整型与浮点型\"><a href=\"#3-3-1-整型与浮点型\" class=\"headerlink\" title=\"3.3.1 整型与浮点型\"></a>3.3.1 整型与浮点型</h3><p>整型？浮点型？如果你感觉这些词非常不熟悉以至于干扰了你的阅读进度，我们这就要简要描述它们的意义了。如果你对位、字节还有字还是不熟悉的话，你可能需要阅读一下最近描述过的附加栏。你真的需要了解所有的细节吗？并不是，不只了解内燃机驱动车子的工作原理，而多了解一些电脑或者引擎内部发生的事情有时候可以帮到你。</p>\n<p>对于一个人来说，整型与浮点型的区别体现在它们是怎么被写下的。对于电脑来说，那就体现在它们是怎么被储存的。让我们依次来研究一下这两种类型。</p>\n<h3 id=\"3-3-2-整数类型\"><a href=\"#3-3-2-整数类型\" class=\"headerlink\" title=\"3.3.2 整数类型\"></a>3.3.2 整数类型</h3><p><em><strong>整型</strong></em>是没有小数部分的数字。在C语言中，整型是没有小数点的数字。比如说-2、-23还有2456。像3.14, 0.22, 还有2.00这些数就不是整型。整型是以二进制数字的形式被储存起来的。比如7就是被储存为二进制数111的。因此，为了在8位字节中储存这个数字，会把前五个位设置为0，然后把后三个位设置为1。    </p>\n<p><img src=\"/img/Figure3.2.png\" alt=\"用二进制码储存7\"></p>\n<h3 id=\"3-3-3-浮点数类型\"><a href=\"#3-3-3-浮点数类型\" class=\"headerlink\" title=\"3.3.3 浮点数类型\"></a>3.3.3 浮点数类型</h3><p><em><strong>浮点</strong></em>数多多少少是对应着数学概念中的<em><strong>实数</strong></em>，实数包含着整数之间的这些数字，浮点数基本是这些样子：2.75、3.16E7、7.00、2e-8，需要注意的是，只要有小数点就会把整型数字转换为浮点数，比如7.00是一个浮点数，而7就是一个十进制整数。很明显，书写浮点数的方式不止一种，我们会在之后更充分地讨论用e符号表示的形式。但是简单来说，3.16E7的表示方式意思就是3.16乘10的7次方，也就是1后面添7个0，7也就是10的<em><strong>指数</strong></em>。</p>\n<p>关键就是储存浮点数的方式与整数不一样。浮点数的表示涉及到把一个数字分开为小数部分与整数部分，然后分别储存。因此，7.00这个数字不会与整数7同样储存，即使它们的值都是一样的。十进制类比起来也就是把7.0写为0.7E1。这里，0.7就是小数部分，1就是指数部分，图3.3展示了浮点数储存的另一个例子。一台电脑当然会使用二进制数与二进制而不是十进制来储存。你会在第十五章了解关于这个话题的更多信息。现在我们先集中精力于在实用上区别吧。</p>\n<ul>\n<li>整型没有小数部分，浮点数可以有小数部分。</li>\n<li>浮点数比整数代表的数字更多，可以看一下这一篇结尾的图表3.3。</li>\n<li>对于一些算术运算符，比如一个数减去另一个数，浮点类型的精确度会有更大可能下降。</li>\n<li>因为在任何一个范围之间都有着无数的浮点数，比如在1.0与2.0之间，电脑就不能完全地代替这些值，它用实数的大概值来估计浮点数的值。比如7.0有可能被储存为6.99999的<code>float</code>值，过会会讲到更多有关于精确度的知识。</li>\n<li>浮点运算符的优先级通常是比整型运算符要低的，然而用来处理浮点运算的特殊微型处理器已经可用了，这个问题也就得到了解决。</li>\n</ul>\n<p><img src=\"/img/Figure3.3.png\" alt=\"十进制浮点储存方式\"></p>\n<p>现在就让我们研究一下C语言中各种数据类型的特点吧。对于每一种类型，我们会描述如何声明一个变量，如何用变量代表一个常量，还有一些特殊的用法。一些年代较早的C语言编译器可能不能支持下文全部的类型，所以你可以查看一下你的编译器的说明书，看一看哪些数据类型是可用的。</p>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"3-4-1-int类型\"><a href=\"#3-4-1-int类型\" class=\"headerlink\" title=\"3.4.1 int类型\"></a>3.4.1 <code>int</code>类型</h3><p>C语言提供了很多的整数类型，你可能想知道为什么只有一种还不够，答案就是这样C语言就可以让你将特定的变量用在特定的地方。具体来说，C语言的各个整数类型不同在值域的大小与是否含有负数上。<code>int</code>是最基本的整数类型，但是你要是为了满足机器任务的特定需求的话，其他的类型也都是可用的。</p>\n<p><code>int</code>类型是一种有符号的整数类型，有符号意味着<code>int</code>类型的整数可以是正数、也可以是负数，或者是0。<code>int</code>类型的值域是取决于计算机系统的，通常一个<code>int</code>类型的整数的大小就是内存的一个字长。因此，旧版的16位IBMPC适配器，就可以使用16个位来储存整数，也就是从-<strong>32768</strong>到<strong>32767</strong>。现在的个人电脑一般是使用32位的整数大小，在这张结尾的表3.3可以看到一些个例子。现在个人电脑产业也正在向64位处理器发展，那样也就可以使用更大的整数了。ISO&#x2F;ANSI C语言特别指出<code>int</code>的最小范围应该是-<strong>32767</strong>到<strong>32767</strong>，通常系统会专门拿出一个位来保存符号，第十五章描述这种了一般的方法。</p>\n<h4 id=\"3-4-1-1-声明int类型\"><a href=\"#3-4-1-1-声明int类型\" class=\"headerlink\" title=\"3.4.1.1 声明int类型\"></a>3.4.1.1 声明<code>int</code>类型</h4><p>正像你在第二章看到的，关键字<code>int</code>可以用来声明一个基本的整型变量。声明，首先是<code>int</code>，然后是变量的名称，最后是一个分号。要是声明多个变量的话，可以分别声明，也可以用逗号分隔，把一系列的变量名列出来，下面的声明方法都是合法的。</p>\n<p><img src=\"/img/valid_declaration.png\"></p>\n<p>你可能已经使用过分别声明变量的方法了，或者你已经尝试在一行中声明全部的变量了。效果都是一样的：就是对四个<code>int</code>大小的变量分配空间并与变量名相联系。</p>\n<p>这些声明语句创造了变量，但并没有给它们赋值，变量要如何得到值呢？你已经见过两种方法了，第一种是赋值语句</p>\n<p><img src=\"/img/assignments.png\"></p>\n<p>第二，变量也可以使用函数来赋值，比如说<code>scanf</code>函数。<br>现在我们来了解一下第三种方法吧。</p>\n<h4 id=\"3-4-1-2-变量初始化\"><a href=\"#3-4-1-2-变量初始化\" class=\"headerlink\" title=\"3.4.1.2 变量初始化\"></a>3.4.1.2 变量初始化</h4><p>对变量进行<em><strong>初始化</strong></em>也就是给变量赋起始值，或者初值。在C语言中，这可以作为声明的一部分，只需要在变量名后加上赋值运算符还有你想要赋给这个变量的值就可以了。下面是一些例子。</p>\n<p><img src=\"/img/initialization.png\"></p>\n<p>在最后一行，只有<code>cats</code>被初始化了，速读一遍，你有可能觉得dogs也会被赋值为94，所以还是最好避免把未赋值与已赋值的变量放在一行之中吧。</p>\n<p>简单来说，这些声明会为变量创造空间，并为它们贴上变量类型的标签，而且还可以给赋变量起始值。（见图3.4）</p>\n<p><img src=\"/img/DefinenInitial.png\" alt=\"图3.4\"></p>\n<h4 id=\"3-4-1-3-int型常量\"><a href=\"#3-4-1-3-int型常量\" class=\"headerlink\" title=\"3.4.1.3 int型常量\"></a>3.4.1.3 <code>int</code>型常量</h4><p>在上一个例子中各种各样的整数（21、32、14、94等），就是整型常量。当你书写一个没有十进制小数点并且没有指数的数时，C就会将这个数认作整型常量。因此，22与-44都是十进制整型常量，但是<code>22.0</code>与<code>2.2E1</code>就不是。C语言会把大多数整型认作<code>int</code>类型常量。但很大的数会有区别。看最后对于long常量与long long常量的描述就知道了。</p>\n<h4 id=\"3-4-1-4-打印int值\"><a href=\"#3-4-1-4-打印int值\" class=\"headerlink\" title=\"3.4.1.4 打印int值\"></a>3.4.1.4 打印<code>int</code>值</h4><p>你可以使用<code>printf()</code>函数来打印<code>int</code>类型的值，正像你在第二章看到的，%d符号可以在十进制整数被打印出来的地方作为占位符。%d的名称叫格式化符，因为它声明了<code>printf()</code>打印值的类型每一个在格式化字符串中的每一个<code>%d</code>都代表着一个<code>int</code>类型的值，它就在字符串后面的列表中。那个值可以是一个<code>int</code>类型变量代表的，也可以是一个<code>int</code>类型常量代表的，或者任何有<code>int</code>值的表达式。这样，你就有责任让格式化符与之后的列表中的值一致了，编译器并不会报出这种错误。图3.2就表示了一个初始化并且打印变量值，常量的值，还有简单表达式的值的程序，它也提示了你如果你不小心的话会发生什么。</p>\n<p><img src=\"/img/Listing3.2.png\" alt=\"图3.2\"></p>\n<p>编译完运行这个程序的结果是这样的。</p>\n<p><img src=\"/img/result1.png\"></p>\n<p>第一行输出，第一个<code>%d</code>代表着一个<code>int</code>类型变量<code>ten</code>第二个代表着常量2，第三个呈现的是<code>ten</code> - <code>two</code>的值。但第二行，使用的是<code>ten</code>这个变量代替了第一个<code>%d</code>但是之后的值全都是随机的，是从最近的两个内存空间中获取的值！（你回去的值有可能与这里显示的值相差很多，不仅内容不一样，而且不同的编译器对于这些内存区的管理方法也不一样。）</p>\n<p>你有可能对编译器为啥并不会捕捉到这个很明显的错误，还是怪<code>printf()</code>函数的原始设计吧。大多数函数都会获取一个值作为参数，编译器可以检查出来你使用的值是不是恰当，但是<code>printf()</code>可以获取一个、两个、三个或者更多的参数，那就让编译器无法使用常用的错误检测方法了。记住，一定要检查格式化符是不是与被显示的值匹配。</p>\n<h4 id=\"3-4-1-5-八进制与十六进制\"><a href=\"#3-4-1-5-八进制与十六进制\" class=\"headerlink\" title=\"3.4.1.5 八进制与十六进制\"></a>3.4.1.5 八进制与十六进制</h4><p>通常来说，C语言会认为整型常量是十进制数。但是八进制与十六进制也受到许多编程人员的欢迎。因为8与16都是2的幂，但10并不是，这些进制系统有时会为与计算机相关的值的表达提供便利。例如，数字65536经常会出现在16位的机器中，它只是10000的十六进制数，十六进制数中的每一位数都对应着实际的四个位。例如，十六进制数3就对应着0011，5就对应着0101，所以35就对应着0011 0101，53就对应着0101 0011。这种对应就会使十六进制与二进制的转换非常简单。但是电脑是怎么判断10000是什么进制的数字的呢？在C语言中，数字不同的前缀就显示了不同的进制，0x（0X）就意味着你正在使用十六进制值，所以16在十六进制下会被写作0x10或0X10。相似地，前缀0就表示你正在使用的是八进制值。例如，十进制数16在八进制数中就写为020，在15章我们会更加充分地讨论不同的数制。</p>\n<p>要知道的是不同的数制系统是为你提供便利的，它并不会影响数值的储存方式，也就是说，你可以写16、020或者0x10，这个数还是会以二进制的方式储存起来。</p>\n<h4 id=\"3-4-1-6-展示八进制与十六进制数\"><a href=\"#3-4-1-6-展示八进制与十六进制数\" class=\"headerlink\" title=\"3.4.1.6 展示八进制与十六进制数\"></a>3.4.1.6 展示八进制与十六进制数</h4><p>正像C语言能够让你以三种方式书写数字一样，它也可以让你以三种方式的任意一种展示数字。展示一个八进制整数可以使用%o，十六进制使用%x，如果你想显示前缀，你可以使用修饰符#，比如<code>%#o</code>，<code>%#x</code>，<code>%#X</code>，有了它们你就可以在数字前面显示0，0x，0X前缀。图3.3给出了一个小小的例子（想到你有可能必须加上一个<code>getchar()</code>，它会在一些IDE中防止程序立即关闭）。</p>\n<p><img src=\"/img/Listing3.3.png\" alt=\"图3.3\"></p>\n<p>编译运行过后结果是这样的。</p>\n<p><img src=\"/img/result2.png\"></p>\n<p>你可以看到相同的数字被以三种不同的数制打印出来了，<code>printf()</code>函数可以实现这种转化。<br>注意前缀只有加上#时才会出现。</p>\n<h3 id=\"3-4-2-其他整型\"><a href=\"#3-4-2-其他整型\" class=\"headerlink\" title=\"3.4.2 其他整型\"></a>3.4.2 其他整型</h3><p>当你正在学习C语言时，<code>int</code>类型有可能已经满足了你大部分的整型需求了。但为了内容的完整，我们会研究其他的类型。如果你喜欢的话，你可以只大体浏览一下这一部分，然后跳到对于<code>char</code>类型那一部分，然后如果有啥需要的可以再回来复习。</p>\n<p>C语言使用三个形容词关键字来修饰基本整型：<code>short, long, unsigned</code>下面是需要记住的一些点。</p>\n<ul>\n<li><code>short int</code>类型，或者直接<code>short</code>，会比<code>int</code>使用的内存更少，由此也就可以在只使用小的数字的时候节省一些空间。像<code>int</code>一样，<code>short</code>为有符号类型。</li>\n<li><code>long int</code>类型，或者直接写<code>long</code>，占用的内存会比<code>int</code>更多，因此可以让你表示更大范围的数字，像<code>int</code>一样，<code>long</code>为有符号类型。</li>\n<li><code>long long int</code>类型，或者<code>long long</code>（都是在C99标准下被引入的），会比<code>long</code>类型占用的内存更多，也就让你可以使用比<code>long</code>范围更大的数字。像<code>int</code>一样，<code>long long</code>是一个有符号的类型。</li>\n<li><code>unsigned</code>类型，或者写成<code>unsigned</code>，是为非负的变量而设置的，这种类型改变了可储存数字的范围，例如，16位的<code>unsigned int</code>可以表示0-65535的数字，就不是-32768-32767了，用来表示符号的那一位在无符号类型这变成了另一个可以表示数字的位，也就让数字的表示范围扩大了。</li>\n<li><code>unsigned long int</code>类型，或者<code>unsigned long</code>还有<code>unsigned short int</code>，或者<code>unsigned short</code>，在C90标准下都是可以被识别的，在C99标准下又添加了<code>unsigned long long int</code>类型，或者<code>unsigned long long</code>。</li>\n<li>为了让你的意图明显，关键字<code>signed</code>可以被用在任何有符号类型上，例如<code>short</code>, <code>short int</code>, <code>signed short</code>,<code>signed short int</code>都是一种类型。</li>\n</ul>\n<h4 id=\"3-4-2-1-声明其他整型\"><a href=\"#3-4-2-1-声明其他整型\" class=\"headerlink\" title=\"3.4.2.1 声明其他整型\"></a>3.4.2.1 声明其他整型</h4><p>其他整型与<code>int</code>类型的声明方式是相似的，<br>下面就展示了一些例子。<br>并不是所有的编译器都能识别最后三种类型，最后一个例子是C99标准新加进去的。</p>\n<p><img src=\"/img/othertypes.png\" alt=\"其他整型\"></p>\n<h4 id=\"3-4-2-2-为什么要用多种整型？\"><a href=\"#3-4-2-2-为什么要用多种整型？\" class=\"headerlink\" title=\"3.4.2.2 为什么要用多种整型？\"></a>3.4.2.2 为什么要用多种整型？</h4><p>为什么说<code>long</code>与<code>short</code>与<code>int</code>相比会使用不同的内存呢？因为C语言会确保<code>short</code>不会长过<code>int</code>，<code>int</code>也不会长过<code>long</code>，主要的目的就是为了适应不同类型的机器。例如在运行着Windows 3.1的IBM PC上，<code>int</code>与<code>short</code>都是16位的，而<code>long</code>是32位的，而在Mactonish Power PC上，<code>short</code>类型是16位的，而<code>int</code>和<code>long</code>类型是32位的。PowerPC G3&#x2F;G4中的Pentium芯片的字长是32位，因为这就可以让整型超过20亿（见表3.3），C语言在处理器&#x2F;操作系统的实现没有必要超出这个数值。因此，<code>long</code>与<code>int</code>大小是一样的。对于许多的使用过程，那个大小的整数是不需要的，所以节省内存的<code>short</code>就被创造了。但另一方面，原本的IBM PC只有16位的字长，那就意味着需要更长的<code>long</code>类型。</p>\n<p>现在64位的处理器都变得很常见了，比如IBM Itantium，AMD Opteron，还有PowerPC G5。因为64位整型的需要，<code>long long</code>类型也就应运而生。</p>\n<p>现在最常见的实践是把<code>long long</code>设置为64位，把<code>long</code>设置为32位，把<code>short</code>设置为16位，把<code>int</code>设置为16位或者32位，它的大小取决于电脑的自然字长。原则上，这四种类型可以代表四种不同的大小。</p>\n<p>C语言标准为确定每一种基本数据类型的最小尺寸提供了指引。<code>short</code>与<code>int</code>的最小范围是从-32,767到32,767，对应着16位的单元，而<code>long</code>类型的最小范围是-2,147,483,647到2,147,483,647，对应着32位的单元。（注意，为了易读，我们使用了逗号分开，但是C语言代码是不能写成这样的）。对于<code>unsigned short</code>与<code>unsigned int</code>，最小的范围是0到65535，而<code>unsigned long</code>的最小范围是0-4,294,967,295&#x2F;,<code>long long</code>类型为了迎合64位的需求，它的最小范围很大，是-9,223,372,036,854,775,807到9,223,372,036,854,775,807，而<code>unsigned long long</code>就是0到18,446,744,073,709,551,615.（对于那些检查写的对不对的人，下面是它的英文表示，但是谁要计数呢？）</p>\n<p><img src=\"/img/nonsense.png\" alt=\"(一脸认真)\"></p>\n<p>你会在什么时候使用这些不同的<code>int</code>类型呢？第一，考虑<code>unsigned</code>类型，使用它们计数是很好的，因为你不需要负数，而且<code>unsigned</code>类型比<code>signed</code>类型的范围更大，可以得到更大的整数范围。</p>\n<p>如果你需要处理超过了<code>int</code>类型的范围的数字，使用<code>long</code>类型，但是在<code>long</code>比<code>int</code>长的系统中，使用<code>long</code>会让计算变慢，所以没必要的话就不要用<code>long</code>，进一步说，如果你正在一个<code>int</code>与<code>long</code>类型长度一样的系统上写代码，而你又需要32位的整数，你就需要使用<code>long</code>而不是<code>int</code>了，那样程序才可以在转到16位机的时候正常运转。</p>\n<p>相似地，如果你需要64位整型数的时候就使用<code>long long</code>吧，一些电脑已经使用着64位的处理器，而且并且正在服务器、工作站甚至桌面的64位处理也正在变得越来越普遍。</p>\n<p>如果你需要节省内存空间的话，使用<code>short</code>来节省内存空间，比如如果你在一台<code>int</code>类型是32位的机器上，需要16位的值这种情况。通常只有当你的程序使用整型数组这种与系统的可用内存极其相关的情况下节省内存才是必须的。另一个使用<code>short</code>的原因是它有可能与被电脑的特定部分使用的硬件寄存器的大小相同。</p>\n<blockquote>\n<p><img src=\"/img/overflow.png\"><br>整型溢出。<br>当一个整型相对于它的类型太大了会怎么样呢？让我们把一个整型变量设置到它可能的最大值，并用它加一些数，看看会发生什么。<code>unsigned</code>与<code>\tsigned</code>类型都可以试试（<code>unsigned int</code>的格式化符是<code>%u</code>）<br>这就是系统给出的结果<br><img src=\"/img/flowresult.png\"><br><code>unsigned</code>类型好像汽车的里程计一样，当它到达了最大值，它就会返回到它的最小值，变量i也很相似，主要的区别是<code>unsigned</code>类型的<code>j</code>\t是以0开始的，但是<code>int</code>类型的<code>i</code>是以-2147483647开始的。<br>注意的是，你如果没有被告诉这个数据已经溢出了，你还是会不断地在这个问题上打转。<br>这里描述的行为是由C语言<code>unsigned</code>类型的规范控制的，标准并不规定<code>signed</code>应该行为如何，这里展示的行为也是通常会发生的，但是你以后会找到不一样的东西的。</p>\n</blockquote>\n<h4 id=\"3-4-2-3-long常量与long-long常量\"><a href=\"#3-4-2-3-long常量与long-long常量\" class=\"headerlink\" title=\"3.4.2.3 long常量与long long常量\"></a>3.4.2.3 <code>long</code>常量与<code>long long</code>常量</h4><p>一般地，当你在代码中使用2345这样的数字时，它会被储存为一个<code>int</code>类型的常量。那么如果你使用1000000这样不能被<code>int</code>储存下来的数字呢？编译器就会将它识别为<code>long int</code>，如果认为这个类型已经足够大了的话。如果比<code>long</code>类型的最大值还要大的话，C语言会将它当做<code>unsigned long</code>类型，如果那还不够的话，它就会把它当做<code>long long</code>类型或者<code>unsigned long long</code>，如果这些类型可以满足要求的话。</p>\n<p>八进制与十六进制的常量会被认作<code>int</code>类型，除非这个值太大，然后还是以上文的顺序依次递加。</p>\n<p>有些时候你有可能想让编译器把一个小点的数储存为<code>long</code>类型。如果你在编程的过程中需要外显地使用内存地址，例如在IBM PC上，就有可能有这样的问题。而且，一些基本的C语言函数是需要<code>long</code>类型的值的，你可以在数值加上后缀<code>l</code>或者<code>L</code>，第二种方式更好，因为看起来不像数字<code>1</code>。因此，一个有着16位大小的<code>int</code>与32位大小的<code>long</code>，会将<code>7</code>这个数储存在16位中，而将<code>7L</code>储存为32位中，而且这两个后缀对于八进制与十六进制都是适用的，像是020L与0x10L。</p>\n<p>相似地，在那些有<code>long long</code>类型的系统中，你就可以使用<code>ll</code>或者<code>LL</code>后缀，比如<code>3LL</code>，而且还可以使用<code>u</code>或者<code>U</code>来表示<code>unsigned long long</code>类型，就像<code>5ull</code>或者<code>10LLU</code>或者<code>9Ull</code>。</p>\n<h4 id=\"3-4-2-4-打印short-long-long-long与unsigned类型\"><a href=\"#3-4-2-4-打印short-long-long-long与unsigned类型\" class=\"headerlink\" title=\"3.4.2.4 打印short, long, long long与unsigned类型\"></a>3.4.2.4 打印<code>short, long, long long</code>与<code>unsigned</code>类型</h4><p>要打印一个<code>unsigned int</code>类型的数字，只需使用<code>%u</code>符号，<code>long</code>类型可以使用<code>%ld</code>，但如果你的机器中<code>int</code>与<code>long</code>是大小一致的，那<code>%d</code>就可以了，但是代码有可能在别的系统中就不能正常运作了，所以对<code>long</code>来说最好还是使用<code>%ld</code>吧，对于<code>x</code>与<code>o</code>都可以在前面加上<code>l</code>。因此对于十六进制的<code>long</code>类型数你会使用<code>%lx</code>，类似在八进制会使用<code>%lo</code>，需要注意的是即时C语言提供了大写的<code>L</code>后缀，但是在格式化符中，只能使用小写。</p>\n<p>C语言有几种额外的<code>printf()</code>格式，首先，你可以在使用<code>short</code>类型时在<code>%d</code>的<code>d</code>前加<code>h</code>来表示十进制的<code>short</code>整型，同理<code>%ho</code>也是可以的，而且<code>h</code>与<code>l</code>是可以再加上<code>u</code>表示无符号的。例如，你会使用<code>%lu</code>符号表示<code>unsigned long</code>类型，图3.4就提供了一个例子。支持<code>long long</code>的系统也可以使用<code>%lld</code>或者<code>%llu</code>分别表示有符号与无符号的<code>long long</code>整型，第四章会对格式化符进行更充分的阐述。</p>\n<p><img src=\"/img/Listing3.4.png\" alt=\"图3.4\"></p>\n<p>这是系统的输出：</p>\n<p><img src=\"/img/result3.png\"></p>\n<p>这个例子就显示出了使用错误的格式化符会有意想不到的后果。第一，注意到对于变量<code>un</code>使用的<code>%d</code>格式化符结果输出了一个负值，原因就是无符号与有符号数实际上是以相同的二进制排列被储存起来的（第15张会更详细地谈论这种属性），所以如果你告诉<code>printf()</code>函数这个数是没有符号的，与告诉它这个数是有符号的输出结果是不一样的。这种行为常会在你输入一个超限的数值时出现。小的整数，在两种格式化符之下都是一样的。</p>\n<p>第二，注意到无论你告诉<code>printf()</code>是<code>short</code>还是<code>int</code>类型，<code>short</code>变量<code>end</code>都是可以打印出正常值的。这就是因为当向函数输入一个参数的时候会自动将它转化为<code>int</code>类型，那么你就会问了:1.为什么这种转化会发生？2.<code>h</code>修饰符的用处在哪里？第一个问题的答案是<code>int</code>类型可以被电脑更加高效地处理。所以在<code>short</code>与<code>int</code>类型大小不同的机器上，有可能传递一个<code>int</code>值会更快。第二个问题的答案是你可以看看一个更加长的整型数如果被缩短为<code>short</code>类型了会看起来怎样。第三行的输出也为这一点提供了例证，当65537被写为32位二进制数时，它看起来是<code>00000000000000010000000000000001</code>这样子的，使用<code>%hd</code>格式化符会迫使<code>printf()</code>只看向最后的16个位，因此它会只打印<code>1</code>，相似的，最后一行的<code>verybig</code>使用<code>%ld</code>就会只看向最后的32位，而不是完全的位数。</p>\n<p>早些时候你已经了解标识符的数量与显示数字的数量匹配的重要性了，现下你也知晓了标识符的种类也要匹配。</p>\n<p><img src=\"/img/matchup.png\"></p>\n<p>匹配<code>printf()</code>函数的格式化符<br>记着要去检查一下你是不是对于每一个要在<code>printf()</code>中打印的值都给予了一个格式化符，并检查是不是每一个的格式化符都与显示的值的类型相互对应。</p>\n<h3 id=\"3-4-3-字符-char\"><a href=\"#3-4-3-字符-char\" class=\"headerlink\" title=\"3.4.3 字符 char\"></a>3.4.3 字符 char</h3><p><code>char</code>类型是用来储存像字母、标点符号这样的字符的，但是严格来讲它其实是一个整数类型。为什么？<code>char</code>这个类型实际上储存的是整数而不是字符，为了处理字符，电脑会使用数字编码来让某一个整数代表某一个字符。在美国最常用的字符编码表是ASCII编码表，它已经在书的前封的背面给出来了，是这本书使用的编码表。举些例子，<code>65</code>在ASCII码表中代表的是大写的<code>A</code>，所以如果需要储存字母<code>A</code>，只需要储存数字<code>65</code>即可，（许多IBM主机用的是不一样的编码系统，它叫做EBCDIC，但是准则都是一样的。但在美国以外的计算机系统使用的编码表有可能是完全不同的。）</p>\n<p>基础的ASCII码是从0到127的，这个范围小到一个字节就可以保存下来，<code>char</code>类型通常会被定义成8位的内存单元，所以它不仅仅可以储存下来基础的ASCII码。许多系统，如IBM PC与苹果公司的Macintosh，可以提供更大的ASCII码表（这两个系统是不一样的），但是还是在8位范围之内。更加普遍的，C语言会确保<code>char</code>类型的大小是足够储存系统中C语言实现的需要的基础字符的。</p>\n<p>许多的字符集会有不只127而是255分值，例如日本的kanji字符集，商业的Unicode协议为代表全世界的各种字符创造了一个系统，现在已经有96000个字符了。ISO（国际标准组织）与IEC（国际电子委员会）为字符集创造了ISO&#x2F;IEC10646标准。幸运的是，Unicode标准与ISO&#x2F;IEC10646标准是始终协调的。</p>\n<p>使用这些字符集的平台有可能会使用16位或者32位的<code>char</code>类型代表，C语言定义下<code>char</code>的长度是1个字节，现在在C语言的记录中，一个字节会是16位或者32位，而不是那些系统上的8位。</p>\n<h4 id=\"3-4-3-1-定义char类型变量\"><a href=\"#3-4-3-1-定义char类型变量\" class=\"headerlink\" title=\"3.4.3.1 定义char类型变量\"></a>3.4.3.1 定义<code>char</code>类型变量</h4><p>正像你会期望的，<code>char</code>类型变量与其他变量的定义方式相同，这里就是一些例子。</p>\n<p><img src=\"/img/chardef.png\"></p>\n<p>这几行代码创造了三个<code>char</code>类型的变量：<code>response</code>，<code>itable</code>与<code>latan</code>。</p>\n<h4 id=\"3-4-3-2-字符常量及其初始化\"><a href=\"#3-4-3-2-字符常量及其初始化\" class=\"headerlink\" title=\"3.4.3.2 字符常量及其初始化\"></a>3.4.3.2 字符常量及其初始化</h4><p>假定你想要初始化一个字符常量为大写字母A，电脑语言是要让事情变得简单起来的，你不需要记忆ASCII码，你也不会，你可以直接以下面的方式给<code>grade</code>变量赋值<code>&#39;A&#39;</code></p>\n<p><img src=\"/img/charassign.png\"></p>\n<p>被双单引号框定的单一字符就是C语言中的<em><strong>字符常量</strong></em>，当编译器看到了<code>&#39;A&#39;</code>，它会将A字符转化成相应的字符编码值，单引号是必须的，下面就是例子。</p>\n<p><img src=\"/img/chardeclare.png\"></p>\n<p>如果你遗漏了引号，那么编译器就会认为<code>T</code>是一个变量名，如果你使用双引号的话，它会认为你正在使用字符串，我们会在第四章讲解字符串。</p>\n<p>因为字符确实是以数字的形式被储存起来的，你还是可以使用数字编码为<code>char</code>类型变量赋值。</p>\n<p><img src=\"/img/numassign.png\"></p>\n<p>在这个例子中<code>65</code>是一个<code>int</code>类型的，但是因为这个值是小于最大的<code>char</code>类型值的，所以可以无误地赋给<code>grade</code>变量，因为65对应着ASCII码中的字母<code>A</code>，所以<code>A</code>就被赋给了<code>grade</code>变量。但注意，这个例子只是为了表示系统用的是ASCII码系统，但用<code>65</code>与<code>&#39;A&#39;</code>都是一样的，因此，使用字符常量要比使用数字编码是要好的。</p>\n<p>有点奇怪的是，C语言会将字符常量当做<code>int</code>类型常量而不是<code>char</code>来看待。例如，在32位使用ASCII字符编码，<code>char</code>类型为8位的系统中，这一行代码：</p>\n<p><img src=\"/img/gradeb.png\"></p>\n<p>就会将<code>&#39;B&#39;</code>呈现为66这个值储存起来，但是<code>grade</code>是以8位单元储存的66，这种特点就会使字符常量不能存放多个字符，像<code>&#39;FATE&#39;</code>这样，因为4个单独的ASCII码被储存在32位的单元中，但是试图将这样一个字符常量赋给<code>char</code>类型变量会导致只有最后的8位被使用，也就是变量被赋给的是<code>&#39;E&#39;</code>。</p>\n<h4 id=\"3-4-3-3-不会被打印出来的字符\"><a href=\"#3-4-3-3-不会被打印出来的字符\" class=\"headerlink\" title=\"3.4.3.3 不会被打印出来的字符\"></a>3.4.3.3 不会被打印出来的字符</h4><p>单引号对符号、数字还有标点符号都是适用的，但是如果你浏览过这本书前封里的那张表，你会看到一些ASCII字符是打印不出来的。例如，一些代表着回车或者跳到下一行，又或是会让终止铃响的符号，这些符号是怎么被表示的呢？C语言提供了三种方法：</p>\n<p>第一种方法就是我们已经提到过的，使用ASCII表编码的方法。例如，蜂鸣符对应的值就是7，所以你可以这样写。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> beep = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n\n<p>表示这些字符的第二种方法是使用特殊的符号序列，它们叫做<em><strong>转义序列</strong></em>，表3.2给出了转义序列与它们的含义。</p>\n<p><img src=\"/img/Table3.2\" alt=\"表3.2\"></p>\n<p>在赋值给字符常量的时候，转义序列必须要由单引号框定，例如，你可以这样赋值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> nerf = <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后打印变量<code>nerf</code>，打印器或者屏幕上的行就会往前一行（回车）。</p>\n<p>现在我们可以看看每一个转义序列是做什么的，警告符<code>\\a</code>是在C90标准中添加的，它会生成一条有声有色的警告，警告的类型因硬件而定，一般蜂鸣声是最常见的（在有些系统中，警告符是没有用的。）ANSI标准规定了警告符是不能改变活跃位置的。活跃位置这个概念指的是在显示设备（如屏幕、电报机、打印机等等）上下一个字符会出现的地方。简单来说，它就是屏幕上你已经用惯了的光标的总称。在程序中使用警告符最终只会发出蜂鸣声，但并不会移动屏幕上的光标。</p>\n<p>然后，是<code>\\b, \\f, \\n, \\r, \\t</code>还有<code>\\v</code>这些转义序列，它们都是常见的输出设备的控制符，它们在影响活跃位置上很出色，回车(<code>\\b</code>)，会将活跃位置往前挪一个空格。换页符(<code>\\f</code>)会将活跃位置转移到下一页的开头。换行符(<code>\\n</code>)会将活跃位置切换到下一行的开始，(<code>\\r</code>)，回车符(<code>\\r</code>)会让活跃位置回到一行的开头位置，水平制表符(<code>\\t</code>)会将活跃位置向右移动一个<code>Tab</code>键的位置（通常，这些是以字符位置1、9、17、25这样的格式），垂直制表符(<code>\\v</code>)，会让活跃位置移动到下一个垂向的<code>tab</code>位置。</p>\n<p>这些转义序列并不一定在所有的显示设备中起作用。例如，换页符与垂直制表符在电脑屏幕上只会打印出来一个奇怪的字符，并没有任何光标的移动。但是如果在打印机上使用就可以按照描述工作了。</p>\n<p>最后的三个转义序列（<code>\\\\, \\&#39;, \\&quot;</code>），能够以字符常量的形式让你使用<code>\\, &#39;, &quot;</code>（因为这些符号是作为<code>printf()</code>函数的一部分用来定义字符常量的，如果你要把它们字面上打印出来，那将会非常令编译器困惑。）假设你想要打印下来下面的这一行字。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gramps sez, <span class=\"string\">&quot;a \\ is a backslash.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>就需要用下面代码的形式来写。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Gramps sez, \\&quot; a \\\\ is a backslash.\\&quot;\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>最后的两种形式（<code>\\0oo, \\xhh</code>）是ASCII码的特殊标识，是要以八进制ASCII码的形式来代表字符，在前面需要加上<code>\\</code>然后用单引号来框定整个字符，例如，如果你的编译器不能识别警告符，你就可以使用下面的ASCII码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beep = <span class=\"string\">&#x27;\\007&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以省略前面的0，所以<code>&#39;\\07&#39;</code>与<code>&#39;\\7&#39;</code>都是可以的。这个符号会让数字被理解成八进制，尽管前面没有0。</p>\n<p>从C90开始，C语言提供了第三种选择，使用十六进制的字符常量，这样说来，斜杠后面是<code>x</code>或者<code>X</code>与1到3位的十六进制数。例如，Ctrl+P符号在ASCII十六进制符码里就是10（十进制下就是16），所以它是可以被表达为<code>&#39;\\x10&#39;</code>或者<code>\\&#39;x010&#39;</code>的，图3.5展示了一些整型的代表。</p>\n<p><img src=\"/img/Figure3.5.png\" alt=\"图3.5\"></p>\n<p>当你使用ASCII码的时候，要注意数字与字符之间的差异。例如，字符4在ASCII中的值是52,<code>&#39;4&#39;</code>是一个符号而不是一个数字。</p>\n<p>现下，你可能有这几个问题：</p>\n<ul>\n<li><em><strong>为什么转义序列在最后一个例子中没有用单引号括起来？</strong></em><br>（<em><strong>最后一个例子<code>printf(&quot;Gramps sez, \\&quot; a \\\\ is a backslash.\\&quot;\\n&quot;);</code><em><strong>）。<br>  只要是一个字符，不管它是不是转义字符，当它是字符串的一部分的时候，都是需要用双引号框起来的，而不是单引号，但单个字符是无一例外由单引号括起来的。由双引号括起来的是</strong></em>字符串</strong></em>。（第四章会讲到）相似地，不属于转义字符的数字会被当做一般字符打印出来（如<code>printf(&quot;Hello!7\\n&quot;);</code>打印出来的是<code>Hello7</code>，但<code>printf(&quot;Hello!\\007&quot;);</code>输出的是一行<code>Hello！</code>加上一声警告）。</li>\n<li><em><strong>我应该什么时候使用转义序列？什么时候使用对应的ASCII码？</strong></em><br>  如果你需要使用其中一个转义序列，比如说<code>&#39;\\f&#39;</code>，或者作为替代的<code>&#39;\\014&#39;</code>，最好使用前者。首先，这种表示方法更容易记忆：其次，它更容易在机器之间转移，如果其他系统不适用ASCII码，<code>&#39;\\f&#39;</code>还是可以使用。</li>\n<li>如果我需要使用数字变啊，为什么使用的是<code>&#39;\\032&#39;</code>而不是<code>032</code>？<br>  第一，使用转义字符的方式会让阅读你代码的人轻松地知道这是一个字符编码。第二，如<code>\\037</code>这样的转义序列是可以内嵌于C语言字符串的（？[就像<code>\\007</code>一样])。</li>\n</ul>\n<h4 id=\"3-4-3-4-打印字符\"><a href=\"#3-4-3-4-打印字符\" class=\"headerlink\" title=\"3.4.3.4 打印字符\"></a>3.4.3.4 打印字符</h4><p><code>printf()</code>函数可以使用格式化符<code>%c</code>表示一个字符将要在这个位置被打印。你想到字符常量是1位的整型值，因此你也可以用<code>%d</code>符号，那样的话你就会得到一个整数，<code>%c</code>格式化符会告诉<code>printf()</code>函数来打印那个编码值对应的字符，例3.5就以两种方式展示了<code>char</code>类型变量。</p>\n<p><img src=\"/img/Listing3.5.png\" alt=\"例3.5\"></p>\n<p>尝试运行，输出是这样的。</p>\n<p><img src=\"/img/C67.png\"></p>\n<p>当你使用程序的时候，不要忘记在写完了字符之后按下回车键。<code>scanf</code>函数会接收你写下的字符，然后取地址符(<code>&amp;</code>)会将字符赋给字符变量<code>ch</code>。接下来，<code>printf()</code>函数会打印两次<code>ch</code>这个变量，第一次是以字符的形式打印的（使用<code>%c</code>格式化符的效果），第二次是以十进制整数的形式（同理，<code>%d</code>的效果）。需要注意，<code>printf()</code>的标识符会决定数据被如何呈现，呈现方式与数据的储存方式没有关系。</p>\n<p><img src=\"/img/Figure3.6.png\" alt=\"数据储存与输出\"></p>\n<h4 id=\"3-4-3-5-有符号还是无符号？\"><a href=\"#3-4-3-5-有符号还是无符号？\" class=\"headerlink\" title=\"3.4.3.5 有符号还是无符号？\"></a>3.4.3.5 有符号还是无符号？</h4><p>有的C语言实现里会使<code>char</code>是一个有符号的类型，那也就意味着<code>char</code>可以接受从-128到127的值。其他的C语言实现会让<code>char</code>是一个无符号的类型，那么它的范围就变成了0到255，你的编译器的使用手册应该会告诉你<code>char</code>是什么类型，或者你可以看看<code>limits.h</code>头文件，下一章会讲述。</p>\n<p>在C90标准下，C语言允许你使用关键字<code>unsigned</code>与<code>signed</code>来修饰<code>char</code>，那样的话不管原本的<code>char</code>是有符号还是无符号。你都可以任意变化它们的类型。它们在处理小范围的十进制整数时是很有用的。要是只是为了使用字符，只使用<code>char</code>就可以了。</p>\n<h3 id=\"3-4-4-Bool类型\"><a href=\"#3-4-4-Bool类型\" class=\"headerlink\" title=\"3.4.4 _Bool类型\"></a>3.4.4 <code>_Bool</code>类型</h3><p><code>_Bool</code>类型是C99标准添加的，它们是被用来代表布尔值的，也就是逻辑上的<code>true</code>与<code>false</code>。因为C语言是使用0表示<code>false</code>，用1表示<code>true</code>的，所以布尔类型实际上只是一个整型，但是只需要一位的内存，因为要储存0与1一位就足够了。</p>\n<p>程序会使用布尔值来选择下一步运行哪个代码，代码执行会在第六章（C语言控制语句：循环）与第七章（C语言控制语句：分支结构与跳跃结构）更详细地讲到，所以我们到那个时候再讨论这个问题。</p>\n<h3 id=\"3-4-5-可转移的类型：inttypes-h\"><a href=\"#3-4-5-可转移的类型：inttypes-h\" class=\"headerlink\" title=\"3.4.5 可转移的类型：inttypes.h\"></a>3.4.5 可转移的类型：<code>inttypes.h</code></h3><p>还有更多的整数类型吗？没有了，但是还有更多你可以使用与已经存在的类型的名字。你或许会认为你已经看到的整型名已经很多了，但是原本的名字确实存在问题。知晓一个变量是<code>int</code>并不会让你了解它会占用多少内存，除非你检查了系统的描述文件。为了解决这个问题，<code>int16_t</code>可以声明一个16位的有符号整型，<code>uint32_t</code>声明了一个32位的无符号类型。</p>\n<p>要让这些名字可用，你需要包含一个<code>inttypes.h</code>头文件（注意在这一版时候已经有了，但是一些编译器上还不支持这个功能），这个文件使用了<code>typedef</code>（第一次讲到是在第五章：运算符、表达式与语句），来创造新的类型名。例如，它会让<code>uint32_t</code>成为基本类型的一种别名或者同义替换，有可能是<code>unsigned int</code>也有可能是<code>unsigned long</code>。你的编译器会提供一个与你的计算机系统协调的头文件，这些新的设计被称为<em><strong>精确长度类型</strong></em>，例如，<code>int_least8_t</code>会是最小的类型，它可以承载8位的有符号整型值。如果某个系统上最小的类型是8位的。<code>int8_t</code>类型是不会被定义的，但<code>int_least8_int</code>是可以被定义的，或许会被实现为16位的整型。</p>\n<p>当然，一些编程人员会更关心速度而不是空间。对于它们，C99定义了允许快速计算的一系列类型，它们被称为<em><strong>最快最小长度类型</strong></em>，例如，<code>int_fast8_t</code>会被定义为你的系统上能够最快运算的8位有符号值。</p>\n<p>最后，对于其他的编程人员，只有系统上最大的一些整型才有用，<code>intmax_t</code>就代表了那种类型，它可以储存任何合法的有符号整型值，同样，<code>uintmax_t</code>会代表可用的最大的无符号类型。这些类型有时是比<code>long long</code>或者<code>unsigned long</code>还要长的，因为C语言实现是准许定义超过需要的类型的。</p>\n<p>C99不仅提供了这些新的而且可运输的类型名，它还有有利于输入输出的符号表示。比如说，<code>printf()</code>对于每一种类型都需要特别的修饰符，所以你要打印<code>int32</code>，你要使用的是<code>%d</code>还是<code>%ld</code>？不同的机器的标识符并不一样，但没问题，C99标准下是有字符串宏命令来打印这些值的，我们会在第四章详细讲述的。例如，<code>inttype.h</code>头文件会将字符中的<code>PRId16</code>作为对于不同对应的类型的合适的格式化符。（例如hd（<code>short</code>）或者d），例3.6是一个讲述了如何使用可运输类型与相对应的格式化符的简单的例子。</p>\n<p><img src=\"/img/Listing3.6.png\" alt=\"例3.6\"></p>\n<p>在最后的<code>printf</code>语句中，<code>PRId16</code>被<code>inttypes.h</code>对<code>hd</code>的类型定义替换了，把这一行代码变成了这个样子。</p>\n<p><img src=\"/img/turning1.png\"></p>\n<p>但是C语言需要连贯的字符串，所以引号需要是连续的，然后这一行就变成了这个样子。</p>\n<p><img src=\"/img/turning2.png\"></p>\n<p>这就是输出，注意这个例子也使用了<code>\\&quot;</code>转义字符来打印双引号。</p>\n<p><img src=\"/img/out3.png\"></p>\n<p>参考单元VI“更多的整型”提供了<code>inttypes.h</code>头文件添加的内容的完整解释，也列举了所有的格式化宏。</p>\n<p><img src=\"/img/C99sup.png\"><br>【C99支持】<br>编译器供应商已经开始以不同的速度与顺序开始实现C99的新特性了，但在这本书出来的时候，一些编译器还没有实现<code>inttypes.h</code>的头文件与特征。</p>\n<h3 id=\"3-4-6-float-double与long-double类型\"><a href=\"#3-4-6-float-double与long-double类型\" class=\"headerlink\" title=\"3.4.6 float, double与long double类型\"></a>3.4.6 <code>float, double</code>与<code>long double</code>类型</h3><p>对于大多数的软件开发项目来说，这些多种多样的整型已经能够很好地满足要求了。但是，对于财务或者面向数学的程序，我们通常会使用<em><strong>浮点数值</strong></em>，在C语言中，这些数字就对应着<code>float, double, long double</code>这几种类型，对应着FORTRAN与Pascal语言中的<code>real</code>类型。使用浮点数，正像上文所说，能够让你呈现更大范围的数字。包括十进制小数值。浮点数值的表示与<em><strong>科学计数法</strong></em>是很相似的，那是科学家用来表示非常大或者非常小的数字的一种体系。</p>\n<p>在科学计数法中，数字会被表示成十进制数乘10的整数幂，这里就是一些例子。</p>\n<p><img src=\"/img/sciennotation.png\"></p>\n<p>第一列是通常的表示方法，第二列是科学计数法的表示，第三列是质数的表示方法，或者说是<em><strong>e - notation（e表示法）</strong></em>，通常是给计算机或者计算机写的，在e的后面是10的指数，图3.7展示了更多的浮点表示法。</p>\n<p>C语言标准规定了<code>float</code>类型应该至少能够代表6位有效数字并且范围在10的-37次方到37次方。第一个要求的意思是，比如一个<code>float</code>必须要精确地表示至少前六位有效数字，就像33.333333。如果你喜欢使用较大或者较小数字（2.0e30（太阳质量）或1.6e-19（元电荷））的话，第二条要求会为你提供方便。通常，系统会使用32位类储存一个浮点类型的数字，8位用来给予指数值与符号，24位来表示非指数部分，叫尾数或者有效数字与它的符号。</p>\n<p><img src=\"/img/Figure3.7.png\" alt=\"一些浮点数表示\"></p>\n<p>C语言也有一个<code>double</code>（双（double）精度）浮点型，<code>double</code>类型与<code>float</code>类型需要的最小值是一样的，但是它把最小值的有效数字位数拓展到了10位。通常的<code>double</code>表示会使用64位而不是32位，一些系统会使用32个位来表示非指数部分，这也就增加了数字有效的有效数字位数，减少了取整错误。其他的系统会使用一些位储存更大的指数，这也就增加了可以容纳数字的范围。每一张方法都至少有13位的有效数字，不只能满足最小标准的要求。</p>\n<p>C语言还允许你使用一种浮点类型：<code>long double</code>，目的就是进一步增加<code>double</code>类型的准确度。但是C语言只保证<code>long double</code>至少与<code>double</code>类型的精度是一样的。</p>\n<h4 id=\"3-4-6-1-声明浮点变量\"><a href=\"#3-4-6-1-声明浮点变量\" class=\"headerlink\" title=\"3.4.6.1 声明浮点变量\"></a>3.4.6.1 声明浮点变量</h4><p>浮点变量与它们的整型兄弟的声明与定义的方式相似，这里是一些例子，</p>\n<p><img src=\"/img/floatdeclare.png\"></p>\n<h4 id=\"3-4-6-2-浮点常量\"><a href=\"#3-4-6-2-浮点常量\" class=\"headerlink\" title=\"3.4.6.2 浮点常量\"></a>3.4.6.2 浮点常量</h4><p>当你书写一个浮点常量时，你会有很多的选择，形式是很多，有符号的一串数字。包括十进制的小数点，或是由e或者E跟着的10的指数。这里是两个合法的声明浮点类型的例子。。</p>\n<p><img src=\"/img/twoexam.png\"></p>\n<p>你可以遗漏正号，没有关系（2E5）或者可以遗漏指数部分（19.28），但是并不能同时存在。你可以遗漏小数部分或者整数部分，但也不能全都没有（那也不剩什么了。）下面是更多的合法的浮点常量。</p>\n<p><img src=\"/img/morevalid.png\"></p>\n<p>在使用浮点常量的时候，不要乱添加空格。</p>\n<p><img src=\"/img/nospaces.png\" alt=\"错的\"></p>\n<p>一般来说，编译器会认为浮点常量都是<code>double</code>精度的，假设<code>some</code>是一个<code>float</code>类型的变量，并且你有下面的一行代码。</p>\n<p><img src=\"/img/codeline.png\"></p>\n<p><code>4.0</code>与<code>2.0</code>都是以<code>double</code>类型储存起来的，一般每一个使用64位，结果是使用浮点运算获得的，而且只有结果转换成了正常的<code>float</code>大小范围内才可以使用<code>float</code>。这也就为运算提供了准确度，但是会让你的程序变慢。</p>\n<p>C语言还是你能够超越默认方法，你可以使用f或者F后缀来让编译器把一个浮点常量储存为<code>float</code>类型，比如<code>2.3f</code>与<code>9.11E9F</code>还有<code>l</code>或者<code>L</code>后缀，可以储存为<code>long double</code>类型，例如<code>54.3l</code>，<code>4.23e4L</code>。注意的是，比起<code>l</code>，<code>L</code>更不容易被看成<code>1</code>，如果浮点数没有后缀，它的类型就是<code>double</code>。</p>\n<p>C99添加了表示浮点数的另一种方式，它是使用十六进制来表达的（0x或者0X加上十六进制数）。那样指数就是<code>p</code>或者<code>P</code>而不是<code>e</code>或者<code>E</code>了，指数是2的，也不再是10的了。这就是数字看起来的样子。</p>\n<p><img src=\"/img/lookslike.png\"></p>\n<p><code>a</code>是十进制的10，<code>.1f</code>是1&#x2F;16加上15&#x2F;256，然后<code>p10</code>是2的10次方，或者1024，用十进制表示这就是10364.0。</p>\n<p>并不是所有的编译器都已经支持C99的特性了。</p>\n<h4 id=\"3-4-6-3-打印浮点数值\"><a href=\"#3-4-6-3-打印浮点数值\" class=\"headerlink\" title=\"3.4.6.3 打印浮点数值\"></a>3.4.6.3 打印浮点数值</h4><p><code>printf()</code>函数会使用<code>%f</code>格式化符来打印<code>float</code>与<code>double</code>类型的数值，这个符号使用的是十进制小数符的表示方法，还可以使用<code>%e</code>来使用指数表示法来打印它们，如果你的系统支持C99中提供的小数的十六进制格式，你就可以使用<code>a</code>或者<code>A</code>代替<code>e</code>与<code>E</code>。<code>long double</code>类型是以<code>%Lf</code>或者<code>%Le</code>与<code>%La</code>标识符来分别使用这三种方式的。需要注意的是，<code>float</code>与<code>double</code>都可以使用<code>%f, %e, %a</code>标识符来输出。这是因为当一个<code>float</code>类型的变量作为语句传递到任何函数时，C语言会自动把它转化成<code>double</code>类型，而不是它本来的类型，比如说<code>printf()</code>函数就是一个例子。例3.7说明了这种行为。</p>\n<p><img src=\"/img/Listing3.7\" alt=\"例3.7\"></p>\n<p>这里是输出：</p>\n<p><img src=\"/img/out1.png\"></p>\n<p>这个例子说给出了默认的输出，下一章会讨论如何通过设置输出域长度与十进制的位权数，控制输出的外形。</p>\n<h4 id=\"3-4-6-4-浮点上溢与下溢\"><a href=\"#3-4-6-4-浮点上溢与下溢\" class=\"headerlink\" title=\"3.4.6.4 浮点上溢与下溢\"></a>3.4.6.4 浮点上溢与下溢</h4><p>可能最大的<code>float</code>类型就是值大概是3.4E38，然后你执行了下面的代码。</p>\n<p><img src=\"/img/toobig.png\"></p>\n<p>输出（个人测试）</p>\n<p><img src=\"/img/INF.png\"></p>\n<p>发生了什么？这就是<em><strong>溢出</strong></em>的一个例子-运算得出的结果大到无法表示。对于这种情况，这种行为之前是没有被定义的，但是现在C语言指定<code>toobig</code>是一个几乎代表<em><strong>无限</strong></em>的数字，<code>printf()</code>就会显示<code>inf</code>（infinity）（或者那个样子的一些变体）</p>\n<p>那么如果是要分辨非常小的数字呢？这是会遇到更多的情况。你可以记起<code>float</code>是以指数部分与数字部分（或尾数）来储存的。如果会有一个数字有着最小的指数与最小的值，而且仍然可以使用所有可以使用的位来表达尾数，在<code>float</code>的精度范围内表示，这就是<code>float</code>类型下的最小值。现在我们把它除2，一般地，这会减少指数，但是指数也是能够表达的最小值了。所以就要到尾数的空余位那里减了，把第一位清空，然后丢掉最后的二进制值，类比一下就是，用四位有效数字的10进制值，比如<code>0.1234E-10</code>，除10，结果就是<code>0.01234E-10</code>，你就可以得到答案了，但是你会在这个过程中丢掉一个数字。这种情况就叫做下溢，C语言对于失去完全精度的浮点数值叫做<em><strong>subnormal</strong></em>（反常值）。所以把最小的正常浮点值除2就会有反常值。如果你除了一个太大的数字，你就会失去所有的精度，最后只剩下0，C语言库现在提供了函数来检查是否你的运算产生了反常数值。</p>\n<p>这里还有另一种特别的浮点值，<code>NaN</code>。例如你给予<code>asin()</code>函数一个名字它会返回所给数值的sin值，但是sin的数值并不能大于1，所以函数对于大于1的数值是未定义的，在这种情况下函数就会返回<code>NaN</code>值，那会被<code>printf</code>打印为<code>nan</code>、<code>NaN</code>或者相似的东西。</p>\n<p><img src=\"/img/drop4in5.png\" alt=\"四舍五入问题\"><br>拿一个数字，加1，然后减去原来的数，你会得到几？肯定是1是吧？像下面的浮点运算给予了你不同的答案。</p>\n<p>输出是这个样子的：</p>\n<p><img src=\"/img/alldevices.png\"></p>\n<p>这三种奇怪的结果的原因是电脑并不能够跟踪需要多少十进制空间来进行恰当的运算，2.0e20是2后面跟着20个0，通过加1的操作，你要改变这个数字的第21位数字，要正确地执行这个操作，程序需要能够储存21位数字的类型，<code>float</code>类型数通常只是六位或者七位数带着指数这个范围（最后的一位只能是0，不能改变）所以这种尝试在劫难逃。另一方面，如果你使用2.0e4的话你就可以得到正确的结果，因为你改变的是第5位数，<code>float</code>类型的精度允许你这样做。</p>\n<h3 id=\"3-4-7-复数与虚数类型\"><a href=\"#3-4-7-复数与虚数类型\" class=\"headerlink\" title=\"3.4.7 复数与虚数类型\"></a>3.4.7 复数与虚数类型</h3><p>许多科学与工程运算会使用复数与虚数，C99为这些数提供了支持，（with some reservations），它是一个独立的实现，就像内置预处理命令一样，不需要其他类型的支持。（VCR芯片很可能并不需要复数来工作）。并且，更一般地。虚数类型是可选择的。简单来说，有三种复数类型，<code>float_Conplex，_Complex</code>与<code>long double _Complex</code>，举个例子，一个<code>float _Complex</code>变量，会包含两个<code>float</code>类型的值，一个代表复数的实部，另一个代表虚部。相思地，有三种虚数类型，它们叫做<code>float _Imaginary, double _Imaginary</code>与<code>long double _Imaginary</code>。</p>\n<p>包含<code>complex.h</code>头文件可以使你把<code>_Complex</code>与<code>_Imaginary</code>分别更换为<code>complex</code>与<code>imaginary</code>。而且还能够让你使用I来代表-1的平方根。</p>\n<h3 id=\"3-4-8-超越基本类型\"><a href=\"#3-4-8-超越基本类型\" class=\"headerlink\" title=\"3.4.8 超越基本类型\"></a>3.4.8 超越基本类型</h3><p>这样我们已经讲完了一系列基本的数据类型了，对于你们其中一些人来说，数据类型可能很多，还有一些人可能会想着还需要其他的类型，比如说字符串类型。但C语言并没有。但是还是能够很好的处理字符串，你会在第四章第一次见到字符串。</p>\n<p>C语言确实有其他的类型，他们是从基本类型中衍生出来的。这些类型包括数组、指针、结构体、联合体。即使它们都是后面章节才要讲到的，我们已经在这一章的例子中已经偷摸添加了一些关于指针的东西了。（指针会指向变量或者其他数据对象的地址，<code>scanf()</code>中使用的<code>&amp;</code>前缀就会创造一个指针，他会告诉<code>scanf()</code>在哪储存信息）</p>\n<p><img src=\"/img/basicdata.png\"><br><strong>总结：基本数据类型</strong><br>    <strong>关键字</strong>：<br>    基本的数据类型是由11个关键字组成的：<code>int, long, short, unsigned, char, float, double, signed, _Bool, _Complex, _Imaginary</code><br>    <strong>有符号整型</strong>：<br>    可以是整数值也可以是负值<br>    1. <code>int</code>- 系统给定的基本整型。C语言保证<code>int</code>至少有16位。<br>    2. <code>short</code>或<code>short int</code> - 最大的短整型不大于最大的<code>int</code>，并有可能更小，C语言保证<code>short</code>类型至少有16位。<br>    3. <code>long</code>或<code>long int</code> - 能够保存至少<code>int</code>的最大值大小的数，可以更大。C语言会确保<code>long long</code>类型至少有32位。<br>    4. <code>long long</code>或<code>long long int</code> - 这个类型至少能够保存<code>long</code>类型数的最大范围，可以更大，<code>long long</code>类型最小64位。</p>\n<p>通常，<code>long</code>类型是比<code>short</code>类型更短的，<code>int</code>会与他们之中的一个一样大。例如，以DOS系统为基础的PC系统，<code>short</code>是16位长的，而<code>int</code>是32位长的，以Windows 95为基础的系统会提供16位的<br><code>short</code>，而<code>long</code>与<code>int</code>类型是32位的。</p>\n<p>如果你喜欢的话，你可以在任何有符号类型前使用<code>signed</code>关键字，将它们有符号这个事实显露出来。<br><strong>无符号整型：</strong><br>    这些类型只能从0到整数，因为去掉了符号位，这种类型的范围得到了扩大，使用关键字<code>unsigned</code>可以把你想要的类型变为无符号类型：比如<code>unsigned int, unsigned long, unisgned short.</code>单个的<code>unsigned</code>与<code>unisgned int</code>是一样的。<br><strong>字符：</strong><br>    它们是像<code>A, &amp;</code>这样的印刷字符。在定义上，字符类型会使用1个字节的内存来代表一个字符。在以往，字符字节大多数是8位，但现在它可以是16位或者更大，可以迎合使用的基准字符集的大小。<br>        <strong>char</strong> - 这种类型的关键字，一些实现中会使用有符号的<code>signed char</code>，但其他还是使用无符号字符。C语言允许你使用<code>signed</code>或者<code>unsigned</code>来划定你想要的类型。<br><strong>布尔类型：</strong><br>    布尔值代表<code>true</code>与<code>false</code>，C语言会使用0与1代表这两个值。<br>        <strong>_ Bool</strong> - 是这种类型的关键字，它是一个无符号整型，只需要保存0与1这两个值的内存。<br><strong>实数浮点型：</strong><br>    可以正数、负数或者零。<br>        [<code>float</code>] 是系统的基本浮点类型，可以至少呈现6位精确的有效数字。<br>        [<code>double</code>] 一种（可能是）更大的浮点储存单元，允许更大的有效数字位数（至少10位，通常会更多。）而且有可能比float也有更多的指数位数。<br>        [<code>long double</code>] 一种（可能是）更大的浮点储存单元，它可能允许更多的有效数字位数，也有可能有着比<code>double</code>类型更大的指数部分。<br><strong>复数与虚数浮点型：</strong><br>    虚数类型是可以选择的，实部与虚部是基于实数类型的：<br>        <code>float _Complex</code><br>        <code>double _Complex</code><br>        <code>long double _Complex</code><br>        <code>float _Imaginary</code><br>        <code>double _Imaginary</code><br>        <code>long double _Imaginary</code></p>\n<p><img src=\"/img/Summary.png\"></p>\n<p><strong>总结：如何声明一个简单的变量</strong></p>\n<ol>\n<li>选择你需要的类型</li>\n<li>使用允许的字符为你的变量起个名字</li>\n<li>使用以下形式的声明语句<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//type-specifier variable-name;</span></span><br><span class=\"line\"><span class=\"comment\">//类型标识符 变量名;</span></span><br><span class=\"line\"><span class=\"type\">int</span> Iint1;</span><br></pre></td></tr></table></figure></li>\n<li>你可以通过用逗号把变量名隔开来声明多个变量，下面就是一个例子。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> ch, init, ans;</span><br></pre></td></tr></table></figure></li>\n<li>你可以在声明语句中对变量进行初始化：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> mass = <span class=\"number\">6.0E24</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-4-9-类型大小\"><a href=\"#3-4-9-类型大小\" class=\"headerlink\" title=\"3.4.9 类型大小\"></a>3.4.9 类型大小</h3><p>表3.3与3.4展示了一些C语言环境下的类型大小（在一些环境中，你可以选择）你的系统是什么样子的？尝试运行例3.8中的程序，你会弄明白的。</p>\n<p><img src=\"/img/Twotables.png\" alt=\"表3.3与3.4\"><br>（分别是整型与浮点型的大小。）</p>\n<p>对于每一种类型，最上面的一行是有效数字的位数，第二行是指数的范围（十进制）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//(例 3.8)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*C99为大小提供了%zd格式化符*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type int has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type char has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type long has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type double has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">double</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>C语言有一种内置的运算符，它叫<code>sizeof()</code>，它会给出以比特为单位的大小范围。（一些编译器需要<code>%lu</code>而不是<code>%u</code>来打印<code>sizeof</code>数值，这是因为C语言对于<code>sizeof</code>用来报告的真实的无符号整型是有多个范围的。C99对于这种类型给出了<code>%zd</code>标识符，如果编译器支持的话你应该使用这个。）例3.8的输出是这个样子的。</p>\n<p><img src=\"/img/sizes.png\"></p>\n<p>这个程序只发现了4种类型的范围，但是你可以简单修改一下这个程序来找寻你感兴趣的任何一种类型，要注意的是<code>char</code>类型的大小一定是1个字节，因为C语言对于<code>char</code>类型定义的就是一个字节。所以在有16位的<code>char</code>与64位的<code>double</code>的系统上，<code>sizeof</code>会报告<code>double</code>类型有4个字节的大小。你可以看看limits.h与float.h头文件来获取更多关于类型最大最小值的细节信息。（下一章会进一步阐述这两个文件。）</p>\n<p>顺便一说。看看最后一行<code>printf()</code>是如何延伸到两行的，只要不是在双引号部分或者在一个单词的中间断开，你可以这样做。</p>\n<h3 id=\"3-4-10-可用数据类型\"><a href=\"#3-4-10-可用数据类型\" class=\"headerlink\" title=\"3.4.10 可用数据类型\"></a>3.4.10 可用数据类型</h3><p>当你正在开发一个程序时，需要注意你需要的变量与它们应该使用的类型。大多数情况，你可以使用<code>int</code>或者<code>float</code>来表示一个数，用<code>char</code>来表示字符，在使用它们的函数的开头先声明好它们。为变量取一个能够暗示它们的意义的名字。初始化一个变量时，也要让变量类型与赋给的常量类型匹配。这里就是两个例子。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> apples = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> oranges = <span class=\"number\">3.0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>C语言对于类型不搭配比起Pascal是很宽容的，C语言的编译器允许你进行二次初始化，但是它们有可能会引起报错，尤其是当你触发了一个高级警告时。最好不要养成这种马马虎虎的习惯。</p>\n<p>当你使用其他类型的值给一个数字类型的值初始化时，C语言会将这个值进行转化，来让它与这个变量的类型相配。这也就意味着你有可能会失去一些数据，比如思考一下下面的初始化过程。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> cost = <span class=\"number\">12.99</span>;        <span class=\"comment\">/*使用double值来初始化int*/</span></span><br><span class=\"line\"><span class=\"type\">float</span> pi = <span class=\"number\">3.1415926536</span>; <span class=\"comment\">/*使用double值来初始化float*/</span></span><br></pre></td></tr></table></figure>\n\n<p>第一个声明语句会将12赋给<code>cost</code>变量，当把浮点数转换为整数值时，C语言简单地把小数部分丢掉（截断），而不是四舍五入。第二行的声明会失去精度，因为<code>float</code>类型是只能呈现小数点后6位精确数的。如果进行这样的初始化，编译器有可能会发出一个警告（但不是一定会发），你有可能在编译例3.1的时候遇到这个问题。</p>\n<p>许多的编程者与组织人员拥有设置变量名称的体系化传统方法，按照这种方式就可以显示出变量的类型。例如你可以使用<code>i_prefix</code>来表示这是个<code>int</code>类型变量，同理<code>us_</code>来表示<code>unsigned_short</code>，这样的话对于类型就好辨认一些。</p>\n<h3 id=\"3-4-11-参数陷阱\"><a href=\"#3-4-11-参数陷阱\" class=\"headerlink\" title=\"3.4.11 参数陷阱\"></a>3.4.11 参数陷阱</h3><p>在这一章的前半部分，有一个关于<code>printf()</code>使用的警告还是很值得重复强调的。你可能还记得传递给函数的信息在术语上称为参数。例如，<code>printf(&quot;Hello, pal.&quot;)</code>就有一个参数：<code>&quot;Hello, Pal.&quot;</code>。我们把在双引号中的一系列字符叫做<em><strong>字符串</strong></em>，我们会在第四章讨论。现在的重点是，一个字符串，即使包含着好几个单词与标点符号，也仍然被算作是一个参数。</p>\n<p>相似地，<code>scanf(&quot;%d&quot;, weight)</code>有两个参数：<code>&quot;%d&quot;</code>与<code>&amp;weight</code>。C语言会使用逗号来分开函数中的各个参数，<code>printf()</code>与<code>scanf()</code>函数还挺不寻常的，它的参数数量是不限的。例如，我们曾经在使用<code>printf()</code>时传递过一个、两个甚至是三个参数。对于一个恰当运行的程序，它需要知道参数的数量。<code>printf()</code>与<code>scanf()</code>函数会使用第一个参数来表达之后会有多少个其他的参数。这里的诀窍就是在最前的字符串中的每一个格式化符都代表着后面有一个参数，例如下面的语句就有两个格式化符：<code>%d</code>与<code>%d</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d cats ate %d cans of tuna\\n&quot;</span>, cats, cans);</span><br></pre></td></tr></table></figure>\n\n<p>这也就告诉程序后面要接收两个额外的参数，而且后面确实有两个——<code>cats</code>与<code>cans</code>。</p>\n<p>作为一个编程人员，你的责任就是确保格式化符的数量与其他的参数的数量相同，类型相同。C语言现在已经有函数原型机制了，它能够检查一次函数调用是否使用了正确的数字与正确的参数类型，但是对于<code>printf()</code>与<code>scanf()</code>是不适用的，因为它们参数的数量是可变的。当你并没有接收程序员的负担会怎样呢？举个例子，假设你写了例3.9那样的程序。</p>\n<p><img src=\"/img/Listing3.9.png\" alt=\"例3.9\"></p>\n<p>下面是从微软VisualC++ 7.1（WinXP系统）上运行的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 34603777</span><br><span class=\"line\">0 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>这是在Digital Mars（WinXP系统）上运行的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 4239476</span><br><span class=\"line\">0 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>这是在Metrowerks Codewarrior Development Studio 9（MacOSX系统）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 3327456</span><br><span class=\"line\">1075052544 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到，使用<code>%d</code>来表示一个<code>float</code>类型的值并不会将它变成最近的<code>int</code>类型值，而是直接输出垃圾值。相似地，使用<code>%f</code>来表示一个<code>int</code>类型的值也并不会将整数转化为浮点数值。参数太少或者类型不对得到的结果不同的平台也不一样。</p>\n<p>没有一个编译器对于这个代码有报错或者警告，在运行时也没有。一些编译器确实会捕捉到这种错误，但是C语言标准并没有要求它们这样做。因此，电脑就不一定能够补货到这种类型的错误，因为程序反而还能够正常地运行，你也不一定能够注意到这种错误。如果程序并没有打印正确的数值数量或者是数值，那就回去看看<code>printf()</code>的参数数量与类型是否使用正确。（顺便一说，Unix语法检测程序lint，它比Unix编译器检查得更加细致，能够对于<code>printf()</code>的参数错误进行报错）。</p>\n<h2 id=\"3-5-又一个例子：转义序列。\"><a href=\"#3-5-又一个例子：转义序列。\" class=\"headerlink\" title=\"3.5 又一个例子：转义序列。\"></a>3.5 又一个例子：转义序列。</h2><p>让我们在程序中打印更多东西吧，这一次我们会使用C语言中的一些针对于字符的特殊转义序列。尤其地，例3.10中的程序显示了回车符(<code>\\b</code>)，水平制表符(<code>\\t</code>)以及回行符（<code>\\r</code>）是怎么工作的。这些概念要追溯到电脑还在使用电传打字机的时代，它们并不总是会在现代的图形界面上正确地翻译。例如，例3.10在一些Mac系统的实现上就不能够按照想要的方式来运行。</p>\n<p><img src=\"/img/Listing3.10.png\" alt=\"例3.10\"></p>\n<h3 id=\"3-5-1-当程序运行的时候发生了什么？\"><a href=\"#3-5-1-当程序运行的时候发生了什么？\" class=\"headerlink\" title=\"3.5.1 当程序运行的时候发生了什么？\"></a>3.5.1 当程序运行的时候发生了什么？</h3><p>让我们一步步地浏览这个程序，好让它能够在ANSI实现下运行。第一个<code>printf()</code>函数语句（标<code>1</code>的那个）会发出警告信号（由<code>\\a</code>引起），然后会打印如下的句子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary:</span><br></pre></td></tr></table></figure>\n<p>因为在字符串最后没有<code>\\n</code>符号，所以光标还是在冒号后面。</p>\n<p>第二个<code>printf()</code>语句会接着第一句结束的地方开始，所以当它执行完毕时，屏幕上看起来是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$______</span></span><br></pre></td></tr></table></figure>\n\n<p>在冒号与美元符号之间有一个空格，因为第二个<code>printf()</code>的字符串是以空格开始的，7个退格符的作用是把光标向左移动7个单位。这就会将光标移到下划线字符前面，正好放在美元符号后面。通常地，退格符并不会移除前面的字符，但是有一些实现是有可能移除的，那样这个小练习就没有用了。</p>\n<p>现在，你会输入你的回答，比如说你输入了<code>2000.00</code>，那么这一行看起来就会是这个样子。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$2000</span>.00</span><br></pre></td></tr></table></figure>\n\n<p>你输入的字符将会覆盖换行符，而且当你点<code>Enter</code>键（或者<code>Return</code>）来输入你的回答时，光标就会跳转到下一行。</p>\n<p>第三个<code>printf()</code>语句是以<code>\\n\\t</code>开始的，换行符将会将光标移动到下一行的最开始，而tab键通常会将光标移动到那一行的下一个制表位（但并不是一定），也就是第9列。然后字符串的剩余部分就会被打印下来。在这个语句执行之后，屏幕上看起来就会变成这样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$2000</span>.00</span><br><span class=\"line\">\t<span class=\"variable\">$2000</span>.00 a month is <span class=\"variable\">$24000</span>.00 a year.</span><br></pre></td></tr></table></figure>\n<p>因为这个<code>printf()</code>语句并没有使用换行符，光标还是在这一句的最后位置。</p>\n<p>第四个<code>printf()</code>使用了<code>\\r</code>符号，它会将光标移动到一行的开头位置，这个语句执行之后屏幕上就成了这样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary <span class=\"variable\">$2000</span>.00</span><br><span class=\"line\">Gee!    <span class=\"variable\">$2000</span>.00 a month is <span class=\"variable\">$24000</span>.00 a year.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-2-输出清理\"><a href=\"#3-5-2-输出清理\" class=\"headerlink\" title=\"3.5.2 输出清理\"></a>3.5.2 输出清理</h3><p><code>printf()</code>函数什么时候才会将输出发送到屏幕上呢？首先，<code>printf()</code>语句会将输出发送到<em><strong>缓冲区</strong></em>，时不时地，在缓冲区的内容就会被发送到屏幕上。对于输出什么时候从缓冲区发送到屏幕上，基础的C语言规则已经很清晰了：当缓冲区被充满时，当遇到一个换行符的时候，以及当有即将发生的输出行为时。（从缓冲区发送输出信息到屏幕或者是文件上叫做<em><strong>刷新缓冲区</strong></em>），例如，最先的两个<code>printf()</code>函数语句并不会填充缓冲区，也并没有包含换行符。在那种情况下，你可以使用一个换行符来刷新缓冲区，那样的话代码就可以写成这个样子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter your desired monthly salary: \\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%f&quot;</span>, &amp;salary);</span><br></pre></td></tr></table></figure>\n\n<p> 不管即将到来的输入信息是不是会刷新缓冲区，这几行代码都是可以正常工作的。但是，它也会将光标移到下一行，防止你把数据与提示字符串写到一行。另一种方式是使用<code>fflush()</code>函数，它会在第13章，文件输入与输出中讲到。</p>\n<h1 id=\"关键概念\"><a href=\"#关键概念\" class=\"headerlink\" title=\"关键概念\"></a>关键概念</h1><p>C语言有着许多种数字类型，这也反映了C语言避免让编程人员陷入障碍的目的。比起用一种类型包管全部数字类型，C语言尽力给予编程人员对于数字的特定种类（比如说有符号与无符号），以及最能够适合特定程序的数字范围大小的选择。</p>\n<p>在一台电脑上，浮点数与整型的基础是不一样的。它们会被以不同的形式储存于处理。两个32位的内存单元能够保存相同的位形式（二进制数表示是一样的。）但是如果其中一个被理解为<code>float</code>而另一个被理解为<code>long</code>，这两个内存单元就会代表完全不同也不相关的两个数，例如在个人电脑上，如果你使用代表256.0的浮点储存单元，但是让它被理解为long，你就会得到113246208这个数。C语言确实允许你使用多种数据类型来书写表达式，但是它会自动进行类型转换，所以真正的运算只有一种数据类型。</p>\n<p>在电脑内存中，字符是以数字编码的形式呈现的，ASCII码是美国最常用的数字代码标准，但是C语言也支持其他代码集。字符常量是电脑上数字编码的符号表示-它是由单引号框定的单字符，比如<code>&#39;A&#39;</code>。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>C语言有各种各样的数据类型，基本的数据类型可以分为两类：整型与浮点型，对于整型，两个最鲜明的区分就是分配给不同类型的储存空间，还有是否有符号。最小的整型是<code>char</code>，它可以有符号，也可以没有，这取决于不同的C语言实现，你可以根据自己的需求来选择<code>signed char</code>与<code>unsigned char</code>，但是那通常是在你使用范围比较小的数字的情况下，而不是使用字符编码时。其他的整型还有<code>short, int, long, long long</code>等。C语言确保了所有的类型都至少会与它前面的类型一样大，它们都是有符号类型，但你还是可以加上<code>unsigned</code>修饰符来创造相应的无符号类型：<code>unsigned short, unsigned int, unsigned long, unsigned long long</code>或者你也可以使用<code>signed</code>修饰符来明显地写出它是有符号的。最后，还有<code>_Bool</code>类型，一种无符号类型，它只能保存0与1，分别代表着<code>false</code>与<code>true</code>。</p>\n<p>浮点类型有三种，分别是<code>float, double</code>与在ANSI C中的<code>long double</code>，每一个类型也是至少比它前面的那个类型一样大的。要是想的话，你也可以用<code>_Complex</code>与<code>_Imaginary</code>与浮点类型关键字连用，来使用虚数与复数类型。例如，有<code>double _Complex</code>与<code>float _Imaginary</code>类型。</p>\n<p>整型可以被以十进制、八进制与十六进制的形式被输出，开头写0可以使一个数变为八进制数，写0x或者0X可以变为十六进制数。例如<code>32, 040</code>还有<code>0x20</code>就分别是十进制、八进制与十六进制的数字，但是它们代表的都是同一个值。另外使用<code>l</code>或者<code>L</code>符号可以声明一个<code>long</code>类型的常量值，<code>ll</code>或者<code>LL</code>可以声明一个<code>long long</code>类型的值。</p>\n<p>字符常量是由单引号及其中的字符代表的：比如<code>&#39;Q&#39;, &#39;8&#39;</code>。字符还包括转义序列，比如<code>\\n</code>，它们代表着不会被打印出来的特定字符，你可以使用类似<code>\\007</code>的形式来使用ASCII码的形式来代表字符。</p>\n<p>浮点数可以以十进制小数点的形式来表示，也可以以指数符号的形式来表示，例如<code>7.38E10</code>。</p>\n<p><code>printf()</code>函数能够让你利用格式化转换符，以最简洁的方式打印各种各样的数值，它由一个百分号符<code>%</code>与一个表示类型的字符组成，比如<code>%d</code>或者<code>%f</code>。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><p>你会在附录A中找到这些问题的答案。<br>1.你对于这几种数据你会使用哪种数据类型？</p>\n<blockquote>\n<p>1.东斯普尔顿的人数 – int类型（16位即可）<br>2.在DVD上电影的价格–float类型<br>3.这一章最常见的字母–char类型<br>4.一个字母在这一章中出现的次数。– int类型（。）</p>\n</blockquote>\n<p>2.为什么有时候你会使用<code>long</code>而不是<code>int</code>。</p>\n<blockquote>\n<p>有些时候表示的范围会更大，但是并没有超过<code>long</code>，使用<code>long</code>类型可以保证数据因为存放不下而溢出，从而导致不同机型显示不一而且不会报错的问题。</p>\n</blockquote>\n<p>3.如果你想要得到一个32位有符号的整型，你会使用哪种可转移的类型，请写出所有类型，并说说每一种的合理性。</p>\n<blockquote>\n<p>1.在<code>&lt;inttypes.h&gt;</code>中的<code>int32_t</code>类型<br>2.基本类型中的<code>long</code>或者<code>int</code>类型（对于<code>int</code>来说不一定）</p>\n</blockquote>\n<p><code>long</code>合理，因为关键字更简洁容易记，格式化符也不容易弄错<br>（<code>int32_t</code>为<code>PRId32</code>,<code>long</code>为<code>%ld</code>）<br><code>int32_t</code>能够让编程人员选择适合的大小范围来进行编程，便于大小的记忆。</p>\n<p>4.确认每种类型与它的含义。</p>\n<blockquote>\n<p>1.<code>&#39;\\b&#39;</code>回车符（转义序列）<br>2.<code>1066</code>一个整数，一千零六十六<br>3.<code>99.44</code> 一个两位小数，九十九点四四<br>4.<code>0XAA</code>，十六进制数，10 * 16 + 10 &#x3D; 170.<br>5.<code>2.0e30</code>，指数形式的小数，2 * 10^30(10的30次方)</p>\n</blockquote>\n<p>5.Dottie Cawm 编造了这个满是错误的程序，请找到这个程序中问题。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">float</span> g; h;</span><br><span class=\"line\">\t<span class=\"type\">float</span> tax, rate;</span><br><span class=\"line\"></span><br><span class=\"line\">\tg = e21;</span><br><span class=\"line\">\ttax = rate * g;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（实在是太明显了啊。。）<br>1.include前面忘了#<br>2.main。。。（int main(void)，或者void main()）<br>3.g后面用了分号来分隔，相当于h未规定类型。<br>4.应该是1e21，e21啥也不是。<br>5.tax类型与g的类型大小都太小了，应该用double，float表示不了精确的21位数，或者直接使用long long也可以，反正是整型。<br>6.忘了写<code>return 0;</code></p>\n<p>6.确定下面几种常量数据的类型，与打印他们所使用的格式化标识符。<br><img src=\"/img/Identifytypes1.png\"></p>\n<blockquote>\n<p>·····12为整型，（int（作为常量，默认为int）），输出可以使用<code>%d</code>,<code>%hd</code>,<code>%u</code>,<code>%LLu</code>,<code>%lu</code>。<br>·····<code>0X3</code>，十六进制数，<code>%X</code><br>·····<code>&#39;C&#39;</code>，字符常量，<code>%c</code><br>·····<code>2.34E07</code>,后面看成八进制，但仍然是7，小数的指数形式，用<code>%f</code>或者<code>%lf</code>都可以。<br>·····<code>\\040</code>,十进制的040为32，此即<code>32</code>,即<code>&#39; &#39;</code>（空格字符）<br>·····<code>7.0</code>，一位小数，可以使用<code>%f</code>或者<code>%lf</code><br>·····<code>6L</code>,为<code>long</code>形式整型，可以使用<code>%ld</code>输出。<br>·····<code>6.0f</code>,为<code>float</code>形式小数，可以使用<code>%f</code>。</p>\n</blockquote>\n<p>7.同上<br><img src=\"/img/Identifytypes2.png\"></p>\n<blockquote>\n<p>·····012，八进制数，十进制下为10，可以用<code>%o</code>输出。<br>·····2.9e05L，<code>long double</code>，2.9 * 10^5.<br>·····<code>&#39;s&#39;</code>,字符常量，用<code>%c</code>.<br>·····<code>100000</code>,<code>32</code>位的<code>int</code>，<code>%ld</code>，或者<code>%lu</code>或者更大的类型<code>long long</code>。<br>·····<code>&#39;\\n&#39;</code>,转义序列换行符，直接打印即可。<br>·····20.0f，<code>float</code>类型，<code>%f</code>。<br>·····0x44，十六进制数，68.用<code>%x</code>输出。</p>\n</blockquote>\n<p>8.假设你的程序是以这几行声明语句开头的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> imate = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> shot = <span class=\"number\">53456</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> grade = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"built_in\">log</span> = <span class=\"number\">2.71828</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在下面的<code>printf()</code>函数语句中填入适当的格式化符。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The odds against the %__ were %__ to 1.\\n&quot;</span>,imate, shot);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A score of %__ is not an %__ grade.\\n&quot;</span>, <span class=\"built_in\">log</span>, grade);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The odds against the %d were %ld to 1.\\n&quot;</span>,imate, shot);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A score of %f is not an %c grade.\\n&quot;</span>, <span class=\"built_in\">log</span>, grade);</span><br></pre></td></tr></table></figure>\n\n<p>9.假设<code>ch</code>是一个字符变量，展示一下如何将回行符通过转义序列、十进制数值与八进制及十六进制字符常量的形式赋给ch的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> ch;</span><br><span class=\"line\"></span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\r&#x27;</span>;</span><br><span class=\"line\">ch = <span class=\"number\">13</span>;</span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\0x0D&#x27;</span>;</span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\015&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>10.纠正这个愚蠢的程序。<br><img src=\"/img/Perfect.png\" alt=\"&quot;Perfect...&quot;\"><br>（在C语言中<code>\\</code>表示除）</p>\n<p>1.未指定形式参数的变量名。（main(int a)）<br>2.注释符号没用对（要么<code>//</code>,要么<code>/**/</code>.)<br>3.声明变量使用关键字。（<code>int cows, legs;</code>）<br>4.<code>printf()</code>字符串缺少了右边的引号。<br>5.<code>scanf()</code>少了取地址符<code>&amp;</code>，而且legs的输入形式写错了，为<code>&#39;%d&#39;</code><br>6.<code>printf()</code>格式化符为<code>%d</code>。</p>\n<p>11.说说下面的转义序列代表啥意思？</p>\n<ol>\n<li><code>\\n</code>,换行符，10.</li>\n<li><code>\\\\</code>,相当于<code>\\</code>.</li>\n<li><code>\\&quot;</code>,相当于<code>&quot;</code>.</li>\n<li><code>\\t</code>,相当于tab键。</li>\n</ol>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>1.通过实验方式，弄清你的电脑是如何处理整型上溢、浮点数上溢以及浮点下溢的，也就是写一个拥有数据溢出问题的程序。</p>\n<p><img src=\"/img/overnunder.png\"></p>\n<p>这个肯定会溢出，可以修改程序看看会发生什么。<br>我观察到的是：整型溢出会直接跳到它的最小范围开始加<br>比如2146483650 &#x3D; - 2147483646 </p>\n<p>浮点上溢，会失去精度，但是只要未超过位数仍然可以表示，如果把指数调到40就会出INF（infinity），具体可以看上文对于浮点溢出的讲解。。</p>\n<p>浮点下溢，会直接被看成0。</p>\n<p>2.写一个能够根据你输入的ASCII码值返回对应字符的程序。</p>\n<p><img src=\"/img/ASCIIout.png\"></p>\n<p>包含了转义序列，使用了<code>switch</code>与<code>if</code>嵌套的结构。</p>\n<p>3.写一个能够发出警报声，并且能够打印以下句子的程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Startled by the sudden sound, Sally shouted, <span class=\"string\">&quot;By the Great Pumpkin,</span></span><br><span class=\"line\"><span class=\"string\">what was that!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重点有两个，一个是掌握好换行，可以用一个printf加上一个换行符实现，也可以用两个。<br>另一个是如何在字符串内输出”，这也是我们周赛第一道题的考点</p>\n<p><img src=\"/img/alarming.png\"></p>\n<p>4.书写一个能够读入浮点数据，然后将它先以十进制小数的形式输出，再以指数形式输出。输出类似下方，但指数形式的实数部分是视系统而变的。</p>\n<p><img src=\"/img/decimalandexp.png\"></p>\n<p>5.一年大概有3.156 * 10^7秒，写一个要求你输入以年计数的年龄并将它转化为秒数的程序。</p>\n<p><img src=\"/img/lifesecond.png\" alt=\"My life...\"></p>\n<p>6.一分子水大概是3.0 * 10^23克， 一夸脱水是950克。写一个要求你输入夸脱单位的水量，返回水的分子数的程序。</p>\n<p><img src=\"/img/quartmol.png\" alt=\"Too much...\"></p>\n<p>7.一英寸是2.54厘米， 写一个要求你输入英寸高度，返回厘米高度的程序。你要是想的话也可以反过来转换。</p>\n<p>1.inch to cm<br><img src=\"/img/inchtocm.png\"></p>\n<p>2.cm to inch<br><img src=\"/img/cmtoinch.png\"></p>\n<pre><code>End...\n</code></pre>\n","site":{"data":{}},"excerpt":"<h1 id=\"第三章-数据处理\"><a href=\"#第三章-数据处理\" class=\"headerlink\" title=\"第三章 数据处理\"></a>第三章 数据处理</h1><blockquote>\n<p>你会在这一章学到下面的东西：</p>\n<ol>\n<li>关键字<br>&#96;int,short,long,unsigned,char,float,double,_Bool,_Complex</li>\n<li>运算符<br><code>sizeof</code></li>\n<li>函数<br><code>scanf()</code></li>\n<li>整型与浮点型的区别</li>\n<li>书写常量与声明这些类型的变量</li>\n<li>如何使用<code>printf()</code>与<code>scanf()</code>函数来读写不同类型的值</li>\n</ol>\n</blockquote>\n<p>程序依靠数据来工作。你会向电脑输入数字、字母或者单词，然后期望它能够利用这些数据做些事情。例如，你可能想要电脑去计算支付利润或者展示一个排过序的酒商列表。在这一章，你将会不只阅读数据，而且练习着去操纵数据，那是挺有趣的一件事。</p>\n<p>这一章还会让你了解到两大类数据类型：整数与浮点数。C语言提供了这些类型的几种变体。这一章会告诉你类型是什么，如何声明它们并且如何利用它们。而且，你会发现变量与常量之间的区别，作为额外奖励，你的第一个交互式的小程序就要诞生了！</p>","more":"<h2 id=\"3-1-一个例子\"><a href=\"#3-1-一个例子\" class=\"headerlink\" title=\"3.1 一个例子\"></a>3.1 一个例子</h2><p>再一次，我们还是从一个样例程序来开始，像以往一样，你会发现一些不熟悉的东西，我们待会就会为你解释。程序的总体目的应该清晰，那么就尝试把图3.1中的源码编译运行下吧。<br>为了节省时间，你可以省略注释。</p>\n<p><img src=\"/img/Listing3.1.png\" alt=\"图3.1\"></p>\n<p><img src=\"/img/ErrandWarn.png\" alt=\"错误与警告\"><br>【错误与警告】<br>如果你把程序的某些部分打错了，还有，比如说，遗漏了一个分号，编译器就会给予你一条语法错误信息。即使你没打错，编译器也有可能给予你一条警告信息，“Warning-conversion from ‘double’ to ‘float’ , possible loss of data.” 错误信息指的是你有可能把某些事做错了，它阻止程序的编译。警告，意思是你写的代码是合法的但是有可能做的并不是你想的那样。警告并不会阻止编译过程。上文中的这条信息就会在C语言在处理像770.0这样的数时出现，但并不是这个例子的问题，这一章过会会解释这条警告。</p>\n<p>当你在打字写这个程序的时候，你有可能会把<code>770.0</code>改成这种珍贵金属的当前价格。但是不要改变14.5833，那代表着一磅对应的盎司数。（盎司金衡制，是对于贵重金属使用的，常规衡制是给人们使用的，不论是珍贵的物品或是其他的东西。）</p>\n<p>需要注意的是“输入”你的体重意味着把你的体重打字写入电脑，并且敲下Enter或者Return键（不要输入完了你的体重就等着。）按下Enter键这个动作告诉了电脑你已经完成了你的应答。这个程序想要你输入一个数字，如<code>150</code>而不是单词，比如<code>too much</code>，如果你写的是字母而不是数字，那是会导致问题的，而这个问题需要之后学习的<code>if</code>语句来解决。（第七章，“C语言控制语句：分支结构与跳跃结构”会讲到），所以请先平静一些，输入一个数字，这里就是一个简单的输出示例。</p>\n<p><img src=\"/img/Olist3.1.png\" alt=\"输出\"></p>\n<h3 id=\"3-1-1-例子中的新知识\"><a href=\"#3-1-1-例子中的新知识\" class=\"headerlink\" title=\"3.1.1 例子中的新知识\"></a>3.1.1 例子中的新知识</h3><p>在这个C语言程序中有这么几个新接触的要素。</p>\n<ul>\n<li>可以注意到的是，代码在变量声明中使用了新的数据类型，前面提到的例子只使用了十进制整数类型(<code>int</code>)，但是现在的这个例子使用了一个浮点类型的变量类型，这样的话你就可以处理更大范围的数据了。<code>float</code>类型就可以保存含有十进制小数点的数字。</li>\n<li>这个程序给出了书写常量的一些更新的方式，你现在可以书写浮点型的常量了。</li>\n<li>为了对程序提供输入信息，你需要使用<code>scanf()</code>函数，<code>%f</code>命令<code>scanf()</code>从键盘输入中读入一个浮点数，<code>&amp;weight</code>告知了<code>scanf()</code>函数把输入的值赋给名字叫做<code>weight</code>的变量，<code>scanf()</code>函数会用<code>&amp;</code>符号来寻找在哪里可以找到叫做<code>weight</code>的变量，下一章我们会进一步地阐述<code>&amp;</code>符号，现在，只需要相信我们你需要在这里添加一个<code>&amp;</code>符号。</li>\n<li>可能最突出的新特性就是程序变为交互性的了。电脑会要求你输入信息，并使用你输入的数值。一个交互性的程序是比不能交互的更有趣的。更重要的是，交互的方法让程序更加的灵活。举个例子，样例程序就可以用于所有合理的体重了，而不只是150磅，你不需要换一个人就再把程序重写一遍。<code>scanf()</code>函数会从键盘中获取数据，并把数据传递到你的程序，<code>printf()</code>函数会从程序中获取数据，然后把数据传递到你的屏幕上。这两个函数在一起就可以让你建立电脑与你的双向联系（见图3,1），这就让电脑使用更加有趣了。</li>\n</ul>\n<p>我们会在这一章讲述这些新特点中的前两条，后面的三条内容会在第四章-字符串与格式化输入输出完整地讲到，但是这一章还是会少量地使用<code>print()</code>与<code>scanf()</code>函数。</p>\n<p><img src=\"/img/Figure3.1.png\" alt=\"输入输出函数的工作\"></p>\n<h2 id=\"3-2-变常类型\"><a href=\"#3-2-变常类型\" class=\"headerlink\" title=\"3.2 变常类型\"></a>3.2 变常类型</h2><p>一台电脑，在程序的指导之下，可以做到很多的事情。可以做加法，可以给名称排序，可以指示讲话者或者屏幕的演出顺序，可以计算彗星的轨道，可以编排你的邮寄列表，拨叫电话号码、画出由小棒组成的人物，得出结论或者其他你可以想象到的可以被创造的东西。为了完成这些任务，程序需要处理<em><strong>数据</strong></em>，也就是你使用的保存在程序中的所有数字与字符信息。一些数据类型需要在程序使用之前进行预设，而且保证它们的值是不变的，这些就是<em><strong>常量</strong></em>。其他的数据类型的值或许会随着程序运行改变或者被赋给，这些就是<em><strong>变量</strong></em>。在这个样例程序中，<code>weight</code>就是一个变量，而<code>14.5833</code>就是一个常量。那么<code>770.0</code>呢？虽然铑金属在真实生活中的价格并不是个常量，但是这个程序把它作为一个常量来处理。变量与常量的区别就在值可不可以随着程序运行发生改变上。</p>\n<h2 id=\"3-3-数据类型关键字\"><a href=\"#3-3-数据类型关键字\" class=\"headerlink\" title=\"3.3 数据类型关键字\"></a>3.3 数据类型关键字</h2><p>讲完了变量与常量的区别之后，我们需要了解一下不同数据<em><strong>类型</strong></em>之间的区别。一些数据是数字形式，一些是字母，或者更加普遍的，它们是字符。电脑需要一种方式来确定与使用这些不同的类型。C语言通过对于基本的数据类型的定义完成了这个工作。如果数据是一个常量，编译器通常是可以通过它看起来的样子来区分它的。<code>42</code>是一个十进制整数，<code>42.100</code>是一个浮点数，在另一面，变量就需要声明语句来声明它的类型。随着学习进行下去，你会了解到关于声明变量的更多细节。但是还是让我们首先先研究一下C语言可以识别的基本类型，K&amp;R C确立了有关于类型的七个关键字，C90标准增加了两个，C99标准又增加了三个。（见表3.1）<br><img src=\"/img/Table3.1.png\" alt=\"表3.1\"></p>\n<p><code>int</code>关键字提供了C语言中基本的十进制整数类型，下面的三个关键字(<code>long, short, unsigned</code>)还有ANSI添加的<code>signed</code>提供了基本类型的变体。接着，<code>char</code>关键字指明了用于字母与其他字符的类型，如<code>%, $, #</code>等，<code>char</code>类型还可以被用来代表大于0与小于10的十进制整数。然后是<code>float</code>与<code>double</code>，还有两者的混合<code>long double</code>是用来代表带有十进制小数点的数字的。<code>_Bool</code>类型是为布尔类型提供的(<code>true</code>和<code>false</code>)，最后是分别代表着复数与虚数的<code>_Complex</code>与<code>_Imaginary</code>.</p>\n<p>由这些关键字创造的类型又可以基于在电脑中的储存类型分为两种，<em><strong>十进制整数类型</strong></em>与<em><strong>浮点数类型</strong></em>。</p>\n<p><img src=\"/img/storingtypes.png\" alt=\"Bits, Bytes and Words\"><br>【Bit（位）、字节与字】</p>\n<p><em>bit</em>、<em>字节</em>与<em>字</em>可以被用来描述电脑的数据单元或者内存单元。我们会集中于第二种用法。</p>\n<p>内存的最小单元叫做<em><strong>bit</strong></em>，它可以保存<code>0</code>与<code>1</code>之间的其中一种数值（或者你可以说，这个字节被设为“关”或者“开”）你并不能在一个bit中储存太多的信息，但是电脑可以储存很多的字节，bit就是电脑内存的基础组成模块。</p>\n<p><em>字节</em>是电脑内存的一般单元。对于大多数的机器来说，一个字节是8个bi，那是标准的定义，至少当测量内存的时候（C语言有不同的定义，我们会在“使用字符：<code>char</code>类型”这一节讲到）因为一个bit不是0就是1，那么在8位的字节中，就可以有256种可能（2的8次方），这些可能的模式就可以被用作比如代表0到255的数字或者代表一系列的字符。在二进制代码下，这种一对一的映射是可以被建立的，而且使用0与1来代表数字也使机器便利的。（在第15章-位运算，会讲述二进制代码，但是如果你想的话现在就可以去读一下）。</p>\n<p><em>字</em>是电脑固定设计下的内存自然单元，对于8位的微型计算机，比如原来的苹果电脑来说，一个字就只是8个bit。早期的IBM兼容器使用的80286处理器是16位的机器，这也就是说他们把字长增加到了16bit。还有例如以Pentinum为基础的计算机，还有Mactonish PowerPC的字长是32bit。还有更强大的电脑的字长是64位的或者更大。</p>\n<h3 id=\"3-3-1-整型与浮点型\"><a href=\"#3-3-1-整型与浮点型\" class=\"headerlink\" title=\"3.3.1 整型与浮点型\"></a>3.3.1 整型与浮点型</h3><p>整型？浮点型？如果你感觉这些词非常不熟悉以至于干扰了你的阅读进度，我们这就要简要描述它们的意义了。如果你对位、字节还有字还是不熟悉的话，你可能需要阅读一下最近描述过的附加栏。你真的需要了解所有的细节吗？并不是，不只了解内燃机驱动车子的工作原理，而多了解一些电脑或者引擎内部发生的事情有时候可以帮到你。</p>\n<p>对于一个人来说，整型与浮点型的区别体现在它们是怎么被写下的。对于电脑来说，那就体现在它们是怎么被储存的。让我们依次来研究一下这两种类型。</p>\n<h3 id=\"3-3-2-整数类型\"><a href=\"#3-3-2-整数类型\" class=\"headerlink\" title=\"3.3.2 整数类型\"></a>3.3.2 整数类型</h3><p><em><strong>整型</strong></em>是没有小数部分的数字。在C语言中，整型是没有小数点的数字。比如说-2、-23还有2456。像3.14, 0.22, 还有2.00这些数就不是整型。整型是以二进制数字的形式被储存起来的。比如7就是被储存为二进制数111的。因此，为了在8位字节中储存这个数字，会把前五个位设置为0，然后把后三个位设置为1。    </p>\n<p><img src=\"/img/Figure3.2.png\" alt=\"用二进制码储存7\"></p>\n<h3 id=\"3-3-3-浮点数类型\"><a href=\"#3-3-3-浮点数类型\" class=\"headerlink\" title=\"3.3.3 浮点数类型\"></a>3.3.3 浮点数类型</h3><p><em><strong>浮点</strong></em>数多多少少是对应着数学概念中的<em><strong>实数</strong></em>，实数包含着整数之间的这些数字，浮点数基本是这些样子：2.75、3.16E7、7.00、2e-8，需要注意的是，只要有小数点就会把整型数字转换为浮点数，比如7.00是一个浮点数，而7就是一个十进制整数。很明显，书写浮点数的方式不止一种，我们会在之后更充分地讨论用e符号表示的形式。但是简单来说，3.16E7的表示方式意思就是3.16乘10的7次方，也就是1后面添7个0，7也就是10的<em><strong>指数</strong></em>。</p>\n<p>关键就是储存浮点数的方式与整数不一样。浮点数的表示涉及到把一个数字分开为小数部分与整数部分，然后分别储存。因此，7.00这个数字不会与整数7同样储存，即使它们的值都是一样的。十进制类比起来也就是把7.0写为0.7E1。这里，0.7就是小数部分，1就是指数部分，图3.3展示了浮点数储存的另一个例子。一台电脑当然会使用二进制数与二进制而不是十进制来储存。你会在第十五章了解关于这个话题的更多信息。现在我们先集中精力于在实用上区别吧。</p>\n<ul>\n<li>整型没有小数部分，浮点数可以有小数部分。</li>\n<li>浮点数比整数代表的数字更多，可以看一下这一篇结尾的图表3.3。</li>\n<li>对于一些算术运算符，比如一个数减去另一个数，浮点类型的精确度会有更大可能下降。</li>\n<li>因为在任何一个范围之间都有着无数的浮点数，比如在1.0与2.0之间，电脑就不能完全地代替这些值，它用实数的大概值来估计浮点数的值。比如7.0有可能被储存为6.99999的<code>float</code>值，过会会讲到更多有关于精确度的知识。</li>\n<li>浮点运算符的优先级通常是比整型运算符要低的，然而用来处理浮点运算的特殊微型处理器已经可用了，这个问题也就得到了解决。</li>\n</ul>\n<p><img src=\"/img/Figure3.3.png\" alt=\"十进制浮点储存方式\"></p>\n<p>现在就让我们研究一下C语言中各种数据类型的特点吧。对于每一种类型，我们会描述如何声明一个变量，如何用变量代表一个常量，还有一些特殊的用法。一些年代较早的C语言编译器可能不能支持下文全部的类型，所以你可以查看一下你的编译器的说明书，看一看哪些数据类型是可用的。</p>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"3-4-1-int类型\"><a href=\"#3-4-1-int类型\" class=\"headerlink\" title=\"3.4.1 int类型\"></a>3.4.1 <code>int</code>类型</h3><p>C语言提供了很多的整数类型，你可能想知道为什么只有一种还不够，答案就是这样C语言就可以让你将特定的变量用在特定的地方。具体来说，C语言的各个整数类型不同在值域的大小与是否含有负数上。<code>int</code>是最基本的整数类型，但是你要是为了满足机器任务的特定需求的话，其他的类型也都是可用的。</p>\n<p><code>int</code>类型是一种有符号的整数类型，有符号意味着<code>int</code>类型的整数可以是正数、也可以是负数，或者是0。<code>int</code>类型的值域是取决于计算机系统的，通常一个<code>int</code>类型的整数的大小就是内存的一个字长。因此，旧版的16位IBMPC适配器，就可以使用16个位来储存整数，也就是从-<strong>32768</strong>到<strong>32767</strong>。现在的个人电脑一般是使用32位的整数大小，在这张结尾的表3.3可以看到一些个例子。现在个人电脑产业也正在向64位处理器发展，那样也就可以使用更大的整数了。ISO&#x2F;ANSI C语言特别指出<code>int</code>的最小范围应该是-<strong>32767</strong>到<strong>32767</strong>，通常系统会专门拿出一个位来保存符号，第十五章描述这种了一般的方法。</p>\n<h4 id=\"3-4-1-1-声明int类型\"><a href=\"#3-4-1-1-声明int类型\" class=\"headerlink\" title=\"3.4.1.1 声明int类型\"></a>3.4.1.1 声明<code>int</code>类型</h4><p>正像你在第二章看到的，关键字<code>int</code>可以用来声明一个基本的整型变量。声明，首先是<code>int</code>，然后是变量的名称，最后是一个分号。要是声明多个变量的话，可以分别声明，也可以用逗号分隔，把一系列的变量名列出来，下面的声明方法都是合法的。</p>\n<p><img src=\"/img/valid_declaration.png\"></p>\n<p>你可能已经使用过分别声明变量的方法了，或者你已经尝试在一行中声明全部的变量了。效果都是一样的：就是对四个<code>int</code>大小的变量分配空间并与变量名相联系。</p>\n<p>这些声明语句创造了变量，但并没有给它们赋值，变量要如何得到值呢？你已经见过两种方法了，第一种是赋值语句</p>\n<p><img src=\"/img/assignments.png\"></p>\n<p>第二，变量也可以使用函数来赋值，比如说<code>scanf</code>函数。<br>现在我们来了解一下第三种方法吧。</p>\n<h4 id=\"3-4-1-2-变量初始化\"><a href=\"#3-4-1-2-变量初始化\" class=\"headerlink\" title=\"3.4.1.2 变量初始化\"></a>3.4.1.2 变量初始化</h4><p>对变量进行<em><strong>初始化</strong></em>也就是给变量赋起始值，或者初值。在C语言中，这可以作为声明的一部分，只需要在变量名后加上赋值运算符还有你想要赋给这个变量的值就可以了。下面是一些例子。</p>\n<p><img src=\"/img/initialization.png\"></p>\n<p>在最后一行，只有<code>cats</code>被初始化了，速读一遍，你有可能觉得dogs也会被赋值为94，所以还是最好避免把未赋值与已赋值的变量放在一行之中吧。</p>\n<p>简单来说，这些声明会为变量创造空间，并为它们贴上变量类型的标签，而且还可以给赋变量起始值。（见图3.4）</p>\n<p><img src=\"/img/DefinenInitial.png\" alt=\"图3.4\"></p>\n<h4 id=\"3-4-1-3-int型常量\"><a href=\"#3-4-1-3-int型常量\" class=\"headerlink\" title=\"3.4.1.3 int型常量\"></a>3.4.1.3 <code>int</code>型常量</h4><p>在上一个例子中各种各样的整数（21、32、14、94等），就是整型常量。当你书写一个没有十进制小数点并且没有指数的数时，C就会将这个数认作整型常量。因此，22与-44都是十进制整型常量，但是<code>22.0</code>与<code>2.2E1</code>就不是。C语言会把大多数整型认作<code>int</code>类型常量。但很大的数会有区别。看最后对于long常量与long long常量的描述就知道了。</p>\n<h4 id=\"3-4-1-4-打印int值\"><a href=\"#3-4-1-4-打印int值\" class=\"headerlink\" title=\"3.4.1.4 打印int值\"></a>3.4.1.4 打印<code>int</code>值</h4><p>你可以使用<code>printf()</code>函数来打印<code>int</code>类型的值，正像你在第二章看到的，%d符号可以在十进制整数被打印出来的地方作为占位符。%d的名称叫格式化符，因为它声明了<code>printf()</code>打印值的类型每一个在格式化字符串中的每一个<code>%d</code>都代表着一个<code>int</code>类型的值，它就在字符串后面的列表中。那个值可以是一个<code>int</code>类型变量代表的，也可以是一个<code>int</code>类型常量代表的，或者任何有<code>int</code>值的表达式。这样，你就有责任让格式化符与之后的列表中的值一致了，编译器并不会报出这种错误。图3.2就表示了一个初始化并且打印变量值，常量的值，还有简单表达式的值的程序，它也提示了你如果你不小心的话会发生什么。</p>\n<p><img src=\"/img/Listing3.2.png\" alt=\"图3.2\"></p>\n<p>编译完运行这个程序的结果是这样的。</p>\n<p><img src=\"/img/result1.png\"></p>\n<p>第一行输出，第一个<code>%d</code>代表着一个<code>int</code>类型变量<code>ten</code>第二个代表着常量2，第三个呈现的是<code>ten</code> - <code>two</code>的值。但第二行，使用的是<code>ten</code>这个变量代替了第一个<code>%d</code>但是之后的值全都是随机的，是从最近的两个内存空间中获取的值！（你回去的值有可能与这里显示的值相差很多，不仅内容不一样，而且不同的编译器对于这些内存区的管理方法也不一样。）</p>\n<p>你有可能对编译器为啥并不会捕捉到这个很明显的错误，还是怪<code>printf()</code>函数的原始设计吧。大多数函数都会获取一个值作为参数，编译器可以检查出来你使用的值是不是恰当，但是<code>printf()</code>可以获取一个、两个、三个或者更多的参数，那就让编译器无法使用常用的错误检测方法了。记住，一定要检查格式化符是不是与被显示的值匹配。</p>\n<h4 id=\"3-4-1-5-八进制与十六进制\"><a href=\"#3-4-1-5-八进制与十六进制\" class=\"headerlink\" title=\"3.4.1.5 八进制与十六进制\"></a>3.4.1.5 八进制与十六进制</h4><p>通常来说，C语言会认为整型常量是十进制数。但是八进制与十六进制也受到许多编程人员的欢迎。因为8与16都是2的幂，但10并不是，这些进制系统有时会为与计算机相关的值的表达提供便利。例如，数字65536经常会出现在16位的机器中，它只是10000的十六进制数，十六进制数中的每一位数都对应着实际的四个位。例如，十六进制数3就对应着0011，5就对应着0101，所以35就对应着0011 0101，53就对应着0101 0011。这种对应就会使十六进制与二进制的转换非常简单。但是电脑是怎么判断10000是什么进制的数字的呢？在C语言中，数字不同的前缀就显示了不同的进制，0x（0X）就意味着你正在使用十六进制值，所以16在十六进制下会被写作0x10或0X10。相似地，前缀0就表示你正在使用的是八进制值。例如，十进制数16在八进制数中就写为020，在15章我们会更加充分地讨论不同的数制。</p>\n<p>要知道的是不同的数制系统是为你提供便利的，它并不会影响数值的储存方式，也就是说，你可以写16、020或者0x10，这个数还是会以二进制的方式储存起来。</p>\n<h4 id=\"3-4-1-6-展示八进制与十六进制数\"><a href=\"#3-4-1-6-展示八进制与十六进制数\" class=\"headerlink\" title=\"3.4.1.6 展示八进制与十六进制数\"></a>3.4.1.6 展示八进制与十六进制数</h4><p>正像C语言能够让你以三种方式书写数字一样，它也可以让你以三种方式的任意一种展示数字。展示一个八进制整数可以使用%o，十六进制使用%x，如果你想显示前缀，你可以使用修饰符#，比如<code>%#o</code>，<code>%#x</code>，<code>%#X</code>，有了它们你就可以在数字前面显示0，0x，0X前缀。图3.3给出了一个小小的例子（想到你有可能必须加上一个<code>getchar()</code>，它会在一些IDE中防止程序立即关闭）。</p>\n<p><img src=\"/img/Listing3.3.png\" alt=\"图3.3\"></p>\n<p>编译运行过后结果是这样的。</p>\n<p><img src=\"/img/result2.png\"></p>\n<p>你可以看到相同的数字被以三种不同的数制打印出来了，<code>printf()</code>函数可以实现这种转化。<br>注意前缀只有加上#时才会出现。</p>\n<h3 id=\"3-4-2-其他整型\"><a href=\"#3-4-2-其他整型\" class=\"headerlink\" title=\"3.4.2 其他整型\"></a>3.4.2 其他整型</h3><p>当你正在学习C语言时，<code>int</code>类型有可能已经满足了你大部分的整型需求了。但为了内容的完整，我们会研究其他的类型。如果你喜欢的话，你可以只大体浏览一下这一部分，然后跳到对于<code>char</code>类型那一部分，然后如果有啥需要的可以再回来复习。</p>\n<p>C语言使用三个形容词关键字来修饰基本整型：<code>short, long, unsigned</code>下面是需要记住的一些点。</p>\n<ul>\n<li><code>short int</code>类型，或者直接<code>short</code>，会比<code>int</code>使用的内存更少，由此也就可以在只使用小的数字的时候节省一些空间。像<code>int</code>一样，<code>short</code>为有符号类型。</li>\n<li><code>long int</code>类型，或者直接写<code>long</code>，占用的内存会比<code>int</code>更多，因此可以让你表示更大范围的数字，像<code>int</code>一样，<code>long</code>为有符号类型。</li>\n<li><code>long long int</code>类型，或者<code>long long</code>（都是在C99标准下被引入的），会比<code>long</code>类型占用的内存更多，也就让你可以使用比<code>long</code>范围更大的数字。像<code>int</code>一样，<code>long long</code>是一个有符号的类型。</li>\n<li><code>unsigned</code>类型，或者写成<code>unsigned</code>，是为非负的变量而设置的，这种类型改变了可储存数字的范围，例如，16位的<code>unsigned int</code>可以表示0-65535的数字，就不是-32768-32767了，用来表示符号的那一位在无符号类型这变成了另一个可以表示数字的位，也就让数字的表示范围扩大了。</li>\n<li><code>unsigned long int</code>类型，或者<code>unsigned long</code>还有<code>unsigned short int</code>，或者<code>unsigned short</code>，在C90标准下都是可以被识别的，在C99标准下又添加了<code>unsigned long long int</code>类型，或者<code>unsigned long long</code>。</li>\n<li>为了让你的意图明显，关键字<code>signed</code>可以被用在任何有符号类型上，例如<code>short</code>, <code>short int</code>, <code>signed short</code>,<code>signed short int</code>都是一种类型。</li>\n</ul>\n<h4 id=\"3-4-2-1-声明其他整型\"><a href=\"#3-4-2-1-声明其他整型\" class=\"headerlink\" title=\"3.4.2.1 声明其他整型\"></a>3.4.2.1 声明其他整型</h4><p>其他整型与<code>int</code>类型的声明方式是相似的，<br>下面就展示了一些例子。<br>并不是所有的编译器都能识别最后三种类型，最后一个例子是C99标准新加进去的。</p>\n<p><img src=\"/img/othertypes.png\" alt=\"其他整型\"></p>\n<h4 id=\"3-4-2-2-为什么要用多种整型？\"><a href=\"#3-4-2-2-为什么要用多种整型？\" class=\"headerlink\" title=\"3.4.2.2 为什么要用多种整型？\"></a>3.4.2.2 为什么要用多种整型？</h4><p>为什么说<code>long</code>与<code>short</code>与<code>int</code>相比会使用不同的内存呢？因为C语言会确保<code>short</code>不会长过<code>int</code>，<code>int</code>也不会长过<code>long</code>，主要的目的就是为了适应不同类型的机器。例如在运行着Windows 3.1的IBM PC上，<code>int</code>与<code>short</code>都是16位的，而<code>long</code>是32位的，而在Mactonish Power PC上，<code>short</code>类型是16位的，而<code>int</code>和<code>long</code>类型是32位的。PowerPC G3&#x2F;G4中的Pentium芯片的字长是32位，因为这就可以让整型超过20亿（见表3.3），C语言在处理器&#x2F;操作系统的实现没有必要超出这个数值。因此，<code>long</code>与<code>int</code>大小是一样的。对于许多的使用过程，那个大小的整数是不需要的，所以节省内存的<code>short</code>就被创造了。但另一方面，原本的IBM PC只有16位的字长，那就意味着需要更长的<code>long</code>类型。</p>\n<p>现在64位的处理器都变得很常见了，比如IBM Itantium，AMD Opteron，还有PowerPC G5。因为64位整型的需要，<code>long long</code>类型也就应运而生。</p>\n<p>现在最常见的实践是把<code>long long</code>设置为64位，把<code>long</code>设置为32位，把<code>short</code>设置为16位，把<code>int</code>设置为16位或者32位，它的大小取决于电脑的自然字长。原则上，这四种类型可以代表四种不同的大小。</p>\n<p>C语言标准为确定每一种基本数据类型的最小尺寸提供了指引。<code>short</code>与<code>int</code>的最小范围是从-32,767到32,767，对应着16位的单元，而<code>long</code>类型的最小范围是-2,147,483,647到2,147,483,647，对应着32位的单元。（注意，为了易读，我们使用了逗号分开，但是C语言代码是不能写成这样的）。对于<code>unsigned short</code>与<code>unsigned int</code>，最小的范围是0到65535，而<code>unsigned long</code>的最小范围是0-4,294,967,295&#x2F;,<code>long long</code>类型为了迎合64位的需求，它的最小范围很大，是-9,223,372,036,854,775,807到9,223,372,036,854,775,807，而<code>unsigned long long</code>就是0到18,446,744,073,709,551,615.（对于那些检查写的对不对的人，下面是它的英文表示，但是谁要计数呢？）</p>\n<p><img src=\"/img/nonsense.png\" alt=\"(一脸认真)\"></p>\n<p>你会在什么时候使用这些不同的<code>int</code>类型呢？第一，考虑<code>unsigned</code>类型，使用它们计数是很好的，因为你不需要负数，而且<code>unsigned</code>类型比<code>signed</code>类型的范围更大，可以得到更大的整数范围。</p>\n<p>如果你需要处理超过了<code>int</code>类型的范围的数字，使用<code>long</code>类型，但是在<code>long</code>比<code>int</code>长的系统中，使用<code>long</code>会让计算变慢，所以没必要的话就不要用<code>long</code>，进一步说，如果你正在一个<code>int</code>与<code>long</code>类型长度一样的系统上写代码，而你又需要32位的整数，你就需要使用<code>long</code>而不是<code>int</code>了，那样程序才可以在转到16位机的时候正常运转。</p>\n<p>相似地，如果你需要64位整型数的时候就使用<code>long long</code>吧，一些电脑已经使用着64位的处理器，而且并且正在服务器、工作站甚至桌面的64位处理也正在变得越来越普遍。</p>\n<p>如果你需要节省内存空间的话，使用<code>short</code>来节省内存空间，比如如果你在一台<code>int</code>类型是32位的机器上，需要16位的值这种情况。通常只有当你的程序使用整型数组这种与系统的可用内存极其相关的情况下节省内存才是必须的。另一个使用<code>short</code>的原因是它有可能与被电脑的特定部分使用的硬件寄存器的大小相同。</p>\n<blockquote>\n<p><img src=\"/img/overflow.png\"><br>整型溢出。<br>当一个整型相对于它的类型太大了会怎么样呢？让我们把一个整型变量设置到它可能的最大值，并用它加一些数，看看会发生什么。<code>unsigned</code>与<code>\tsigned</code>类型都可以试试（<code>unsigned int</code>的格式化符是<code>%u</code>）<br>这就是系统给出的结果<br><img src=\"/img/flowresult.png\"><br><code>unsigned</code>类型好像汽车的里程计一样，当它到达了最大值，它就会返回到它的最小值，变量i也很相似，主要的区别是<code>unsigned</code>类型的<code>j</code>\t是以0开始的，但是<code>int</code>类型的<code>i</code>是以-2147483647开始的。<br>注意的是，你如果没有被告诉这个数据已经溢出了，你还是会不断地在这个问题上打转。<br>这里描述的行为是由C语言<code>unsigned</code>类型的规范控制的，标准并不规定<code>signed</code>应该行为如何，这里展示的行为也是通常会发生的，但是你以后会找到不一样的东西的。</p>\n</blockquote>\n<h4 id=\"3-4-2-3-long常量与long-long常量\"><a href=\"#3-4-2-3-long常量与long-long常量\" class=\"headerlink\" title=\"3.4.2.3 long常量与long long常量\"></a>3.4.2.3 <code>long</code>常量与<code>long long</code>常量</h4><p>一般地，当你在代码中使用2345这样的数字时，它会被储存为一个<code>int</code>类型的常量。那么如果你使用1000000这样不能被<code>int</code>储存下来的数字呢？编译器就会将它识别为<code>long int</code>，如果认为这个类型已经足够大了的话。如果比<code>long</code>类型的最大值还要大的话，C语言会将它当做<code>unsigned long</code>类型，如果那还不够的话，它就会把它当做<code>long long</code>类型或者<code>unsigned long long</code>，如果这些类型可以满足要求的话。</p>\n<p>八进制与十六进制的常量会被认作<code>int</code>类型，除非这个值太大，然后还是以上文的顺序依次递加。</p>\n<p>有些时候你有可能想让编译器把一个小点的数储存为<code>long</code>类型。如果你在编程的过程中需要外显地使用内存地址，例如在IBM PC上，就有可能有这样的问题。而且，一些基本的C语言函数是需要<code>long</code>类型的值的，你可以在数值加上后缀<code>l</code>或者<code>L</code>，第二种方式更好，因为看起来不像数字<code>1</code>。因此，一个有着16位大小的<code>int</code>与32位大小的<code>long</code>，会将<code>7</code>这个数储存在16位中，而将<code>7L</code>储存为32位中，而且这两个后缀对于八进制与十六进制都是适用的，像是020L与0x10L。</p>\n<p>相似地，在那些有<code>long long</code>类型的系统中，你就可以使用<code>ll</code>或者<code>LL</code>后缀，比如<code>3LL</code>，而且还可以使用<code>u</code>或者<code>U</code>来表示<code>unsigned long long</code>类型，就像<code>5ull</code>或者<code>10LLU</code>或者<code>9Ull</code>。</p>\n<h4 id=\"3-4-2-4-打印short-long-long-long与unsigned类型\"><a href=\"#3-4-2-4-打印short-long-long-long与unsigned类型\" class=\"headerlink\" title=\"3.4.2.4 打印short, long, long long与unsigned类型\"></a>3.4.2.4 打印<code>short, long, long long</code>与<code>unsigned</code>类型</h4><p>要打印一个<code>unsigned int</code>类型的数字，只需使用<code>%u</code>符号，<code>long</code>类型可以使用<code>%ld</code>，但如果你的机器中<code>int</code>与<code>long</code>是大小一致的，那<code>%d</code>就可以了，但是代码有可能在别的系统中就不能正常运作了，所以对<code>long</code>来说最好还是使用<code>%ld</code>吧，对于<code>x</code>与<code>o</code>都可以在前面加上<code>l</code>。因此对于十六进制的<code>long</code>类型数你会使用<code>%lx</code>，类似在八进制会使用<code>%lo</code>，需要注意的是即时C语言提供了大写的<code>L</code>后缀，但是在格式化符中，只能使用小写。</p>\n<p>C语言有几种额外的<code>printf()</code>格式，首先，你可以在使用<code>short</code>类型时在<code>%d</code>的<code>d</code>前加<code>h</code>来表示十进制的<code>short</code>整型，同理<code>%ho</code>也是可以的，而且<code>h</code>与<code>l</code>是可以再加上<code>u</code>表示无符号的。例如，你会使用<code>%lu</code>符号表示<code>unsigned long</code>类型，图3.4就提供了一个例子。支持<code>long long</code>的系统也可以使用<code>%lld</code>或者<code>%llu</code>分别表示有符号与无符号的<code>long long</code>整型，第四章会对格式化符进行更充分的阐述。</p>\n<p><img src=\"/img/Listing3.4.png\" alt=\"图3.4\"></p>\n<p>这是系统的输出：</p>\n<p><img src=\"/img/result3.png\"></p>\n<p>这个例子就显示出了使用错误的格式化符会有意想不到的后果。第一，注意到对于变量<code>un</code>使用的<code>%d</code>格式化符结果输出了一个负值，原因就是无符号与有符号数实际上是以相同的二进制排列被储存起来的（第15张会更详细地谈论这种属性），所以如果你告诉<code>printf()</code>函数这个数是没有符号的，与告诉它这个数是有符号的输出结果是不一样的。这种行为常会在你输入一个超限的数值时出现。小的整数，在两种格式化符之下都是一样的。</p>\n<p>第二，注意到无论你告诉<code>printf()</code>是<code>short</code>还是<code>int</code>类型，<code>short</code>变量<code>end</code>都是可以打印出正常值的。这就是因为当向函数输入一个参数的时候会自动将它转化为<code>int</code>类型，那么你就会问了:1.为什么这种转化会发生？2.<code>h</code>修饰符的用处在哪里？第一个问题的答案是<code>int</code>类型可以被电脑更加高效地处理。所以在<code>short</code>与<code>int</code>类型大小不同的机器上，有可能传递一个<code>int</code>值会更快。第二个问题的答案是你可以看看一个更加长的整型数如果被缩短为<code>short</code>类型了会看起来怎样。第三行的输出也为这一点提供了例证，当65537被写为32位二进制数时，它看起来是<code>00000000000000010000000000000001</code>这样子的，使用<code>%hd</code>格式化符会迫使<code>printf()</code>只看向最后的16个位，因此它会只打印<code>1</code>，相似的，最后一行的<code>verybig</code>使用<code>%ld</code>就会只看向最后的32位，而不是完全的位数。</p>\n<p>早些时候你已经了解标识符的数量与显示数字的数量匹配的重要性了，现下你也知晓了标识符的种类也要匹配。</p>\n<p><img src=\"/img/matchup.png\"></p>\n<p>匹配<code>printf()</code>函数的格式化符<br>记着要去检查一下你是不是对于每一个要在<code>printf()</code>中打印的值都给予了一个格式化符，并检查是不是每一个的格式化符都与显示的值的类型相互对应。</p>\n<h3 id=\"3-4-3-字符-char\"><a href=\"#3-4-3-字符-char\" class=\"headerlink\" title=\"3.4.3 字符 char\"></a>3.4.3 字符 char</h3><p><code>char</code>类型是用来储存像字母、标点符号这样的字符的，但是严格来讲它其实是一个整数类型。为什么？<code>char</code>这个类型实际上储存的是整数而不是字符，为了处理字符，电脑会使用数字编码来让某一个整数代表某一个字符。在美国最常用的字符编码表是ASCII编码表，它已经在书的前封的背面给出来了，是这本书使用的编码表。举些例子，<code>65</code>在ASCII码表中代表的是大写的<code>A</code>，所以如果需要储存字母<code>A</code>，只需要储存数字<code>65</code>即可，（许多IBM主机用的是不一样的编码系统，它叫做EBCDIC，但是准则都是一样的。但在美国以外的计算机系统使用的编码表有可能是完全不同的。）</p>\n<p>基础的ASCII码是从0到127的，这个范围小到一个字节就可以保存下来，<code>char</code>类型通常会被定义成8位的内存单元，所以它不仅仅可以储存下来基础的ASCII码。许多系统，如IBM PC与苹果公司的Macintosh，可以提供更大的ASCII码表（这两个系统是不一样的），但是还是在8位范围之内。更加普遍的，C语言会确保<code>char</code>类型的大小是足够储存系统中C语言实现的需要的基础字符的。</p>\n<p>许多的字符集会有不只127而是255分值，例如日本的kanji字符集，商业的Unicode协议为代表全世界的各种字符创造了一个系统，现在已经有96000个字符了。ISO（国际标准组织）与IEC（国际电子委员会）为字符集创造了ISO&#x2F;IEC10646标准。幸运的是，Unicode标准与ISO&#x2F;IEC10646标准是始终协调的。</p>\n<p>使用这些字符集的平台有可能会使用16位或者32位的<code>char</code>类型代表，C语言定义下<code>char</code>的长度是1个字节，现在在C语言的记录中，一个字节会是16位或者32位，而不是那些系统上的8位。</p>\n<h4 id=\"3-4-3-1-定义char类型变量\"><a href=\"#3-4-3-1-定义char类型变量\" class=\"headerlink\" title=\"3.4.3.1 定义char类型变量\"></a>3.4.3.1 定义<code>char</code>类型变量</h4><p>正像你会期望的，<code>char</code>类型变量与其他变量的定义方式相同，这里就是一些例子。</p>\n<p><img src=\"/img/chardef.png\"></p>\n<p>这几行代码创造了三个<code>char</code>类型的变量：<code>response</code>，<code>itable</code>与<code>latan</code>。</p>\n<h4 id=\"3-4-3-2-字符常量及其初始化\"><a href=\"#3-4-3-2-字符常量及其初始化\" class=\"headerlink\" title=\"3.4.3.2 字符常量及其初始化\"></a>3.4.3.2 字符常量及其初始化</h4><p>假定你想要初始化一个字符常量为大写字母A，电脑语言是要让事情变得简单起来的，你不需要记忆ASCII码，你也不会，你可以直接以下面的方式给<code>grade</code>变量赋值<code>&#39;A&#39;</code></p>\n<p><img src=\"/img/charassign.png\"></p>\n<p>被双单引号框定的单一字符就是C语言中的<em><strong>字符常量</strong></em>，当编译器看到了<code>&#39;A&#39;</code>，它会将A字符转化成相应的字符编码值，单引号是必须的，下面就是例子。</p>\n<p><img src=\"/img/chardeclare.png\"></p>\n<p>如果你遗漏了引号，那么编译器就会认为<code>T</code>是一个变量名，如果你使用双引号的话，它会认为你正在使用字符串，我们会在第四章讲解字符串。</p>\n<p>因为字符确实是以数字的形式被储存起来的，你还是可以使用数字编码为<code>char</code>类型变量赋值。</p>\n<p><img src=\"/img/numassign.png\"></p>\n<p>在这个例子中<code>65</code>是一个<code>int</code>类型的，但是因为这个值是小于最大的<code>char</code>类型值的，所以可以无误地赋给<code>grade</code>变量，因为65对应着ASCII码中的字母<code>A</code>，所以<code>A</code>就被赋给了<code>grade</code>变量。但注意，这个例子只是为了表示系统用的是ASCII码系统，但用<code>65</code>与<code>&#39;A&#39;</code>都是一样的，因此，使用字符常量要比使用数字编码是要好的。</p>\n<p>有点奇怪的是，C语言会将字符常量当做<code>int</code>类型常量而不是<code>char</code>来看待。例如，在32位使用ASCII字符编码，<code>char</code>类型为8位的系统中，这一行代码：</p>\n<p><img src=\"/img/gradeb.png\"></p>\n<p>就会将<code>&#39;B&#39;</code>呈现为66这个值储存起来，但是<code>grade</code>是以8位单元储存的66，这种特点就会使字符常量不能存放多个字符，像<code>&#39;FATE&#39;</code>这样，因为4个单独的ASCII码被储存在32位的单元中，但是试图将这样一个字符常量赋给<code>char</code>类型变量会导致只有最后的8位被使用，也就是变量被赋给的是<code>&#39;E&#39;</code>。</p>\n<h4 id=\"3-4-3-3-不会被打印出来的字符\"><a href=\"#3-4-3-3-不会被打印出来的字符\" class=\"headerlink\" title=\"3.4.3.3 不会被打印出来的字符\"></a>3.4.3.3 不会被打印出来的字符</h4><p>单引号对符号、数字还有标点符号都是适用的，但是如果你浏览过这本书前封里的那张表，你会看到一些ASCII字符是打印不出来的。例如，一些代表着回车或者跳到下一行，又或是会让终止铃响的符号，这些符号是怎么被表示的呢？C语言提供了三种方法：</p>\n<p>第一种方法就是我们已经提到过的，使用ASCII表编码的方法。例如，蜂鸣符对应的值就是7，所以你可以这样写。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> beep = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n\n<p>表示这些字符的第二种方法是使用特殊的符号序列，它们叫做<em><strong>转义序列</strong></em>，表3.2给出了转义序列与它们的含义。</p>\n<p><img src=\"/img/Table3.2\" alt=\"表3.2\"></p>\n<p>在赋值给字符常量的时候，转义序列必须要由单引号框定，例如，你可以这样赋值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> nerf = <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后打印变量<code>nerf</code>，打印器或者屏幕上的行就会往前一行（回车）。</p>\n<p>现在我们可以看看每一个转义序列是做什么的，警告符<code>\\a</code>是在C90标准中添加的，它会生成一条有声有色的警告，警告的类型因硬件而定，一般蜂鸣声是最常见的（在有些系统中，警告符是没有用的。）ANSI标准规定了警告符是不能改变活跃位置的。活跃位置这个概念指的是在显示设备（如屏幕、电报机、打印机等等）上下一个字符会出现的地方。简单来说，它就是屏幕上你已经用惯了的光标的总称。在程序中使用警告符最终只会发出蜂鸣声，但并不会移动屏幕上的光标。</p>\n<p>然后，是<code>\\b, \\f, \\n, \\r, \\t</code>还有<code>\\v</code>这些转义序列，它们都是常见的输出设备的控制符，它们在影响活跃位置上很出色，回车(<code>\\b</code>)，会将活跃位置往前挪一个空格。换页符(<code>\\f</code>)会将活跃位置转移到下一页的开头。换行符(<code>\\n</code>)会将活跃位置切换到下一行的开始，(<code>\\r</code>)，回车符(<code>\\r</code>)会让活跃位置回到一行的开头位置，水平制表符(<code>\\t</code>)会将活跃位置向右移动一个<code>Tab</code>键的位置（通常，这些是以字符位置1、9、17、25这样的格式），垂直制表符(<code>\\v</code>)，会让活跃位置移动到下一个垂向的<code>tab</code>位置。</p>\n<p>这些转义序列并不一定在所有的显示设备中起作用。例如，换页符与垂直制表符在电脑屏幕上只会打印出来一个奇怪的字符，并没有任何光标的移动。但是如果在打印机上使用就可以按照描述工作了。</p>\n<p>最后的三个转义序列（<code>\\\\, \\&#39;, \\&quot;</code>），能够以字符常量的形式让你使用<code>\\, &#39;, &quot;</code>（因为这些符号是作为<code>printf()</code>函数的一部分用来定义字符常量的，如果你要把它们字面上打印出来，那将会非常令编译器困惑。）假设你想要打印下来下面的这一行字。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gramps sez, <span class=\"string\">&quot;a \\ is a backslash.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>就需要用下面代码的形式来写。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Gramps sez, \\&quot; a \\\\ is a backslash.\\&quot;\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>最后的两种形式（<code>\\0oo, \\xhh</code>）是ASCII码的特殊标识，是要以八进制ASCII码的形式来代表字符，在前面需要加上<code>\\</code>然后用单引号来框定整个字符，例如，如果你的编译器不能识别警告符，你就可以使用下面的ASCII码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beep = <span class=\"string\">&#x27;\\007&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以省略前面的0，所以<code>&#39;\\07&#39;</code>与<code>&#39;\\7&#39;</code>都是可以的。这个符号会让数字被理解成八进制，尽管前面没有0。</p>\n<p>从C90开始，C语言提供了第三种选择，使用十六进制的字符常量，这样说来，斜杠后面是<code>x</code>或者<code>X</code>与1到3位的十六进制数。例如，Ctrl+P符号在ASCII十六进制符码里就是10（十进制下就是16），所以它是可以被表达为<code>&#39;\\x10&#39;</code>或者<code>\\&#39;x010&#39;</code>的，图3.5展示了一些整型的代表。</p>\n<p><img src=\"/img/Figure3.5.png\" alt=\"图3.5\"></p>\n<p>当你使用ASCII码的时候，要注意数字与字符之间的差异。例如，字符4在ASCII中的值是52,<code>&#39;4&#39;</code>是一个符号而不是一个数字。</p>\n<p>现下，你可能有这几个问题：</p>\n<ul>\n<li><em><strong>为什么转义序列在最后一个例子中没有用单引号括起来？</strong></em><br>（<em><strong>最后一个例子<code>printf(&quot;Gramps sez, \\&quot; a \\\\ is a backslash.\\&quot;\\n&quot;);</code><em><strong>）。<br>  只要是一个字符，不管它是不是转义字符，当它是字符串的一部分的时候，都是需要用双引号框起来的，而不是单引号，但单个字符是无一例外由单引号括起来的。由双引号括起来的是</strong></em>字符串</strong></em>。（第四章会讲到）相似地，不属于转义字符的数字会被当做一般字符打印出来（如<code>printf(&quot;Hello!7\\n&quot;);</code>打印出来的是<code>Hello7</code>，但<code>printf(&quot;Hello!\\007&quot;);</code>输出的是一行<code>Hello！</code>加上一声警告）。</li>\n<li><em><strong>我应该什么时候使用转义序列？什么时候使用对应的ASCII码？</strong></em><br>  如果你需要使用其中一个转义序列，比如说<code>&#39;\\f&#39;</code>，或者作为替代的<code>&#39;\\014&#39;</code>，最好使用前者。首先，这种表示方法更容易记忆：其次，它更容易在机器之间转移，如果其他系统不适用ASCII码，<code>&#39;\\f&#39;</code>还是可以使用。</li>\n<li>如果我需要使用数字变啊，为什么使用的是<code>&#39;\\032&#39;</code>而不是<code>032</code>？<br>  第一，使用转义字符的方式会让阅读你代码的人轻松地知道这是一个字符编码。第二，如<code>\\037</code>这样的转义序列是可以内嵌于C语言字符串的（？[就像<code>\\007</code>一样])。</li>\n</ul>\n<h4 id=\"3-4-3-4-打印字符\"><a href=\"#3-4-3-4-打印字符\" class=\"headerlink\" title=\"3.4.3.4 打印字符\"></a>3.4.3.4 打印字符</h4><p><code>printf()</code>函数可以使用格式化符<code>%c</code>表示一个字符将要在这个位置被打印。你想到字符常量是1位的整型值，因此你也可以用<code>%d</code>符号，那样的话你就会得到一个整数，<code>%c</code>格式化符会告诉<code>printf()</code>函数来打印那个编码值对应的字符，例3.5就以两种方式展示了<code>char</code>类型变量。</p>\n<p><img src=\"/img/Listing3.5.png\" alt=\"例3.5\"></p>\n<p>尝试运行，输出是这样的。</p>\n<p><img src=\"/img/C67.png\"></p>\n<p>当你使用程序的时候，不要忘记在写完了字符之后按下回车键。<code>scanf</code>函数会接收你写下的字符，然后取地址符(<code>&amp;</code>)会将字符赋给字符变量<code>ch</code>。接下来，<code>printf()</code>函数会打印两次<code>ch</code>这个变量，第一次是以字符的形式打印的（使用<code>%c</code>格式化符的效果），第二次是以十进制整数的形式（同理，<code>%d</code>的效果）。需要注意，<code>printf()</code>的标识符会决定数据被如何呈现，呈现方式与数据的储存方式没有关系。</p>\n<p><img src=\"/img/Figure3.6.png\" alt=\"数据储存与输出\"></p>\n<h4 id=\"3-4-3-5-有符号还是无符号？\"><a href=\"#3-4-3-5-有符号还是无符号？\" class=\"headerlink\" title=\"3.4.3.5 有符号还是无符号？\"></a>3.4.3.5 有符号还是无符号？</h4><p>有的C语言实现里会使<code>char</code>是一个有符号的类型，那也就意味着<code>char</code>可以接受从-128到127的值。其他的C语言实现会让<code>char</code>是一个无符号的类型，那么它的范围就变成了0到255，你的编译器的使用手册应该会告诉你<code>char</code>是什么类型，或者你可以看看<code>limits.h</code>头文件，下一章会讲述。</p>\n<p>在C90标准下，C语言允许你使用关键字<code>unsigned</code>与<code>signed</code>来修饰<code>char</code>，那样的话不管原本的<code>char</code>是有符号还是无符号。你都可以任意变化它们的类型。它们在处理小范围的十进制整数时是很有用的。要是只是为了使用字符，只使用<code>char</code>就可以了。</p>\n<h3 id=\"3-4-4-Bool类型\"><a href=\"#3-4-4-Bool类型\" class=\"headerlink\" title=\"3.4.4 _Bool类型\"></a>3.4.4 <code>_Bool</code>类型</h3><p><code>_Bool</code>类型是C99标准添加的，它们是被用来代表布尔值的，也就是逻辑上的<code>true</code>与<code>false</code>。因为C语言是使用0表示<code>false</code>，用1表示<code>true</code>的，所以布尔类型实际上只是一个整型，但是只需要一位的内存，因为要储存0与1一位就足够了。</p>\n<p>程序会使用布尔值来选择下一步运行哪个代码，代码执行会在第六章（C语言控制语句：循环）与第七章（C语言控制语句：分支结构与跳跃结构）更详细地讲到，所以我们到那个时候再讨论这个问题。</p>\n<h3 id=\"3-4-5-可转移的类型：inttypes-h\"><a href=\"#3-4-5-可转移的类型：inttypes-h\" class=\"headerlink\" title=\"3.4.5 可转移的类型：inttypes.h\"></a>3.4.5 可转移的类型：<code>inttypes.h</code></h3><p>还有更多的整数类型吗？没有了，但是还有更多你可以使用与已经存在的类型的名字。你或许会认为你已经看到的整型名已经很多了，但是原本的名字确实存在问题。知晓一个变量是<code>int</code>并不会让你了解它会占用多少内存，除非你检查了系统的描述文件。为了解决这个问题，<code>int16_t</code>可以声明一个16位的有符号整型，<code>uint32_t</code>声明了一个32位的无符号类型。</p>\n<p>要让这些名字可用，你需要包含一个<code>inttypes.h</code>头文件（注意在这一版时候已经有了，但是一些编译器上还不支持这个功能），这个文件使用了<code>typedef</code>（第一次讲到是在第五章：运算符、表达式与语句），来创造新的类型名。例如，它会让<code>uint32_t</code>成为基本类型的一种别名或者同义替换，有可能是<code>unsigned int</code>也有可能是<code>unsigned long</code>。你的编译器会提供一个与你的计算机系统协调的头文件，这些新的设计被称为<em><strong>精确长度类型</strong></em>，例如，<code>int_least8_t</code>会是最小的类型，它可以承载8位的有符号整型值。如果某个系统上最小的类型是8位的。<code>int8_t</code>类型是不会被定义的，但<code>int_least8_int</code>是可以被定义的，或许会被实现为16位的整型。</p>\n<p>当然，一些编程人员会更关心速度而不是空间。对于它们，C99定义了允许快速计算的一系列类型，它们被称为<em><strong>最快最小长度类型</strong></em>，例如，<code>int_fast8_t</code>会被定义为你的系统上能够最快运算的8位有符号值。</p>\n<p>最后，对于其他的编程人员，只有系统上最大的一些整型才有用，<code>intmax_t</code>就代表了那种类型，它可以储存任何合法的有符号整型值，同样，<code>uintmax_t</code>会代表可用的最大的无符号类型。这些类型有时是比<code>long long</code>或者<code>unsigned long</code>还要长的，因为C语言实现是准许定义超过需要的类型的。</p>\n<p>C99不仅提供了这些新的而且可运输的类型名，它还有有利于输入输出的符号表示。比如说，<code>printf()</code>对于每一种类型都需要特别的修饰符，所以你要打印<code>int32</code>，你要使用的是<code>%d</code>还是<code>%ld</code>？不同的机器的标识符并不一样，但没问题，C99标准下是有字符串宏命令来打印这些值的，我们会在第四章详细讲述的。例如，<code>inttype.h</code>头文件会将字符中的<code>PRId16</code>作为对于不同对应的类型的合适的格式化符。（例如hd（<code>short</code>）或者d），例3.6是一个讲述了如何使用可运输类型与相对应的格式化符的简单的例子。</p>\n<p><img src=\"/img/Listing3.6.png\" alt=\"例3.6\"></p>\n<p>在最后的<code>printf</code>语句中，<code>PRId16</code>被<code>inttypes.h</code>对<code>hd</code>的类型定义替换了，把这一行代码变成了这个样子。</p>\n<p><img src=\"/img/turning1.png\"></p>\n<p>但是C语言需要连贯的字符串，所以引号需要是连续的，然后这一行就变成了这个样子。</p>\n<p><img src=\"/img/turning2.png\"></p>\n<p>这就是输出，注意这个例子也使用了<code>\\&quot;</code>转义字符来打印双引号。</p>\n<p><img src=\"/img/out3.png\"></p>\n<p>参考单元VI“更多的整型”提供了<code>inttypes.h</code>头文件添加的内容的完整解释，也列举了所有的格式化宏。</p>\n<p><img src=\"/img/C99sup.png\"><br>【C99支持】<br>编译器供应商已经开始以不同的速度与顺序开始实现C99的新特性了，但在这本书出来的时候，一些编译器还没有实现<code>inttypes.h</code>的头文件与特征。</p>\n<h3 id=\"3-4-6-float-double与long-double类型\"><a href=\"#3-4-6-float-double与long-double类型\" class=\"headerlink\" title=\"3.4.6 float, double与long double类型\"></a>3.4.6 <code>float, double</code>与<code>long double</code>类型</h3><p>对于大多数的软件开发项目来说，这些多种多样的整型已经能够很好地满足要求了。但是，对于财务或者面向数学的程序，我们通常会使用<em><strong>浮点数值</strong></em>，在C语言中，这些数字就对应着<code>float, double, long double</code>这几种类型，对应着FORTRAN与Pascal语言中的<code>real</code>类型。使用浮点数，正像上文所说，能够让你呈现更大范围的数字。包括十进制小数值。浮点数值的表示与<em><strong>科学计数法</strong></em>是很相似的，那是科学家用来表示非常大或者非常小的数字的一种体系。</p>\n<p>在科学计数法中，数字会被表示成十进制数乘10的整数幂，这里就是一些例子。</p>\n<p><img src=\"/img/sciennotation.png\"></p>\n<p>第一列是通常的表示方法，第二列是科学计数法的表示，第三列是质数的表示方法，或者说是<em><strong>e - notation（e表示法）</strong></em>，通常是给计算机或者计算机写的，在e的后面是10的指数，图3.7展示了更多的浮点表示法。</p>\n<p>C语言标准规定了<code>float</code>类型应该至少能够代表6位有效数字并且范围在10的-37次方到37次方。第一个要求的意思是，比如一个<code>float</code>必须要精确地表示至少前六位有效数字，就像33.333333。如果你喜欢使用较大或者较小数字（2.0e30（太阳质量）或1.6e-19（元电荷））的话，第二条要求会为你提供方便。通常，系统会使用32位类储存一个浮点类型的数字，8位用来给予指数值与符号，24位来表示非指数部分，叫尾数或者有效数字与它的符号。</p>\n<p><img src=\"/img/Figure3.7.png\" alt=\"一些浮点数表示\"></p>\n<p>C语言也有一个<code>double</code>（双（double）精度）浮点型，<code>double</code>类型与<code>float</code>类型需要的最小值是一样的，但是它把最小值的有效数字位数拓展到了10位。通常的<code>double</code>表示会使用64位而不是32位，一些系统会使用32个位来表示非指数部分，这也就增加了数字有效的有效数字位数，减少了取整错误。其他的系统会使用一些位储存更大的指数，这也就增加了可以容纳数字的范围。每一张方法都至少有13位的有效数字，不只能满足最小标准的要求。</p>\n<p>C语言还允许你使用一种浮点类型：<code>long double</code>，目的就是进一步增加<code>double</code>类型的准确度。但是C语言只保证<code>long double</code>至少与<code>double</code>类型的精度是一样的。</p>\n<h4 id=\"3-4-6-1-声明浮点变量\"><a href=\"#3-4-6-1-声明浮点变量\" class=\"headerlink\" title=\"3.4.6.1 声明浮点变量\"></a>3.4.6.1 声明浮点变量</h4><p>浮点变量与它们的整型兄弟的声明与定义的方式相似，这里是一些例子，</p>\n<p><img src=\"/img/floatdeclare.png\"></p>\n<h4 id=\"3-4-6-2-浮点常量\"><a href=\"#3-4-6-2-浮点常量\" class=\"headerlink\" title=\"3.4.6.2 浮点常量\"></a>3.4.6.2 浮点常量</h4><p>当你书写一个浮点常量时，你会有很多的选择，形式是很多，有符号的一串数字。包括十进制的小数点，或是由e或者E跟着的10的指数。这里是两个合法的声明浮点类型的例子。。</p>\n<p><img src=\"/img/twoexam.png\"></p>\n<p>你可以遗漏正号，没有关系（2E5）或者可以遗漏指数部分（19.28），但是并不能同时存在。你可以遗漏小数部分或者整数部分，但也不能全都没有（那也不剩什么了。）下面是更多的合法的浮点常量。</p>\n<p><img src=\"/img/morevalid.png\"></p>\n<p>在使用浮点常量的时候，不要乱添加空格。</p>\n<p><img src=\"/img/nospaces.png\" alt=\"错的\"></p>\n<p>一般来说，编译器会认为浮点常量都是<code>double</code>精度的，假设<code>some</code>是一个<code>float</code>类型的变量，并且你有下面的一行代码。</p>\n<p><img src=\"/img/codeline.png\"></p>\n<p><code>4.0</code>与<code>2.0</code>都是以<code>double</code>类型储存起来的，一般每一个使用64位，结果是使用浮点运算获得的，而且只有结果转换成了正常的<code>float</code>大小范围内才可以使用<code>float</code>。这也就为运算提供了准确度，但是会让你的程序变慢。</p>\n<p>C语言还是你能够超越默认方法，你可以使用f或者F后缀来让编译器把一个浮点常量储存为<code>float</code>类型，比如<code>2.3f</code>与<code>9.11E9F</code>还有<code>l</code>或者<code>L</code>后缀，可以储存为<code>long double</code>类型，例如<code>54.3l</code>，<code>4.23e4L</code>。注意的是，比起<code>l</code>，<code>L</code>更不容易被看成<code>1</code>，如果浮点数没有后缀，它的类型就是<code>double</code>。</p>\n<p>C99添加了表示浮点数的另一种方式，它是使用十六进制来表达的（0x或者0X加上十六进制数）。那样指数就是<code>p</code>或者<code>P</code>而不是<code>e</code>或者<code>E</code>了，指数是2的，也不再是10的了。这就是数字看起来的样子。</p>\n<p><img src=\"/img/lookslike.png\"></p>\n<p><code>a</code>是十进制的10，<code>.1f</code>是1&#x2F;16加上15&#x2F;256，然后<code>p10</code>是2的10次方，或者1024，用十进制表示这就是10364.0。</p>\n<p>并不是所有的编译器都已经支持C99的特性了。</p>\n<h4 id=\"3-4-6-3-打印浮点数值\"><a href=\"#3-4-6-3-打印浮点数值\" class=\"headerlink\" title=\"3.4.6.3 打印浮点数值\"></a>3.4.6.3 打印浮点数值</h4><p><code>printf()</code>函数会使用<code>%f</code>格式化符来打印<code>float</code>与<code>double</code>类型的数值，这个符号使用的是十进制小数符的表示方法，还可以使用<code>%e</code>来使用指数表示法来打印它们，如果你的系统支持C99中提供的小数的十六进制格式，你就可以使用<code>a</code>或者<code>A</code>代替<code>e</code>与<code>E</code>。<code>long double</code>类型是以<code>%Lf</code>或者<code>%Le</code>与<code>%La</code>标识符来分别使用这三种方式的。需要注意的是，<code>float</code>与<code>double</code>都可以使用<code>%f, %e, %a</code>标识符来输出。这是因为当一个<code>float</code>类型的变量作为语句传递到任何函数时，C语言会自动把它转化成<code>double</code>类型，而不是它本来的类型，比如说<code>printf()</code>函数就是一个例子。例3.7说明了这种行为。</p>\n<p><img src=\"/img/Listing3.7\" alt=\"例3.7\"></p>\n<p>这里是输出：</p>\n<p><img src=\"/img/out1.png\"></p>\n<p>这个例子说给出了默认的输出，下一章会讨论如何通过设置输出域长度与十进制的位权数，控制输出的外形。</p>\n<h4 id=\"3-4-6-4-浮点上溢与下溢\"><a href=\"#3-4-6-4-浮点上溢与下溢\" class=\"headerlink\" title=\"3.4.6.4 浮点上溢与下溢\"></a>3.4.6.4 浮点上溢与下溢</h4><p>可能最大的<code>float</code>类型就是值大概是3.4E38，然后你执行了下面的代码。</p>\n<p><img src=\"/img/toobig.png\"></p>\n<p>输出（个人测试）</p>\n<p><img src=\"/img/INF.png\"></p>\n<p>发生了什么？这就是<em><strong>溢出</strong></em>的一个例子-运算得出的结果大到无法表示。对于这种情况，这种行为之前是没有被定义的，但是现在C语言指定<code>toobig</code>是一个几乎代表<em><strong>无限</strong></em>的数字，<code>printf()</code>就会显示<code>inf</code>（infinity）（或者那个样子的一些变体）</p>\n<p>那么如果是要分辨非常小的数字呢？这是会遇到更多的情况。你可以记起<code>float</code>是以指数部分与数字部分（或尾数）来储存的。如果会有一个数字有着最小的指数与最小的值，而且仍然可以使用所有可以使用的位来表达尾数，在<code>float</code>的精度范围内表示，这就是<code>float</code>类型下的最小值。现在我们把它除2，一般地，这会减少指数，但是指数也是能够表达的最小值了。所以就要到尾数的空余位那里减了，把第一位清空，然后丢掉最后的二进制值，类比一下就是，用四位有效数字的10进制值，比如<code>0.1234E-10</code>，除10，结果就是<code>0.01234E-10</code>，你就可以得到答案了，但是你会在这个过程中丢掉一个数字。这种情况就叫做下溢，C语言对于失去完全精度的浮点数值叫做<em><strong>subnormal</strong></em>（反常值）。所以把最小的正常浮点值除2就会有反常值。如果你除了一个太大的数字，你就会失去所有的精度，最后只剩下0，C语言库现在提供了函数来检查是否你的运算产生了反常数值。</p>\n<p>这里还有另一种特别的浮点值，<code>NaN</code>。例如你给予<code>asin()</code>函数一个名字它会返回所给数值的sin值，但是sin的数值并不能大于1，所以函数对于大于1的数值是未定义的，在这种情况下函数就会返回<code>NaN</code>值，那会被<code>printf</code>打印为<code>nan</code>、<code>NaN</code>或者相似的东西。</p>\n<p><img src=\"/img/drop4in5.png\" alt=\"四舍五入问题\"><br>拿一个数字，加1，然后减去原来的数，你会得到几？肯定是1是吧？像下面的浮点运算给予了你不同的答案。</p>\n<p>输出是这个样子的：</p>\n<p><img src=\"/img/alldevices.png\"></p>\n<p>这三种奇怪的结果的原因是电脑并不能够跟踪需要多少十进制空间来进行恰当的运算，2.0e20是2后面跟着20个0，通过加1的操作，你要改变这个数字的第21位数字，要正确地执行这个操作，程序需要能够储存21位数字的类型，<code>float</code>类型数通常只是六位或者七位数带着指数这个范围（最后的一位只能是0，不能改变）所以这种尝试在劫难逃。另一方面，如果你使用2.0e4的话你就可以得到正确的结果，因为你改变的是第5位数，<code>float</code>类型的精度允许你这样做。</p>\n<h3 id=\"3-4-7-复数与虚数类型\"><a href=\"#3-4-7-复数与虚数类型\" class=\"headerlink\" title=\"3.4.7 复数与虚数类型\"></a>3.4.7 复数与虚数类型</h3><p>许多科学与工程运算会使用复数与虚数，C99为这些数提供了支持，（with some reservations），它是一个独立的实现，就像内置预处理命令一样，不需要其他类型的支持。（VCR芯片很可能并不需要复数来工作）。并且，更一般地。虚数类型是可选择的。简单来说，有三种复数类型，<code>float_Conplex，_Complex</code>与<code>long double _Complex</code>，举个例子，一个<code>float _Complex</code>变量，会包含两个<code>float</code>类型的值，一个代表复数的实部，另一个代表虚部。相思地，有三种虚数类型，它们叫做<code>float _Imaginary, double _Imaginary</code>与<code>long double _Imaginary</code>。</p>\n<p>包含<code>complex.h</code>头文件可以使你把<code>_Complex</code>与<code>_Imaginary</code>分别更换为<code>complex</code>与<code>imaginary</code>。而且还能够让你使用I来代表-1的平方根。</p>\n<h3 id=\"3-4-8-超越基本类型\"><a href=\"#3-4-8-超越基本类型\" class=\"headerlink\" title=\"3.4.8 超越基本类型\"></a>3.4.8 超越基本类型</h3><p>这样我们已经讲完了一系列基本的数据类型了，对于你们其中一些人来说，数据类型可能很多，还有一些人可能会想着还需要其他的类型，比如说字符串类型。但C语言并没有。但是还是能够很好的处理字符串，你会在第四章第一次见到字符串。</p>\n<p>C语言确实有其他的类型，他们是从基本类型中衍生出来的。这些类型包括数组、指针、结构体、联合体。即使它们都是后面章节才要讲到的，我们已经在这一章的例子中已经偷摸添加了一些关于指针的东西了。（指针会指向变量或者其他数据对象的地址，<code>scanf()</code>中使用的<code>&amp;</code>前缀就会创造一个指针，他会告诉<code>scanf()</code>在哪储存信息）</p>\n<p><img src=\"/img/basicdata.png\"><br><strong>总结：基本数据类型</strong><br>    <strong>关键字</strong>：<br>    基本的数据类型是由11个关键字组成的：<code>int, long, short, unsigned, char, float, double, signed, _Bool, _Complex, _Imaginary</code><br>    <strong>有符号整型</strong>：<br>    可以是整数值也可以是负值<br>    1. <code>int</code>- 系统给定的基本整型。C语言保证<code>int</code>至少有16位。<br>    2. <code>short</code>或<code>short int</code> - 最大的短整型不大于最大的<code>int</code>，并有可能更小，C语言保证<code>short</code>类型至少有16位。<br>    3. <code>long</code>或<code>long int</code> - 能够保存至少<code>int</code>的最大值大小的数，可以更大。C语言会确保<code>long long</code>类型至少有32位。<br>    4. <code>long long</code>或<code>long long int</code> - 这个类型至少能够保存<code>long</code>类型数的最大范围，可以更大，<code>long long</code>类型最小64位。</p>\n<p>通常，<code>long</code>类型是比<code>short</code>类型更短的，<code>int</code>会与他们之中的一个一样大。例如，以DOS系统为基础的PC系统，<code>short</code>是16位长的，而<code>int</code>是32位长的，以Windows 95为基础的系统会提供16位的<br><code>short</code>，而<code>long</code>与<code>int</code>类型是32位的。</p>\n<p>如果你喜欢的话，你可以在任何有符号类型前使用<code>signed</code>关键字，将它们有符号这个事实显露出来。<br><strong>无符号整型：</strong><br>    这些类型只能从0到整数，因为去掉了符号位，这种类型的范围得到了扩大，使用关键字<code>unsigned</code>可以把你想要的类型变为无符号类型：比如<code>unsigned int, unsigned long, unisgned short.</code>单个的<code>unsigned</code>与<code>unisgned int</code>是一样的。<br><strong>字符：</strong><br>    它们是像<code>A, &amp;</code>这样的印刷字符。在定义上，字符类型会使用1个字节的内存来代表一个字符。在以往，字符字节大多数是8位，但现在它可以是16位或者更大，可以迎合使用的基准字符集的大小。<br>        <strong>char</strong> - 这种类型的关键字，一些实现中会使用有符号的<code>signed char</code>，但其他还是使用无符号字符。C语言允许你使用<code>signed</code>或者<code>unsigned</code>来划定你想要的类型。<br><strong>布尔类型：</strong><br>    布尔值代表<code>true</code>与<code>false</code>，C语言会使用0与1代表这两个值。<br>        <strong>_ Bool</strong> - 是这种类型的关键字，它是一个无符号整型，只需要保存0与1这两个值的内存。<br><strong>实数浮点型：</strong><br>    可以正数、负数或者零。<br>        [<code>float</code>] 是系统的基本浮点类型，可以至少呈现6位精确的有效数字。<br>        [<code>double</code>] 一种（可能是）更大的浮点储存单元，允许更大的有效数字位数（至少10位，通常会更多。）而且有可能比float也有更多的指数位数。<br>        [<code>long double</code>] 一种（可能是）更大的浮点储存单元，它可能允许更多的有效数字位数，也有可能有着比<code>double</code>类型更大的指数部分。<br><strong>复数与虚数浮点型：</strong><br>    虚数类型是可以选择的，实部与虚部是基于实数类型的：<br>        <code>float _Complex</code><br>        <code>double _Complex</code><br>        <code>long double _Complex</code><br>        <code>float _Imaginary</code><br>        <code>double _Imaginary</code><br>        <code>long double _Imaginary</code></p>\n<p><img src=\"/img/Summary.png\"></p>\n<p><strong>总结：如何声明一个简单的变量</strong></p>\n<ol>\n<li>选择你需要的类型</li>\n<li>使用允许的字符为你的变量起个名字</li>\n<li>使用以下形式的声明语句<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//type-specifier variable-name;</span></span><br><span class=\"line\"><span class=\"comment\">//类型标识符 变量名;</span></span><br><span class=\"line\"><span class=\"type\">int</span> Iint1;</span><br></pre></td></tr></table></figure></li>\n<li>你可以通过用逗号把变量名隔开来声明多个变量，下面就是一个例子。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> ch, init, ans;</span><br></pre></td></tr></table></figure></li>\n<li>你可以在声明语句中对变量进行初始化：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> mass = <span class=\"number\">6.0E24</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-4-9-类型大小\"><a href=\"#3-4-9-类型大小\" class=\"headerlink\" title=\"3.4.9 类型大小\"></a>3.4.9 类型大小</h3><p>表3.3与3.4展示了一些C语言环境下的类型大小（在一些环境中，你可以选择）你的系统是什么样子的？尝试运行例3.8中的程序，你会弄明白的。</p>\n<p><img src=\"/img/Twotables.png\" alt=\"表3.3与3.4\"><br>（分别是整型与浮点型的大小。）</p>\n<p>对于每一种类型，最上面的一行是有效数字的位数，第二行是指数的范围（十进制）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//(例 3.8)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*C99为大小提供了%zd格式化符*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type int has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type char has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type long has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type double has a size of %u bytes.\\n&quot;</span>, <span class=\"keyword\">sizeof</span>(<span class=\"type\">double</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>C语言有一种内置的运算符，它叫<code>sizeof()</code>，它会给出以比特为单位的大小范围。（一些编译器需要<code>%lu</code>而不是<code>%u</code>来打印<code>sizeof</code>数值，这是因为C语言对于<code>sizeof</code>用来报告的真实的无符号整型是有多个范围的。C99对于这种类型给出了<code>%zd</code>标识符，如果编译器支持的话你应该使用这个。）例3.8的输出是这个样子的。</p>\n<p><img src=\"/img/sizes.png\"></p>\n<p>这个程序只发现了4种类型的范围，但是你可以简单修改一下这个程序来找寻你感兴趣的任何一种类型，要注意的是<code>char</code>类型的大小一定是1个字节，因为C语言对于<code>char</code>类型定义的就是一个字节。所以在有16位的<code>char</code>与64位的<code>double</code>的系统上，<code>sizeof</code>会报告<code>double</code>类型有4个字节的大小。你可以看看limits.h与float.h头文件来获取更多关于类型最大最小值的细节信息。（下一章会进一步阐述这两个文件。）</p>\n<p>顺便一说。看看最后一行<code>printf()</code>是如何延伸到两行的，只要不是在双引号部分或者在一个单词的中间断开，你可以这样做。</p>\n<h3 id=\"3-4-10-可用数据类型\"><a href=\"#3-4-10-可用数据类型\" class=\"headerlink\" title=\"3.4.10 可用数据类型\"></a>3.4.10 可用数据类型</h3><p>当你正在开发一个程序时，需要注意你需要的变量与它们应该使用的类型。大多数情况，你可以使用<code>int</code>或者<code>float</code>来表示一个数，用<code>char</code>来表示字符，在使用它们的函数的开头先声明好它们。为变量取一个能够暗示它们的意义的名字。初始化一个变量时，也要让变量类型与赋给的常量类型匹配。这里就是两个例子。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> apples = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> oranges = <span class=\"number\">3.0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>C语言对于类型不搭配比起Pascal是很宽容的，C语言的编译器允许你进行二次初始化，但是它们有可能会引起报错，尤其是当你触发了一个高级警告时。最好不要养成这种马马虎虎的习惯。</p>\n<p>当你使用其他类型的值给一个数字类型的值初始化时，C语言会将这个值进行转化，来让它与这个变量的类型相配。这也就意味着你有可能会失去一些数据，比如思考一下下面的初始化过程。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> cost = <span class=\"number\">12.99</span>;        <span class=\"comment\">/*使用double值来初始化int*/</span></span><br><span class=\"line\"><span class=\"type\">float</span> pi = <span class=\"number\">3.1415926536</span>; <span class=\"comment\">/*使用double值来初始化float*/</span></span><br></pre></td></tr></table></figure>\n\n<p>第一个声明语句会将12赋给<code>cost</code>变量，当把浮点数转换为整数值时，C语言简单地把小数部分丢掉（截断），而不是四舍五入。第二行的声明会失去精度，因为<code>float</code>类型是只能呈现小数点后6位精确数的。如果进行这样的初始化，编译器有可能会发出一个警告（但不是一定会发），你有可能在编译例3.1的时候遇到这个问题。</p>\n<p>许多的编程者与组织人员拥有设置变量名称的体系化传统方法，按照这种方式就可以显示出变量的类型。例如你可以使用<code>i_prefix</code>来表示这是个<code>int</code>类型变量，同理<code>us_</code>来表示<code>unsigned_short</code>，这样的话对于类型就好辨认一些。</p>\n<h3 id=\"3-4-11-参数陷阱\"><a href=\"#3-4-11-参数陷阱\" class=\"headerlink\" title=\"3.4.11 参数陷阱\"></a>3.4.11 参数陷阱</h3><p>在这一章的前半部分，有一个关于<code>printf()</code>使用的警告还是很值得重复强调的。你可能还记得传递给函数的信息在术语上称为参数。例如，<code>printf(&quot;Hello, pal.&quot;)</code>就有一个参数：<code>&quot;Hello, Pal.&quot;</code>。我们把在双引号中的一系列字符叫做<em><strong>字符串</strong></em>，我们会在第四章讨论。现在的重点是，一个字符串，即使包含着好几个单词与标点符号，也仍然被算作是一个参数。</p>\n<p>相似地，<code>scanf(&quot;%d&quot;, weight)</code>有两个参数：<code>&quot;%d&quot;</code>与<code>&amp;weight</code>。C语言会使用逗号来分开函数中的各个参数，<code>printf()</code>与<code>scanf()</code>函数还挺不寻常的，它的参数数量是不限的。例如，我们曾经在使用<code>printf()</code>时传递过一个、两个甚至是三个参数。对于一个恰当运行的程序，它需要知道参数的数量。<code>printf()</code>与<code>scanf()</code>函数会使用第一个参数来表达之后会有多少个其他的参数。这里的诀窍就是在最前的字符串中的每一个格式化符都代表着后面有一个参数，例如下面的语句就有两个格式化符：<code>%d</code>与<code>%d</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d cats ate %d cans of tuna\\n&quot;</span>, cats, cans);</span><br></pre></td></tr></table></figure>\n\n<p>这也就告诉程序后面要接收两个额外的参数，而且后面确实有两个——<code>cats</code>与<code>cans</code>。</p>\n<p>作为一个编程人员，你的责任就是确保格式化符的数量与其他的参数的数量相同，类型相同。C语言现在已经有函数原型机制了，它能够检查一次函数调用是否使用了正确的数字与正确的参数类型，但是对于<code>printf()</code>与<code>scanf()</code>是不适用的，因为它们参数的数量是可变的。当你并没有接收程序员的负担会怎样呢？举个例子，假设你写了例3.9那样的程序。</p>\n<p><img src=\"/img/Listing3.9.png\" alt=\"例3.9\"></p>\n<p>下面是从微软VisualC++ 7.1（WinXP系统）上运行的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 34603777</span><br><span class=\"line\">0 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>这是在Digital Mars（WinXP系统）上运行的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 4239476</span><br><span class=\"line\">0 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>这是在Metrowerks Codewarrior Development Studio 9（MacOSX系统）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4 3327456</span><br><span class=\"line\">1075052544 0.000000</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到，使用<code>%d</code>来表示一个<code>float</code>类型的值并不会将它变成最近的<code>int</code>类型值，而是直接输出垃圾值。相似地，使用<code>%f</code>来表示一个<code>int</code>类型的值也并不会将整数转化为浮点数值。参数太少或者类型不对得到的结果不同的平台也不一样。</p>\n<p>没有一个编译器对于这个代码有报错或者警告，在运行时也没有。一些编译器确实会捕捉到这种错误，但是C语言标准并没有要求它们这样做。因此，电脑就不一定能够补货到这种类型的错误，因为程序反而还能够正常地运行，你也不一定能够注意到这种错误。如果程序并没有打印正确的数值数量或者是数值，那就回去看看<code>printf()</code>的参数数量与类型是否使用正确。（顺便一说，Unix语法检测程序lint，它比Unix编译器检查得更加细致，能够对于<code>printf()</code>的参数错误进行报错）。</p>\n<h2 id=\"3-5-又一个例子：转义序列。\"><a href=\"#3-5-又一个例子：转义序列。\" class=\"headerlink\" title=\"3.5 又一个例子：转义序列。\"></a>3.5 又一个例子：转义序列。</h2><p>让我们在程序中打印更多东西吧，这一次我们会使用C语言中的一些针对于字符的特殊转义序列。尤其地，例3.10中的程序显示了回车符(<code>\\b</code>)，水平制表符(<code>\\t</code>)以及回行符（<code>\\r</code>）是怎么工作的。这些概念要追溯到电脑还在使用电传打字机的时代，它们并不总是会在现代的图形界面上正确地翻译。例如，例3.10在一些Mac系统的实现上就不能够按照想要的方式来运行。</p>\n<p><img src=\"/img/Listing3.10.png\" alt=\"例3.10\"></p>\n<h3 id=\"3-5-1-当程序运行的时候发生了什么？\"><a href=\"#3-5-1-当程序运行的时候发生了什么？\" class=\"headerlink\" title=\"3.5.1 当程序运行的时候发生了什么？\"></a>3.5.1 当程序运行的时候发生了什么？</h3><p>让我们一步步地浏览这个程序，好让它能够在ANSI实现下运行。第一个<code>printf()</code>函数语句（标<code>1</code>的那个）会发出警告信号（由<code>\\a</code>引起），然后会打印如下的句子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary:</span><br></pre></td></tr></table></figure>\n<p>因为在字符串最后没有<code>\\n</code>符号，所以光标还是在冒号后面。</p>\n<p>第二个<code>printf()</code>语句会接着第一句结束的地方开始，所以当它执行完毕时，屏幕上看起来是这个样子的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$______</span></span><br></pre></td></tr></table></figure>\n\n<p>在冒号与美元符号之间有一个空格，因为第二个<code>printf()</code>的字符串是以空格开始的，7个退格符的作用是把光标向左移动7个单位。这就会将光标移到下划线字符前面，正好放在美元符号后面。通常地，退格符并不会移除前面的字符，但是有一些实现是有可能移除的，那样这个小练习就没有用了。</p>\n<p>现在，你会输入你的回答，比如说你输入了<code>2000.00</code>，那么这一行看起来就会是这个样子。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$2000</span>.00</span><br></pre></td></tr></table></figure>\n\n<p>你输入的字符将会覆盖换行符，而且当你点<code>Enter</code>键（或者<code>Return</code>）来输入你的回答时，光标就会跳转到下一行。</p>\n<p>第三个<code>printf()</code>语句是以<code>\\n\\t</code>开始的，换行符将会将光标移动到下一行的最开始，而tab键通常会将光标移动到那一行的下一个制表位（但并不是一定），也就是第9列。然后字符串的剩余部分就会被打印下来。在这个语句执行之后，屏幕上看起来就会变成这样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary: <span class=\"variable\">$2000</span>.00</span><br><span class=\"line\">\t<span class=\"variable\">$2000</span>.00 a month is <span class=\"variable\">$24000</span>.00 a year.</span><br></pre></td></tr></table></figure>\n<p>因为这个<code>printf()</code>语句并没有使用换行符，光标还是在这一句的最后位置。</p>\n<p>第四个<code>printf()</code>使用了<code>\\r</code>符号，它会将光标移动到一行的开头位置，这个语句执行之后屏幕上就成了这样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your desired monthly salary <span class=\"variable\">$2000</span>.00</span><br><span class=\"line\">Gee!    <span class=\"variable\">$2000</span>.00 a month is <span class=\"variable\">$24000</span>.00 a year.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-2-输出清理\"><a href=\"#3-5-2-输出清理\" class=\"headerlink\" title=\"3.5.2 输出清理\"></a>3.5.2 输出清理</h3><p><code>printf()</code>函数什么时候才会将输出发送到屏幕上呢？首先，<code>printf()</code>语句会将输出发送到<em><strong>缓冲区</strong></em>，时不时地，在缓冲区的内容就会被发送到屏幕上。对于输出什么时候从缓冲区发送到屏幕上，基础的C语言规则已经很清晰了：当缓冲区被充满时，当遇到一个换行符的时候，以及当有即将发生的输出行为时。（从缓冲区发送输出信息到屏幕或者是文件上叫做<em><strong>刷新缓冲区</strong></em>），例如，最先的两个<code>printf()</code>函数语句并不会填充缓冲区，也并没有包含换行符。在那种情况下，你可以使用一个换行符来刷新缓冲区，那样的话代码就可以写成这个样子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter your desired monthly salary: \\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%f&quot;</span>, &amp;salary);</span><br></pre></td></tr></table></figure>\n\n<p> 不管即将到来的输入信息是不是会刷新缓冲区，这几行代码都是可以正常工作的。但是，它也会将光标移到下一行，防止你把数据与提示字符串写到一行。另一种方式是使用<code>fflush()</code>函数，它会在第13章，文件输入与输出中讲到。</p>\n<h1 id=\"关键概念\"><a href=\"#关键概念\" class=\"headerlink\" title=\"关键概念\"></a>关键概念</h1><p>C语言有着许多种数字类型，这也反映了C语言避免让编程人员陷入障碍的目的。比起用一种类型包管全部数字类型，C语言尽力给予编程人员对于数字的特定种类（比如说有符号与无符号），以及最能够适合特定程序的数字范围大小的选择。</p>\n<p>在一台电脑上，浮点数与整型的基础是不一样的。它们会被以不同的形式储存于处理。两个32位的内存单元能够保存相同的位形式（二进制数表示是一样的。）但是如果其中一个被理解为<code>float</code>而另一个被理解为<code>long</code>，这两个内存单元就会代表完全不同也不相关的两个数，例如在个人电脑上，如果你使用代表256.0的浮点储存单元，但是让它被理解为long，你就会得到113246208这个数。C语言确实允许你使用多种数据类型来书写表达式，但是它会自动进行类型转换，所以真正的运算只有一种数据类型。</p>\n<p>在电脑内存中，字符是以数字编码的形式呈现的，ASCII码是美国最常用的数字代码标准，但是C语言也支持其他代码集。字符常量是电脑上数字编码的符号表示-它是由单引号框定的单字符，比如<code>&#39;A&#39;</code>。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>C语言有各种各样的数据类型，基本的数据类型可以分为两类：整型与浮点型，对于整型，两个最鲜明的区分就是分配给不同类型的储存空间，还有是否有符号。最小的整型是<code>char</code>，它可以有符号，也可以没有，这取决于不同的C语言实现，你可以根据自己的需求来选择<code>signed char</code>与<code>unsigned char</code>，但是那通常是在你使用范围比较小的数字的情况下，而不是使用字符编码时。其他的整型还有<code>short, int, long, long long</code>等。C语言确保了所有的类型都至少会与它前面的类型一样大，它们都是有符号类型，但你还是可以加上<code>unsigned</code>修饰符来创造相应的无符号类型：<code>unsigned short, unsigned int, unsigned long, unsigned long long</code>或者你也可以使用<code>signed</code>修饰符来明显地写出它是有符号的。最后，还有<code>_Bool</code>类型，一种无符号类型，它只能保存0与1，分别代表着<code>false</code>与<code>true</code>。</p>\n<p>浮点类型有三种，分别是<code>float, double</code>与在ANSI C中的<code>long double</code>，每一个类型也是至少比它前面的那个类型一样大的。要是想的话，你也可以用<code>_Complex</code>与<code>_Imaginary</code>与浮点类型关键字连用，来使用虚数与复数类型。例如，有<code>double _Complex</code>与<code>float _Imaginary</code>类型。</p>\n<p>整型可以被以十进制、八进制与十六进制的形式被输出，开头写0可以使一个数变为八进制数，写0x或者0X可以变为十六进制数。例如<code>32, 040</code>还有<code>0x20</code>就分别是十进制、八进制与十六进制的数字，但是它们代表的都是同一个值。另外使用<code>l</code>或者<code>L</code>符号可以声明一个<code>long</code>类型的常量值，<code>ll</code>或者<code>LL</code>可以声明一个<code>long long</code>类型的值。</p>\n<p>字符常量是由单引号及其中的字符代表的：比如<code>&#39;Q&#39;, &#39;8&#39;</code>。字符还包括转义序列，比如<code>\\n</code>，它们代表着不会被打印出来的特定字符，你可以使用类似<code>\\007</code>的形式来使用ASCII码的形式来代表字符。</p>\n<p>浮点数可以以十进制小数点的形式来表示，也可以以指数符号的形式来表示，例如<code>7.38E10</code>。</p>\n<p><code>printf()</code>函数能够让你利用格式化转换符，以最简洁的方式打印各种各样的数值，它由一个百分号符<code>%</code>与一个表示类型的字符组成，比如<code>%d</code>或者<code>%f</code>。</p>\n<h1 id=\"回顾问题\"><a href=\"#回顾问题\" class=\"headerlink\" title=\"回顾问题\"></a>回顾问题</h1><p>你会在附录A中找到这些问题的答案。<br>1.你对于这几种数据你会使用哪种数据类型？</p>\n<blockquote>\n<p>1.东斯普尔顿的人数 – int类型（16位即可）<br>2.在DVD上电影的价格–float类型<br>3.这一章最常见的字母–char类型<br>4.一个字母在这一章中出现的次数。– int类型（。）</p>\n</blockquote>\n<p>2.为什么有时候你会使用<code>long</code>而不是<code>int</code>。</p>\n<blockquote>\n<p>有些时候表示的范围会更大，但是并没有超过<code>long</code>，使用<code>long</code>类型可以保证数据因为存放不下而溢出，从而导致不同机型显示不一而且不会报错的问题。</p>\n</blockquote>\n<p>3.如果你想要得到一个32位有符号的整型，你会使用哪种可转移的类型，请写出所有类型，并说说每一种的合理性。</p>\n<blockquote>\n<p>1.在<code>&lt;inttypes.h&gt;</code>中的<code>int32_t</code>类型<br>2.基本类型中的<code>long</code>或者<code>int</code>类型（对于<code>int</code>来说不一定）</p>\n</blockquote>\n<p><code>long</code>合理，因为关键字更简洁容易记，格式化符也不容易弄错<br>（<code>int32_t</code>为<code>PRId32</code>,<code>long</code>为<code>%ld</code>）<br><code>int32_t</code>能够让编程人员选择适合的大小范围来进行编程，便于大小的记忆。</p>\n<p>4.确认每种类型与它的含义。</p>\n<blockquote>\n<p>1.<code>&#39;\\b&#39;</code>回车符（转义序列）<br>2.<code>1066</code>一个整数，一千零六十六<br>3.<code>99.44</code> 一个两位小数，九十九点四四<br>4.<code>0XAA</code>，十六进制数，10 * 16 + 10 &#x3D; 170.<br>5.<code>2.0e30</code>，指数形式的小数，2 * 10^30(10的30次方)</p>\n</blockquote>\n<p>5.Dottie Cawm 编造了这个满是错误的程序，请找到这个程序中问题。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">float</span> g; h;</span><br><span class=\"line\">\t<span class=\"type\">float</span> tax, rate;</span><br><span class=\"line\"></span><br><span class=\"line\">\tg = e21;</span><br><span class=\"line\">\ttax = rate * g;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（实在是太明显了啊。。）<br>1.include前面忘了#<br>2.main。。。（int main(void)，或者void main()）<br>3.g后面用了分号来分隔，相当于h未规定类型。<br>4.应该是1e21，e21啥也不是。<br>5.tax类型与g的类型大小都太小了，应该用double，float表示不了精确的21位数，或者直接使用long long也可以，反正是整型。<br>6.忘了写<code>return 0;</code></p>\n<p>6.确定下面几种常量数据的类型，与打印他们所使用的格式化标识符。<br><img src=\"/img/Identifytypes1.png\"></p>\n<blockquote>\n<p>·····12为整型，（int（作为常量，默认为int）），输出可以使用<code>%d</code>,<code>%hd</code>,<code>%u</code>,<code>%LLu</code>,<code>%lu</code>。<br>·····<code>0X3</code>，十六进制数，<code>%X</code><br>·····<code>&#39;C&#39;</code>，字符常量，<code>%c</code><br>·····<code>2.34E07</code>,后面看成八进制，但仍然是7，小数的指数形式，用<code>%f</code>或者<code>%lf</code>都可以。<br>·····<code>\\040</code>,十进制的040为32，此即<code>32</code>,即<code>&#39; &#39;</code>（空格字符）<br>·····<code>7.0</code>，一位小数，可以使用<code>%f</code>或者<code>%lf</code><br>·····<code>6L</code>,为<code>long</code>形式整型，可以使用<code>%ld</code>输出。<br>·····<code>6.0f</code>,为<code>float</code>形式小数，可以使用<code>%f</code>。</p>\n</blockquote>\n<p>7.同上<br><img src=\"/img/Identifytypes2.png\"></p>\n<blockquote>\n<p>·····012，八进制数，十进制下为10，可以用<code>%o</code>输出。<br>·····2.9e05L，<code>long double</code>，2.9 * 10^5.<br>·····<code>&#39;s&#39;</code>,字符常量，用<code>%c</code>.<br>·····<code>100000</code>,<code>32</code>位的<code>int</code>，<code>%ld</code>，或者<code>%lu</code>或者更大的类型<code>long long</code>。<br>·····<code>&#39;\\n&#39;</code>,转义序列换行符，直接打印即可。<br>·····20.0f，<code>float</code>类型，<code>%f</code>。<br>·····0x44，十六进制数，68.用<code>%x</code>输出。</p>\n</blockquote>\n<p>8.假设你的程序是以这几行声明语句开头的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> imate = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> shot = <span class=\"number\">53456</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> grade = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"built_in\">log</span> = <span class=\"number\">2.71828</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在下面的<code>printf()</code>函数语句中填入适当的格式化符。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The odds against the %__ were %__ to 1.\\n&quot;</span>,imate, shot);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A score of %__ is not an %__ grade.\\n&quot;</span>, <span class=\"built_in\">log</span>, grade);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The odds against the %d were %ld to 1.\\n&quot;</span>,imate, shot);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A score of %f is not an %c grade.\\n&quot;</span>, <span class=\"built_in\">log</span>, grade);</span><br></pre></td></tr></table></figure>\n\n<p>9.假设<code>ch</code>是一个字符变量，展示一下如何将回行符通过转义序列、十进制数值与八进制及十六进制字符常量的形式赋给ch的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> ch;</span><br><span class=\"line\"></span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\r&#x27;</span>;</span><br><span class=\"line\">ch = <span class=\"number\">13</span>;</span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\0x0D&#x27;</span>;</span><br><span class=\"line\">ch = <span class=\"string\">&#x27;\\015&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>10.纠正这个愚蠢的程序。<br><img src=\"/img/Perfect.png\" alt=\"&quot;Perfect...&quot;\"><br>（在C语言中<code>\\</code>表示除）</p>\n<p>1.未指定形式参数的变量名。（main(int a)）<br>2.注释符号没用对（要么<code>//</code>,要么<code>/**/</code>.)<br>3.声明变量使用关键字。（<code>int cows, legs;</code>）<br>4.<code>printf()</code>字符串缺少了右边的引号。<br>5.<code>scanf()</code>少了取地址符<code>&amp;</code>，而且legs的输入形式写错了，为<code>&#39;%d&#39;</code><br>6.<code>printf()</code>格式化符为<code>%d</code>。</p>\n<p>11.说说下面的转义序列代表啥意思？</p>\n<ol>\n<li><code>\\n</code>,换行符，10.</li>\n<li><code>\\\\</code>,相当于<code>\\</code>.</li>\n<li><code>\\&quot;</code>,相当于<code>&quot;</code>.</li>\n<li><code>\\t</code>,相当于tab键。</li>\n</ol>\n<h1 id=\"编程训练\"><a href=\"#编程训练\" class=\"headerlink\" title=\"编程训练\"></a>编程训练</h1><p>1.通过实验方式，弄清你的电脑是如何处理整型上溢、浮点数上溢以及浮点下溢的，也就是写一个拥有数据溢出问题的程序。</p>\n<p><img src=\"/img/overnunder.png\"></p>\n<p>这个肯定会溢出，可以修改程序看看会发生什么。<br>我观察到的是：整型溢出会直接跳到它的最小范围开始加<br>比如2146483650 &#x3D; - 2147483646 </p>\n<p>浮点上溢，会失去精度，但是只要未超过位数仍然可以表示，如果把指数调到40就会出INF（infinity），具体可以看上文对于浮点溢出的讲解。。</p>\n<p>浮点下溢，会直接被看成0。</p>\n<p>2.写一个能够根据你输入的ASCII码值返回对应字符的程序。</p>\n<p><img src=\"/img/ASCIIout.png\"></p>\n<p>包含了转义序列，使用了<code>switch</code>与<code>if</code>嵌套的结构。</p>\n<p>3.写一个能够发出警报声，并且能够打印以下句子的程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Startled by the sudden sound, Sally shouted, <span class=\"string\">&quot;By the Great Pumpkin,</span></span><br><span class=\"line\"><span class=\"string\">what was that!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重点有两个，一个是掌握好换行，可以用一个printf加上一个换行符实现，也可以用两个。<br>另一个是如何在字符串内输出”，这也是我们周赛第一道题的考点</p>\n<p><img src=\"/img/alarming.png\"></p>\n<p>4.书写一个能够读入浮点数据，然后将它先以十进制小数的形式输出，再以指数形式输出。输出类似下方，但指数形式的实数部分是视系统而变的。</p>\n<p><img src=\"/img/decimalandexp.png\"></p>\n<p>5.一年大概有3.156 * 10^7秒，写一个要求你输入以年计数的年龄并将它转化为秒数的程序。</p>\n<p><img src=\"/img/lifesecond.png\" alt=\"My life...\"></p>\n<p>6.一分子水大概是3.0 * 10^23克， 一夸脱水是950克。写一个要求你输入夸脱单位的水量，返回水的分子数的程序。</p>\n<p><img src=\"/img/quartmol.png\" alt=\"Too much...\"></p>\n<p>7.一英寸是2.54厘米， 写一个要求你输入英寸高度，返回厘米高度的程序。你要是想的话也可以反过来转换。</p>\n<p>1.inch to cm<br><img src=\"/img/inchtocm.png\"></p>\n<p>2.cm to inch<br><img src=\"/img/cmtoinch.png\"></p>\n<pre><code>End...\n</code></pre>"},{"title":"算法学习：归并排序以及插入排序","date":"2024-01-20T01:28:55.000Z","_content":"今天是大学第一个寒假的第一天，昨天玩了半天。\n<!--more-->\n到了晚上临时起志：\n既然上个暑假啥都没学精，那么这个寒假还是集中一个目标尽力往前进吧。\n于是在B站上翻视频，一直到了23点。\n\n今天找到了点生活的奔头，看了MIT学院的算法课程，又学习了两种排序方法，\n虽然不像之前那么多事情了，如果有啥别的重要的话再说嘛，现在才第一天。\n心里也想着，既然生活又有希望起来了，期待下学期的精彩旅途。\n因为我一直都在说着：放假了就快开学了，\n这样只看起点终点就很给人压迫，所以我还是喜欢去把每一天过得尽量好。\n\n今天学习了归并排序（Merge Sort）与插入排序（Insertion Sort）\n经过1-2小时的代码编辑，两种算法都已经以C语言实现完毕了，\n这里就再复盘一下自己今天学习过的内容。\n看到应该已经是第二天了，不过都一样。\n\n## 1. 算法分析\n\n对于一个算法，注重的是它的性能，性能并不是最重要的，\n但在软件设计过程中，它充当着一种货币，可以通过损失性能来换取其他的特性。\n\n一般来说，分析算法有三种方式：\n\t1.最坏情况分析\n\t2.平均值分析\n\t3.最好情况分析\n\n这里的情况指的是对于不同数据的运行时间，\n我们认为时间T(n)与输入的数组大小n是一个相关映射。\n\n最坏情况分析就是对于(1, n)下所有的输入中的时间最大值。\n最好情况分析就是同理的最大值，但是并不一定反映程序运行的一般情况。\n\n平均值严谨来说应该是时间期望，也就是每种情况的时间乘发生概率求和。\n概率无从可知，所以我们需要假设一些概率分布模型。\n\n\n## 2. 插入排序\n\n1. 算法演示\n> 代码毕竟只是表达它而已，理解它能够让我们自己写出它来。\n\n设想一个序列，我们用连续的小方格表示。\n![插入排序](/img/InsertionSort.png)\n从2开始遍历数组（假定下标从1开始），然后对于每一个元素进行上图的操作。\n上图的操作，就好像是移动前面的元素，使得中间空出一个合适的位置，\n然后将这个拿出来的`key`插入这个位置一样。\n\n2. 代码表示\n\t对于一个下标从1到n的数组a\n```C\nfor(int j = 2;j < n;j++)\n{\n\tkey = a[j];\n\ti = j - 1;\n\twhile(a[i] > key && i > 0)\n\t{\n\t\ta[i + 1] = a[i];\n\t\ti = i - 1; \n\t}\n\ta[i + 1] = key;\n}\n```\n\n实现的方法极其易懂，想记住打几遍代码也可以\n道理就与上图中讲的类似。\n\n当然，我们在C语言中的下标是从0开始的，\n这样我们可以将`j`的初始值改变为`1`，将i的限定条件改为`i >= 0`\n就可以对平常的C语言数组使用了。\n\n3. 算法分析\n\n一般来说，比较性能有两种方式：\n\t一个是不同机器相同算法的相对速度\n\t一个是不同算法相同机器的绝对速度\n\n描述时间复杂度的符号有O、θ或者Ω，它们叫做渐进符号。\n渐进分析是算法中的一个伟大的观点，\n因为它不仅能够反映相对速度的大小，还能反映绝对速度的大小。\n这些符号如何使用呢？\n\n步骤\n\t1.将一个式子中的低阶项去掉。\n\t2.将最高阶的参数去掉。\n\n比如一个式子 y = 3 * x^3 + 2 * x^2 （x^2即为x的平方）\n\t去掉低阶项，则为y = 3 * x^3\n\t去掉最高阶参数，则为θ(x^3).\n（这个式子，是通过对于程序所有语句执行的次数累加的结果）\n\n这就是我们说的时间复杂度刻画方式，实际上复杂度阶数大的时间并不一定大，\n只是增长过程中一定能够找到超过复杂度阶小的时间的点，之后就一直比它大。\n这是个临界点。\n\n+ 最坏情况分析\n\t对于这个算法，它的最坏情况即为完全逆序的情况，需要排序与移动项数n次，假设运行每一个语句的时间都是相等的常数C。\n\n首先是一个2~n的循环，然后是一个从j - 1到0的循环\n\n> (j 2~n)ΣjC C是一个常数，从1到n - 1.\n> 这样jC也就是θ(j)，所以就变成了 (j 2~n)Σθ(j)\n> 因为每一项都是j * θ(j)，一共有n项，所以相当于θ(n ^ 2)\n\n\n说实话，我不觉得排序是很高端的算法，甚至都不算算法。\n至少在很久之前只知道选择与冒泡的时候是这样想的。\n只觉得那些听不懂的，比如最短路径的迪杰斯特拉、二分查找、广度优先搜索这些才是。\n实际上，面对这些较为简单的算法，我们反而更轻松地学习对于一个算法如何分析。\n\n## 3. 归并排序\n\n1. 算法演示\n\n![归并排序](/img/MergeSort.png)\n\n这个算法看起来并不是很难，但是实现起来实在不容易，我这里是写了约90行代码。\n它的道理就是，如果总共只有一个元素，那么就返回这个元素。\n如果不是，就是两边先排序再归并，\n归并方式就是挨个比，然后移除元素，直到所有元素都被移到排序后表。\n实际上可以使用函数递归，这里还用的不熟练。\n\n2. 代码演示\n\n```C\n\t\tint l = 0, i = 0, j = 0;\n\t\t//i为a的下标，j位b的下标，l为c也就是排序后表的下标\n\t\t\n\t\twhile(1)\n\t\t{\n\t\t\t//在表的最后一个元素没有被去掉的时候\n\t\t\tif(i != (n / 2) && j != n - (n / 2))\n\t\t\t{\n\t\t\t\tif(a[i] > b[j])\n\t\t\t\t{\t\n\t\t\t\t\tc[l] = b[j];\n\t\t\t\t\tj += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t\telse if(a[i] < b[j])\n\t\t\t\t{\n\t\t\t\t\tc[l] = a[i];\n\t\t\t\t\ti += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t\telse if(a[i] == b[j])\n\t\t\t\t{\n\t\t\t\t\tc[l] = a[i];\n\t\t\t\t\tl += 1;\n\t\t\t\t\tc[l] = b[j];\n\t\t\t\t\ti += 1;\n\t\t\t\t\tj += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//左表的最后一个元素被去掉\n\t\t\telse if(i == n / 2)\n\t\t\t{\n\t\t\t\tfor(;j < n - (n / 2);j++)\n\t\t\t\t\tc[l++] = b[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//右表的最后一个元素被去掉\n\t\t\telse if(j == n - (n / 2))\n\t\t\t{\n\t\t\t\tfor(;i < n / 2;i++)\n\t\t\t\t\tc[l++] = a[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n```\n\n3. 算法分析\n对于这个算法，课程使用了递归树的模型\n\t对于两个表的排序，需要两个T(n/2)的时间，\n\t对于最后的归并，因为只是对于n个元素的操作，所以为θ(n)的时间。\n\n最后的时间就是T(n) = 2 * T(n/2) + θ(n)\n\n![递归树](/img/RecursionTree.png)\n\n递归树还没有整体学习，现在需要知道的就是，这个递归树的高度是log2n，最后的节点数是θ(n).\n总共加起来等于θ(n) + logn * θ(n) 省去第一项就是θ(n * logn)，这样的话在性能上是优于插入排序的，而且它的临界点只在30左右，这也就是说归并排序在大多数情况下都是更快的。\n\n开了个好头，总之希望好运，希望寒假快乐。\n\n>End...","source":"_posts/算法学习：归并排序以及插入排序.md","raw":"---\ntitle: 算法学习：归并排序以及插入排序\ndate: 2024-01-20 09:28:55\ntags: 算法\n---\n今天是大学第一个寒假的第一天，昨天玩了半天。\n<!--more-->\n到了晚上临时起志：\n既然上个暑假啥都没学精，那么这个寒假还是集中一个目标尽力往前进吧。\n于是在B站上翻视频，一直到了23点。\n\n今天找到了点生活的奔头，看了MIT学院的算法课程，又学习了两种排序方法，\n虽然不像之前那么多事情了，如果有啥别的重要的话再说嘛，现在才第一天。\n心里也想着，既然生活又有希望起来了，期待下学期的精彩旅途。\n因为我一直都在说着：放假了就快开学了，\n这样只看起点终点就很给人压迫，所以我还是喜欢去把每一天过得尽量好。\n\n今天学习了归并排序（Merge Sort）与插入排序（Insertion Sort）\n经过1-2小时的代码编辑，两种算法都已经以C语言实现完毕了，\n这里就再复盘一下自己今天学习过的内容。\n看到应该已经是第二天了，不过都一样。\n\n## 1. 算法分析\n\n对于一个算法，注重的是它的性能，性能并不是最重要的，\n但在软件设计过程中，它充当着一种货币，可以通过损失性能来换取其他的特性。\n\n一般来说，分析算法有三种方式：\n\t1.最坏情况分析\n\t2.平均值分析\n\t3.最好情况分析\n\n这里的情况指的是对于不同数据的运行时间，\n我们认为时间T(n)与输入的数组大小n是一个相关映射。\n\n最坏情况分析就是对于(1, n)下所有的输入中的时间最大值。\n最好情况分析就是同理的最大值，但是并不一定反映程序运行的一般情况。\n\n平均值严谨来说应该是时间期望，也就是每种情况的时间乘发生概率求和。\n概率无从可知，所以我们需要假设一些概率分布模型。\n\n\n## 2. 插入排序\n\n1. 算法演示\n> 代码毕竟只是表达它而已，理解它能够让我们自己写出它来。\n\n设想一个序列，我们用连续的小方格表示。\n![插入排序](/img/InsertionSort.png)\n从2开始遍历数组（假定下标从1开始），然后对于每一个元素进行上图的操作。\n上图的操作，就好像是移动前面的元素，使得中间空出一个合适的位置，\n然后将这个拿出来的`key`插入这个位置一样。\n\n2. 代码表示\n\t对于一个下标从1到n的数组a\n```C\nfor(int j = 2;j < n;j++)\n{\n\tkey = a[j];\n\ti = j - 1;\n\twhile(a[i] > key && i > 0)\n\t{\n\t\ta[i + 1] = a[i];\n\t\ti = i - 1; \n\t}\n\ta[i + 1] = key;\n}\n```\n\n实现的方法极其易懂，想记住打几遍代码也可以\n道理就与上图中讲的类似。\n\n当然，我们在C语言中的下标是从0开始的，\n这样我们可以将`j`的初始值改变为`1`，将i的限定条件改为`i >= 0`\n就可以对平常的C语言数组使用了。\n\n3. 算法分析\n\n一般来说，比较性能有两种方式：\n\t一个是不同机器相同算法的相对速度\n\t一个是不同算法相同机器的绝对速度\n\n描述时间复杂度的符号有O、θ或者Ω，它们叫做渐进符号。\n渐进分析是算法中的一个伟大的观点，\n因为它不仅能够反映相对速度的大小，还能反映绝对速度的大小。\n这些符号如何使用呢？\n\n步骤\n\t1.将一个式子中的低阶项去掉。\n\t2.将最高阶的参数去掉。\n\n比如一个式子 y = 3 * x^3 + 2 * x^2 （x^2即为x的平方）\n\t去掉低阶项，则为y = 3 * x^3\n\t去掉最高阶参数，则为θ(x^3).\n（这个式子，是通过对于程序所有语句执行的次数累加的结果）\n\n这就是我们说的时间复杂度刻画方式，实际上复杂度阶数大的时间并不一定大，\n只是增长过程中一定能够找到超过复杂度阶小的时间的点，之后就一直比它大。\n这是个临界点。\n\n+ 最坏情况分析\n\t对于这个算法，它的最坏情况即为完全逆序的情况，需要排序与移动项数n次，假设运行每一个语句的时间都是相等的常数C。\n\n首先是一个2~n的循环，然后是一个从j - 1到0的循环\n\n> (j 2~n)ΣjC C是一个常数，从1到n - 1.\n> 这样jC也就是θ(j)，所以就变成了 (j 2~n)Σθ(j)\n> 因为每一项都是j * θ(j)，一共有n项，所以相当于θ(n ^ 2)\n\n\n说实话，我不觉得排序是很高端的算法，甚至都不算算法。\n至少在很久之前只知道选择与冒泡的时候是这样想的。\n只觉得那些听不懂的，比如最短路径的迪杰斯特拉、二分查找、广度优先搜索这些才是。\n实际上，面对这些较为简单的算法，我们反而更轻松地学习对于一个算法如何分析。\n\n## 3. 归并排序\n\n1. 算法演示\n\n![归并排序](/img/MergeSort.png)\n\n这个算法看起来并不是很难，但是实现起来实在不容易，我这里是写了约90行代码。\n它的道理就是，如果总共只有一个元素，那么就返回这个元素。\n如果不是，就是两边先排序再归并，\n归并方式就是挨个比，然后移除元素，直到所有元素都被移到排序后表。\n实际上可以使用函数递归，这里还用的不熟练。\n\n2. 代码演示\n\n```C\n\t\tint l = 0, i = 0, j = 0;\n\t\t//i为a的下标，j位b的下标，l为c也就是排序后表的下标\n\t\t\n\t\twhile(1)\n\t\t{\n\t\t\t//在表的最后一个元素没有被去掉的时候\n\t\t\tif(i != (n / 2) && j != n - (n / 2))\n\t\t\t{\n\t\t\t\tif(a[i] > b[j])\n\t\t\t\t{\t\n\t\t\t\t\tc[l] = b[j];\n\t\t\t\t\tj += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t\telse if(a[i] < b[j])\n\t\t\t\t{\n\t\t\t\t\tc[l] = a[i];\n\t\t\t\t\ti += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t\telse if(a[i] == b[j])\n\t\t\t\t{\n\t\t\t\t\tc[l] = a[i];\n\t\t\t\t\tl += 1;\n\t\t\t\t\tc[l] = b[j];\n\t\t\t\t\ti += 1;\n\t\t\t\t\tj += 1;\n\t\t\t\t\tl += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//左表的最后一个元素被去掉\n\t\t\telse if(i == n / 2)\n\t\t\t{\n\t\t\t\tfor(;j < n - (n / 2);j++)\n\t\t\t\t\tc[l++] = b[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//右表的最后一个元素被去掉\n\t\t\telse if(j == n - (n / 2))\n\t\t\t{\n\t\t\t\tfor(;i < n / 2;i++)\n\t\t\t\t\tc[l++] = a[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n```\n\n3. 算法分析\n对于这个算法，课程使用了递归树的模型\n\t对于两个表的排序，需要两个T(n/2)的时间，\n\t对于最后的归并，因为只是对于n个元素的操作，所以为θ(n)的时间。\n\n最后的时间就是T(n) = 2 * T(n/2) + θ(n)\n\n![递归树](/img/RecursionTree.png)\n\n递归树还没有整体学习，现在需要知道的就是，这个递归树的高度是log2n，最后的节点数是θ(n).\n总共加起来等于θ(n) + logn * θ(n) 省去第一项就是θ(n * logn)，这样的话在性能上是优于插入排序的，而且它的临界点只在30左右，这也就是说归并排序在大多数情况下都是更快的。\n\n开了个好头，总之希望好运，希望寒假快乐。\n\n>End...","slug":"算法学习：归并排序以及插入排序","published":1,"updated":"2024-01-20T01:39:55.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrp133pr000a58uedcr63hbm","content":"<p>今天是大学第一个寒假的第一天，昨天玩了半天。</p>\n<span id=\"more\"></span>\n<p>到了晚上临时起志：<br>既然上个暑假啥都没学精，那么这个寒假还是集中一个目标尽力往前进吧。<br>于是在B站上翻视频，一直到了23点。</p>\n<p>今天找到了点生活的奔头，看了MIT学院的算法课程，又学习了两种排序方法，<br>虽然不像之前那么多事情了，如果有啥别的重要的话再说嘛，现在才第一天。<br>心里也想着，既然生活又有希望起来了，期待下学期的精彩旅途。<br>因为我一直都在说着：放假了就快开学了，<br>这样只看起点终点就很给人压迫，所以我还是喜欢去把每一天过得尽量好。</p>\n<p>今天学习了归并排序（Merge Sort）与插入排序（Insertion Sort）<br>经过1-2小时的代码编辑，两种算法都已经以C语言实现完毕了，<br>这里就再复盘一下自己今天学习过的内容。<br>看到应该已经是第二天了，不过都一样。</p>\n<h2 id=\"1-算法分析\"><a href=\"#1-算法分析\" class=\"headerlink\" title=\"1. 算法分析\"></a>1. 算法分析</h2><p>对于一个算法，注重的是它的性能，性能并不是最重要的，<br>但在软件设计过程中，它充当着一种货币，可以通过损失性能来换取其他的特性。</p>\n<p>一般来说，分析算法有三种方式：<br>    1.最坏情况分析<br>    2.平均值分析<br>    3.最好情况分析</p>\n<p>这里的情况指的是对于不同数据的运行时间，<br>我们认为时间T(n)与输入的数组大小n是一个相关映射。</p>\n<p>最坏情况分析就是对于(1, n)下所有的输入中的时间最大值。<br>最好情况分析就是同理的最大值，但是并不一定反映程序运行的一般情况。</p>\n<p>平均值严谨来说应该是时间期望，也就是每种情况的时间乘发生概率求和。<br>概率无从可知，所以我们需要假设一些概率分布模型。</p>\n<h2 id=\"2-插入排序\"><a href=\"#2-插入排序\" class=\"headerlink\" title=\"2. 插入排序\"></a>2. 插入排序</h2><ol>\n<li>算法演示<blockquote>\n<p>代码毕竟只是表达它而已，理解它能够让我们自己写出它来。</p>\n</blockquote>\n</li>\n</ol>\n<p>设想一个序列，我们用连续的小方格表示。<br><img src=\"/img/InsertionSort.png\" alt=\"插入排序\"><br>从2开始遍历数组（假定下标从1开始），然后对于每一个元素进行上图的操作。<br>上图的操作，就好像是移动前面的元素，使得中间空出一个合适的位置，<br>然后将这个拿出来的<code>key</code>插入这个位置一样。</p>\n<ol start=\"2\">\n<li>代码表示<br> 对于一个下标从1到n的数组a<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">2</span>;j &lt; n;j++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tkey = a[j];</span><br><span class=\"line\">\ti = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(a[i] &gt; key &amp;&amp; i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[i + <span class=\"number\">1</span>] = a[i];</span><br><span class=\"line\">\t\ti = i - <span class=\"number\">1</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[i + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>实现的方法极其易懂，想记住打几遍代码也可以<br>道理就与上图中讲的类似。</p>\n<p>当然，我们在C语言中的下标是从0开始的，<br>这样我们可以将<code>j</code>的初始值改变为<code>1</code>，将i的限定条件改为<code>i &gt;= 0</code><br>就可以对平常的C语言数组使用了。</p>\n<ol start=\"3\">\n<li>算法分析</li>\n</ol>\n<p>一般来说，比较性能有两种方式：<br>    一个是不同机器相同算法的相对速度<br>    一个是不同算法相同机器的绝对速度</p>\n<p>描述时间复杂度的符号有O、θ或者Ω，它们叫做渐进符号。<br>渐进分析是算法中的一个伟大的观点，<br>因为它不仅能够反映相对速度的大小，还能反映绝对速度的大小。<br>这些符号如何使用呢？</p>\n<p>步骤<br>    1.将一个式子中的低阶项去掉。<br>    2.将最高阶的参数去掉。</p>\n<p>比如一个式子 y &#x3D; 3 * x^3 + 2 * x^2 （x^2即为x的平方）<br>    去掉低阶项，则为y &#x3D; 3 * x^3<br>    去掉最高阶参数，则为θ(x^3).<br>（这个式子，是通过对于程序所有语句执行的次数累加的结果）</p>\n<p>这就是我们说的时间复杂度刻画方式，实际上复杂度阶数大的时间并不一定大，<br>只是增长过程中一定能够找到超过复杂度阶小的时间的点，之后就一直比它大。<br>这是个临界点。</p>\n<ul>\n<li>最坏情况分析<br>  对于这个算法，它的最坏情况即为完全逆序的情况，需要排序与移动项数n次，假设运行每一个语句的时间都是相等的常数C。</li>\n</ul>\n<p>首先是一个2~n的循环，然后是一个从j - 1到0的循环</p>\n<blockquote>\n<p>(j 2<del>n)ΣjC C是一个常数，从1到n - 1.<br>这样jC也就是θ(j)，所以就变成了 (j 2</del>n)Σθ(j)<br>因为每一项都是j * θ(j)，一共有n项，所以相当于θ(n ^ 2)</p>\n</blockquote>\n<p>说实话，我不觉得排序是很高端的算法，甚至都不算算法。<br>至少在很久之前只知道选择与冒泡的时候是这样想的。<br>只觉得那些听不懂的，比如最短路径的迪杰斯特拉、二分查找、广度优先搜索这些才是。<br>实际上，面对这些较为简单的算法，我们反而更轻松地学习对于一个算法如何分析。</p>\n<h2 id=\"3-归并排序\"><a href=\"#3-归并排序\" class=\"headerlink\" title=\"3. 归并排序\"></a>3. 归并排序</h2><ol>\n<li>算法演示</li>\n</ol>\n<p><img src=\"/img/MergeSort.png\" alt=\"归并排序\"></p>\n<p>这个算法看起来并不是很难，但是实现起来实在不容易，我这里是写了约90行代码。<br>它的道理就是，如果总共只有一个元素，那么就返回这个元素。<br>如果不是，就是两边先排序再归并，<br>归并方式就是挨个比，然后移除元素，直到所有元素都被移到排序后表。<br>实际上可以使用函数递归，这里还用的不熟练。</p>\n<ol start=\"2\">\n<li>代码演示</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> l = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//i为a的下标，j位b的下标，l为c也就是排序后表的下标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在表的最后一个元素没有被去掉的时候</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i != (n / <span class=\"number\">2</span>) &amp;&amp; j != n - (n / <span class=\"number\">2</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] &gt; b[j])</span><br><span class=\"line\">\t\t&#123;\t</span><br><span class=\"line\">\t\t\tc[l] = b[j];</span><br><span class=\"line\">\t\t\tj += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] &lt; b[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tc[l] = a[i];</span><br><span class=\"line\">\t\t\ti += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] == b[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tc[l] = a[i];</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tc[l] = b[j];</span><br><span class=\"line\">\t\t\ti += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tj += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//左表的最后一个元素被去掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == n / <span class=\"number\">2</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;j &lt; n - (n / <span class=\"number\">2</span>);j++)</span><br><span class=\"line\">\t\t\tc[l++] = b[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//右表的最后一个元素被去掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j == n - (n / <span class=\"number\">2</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;i &lt; n / <span class=\"number\">2</span>;i++)</span><br><span class=\"line\">\t\t\tc[l++] = a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>算法分析<br>对于这个算法，课程使用了递归树的模型<br> 对于两个表的排序，需要两个T(n&#x2F;2)的时间，<br> 对于最后的归并，因为只是对于n个元素的操作，所以为θ(n)的时间。</li>\n</ol>\n<p>最后的时间就是T(n) &#x3D; 2 * T(n&#x2F;2) + θ(n)</p>\n<p><img src=\"/img/RecursionTree.png\" alt=\"递归树\"></p>\n<p>递归树还没有整体学习，现在需要知道的就是，这个递归树的高度是log2n，最后的节点数是θ(n).<br>总共加起来等于θ(n) + logn * θ(n) 省去第一项就是θ(n * logn)，这样的话在性能上是优于插入排序的，而且它的临界点只在30左右，这也就是说归并排序在大多数情况下都是更快的。</p>\n<p>开了个好头，总之希望好运，希望寒假快乐。</p>\n<blockquote>\n<p>End…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>今天是大学第一个寒假的第一天，昨天玩了半天。</p>","more":"<p>到了晚上临时起志：<br>既然上个暑假啥都没学精，那么这个寒假还是集中一个目标尽力往前进吧。<br>于是在B站上翻视频，一直到了23点。</p>\n<p>今天找到了点生活的奔头，看了MIT学院的算法课程，又学习了两种排序方法，<br>虽然不像之前那么多事情了，如果有啥别的重要的话再说嘛，现在才第一天。<br>心里也想着，既然生活又有希望起来了，期待下学期的精彩旅途。<br>因为我一直都在说着：放假了就快开学了，<br>这样只看起点终点就很给人压迫，所以我还是喜欢去把每一天过得尽量好。</p>\n<p>今天学习了归并排序（Merge Sort）与插入排序（Insertion Sort）<br>经过1-2小时的代码编辑，两种算法都已经以C语言实现完毕了，<br>这里就再复盘一下自己今天学习过的内容。<br>看到应该已经是第二天了，不过都一样。</p>\n<h2 id=\"1-算法分析\"><a href=\"#1-算法分析\" class=\"headerlink\" title=\"1. 算法分析\"></a>1. 算法分析</h2><p>对于一个算法，注重的是它的性能，性能并不是最重要的，<br>但在软件设计过程中，它充当着一种货币，可以通过损失性能来换取其他的特性。</p>\n<p>一般来说，分析算法有三种方式：<br>    1.最坏情况分析<br>    2.平均值分析<br>    3.最好情况分析</p>\n<p>这里的情况指的是对于不同数据的运行时间，<br>我们认为时间T(n)与输入的数组大小n是一个相关映射。</p>\n<p>最坏情况分析就是对于(1, n)下所有的输入中的时间最大值。<br>最好情况分析就是同理的最大值，但是并不一定反映程序运行的一般情况。</p>\n<p>平均值严谨来说应该是时间期望，也就是每种情况的时间乘发生概率求和。<br>概率无从可知，所以我们需要假设一些概率分布模型。</p>\n<h2 id=\"2-插入排序\"><a href=\"#2-插入排序\" class=\"headerlink\" title=\"2. 插入排序\"></a>2. 插入排序</h2><ol>\n<li>算法演示<blockquote>\n<p>代码毕竟只是表达它而已，理解它能够让我们自己写出它来。</p>\n</blockquote>\n</li>\n</ol>\n<p>设想一个序列，我们用连续的小方格表示。<br><img src=\"/img/InsertionSort.png\" alt=\"插入排序\"><br>从2开始遍历数组（假定下标从1开始），然后对于每一个元素进行上图的操作。<br>上图的操作，就好像是移动前面的元素，使得中间空出一个合适的位置，<br>然后将这个拿出来的<code>key</code>插入这个位置一样。</p>\n<ol start=\"2\">\n<li>代码表示<br> 对于一个下标从1到n的数组a<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">2</span>;j &lt; n;j++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tkey = a[j];</span><br><span class=\"line\">\ti = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(a[i] &gt; key &amp;&amp; i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[i + <span class=\"number\">1</span>] = a[i];</span><br><span class=\"line\">\t\ti = i - <span class=\"number\">1</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[i + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>实现的方法极其易懂，想记住打几遍代码也可以<br>道理就与上图中讲的类似。</p>\n<p>当然，我们在C语言中的下标是从0开始的，<br>这样我们可以将<code>j</code>的初始值改变为<code>1</code>，将i的限定条件改为<code>i &gt;= 0</code><br>就可以对平常的C语言数组使用了。</p>\n<ol start=\"3\">\n<li>算法分析</li>\n</ol>\n<p>一般来说，比较性能有两种方式：<br>    一个是不同机器相同算法的相对速度<br>    一个是不同算法相同机器的绝对速度</p>\n<p>描述时间复杂度的符号有O、θ或者Ω，它们叫做渐进符号。<br>渐进分析是算法中的一个伟大的观点，<br>因为它不仅能够反映相对速度的大小，还能反映绝对速度的大小。<br>这些符号如何使用呢？</p>\n<p>步骤<br>    1.将一个式子中的低阶项去掉。<br>    2.将最高阶的参数去掉。</p>\n<p>比如一个式子 y &#x3D; 3 * x^3 + 2 * x^2 （x^2即为x的平方）<br>    去掉低阶项，则为y &#x3D; 3 * x^3<br>    去掉最高阶参数，则为θ(x^3).<br>（这个式子，是通过对于程序所有语句执行的次数累加的结果）</p>\n<p>这就是我们说的时间复杂度刻画方式，实际上复杂度阶数大的时间并不一定大，<br>只是增长过程中一定能够找到超过复杂度阶小的时间的点，之后就一直比它大。<br>这是个临界点。</p>\n<ul>\n<li>最坏情况分析<br>  对于这个算法，它的最坏情况即为完全逆序的情况，需要排序与移动项数n次，假设运行每一个语句的时间都是相等的常数C。</li>\n</ul>\n<p>首先是一个2~n的循环，然后是一个从j - 1到0的循环</p>\n<blockquote>\n<p>(j 2<del>n)ΣjC C是一个常数，从1到n - 1.<br>这样jC也就是θ(j)，所以就变成了 (j 2</del>n)Σθ(j)<br>因为每一项都是j * θ(j)，一共有n项，所以相当于θ(n ^ 2)</p>\n</blockquote>\n<p>说实话，我不觉得排序是很高端的算法，甚至都不算算法。<br>至少在很久之前只知道选择与冒泡的时候是这样想的。<br>只觉得那些听不懂的，比如最短路径的迪杰斯特拉、二分查找、广度优先搜索这些才是。<br>实际上，面对这些较为简单的算法，我们反而更轻松地学习对于一个算法如何分析。</p>\n<h2 id=\"3-归并排序\"><a href=\"#3-归并排序\" class=\"headerlink\" title=\"3. 归并排序\"></a>3. 归并排序</h2><ol>\n<li>算法演示</li>\n</ol>\n<p><img src=\"/img/MergeSort.png\" alt=\"归并排序\"></p>\n<p>这个算法看起来并不是很难，但是实现起来实在不容易，我这里是写了约90行代码。<br>它的道理就是，如果总共只有一个元素，那么就返回这个元素。<br>如果不是，就是两边先排序再归并，<br>归并方式就是挨个比，然后移除元素，直到所有元素都被移到排序后表。<br>实际上可以使用函数递归，这里还用的不熟练。</p>\n<ol start=\"2\">\n<li>代码演示</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> l = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//i为a的下标，j位b的下标，l为c也就是排序后表的下标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在表的最后一个元素没有被去掉的时候</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i != (n / <span class=\"number\">2</span>) &amp;&amp; j != n - (n / <span class=\"number\">2</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] &gt; b[j])</span><br><span class=\"line\">\t\t&#123;\t</span><br><span class=\"line\">\t\t\tc[l] = b[j];</span><br><span class=\"line\">\t\t\tj += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] &lt; b[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tc[l] = a[i];</span><br><span class=\"line\">\t\t\ti += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] == b[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tc[l] = a[i];</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tc[l] = b[j];</span><br><span class=\"line\">\t\t\ti += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tj += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tl += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//左表的最后一个元素被去掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == n / <span class=\"number\">2</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;j &lt; n - (n / <span class=\"number\">2</span>);j++)</span><br><span class=\"line\">\t\t\tc[l++] = b[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//右表的最后一个元素被去掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j == n - (n / <span class=\"number\">2</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;i &lt; n / <span class=\"number\">2</span>;i++)</span><br><span class=\"line\">\t\t\tc[l++] = a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>算法分析<br>对于这个算法，课程使用了递归树的模型<br> 对于两个表的排序，需要两个T(n&#x2F;2)的时间，<br> 对于最后的归并，因为只是对于n个元素的操作，所以为θ(n)的时间。</li>\n</ol>\n<p>最后的时间就是T(n) &#x3D; 2 * T(n&#x2F;2) + θ(n)</p>\n<p><img src=\"/img/RecursionTree.png\" alt=\"递归树\"></p>\n<p>递归树还没有整体学习，现在需要知道的就是，这个递归树的高度是log2n，最后的节点数是θ(n).<br>总共加起来等于θ(n) + logn * θ(n) 省去第一项就是θ(n * logn)，这样的话在性能上是优于插入排序的，而且它的临界点只在30左右，这也就是说归并排序在大多数情况下都是更快的。</p>\n<p>开了个好头，总之希望好运，希望寒假快乐。</p>\n<blockquote>\n<p>End…</p>\n</blockquote>"},{"title":"算法学习：分治法中的二分查找","date":"2024-01-21T15:20:20.000Z","_content":"\n今天本应学习的是分治法，但今天的轨迹就是有点奇怪（哈）\n我看着老师讲着讲着讲到了我可能接触过的算法了，并且Leetcode上还能够练题。\n于是看完老师演示分治法的例子：归并排序、二分查找、求平方。\n然后就开始不由自主地想要实现它，想了半天没有搞出来，查找网上才学会的。\n<!--more-->\n\n今天也在Leetcode上练了几道有关于二分查找的题目，\n开始的时候感觉 - 害，不就一个查找吗，直接当成函数，还能给我出什么题？！\n尝试了一个困难难度的题根本做不出来（悲）\n于是从简单题做起了，感觉知道了二分查找的很多不同的用法。\n\n现在卡在了一道统计二叉树节点的题目上。\n问题的关键是我现在不知道我这个想法对不对，\n如果都是从1开始的话，那么其实不需要结构体与指针\n其实就是在统计元素个数。\n感觉想得过分简单了。\n\n![题目](/img/BinaryTreenum.png)\n\n分治法还是一个挺笼统的概念，它不是一个算法，而是一个设计算法的方法。\n主要可以分为三步：分、治以及组合。\n\n老师使用了一个奇怪的比喻：\n先将一块地分开成几个小部分，\n分别统治它们，就相当于统治了这个总体。\n不过还挺形象的。\n我想起了函数的使用目的，也是为了拆分问题。\n\n分也就是将一个问题划分成若干个小问题的过程。\n治就是对于每一个问题进行解决的过程。\n组合就是将这些小问题的答案组合形成最终的答案。\n分治法衍生出的算法可能很多，但是它们的递归式基本都是相似的形式\n也就是相似于主方法范式的那种。\n\n>比如 归并的 T(n) = 2 * T(n/2) + Θ(n)\n>二分的T(n) = T(n/2) + Θ(1)\n\n接着就是上文讲到的那几个举例，也是我一天的轨迹转折的地方。\n\n归并排序感觉现在已经不太想写了，\n毕竟这个代码量与细节都挺复杂的，用qsort也挺好。\n现在能够熟背的就是这个n^2的插入排序。\n但是为了之后的效率我得尝试记忆一下更快的了\n\n所以现在就说说二分查找吧，这是今天另一个值得讲的话题。\n\n## 二分查找\n\n1.算法演示\n\n还是给出一个**有序的**数组，我们想要在这个数组中查找一个数字。\n一般来说我们肯定最朴素的想法是一个n的循环遍历数组找这个数\n但是这个算法真的挺快的，它的时间复杂度是Θ(logn)\n\n![来自于一个Python学习网站 www.penjee.com](/img/BinarySearch.gif)\n\n用分治法的思路来想这个问题，\n>1.分 将一个数组分为大于中间数与小于中间数两部分。\n>2.治 如果搜索数小于中间数，去左边继续找\n>如果大于，去右边找。\n>3.混合，没啥操作。\n\n在图中我们看到是通过low与high这两个变量来控制mid这个变量，\n进而来确定我们数组的左边与右边。\n%%说实话我刚开始就是卡在了这里，\n我想用数组长度n来限定，想了很久没想出来右边怎么搞。%%\n\n那么分别根据递归与它的定义，我们可以写出两种表示的形式。\n\n```C\nint BinarySearch_Concept(int a[], int n, int x)\n{\n\tint low = 0, high = n - 1, mid;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(x < a[mid])\n\t\t\thigh = mid - 1;\n\t\telse if(x > a[mid])\n\t\t\tlow = mid + 1;\n\t\telse return mid;\n\t} \n\treturn -1;\n}\n\nint BinarySearch_Recursion(int a[], int low, int high, int x)\n{\n\t\n\tif(low > high) return -1;\n\tint mid = (low + high) / 2;\n\t//可以这样写 int mid = ((right - left) >> 1) + left;\n\t\n\tif(x == a[mid]) return mid;\n\telse if(x > a[mid])\n\t{\n\t\tlow = mid + 1;\n\t\treturn BinarySearch_Recursion(a, low, high, x);\n\t}\n\telse if(x < a[mid])\n\t{\n\t\thigh = mid - 1;\n\t\treturn BinarySearch_Recursion(a, low, high, x);\n\t}\n}\n//注 Concept为概念，Recursion为递归。\n```\n\n实际上只是一个思路两种写法而已，\n这两种情况的执行时间应该是差不多的。\n\n今天就是套这个模版然后改了点代码，\n有的时候还超过了不少做过这道题的人。\n空间复杂度上或者有时在时间复杂度上。\n官方题解也不少可以学习的地方。\n\n期望明天的学习，期望明天能够做出更多的题目，自己能够思考更多。\n\n\n\n\n\n","source":"_posts/算法学习：分治法中的二分查找.md","raw":"---\ntitle: 算法学习：分治法中的二分查找\ndate: 2024-01-21 23:20:20\ntags: 算法\n---\n\n今天本应学习的是分治法，但今天的轨迹就是有点奇怪（哈）\n我看着老师讲着讲着讲到了我可能接触过的算法了，并且Leetcode上还能够练题。\n于是看完老师演示分治法的例子：归并排序、二分查找、求平方。\n然后就开始不由自主地想要实现它，想了半天没有搞出来，查找网上才学会的。\n<!--more-->\n\n今天也在Leetcode上练了几道有关于二分查找的题目，\n开始的时候感觉 - 害，不就一个查找吗，直接当成函数，还能给我出什么题？！\n尝试了一个困难难度的题根本做不出来（悲）\n于是从简单题做起了，感觉知道了二分查找的很多不同的用法。\n\n现在卡在了一道统计二叉树节点的题目上。\n问题的关键是我现在不知道我这个想法对不对，\n如果都是从1开始的话，那么其实不需要结构体与指针\n其实就是在统计元素个数。\n感觉想得过分简单了。\n\n![题目](/img/BinaryTreenum.png)\n\n分治法还是一个挺笼统的概念，它不是一个算法，而是一个设计算法的方法。\n主要可以分为三步：分、治以及组合。\n\n老师使用了一个奇怪的比喻：\n先将一块地分开成几个小部分，\n分别统治它们，就相当于统治了这个总体。\n不过还挺形象的。\n我想起了函数的使用目的，也是为了拆分问题。\n\n分也就是将一个问题划分成若干个小问题的过程。\n治就是对于每一个问题进行解决的过程。\n组合就是将这些小问题的答案组合形成最终的答案。\n分治法衍生出的算法可能很多，但是它们的递归式基本都是相似的形式\n也就是相似于主方法范式的那种。\n\n>比如 归并的 T(n) = 2 * T(n/2) + Θ(n)\n>二分的T(n) = T(n/2) + Θ(1)\n\n接着就是上文讲到的那几个举例，也是我一天的轨迹转折的地方。\n\n归并排序感觉现在已经不太想写了，\n毕竟这个代码量与细节都挺复杂的，用qsort也挺好。\n现在能够熟背的就是这个n^2的插入排序。\n但是为了之后的效率我得尝试记忆一下更快的了\n\n所以现在就说说二分查找吧，这是今天另一个值得讲的话题。\n\n## 二分查找\n\n1.算法演示\n\n还是给出一个**有序的**数组，我们想要在这个数组中查找一个数字。\n一般来说我们肯定最朴素的想法是一个n的循环遍历数组找这个数\n但是这个算法真的挺快的，它的时间复杂度是Θ(logn)\n\n![来自于一个Python学习网站 www.penjee.com](/img/BinarySearch.gif)\n\n用分治法的思路来想这个问题，\n>1.分 将一个数组分为大于中间数与小于中间数两部分。\n>2.治 如果搜索数小于中间数，去左边继续找\n>如果大于，去右边找。\n>3.混合，没啥操作。\n\n在图中我们看到是通过low与high这两个变量来控制mid这个变量，\n进而来确定我们数组的左边与右边。\n%%说实话我刚开始就是卡在了这里，\n我想用数组长度n来限定，想了很久没想出来右边怎么搞。%%\n\n那么分别根据递归与它的定义，我们可以写出两种表示的形式。\n\n```C\nint BinarySearch_Concept(int a[], int n, int x)\n{\n\tint low = 0, high = n - 1, mid;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(x < a[mid])\n\t\t\thigh = mid - 1;\n\t\telse if(x > a[mid])\n\t\t\tlow = mid + 1;\n\t\telse return mid;\n\t} \n\treturn -1;\n}\n\nint BinarySearch_Recursion(int a[], int low, int high, int x)\n{\n\t\n\tif(low > high) return -1;\n\tint mid = (low + high) / 2;\n\t//可以这样写 int mid = ((right - left) >> 1) + left;\n\t\n\tif(x == a[mid]) return mid;\n\telse if(x > a[mid])\n\t{\n\t\tlow = mid + 1;\n\t\treturn BinarySearch_Recursion(a, low, high, x);\n\t}\n\telse if(x < a[mid])\n\t{\n\t\thigh = mid - 1;\n\t\treturn BinarySearch_Recursion(a, low, high, x);\n\t}\n}\n//注 Concept为概念，Recursion为递归。\n```\n\n实际上只是一个思路两种写法而已，\n这两种情况的执行时间应该是差不多的。\n\n今天就是套这个模版然后改了点代码，\n有的时候还超过了不少做过这道题的人。\n空间复杂度上或者有时在时间复杂度上。\n官方题解也不少可以学习的地方。\n\n期望明天的学习，期望明天能够做出更多的题目，自己能够思考更多。\n\n\n\n\n\n","slug":"算法学习：分治法中的二分查找","published":1,"updated":"2024-01-22T14:20:30.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrp133pz000g58uehwa08cx2","content":"<p>今天本应学习的是分治法，但今天的轨迹就是有点奇怪（哈）<br>我看着老师讲着讲着讲到了我可能接触过的算法了，并且Leetcode上还能够练题。<br>于是看完老师演示分治法的例子：归并排序、二分查找、求平方。<br>然后就开始不由自主地想要实现它，想了半天没有搞出来，查找网上才学会的。</p>\n<span id=\"more\"></span>\n\n<p>今天也在Leetcode上练了几道有关于二分查找的题目，<br>开始的时候感觉 - 害，不就一个查找吗，直接当成函数，还能给我出什么题？！<br>尝试了一个困难难度的题根本做不出来（悲）<br>于是从简单题做起了，感觉知道了二分查找的很多不同的用法。</p>\n<p>现在卡在了一道统计二叉树节点的题目上。<br>问题的关键是我现在不知道我这个想法对不对，<br>如果都是从1开始的话，那么其实不需要结构体与指针<br>其实就是在统计元素个数。<br>感觉想得过分简单了。</p>\n<p><img src=\"/img/BinaryTreenum.png\" alt=\"题目\"></p>\n<p>分治法还是一个挺笼统的概念，它不是一个算法，而是一个设计算法的方法。<br>主要可以分为三步：分、治以及组合。</p>\n<p>老师使用了一个奇怪的比喻：<br>先将一块地分开成几个小部分，<br>分别统治它们，就相当于统治了这个总体。<br>不过还挺形象的。<br>我想起了函数的使用目的，也是为了拆分问题。</p>\n<p>分也就是将一个问题划分成若干个小问题的过程。<br>治就是对于每一个问题进行解决的过程。<br>组合就是将这些小问题的答案组合形成最终的答案。<br>分治法衍生出的算法可能很多，但是它们的递归式基本都是相似的形式<br>也就是相似于主方法范式的那种。</p>\n<blockquote>\n<p>比如 归并的 T(n) &#x3D; 2 * T(n&#x2F;2) + Θ(n)<br>二分的T(n) &#x3D; T(n&#x2F;2) + Θ(1)</p>\n</blockquote>\n<p>接着就是上文讲到的那几个举例，也是我一天的轨迹转折的地方。</p>\n<p>归并排序感觉现在已经不太想写了，<br>毕竟这个代码量与细节都挺复杂的，用qsort也挺好。<br>现在能够熟背的就是这个n^2的插入排序。<br>但是为了之后的效率我得尝试记忆一下更快的了</p>\n<p>所以现在就说说二分查找吧，这是今天另一个值得讲的话题。</p>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>1.算法演示</p>\n<p>还是给出一个<strong>有序的</strong>数组，我们想要在这个数组中查找一个数字。<br>一般来说我们肯定最朴素的想法是一个n的循环遍历数组找这个数<br>但是这个算法真的挺快的，它的时间复杂度是Θ(logn)</p>\n<p><img src=\"/img/BinarySearch.gif\" alt=\"来自于一个Python学习网站 www.penjee.com\"></p>\n<p>用分治法的思路来想这个问题，</p>\n<blockquote>\n<p>1.分 将一个数组分为大于中间数与小于中间数两部分。<br>2.治 如果搜索数小于中间数，去左边继续找<br>如果大于，去右边找。<br>3.混合，没啥操作。</p>\n</blockquote>\n<p>在图中我们看到是通过low与high这两个变量来控制mid这个变量，<br>进而来确定我们数组的左边与右边。<br>%%说实话我刚开始就是卡在了这里，<br>我想用数组长度n来限定，想了很久没想出来右边怎么搞。%%</p>\n<p>那么分别根据递归与它的定义，我们可以写出两种表示的形式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">BinarySearch_Concept</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> low = <span class=\"number\">0</span>, high = n - <span class=\"number\">1</span>, mid;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt; a[mid])</span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; a[mid])</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">BinarySearch_Recursion</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> high, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(low &gt; high) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//可以这样写 int mid = ((right - left) &gt;&gt; 1) + left;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x == a[mid]) <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; a[mid])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> BinarySearch_Recursion(a, low, high, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &lt; a[mid])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> BinarySearch_Recursion(a, low, high, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//注 Concept为概念，Recursion为递归。</span></span><br></pre></td></tr></table></figure>\n\n<p>实际上只是一个思路两种写法而已，<br>这两种情况的执行时间应该是差不多的。</p>\n<p>今天就是套这个模版然后改了点代码，<br>有的时候还超过了不少做过这道题的人。<br>空间复杂度上或者有时在时间复杂度上。<br>官方题解也不少可以学习的地方。</p>\n<p>期望明天的学习，期望明天能够做出更多的题目，自己能够思考更多。</p>\n","site":{"data":{}},"excerpt":"<p>今天本应学习的是分治法，但今天的轨迹就是有点奇怪（哈）<br>我看着老师讲着讲着讲到了我可能接触过的算法了，并且Leetcode上还能够练题。<br>于是看完老师演示分治法的例子：归并排序、二分查找、求平方。<br>然后就开始不由自主地想要实现它，想了半天没有搞出来，查找网上才学会的。</p>","more":"<p>今天也在Leetcode上练了几道有关于二分查找的题目，<br>开始的时候感觉 - 害，不就一个查找吗，直接当成函数，还能给我出什么题？！<br>尝试了一个困难难度的题根本做不出来（悲）<br>于是从简单题做起了，感觉知道了二分查找的很多不同的用法。</p>\n<p>现在卡在了一道统计二叉树节点的题目上。<br>问题的关键是我现在不知道我这个想法对不对，<br>如果都是从1开始的话，那么其实不需要结构体与指针<br>其实就是在统计元素个数。<br>感觉想得过分简单了。</p>\n<p><img src=\"/img/BinaryTreenum.png\" alt=\"题目\"></p>\n<p>分治法还是一个挺笼统的概念，它不是一个算法，而是一个设计算法的方法。<br>主要可以分为三步：分、治以及组合。</p>\n<p>老师使用了一个奇怪的比喻：<br>先将一块地分开成几个小部分，<br>分别统治它们，就相当于统治了这个总体。<br>不过还挺形象的。<br>我想起了函数的使用目的，也是为了拆分问题。</p>\n<p>分也就是将一个问题划分成若干个小问题的过程。<br>治就是对于每一个问题进行解决的过程。<br>组合就是将这些小问题的答案组合形成最终的答案。<br>分治法衍生出的算法可能很多，但是它们的递归式基本都是相似的形式<br>也就是相似于主方法范式的那种。</p>\n<blockquote>\n<p>比如 归并的 T(n) &#x3D; 2 * T(n&#x2F;2) + Θ(n)<br>二分的T(n) &#x3D; T(n&#x2F;2) + Θ(1)</p>\n</blockquote>\n<p>接着就是上文讲到的那几个举例，也是我一天的轨迹转折的地方。</p>\n<p>归并排序感觉现在已经不太想写了，<br>毕竟这个代码量与细节都挺复杂的，用qsort也挺好。<br>现在能够熟背的就是这个n^2的插入排序。<br>但是为了之后的效率我得尝试记忆一下更快的了</p>\n<p>所以现在就说说二分查找吧，这是今天另一个值得讲的话题。</p>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>1.算法演示</p>\n<p>还是给出一个<strong>有序的</strong>数组，我们想要在这个数组中查找一个数字。<br>一般来说我们肯定最朴素的想法是一个n的循环遍历数组找这个数<br>但是这个算法真的挺快的，它的时间复杂度是Θ(logn)</p>\n<p><img src=\"/img/BinarySearch.gif\" alt=\"来自于一个Python学习网站 www.penjee.com\"></p>\n<p>用分治法的思路来想这个问题，</p>\n<blockquote>\n<p>1.分 将一个数组分为大于中间数与小于中间数两部分。<br>2.治 如果搜索数小于中间数，去左边继续找<br>如果大于，去右边找。<br>3.混合，没啥操作。</p>\n</blockquote>\n<p>在图中我们看到是通过low与high这两个变量来控制mid这个变量，<br>进而来确定我们数组的左边与右边。<br>%%说实话我刚开始就是卡在了这里，<br>我想用数组长度n来限定，想了很久没想出来右边怎么搞。%%</p>\n<p>那么分别根据递归与它的定义，我们可以写出两种表示的形式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">BinarySearch_Concept</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> low = <span class=\"number\">0</span>, high = n - <span class=\"number\">1</span>, mid;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt; a[mid])</span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; a[mid])</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">BinarySearch_Recursion</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> low, <span class=\"type\">int</span> high, <span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(low &gt; high) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//可以这样写 int mid = ((right - left) &gt;&gt; 1) + left;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x == a[mid]) <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; a[mid])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> BinarySearch_Recursion(a, low, high, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &lt; a[mid])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> BinarySearch_Recursion(a, low, high, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//注 Concept为概念，Recursion为递归。</span></span><br></pre></td></tr></table></figure>\n\n<p>实际上只是一个思路两种写法而已，<br>这两种情况的执行时间应该是差不多的。</p>\n<p>今天就是套这个模版然后改了点代码，<br>有的时候还超过了不少做过这道题的人。<br>空间复杂度上或者有时在时间复杂度上。<br>官方题解也不少可以学习的地方。</p>\n<p>期望明天的学习，期望明天能够做出更多的题目，自己能够思考更多。</p>"},{"title":"算法学习：解递归式以及渐进符号","date":"2024-01-20T15:27:36.000Z","_content":"事情变得有趣起来了，今天讲的是关于离散数学的内容，没有涉及纯粹的算法。\n今天的课程内容属实是有点挑战性了，不管是能不能听下去还是理解成本。\n<!--more-->\n今天的生活状态总体来说不太好，听完课就不太知道干啥了，\n尤其是这样不涉及编程，不能支撑做题的，\n课上的内容消化已经耗能较高，我就懒得做更多的探究。\n在家里就容易活在固定模式里。\n出去也找不到玩的，复读的同学好像也还没放假，找其他人有点胆怯，\n总感觉离开家成本太大，在家里还得看妹妹。\n玩游戏吧，开放世界或者沙盒的那种总感觉玩了特容易上瘾，而且后劲很大。\n对于时间还是挺吝啬的，玩不开心，总是活在欲望与爆发希望之中。\n感觉玩个游戏都有些功利化了，要是没有啥固定的结果就是个while(1)循环了一样。\n家里的东西并不一定比那里好吃，特别是姥姥姥爷在家的时候（笑）。\n\n要是想破局的话，学做饭、尽兴做事与玩游戏，并且敢于走出去，\n我不确定自己能不能行动起来，不过写这篇也就是对我的一个提醒了。\n\n今天是彻底地对于之前还挺模糊的**渐进符号**下了精确的数学定义，所以这一篇也要像人家老师说的，纯粹是数学的讨论（但也是思维的挑战）。\n\n昨天见过了几种常用的渐进符号，也就是O, Ω, Θ, 实际上除此之外还有o，ω，分别与对应的大小关系构成“严格关系”（比如O表示小于等于，o表示严格小于）\n\n对于这些符号，现在给出定义\n\n>1.O \n\n我们用f(n) = O(g(n))形式来使用这个符号，\n它的意义是，存在适当的c与n0，\n使得对于所有的n >= n0, 满足0 <= f(n) <= c(g(n))\n\n这里的O(g(n))符号表示的并不是另一个函数，而是一个集合，\n所以这里的等于号就相当于一个属于符号∈\n这里就如同一个原函数与原函数集的关系。\n\n在昨天学习中已经接触到了这些符号都是有渐进的观点的，\n也就是省去低阶项与系数，所以除去对于f(n)非负的假设\n右边部分表示的是f(n) <= c(g(n)).\n也即O表示小于等于的一个集合，这个小于等于包含很多含义。\n有参数，阶次更低等等。\n\n在表达式中，它可以与函数一起使用（如O(g(n)）\n被用来替代一个抽象函数\n如f(n) = n^3 + O(n ^ 2) 这个表达式表达一个“小于等于n^2的函数h(n)”\n满足上面的函数关系。\n\n那么已经有了上文的O的例子，其他符号理解起来也就简单一些了。\n\n**Ω**相当于**渐进上**的”**大于等于**“，\n**o**相当于**渐进上**的“**小于**”，ω相当于**渐进上**的“**大于**”。\n**Θ**只有大写，之前写错了，相当于O与Ω的交集，\n可以理解成**渐进上**的”**相等**“。\n相当于给最高项加上系数或者加一个至几个低阶项。\n\n前提是对于足够大的n，\n因为当n为一个常数的时候，这些符号的n都是Θ(1)。\n而f(n)需要大于等于0，后面如果有低阶项的话需要保证n足够大\n（这里的大也不一定是更大，我想是大小的意思，需要一个合适的大小）.\n\n接着就是严格的部分了。\n**解递归式**\n\n就和定积分一样，它没有固定的方法，\n我们需要学习很多的方法，然后看看哪一种更适合\n\n>方法有三种\n\t1.代换法\n\t2.递归树法\n\t3.主方法\n\n主方法并不是主要的方法，只是用它是更为方便与固定的一条路。\n\n## 一. 代换法\n\n先听一下它的要求哈：\n>第一步，猜答案，而且必须猜对它，\n（但是你可以不知道常数系数，但是它的形式必须对）\n\n还是有点离谱哈，但是其实还行，给个例子就知道了。\n实际上是根据自变量与函数值关系的变化来推，而且不需要管低阶项，\n\n>T(n) = 4 * T(n/2) + n\n>（先看看，过会再和你说是如何猜的）\n\n我们一般是求上界，下界有时也会求。\n\n假设我们猜想它是一个O(n^3)\n那么自然T(k) <= k ^ 3 而且k < n\n\n展开原式然后小于等于右边式子即可，推出C >= 1时，\nO(n^3)是一个上界\n实际上这里只是一个比较宽的上界，就好像说它是小于n的10次方也可以\n但是不准确。\n\n下面就是猜的方法了，\n\n >可以看出T(n)是T(n/2)的四倍，然后n是n/2的两倍，\n>是不是与n^2类似？\n>所以按照O(n^2)假设，类似做法一直改进假设即可。\n>想看解法，如下\n\n![](/img/Processes.png)\n\n但是这种方法往往太过于理论化（哈），我在面对这些式子的时候常常走神，写到一半就不知道自己的思路去哪里了，相比于第一种方法，第二种方法还是更直观一些。\n\n## 二. 递归树法\n\n所以又是我们昨天见过的，看起来挺复杂，听上去也挺吓人的递归树。\n它有时是不太严谨的，但是它是万能的，\n可以用它来猜正确答案，然后再用第一种方法来做。\n\n>出一个例子：\n>T(n) = T(n/4) + T(n/2) + n^2\n（灵魂画手预警！！）\n\n![](/img/Treeexample.png)\n\n分支总数也就是分到最后Θ(1)的数量。-- \n虽然估测不出来，但是一定小于n\n树高度就是这个递归树总共有几层。 -- log2n\n然后一层一层地找规律并求和。\n>第一层求和为 n^2\n>第二层求和为5/16n ^ 2\n>第三层求和为25/256n ^ 2\n\n这样我们发现这个求和的结果是按照几何级数递减（小数等比）的，\n所以我们就直接等比数列求和，或者也不用求和，\n结果一定是与n^2有关的式子，而且系数一定是大于1小于2的。\n就是O(n ^ 2)(这里有点存疑，我还得问问。)\n\n## 3.主方法\n\n它被称为“主”，是因为\n它只能够被用到特定形式的递归式中 -- 符合T(n) = aT(n/b) + f(n)\n系数需要符合标准 -- a必须>= 1 b>1\n而且还得满足三种情况的其中一种（如下三种）。\n\n对于每一种情况都有一个渐进的定理，\n这些定理都可以使用递归树证明出来。\n\n**定理情况**\n比较f(n) 与 n^logba的相对大小\n+ 当f(n) = O(n^（logba - ε）），对于大于0的ε\n\tT(n) = Θ(n^logba)\n+  2.当f(n) = Θ(n^logba*(log2n)^k) k>=0\n\tT(n) = Θ(n^logba * log2n^(k+1))\n+ 3.当f(n)比n^logba增长的快\n\tf(n) = Ω(n^(logba+ε)) ,对于大于0的ε\n\t而且f(n)要不断变小(af(n/b) <= (1 - ε')f(n) ε' > 0\n\t递归树的下一层要严格小于上一层\n\tT(n) = Θ(f(n))\n\n这就是今天学习的递归树以及渐进符号内容，今天这样说来也收获了不少的东西呢！继续加油。\n\n\n\n\n","source":"_posts/算法学习：解递归式以及渐进符号.md","raw":"---\ntitle: 算法学习：解递归式以及渐进符号\ndate: 2024-01-20 23:27:36\ntags: 算法\n---\n事情变得有趣起来了，今天讲的是关于离散数学的内容，没有涉及纯粹的算法。\n今天的课程内容属实是有点挑战性了，不管是能不能听下去还是理解成本。\n<!--more-->\n今天的生活状态总体来说不太好，听完课就不太知道干啥了，\n尤其是这样不涉及编程，不能支撑做题的，\n课上的内容消化已经耗能较高，我就懒得做更多的探究。\n在家里就容易活在固定模式里。\n出去也找不到玩的，复读的同学好像也还没放假，找其他人有点胆怯，\n总感觉离开家成本太大，在家里还得看妹妹。\n玩游戏吧，开放世界或者沙盒的那种总感觉玩了特容易上瘾，而且后劲很大。\n对于时间还是挺吝啬的，玩不开心，总是活在欲望与爆发希望之中。\n感觉玩个游戏都有些功利化了，要是没有啥固定的结果就是个while(1)循环了一样。\n家里的东西并不一定比那里好吃，特别是姥姥姥爷在家的时候（笑）。\n\n要是想破局的话，学做饭、尽兴做事与玩游戏，并且敢于走出去，\n我不确定自己能不能行动起来，不过写这篇也就是对我的一个提醒了。\n\n今天是彻底地对于之前还挺模糊的**渐进符号**下了精确的数学定义，所以这一篇也要像人家老师说的，纯粹是数学的讨论（但也是思维的挑战）。\n\n昨天见过了几种常用的渐进符号，也就是O, Ω, Θ, 实际上除此之外还有o，ω，分别与对应的大小关系构成“严格关系”（比如O表示小于等于，o表示严格小于）\n\n对于这些符号，现在给出定义\n\n>1.O \n\n我们用f(n) = O(g(n))形式来使用这个符号，\n它的意义是，存在适当的c与n0，\n使得对于所有的n >= n0, 满足0 <= f(n) <= c(g(n))\n\n这里的O(g(n))符号表示的并不是另一个函数，而是一个集合，\n所以这里的等于号就相当于一个属于符号∈\n这里就如同一个原函数与原函数集的关系。\n\n在昨天学习中已经接触到了这些符号都是有渐进的观点的，\n也就是省去低阶项与系数，所以除去对于f(n)非负的假设\n右边部分表示的是f(n) <= c(g(n)).\n也即O表示小于等于的一个集合，这个小于等于包含很多含义。\n有参数，阶次更低等等。\n\n在表达式中，它可以与函数一起使用（如O(g(n)）\n被用来替代一个抽象函数\n如f(n) = n^3 + O(n ^ 2) 这个表达式表达一个“小于等于n^2的函数h(n)”\n满足上面的函数关系。\n\n那么已经有了上文的O的例子，其他符号理解起来也就简单一些了。\n\n**Ω**相当于**渐进上**的”**大于等于**“，\n**o**相当于**渐进上**的“**小于**”，ω相当于**渐进上**的“**大于**”。\n**Θ**只有大写，之前写错了，相当于O与Ω的交集，\n可以理解成**渐进上**的”**相等**“。\n相当于给最高项加上系数或者加一个至几个低阶项。\n\n前提是对于足够大的n，\n因为当n为一个常数的时候，这些符号的n都是Θ(1)。\n而f(n)需要大于等于0，后面如果有低阶项的话需要保证n足够大\n（这里的大也不一定是更大，我想是大小的意思，需要一个合适的大小）.\n\n接着就是严格的部分了。\n**解递归式**\n\n就和定积分一样，它没有固定的方法，\n我们需要学习很多的方法，然后看看哪一种更适合\n\n>方法有三种\n\t1.代换法\n\t2.递归树法\n\t3.主方法\n\n主方法并不是主要的方法，只是用它是更为方便与固定的一条路。\n\n## 一. 代换法\n\n先听一下它的要求哈：\n>第一步，猜答案，而且必须猜对它，\n（但是你可以不知道常数系数，但是它的形式必须对）\n\n还是有点离谱哈，但是其实还行，给个例子就知道了。\n实际上是根据自变量与函数值关系的变化来推，而且不需要管低阶项，\n\n>T(n) = 4 * T(n/2) + n\n>（先看看，过会再和你说是如何猜的）\n\n我们一般是求上界，下界有时也会求。\n\n假设我们猜想它是一个O(n^3)\n那么自然T(k) <= k ^ 3 而且k < n\n\n展开原式然后小于等于右边式子即可，推出C >= 1时，\nO(n^3)是一个上界\n实际上这里只是一个比较宽的上界，就好像说它是小于n的10次方也可以\n但是不准确。\n\n下面就是猜的方法了，\n\n >可以看出T(n)是T(n/2)的四倍，然后n是n/2的两倍，\n>是不是与n^2类似？\n>所以按照O(n^2)假设，类似做法一直改进假设即可。\n>想看解法，如下\n\n![](/img/Processes.png)\n\n但是这种方法往往太过于理论化（哈），我在面对这些式子的时候常常走神，写到一半就不知道自己的思路去哪里了，相比于第一种方法，第二种方法还是更直观一些。\n\n## 二. 递归树法\n\n所以又是我们昨天见过的，看起来挺复杂，听上去也挺吓人的递归树。\n它有时是不太严谨的，但是它是万能的，\n可以用它来猜正确答案，然后再用第一种方法来做。\n\n>出一个例子：\n>T(n) = T(n/4) + T(n/2) + n^2\n（灵魂画手预警！！）\n\n![](/img/Treeexample.png)\n\n分支总数也就是分到最后Θ(1)的数量。-- \n虽然估测不出来，但是一定小于n\n树高度就是这个递归树总共有几层。 -- log2n\n然后一层一层地找规律并求和。\n>第一层求和为 n^2\n>第二层求和为5/16n ^ 2\n>第三层求和为25/256n ^ 2\n\n这样我们发现这个求和的结果是按照几何级数递减（小数等比）的，\n所以我们就直接等比数列求和，或者也不用求和，\n结果一定是与n^2有关的式子，而且系数一定是大于1小于2的。\n就是O(n ^ 2)(这里有点存疑，我还得问问。)\n\n## 3.主方法\n\n它被称为“主”，是因为\n它只能够被用到特定形式的递归式中 -- 符合T(n) = aT(n/b) + f(n)\n系数需要符合标准 -- a必须>= 1 b>1\n而且还得满足三种情况的其中一种（如下三种）。\n\n对于每一种情况都有一个渐进的定理，\n这些定理都可以使用递归树证明出来。\n\n**定理情况**\n比较f(n) 与 n^logba的相对大小\n+ 当f(n) = O(n^（logba - ε）），对于大于0的ε\n\tT(n) = Θ(n^logba)\n+  2.当f(n) = Θ(n^logba*(log2n)^k) k>=0\n\tT(n) = Θ(n^logba * log2n^(k+1))\n+ 3.当f(n)比n^logba增长的快\n\tf(n) = Ω(n^(logba+ε)) ,对于大于0的ε\n\t而且f(n)要不断变小(af(n/b) <= (1 - ε')f(n) ε' > 0\n\t递归树的下一层要严格小于上一层\n\tT(n) = Θ(f(n))\n\n这就是今天学习的递归树以及渐进符号内容，今天这样说来也收获了不少的东西呢！继续加油。\n\n\n\n\n","slug":"算法学习：解递归式以及渐进符号","published":1,"updated":"2024-01-20T15:32:56.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrp133q0000h58uehuh0h398","content":"<p>事情变得有趣起来了，今天讲的是关于离散数学的内容，没有涉及纯粹的算法。<br>今天的课程内容属实是有点挑战性了，不管是能不能听下去还是理解成本。</p>\n<span id=\"more\"></span>\n<p>今天的生活状态总体来说不太好，听完课就不太知道干啥了，<br>尤其是这样不涉及编程，不能支撑做题的，<br>课上的内容消化已经耗能较高，我就懒得做更多的探究。<br>在家里就容易活在固定模式里。<br>出去也找不到玩的，复读的同学好像也还没放假，找其他人有点胆怯，<br>总感觉离开家成本太大，在家里还得看妹妹。<br>玩游戏吧，开放世界或者沙盒的那种总感觉玩了特容易上瘾，而且后劲很大。<br>对于时间还是挺吝啬的，玩不开心，总是活在欲望与爆发希望之中。<br>感觉玩个游戏都有些功利化了，要是没有啥固定的结果就是个while(1)循环了一样。<br>家里的东西并不一定比那里好吃，特别是姥姥姥爷在家的时候（笑）。</p>\n<p>要是想破局的话，学做饭、尽兴做事与玩游戏，并且敢于走出去，<br>我不确定自己能不能行动起来，不过写这篇也就是对我的一个提醒了。</p>\n<p>今天是彻底地对于之前还挺模糊的<strong>渐进符号</strong>下了精确的数学定义，所以这一篇也要像人家老师说的，纯粹是数学的讨论（但也是思维的挑战）。</p>\n<p>昨天见过了几种常用的渐进符号，也就是O, Ω, Θ, 实际上除此之外还有o，ω，分别与对应的大小关系构成“严格关系”（比如O表示小于等于，o表示严格小于）</p>\n<p>对于这些符号，现在给出定义</p>\n<blockquote>\n<p>1.O </p>\n</blockquote>\n<p>我们用f(n) &#x3D; O(g(n))形式来使用这个符号，<br>它的意义是，存在适当的c与n0，<br>使得对于所有的n &gt;&#x3D; n0, 满足0 &lt;&#x3D; f(n) &lt;&#x3D; c(g(n))</p>\n<p>这里的O(g(n))符号表示的并不是另一个函数，而是一个集合，<br>所以这里的等于号就相当于一个属于符号∈<br>这里就如同一个原函数与原函数集的关系。</p>\n<p>在昨天学习中已经接触到了这些符号都是有渐进的观点的，<br>也就是省去低阶项与系数，所以除去对于f(n)非负的假设<br>右边部分表示的是f(n) &lt;&#x3D; c(g(n)).<br>也即O表示小于等于的一个集合，这个小于等于包含很多含义。<br>有参数，阶次更低等等。</p>\n<p>在表达式中，它可以与函数一起使用（如O(g(n)）<br>被用来替代一个抽象函数<br>如f(n) &#x3D; n^3 + O(n ^ 2) 这个表达式表达一个“小于等于n^2的函数h(n)”<br>满足上面的函数关系。</p>\n<p>那么已经有了上文的O的例子，其他符号理解起来也就简单一些了。</p>\n<p><strong>Ω</strong>相当于<strong>渐进上</strong>的”<strong>大于等于</strong>“，<br><strong>o</strong>相当于<strong>渐进上</strong>的“<strong>小于</strong>”，ω相当于<strong>渐进上</strong>的“<strong>大于</strong>”。<br><strong>Θ</strong>只有大写，之前写错了，相当于O与Ω的交集，<br>可以理解成<strong>渐进上</strong>的”<strong>相等</strong>“。<br>相当于给最高项加上系数或者加一个至几个低阶项。</p>\n<p>前提是对于足够大的n，<br>因为当n为一个常数的时候，这些符号的n都是Θ(1)。<br>而f(n)需要大于等于0，后面如果有低阶项的话需要保证n足够大<br>（这里的大也不一定是更大，我想是大小的意思，需要一个合适的大小）.</p>\n<p>接着就是严格的部分了。<br><strong>解递归式</strong></p>\n<p>就和定积分一样，它没有固定的方法，<br>我们需要学习很多的方法，然后看看哪一种更适合</p>\n<blockquote>\n<p>方法有三种<br>    1.代换法<br>    2.递归树法<br>    3.主方法</p>\n</blockquote>\n<p>主方法并不是主要的方法，只是用它是更为方便与固定的一条路。</p>\n<h2 id=\"一-代换法\"><a href=\"#一-代换法\" class=\"headerlink\" title=\"一. 代换法\"></a>一. 代换法</h2><p>先听一下它的要求哈：</p>\n<blockquote>\n<p>第一步，猜答案，而且必须猜对它，<br>（但是你可以不知道常数系数，但是它的形式必须对）</p>\n</blockquote>\n<p>还是有点离谱哈，但是其实还行，给个例子就知道了。<br>实际上是根据自变量与函数值关系的变化来推，而且不需要管低阶项，</p>\n<blockquote>\n<p>T(n) &#x3D; 4 * T(n&#x2F;2) + n<br>（先看看，过会再和你说是如何猜的）</p>\n</blockquote>\n<p>我们一般是求上界，下界有时也会求。</p>\n<p>假设我们猜想它是一个O(n^3)<br>那么自然T(k) &lt;&#x3D; k ^ 3 而且k &lt; n</p>\n<p>展开原式然后小于等于右边式子即可，推出C &gt;&#x3D; 1时，<br>O(n^3)是一个上界<br>实际上这里只是一个比较宽的上界，就好像说它是小于n的10次方也可以<br>但是不准确。</p>\n<p>下面就是猜的方法了，</p>\n<blockquote>\n<p>可以看出T(n)是T(n&#x2F;2)的四倍，然后n是n&#x2F;2的两倍，<br>是不是与n^2类似？<br>所以按照O(n^2)假设，类似做法一直改进假设即可。<br>想看解法，如下</p>\n</blockquote>\n<p><img src=\"/img/Processes.png\"></p>\n<p>但是这种方法往往太过于理论化（哈），我在面对这些式子的时候常常走神，写到一半就不知道自己的思路去哪里了，相比于第一种方法，第二种方法还是更直观一些。</p>\n<h2 id=\"二-递归树法\"><a href=\"#二-递归树法\" class=\"headerlink\" title=\"二. 递归树法\"></a>二. 递归树法</h2><p>所以又是我们昨天见过的，看起来挺复杂，听上去也挺吓人的递归树。<br>它有时是不太严谨的，但是它是万能的，<br>可以用它来猜正确答案，然后再用第一种方法来做。</p>\n<blockquote>\n<p>出一个例子：<br>T(n) &#x3D; T(n&#x2F;4) + T(n&#x2F;2) + n^2<br>（灵魂画手预警！！）</p>\n</blockquote>\n<p><img src=\"/img/Treeexample.png\"></p>\n<p>分支总数也就是分到最后Θ(1)的数量。–<br>虽然估测不出来，但是一定小于n<br>树高度就是这个递归树总共有几层。 – log2n<br>然后一层一层地找规律并求和。</p>\n<blockquote>\n<p>第一层求和为 n^2<br>第二层求和为5&#x2F;16n ^ 2<br>第三层求和为25&#x2F;256n ^ 2</p>\n</blockquote>\n<p>这样我们发现这个求和的结果是按照几何级数递减（小数等比）的，<br>所以我们就直接等比数列求和，或者也不用求和，<br>结果一定是与n^2有关的式子，而且系数一定是大于1小于2的。<br>就是O(n ^ 2)(这里有点存疑，我还得问问。)</p>\n<h2 id=\"3-主方法\"><a href=\"#3-主方法\" class=\"headerlink\" title=\"3.主方法\"></a>3.主方法</h2><p>它被称为“主”，是因为<br>它只能够被用到特定形式的递归式中 – 符合T(n) &#x3D; aT(n&#x2F;b) + f(n)<br>系数需要符合标准 – a必须&gt;&#x3D; 1 b&gt;1<br>而且还得满足三种情况的其中一种（如下三种）。</p>\n<p>对于每一种情况都有一个渐进的定理，<br>这些定理都可以使用递归树证明出来。</p>\n<p><strong>定理情况</strong><br>比较f(n) 与 n^logba的相对大小</p>\n<ul>\n<li>当f(n) &#x3D; O(n^（logba - ε）），对于大于0的ε<br>  T(n) &#x3D; Θ(n^logba)</li>\n<li>2.当f(n) &#x3D; Θ(n^logba*(log2n)^k) k&gt;&#x3D;0<br> T(n) &#x3D; Θ(n^logba * log2n^(k+1))</li>\n<li>3.当f(n)比n^logba增长的快<br>  f(n) &#x3D; Ω(n^(logba+ε)) ,对于大于0的ε<br>  而且f(n)要不断变小(af(n&#x2F;b) &lt;&#x3D; (1 - ε’)f(n) ε’ &gt; 0<br>  递归树的下一层要严格小于上一层<br>  T(n) &#x3D; Θ(f(n))</li>\n</ul>\n<p>这就是今天学习的递归树以及渐进符号内容，今天这样说来也收获了不少的东西呢！继续加油。</p>\n","site":{"data":{}},"excerpt":"<p>事情变得有趣起来了，今天讲的是关于离散数学的内容，没有涉及纯粹的算法。<br>今天的课程内容属实是有点挑战性了，不管是能不能听下去还是理解成本。</p>","more":"<p>今天的生活状态总体来说不太好，听完课就不太知道干啥了，<br>尤其是这样不涉及编程，不能支撑做题的，<br>课上的内容消化已经耗能较高，我就懒得做更多的探究。<br>在家里就容易活在固定模式里。<br>出去也找不到玩的，复读的同学好像也还没放假，找其他人有点胆怯，<br>总感觉离开家成本太大，在家里还得看妹妹。<br>玩游戏吧，开放世界或者沙盒的那种总感觉玩了特容易上瘾，而且后劲很大。<br>对于时间还是挺吝啬的，玩不开心，总是活在欲望与爆发希望之中。<br>感觉玩个游戏都有些功利化了，要是没有啥固定的结果就是个while(1)循环了一样。<br>家里的东西并不一定比那里好吃，特别是姥姥姥爷在家的时候（笑）。</p>\n<p>要是想破局的话，学做饭、尽兴做事与玩游戏，并且敢于走出去，<br>我不确定自己能不能行动起来，不过写这篇也就是对我的一个提醒了。</p>\n<p>今天是彻底地对于之前还挺模糊的<strong>渐进符号</strong>下了精确的数学定义，所以这一篇也要像人家老师说的，纯粹是数学的讨论（但也是思维的挑战）。</p>\n<p>昨天见过了几种常用的渐进符号，也就是O, Ω, Θ, 实际上除此之外还有o，ω，分别与对应的大小关系构成“严格关系”（比如O表示小于等于，o表示严格小于）</p>\n<p>对于这些符号，现在给出定义</p>\n<blockquote>\n<p>1.O </p>\n</blockquote>\n<p>我们用f(n) &#x3D; O(g(n))形式来使用这个符号，<br>它的意义是，存在适当的c与n0，<br>使得对于所有的n &gt;&#x3D; n0, 满足0 &lt;&#x3D; f(n) &lt;&#x3D; c(g(n))</p>\n<p>这里的O(g(n))符号表示的并不是另一个函数，而是一个集合，<br>所以这里的等于号就相当于一个属于符号∈<br>这里就如同一个原函数与原函数集的关系。</p>\n<p>在昨天学习中已经接触到了这些符号都是有渐进的观点的，<br>也就是省去低阶项与系数，所以除去对于f(n)非负的假设<br>右边部分表示的是f(n) &lt;&#x3D; c(g(n)).<br>也即O表示小于等于的一个集合，这个小于等于包含很多含义。<br>有参数，阶次更低等等。</p>\n<p>在表达式中，它可以与函数一起使用（如O(g(n)）<br>被用来替代一个抽象函数<br>如f(n) &#x3D; n^3 + O(n ^ 2) 这个表达式表达一个“小于等于n^2的函数h(n)”<br>满足上面的函数关系。</p>\n<p>那么已经有了上文的O的例子，其他符号理解起来也就简单一些了。</p>\n<p><strong>Ω</strong>相当于<strong>渐进上</strong>的”<strong>大于等于</strong>“，<br><strong>o</strong>相当于<strong>渐进上</strong>的“<strong>小于</strong>”，ω相当于<strong>渐进上</strong>的“<strong>大于</strong>”。<br><strong>Θ</strong>只有大写，之前写错了，相当于O与Ω的交集，<br>可以理解成<strong>渐进上</strong>的”<strong>相等</strong>“。<br>相当于给最高项加上系数或者加一个至几个低阶项。</p>\n<p>前提是对于足够大的n，<br>因为当n为一个常数的时候，这些符号的n都是Θ(1)。<br>而f(n)需要大于等于0，后面如果有低阶项的话需要保证n足够大<br>（这里的大也不一定是更大，我想是大小的意思，需要一个合适的大小）.</p>\n<p>接着就是严格的部分了。<br><strong>解递归式</strong></p>\n<p>就和定积分一样，它没有固定的方法，<br>我们需要学习很多的方法，然后看看哪一种更适合</p>\n<blockquote>\n<p>方法有三种<br>    1.代换法<br>    2.递归树法<br>    3.主方法</p>\n</blockquote>\n<p>主方法并不是主要的方法，只是用它是更为方便与固定的一条路。</p>\n<h2 id=\"一-代换法\"><a href=\"#一-代换法\" class=\"headerlink\" title=\"一. 代换法\"></a>一. 代换法</h2><p>先听一下它的要求哈：</p>\n<blockquote>\n<p>第一步，猜答案，而且必须猜对它，<br>（但是你可以不知道常数系数，但是它的形式必须对）</p>\n</blockquote>\n<p>还是有点离谱哈，但是其实还行，给个例子就知道了。<br>实际上是根据自变量与函数值关系的变化来推，而且不需要管低阶项，</p>\n<blockquote>\n<p>T(n) &#x3D; 4 * T(n&#x2F;2) + n<br>（先看看，过会再和你说是如何猜的）</p>\n</blockquote>\n<p>我们一般是求上界，下界有时也会求。</p>\n<p>假设我们猜想它是一个O(n^3)<br>那么自然T(k) &lt;&#x3D; k ^ 3 而且k &lt; n</p>\n<p>展开原式然后小于等于右边式子即可，推出C &gt;&#x3D; 1时，<br>O(n^3)是一个上界<br>实际上这里只是一个比较宽的上界，就好像说它是小于n的10次方也可以<br>但是不准确。</p>\n<p>下面就是猜的方法了，</p>\n<blockquote>\n<p>可以看出T(n)是T(n&#x2F;2)的四倍，然后n是n&#x2F;2的两倍，<br>是不是与n^2类似？<br>所以按照O(n^2)假设，类似做法一直改进假设即可。<br>想看解法，如下</p>\n</blockquote>\n<p><img src=\"/img/Processes.png\"></p>\n<p>但是这种方法往往太过于理论化（哈），我在面对这些式子的时候常常走神，写到一半就不知道自己的思路去哪里了，相比于第一种方法，第二种方法还是更直观一些。</p>\n<h2 id=\"二-递归树法\"><a href=\"#二-递归树法\" class=\"headerlink\" title=\"二. 递归树法\"></a>二. 递归树法</h2><p>所以又是我们昨天见过的，看起来挺复杂，听上去也挺吓人的递归树。<br>它有时是不太严谨的，但是它是万能的，<br>可以用它来猜正确答案，然后再用第一种方法来做。</p>\n<blockquote>\n<p>出一个例子：<br>T(n) &#x3D; T(n&#x2F;4) + T(n&#x2F;2) + n^2<br>（灵魂画手预警！！）</p>\n</blockquote>\n<p><img src=\"/img/Treeexample.png\"></p>\n<p>分支总数也就是分到最后Θ(1)的数量。–<br>虽然估测不出来，但是一定小于n<br>树高度就是这个递归树总共有几层。 – log2n<br>然后一层一层地找规律并求和。</p>\n<blockquote>\n<p>第一层求和为 n^2<br>第二层求和为5&#x2F;16n ^ 2<br>第三层求和为25&#x2F;256n ^ 2</p>\n</blockquote>\n<p>这样我们发现这个求和的结果是按照几何级数递减（小数等比）的，<br>所以我们就直接等比数列求和，或者也不用求和，<br>结果一定是与n^2有关的式子，而且系数一定是大于1小于2的。<br>就是O(n ^ 2)(这里有点存疑，我还得问问。)</p>\n<h2 id=\"3-主方法\"><a href=\"#3-主方法\" class=\"headerlink\" title=\"3.主方法\"></a>3.主方法</h2><p>它被称为“主”，是因为<br>它只能够被用到特定形式的递归式中 – 符合T(n) &#x3D; aT(n&#x2F;b) + f(n)<br>系数需要符合标准 – a必须&gt;&#x3D; 1 b&gt;1<br>而且还得满足三种情况的其中一种（如下三种）。</p>\n<p>对于每一种情况都有一个渐进的定理，<br>这些定理都可以使用递归树证明出来。</p>\n<p><strong>定理情况</strong><br>比较f(n) 与 n^logba的相对大小</p>\n<ul>\n<li>当f(n) &#x3D; O(n^（logba - ε）），对于大于0的ε<br>  T(n) &#x3D; Θ(n^logba)</li>\n<li>2.当f(n) &#x3D; Θ(n^logba*(log2n)^k) k&gt;&#x3D;0<br> T(n) &#x3D; Θ(n^logba * log2n^(k+1))</li>\n<li>3.当f(n)比n^logba增长的快<br>  f(n) &#x3D; Ω(n^(logba+ε)) ,对于大于0的ε<br>  而且f(n)要不断变小(af(n&#x2F;b) &lt;&#x3D; (1 - ε’)f(n) ε’ &gt; 0<br>  递归树的下一层要严格小于上一层<br>  T(n) &#x3D; Θ(f(n))</li>\n</ul>\n<p>这就是今天学习的递归树以及渐进符号内容，今天这样说来也收获了不少的东西呢！继续加油。</p>"},{"title":"高等数学小整理","date":"2023-11-27T13:07:09.000Z","_content":"\n![第一页](/img/page1.png)\n![第二页](/img/page2.png)\n![第三页](/img/page3.png)\n","source":"_posts/高等数学小整理.md","raw":"---\ntitle: 高等数学小整理\ndate: 2023-11-27 21:07:09\ntags: 大学学习\n---\n\n![第一页](/img/page1.png)\n![第二页](/img/page2.png)\n![第三页](/img/page3.png)\n","slug":"高等数学小整理","published":1,"updated":"2023-11-27T13:16:00.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrp133q0000j58uea56sc21e","content":"<p><img src=\"/img/page1.png\" alt=\"第一页\"><br><img src=\"/img/page2.png\" alt=\"第二页\"><br><img src=\"/img/page3.png\" alt=\"第三页\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/img/page1.png\" alt=\"第一页\"><br><img src=\"/img/page2.png\" alt=\"第二页\"><br><img src=\"/img/page3.png\" alt=\"第三页\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/OJ中的那些小丑行为/OJclown.png","slug":"OJclown.png","post":"clp6949e90001h4ueadpxanhc","modified":0,"renderable":0},{"_id":"source/_posts/千奇百怪的字符串处理函数/2.png","slug":"2.png","post":"clp6949ec0003h4ue1pmsf07d","modified":0,"renderable":0},{"_id":"source/_posts/千奇百怪的字符串处理函数/1.png","slug":"1.png","post":"clp6949ec0003h4ue1pmsf07d","modified":0,"renderable":0},{"_id":"source/_posts/千奇百怪的字符串处理函数/3.png","slug":"3.png","post":"clp6949ec0003h4ue1pmsf07d","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clp6949eg000ah4ued9g5a9ch","category_id":"clp6949ei000fh4ue70s29wmz","_id":"clp6949ek000oh4uecok95z6z"}],"PostTag":[{"post_id":"clp6949ef0008h4uefu7l3bey","tag_id":"clp6949ed0004h4ue6949408v","_id":"clp6949eh000ch4uedbxj8uys"},{"post_id":"clp6949e90001h4ueadpxanhc","tag_id":"clp6949ed0004h4ue6949408v","_id":"clp6949ej000gh4uedhyzcdc8"},{"post_id":"clp6949ec0003h4ue1pmsf07d","tag_id":"clp6949ed0004h4ue6949408v","_id":"clp6949ej000jh4uea9924xt1"},{"post_id":"clp6949ej000hh4uehbf3397k","tag_id":"clp6949ed0004h4ue6949408v","_id":"clp6949ek000lh4uehocjhl17"},{"post_id":"clp6949ej000kh4ueecp51kz7","tag_id":"clp6949ed0004h4ue6949408v","_id":"clp6949ek000mh4ue770y9um7"},{"post_id":"clp6949ei000eh4ue5pz95jko","tag_id":"clp6949ej000ih4ueci9l2ujf","_id":"clp6949ek000nh4uehnj6gf0m"},{"post_id":"clpco7urr0000q8ue7v140asa","tag_id":"clp6949ed0004h4ue6949408v","_id":"clpco7urx0001q8ue6mt2ed8m"},{"post_id":"clrp133pm000458ue2a464xuc","tag_id":"clp6949ed0004h4ue6949408v","_id":"clrp133pq000758ue3gn08ekk"},{"post_id":"clrp133pd000158uebwwi77wl","tag_id":"clrp133ph000358ue17os1r9k","_id":"clrp133pr000958ue9fki2gsx"},{"post_id":"clrp133pn000558ueexbb7mji","tag_id":"clp6949ed0004h4ue6949408v","_id":"clrp133ps000b58ue72wx9cki"},{"post_id":"clrp133pq000858uebigvai7o","tag_id":"clrp133ph000358ue17os1r9k","_id":"clrp133pt000d58ue3jaj5vvv"},{"post_id":"clrp133pf000258uegkhc1fbr","tag_id":"clrp133ph000358ue17os1r9k","_id":"clrp133pt000e58uef2a5dt4v"},{"post_id":"clrp133pr000a58uedcr63hbm","tag_id":"clrp133pt000c58ue1usmhdbp","_id":"clrp133pt000f58uedgks4z8r"},{"post_id":"clrp133pz000g58uehwa08cx2","tag_id":"clrp133pt000c58ue1usmhdbp","_id":"clrp133q0000i58ue5x7yfv6o"},{"post_id":"clrp133q0000h58uehuh0h398","tag_id":"clrp133pt000c58ue1usmhdbp","_id":"clrp133q1000k58ue72332ihm"},{"post_id":"clrp133q0000j58uea56sc21e","tag_id":"clrp133q1000l58ue4hrzcx9v","_id":"clrp133q1000m58ue61m23zq6"}],"Tag":[{"name":"C语言学习","_id":"clp6949ed0004h4ue6949408v"},{"name":"学习资源","_id":"clp6949ej000ih4ueci9l2ujf"},{"name":"C_premier_plus","_id":"clrp133ph000358ue17os1r9k"},{"name":"算法","_id":"clrp133pt000c58ue1usmhdbp"},{"name":"大学学习","_id":"clrp133q1000l58ue4hrzcx9v"}]}}