<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>流程控制方法</title>
    <url>/2023/08/30/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>今天，在大多数编程语言中，都提供两种循环结构，一种是<strong>以数据容器为基础的</strong>，一种是<strong>以条件为基础的</strong>。</p>
<p>#if语句</p>
<h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><strong>if语句</strong></h1><p>你其实能发现，这一页可以构成一个粗略的if嵌套循环。</p>
<p>if语句的最简单构成是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">	statements</span><br></pre></td></tr></table></figure>
<p>如果expression返回值为真，则执行statements，否则执行下面的语句。</p>
<p>如果想让它对两种互补的情况操作，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">	statements_for_true</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	statements_for_false</span><br></pre></td></tr></table></figure>
<p>如果有更多的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression1:</span><br><span class="line">	statements_for_expresson1_True</span><br><span class="line"><span class="keyword">elif</span> expression2:</span><br><span class="line">	statements_for_expression2_True</span><br><span class="line"><span class="keyword">elif</span> expression2:</span><br><span class="line">	statements_for_expression3_True</span><br></pre></td></tr></table></figure>
<p>其中，<em>elif</em>是<em>else if</em>的缩写，用法相同。</p>
<p>#for循环</p>
<h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><strong>for循环</strong></h1><p>用来对于数据容器(<strong>尤其是有序容器</strong>)中的数据逐个操作的循环<br>for循环是以集合为基础的循环。<br>for后的‘for i in is’，如果<code>i in is</code>为<em>False</em><br>即<strong>i无值或is为空的</strong><br>则下面的语句不会被执行。</p>
<p>#continue #break #pass</p>
<h1 id="Continue、Break和Pass语句"><a href="#Continue、Break和Pass语句" class="headerlink" title="Continue、Break和Pass语句"></a>Continue、Break和Pass语句</h1><p><em>Continue</em>语句将忽略其后的语句开始下一次循环。<br><em>Break</em>从此结束循环。<br><em>Pass</em>什么也不干，是用来占位的。</p>
<p>#while循环</p>
<h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><p>while循环的格式如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> expression:</span><br><span class="line">	statements</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python学习</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2023/11/07/%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="数组概论（Ver-2）"><a href="#数组概论（Ver-2）" class="headerlink" title="数组概论（Ver 2）"></a>数组概论（Ver 2）</h1><p>战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。<br>今天大体讲一下关于数组的内容，看完就可以使用来做题了。</p>
<p>目录请见群里发送的图片</p>
<h2 id="1-数组基本用法"><a href="#1-数组基本用法" class="headerlink" title="1.数组基本用法"></a>1.数组基本用法</h2><h3 id="1-1-数组的初始化"><a href="#1-1-数组的初始化" class="headerlink" title="1.1 数组的初始化"></a>1.1 数组的初始化</h3><p>我们知道，要使用一个变量，我们需要先“声明”才能够使用，<br>数组也是这样的，但作为一个数据容器，它还有大小这个参数。<br>大体格式是这样的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;数据类型&gt; &lt;标识符&gt;[长度];</span><br><span class="line"><span class="comment">//也可以在长度后面加上=&#123;&#125;，但是数组不确定的时候，没必要。</span></span><br></pre></td></tr></table></figure>
<p>这里的<strong>数据类型</strong>就是我们常用的int,double,char等等，<br>表示数组内元素的数据类型</p>
<p><strong>标识符</strong>是数组的名称，命名时也符合变量的命名规范<br>比如这样</p>
<blockquote>
<p>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，<br>不能使用关键字（会语法高亮的字比如int）<br>最好使用这种形式 数据类型的首字母加上名称，如iArray1</p>
</blockquote>
<p><strong>长度</strong>是可以省略的，但只在数组完全确定的时候。<br>但是我们在做题的过程中一般不使用确定的数组<br>（数组可以预先指定好元素的值，如下例）<br>一般是题目告诉我们最多的时候数据有多少个，<br>我们一般取很大的数，如1000、10000等。<br>像iArray0这样。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> iArray0[<span class="number">1000</span>]; <span class="comment">//相信我，这会是你们用的频率最多的那种。</span></span><br><span class="line"><span class="type">int</span> iArray1[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//确定数组</span></span><br><span class="line"><span class="type">int</span> iArray2[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;      <span class="comment">//int与double类型都是空位补零。</span></span><br><span class="line"><span class="type">int</span> iArray3[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;   <span class="comment">//省略长度，相当于iArray1</span></span><br></pre></td></tr></table></figure>

<p>其中，对于iArray3，规定了长度，但是没有确定完5个元素，<br>其他的元素对于int类型数组用0填上<br>但对于char类型的数组，用的是一个字符<code>\0</code>，以后学字符串的时候会接触到<br>这个字符提前，那么输出的时候就会提前结束。</p>
<h3 id="1-2-数组的数据储存输出"><a href="#1-2-数组的数据储存输出" class="headerlink" title="1.2 数组的数据储存输出"></a>1.2 数组的数据储存输出</h3><p>已经声明完了，那么接下来就是往容器里加入数据<br>方式依旧是我们惯用的scanf函数。<br>但是这里就要到一个很容易错的点了：<strong>下标</strong><br>先看下面的演示，我们这样来写入数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这也是一种惯用模式吧，像今天下午老师总结的那个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;iArray0[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉</span></span><br></pre></td></tr></table></figure>

<p>相信聪明的你已经看到了，我们的<strong>i是从0开始取的</strong>，<br>那么<code>iArray0[0]</code>也就表示在<code>iArray0</code>数组里的第一项，所以最后的一项的下标是n - 1。<br>这个特性一定要记好，要好好练习啊！<br>（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）</p>
<p>那么也像储存一样，我们也是用printf函数加上for循环来输出的<br>（这比起某种语言真的太麻烦啦！差评）</p>
<p>所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。</p>
<h2 id="2-多维数组"><a href="#2-多维数组" class="headerlink" title="2.多维数组"></a>2.多维数组</h2><p>也是简单一说，在平常做题的时候这种数组不会很频繁地用到。<br>如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。<br>就像下面这样<br>    0   1   2<br>0<br>1<br>2<br>二维数组用两个参数确定一个值，<br>也就是说在<strong>scanf输入、声明、printf输出</strong>的时候也需要两个括号。<br>几维数组就是几个括号，其他的表示方式其实与一维数组差不多。</p>
<blockquote>
<p>1.空位自动补上对应的数值<br>2.在数组确定的时候是可以省略长度参数的<br>3.确定的时候稍有不同，可以有两种确定方式，如下。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> iArray4[<span class="number">1000</span>][<span class="number">1000</span>];  <span class="comment">//最常用的,等待输入</span></span><br><span class="line"><span class="type">int</span> iArray5[<span class="number">2</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//或者int iArray5[2][5] = &#123;1,2,3,4,5,2,3,4,5,6&#125;;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-数组的应用场景"><a href="#3-数组的应用场景" class="headerlink" title="3.数组的应用场景"></a>3.数组的应用场景</h2><p>从这几次周赛的题目来看，我们使用数组的目的是<strong>储存数据</strong>，<br>也就是当我们<strong>需要不止一次地遍历数据，而且数据很多</strong>的时候，我们就可以使用数组。<br>（不多的时候，两三个直接用变量存就好了）<br>这里拿出两种题，<br>一种是n个数求和，我们定义一个sum变量，<br>直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。<br>但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，<br>这就需要遍历数组了，需要在输入之后再次使用所有数据。</p>
<p>所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。<br>我的分享到此结束！谢谢大家的时间！</p>
]]></content>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2023/11/07/%E6%95%B0%E7%BB%84-1/</url>
    <content><![CDATA[<h1 id="数组概论（Ver-2）"><a href="#数组概论（Ver-2）" class="headerlink" title="数组概论（Ver 2）"></a>数组概论（Ver 2）</h1><p>战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。<br>今天大体讲一下关于数组的内容，看完就可以使用来做题了。</p>
<p>目录请见群里发送的图片</p>
<h2 id="1-数组基本用法"><a href="#1-数组基本用法" class="headerlink" title="1.数组基本用法"></a>1.数组基本用法</h2><h3 id="1-1-数组的初始化"><a href="#1-1-数组的初始化" class="headerlink" title="1.1 数组的初始化"></a>1.1 数组的初始化</h3><p>我们知道，要使用一个变量，我们需要先“声明”才能够使用，<br>数组也是这样的，但作为一个数据容器，它还有大小这个参数。<br>大体格式是这样的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;数据类型&gt; &lt;标识符&gt;[长度];</span><br><span class="line"><span class="comment">//也可以在长度后面加上=&#123;&#125;，但是数组不确定的时候，没必要。</span></span><br></pre></td></tr></table></figure>
<p>这里的<strong>数据类型</strong>就是我们常用的int,double,char等等，<br>表示数组内元素的数据类型</p>
<p><strong>标识符</strong>是数组的名称，命名时也符合变量的命名规范<br>比如这样</p>
<blockquote>
<p>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，<br>不能使用关键字（会语法高亮的字比如int）<br>最好使用这种形式 数据类型的首字母加上名称，如iArray1</p>
</blockquote>
<p><strong>长度</strong>是可以省略的，但只在数组完全确定的时候。<br>但是我们在做题的过程中一般不使用确定的数组<br>（数组可以预先指定好元素的值，如下例）<br>一般是题目告诉我们最多的时候数据有多少个，<br>我们一般取很大的数，如1000、10000等。<br>像iArray0这样。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> iArray0[<span class="number">1000</span>]; <span class="comment">//相信我，这会是你们用的频率最多的那种。</span></span><br><span class="line"><span class="type">int</span> iArray1[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//确定数组</span></span><br><span class="line"><span class="type">int</span> iArray2[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;      <span class="comment">//int与double类型都是空位补零。</span></span><br><span class="line"><span class="type">int</span> iArray3[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;   <span class="comment">//省略长度，相当于iArray1</span></span><br></pre></td></tr></table></figure>

<p>其中，对于iArray3，规定了长度，但是没有确定完5个元素，<br>其他的元素对于int类型数组用0填上<br>但对于char类型的数组，用的是一个字符<code>\0</code>，以后学字符串的时候会接触到<br>这个字符提前，那么输出的时候就会提前结束。</p>
<h3 id="1-2-数组的数据储存输出"><a href="#1-2-数组的数据储存输出" class="headerlink" title="1.2 数组的数据储存输出"></a>1.2 数组的数据储存输出</h3><p>已经声明完了，那么接下来就是往容器里加入数据<br>方式依旧是我们惯用的scanf函数。<br>但是这里就要到一个很容易错的点了：<strong>下标</strong><br>先看下面的演示，我们这样来写入数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这也是一种惯用模式吧，像今天下午老师总结的那个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;iArray0[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉</span></span><br></pre></td></tr></table></figure>

<p>相信聪明的你已经看到了，我们的<strong>i是从0开始取的</strong>，<br>那么<code>iArray0[0]</code>也就表示在<code>iArray0</code>数组里的第一项，所以最后的一项的下标是n - 1。<br>这个特性一定要记好，要好好练习啊！<br>（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）</p>
<p>那么也像储存一样，我们也是用printf函数加上for循环来输出的<br>（这比起某种语言真的太麻烦啦！差评）</p>
<p>所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。</p>
<h2 id="2-多维数组"><a href="#2-多维数组" class="headerlink" title="2.多维数组"></a>2.多维数组</h2><p>也是简单一说，在平常做题的时候这种数组不会很频繁地用到。<br>如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。<br>就像下面这样<br>    0   1   2<br>0<br>1<br>2<br>二维数组用两个参数确定一个值，<br>也就是说在<strong>scanf输入、声明、printf输出</strong>的时候也需要两个括号。<br>几维数组就是几个括号，其他的表示方式其实与一维数组差不多。</p>
<blockquote>
<p>1.空位自动补上对应的数值<br>2.在数组确定的时候是可以省略长度参数的<br>3.确定的时候稍有不同，可以有两种确定方式，如下。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> iArray4[<span class="number">1000</span>][<span class="number">1000</span>];  <span class="comment">//最常用的,等待输入</span></span><br><span class="line"><span class="type">int</span> iArray5[<span class="number">2</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//或者int iArray5[2][5] = &#123;1,2,3,4,5,2,3,4,5,6&#125;;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-数组的应用场景"><a href="#3-数组的应用场景" class="headerlink" title="3.数组的应用场景"></a>3.数组的应用场景</h2><p>从这几次周赛的题目来看，我们使用数组的目的是<strong>储存数据</strong>，<br>也就是当我们<strong>需要不止一次地遍历数据，而且数据很多</strong>的时候，我们就可以使用数组。<br>（不多的时候，两三个直接用变量存就好了）<br>这里拿出两种题，<br>一种是n个数求和，我们定义一个sum变量，<br>直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。<br>但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，<br>这就需要遍历数组了，需要在输入之后再次使用所有数据。</p>
<p>所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。<br>我的分享到此结束！谢谢大家的时间！</p>
]]></content>
      <tags>
        <tag>C语言学习</tag>
      </tags>
  </entry>
</search>
