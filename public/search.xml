<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>网站集合</title>
    <url>/2023/11/20/%E7%BD%91%E7%AB%99%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="总体网站集合"><a href="#总体网站集合" class="headerlink" title="总体网站集合"></a>总体网站集合</h1><blockquote>
<p>1.菜鸟教程 <a href="http://www.runoob.com/">www.runoob.com</a><br>2.空梦博客 <a href="http://www.kmar.top/">www.kmar.top</a><br>3.昨日学长的B站号 [@zyoobn]<br>学长的CSDN [@郑轻大不知名]<br>4.编程爱好者协会 <a href="http://www.godyu.com/">www.godyu.com</a><br>B站直播号 [@郑轻编程爱好者协会]</p>
</blockquote>
<p>看来我作为一个新人菜狗是不配加入郑轻编程爱好者协会了<br>那网站上没法发帖子，所以我还是自己想办法建个博客吧。</p>
]]></content>
      <tags>
        <tag>学习资源</tag>
      </tags>
  </entry>
  <entry>
    <title>直播内容复盘-排序与交换</title>
    <url>/2023/11/20/%E7%9B%B4%E6%92%AD%E5%86%85%E5%AE%B9%E5%A4%8D%E7%9B%98-%E6%8E%92%E5%BA%8F%E4%B8%8E%E4%BA%A4%E6%8D%A2/</url>
    <content><![CDATA[<p>昨天晚上的重点是归并排序的算法，虽然我们还没有学到函数递归<br>我还需要再联系联系，不太能独立写出来。<br>那就整理一下昨天晚上听到的一些点，</p>
<h2 id="qsort函数的用法以及swap函数"><a href="#qsort函数的用法以及swap函数" class="headerlink" title="qsort函数的用法以及swap函数"></a>qsort函数的用法以及swap函数</h2><blockquote>
<p>首先声明，需要添加stdlib库</p>
</blockquote>
<p>上定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">void</span> *base, <span class="type">size_t</span> nitems, <span class="type">size_t</span> size, <span class="type">int</span> (*compar)(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span>*))</span></span><br></pre></td></tr></table></figure>

<p>这个定义有点太复杂，我们可以把它特殊化处理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">qsort</span><span class="params">(排序数组,排序个数，<span class="keyword">sizeof</span>(数组数据类型)，排序规则(cmp))</span>;</span><br></pre></td></tr></table></figure>

<p>这样的话就明了了，我们输入一个数组，经过qsort函数的的一通操作，返回一个排过序的数组。</p>
<p>因为我们学习过全局变量，所以这个注意事项也好懂</p>
<blockquote>
<p>这个数组必须是全局的，即必须在预处理之后，主函数之前定义。</p>
</blockquote>
<p>因为这样数组才对qsort函数“可见“。</p>
<p>cmp函数需要自己写，写的思路用到了指针，不过照抄就好。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span> <span class="params">(<span class="type">const</span> <span class="type">void</span> * a, <span class="type">const</span> <span class="type">void</span> * b)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">   <span class="keyword">return</span> ( *(<span class="type">int</span>*)a - *(<span class="type">int</span>*)b );  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先强转为对应类型的指针，然后再相减，</span></span><br><span class="line"><span class="comment">//a-b为从小到大，b-a为从大到小</span></span><br></pre></td></tr></table></figure>

<p>如果是字符串排序的话，需要用到strcmp函数，之前已经讲过。</p>
<p>所以这就是qsort库函数的用法。</p>
<p>还有是swap函数，可以在我们写排序的时候用到。<br>可以交换数组内的数据，非常好用。<br>形式如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">swap(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>
<p>到用的时候可以把a和b换成数组的元素，如array[1].<br>可以便捷地实现交换。<br>这个函数实际上自己写也可以。</p>
<p>这就是昨天晚上在学长的直播中学到的除了归并排序外的东西。</p>
]]></content>
      <tags>
        <tag>C语言学习</tag>
      </tags>
  </entry>
  <entry>
    <title>输入与输出</title>
    <url>/2023/11/20/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<p>从字符串那里，包括之前听C语言群里大佬说<br>也获取到了一些关于printf与scanf的更多形式与更多玩法的知识。<br>今天也一并分享给大家。</p>
<h2 id="1-stdio-h中的更多的函数"><a href="#1-stdio-h中的更多的函数" class="headerlink" title="1.stdio.h中的更多的函数"></a>1.stdio.h中的更多的函数</h2><p>(关于stream与参数列表的不讲，还没学到。)</p>
<p>类似的，应该你们也听说过，这里列一下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sscanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="一-函数定义读法"><a href="#一-函数定义读法" class="headerlink" title="一.函数定义读法"></a>一.函数定义读法</h3><p>这里是纯纯的函数函数定义，看起来可能很抽象，<br><strong>没关系，我会出手。</strong></p>
<p>总体上一讲，以后见到<strong>前面带f</strong>的一般是有关<code>stream</code>的<br><strong>带v的</strong>一般是有关<code>参数列表</code>的，<br>以后看到学长写类似的函数就知道该多学习了!😂</p>
<p>对于以后看这样的函数定义，首先看[返回值类型]，<br>一般是，返回处理的结果或者返回一个数值（int&#x2F;double)</p>
<p>然后如果看不懂函数名的话，<br>先看[括号中的形式参数]，知道我们需要输入的是什么东西。</p>
<blockquote>
<p>比如这两个函数中<br><strong>const</strong>是数据类型的修饰符，表示常量。<br>char* 表示字符串、后面的是形式参数名，不需要管。</p>
</blockquote>
<p>最后，通过[看实例]与函数的[概述]得知函数的作用。<br>在菜鸟教程里都一条一条地列出来的，每一条都有实例。</p>
<p>在最后一篇文章的最后会给大家列出来用过的这些网站。</p>
<h3 id="二-浅谈没讲过的sscanf-函数"><a href="#二-浅谈没讲过的sscanf-函数" class="headerlink" title="二.浅谈没讲过的sscanf()函数"></a>二.浅谈没讲过的sscanf()函数</h3><p>上一篇我们已经讲过sprintf函数了，知道了它可以用来写入字符串。<br>现在就来讲一讲相对的sscanf函数。</p>
<p>不多说，直接上函数定义。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sscanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>

<p>首先看<strong>返回值</strong><br>这个函数返回的是一个数值，也就像scanf一样<br>函数返回的是成功赋值与匹配的个数。<br>如果到达文件末尾或者错误返回EOF。</p>
<p>然后看<strong>形参</strong><br>获取的是字符串常量(<code>const char *str</code>)，<br>    这个字符串，是包含着我们想要赋值数据的字符串。<br>写入形式(<code>const char *format</code>)<br>    写入形式相当于格式化符，相当于赋值的顺序）<br>    尽量不要加新的形式。<br>与参数列表(<code>...</code>)。<br>    对应之前的格式化符。<br>关于参数列表，其实简单的说<br>就是我们printf中标准符后边逗号中的内容<br>见下方。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="comment">//后面的a,b,c就是参数列表</span></span><br><span class="line"><span class="comment">//%d的这个字符串就是写入形式的一种形式</span></span><br></pre></td></tr></table></figure>

<p>所以这个函数的<strong>功能</strong>就是</p>
<blockquote>
<p>1.从字符串中获取数据，<br>2.然后赋给格式化符的对应的变量。</p>
</blockquote>
<p>sscanf不需要我们自己输入，在字符串中有就好。</p>
<p>所以更多的惯例自己去菜鸟教程上查就好，<br><strong>建议立即行动，不然一定会忘记。</strong></p>
<h2 id="二-关于我们的输入输出"><a href="#二-关于我们的输入输出" class="headerlink" title="二.关于我们的输入输出"></a>二.关于我们的输入输出</h2><blockquote>
<p>以下内容取自空梦大大的博客<br><a href="https://kmar.top/posts/51c9b0a0/">如何理解c&#x2F;c++中的输入&#x2F;输出函数？ | 山岳库博</a><br>我们这里梳理的是，我们这个阶段可以用到的符号。</p>
</blockquote>
<h3 id="1-关于格式化符与printf、scanf修饰符"><a href="#1-关于格式化符与printf、scanf修饰符" class="headerlink" title="1.关于格式化符与printf、scanf修饰符"></a>1.关于格式化符与printf、scanf修饰符</h3><p>格式化符我们需要知道的如下，之前在题中也出过。<br>    1. %d&#x2F;%lf&#x2F;%f&#x2F;%c 整数、字符、浮点数<br>    2. %s 字符串输入与输出。<br>    3. %x&#x2F;%X - 十六进制整数 或者 %o 八进制整数<br>    4. %%两个百分号一起用可以输出%号，相当于转义了。<br>%%<br>掌握了这些我们就不太用怕需要的数据表示不出来了。<br>现在看来老师教的还是不是很够，第一个都用过时了。</p>
<h2 id="printf修饰符"><a href="#printf修饰符" class="headerlink" title="printf修饰符"></a>printf修饰符</h2><ol>
<li>加数字，右对齐字符宽度。-实例：<code>printf(&quot;%4d&quot;,n);</code></li>
<li>.数字，对于小数表示小数后位数，比如<code>%.3lf</code><br> 对于字符串是打印字符的最大数量<br> 只使用点%.f与%.0f相同。</li>
<li>使用ll表示long long <code>%lld</code></li>
<li>使用l，对于整型表示long int，对于浮点型表示double</li>
<li>各种标记：<ol>
<li>在数字前加符号为左对齐</li>
<li><ul>
<li>是为了把在有符号数开头加’+’或者’-‘。</li>
</ul>
</li>
<li>加0对于多于的字段宽度填充0，如<code>%04d</code><br> 对于1，返回的是0001.<br> 4.加入 * 决定填入数字，<br> 需要在参数列表中新加入一个变量。<br>  常见形式为<code>%*lf</code></li>
</ol>
</li>
</ol>
<h2 id="scanf修饰符"><a href="#scanf修饰符" class="headerlink" title="scanf修饰符"></a>scanf修饰符</h2><ol>
<li><ul>
<li>只读取不赋值，这对于无用数据是有用处的 形式为类似<code>%*d</code><br> d可以任意换，以下的所有实例中的d都可以换成其他类型</li>
</ul>
</li>
<li>同样的加数字为取字段的宽，有多长取多长，别的截掉。</li>
</ol>
<p>这就是最近关于输入输出想和大家分享的内容。</p>
]]></content>
      <tags>
        <tag>C语言学习</tag>
      </tags>
  </entry>
  <entry>
    <title>千奇百怪的字符串处理函数</title>
    <url>/2023/11/20/%E5%8D%83%E5%A5%87%E7%99%BE%E6%80%AA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>最近的周赛与直播都涉及了很多我们大多没有学习过的C语言细节问题<br>今天学习了一些关于字符串、输入输出函数的知识，<br>以及整理了一下昨天晚上直播的重点内容 @21级学长zyb<br>希望能够帮到大家</p>
<h2 id="千奇百怪的字符串处理函数"><a href="#千奇百怪的字符串处理函数" class="headerlink" title="千奇百怪的字符串处理函数"></a>千奇百怪的字符串处理函数</h2><blockquote>
<p>首先声明，此处使用的函数（如图），需要加入<strong>string.h</strong>标准库<br>加入方式如下</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/20/%E5%8D%83%E5%A5%87%E7%99%BE%E6%80%AA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/1.png" alt="图片"></p>
<pre><code> 参考来自菜鸟教程
(https://www.runoob.com/cprogramming/c-strings.html)
</code></pre>
<p>这是我们在平时做题时常用的几个函数，比较易懂。<br>除此之外我还在string.h中为大家多找了几个关于<strong>搜索匹配字符</strong>的。<br>是下面这两个</p>
<p><img src="/2023/11/20/%E5%8D%83%E5%A5%87%E7%99%BE%E6%80%AA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/2.png" alt="图片1"><br><img src="/2023/11/20/%E5%8D%83%E5%A5%87%E7%99%BE%E6%80%AA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/3.png" alt="图片2"><br>（看起来可能参数与返回值都有点吓人，但也就那样。）</p>
<pre><code> 参考来自菜鸟教程
 (https://www.runoob.com/cprogramming/c-standard-library-string-h.html)
</code></pre>
<p>相信作为已经学习过函数知识的我们，已经能够学习这些新的函数了<br>要学习字符串，我们得先拥有一个字符串，字符串的定义方式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义方式</span></span><br><span class="line"><span class="type">char</span> 标识符[字符串长度];</span><br><span class="line"><span class="comment">//标识符即为名字，字符串长度可以省略。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为字符串赋值的方式</span></span><br><span class="line"><span class="type">char</span> <span class="built_in">string</span>[] = <span class="string">&quot;I&#x27;m a string!&quot;</span>;   <span class="comment">//第一种方法</span></span><br><span class="line"><span class="type">char</span> string2[<span class="number">6</span>] = <span class="string">&quot;Hello!&quot;</span>;        <span class="comment">//第二种方法</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> string3[<span class="number">10</span>];                  <span class="comment">//第三种方法</span></span><br><span class="line">gets(string3);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);                    <span class="comment">//第四种，应该是最常用的一种方法</span></span><br><span class="line"><span class="type">char</span> <span class="built_in">string</span>[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;<span class="built_in">string</span>[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sprintf(被写入字符串,&quot;写入字符串&quot;，格式化符列表)</span></span><br><span class="line"><span class="comment">//括号的后半部分与printf类似，但是它不是为了输出的。</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">sprintf</span>(string1,<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串输出的方式</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="built_in">string</span>[i]);</span><br><span class="line">	<span class="comment">//此处n也可以不定义，在使用第一或者第二种方式时</span></span><br><span class="line">	<span class="comment">//可以使用strlen函数或者sizeof运算符 - 1来代替</span></span><br><span class="line">	<span class="comment">//len代表length sizeof代表大小，sizeof包含最后的\0，那个不</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所谓的<strong>字符串</strong>，其实就是[由字符组成，以’ \0‘为结束的一维数组]。<br>’\0’标志着字符串输出的结束，\是<strong>转义符号</strong>，为了提示它不是数字0</p>
<blockquote>
<p>注意，对于字符串的scanf都不需要加取地址符&amp;。<br>包括sscanf()，虽然它是把字符串内的东西赋给变量或者其他。<br>和字符串本身无关。</p>
</blockquote>
<p>上面的函数给出了几种给字符串赋值的方式，<br>我觉得你们可能不太好理解的是以下内容：</p>
<ul>
<li>gets()与puts()函数的用法</li>
<li>1000是可以随机的吗</li>
<li>strlen函数以及sizeof的用法</li>
</ul>
<p>这里简单一说</p>
<ol>
<li>gets()就是获取一段字符串，在括号中需要加入参数，<br> 参数为字符串（字符数组）<br> puts是把字符串打印出来<br> 其实这两个相似于字符的getchar与putchar</li>
<li>1000看题目要求，看字符串的最大容量。</li>
<li>strlen是返回字符串的长度，不包含结尾的\0符号，<br> sizeof运算符对于字符串来说，是返回包括\0的长度。<br> 所以sizeof要减一。</li>
</ol>
<p>下面再说一下这些函数的效果。（看图也可。）</p>
<blockquote>
<p>1.strcpy(s1,s2);</p>
</blockquote>
<p>s1与s2是形式参数，代表两个字符串，<br>通过这个函数我们能够覆盖式地把s2复制粘贴到s1上<br>甚至长度不允许也没关系。</p>
<p>关于记忆，str是string的缩写，cpy是copy的缩写，所以strcpy嘛。<br>对于很多的函数是可以通过这种方式记忆的<br>其实用多了就自然记住了。</p>
<blockquote>
<p>2.strcat(s1,s2);</p>
</blockquote>
<p>s1,s2作用不再赘述。<br>把s2连接到s1的末尾，改变s1。<br>可以通过输出看s1的变化，</p>
<blockquote>
<p>3.strlen(s1)<br>返回s1的去掉结尾符号的长度，已经讲过。</p>
</blockquote>
<blockquote>
<p>4.strcmp(s1,s2);<br>从第一个字符开始比较，找到不一样的字符，看哪一个更大，哪个字符串就更大。<br>昨晚在直播中学长讲过了。<br>大小与返回值的关系请见图。</p>
</blockquote>
<blockquote>
<p>5.strpbrk(const char* str1, const char* str2);</p>
</blockquote>
<pre><code>关于常量字符串为什么这样写我还不太明白，我想让群里的大佬给我解释解释。
</code></pre>
<p>分析第一个字符串的字符，与第二个字符串内的字符比对<br>只要找出两个字符串都包含的字符就返回那个字符。</p>
<pre><code>很好理解。
比如，&quot;AABB&quot;与&quot;BCDE&quot;，就会返回B。
</code></pre>
<blockquote>
<p>6.strspn(const char* str1, const char* str2);</p>
</blockquote>
<p>也是分析两个字符串的字符，逐对分析，直到找到两字符串位置一样但不一样的字符。<br>返回那个字符的下标，注意不是字符。</p>
<p>想要给大家说这些的原因是，有些数字的位数处理用字符串可能会更快，<br>比如在周五的练习六题解里的那一道题，去第一位与最后一位为素数。<br>这在我刚开始学习C语言的时候就感觉到了。<br>Python中的字符串处理有很多的内建函数，处理起来很方便。<br>但是C语言中竟然连字符串变量都不能定义，而且定义与赋值起来很麻烦。<br>所以学好字符串还是很有必要的。</p>
<p>还有一个是 @空梦Kmar 的建议<br>尽量使用C标准库函数，这样能够极大地优化程序的效率。<br>详细的建议在他的博客里，第一条就是优先使用库函数。<br><a href="https://kmar.top/posts/51979312/">关于C语言编码的一些建议 | 山岳库博 (kmar.top)</a><br>包括昨晚学长提到的qsort函数，就解决了我们排序数组的问题<br>还有用于交换数组排序的swap函数。<br>所以学习C语言标准库而不是自己写还是很好的，而且很省事。</p>
]]></content>
      <tags>
        <tag>C语言学习</tag>
      </tags>
  </entry>
  <entry>
    <title>OJ中的那些小丑行为</title>
    <url>/2023/11/20/OJ%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E5%B0%8F%E4%B8%91%E8%A1%8C%E4%B8%BA/</url>
    <content><![CDATA[<p>在平时做OJ的时候，我们会经常遇到很多不经意间犯的错误，<br>有些时候错得自己像小丑一样。</p>
<p><img src="/2023/11/20/OJ%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E5%B0%8F%E4%B8%91%E8%A1%8C%E4%B8%BA/OJclown.png" alt="My feelings"></p>
<p>我想的是把寻找错误的思路与错误会导致的结果总结一下，给自己以指导。</p>
<ol>
<li>编译错误引火线</li>
</ol>
<ul>
<li>复制到做题平台上时复制漏了一些东西。 -不必多讲。</li>
<li>if语句后加了分号，导致出现对于else语句的错误。</li>
<li>变量重名，或者没改完一些变量的名字。</li>
<li>忘了一些分号。</li>
<li>int mian（int main）或者stdio打错了</li>
<li>修改程序的时候忘了关黑框，有时候会不能编译新的文件。</li>
<li>for循环中分号用成逗号</li>
<li>函数声明与定义部分，都需要对于形式变量的数据类型进行设置。</li>
</ul>
<ol start="2">
<li>运行错误引火线</li>
</ol>
<ul>
<li>for循环中计数的变量（比如i,j）从小数到大数的时候用了减，从大数到小数的时候用了加<br>  死循环，for循环变量改变没有朝着限定条件来改，永远不会达到那个条件，退出。</li>
</ul>
<ol start="3">
<li>程序结果错误引火线</li>
</ol>
<ul>
<li><p>scanf没有加取址符，printf加了取址符<br>  scanf不加的话，就不会对于变量进行赋值操作<br>  printf加的话，返回的是变量的储存地址，垃圾数据。</p>
</li>
<li><p>部分需要累加或者累乘的数据，比如sum等，没有在开始的时候设置为0（+）或者1（ * ）<br>  数据起始值不知道，一定不能够经过累加或者累乘得到相应的结果。</p>
</li>
<li><p>循环完一次的结果归零。<br>  有些循环比如while进行多实例检测的时候，会执行多个循环，<br>  如果某些计数的变量没有归零，会导致数据很离谱。</p>
</li>
<li><p>判断相等运算符 &#x3D;&#x3D; 写成赋值运算符 &#x3D;<br>  建议把变量放后面，值放前面，这样如果犯这个错的话会报错</p>
</li>
<li><p>赋值运算符&#x3D;的结合性不清楚。<br>  用变量给变量赋值时，有可能反而用没有赋值的变量给赋过值的变量赋值，数据一定错。</p>
</li>
<li><p>double转int的坑<br>  double储存的数据是近似值，切去小数点后有可能数据-1<br>  届时答案对不对完全看你运气。</p>
</li>
<li><p>数据类型对应的格式化符在更改变量类型的时候没有改变。</p>
</li>
<li><p>switch语句中漏写了一个break。<br>  直接不受控地向下面的case进发，全部执行，直到遇到新的break。</p>
</li>
<li><p>scanf中的格式加空格就算了，别的不要轻易加。</p>
</li>
<li></li>
<li><p>多字符输入的时候，注意处理回车与空格，一般用getchar来解决</p>
</li>
</ul>
<p>检查的思路：</p>
<ol>
<li>首先基本问题，不要出编译错误，对于一些常见符号要打对<br> 比如，scanf中的&amp;符号，各个语句后面的分号，大括号不要漏一边。</li>
<li>然后，看修改变量的时候有没有注意类型，<br>相应的标识符还有对应的在scanf中或者printf中的格式化%符有没有改</li>
<li>接着看循环，<br>对于for，看它的循环变量是否能够达到那个限定条件，是不是会死循环<br>对于while，看它程序结束后是否真的能够得到你想要的结果。也要注意死循环。<br>看分支，看if语句的限定是否满足自己想要的条件，是否存在&#x3D;&#x3D; 写成&#x3D;的情况。<br>看switch语句的break。</li>
<li>最后，再检查一下自己是不是一些形式上的错误，复制粘贴等不合适。</li>
</ol>
]]></content>
      <tags>
        <tag>C语言学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/11/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2023/11/07/%E6%95%B0%E7%BB%84-1/</url>
    <content><![CDATA[<h1 id="数组概论（Ver-2）"><a href="#数组概论（Ver-2）" class="headerlink" title="数组概论（Ver 2）"></a>数组概论（Ver 2）</h1><p>战友们晚上好！今晚因为电脑的原因本来写好的稿子不能提前交上了，抱歉。<br>今天大体讲一下关于数组的内容，看完就可以使用来做题了。</p>
<p>目录请见群里发送的图片</p>
<h2 id="1-数组基本用法"><a href="#1-数组基本用法" class="headerlink" title="1.数组基本用法"></a>1.数组基本用法</h2><h3 id="1-1-数组的初始化"><a href="#1-1-数组的初始化" class="headerlink" title="1.1 数组的初始化"></a>1.1 数组的初始化</h3><p>我们知道，要使用一个变量，我们需要先“声明”才能够使用，<br>数组也是这样的，但作为一个数据容器，它还有大小这个参数。<br>大体格式是这样的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;数据类型&gt; &lt;标识符&gt;[长度];</span><br><span class="line"><span class="comment">//也可以在长度后面加上=&#123;&#125;，但是数组不确定的时候，没必要。</span></span><br></pre></td></tr></table></figure>
<p>这里的<strong>数据类型</strong>就是我们常用的int,double,char等等，<br>表示数组内元素的数据类型</p>
<p><strong>标识符</strong>是数组的名称，命名时也符合变量的命名规范<br>比如这样</p>
<blockquote>
<p>不能以数字、标点符号（很多标点符号如，或者括号都是运算符）开头，<br>不能使用关键字（会语法高亮的字比如int）<br>最好使用这种形式 数据类型的首字母加上名称，如iArray1</p>
</blockquote>
<p><strong>长度</strong>是可以省略的，但只在数组完全确定的时候。<br>但是我们在做题的过程中一般不使用确定的数组<br>（数组可以预先指定好元素的值，如下例）<br>一般是题目告诉我们最多的时候数据有多少个，<br>我们一般取很大的数，如1000、10000等。<br>像iArray0这样。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> iArray0[<span class="number">1000</span>]; <span class="comment">//相信我，这会是你们用的频率最多的那种。</span></span><br><span class="line"><span class="type">int</span> iArray1[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//确定数组</span></span><br><span class="line"><span class="type">int</span> iArray2[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;      <span class="comment">//int与double类型都是空位补零。</span></span><br><span class="line"><span class="type">int</span> iArray3[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;   <span class="comment">//省略长度，相当于iArray1</span></span><br></pre></td></tr></table></figure>

<p>其中，对于iArray3，规定了长度，但是没有确定完5个元素，<br>其他的元素对于int类型数组用0填上<br>但对于char类型的数组，用的是一个字符<code>\0</code>，以后学字符串的时候会接触到<br>这个字符提前，那么输出的时候就会提前结束。</p>
<h3 id="1-2-数组的数据储存输出"><a href="#1-2-数组的数据储存输出" class="headerlink" title="1.2 数组的数据储存输出"></a>1.2 数组的数据储存输出</h3><p>已经声明完了，那么接下来就是往容器里加入数据<br>方式依旧是我们惯用的scanf函数。<br>但是这里就要到一个很容易错的点了：<strong>下标</strong><br>先看下面的演示，我们这样来写入数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这也是一种惯用模式吧，像今天下午老师总结的那个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;iArray0[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里拿iArray来举例子，长度为n，n的定义与赋值这里省略掉</span></span><br></pre></td></tr></table></figure>

<p>相信聪明的你已经看到了，我们的<strong>i是从0开始取的</strong>，<br>那么<code>iArray0[0]</code>也就表示在<code>iArray0</code>数组里的第一项，所以最后的一项的下标是n - 1。<br>这个特性一定要记好，要好好练习啊！<br>（不然以后写for循环的时候用了0-n，错在哪都不知道，找谁哭去？）</p>
<p>那么也像储存一样，我们也是用printf函数加上for循环来输出的<br>（这比起某种语言真的太麻烦啦！差评）</p>
<p>所以这就是数组使用的几乎全部，其他都是一些形式上的改变，已经可以开始上手了。</p>
<h2 id="2-多维数组"><a href="#2-多维数组" class="headerlink" title="2.多维数组"></a>2.多维数组</h2><p>也是简单一说，在平常做题的时候这种数组不会很频繁地用到。<br>如果一维数组只有一个长度参数的话，二维就有两个，相当于平面直角坐标系。<br>就像下面这样<br>    0   1   2<br>0<br>1<br>2<br>二维数组用两个参数确定一个值，<br>也就是说在<strong>scanf输入、声明、printf输出</strong>的时候也需要两个括号。<br>几维数组就是几个括号，其他的表示方式其实与一维数组差不多。</p>
<blockquote>
<p>1.空位自动补上对应的数值<br>2.在数组确定的时候是可以省略长度参数的<br>3.确定的时候稍有不同，可以有两种确定方式，如下。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> iArray4[<span class="number">1000</span>][<span class="number">1000</span>];  <span class="comment">//最常用的,等待输入</span></span><br><span class="line"><span class="type">int</span> iArray5[<span class="number">2</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//或者int iArray5[2][5] = &#123;1,2,3,4,5,2,3,4,5,6&#125;;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-数组的应用场景"><a href="#3-数组的应用场景" class="headerlink" title="3.数组的应用场景"></a>3.数组的应用场景</h2><p>从这几次周赛的题目来看，我们使用数组的目的是<strong>储存数据</strong>，<br>也就是当我们<strong>需要不止一次地遍历数据，而且数据很多</strong>的时候，我们就可以使用数组。<br>（不多的时候，两三个直接用变量存就好了）<br>这里拿出两种题，<br>一种是n个数求和，我们定义一个sum变量，<br>直接输入一个加一次就可以，每一个数据加完就不再用了，不需要用数组。<br>但是，这次周赛的群友发言计数器那道题就需要对于ID统计出现次数，<br>这就需要遍历数组了，需要在输入之后再次使用所有数据。</p>
<p>所以这就是数组我了解的大致内容，如果有不懂的地方欢迎交流提问。<br>我的分享到此结束！谢谢大家的时间！</p>
]]></content>
      <tags>
        <tag>C语言学习</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制方法</title>
    <url>/2023/08/30/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>今天，在大多数编程语言中，都提供两种循环结构，一种是<strong>以数据容器为基础的</strong>，一种是<strong>以条件为基础的</strong>。</p>
<p>#if语句</p>
<h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><strong>if语句</strong></h1><p>你其实能发现，这一页可以构成一个粗略的if嵌套循环。</p>
<p>if语句的最简单构成是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">	statements</span><br></pre></td></tr></table></figure>
<p>如果expression返回值为真，则执行statements，否则执行下面的语句。</p>
<p>如果想让它对两种互补的情况操作，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">	statements_for_true</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	statements_for_false</span><br></pre></td></tr></table></figure>
<p>如果有更多的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression1:</span><br><span class="line">	statements_for_expresson1_True</span><br><span class="line"><span class="keyword">elif</span> expression2:</span><br><span class="line">	statements_for_expression2_True</span><br><span class="line"><span class="keyword">elif</span> expression2:</span><br><span class="line">	statements_for_expression3_True</span><br></pre></td></tr></table></figure>
<p>其中，<em>elif</em>是<em>else if</em>的缩写，用法相同。</p>
<p>#for循环</p>
<h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><strong>for循环</strong></h1><p>用来对于数据容器(<strong>尤其是有序容器</strong>)中的数据逐个操作的循环<br>for循环是以集合为基础的循环。<br>for后的‘for i in is’，如果<code>i in is</code>为<em>False</em><br>即<strong>i无值或is为空的</strong><br>则下面的语句不会被执行。</p>
<p>#continue #break #pass</p>
<h1 id="Continue、Break和Pass语句"><a href="#Continue、Break和Pass语句" class="headerlink" title="Continue、Break和Pass语句"></a>Continue、Break和Pass语句</h1><p><em>Continue</em>语句将忽略其后的语句开始下一次循环。<br><em>Break</em>从此结束循环。<br><em>Pass</em>什么也不干，是用来占位的。</p>
<p>#while循环</p>
<h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><p>while循环的格式如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> expression:</span><br><span class="line">	statements</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python学习</category>
      </categories>
  </entry>
</search>
